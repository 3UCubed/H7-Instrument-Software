
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aad0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801ad70  0801ad70  0002ad70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b208  0801b208  0002b208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b210  0801b210  0002b210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b214  0801b214  0002b214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000138  24000000  0801b218  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801b350  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801b350  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 10 .debug_info   000410d1  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d6b  00000000  00000000  00071237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc0  00000000  00000000  00078fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002878  00000000  00000000  0007bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046855  00000000  00000000  0007e3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004331f  00000000  00000000  000c4c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196b64  00000000  00000000  00107f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029eab8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd08  00000000  00000000  0029eb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ad58 	.word	0x0801ad58

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801ad58 	.word	0x0801ad58

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fe1d 	bl	80062a8 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f9cc 	bl	8003a10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 ff38 	bl	80074f8 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f9bf 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 f87b 	bl	80067b0 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f9a6 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 f86d 	bl	80067b0 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f998 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 f85f 	bl	80067b0 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f98a 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 f851 	bl	80067b0 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f97c 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 f842 	bl	80067b0 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f96d 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 f833 	bl	80067b0 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f95e 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 f824 	bl	80067b0 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f94f 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 f815 	bl	80067b0 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f940 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f006 f806 	bl	80067b0 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f931 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fff7 	bl	80067b0 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f922 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 ffe8 	bl	80067b0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f913 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 fd05 	bl	80062a8 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f8b4 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 ff70 	bl	80067b0 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f89b 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 ff62 	bl	80067b0 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f88d 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 ff54 	bl	80067b0 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f87f 	bl	8003a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 ff46 	bl	80067b0 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f871 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fc70 	bl	800b2e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fc64 	bl	800b2e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fc58 	bl	800b2e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 fb03 	bl	8008080 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 ffc6 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 f9be 	bl	8005e60 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 f9b8 	bl	8005e60 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 faa3 	bl	8008080 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 ff66 	bl	8003a10 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 fbdd 	bl	801a34c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fe6b 	bl	8007874 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 ff34 	bl	8003a10 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 f886 	bl	8007cd4 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 ff1f 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a fb43 	bl	800b2e0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 f9ee 	bl	8008080 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 feb1 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fdb0 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fdc7 	bl	8007858 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fd87 	bl	8007824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fd9e 	bl	8007858 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fd7f 	bl	8007824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fd96 	bl	8007858 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fd77 	bl	8007824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fd8e 	bl	8007858 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fd6f 	bl	8007824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fd86 	bl	8007858 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fd67 	bl	8007824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fd7e 	bl	8007858 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fd5f 	bl	8007824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fd76 	bl	8007858 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fd57 	bl	8007824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fd6e 	bl	8007858 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fd4f 	bl	8007824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fd66 	bl	8007858 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 fabe 	bl	801a34c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a f8c6 	bl	800affc <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00a f86b 	bl	800affc <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 feb8 	bl	800ad2c <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1c      	cmp	r3, #28
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fe0c 	bl	800ad2c <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 ff18 	bl	800affc <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 feb5 	bl	800affc <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fd02 	bl	800ad2c <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fde0 	bl	800affc <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1c      	cmp	r3, #28
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fbeb 	bl	800ad2c <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fcf8 	bl	800affc <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fdaa 	bl	801a34c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fbd3 	bl	800affc <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 fa21 	bl	800ad2c <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 fb35 	bl	800affc <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fc45 	bl	801a34c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fc3c 	bl	801a34c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 f8ed 	bl	800ad2c <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 f8da 	bl	800ad2c <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 fb87 	bl	801a34c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 fb80 	bl	801a34c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 f833 	bl	800ad2c <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1c      	cmp	r3, #28
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f009 f84b 	bl	800ae50 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 f8f3 	bl	800affc <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 ff3f 	bl	800ad2c <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <__NVIC_SystemReset>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_SystemReset+0x28>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
    __NOP();
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <__NVIC_SystemReset+0x20>
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0004 	.word	0x05fa0004

08001f5c <handle_error>:
 * set the previous error to whatever error we are currently handling, send an error packet,
 * and enter IDLE mode. Additional actions are taken depending on the error category.
 *
 * @param error Error given by the caller.
 */
void handle_error(ERROR_STRUCT error) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	80b8      	strh	r0, [r7, #4]
#ifdef ERROR_HANDLING_ENABLED
	increment_error_counter(error);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f853 	bl	8002010 <increment_error_counter>
	set_previous_error(error);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8b4 	bl	80020d8 <set_previous_error>
	send_current_error_packet(error);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fa5d 	bl	8002430 <send_current_error_packet>
	osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <handle_error+0x50>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f015 f91f 	bl	80171c0 <osEventFlagsSet>

	switch (error.category) {
 8001f82:	793b      	ldrb	r3, [r7, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d008      	beq.n	8001f9a <handle_error+0x3e>
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	dc08      	bgt.n	8001f9e <handle_error+0x42>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <handle_error+0x3a>
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d006      	beq.n	8001fa2 <handle_error+0x46>
	case EC_peripheral:
		NVIC_SystemReset();
		break;
	default:
		// Should not be possible to get here
		break;
 8001f94:	e003      	b.n	8001f9e <handle_error+0x42>
		NVIC_SystemReset();
 8001f96:	f7ff ffcb 	bl	8001f30 <__NVIC_SystemReset>
		NVIC_SystemReset();
 8001f9a:	f7ff ffc9 	bl	8001f30 <__NVIC_SystemReset>
		break;
 8001f9e:	bf00      	nop
 8001fa0:	e000      	b.n	8001fa4 <handle_error+0x48>
		break;
 8001fa2:	bf00      	nop
	}
#endif
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	24001a98 	.word	0x24001a98

08001fb0 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fb6:	f008 ff4b 	bl	800ae50 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fba:	f7fe feed 	bl	8000d98 <EE_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <error_counter_init+0x18>
		Error_Handler();
 8001fc4:	f001 fd24 	bl	8003a10 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	e013      	b.n	8001ff6 <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001fce:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <error_counter_init+0x58>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	490c      	ldr	r1, [pc, #48]	; (800200c <error_counter_init+0x5c>)
 8001fdc:	440b      	add	r3, r1
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f7ff fb91 	bl	8001708 <EE_ReadVariable>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <error_counter_init+0x40>
			Error_Handler();
 8001fec:	f001 fd10 	bl	8003a10 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b1a      	cmp	r3, #26
 8001ffa:	dde8      	ble.n	8001fce <error_counter_init+0x1e>
		}
	}
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	24000000 	.word	0x24000000
 800200c:	240003a4 	.word	0x240003a4

08002010 <increment_error_counter>:
 * local_cpy array. To see what index a particular error is stored in, just check the value
 * each category or detail is assigned in the header file.
 *
 * @param error Error given by the caller.
 */
void increment_error_counter(ERROR_STRUCT error) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 8002018:	793b      	ldrb	r3, [r7, #4]
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <increment_error_counter+0x38>)
 800201c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002020:	3201      	adds	r2, #1
 8002022:	b291      	uxth	r1, r2
 8002024:	4a08      	ldr	r2, [pc, #32]	; (8002048 <increment_error_counter+0x38>)
 8002026:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800202a:	797b      	ldrb	r3, [r7, #5]
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <increment_error_counter+0x38>)
 800202e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002032:	3201      	adds	r2, #1
 8002034:	b291      	uxth	r1, r2
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <increment_error_counter+0x38>)
 8002038:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 800203c:	f000 f806 	bl	800204c <update_error_counter>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	240003a4 	.word	0x240003a4

0800204c <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter(){
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	e013      	b.n	8002080 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <update_error_counter+0x44>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <update_error_counter+0x48>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f7ff fb94 	bl	8001798 <EE_WriteVariable>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <update_error_counter+0x2e>
			Error_Handler();
 8002076:	f001 fccb 	bl	8003a10 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3301      	adds	r3, #1
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b1a      	cmp	r3, #26
 8002084:	dde8      	ble.n	8002058 <update_error_counter+0xc>
		}
	}
}
 8002086:	bf00      	nop
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	24000000 	.word	0x24000000
 8002094:	240003a4 	.word	0x240003a4

08002098 <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters() {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	e00f      	b.n	80020c4 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <reset_error_counters+0x3c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fb72 	bl	8001798 <EE_WriteVariable>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <reset_error_counters+0x26>
			Error_Handler();
 80020ba:	f001 fca9 	bl	8003a10 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3301      	adds	r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b1a      	cmp	r3, #26
 80020c8:	ddec      	ble.n	80020a4 <reset_error_counters+0xc>
		}
	}
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	24000000 	.word	0x24000000

080020d8 <set_previous_error>:
/**
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	80b8      	strh	r0, [r7, #4]
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <set_previous_error+0x44>)
 80020e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e4:	793a      	ldrb	r2, [r7, #4]
 80020e6:	b292      	uxth	r2, r2
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fb54 	bl	8001798 <EE_WriteVariable>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <set_previous_error+0x22>
		Error_Handler();
 80020f6:	f001 fc8b 	bl	8003a10 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <set_previous_error+0x44>)
 80020fc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80020fe:	797a      	ldrb	r2, [r7, #5]
 8002100:	b292      	uxth	r2, r2
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fb47 	bl	8001798 <EE_WriteVariable>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <set_previous_error+0x3c>
		Error_Handler();
 8002110:	f001 fc7e 	bl	8003a10 <Error_Handler>
	}
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	24000000 	.word	0x24000000

08002120 <get_previous_error>:
/**
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error() {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <get_previous_error+0x5c>)
 8002128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212a:	1dba      	adds	r2, r7, #6
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff faea 	bl	8001708 <EE_ReadVariable>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <get_previous_error+0x1e>
		Error_Handler();
 800213a:	f001 fc69 	bl	8003a10 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <get_previous_error+0x5c>)
 8002140:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002142:	1d3a      	adds	r2, r7, #4
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fade 	bl	8001708 <EE_ReadVariable>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <get_previous_error+0x36>
		Error_Handler();
 8002152:	f001 fc5d 	bl	8003a10 <Error_Handler>
	}

	prev_error.category = category;
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	723b      	strb	r3, [r7, #8]
	prev_error.detail = detail;
 800215c:	88bb      	ldrh	r3, [r7, #4]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	727b      	strb	r3, [r7, #9]

	return prev_error;
 8002162:	893b      	ldrh	r3, [r7, #8]
 8002164:	81bb      	strh	r3, [r7, #12]
 8002166:	2300      	movs	r3, #0
 8002168:	7b3a      	ldrb	r2, [r7, #12]
 800216a:	f362 0307 	bfi	r3, r2, #0, #8
 800216e:	7b7a      	ldrb	r2, [r7, #13]
 8002170:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	24000000 	.word	0x24000000

08002180 <send_error_counter_packet>:
 * @brief Creates and sends a packet containing all 27 error counters.
 *
 * There is an error counter for every single category and detail.
 * This type of packet is only sent during sync.
 */
void send_error_counter_packet() {
 8002180:	b580      	push	{r7, lr}
 8002182:	b08e      	sub	sp, #56	; 0x38
 8002184:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 8002186:	23cc      	movs	r3, #204	; 0xcc
 8002188:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 800218a:	23cc      	movs	r3, #204	; 0xcc
 800218c:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 800218e:	4b98      	ldr	r3, [pc, #608]	; (80023f0 <send_error_counter_packet+0x270>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	b29b      	uxth	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 800219a:	4b95      	ldr	r3, [pc, #596]	; (80023f0 <send_error_counter_packet+0x270>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 80021a2:	4b93      	ldr	r3, [pc, #588]	; (80023f0 <send_error_counter_packet+0x270>)
 80021a4:	885b      	ldrh	r3, [r3, #2]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 80021ae:	4b90      	ldr	r3, [pc, #576]	; (80023f0 <send_error_counter_packet+0x270>)
 80021b0:	885b      	ldrh	r3, [r3, #2]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 80021b6:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <send_error_counter_packet+0x270>)
 80021b8:	889b      	ldrh	r3, [r3, #4]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 80021c2:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <send_error_counter_packet+0x270>)
 80021c4:	889b      	ldrh	r3, [r3, #4]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 80021ca:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <send_error_counter_packet+0x270>)
 80021cc:	88db      	ldrh	r3, [r3, #6]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 80021d6:	4b86      	ldr	r3, [pc, #536]	; (80023f0 <send_error_counter_packet+0x270>)
 80021d8:	88db      	ldrh	r3, [r3, #6]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 80021de:	4b84      	ldr	r3, [pc, #528]	; (80023f0 <send_error_counter_packet+0x270>)
 80021e0:	891b      	ldrh	r3, [r3, #8]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 80021ea:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <send_error_counter_packet+0x270>)
 80021ec:	891b      	ldrh	r3, [r3, #8]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <send_error_counter_packet+0x270>)
 80021f4:	895b      	ldrh	r3, [r3, #10]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <send_error_counter_packet+0x270>)
 8002200:	895b      	ldrh	r3, [r3, #10]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 8002206:	4b7a      	ldr	r3, [pc, #488]	; (80023f0 <send_error_counter_packet+0x270>)
 8002208:	899b      	ldrh	r3, [r3, #12]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 8002212:	4b77      	ldr	r3, [pc, #476]	; (80023f0 <send_error_counter_packet+0x270>)
 8002214:	899b      	ldrh	r3, [r3, #12]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 800221a:	4b75      	ldr	r3, [pc, #468]	; (80023f0 <send_error_counter_packet+0x270>)
 800221c:	89db      	ldrh	r3, [r3, #14]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	b29b      	uxth	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 8002226:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <send_error_counter_packet+0x270>)
 8002228:	89db      	ldrh	r3, [r3, #14]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 800222e:	4b70      	ldr	r3, [pc, #448]	; (80023f0 <send_error_counter_packet+0x270>)
 8002230:	8a1b      	ldrh	r3, [r3, #16]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	b29b      	uxth	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 800223a:	4b6d      	ldr	r3, [pc, #436]	; (80023f0 <send_error_counter_packet+0x270>)
 800223c:	8a1b      	ldrh	r3, [r3, #16]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 8002242:	4b6b      	ldr	r3, [pc, #428]	; (80023f0 <send_error_counter_packet+0x270>)
 8002244:	8a5b      	ldrh	r3, [r3, #18]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	b29b      	uxth	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 800224e:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <send_error_counter_packet+0x270>)
 8002250:	8a5b      	ldrh	r3, [r3, #18]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 8002256:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <send_error_counter_packet+0x270>)
 8002258:	8a9b      	ldrh	r3, [r3, #20]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <send_error_counter_packet+0x270>)
 8002264:	8a9b      	ldrh	r3, [r3, #20]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 800226a:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <send_error_counter_packet+0x270>)
 800226c:	8adb      	ldrh	r3, [r3, #22]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 8002276:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <send_error_counter_packet+0x270>)
 8002278:	8adb      	ldrh	r3, [r3, #22]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 800227e:	4b5c      	ldr	r3, [pc, #368]	; (80023f0 <send_error_counter_packet+0x270>)
 8002280:	8b1b      	ldrh	r3, [r3, #24]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 800228a:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <send_error_counter_packet+0x270>)
 800228c:	8b1b      	ldrh	r3, [r3, #24]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 8002292:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <send_error_counter_packet+0x270>)
 8002294:	8b5b      	ldrh	r3, [r3, #26]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b29b      	uxth	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <send_error_counter_packet+0x270>)
 80022a0:	8b5b      	ldrh	r3, [r3, #26]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 80022a6:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <send_error_counter_packet+0x270>)
 80022a8:	8b9b      	ldrh	r3, [r3, #28]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 80022b2:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <send_error_counter_packet+0x270>)
 80022b4:	8b9b      	ldrh	r3, [r3, #28]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 80022ba:	4b4d      	ldr	r3, [pc, #308]	; (80023f0 <send_error_counter_packet+0x270>)
 80022bc:	8bdb      	ldrh	r3, [r3, #30]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 80022c8:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <send_error_counter_packet+0x270>)
 80022ca:	8bdb      	ldrh	r3, [r3, #30]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <send_error_counter_packet+0x270>)
 80022d4:	8c1b      	ldrh	r3, [r3, #32]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	b29b      	uxth	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 80022e0:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <send_error_counter_packet+0x270>)
 80022e2:	8c1b      	ldrh	r3, [r3, #32]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <send_error_counter_packet+0x270>)
 80022ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 80022f8:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <send_error_counter_packet+0x270>)
 80022fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 8002302:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <send_error_counter_packet+0x270>)
 8002304:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	b29b      	uxth	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 8002310:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <send_error_counter_packet+0x270>)
 8002312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 800231a:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <send_error_counter_packet+0x270>)
 800231c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	b29b      	uxth	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 8002328:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <send_error_counter_packet+0x270>)
 800232a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <send_error_counter_packet+0x270>)
 8002334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b29b      	uxth	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <send_error_counter_packet+0x270>)
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <send_error_counter_packet+0x270>)
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b29b      	uxth	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <send_error_counter_packet+0x270>)
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <send_error_counter_packet+0x270>)
 8002364:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	b29b      	uxth	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <send_error_counter_packet+0x270>)
 8002372:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <send_error_counter_packet+0x270>)
 800237c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29b      	uxth	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <send_error_counter_packet+0x270>)
 800238a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <send_error_counter_packet+0x270>)
 8002394:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <send_error_counter_packet+0x270>)
 80023a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <send_error_counter_packet+0x270>)
 80023ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <send_error_counter_packet+0x270>)
 80023ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <send_error_counter_packet+0x270>)
 80023c4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <send_error_counter_packet+0x270>)
 80023d2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 80023da:	4639      	mov	r1, r7
 80023dc:	2364      	movs	r3, #100	; 0x64
 80023de:	2238      	movs	r2, #56	; 0x38
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <send_error_counter_packet+0x274>)
 80023e2:	f011 ff89 	bl	80142f8 <HAL_UART_Transmit>
}
 80023e6:	bf00      	nop
 80023e8:	3738      	adds	r7, #56	; 0x38
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	240003a4 	.word	0x240003a4
 80023f4:	24001e3c 	.word	0x24001e3c

080023f8 <send_previous_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet() {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 80023fe:	f7ff fe8f 	bl	8002120 <get_previous_error>
 8002402:	4603      	mov	r3, r0
 8002404:	80bb      	strh	r3, [r7, #4]

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 8002406:	23aa      	movs	r3, #170	; 0xaa
 8002408:	703b      	strb	r3, [r7, #0]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 800240a:	23aa      	movs	r3, #170	; 0xaa
 800240c:	707b      	strb	r3, [r7, #1]
	buffer[2] = prev_error.category;
 800240e:	793b      	ldrb	r3, [r7, #4]
 8002410:	70bb      	strb	r3, [r7, #2]
	buffer[3] = prev_error.detail;
 8002412:	797b      	ldrb	r3, [r7, #5]
 8002414:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 8002416:	4639      	mov	r1, r7
 8002418:	2364      	movs	r3, #100	; 0x64
 800241a:	2204      	movs	r2, #4
 800241c:	4803      	ldr	r0, [pc, #12]	; (800242c <send_previous_error_packet+0x34>)
 800241e:	f011 ff6b 	bl	80142f8 <HAL_UART_Transmit>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	24001e3c 	.word	0x24001e3c

08002430 <send_current_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	80b8      	strh	r0, [r7, #4]
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 8002438:	23bb      	movs	r3, #187	; 0xbb
 800243a:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 800243c:	23bb      	movs	r3, #187	; 0xbb
 800243e:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 8002440:	793b      	ldrb	r3, [r7, #4]
 8002442:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 8002444:	797b      	ldrb	r3, [r7, #5]
 8002446:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 8002448:	f107 010c 	add.w	r1, r7, #12
 800244c:	2364      	movs	r3, #100	; 0x64
 800244e:	2204      	movs	r2, #4
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <send_current_error_packet+0x30>)
 8002452:	f011 ff51 	bl	80142f8 <HAL_UART_Transmit>
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	24001e3c 	.word	0x24001e3c

08002464 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <vApplicationTickHook+0x18>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3301      	adds	r3, #1
 800246e:	4a03      	ldr	r2, [pc, #12]	; (800247c <vApplicationTickHook+0x18>)
 8002470:	6013      	str	r3, [r2, #0]
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	24001ae0 	.word	0x24001ae0

08002480 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 800249c:	4a24      	ldr	r2, [pc, #144]	; (8002530 <MX_FREERTOS_Init+0x98>)
 800249e:	2100      	movs	r1, #0
 80024a0:	4824      	ldr	r0, [pc, #144]	; (8002534 <MX_FREERTOS_Init+0x9c>)
 80024a2:	f014 fd81 	bl	8016fa8 <osThreadNew>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <MX_FREERTOS_Init+0xa0>)
 80024aa:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80024ac:	4a23      	ldr	r2, [pc, #140]	; (800253c <MX_FREERTOS_Init+0xa4>)
 80024ae:	2100      	movs	r1, #0
 80024b0:	4823      	ldr	r0, [pc, #140]	; (8002540 <MX_FREERTOS_Init+0xa8>)
 80024b2:	f014 fd79 	bl	8016fa8 <osThreadNew>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4a22      	ldr	r2, [pc, #136]	; (8002544 <MX_FREERTOS_Init+0xac>)
 80024ba:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80024bc:	4a22      	ldr	r2, [pc, #136]	; (8002548 <MX_FREERTOS_Init+0xb0>)
 80024be:	2100      	movs	r1, #0
 80024c0:	4822      	ldr	r0, [pc, #136]	; (800254c <MX_FREERTOS_Init+0xb4>)
 80024c2:	f014 fd71 	bl	8016fa8 <osThreadNew>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4a21      	ldr	r2, [pc, #132]	; (8002550 <MX_FREERTOS_Init+0xb8>)
 80024ca:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 80024cc:	4a21      	ldr	r2, [pc, #132]	; (8002554 <MX_FREERTOS_Init+0xbc>)
 80024ce:	2100      	movs	r1, #0
 80024d0:	4821      	ldr	r0, [pc, #132]	; (8002558 <MX_FREERTOS_Init+0xc0>)
 80024d2:	f014 fd69 	bl	8016fa8 <osThreadNew>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4a20      	ldr	r2, [pc, #128]	; (800255c <MX_FREERTOS_Init+0xc4>)
 80024da:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 80024dc:	4a20      	ldr	r2, [pc, #128]	; (8002560 <MX_FREERTOS_Init+0xc8>)
 80024de:	2100      	movs	r1, #0
 80024e0:	4820      	ldr	r0, [pc, #128]	; (8002564 <MX_FREERTOS_Init+0xcc>)
 80024e2:	f014 fd61 	bl	8016fa8 <osThreadNew>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <MX_FREERTOS_Init+0xd0>)
 80024ea:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 80024ec:	4a1f      	ldr	r2, [pc, #124]	; (800256c <MX_FREERTOS_Init+0xd4>)
 80024ee:	2100      	movs	r1, #0
 80024f0:	481f      	ldr	r0, [pc, #124]	; (8002570 <MX_FREERTOS_Init+0xd8>)
 80024f2:	f014 fd59 	bl	8016fa8 <osThreadNew>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <MX_FREERTOS_Init+0xdc>)
 80024fa:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 80024fc:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <MX_FREERTOS_Init+0xe0>)
 80024fe:	2100      	movs	r1, #0
 8002500:	481e      	ldr	r0, [pc, #120]	; (800257c <MX_FREERTOS_Init+0xe4>)
 8002502:	f014 fd51 	bl	8016fa8 <osThreadNew>
 8002506:	4603      	mov	r3, r0
 8002508:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <MX_FREERTOS_Init+0xe8>)
 800250a:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <MX_FREERTOS_Init+0xec>)
 800250e:	2100      	movs	r1, #0
 8002510:	481d      	ldr	r0, [pc, #116]	; (8002588 <MX_FREERTOS_Init+0xf0>)
 8002512:	f014 fd49 	bl	8016fa8 <osThreadNew>
 8002516:	4603      	mov	r3, r0
 8002518:	4a1c      	ldr	r2, [pc, #112]	; (800258c <MX_FREERTOS_Init+0xf4>)
 800251a:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 800251c:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <MX_FREERTOS_Init+0xf8>)
 800251e:	2100      	movs	r1, #0
 8002520:	481c      	ldr	r0, [pc, #112]	; (8002594 <MX_FREERTOS_Init+0xfc>)
 8002522:	f014 fd41 	bl	8016fa8 <osThreadNew>
 8002526:	4603      	mov	r3, r0
 8002528:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <MX_FREERTOS_Init+0x100>)
 800252a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	0801afd8 	.word	0x0801afd8
 8002534:	0800259d 	.word	0x0800259d
 8002538:	240003dc 	.word	0x240003dc
 800253c:	0801affc 	.word	0x0801affc
 8002540:	080025c5 	.word	0x080025c5
 8002544:	2400063c 	.word	0x2400063c
 8002548:	0801b020 	.word	0x0801b020
 800254c:	080025ed 	.word	0x080025ed
 8002550:	2400089c 	.word	0x2400089c
 8002554:	0801b044 	.word	0x0801b044
 8002558:	08002615 	.word	0x08002615
 800255c:	24000afc 	.word	0x24000afc
 8002560:	0801b068 	.word	0x0801b068
 8002564:	0800268d 	.word	0x0800268d
 8002568:	24000d5c 	.word	0x24000d5c
 800256c:	0801b08c 	.word	0x0801b08c
 8002570:	08002705 	.word	0x08002705
 8002574:	24000fbc 	.word	0x24000fbc
 8002578:	0801b0b0 	.word	0x0801b0b0
 800257c:	08002735 	.word	0x08002735
 8002580:	2400121c 	.word	0x2400121c
 8002584:	0801b0d4 	.word	0x0801b0d4
 8002588:	08002765 	.word	0x08002765
 800258c:	2400147c 	.word	0x2400147c
 8002590:	0801b0f8 	.word	0x0801b0f8
 8002594:	08002845 	.word	0x08002845
 8002598:	240016dc 	.word	0x240016dc

0800259c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <PMT_init+0x24>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ac:	2200      	movs	r2, #0
 80025ae:	2101      	movs	r1, #1
 80025b0:	f014 fe7c 	bl	80172ac <osEventFlagsWait>

		create_pmt_packet();
 80025b4:	f001 fa3a 	bl	8003a2c <create_pmt_packet>

		osThreadYield();
 80025b8:	f014 fd88 	bl	80170cc <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025bc:	e7f2      	b.n	80025a4 <PMT_init+0x8>
 80025be:	bf00      	nop
 80025c0:	24001a90 	.word	0x24001a90

080025c4 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <ERPA_init+0x24>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d4:	2200      	movs	r2, #0
 80025d6:	2102      	movs	r1, #2
 80025d8:	f014 fe68 	bl	80172ac <osEventFlagsWait>

		create_erpa_packet();
 80025dc:	f001 fa6c 	bl	8003ab8 <create_erpa_packet>

		osThreadYield();
 80025e0:	f014 fd74 	bl	80170cc <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025e4:	e7f2      	b.n	80025cc <ERPA_init+0x8>
 80025e6:	bf00      	nop
 80025e8:	24001a90 	.word	0x24001a90

080025ec <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HK_init+0x24>)
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fc:	2200      	movs	r2, #0
 80025fe:	2104      	movs	r1, #4
 8002600:	f014 fe54 	bl	80172ac <osEventFlagsWait>

		create_hk_packet();
 8002604:	f001 fab6 	bl	8003b74 <create_hk_packet>

		osThreadYield();
 8002608:	f014 fd60 	bl	80170cc <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800260c:	e7f2      	b.n	80025f4 <HK_init+0x8>
 800260e:	bf00      	nop
 8002610:	24001a90 	.word	0x24001a90

08002614 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <AUTOINIT_init+0x70>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002624:	2200      	movs	r2, #0
 8002626:	2104      	movs	r1, #4
 8002628:	f014 fe40 	bl	80172ac <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	e012      	b.n	8002658 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002632:	4a15      	ldr	r2, [pc, #84]	; (8002688 <AUTOINIT_init+0x74>)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <AUTOINIT_init+0x74>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	889b      	ldrh	r3, [r3, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	4619      	mov	r1, r3
 8002648:	f009 f812 	bl	800b670 <HAL_GPIO_WritePin>
			osDelay(100);
 800264c:	2064      	movs	r0, #100	; 0x64
 800264e:	f014 fd5d 	bl	801710c <osDelay>
		for (int i = 0; i < 7; i++) {
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3301      	adds	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b06      	cmp	r3, #6
 800265c:	dde9      	ble.n	8002632 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 800265e:	2308      	movs	r3, #8
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	e008      	b.n	8002676 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2101      	movs	r1, #1
 800266a:	4618      	mov	r0, r3
 800266c:	f003 f9f2 	bl	8005a54 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3301      	adds	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b0d      	cmp	r3, #13
 800267a:	ddf3      	ble.n	8002664 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 800267c:	f014 fd26 	bl	80170cc <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002680:	e7cc      	b.n	800261c <AUTOINIT_init+0x8>
 8002682:	bf00      	nop
 8002684:	24001a94 	.word	0x24001a94
 8002688:	0801b11c 	.word	0x0801b11c

0800268c <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <AUTODEINIT_init+0x70>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800269c:	2200      	movs	r2, #0
 800269e:	2108      	movs	r1, #8
 80026a0:	f014 fe04 	bl	80172ac <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80026a4:	230d      	movs	r3, #13
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e008      	b.n	80026bc <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 f9cf 	bl	8005a54 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b07      	cmp	r3, #7
 80026c0:	dcf3      	bgt.n	80026aa <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 80026c2:	2306      	movs	r3, #6
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	e012      	b.n	80026ee <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <AUTODEINIT_init+0x74>)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80026d0:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <AUTODEINIT_init+0x74>)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	889b      	ldrh	r3, [r3, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	4619      	mov	r1, r3
 80026de:	f008 ffc7 	bl	800b670 <HAL_GPIO_WritePin>
			osDelay(100);
 80026e2:	2064      	movs	r0, #100	; 0x64
 80026e4:	f014 fd12 	bl	801710c <osDelay>
		for (int i = 6; i >= 0; i--) {
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	dae9      	bge.n	80026c8 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 80026f4:	f014 fcea 	bl	80170cc <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026f8:	e7cc      	b.n	8002694 <AUTODEINIT_init+0x8>
 80026fa:	bf00      	nop
 80026fc:	24001a94 	.word	0x24001a94
 8002700:	0801b11c 	.word	0x0801b11c

08002704 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <Voltage_Monitor_init+0x28>)
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002714:	2200      	movs	r2, #0
 8002716:	2101      	movs	r1, #1
 8002718:	f014 fdc8 	bl	80172ac <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 800271c:	4804      	ldr	r0, [pc, #16]	; (8002730 <Voltage_Monitor_init+0x2c>)
 800271e:	f00b fb25 	bl	800dd6c <HAL_IWDG_Refresh>
	  set_rail_monitor();
 8002722:	f003 f9b7 	bl	8005a94 <set_rail_monitor>
	  monitor_rails();
 8002726:	f003 fa39 	bl	8005b9c <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800272a:	e7ef      	b.n	800270c <Voltage_Monitor_init+0x8>
 800272c:	24001a94 	.word	0x24001a94
 8002730:	24001a80 	.word	0x24001a80

08002734 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <STOP_init+0x2c>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002744:	2200      	movs	r2, #0
 8002746:	2102      	movs	r1, #2
 8002748:	f014 fdb0 	bl	80172ac <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <STOP_init+0x2c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2102      	movs	r1, #2
 8002752:	4618      	mov	r0, r3
 8002754:	f014 fd78 	bl	8017248 <osEventFlagsClear>

	  enter_stop();
 8002758:	f001 f93c 	bl	80039d4 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800275c:	e7ee      	b.n	800273c <STOP_init+0x8>
 800275e:	bf00      	nop
 8002760:	24001a94 	.word	0x24001a94

08002764 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af02      	add	r7, sp, #8
 800276a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800276c:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <Science_init+0xbc>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002774:	2200      	movs	r2, #0
 8002776:	2101      	movs	r1, #1
 8002778:	f014 fd98 	bl	80172ac <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e012      	b.n	80027a8 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002782:	4a28      	ldr	r2, [pc, #160]	; (8002824 <Science_init+0xc0>)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800278a:	4a26      	ldr	r2, [pc, #152]	; (8002824 <Science_init+0xc0>)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	889b      	ldrh	r3, [r3, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	4619      	mov	r1, r3
 8002798:	f008 ff6a 	bl	800b670 <HAL_GPIO_WritePin>
			osDelay(200);
 800279c:	20c8      	movs	r0, #200	; 0xc8
 800279e:	f014 fcb5 	bl	801710c <osDelay>
		for (int i = 0; i < 9; i++) {
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	dde9      	ble.n	8002782 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80027ae:	2308      	movs	r3, #8
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	e008      	b.n	80027c6 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 f94a 	bl	8005a54 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3301      	adds	r3, #1
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	ddf3      	ble.n	80027b4 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 80027cc:	b672      	cpsid	i
}
 80027ce:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80027d0:	2300      	movs	r3, #0
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2320      	movs	r3, #32
 80027d6:	4a14      	ldr	r2, [pc, #80]	; (8002828 <Science_init+0xc4>)
 80027d8:	2100      	movs	r1, #0
 80027da:	4814      	ldr	r0, [pc, #80]	; (800282c <Science_init+0xc8>)
 80027dc:	f005 f8c4 	bl	8007968 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <Science_init+0xcc>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <Science_init+0xd0>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <Science_init+0xd4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80027f2:	f001 fafd 	bl	8003df0 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <Science_init+0xd8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2104      	movs	r1, #4
 80027fc:	4618      	mov	r0, r3
 80027fe:	f014 fcdf 	bl	80171c0 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002806:	f44f 729c 	mov.w	r2, #312	; 0x138
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 800280c:	2100      	movs	r1, #0
 800280e:	480c      	ldr	r0, [pc, #48]	; (8002840 <Science_init+0xdc>)
 8002810:	f010 f9e8 	bl	8012be4 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8002814:	b662      	cpsie	i
}
 8002816:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002818:	f014 fc58 	bl	80170cc <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800281c:	e7a6      	b.n	800276c <Science_init+0x8>
 800281e:	bf00      	nop
 8002820:	24001a98 	.word	0x24001a98
 8002824:	0801b11c 	.word	0x0801b11c
 8002828:	2400003c 	.word	0x2400003c
 800282c:	24000314 	.word	0x24000314
 8002830:	24001adc 	.word	0x24001adc
 8002834:	24001add 	.word	0x24001add
 8002838:	24001ae0 	.word	0x24001ae0
 800283c:	24001a90 	.word	0x24001a90
 8002840:	24001da4 	.word	0x24001da4

08002844 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800284c:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <Idle_init+0x94>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002854:	2200      	movs	r2, #0
 8002856:	2102      	movs	r1, #2
 8002858:	f014 fd28 	bl	80172ac <osEventFlagsWait>

		ERPA_ENABLED = 0;
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <Idle_init+0x98>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002866:	2200      	movs	r2, #0
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 800286a:	2100      	movs	r1, #0
 800286c:	481c      	ldr	r0, [pc, #112]	; (80028e0 <Idle_init+0x9c>)
 800286e:	f010 fb13 	bl	8012e98 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <Idle_init+0xa0>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8002878:	2100      	movs	r1, #0
 800287a:	481b      	ldr	r0, [pc, #108]	; (80028e8 <Idle_init+0xa4>)
 800287c:	f005 f934 	bl	8007ae8 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002880:	2310      	movs	r3, #16
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e008      	b.n	8002898 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f003 f8e1 	bl	8005a54 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3b01      	subs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b07      	cmp	r3, #7
 800289c:	dcf3      	bgt.n	8002886 <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 800289e:	2308      	movs	r3, #8
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	e012      	b.n	80028ca <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80028a4:	4a11      	ldr	r2, [pc, #68]	; (80028ec <Idle_init+0xa8>)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <Idle_init+0xa8>)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	889b      	ldrh	r3, [r3, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	4619      	mov	r1, r3
 80028ba:	f008 fed9 	bl	800b670 <HAL_GPIO_WritePin>
			osDelay(200);
 80028be:	20c8      	movs	r0, #200	; 0xc8
 80028c0:	f014 fc24 	bl	801710c <osDelay>
		for (int i = 8; i >= 0; i--) {
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	dae9      	bge.n	80028a4 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 80028d0:	f014 fbfc 	bl	80170cc <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80028d4:	e7ba      	b.n	800284c <Idle_init+0x8>
 80028d6:	bf00      	nop
 80028d8:	24001a98 	.word	0x24001a98
 80028dc:	24001add 	.word	0x24001add
 80028e0:	24001da4 	.word	0x24001da4
 80028e4:	24001adc 	.word	0x24001adc
 80028e8:	24000314 	.word	0x24000314
 80028ec:	0801b11c 	.word	0x0801b11c

080028f0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
 8002904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002906:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290c:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <MX_GPIO_Init+0xe8>)
 800290e:	f043 0304 	orr.w	r3, r3, #4
 8002912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002916:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002924:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800292a:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <MX_GPIO_Init+0xe8>)
 800292c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002948:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <MX_GPIO_Init+0xe8>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <MX_GPIO_Init+0xe8>)
 8002972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800297e:	2200      	movs	r2, #0
 8002980:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002984:	4815      	ldr	r0, [pc, #84]	; (80029dc <MX_GPIO_Init+0xec>)
 8002986:	f008 fe73 	bl	800b670 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	2164      	movs	r1, #100	; 0x64
 800298e:	4814      	ldr	r0, [pc, #80]	; (80029e0 <MX_GPIO_Init+0xf0>)
 8002990:	f008 fe6e 	bl	800b670 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002994:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002998:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	2301      	movs	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800299e:	2302      	movs	r3, #2
 80029a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	480b      	ldr	r0, [pc, #44]	; (80029dc <MX_GPIO_Init+0xec>)
 80029ae:	f008 fc97 	bl	800b2e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80029b2:	2364      	movs	r3, #100	; 0x64
 80029b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029ba:	2302      	movs	r3, #2
 80029bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_GPIO_Init+0xf0>)
 80029ca:	f008 fc89 	bl	800b2e0 <HAL_GPIO_Init>

}
 80029ce:	bf00      	nop
 80029d0:	3728      	adds	r7, #40	; 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	58024400 	.word	0x58024400
 80029dc:	58020800 	.word	0x58020800
 80029e0:	58020400 	.word	0x58020400

080029e4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <MX_I2C1_Init+0x78>)
 80029ea:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <MX_I2C1_Init+0x7c>)
 80029ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <MX_I2C1_Init+0x78>)
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <MX_I2C1_Init+0x80>)
 80029f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <MX_I2C1_Init+0x78>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <MX_I2C1_Init+0x78>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a00:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a1e:	480f      	ldr	r0, [pc, #60]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a20:	f008 fe40 	bl	800b6a4 <HAL_I2C_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a2a:	f000 fff1 	bl	8003a10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a2e:	2100      	movs	r1, #0
 8002a30:	480a      	ldr	r0, [pc, #40]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a32:	f00b f8df 	bl	800dbf4 <HAL_I2CEx_ConfigAnalogFilter>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a3c:	f000 ffe8 	bl	8003a10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a40:	2100      	movs	r1, #0
 8002a42:	4806      	ldr	r0, [pc, #24]	; (8002a5c <MX_I2C1_Init+0x78>)
 8002a44:	f00b f921 	bl	800dc8a <HAL_I2CEx_ConfigDigitalFilter>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a4e:	f000 ffdf 	bl	8003a10 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002a52:	2001      	movs	r0, #1
 8002a54:	f00b f966 	bl	800dd24 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	2400193c 	.word	0x2400193c
 8002a60:	40005400 	.word	0x40005400
 8002a64:	00100517 	.word	0x00100517

08002a68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b0ba      	sub	sp, #232	; 0xe8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	22c0      	movs	r2, #192	; 0xc0
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f017 fc5f 	bl	801a34c <memset>
  if(i2cHandle->Instance==I2C1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5d      	ldr	r2, [pc, #372]	; (8002c08 <HAL_I2C_MspInit+0x1a0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	f040 80b3 	bne.w	8002c00 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a9a:	f04f 0208 	mov.w	r2, #8
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aac:	f107 0310 	add.w	r3, r7, #16
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f00c fa09 	bl	800eec8 <HAL_RCCEx_PeriphCLKConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002abc:	f000 ffa8 	bl	8003a10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac6:	4a51      	ldr	r2, [pc, #324]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ad0:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ade:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae6:	2312      	movs	r3, #18
 8002ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002af8:	2304      	movs	r3, #4
 8002afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4842      	ldr	r0, [pc, #264]	; (8002c10 <HAL_I2C_MspInit+0x1a8>)
 8002b06:	f008 fbeb 	bl	800b2e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b0a:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b10:	4a3e      	ldr	r2, [pc, #248]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002b12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b1a:	4b3c      	ldr	r3, [pc, #240]	; (8002c0c <HAL_I2C_MspInit+0x1a4>)
 8002b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002b28:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b2a:	4a3b      	ldr	r2, [pc, #236]	; (8002c18 <HAL_I2C_MspInit+0x1b0>)
 8002b2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002b2e:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b30:	2222      	movs	r2, #34	; 0x22
 8002b32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b34:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b36:	2240      	movs	r2, #64	; 0x40
 8002b38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b40:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b48:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002b54:	4b2f      	ldr	r3, [pc, #188]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b5a:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b60:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b62:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b68:	482a      	ldr	r0, [pc, #168]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b6a:	f005 fa89 	bl	8008080 <HAL_DMA_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002b74:	f000 ff4c 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b7e:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <HAL_I2C_MspInit+0x1ac>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002b84:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002b86:	4a26      	ldr	r2, [pc, #152]	; (8002c20 <HAL_I2C_MspInit+0x1b8>)
 8002b88:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002b8c:	2221      	movs	r2, #33	; 0x21
 8002b8e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b90:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b9c:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bbc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002bc4:	4815      	ldr	r0, [pc, #84]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bc6:	f005 fa5b 	bl	8008080 <HAL_DMA_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002bd0:	f000 ff1e 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bda:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_I2C_MspInit+0x1b4>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2105      	movs	r1, #5
 8002be4:	201f      	movs	r0, #31
 8002be6:	f004 fe1d 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002bea:	201f      	movs	r0, #31
 8002bec:	f004 fe34 	bl	8007858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2105      	movs	r1, #5
 8002bf4:	2020      	movs	r0, #32
 8002bf6:	f004 fe15 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002bfa:	2020      	movs	r0, #32
 8002bfc:	f004 fe2c 	bl	8007858 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002c00:	bf00      	nop
 8002c02:	37e8      	adds	r7, #232	; 0xe8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40005400 	.word	0x40005400
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	58020400 	.word	0x58020400
 8002c14:	24001990 	.word	0x24001990
 8002c18:	400200a0 	.word	0x400200a0
 8002c1c:	24001a08 	.word	0x24001a08
 8002c20:	400200b8 	.word	0x400200b8

08002c24 <__NVIC_SystemReset>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002c28:	f3bf 8f4f 	dsb	sy
}
 8002c2c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <__NVIC_SystemReset+0x24>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c36:	4904      	ldr	r1, [pc, #16]	; (8002c48 <__NVIC_SystemReset+0x24>)
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <__NVIC_SystemReset+0x28>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c3e:	f3bf 8f4f 	dsb	sy
}
 8002c42:	bf00      	nop
    __NOP();
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <__NVIC_SystemReset+0x20>
 8002c48:	e000ed00 	.word	0xe000ed00
 8002c4c:	05fa0004 	.word	0x05fa0004

08002c50 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d106      	bne.n	8002c6e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f014 faaa 	bl	80171c0 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002c6c:	e032      	b.n	8002cd4 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d12b      	bne.n	8002cce <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2102      	movs	r1, #2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f014 fa9a 	bl	80171c0 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d113      	bne.n	8002cbe <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f014 fa8f 	bl	80171c0 <osEventFlagsSet>
			if (HK_ENABLED){
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2104      	movs	r1, #4
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f014 fa84 	bl	80171c0 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002cca:	701a      	strb	r2, [r3, #0]
}
 8002ccc:	e002      	b.n	8002cd4 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002cce:	480a      	ldr	r0, [pc, #40]	; (8002cf8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002cd0:	f017 fbb2 	bl	801a438 <puts>
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	24001da4 	.word	0x24001da4
 8002ce0:	24001a90 	.word	0x24001a90
 8002ce4:	24001df0 	.word	0x24001df0
 8002ce8:	24001add 	.word	0x24001add
 8002cec:	24001ae4 	.word	0x24001ae4
 8002cf0:	24001a94 	.word	0x24001a94
 8002cf4:	24001adc 	.word	0x24001adc
 8002cf8:	0801ade8 	.word	0x0801ade8

08002cfc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002d04:	2201      	movs	r2, #1
 8002d06:	49f7      	ldr	r1, [pc, #988]	; (80030e4 <HAL_UART_RxCpltCallback+0x3e8>)
 8002d08:	48f7      	ldr	r0, [pc, #988]	; (80030e8 <HAL_UART_RxCpltCallback+0x3ec>)
 8002d0a:	f011 fc4b 	bl	80145a4 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002d0e:	4bf5      	ldr	r3, [pc, #980]	; (80030e4 <HAL_UART_RxCpltCallback+0x3e8>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2bef      	cmp	r3, #239	; 0xef
 8002d18:	f200 843e 	bhi.w	8003598 <HAL_UART_RxCpltCallback+0x89c>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <HAL_UART_RxCpltCallback+0x28>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08003101 	.word	0x08003101
 8002d28:	08003131 	.word	0x08003131
 8002d2c:	080031a1 	.word	0x080031a1
 8002d30:	080031db 	.word	0x080031db
 8002d34:	08003213 	.word	0x08003213
 8002d38:	0800324d 	.word	0x0800324d
 8002d3c:	08003289 	.word	0x08003289
 8002d40:	080032c5 	.word	0x080032c5
 8002d44:	080032ff 	.word	0x080032ff
 8002d48:	08003333 	.word	0x08003333
 8002d4c:	08003367 	.word	0x08003367
 8002d50:	08003399 	.word	0x08003399
 8002d54:	080033c3 	.word	0x080033c3
 8002d58:	0800349f 	.word	0x0800349f
 8002d5c:	08003507 	.word	0x08003507
 8002d60:	0800352f 	.word	0x0800352f
 8002d64:	080030ed 	.word	0x080030ed
 8002d68:	08003115 	.word	0x08003115
 8002d6c:	08003183 	.word	0x08003183
 8002d70:	080031bf 	.word	0x080031bf
 8002d74:	080031f7 	.word	0x080031f7
 8002d78:	0800322f 	.word	0x0800322f
 8002d7c:	0800326b 	.word	0x0800326b
 8002d80:	080032a7 	.word	0x080032a7
 8002d84:	080032e3 	.word	0x080032e3
 8002d88:	0800331b 	.word	0x0800331b
 8002d8c:	08003343 	.word	0x08003343
 8002d90:	0800337d 	.word	0x0800337d
 8002d94:	080033a9 	.word	0x080033a9
 8002d98:	0800345d 	.word	0x0800345d
 8002d9c:	080034df 	.word	0x080034df
 8002da0:	08003599 	.word	0x08003599
 8002da4:	08003599 	.word	0x08003599
 8002da8:	08003599 	.word	0x08003599
 8002dac:	08003599 	.word	0x08003599
 8002db0:	08003599 	.word	0x08003599
 8002db4:	08003599 	.word	0x08003599
 8002db8:	08003599 	.word	0x08003599
 8002dbc:	08003599 	.word	0x08003599
 8002dc0:	08003599 	.word	0x08003599
 8002dc4:	08003599 	.word	0x08003599
 8002dc8:	08003599 	.word	0x08003599
 8002dcc:	08003599 	.word	0x08003599
 8002dd0:	08003599 	.word	0x08003599
 8002dd4:	08003599 	.word	0x08003599
 8002dd8:	08003599 	.word	0x08003599
 8002ddc:	08003599 	.word	0x08003599
 8002de0:	08003599 	.word	0x08003599
 8002de4:	08003599 	.word	0x08003599
 8002de8:	08003599 	.word	0x08003599
 8002dec:	08003599 	.word	0x08003599
 8002df0:	08003599 	.word	0x08003599
 8002df4:	08003599 	.word	0x08003599
 8002df8:	08003599 	.word	0x08003599
 8002dfc:	08003599 	.word	0x08003599
 8002e00:	08003599 	.word	0x08003599
 8002e04:	08003599 	.word	0x08003599
 8002e08:	08003599 	.word	0x08003599
 8002e0c:	08003599 	.word	0x08003599
 8002e10:	08003599 	.word	0x08003599
 8002e14:	08003599 	.word	0x08003599
 8002e18:	08003599 	.word	0x08003599
 8002e1c:	08003599 	.word	0x08003599
 8002e20:	08003599 	.word	0x08003599
 8002e24:	08003599 	.word	0x08003599
 8002e28:	08003599 	.word	0x08003599
 8002e2c:	08003599 	.word	0x08003599
 8002e30:	08003599 	.word	0x08003599
 8002e34:	08003599 	.word	0x08003599
 8002e38:	08003599 	.word	0x08003599
 8002e3c:	08003599 	.word	0x08003599
 8002e40:	08003599 	.word	0x08003599
 8002e44:	08003599 	.word	0x08003599
 8002e48:	08003599 	.word	0x08003599
 8002e4c:	08003599 	.word	0x08003599
 8002e50:	08003599 	.word	0x08003599
 8002e54:	08003599 	.word	0x08003599
 8002e58:	08003599 	.word	0x08003599
 8002e5c:	08003599 	.word	0x08003599
 8002e60:	08003599 	.word	0x08003599
 8002e64:	08003599 	.word	0x08003599
 8002e68:	08003599 	.word	0x08003599
 8002e6c:	08003599 	.word	0x08003599
 8002e70:	08003599 	.word	0x08003599
 8002e74:	08003599 	.word	0x08003599
 8002e78:	08003599 	.word	0x08003599
 8002e7c:	08003599 	.word	0x08003599
 8002e80:	08003599 	.word	0x08003599
 8002e84:	08003599 	.word	0x08003599
 8002e88:	08003599 	.word	0x08003599
 8002e8c:	08003599 	.word	0x08003599
 8002e90:	08003599 	.word	0x08003599
 8002e94:	08003599 	.word	0x08003599
 8002e98:	08003599 	.word	0x08003599
 8002e9c:	08003599 	.word	0x08003599
 8002ea0:	08003599 	.word	0x08003599
 8002ea4:	08003599 	.word	0x08003599
 8002ea8:	08003599 	.word	0x08003599
 8002eac:	08003599 	.word	0x08003599
 8002eb0:	08003599 	.word	0x08003599
 8002eb4:	08003599 	.word	0x08003599
 8002eb8:	08003599 	.word	0x08003599
 8002ebc:	08003599 	.word	0x08003599
 8002ec0:	08003599 	.word	0x08003599
 8002ec4:	08003599 	.word	0x08003599
 8002ec8:	08003599 	.word	0x08003599
 8002ecc:	08003599 	.word	0x08003599
 8002ed0:	08003599 	.word	0x08003599
 8002ed4:	08003599 	.word	0x08003599
 8002ed8:	08003599 	.word	0x08003599
 8002edc:	08003599 	.word	0x08003599
 8002ee0:	08003599 	.word	0x08003599
 8002ee4:	08003599 	.word	0x08003599
 8002ee8:	08003599 	.word	0x08003599
 8002eec:	08003599 	.word	0x08003599
 8002ef0:	08003599 	.word	0x08003599
 8002ef4:	08003599 	.word	0x08003599
 8002ef8:	08003599 	.word	0x08003599
 8002efc:	08003599 	.word	0x08003599
 8002f00:	08003599 	.word	0x08003599
 8002f04:	08003599 	.word	0x08003599
 8002f08:	08003599 	.word	0x08003599
 8002f0c:	08003599 	.word	0x08003599
 8002f10:	08003599 	.word	0x08003599
 8002f14:	08003599 	.word	0x08003599
 8002f18:	08003599 	.word	0x08003599
 8002f1c:	08003599 	.word	0x08003599
 8002f20:	08003599 	.word	0x08003599
 8002f24:	08003599 	.word	0x08003599
 8002f28:	08003599 	.word	0x08003599
 8002f2c:	08003599 	.word	0x08003599
 8002f30:	08003599 	.word	0x08003599
 8002f34:	08003599 	.word	0x08003599
 8002f38:	08003599 	.word	0x08003599
 8002f3c:	08003599 	.word	0x08003599
 8002f40:	08003599 	.word	0x08003599
 8002f44:	08003599 	.word	0x08003599
 8002f48:	08003599 	.word	0x08003599
 8002f4c:	08003599 	.word	0x08003599
 8002f50:	08003599 	.word	0x08003599
 8002f54:	08003599 	.word	0x08003599
 8002f58:	08003599 	.word	0x08003599
 8002f5c:	08003599 	.word	0x08003599
 8002f60:	08003599 	.word	0x08003599
 8002f64:	08003599 	.word	0x08003599
 8002f68:	08003599 	.word	0x08003599
 8002f6c:	08003599 	.word	0x08003599
 8002f70:	08003599 	.word	0x08003599
 8002f74:	08003599 	.word	0x08003599
 8002f78:	08003599 	.word	0x08003599
 8002f7c:	08003599 	.word	0x08003599
 8002f80:	08003599 	.word	0x08003599
 8002f84:	08003599 	.word	0x08003599
 8002f88:	08003599 	.word	0x08003599
 8002f8c:	08003599 	.word	0x08003599
 8002f90:	08003599 	.word	0x08003599
 8002f94:	08003599 	.word	0x08003599
 8002f98:	08003599 	.word	0x08003599
 8002f9c:	08003599 	.word	0x08003599
 8002fa0:	08003599 	.word	0x08003599
 8002fa4:	08003599 	.word	0x08003599
 8002fa8:	08003599 	.word	0x08003599
 8002fac:	08003599 	.word	0x08003599
 8002fb0:	08003599 	.word	0x08003599
 8002fb4:	08003599 	.word	0x08003599
 8002fb8:	08003599 	.word	0x08003599
 8002fbc:	08003599 	.word	0x08003599
 8002fc0:	08003599 	.word	0x08003599
 8002fc4:	08003599 	.word	0x08003599
 8002fc8:	08003599 	.word	0x08003599
 8002fcc:	08003599 	.word	0x08003599
 8002fd0:	08003599 	.word	0x08003599
 8002fd4:	08003599 	.word	0x08003599
 8002fd8:	08003599 	.word	0x08003599
 8002fdc:	08003599 	.word	0x08003599
 8002fe0:	0800356b 	.word	0x0800356b
 8002fe4:	08003599 	.word	0x08003599
 8002fe8:	08003599 	.word	0x08003599
 8002fec:	08003599 	.word	0x08003599
 8002ff0:	08003599 	.word	0x08003599
 8002ff4:	08003599 	.word	0x08003599
 8002ff8:	08003599 	.word	0x08003599
 8002ffc:	08003599 	.word	0x08003599
 8003000:	08003599 	.word	0x08003599
 8003004:	08003599 	.word	0x08003599
 8003008:	08003599 	.word	0x08003599
 800300c:	08003599 	.word	0x08003599
 8003010:	08003599 	.word	0x08003599
 8003014:	08003599 	.word	0x08003599
 8003018:	08003599 	.word	0x08003599
 800301c:	08003599 	.word	0x08003599
 8003020:	08003571 	.word	0x08003571
 8003024:	08003599 	.word	0x08003599
 8003028:	08003599 	.word	0x08003599
 800302c:	08003599 	.word	0x08003599
 8003030:	08003599 	.word	0x08003599
 8003034:	08003599 	.word	0x08003599
 8003038:	08003599 	.word	0x08003599
 800303c:	08003599 	.word	0x08003599
 8003040:	08003599 	.word	0x08003599
 8003044:	08003599 	.word	0x08003599
 8003048:	08003599 	.word	0x08003599
 800304c:	08003599 	.word	0x08003599
 8003050:	08003599 	.word	0x08003599
 8003054:	08003599 	.word	0x08003599
 8003058:	08003599 	.word	0x08003599
 800305c:	08003599 	.word	0x08003599
 8003060:	0800357f 	.word	0x0800357f
 8003064:	08003557 	.word	0x08003557
 8003068:	08003599 	.word	0x08003599
 800306c:	08003599 	.word	0x08003599
 8003070:	08003599 	.word	0x08003599
 8003074:	08003599 	.word	0x08003599
 8003078:	08003599 	.word	0x08003599
 800307c:	08003599 	.word	0x08003599
 8003080:	08003599 	.word	0x08003599
 8003084:	08003599 	.word	0x08003599
 8003088:	08003599 	.word	0x08003599
 800308c:	08003599 	.word	0x08003599
 8003090:	08003599 	.word	0x08003599
 8003094:	08003599 	.word	0x08003599
 8003098:	08003599 	.word	0x08003599
 800309c:	08003599 	.word	0x08003599
 80030a0:	0800358d 	.word	0x0800358d
 80030a4:	08003543 	.word	0x08003543
 80030a8:	08003599 	.word	0x08003599
 80030ac:	08003599 	.word	0x08003599
 80030b0:	08003599 	.word	0x08003599
 80030b4:	08003599 	.word	0x08003599
 80030b8:	08003599 	.word	0x08003599
 80030bc:	08003599 	.word	0x08003599
 80030c0:	08003599 	.word	0x08003599
 80030c4:	08003599 	.word	0x08003599
 80030c8:	08003599 	.word	0x08003599
 80030cc:	08003599 	.word	0x08003599
 80030d0:	08003599 	.word	0x08003599
 80030d4:	08003599 	.word	0x08003599
 80030d8:	08003599 	.word	0x08003599
 80030dc:	08003599 	.word	0x08003599
 80030e0:	08003593 	.word	0x08003593
 80030e4:	24001a9c 	.word	0x24001a9c
 80030e8:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 80030ec:	48b8      	ldr	r0, [pc, #736]	; (80033d0 <HAL_UART_RxCpltCallback+0x6d4>)
 80030ee:	f017 f9a3 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80030f2:	4bb8      	ldr	r3, [pc, #736]	; (80033d4 <HAL_UART_RxCpltCallback+0x6d8>)
 80030f4:	2104      	movs	r1, #4
 80030f6:	2201      	movs	r2, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f008 fab9 	bl	800b670 <HAL_GPIO_WritePin>
		break;
 80030fe:	e256      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8003100:	48b5      	ldr	r0, [pc, #724]	; (80033d8 <HAL_UART_RxCpltCallback+0x6dc>)
 8003102:	f017 f999 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8003106:	4bb3      	ldr	r3, [pc, #716]	; (80033d4 <HAL_UART_RxCpltCallback+0x6d8>)
 8003108:	2104      	movs	r1, #4
 800310a:	2200      	movs	r2, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f008 faaf 	bl	800b670 <HAL_GPIO_WritePin>
		break;
 8003112:	e24c      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8003114:	48b1      	ldr	r0, [pc, #708]	; (80033dc <HAL_UART_RxCpltCallback+0x6e0>)
 8003116:	f017 f98f 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800311a:	4bae      	ldr	r3, [pc, #696]	; (80033d4 <HAL_UART_RxCpltCallback+0x6d8>)
 800311c:	2120      	movs	r1, #32
 800311e:	2201      	movs	r2, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f008 faa5 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8003126:	2101      	movs	r1, #1
 8003128:	2008      	movs	r0, #8
 800312a:	f002 fc93 	bl	8005a54 <set_rail_monitor_enable>
		break;
 800312e:	e23e      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8003130:	48ab      	ldr	r0, [pc, #684]	; (80033e0 <HAL_UART_RxCpltCallback+0x6e4>)
 8003132:	f017 f981 	bl	801a438 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8003136:	2308      	movs	r3, #8
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e00f      	b.n	800315c <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800313c:	4aa9      	ldr	r2, [pc, #676]	; (80033e4 <HAL_UART_RxCpltCallback+0x6e8>)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003144:	4aa7      	ldr	r2, [pc, #668]	; (80033e4 <HAL_UART_RxCpltCallback+0x6e8>)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	889b      	ldrh	r3, [r3, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	4619      	mov	r1, r3
 8003152:	f008 fa8d 	bl	800b670 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3b01      	subs	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	dcec      	bgt.n	800313c <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003162:	2310      	movs	r3, #16
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e008      	b.n	800317a <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f002 fc70 	bl	8005a54 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	3b01      	subs	r3, #1
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b07      	cmp	r3, #7
 800317e:	dcf3      	bgt.n	8003168 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 8003180:	e215      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8003182:	4899      	ldr	r0, [pc, #612]	; (80033e8 <HAL_UART_RxCpltCallback+0x6ec>)
 8003184:	f017 f958 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8003188:	4b98      	ldr	r3, [pc, #608]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 800318a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800318e:	2201      	movs	r2, #1
 8003190:	4618      	mov	r0, r3
 8003192:	f008 fa6d 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8003196:	2101      	movs	r1, #1
 8003198:	2009      	movs	r0, #9
 800319a:	f002 fc5b 	bl	8005a54 <set_rail_monitor_enable>

		break;
 800319e:	e206      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80031a0:	4893      	ldr	r0, [pc, #588]	; (80033f0 <HAL_UART_RxCpltCallback+0x6f4>)
 80031a2:	f017 f949 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80031a6:	4b91      	ldr	r3, [pc, #580]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80031a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031ac:	2200      	movs	r2, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f008 fa5e 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80031b4:	2100      	movs	r1, #0
 80031b6:	2009      	movs	r0, #9
 80031b8:	f002 fc4c 	bl	8005a54 <set_rail_monitor_enable>
		break;
 80031bc:	e1f7      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80031be:	488d      	ldr	r0, [pc, #564]	; (80033f4 <HAL_UART_RxCpltCallback+0x6f8>)
 80031c0:	f017 f93a 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 80031c4:	4b89      	ldr	r3, [pc, #548]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80031c6:	2180      	movs	r1, #128	; 0x80
 80031c8:	2201      	movs	r2, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f008 fa50 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 80031d0:	2101      	movs	r1, #1
 80031d2:	200a      	movs	r0, #10
 80031d4:	f002 fc3e 	bl	8005a54 <set_rail_monitor_enable>

		break;
 80031d8:	e1e9      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 80031da:	4887      	ldr	r0, [pc, #540]	; (80033f8 <HAL_UART_RxCpltCallback+0x6fc>)
 80031dc:	f017 f92c 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 80031e0:	4b82      	ldr	r3, [pc, #520]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	2200      	movs	r2, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f008 fa42 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 80031ec:	2100      	movs	r1, #0
 80031ee:	200a      	movs	r0, #10
 80031f0:	f002 fc30 	bl	8005a54 <set_rail_monitor_enable>
		break;
 80031f4:	e1db      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 80031f6:	4881      	ldr	r0, [pc, #516]	; (80033fc <HAL_UART_RxCpltCallback+0x700>)
 80031f8:	f017 f91e 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 80031fc:	4b7b      	ldr	r3, [pc, #492]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	2201      	movs	r2, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f008 fa34 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8003208:	2101      	movs	r1, #1
 800320a:	200b      	movs	r0, #11
 800320c:	f002 fc22 	bl	8005a54 <set_rail_monitor_enable>

		break;
 8003210:	e1cd      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8003212:	487b      	ldr	r0, [pc, #492]	; (8003400 <HAL_UART_RxCpltCallback+0x704>)
 8003214:	f017 f910 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8003218:	4b74      	ldr	r3, [pc, #464]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 800321a:	2140      	movs	r1, #64	; 0x40
 800321c:	2200      	movs	r2, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f008 fa26 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8003224:	2100      	movs	r1, #0
 8003226:	200b      	movs	r0, #11
 8003228:	f002 fc14 	bl	8005a54 <set_rail_monitor_enable>
		break;
 800322c:	e1bf      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 800322e:	4875      	ldr	r0, [pc, #468]	; (8003404 <HAL_UART_RxCpltCallback+0x708>)
 8003230:	f017 f902 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8003234:	4b6d      	ldr	r3, [pc, #436]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 8003236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800323a:	2201      	movs	r2, #1
 800323c:	4618      	mov	r0, r3
 800323e:	f008 fa17 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8003242:	2101      	movs	r1, #1
 8003244:	200c      	movs	r0, #12
 8003246:	f002 fc05 	bl	8005a54 <set_rail_monitor_enable>

		break;
 800324a:	e1b0      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 800324c:	486e      	ldr	r0, [pc, #440]	; (8003408 <HAL_UART_RxCpltCallback+0x70c>)
 800324e:	f017 f8f3 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8003252:	4b66      	ldr	r3, [pc, #408]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 8003254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003258:	2200      	movs	r2, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f008 fa08 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8003260:	2100      	movs	r1, #0
 8003262:	200c      	movs	r0, #12
 8003264:	f002 fbf6 	bl	8005a54 <set_rail_monitor_enable>
		break;
 8003268:	e1a1      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 800326a:	4868      	ldr	r0, [pc, #416]	; (800340c <HAL_UART_RxCpltCallback+0x710>)
 800326c:	f017 f8e4 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8003270:	4b5e      	ldr	r3, [pc, #376]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 8003272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003276:	2201      	movs	r2, #1
 8003278:	4618      	mov	r0, r3
 800327a:	f008 f9f9 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 800327e:	2101      	movs	r1, #1
 8003280:	200d      	movs	r0, #13
 8003282:	f002 fbe7 	bl	8005a54 <set_rail_monitor_enable>

		break;
 8003286:	e192      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8003288:	4861      	ldr	r0, [pc, #388]	; (8003410 <HAL_UART_RxCpltCallback+0x714>)
 800328a:	f017 f8d5 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800328e:	4b57      	ldr	r3, [pc, #348]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 8003290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003294:	2200      	movs	r2, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f008 f9ea 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 800329c:	2100      	movs	r1, #0
 800329e:	200d      	movs	r0, #13
 80032a0:	f002 fbd8 	bl	8005a54 <set_rail_monitor_enable>
		break;
 80032a4:	e183      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 80032a6:	485b      	ldr	r0, [pc, #364]	; (8003414 <HAL_UART_RxCpltCallback+0x718>)
 80032a8:	f017 f8c6 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80032ac:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80032ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032b2:	2201      	movs	r2, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f008 f9db 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 80032ba:	2101      	movs	r1, #1
 80032bc:	200f      	movs	r0, #15
 80032be:	f002 fbc9 	bl	8005a54 <set_rail_monitor_enable>

		break;
 80032c2:	e174      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 80032c4:	4854      	ldr	r0, [pc, #336]	; (8003418 <HAL_UART_RxCpltCallback+0x71c>)
 80032c6:	f017 f8b7 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 80032ca:	4b48      	ldr	r3, [pc, #288]	; (80033ec <HAL_UART_RxCpltCallback+0x6f0>)
 80032cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032d0:	2200      	movs	r2, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f008 f9cc 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 80032d8:	2100      	movs	r1, #0
 80032da:	200f      	movs	r0, #15
 80032dc:	f002 fbba 	bl	8005a54 <set_rail_monitor_enable>
		break;
 80032e0:	e165      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 80032e2:	484e      	ldr	r0, [pc, #312]	; (800341c <HAL_UART_RxCpltCallback+0x720>)
 80032e4:	f017 f8a8 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <HAL_UART_RxCpltCallback+0x6d8>)
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	2201      	movs	r2, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f008 f9be 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 80032f4:	2101      	movs	r1, #1
 80032f6:	2010      	movs	r0, #16
 80032f8:	f002 fbac 	bl	8005a54 <set_rail_monitor_enable>

		break;
 80032fc:	e157      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 80032fe:	4848      	ldr	r0, [pc, #288]	; (8003420 <HAL_UART_RxCpltCallback+0x724>)
 8003300:	f017 f89a 	bl	801a438 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8003304:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <HAL_UART_RxCpltCallback+0x6d8>)
 8003306:	2140      	movs	r1, #64	; 0x40
 8003308:	2200      	movs	r2, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f008 f9b0 	bl	800b670 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8003310:	2100      	movs	r1, #0
 8003312:	2010      	movs	r0, #16
 8003314:	f002 fb9e 	bl	8005a54 <set_rail_monitor_enable>
		break;
 8003318:	e149      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 800331a:	4842      	ldr	r0, [pc, #264]	; (8003424 <HAL_UART_RxCpltCallback+0x728>)
 800331c:	f017 f88c 	bl	801a438 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8003320:	2300      	movs	r3, #0
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2320      	movs	r3, #32
 8003326:	4a40      	ldr	r2, [pc, #256]	; (8003428 <HAL_UART_RxCpltCallback+0x72c>)
 8003328:	2100      	movs	r1, #0
 800332a:	4840      	ldr	r0, [pc, #256]	; (800342c <HAL_UART_RxCpltCallback+0x730>)
 800332c:	f004 fb1c 	bl	8007968 <HAL_DAC_Start_DMA>
		break;
 8003330:	e13d      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8003332:	483f      	ldr	r0, [pc, #252]	; (8003430 <HAL_UART_RxCpltCallback+0x734>)
 8003334:	f017 f880 	bl	801a438 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8003338:	2100      	movs	r1, #0
 800333a:	483c      	ldr	r0, [pc, #240]	; (800342c <HAL_UART_RxCpltCallback+0x730>)
 800333c:	f004 fbd4 	bl	8007ae8 <HAL_DAC_Stop_DMA>
		break;
 8003340:	e135      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8003342:	483c      	ldr	r0, [pc, #240]	; (8003434 <HAL_UART_RxCpltCallback+0x738>)
 8003344:	f017 f878 	bl	801a438 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8003348:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <HAL_UART_RxCpltCallback+0x73c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2102      	movs	r1, #2
 800334e:	4618      	mov	r0, r3
 8003350:	f013 ff36 	bl	80171c0 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8003354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003358:	f44f 729c 	mov.w	r2, #312	; 0x138
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 800335e:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_UART_RxCpltCallback+0x740>)
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]

		break;
 8003364:	e123      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8003366:	4836      	ldr	r0, [pc, #216]	; (8003440 <HAL_UART_RxCpltCallback+0x744>)
 8003368:	f017 f866 	bl	801a438 <puts>
		ERPA_ENABLED = 0;
 800336c:	4b33      	ldr	r3, [pc, #204]	; (800343c <HAL_UART_RxCpltCallback+0x740>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8003372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003376:	2200      	movs	r2, #0
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800337a:	e118      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 800337c:	4831      	ldr	r0, [pc, #196]	; (8003444 <HAL_UART_RxCpltCallback+0x748>)
 800337e:	f017 f85b 	bl	801a438 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003382:	2100      	movs	r1, #0
 8003384:	4830      	ldr	r0, [pc, #192]	; (8003448 <HAL_UART_RxCpltCallback+0x74c>)
 8003386:	f00f fc2d 	bl	8012be4 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800338a:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_UART_RxCpltCallback+0x73c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f013 ff15 	bl	80171c0 <osEventFlagsSet>
		break;
 8003396:	e10a      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8003398:	482c      	ldr	r0, [pc, #176]	; (800344c <HAL_UART_RxCpltCallback+0x750>)
 800339a:	f017 f84d 	bl	801a438 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800339e:	2100      	movs	r1, #0
 80033a0:	4829      	ldr	r0, [pc, #164]	; (8003448 <HAL_UART_RxCpltCallback+0x74c>)
 80033a2:	f00f fd79 	bl	8012e98 <HAL_TIM_OC_Stop_IT>
		break;
 80033a6:	e102      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1C: {
		printf("HK ON \n");
 80033a8:	4829      	ldr	r0, [pc, #164]	; (8003450 <HAL_UART_RxCpltCallback+0x754>)
 80033aa:	f017 f845 	bl	801a438 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <HAL_UART_RxCpltCallback+0x73c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2104      	movs	r1, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f013 ff03 	bl	80171c0 <osEventFlagsSet>
		HK_ENABLED = 1;
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <HAL_UART_RxCpltCallback+0x758>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
		break;
 80033c0:	e0f5      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 80033c2:	4825      	ldr	r0, [pc, #148]	; (8003458 <HAL_UART_RxCpltCallback+0x75c>)
 80033c4:	f017 f838 	bl	801a438 <puts>
		HK_ENABLED = 0;
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <HAL_UART_RxCpltCallback+0x758>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
		break;
 80033ce:	e0ee      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
 80033d0:	0801ae00 	.word	0x0801ae00
 80033d4:	58020400 	.word	0x58020400
 80033d8:	0801ae08 	.word	0x0801ae08
 80033dc:	0801ae14 	.word	0x0801ae14
 80033e0:	0801ae20 	.word	0x0801ae20
 80033e4:	0801b11c 	.word	0x0801b11c
 80033e8:	0801ae2c 	.word	0x0801ae2c
 80033ec:	58020800 	.word	0x58020800
 80033f0:	0801ae38 	.word	0x0801ae38
 80033f4:	0801ae48 	.word	0x0801ae48
 80033f8:	0801ae54 	.word	0x0801ae54
 80033fc:	0801ae60 	.word	0x0801ae60
 8003400:	0801ae6c 	.word	0x0801ae6c
 8003404:	0801ae7c 	.word	0x0801ae7c
 8003408:	0801ae88 	.word	0x0801ae88
 800340c:	0801ae94 	.word	0x0801ae94
 8003410:	0801aea0 	.word	0x0801aea0
 8003414:	0801aeac 	.word	0x0801aeac
 8003418:	0801aebc 	.word	0x0801aebc
 800341c:	0801aecc 	.word	0x0801aecc
 8003420:	0801aed8 	.word	0x0801aed8
 8003424:	0801aee8 	.word	0x0801aee8
 8003428:	2400003c 	.word	0x2400003c
 800342c:	24000314 	.word	0x24000314
 8003430:	0801aef8 	.word	0x0801aef8
 8003434:	0801af08 	.word	0x0801af08
 8003438:	24001a90 	.word	0x24001a90
 800343c:	24001add 	.word	0x24001add
 8003440:	0801af10 	.word	0x0801af10
 8003444:	0801af1c 	.word	0x0801af1c
 8003448:	24001da4 	.word	0x24001da4
 800344c:	0801af24 	.word	0x0801af24
 8003450:	0801af2c 	.word	0x0801af2c
 8003454:	24001adc 	.word	0x24001adc
 8003458:	0801af34 	.word	0x0801af34
	}
	case 0x1D: {
		printf("Step Up\n");
 800345c:	4856      	ldr	r0, [pc, #344]	; (80035b8 <HAL_UART_RxCpltCallback+0x8bc>)
 800345e:	f016 ffeb 	bl	801a438 <puts>
		if (step < 14) {
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b0d      	cmp	r3, #13
 800346a:	f200 8099 	bhi.w	80035a0 <HAL_UART_RxCpltCallback+0x8a4>
			step += 2;
 800346e:	4b53      	ldr	r3, [pc, #332]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	3302      	adds	r3, #2
 8003476:	b2da      	uxtb	r2, r3
 8003478:	4b50      	ldr	r3, [pc, #320]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 800347a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800347c:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	4b4e      	ldr	r3, [pc, #312]	; (80035c0 <HAL_UART_RxCpltCallback+0x8c4>)
 8003486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	484d      	ldr	r0, [pc, #308]	; (80035c4 <HAL_UART_RxCpltCallback+0x8c8>)
 8003490:	f004 fbcd 	bl	8007c2e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003494:	2100      	movs	r1, #0
 8003496:	484b      	ldr	r0, [pc, #300]	; (80035c4 <HAL_UART_RxCpltCallback+0x8c8>)
 8003498:	f004 fa0e 	bl	80078b8 <HAL_DAC_Start>
		}
		break;
 800349c:	e080      	b.n	80035a0 <HAL_UART_RxCpltCallback+0x8a4>
	}
	case 0x0D: {
		printf("Step Down\n");
 800349e:	484a      	ldr	r0, [pc, #296]	; (80035c8 <HAL_UART_RxCpltCallback+0x8cc>)
 80034a0:	f016 ffca 	bl	801a438 <puts>
		if (step > 1) {
 80034a4:	4b45      	ldr	r3, [pc, #276]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d97a      	bls.n	80035a4 <HAL_UART_RxCpltCallback+0x8a8>
			step -= 2;
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3b02      	subs	r3, #2
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 80034ba:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <HAL_UART_RxCpltCallback+0x8c0>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <HAL_UART_RxCpltCallback+0x8c4>)
 80034c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	483d      	ldr	r0, [pc, #244]	; (80035c4 <HAL_UART_RxCpltCallback+0x8c8>)
 80034d0:	f004 fbad 	bl	8007c2e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80034d4:	2100      	movs	r1, #0
 80034d6:	483b      	ldr	r0, [pc, #236]	; (80035c4 <HAL_UART_RxCpltCallback+0x8c8>)
 80034d8:	f004 f9ee 	bl	80078b8 <HAL_DAC_Start>
		}
		break;
 80034dc:	e062      	b.n	80035a4 <HAL_UART_RxCpltCallback+0x8a8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 80034de:	483b      	ldr	r0, [pc, #236]	; (80035cc <HAL_UART_RxCpltCallback+0x8d0>)
 80034e0:	f016 ffaa 	bl	801a438 <puts>
		if (cadence <= 50000) {
 80034e4:	4b3a      	ldr	r3, [pc, #232]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d85b      	bhi.n	80035a8 <HAL_UART_RxCpltCallback+0x8ac>
			cadence *= 2;
 80034f0:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4a36      	ldr	r2, [pc, #216]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 80034f8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80034fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034fe:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003504:	e050      	b.n	80035a8 <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8003506:	4833      	ldr	r0, [pc, #204]	; (80035d4 <HAL_UART_RxCpltCallback+0x8d8>)
 8003508:	f016 ff96 	bl	801a438 <puts>
		if (cadence >= 6250) {
 800350c:	4b30      	ldr	r3, [pc, #192]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f641 0269 	movw	r2, #6249	; 0x1869
 8003514:	4293      	cmp	r3, r2
 8003516:	d949      	bls.n	80035ac <HAL_UART_RxCpltCallback+0x8b0>
			cadence /= 2;
 8003518:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	4a2c      	ldr	r2, [pc, #176]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 8003520:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <HAL_UART_RxCpltCallback+0x8d4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800352c:	e03e      	b.n	80035ac <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 800352e:	482a      	ldr	r0, [pc, #168]	; (80035d8 <HAL_UART_RxCpltCallback+0x8dc>)
 8003530:	f016 ff82 	bl	801a438 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <HAL_UART_RxCpltCallback+0x8e0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f013 fe40 	bl	80171c0 <osEventFlagsSet>
		break;
 8003540:	e035      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8003542:	4827      	ldr	r0, [pc, #156]	; (80035e0 <HAL_UART_RxCpltCallback+0x8e4>)
 8003544:	f016 ff78 	bl	801a438 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8003548:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_UART_RxCpltCallback+0x8e0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2104      	movs	r1, #4
 800354e:	4618      	mov	r0, r3
 8003550:	f013 fe36 	bl	80171c0 <osEventFlagsSet>
		break;
 8003554:	e02b      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8003556:	4823      	ldr	r0, [pc, #140]	; (80035e4 <HAL_UART_RxCpltCallback+0x8e8>)
 8003558:	f016 ff6e 	bl	801a438 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <HAL_UART_RxCpltCallback+0x8e0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2108      	movs	r1, #8
 8003562:	4618      	mov	r0, r3
 8003564:	f013 fe2c 	bl	80171c0 <osEventFlagsSet>
		break;
 8003568:	e021      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xAF: {
		sync();
 800356a:	f000 f999 	bl	80038a0 <sync>
		break;
 800356e:	e01e      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_UART_RxCpltCallback+0x8ec>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2101      	movs	r1, #1
 8003576:	4618      	mov	r0, r3
 8003578:	f013 fe22 	bl	80171c0 <osEventFlagsSet>
		break;
 800357c:	e017      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_UART_RxCpltCallback+0x8ec>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2102      	movs	r1, #2
 8003584:	4618      	mov	r0, r3
 8003586:	f013 fe1b 	bl	80171c0 <osEventFlagsSet>
		break;
 800358a:	e010      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xDF: {
		reset_error_counters();
 800358c:	f7fe fd84 	bl	8002098 <reset_error_counters>
		break;
 8003590:	e00d      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xEF: {
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 8003592:	f7fe ff31 	bl	80023f8 <send_previous_error_packet>
#endif
		break;
 8003596:	e00a      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
	}
	default: {
		printf("Unknown Command\n");
 8003598:	4814      	ldr	r0, [pc, #80]	; (80035ec <HAL_UART_RxCpltCallback+0x8f0>)
 800359a:	f016 ff4d 	bl	801a438 <puts>
		break;
 800359e:	e006      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
		break;
 80035a0:	bf00      	nop
 80035a2:	e004      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
		break;
 80035a4:	bf00      	nop
 80035a6:	e002      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
		break;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <HAL_UART_RxCpltCallback+0x8b2>
		break;
 80035ac:	bf00      	nop
	}
	}
}
 80035ae:	bf00      	nop
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	0801af3c 	.word	0x0801af3c
 80035bc:	24001ade 	.word	0x24001ade
 80035c0:	2400003c 	.word	0x2400003c
 80035c4:	24000314 	.word	0x24000314
 80035c8:	0801af44 	.word	0x0801af44
 80035cc:	0801af50 	.word	0x0801af50
 80035d0:	240000bc 	.word	0x240000bc
 80035d4:	0801af5c 	.word	0x0801af5c
 80035d8:	0801af68 	.word	0x0801af68
 80035dc:	24001a94 	.word	0x24001a94
 80035e0:	0801af78 	.word	0x0801af78
 80035e4:	0801af84 	.word	0x0801af84
 80035e8:	24001a98 	.word	0x24001a98
 80035ec:	0801af90 	.word	0x0801af90

080035f0 <get_reset_cause>:

void get_reset_cause()
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 80035f6:	4b14      	ldr	r3, [pc, #80]	; (8003648 <get_reset_cause+0x58>)
 80035f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80035fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <get_reset_cause+0x24>
    {
        error.category = EC_watchdog;
 8003604:	2304      	movs	r3, #4
 8003606:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003608:	231a      	movs	r3, #26
 800360a:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7fe fca5 	bl	8001f5c <handle_error>
 8003612:	e00d      	b.n	8003630 <get_reset_cause+0x40>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <get_reset_cause+0x58>)
 8003616:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800361a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <get_reset_cause+0x40>
    {
        error.category = EC_brownout;
 8003622:	2303      	movs	r3, #3
 8003624:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003626:	231a      	movs	r3, #26
 8003628:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fe fc96 	bl	8001f5c <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <get_reset_cause+0x58>)
 8003632:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <get_reset_cause+0x58>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	58024400 	.word	0x58024400

0800364c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003650:	f002 fb9e 	bl	8005d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003654:	f000 f828 	bl	80036a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003658:	f000 f8a8 	bl	80037ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800365c:	f7ff f948 	bl	80028f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003660:	f7fd fb42 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003664:	f001 ff2e 	bl	80054c4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003668:	f7ff f9bc 	bl	80029e4 <MX_I2C1_Init>
  MX_SPI2_Init();
 800366c:	f000 fe60 	bl	8004330 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003670:	f001 fb4c 	bl	8004d0c <MX_TIM2_Init>
  MX_TIM1_Init();
 8003674:	f001 fa9c 	bl	8004bb0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8003678:	f7fd f8d6 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 800367c:	f7fc ffb2 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003680:	f7fd fa7e 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003684:	f000 fdfc 	bl	8004280 <MX_SPI1_Init>
  MX_RTC_Init();
 8003688:	f000 fbc8 	bl	8003e1c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

#ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
 800368c:	f7fe fc90 	bl	8001fb0 <error_counter_init>
  	get_reset_cause();
 8003690:	f7ff ffae 	bl	80035f0 <get_reset_cause>
#endif

  system_setup();
 8003694:	f000 f8ba 	bl	800380c <system_setup>
//  handle_error(error);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003698:	f013 fc3c 	bl	8016f14 <osKernelInitialize>
  MX_FREERTOS_Init();
 800369c:	f7fe fefc 	bl	8002498 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80036a0:	f013 fc5c 	bl	8016f5c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80036a4:	e7fe      	b.n	80036a4 <main+0x58>
	...

080036a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b09c      	sub	sp, #112	; 0x70
 80036ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b2:	224c      	movs	r2, #76	; 0x4c
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f016 fe48 	bl	801a34c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	2220      	movs	r2, #32
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f016 fe42 	bl	801a34c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80036c8:	2002      	movs	r0, #2
 80036ca:	f00a fb9b 	bl	800de04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80036ce:	2300      	movs	r3, #0
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <SystemClock_Config+0xfc>)
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	4a33      	ldr	r2, [pc, #204]	; (80037a4 <SystemClock_Config+0xfc>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <SystemClock_Config+0xfc>)
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <SystemClock_Config+0x100>)
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036f0:	4a2d      	ldr	r2, [pc, #180]	; (80037a8 <SystemClock_Config+0x100>)
 80036f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f6:	6193      	str	r3, [r2, #24]
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <SystemClock_Config+0x100>)
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003704:	bf00      	nop
 8003706:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <SystemClock_Config+0x100>)
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003712:	d1f8      	bne.n	8003706 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003714:	230b      	movs	r3, #11
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800371e:	2309      	movs	r3, #9
 8003720:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003722:	2340      	movs	r3, #64	; 0x40
 8003724:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003726:	2301      	movs	r3, #1
 8003728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800372a:	2302      	movs	r3, #2
 800372c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800372e:	2302      	movs	r3, #2
 8003730:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003732:	2304      	movs	r3, #4
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8003736:	2318      	movs	r3, #24
 8003738:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800373a:	2302      	movs	r3, #2
 800373c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800373e:	2302      	movs	r3, #2
 8003740:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003742:	2302      	movs	r3, #2
 8003744:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003746:	2308      	movs	r3, #8
 8003748:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800374a:	2302      	movs	r3, #2
 800374c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003756:	4618      	mov	r0, r3
 8003758:	f00a fb8e 	bl	800de78 <HAL_RCC_OscConfig>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003762:	f000 f955 	bl	8003a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003766:	233f      	movs	r3, #63	; 0x3f
 8003768:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800376a:	2303      	movs	r3, #3
 800376c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800377a:	2340      	movs	r3, #64	; 0x40
 800377c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003782:	2300      	movs	r3, #0
 8003784:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	2101      	movs	r1, #1
 800378a:	4618      	mov	r0, r3
 800378c:	f00a ffce 	bl	800e72c <HAL_RCC_ClockConfig>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003796:	f000 f93b 	bl	8003a10 <Error_Handler>
  }
}
 800379a:	bf00      	nop
 800379c:	3770      	adds	r7, #112	; 0x70
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	58000400 	.word	0x58000400
 80037a8:	58024800 	.word	0x58024800

080037ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b0b0      	sub	sp, #192	; 0xc0
 80037b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037b2:	463b      	mov	r3, r7
 80037b4:	22c0      	movs	r2, #192	; 0xc0
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f016 fdc7 	bl	801a34c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80037be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80037ca:	2304      	movs	r3, #4
 80037cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80037ce:	2318      	movs	r3, #24
 80037d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80037d2:	2308      	movs	r3, #8
 80037d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80037d6:	2302      	movs	r3, #2
 80037d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80037da:	2302      	movs	r3, #2
 80037dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80037e2:	2320      	movs	r3, #32
 80037e4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037f0:	463b      	mov	r3, r7
 80037f2:	4618      	mov	r0, r3
 80037f4:	f00b fb68 	bl	800eec8 <HAL_RCCEx_PeriphCLKConfig>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80037fe:	f000 f907 	bl	8003a10 <Error_Handler>
  }
}
 8003802:	bf00      	nop
 8003804:	37c0      	adds	r7, #192	; 0xc0
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts



	packet_event_flags = osEventFlagsNew(NULL);
 8003810:	2000      	movs	r0, #0
 8003812:	f013 fc96 	bl	8017142 <osEventFlagsNew>
 8003816:	4603      	mov	r3, r0
 8003818:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <system_setup+0x7c>)
 800381a:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <system_setup+0x7c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d100      	bne.n	8003826 <system_setup+0x1a>
        while (1);
 8003824:	e7fe      	b.n	8003824 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8003826:	2000      	movs	r0, #0
 8003828:	f013 fc8b 	bl	8017142 <osEventFlagsNew>
 800382c:	4603      	mov	r3, r0
 800382e:	4a17      	ldr	r2, [pc, #92]	; (800388c <system_setup+0x80>)
 8003830:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <system_setup+0x80>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d100      	bne.n	800383c <system_setup+0x30>
        while (1);
 800383a:	e7fe      	b.n	800383a <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 800383c:	2000      	movs	r0, #0
 800383e:	f013 fc80 	bl	8017142 <osEventFlagsNew>
 8003842:	4603      	mov	r3, r0
 8003844:	4a12      	ldr	r2, [pc, #72]	; (8003890 <system_setup+0x84>)
 8003846:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8003848:	4b11      	ldr	r3, [pc, #68]	; (8003890 <system_setup+0x84>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d100      	bne.n	8003852 <system_setup+0x46>
        while (1);
 8003850:	e7fe      	b.n	8003850 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 8003852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003856:	2200      	movs	r2, #0
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800385a:	210c      	movs	r1, #12
 800385c:	480d      	ldr	r0, [pc, #52]	; (8003894 <system_setup+0x88>)
 800385e:	f00f f9c1 	bl	8012be4 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 8003862:	f001 ff39 	bl	80056d8 <voltage_monitor_init>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d100      	bne.n	800386e <system_setup+0x62>
		while (1);
 800386c:	e7fe      	b.n	800386c <system_setup+0x60>
	}

	if (!init_adc_dma()) {
 800386e:	f000 fb67 	bl	8003f40 <init_adc_dma>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d100      	bne.n	800387a <system_setup+0x6e>
		while (1);
 8003878:	e7fe      	b.n	8003878 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800387a:	2201      	movs	r2, #1
 800387c:	4906      	ldr	r1, [pc, #24]	; (8003898 <system_setup+0x8c>)
 800387e:	4807      	ldr	r0, [pc, #28]	; (800389c <system_setup+0x90>)
 8003880:	f010 fe90 	bl	80145a4 <HAL_UART_Receive_IT>

	//MX_IWDG1_Init();

}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	24001a90 	.word	0x24001a90
 800388c:	24001a94 	.word	0x24001a94
 8003890:	24001a98 	.word	0x24001a98
 8003894:	24001df0 	.word	0x24001df0
 8003898:	24001a9c 	.word	0x24001a9c
 800389c:	24001e3c 	.word	0x24001e3c

080038a0 <sync>:

void sync() {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
	send_ACK();
 80038a6:	f000 f821 	bl	80038ec <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80038aa:	480e      	ldr	r0, [pc, #56]	; (80038e4 <sync+0x44>)
 80038ac:	f010 fec6 	bl	801463c <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80038b0:	2364      	movs	r3, #100	; 0x64
 80038b2:	2209      	movs	r2, #9
 80038b4:	490c      	ldr	r1, [pc, #48]	; (80038e8 <sync+0x48>)
 80038b6:	480b      	ldr	r0, [pc, #44]	; (80038e4 <sync+0x44>)
 80038b8:	f010 fdac 	bl	8014414 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <sync+0x48>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	2bff      	cmp	r3, #255	; 0xff
 80038c6:	d1f3      	bne.n	80038b0 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 80038c8:	4807      	ldr	r0, [pc, #28]	; (80038e8 <sync+0x48>)
 80038ca:	f001 fd39 	bl	8005340 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80038ce:	2201      	movs	r2, #1
 80038d0:	4905      	ldr	r1, [pc, #20]	; (80038e8 <sync+0x48>)
 80038d2:	4804      	ldr	r0, [pc, #16]	; (80038e4 <sync+0x44>)
 80038d4:	f010 fe66 	bl	80145a4 <HAL_UART_Receive_IT>
	send_error_counter_packet();
 80038d8:	f7fe fc52 	bl	8002180 <send_error_counter_packet>
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	24001e3c 	.word	0x24001e3c
 80038e8:	24001a9c 	.word	0x24001a9c

080038ec <send_ACK>:

void send_ACK() {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <send_ACK+0x1c>)
 80038f2:	22ff      	movs	r2, #255	; 0xff
 80038f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80038f6:	2364      	movs	r3, #100	; 0x64
 80038f8:	2201      	movs	r2, #1
 80038fa:	4903      	ldr	r1, [pc, #12]	; (8003908 <send_ACK+0x1c>)
 80038fc:	4803      	ldr	r0, [pc, #12]	; (800390c <send_ACK+0x20>)
 80038fe:	f010 fcfb 	bl	80142f8 <HAL_UART_Transmit>
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	24001ae8 	.word	0x24001ae8
 800390c:	24001e3c 	.word	0x24001e3c

08003910 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <get_current_step+0xc0>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003922:	4293      	cmp	r3, r2
 8003924:	d04a      	beq.n	80039bc <get_current_step+0xac>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392c:	da48      	bge.n	80039c0 <get_current_step+0xb0>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003934:	4293      	cmp	r3, r2
 8003936:	d03f      	beq.n	80039b8 <get_current_step+0xa8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f640 628b 	movw	r2, #3723	; 0xe8b
 800393e:	4293      	cmp	r3, r2
 8003940:	dc3e      	bgt.n	80039c0 <get_current_step+0xb0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003948:	4293      	cmp	r3, r2
 800394a:	d033      	beq.n	80039b4 <get_current_step+0xa4>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003952:	da35      	bge.n	80039c0 <get_current_step+0xb0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800395a:	4293      	cmp	r3, r2
 800395c:	d028      	beq.n	80039b0 <get_current_step+0xa0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003964:	4293      	cmp	r3, r2
 8003966:	dc2b      	bgt.n	80039c0 <get_current_step+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f240 7245 	movw	r2, #1861	; 0x745
 800396e:	4293      	cmp	r3, r2
 8003970:	d01c      	beq.n	80039ac <get_current_step+0x9c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f240 7245 	movw	r2, #1861	; 0x745
 8003978:	4293      	cmp	r3, r2
 800397a:	dc21      	bgt.n	80039c0 <get_current_step+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003982:	4293      	cmp	r3, r2
 8003984:	d010      	beq.n	80039a8 <get_current_step+0x98>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800398c:	4293      	cmp	r3, r2
 800398e:	dc17      	bgt.n	80039c0 <get_current_step+0xb0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <get_current_step+0x90>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 800399c:	d002      	beq.n	80039a4 <get_current_step+0x94>
 800399e:	e00f      	b.n	80039c0 <get_current_step+0xb0>
	case 0:
		return 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e00e      	b.n	80039c2 <get_current_step+0xb2>
	case 620:
		return 1;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e00c      	b.n	80039c2 <get_current_step+0xb2>
	case 1241:
		return 2;
 80039a8:	2302      	movs	r3, #2
 80039aa:	e00a      	b.n	80039c2 <get_current_step+0xb2>
	case 1861:
		return 3;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e008      	b.n	80039c2 <get_current_step+0xb2>
	case 2482:
		return 4;
 80039b0:	2304      	movs	r3, #4
 80039b2:	e006      	b.n	80039c2 <get_current_step+0xb2>
	case 3103:
		return 5;
 80039b4:	2305      	movs	r3, #5
 80039b6:	e004      	b.n	80039c2 <get_current_step+0xb2>
	case 3723:
		return 6;
 80039b8:	2306      	movs	r3, #6
 80039ba:	e002      	b.n	80039c2 <get_current_step+0xb2>
	case 4095:
		return 7;
 80039bc:	2307      	movs	r3, #7
 80039be:	e000      	b.n	80039c2 <get_current_step+0xb2>
	default:
		return -1;
 80039c0:	23ff      	movs	r3, #255	; 0xff
	}
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40007400 	.word	0x40007400

080039d4 <enter_stop>:

void enter_stop() {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
	  send_ACK();
 80039d8:	f7ff ff88 	bl	80038ec <send_ACK>

	  vTaskSuspendAll();
 80039dc:	f014 ff48 	bl	8018870 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80039e0:	2101      	movs	r1, #1
 80039e2:	2001      	movs	r0, #1
 80039e4:	f00a f9d2 	bl	800dd8c <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 80039e8:	f7ff f91c 	bl	8002c24 <__NVIC_SystemReset>

080039ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a04      	ldr	r2, [pc, #16]	; (8003a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039fe:	f002 fa03 	bl	8005e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40001000 	.word	0x40001000

08003a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003a16:	2302      	movs	r3, #2
 8003a18:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8003a1a:	231a      	movs	r3, #26
 8003a1c:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe fa9c 	bl	8001f5c <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003a32:	bf00      	nop
 8003a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a38:	481c      	ldr	r0, [pc, #112]	; (8003aac <create_pmt_packet+0x80>)
 8003a3a:	f007 fe01 	bl	800b640 <HAL_GPIO_ReadPin>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f7      	bne.n	8003a34 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fa98 	bl	8004f7c <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003a4c:	f107 0308 	add.w	r3, r7, #8
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fac9 	bl	8003fe8 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8003a56:	23ff      	movs	r3, #255	; 0xff
 8003a58:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003a5a:	23ff      	movs	r3, #255	; 0xff
 8003a5c:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <create_pmt_packet+0x84>)
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003a6a:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <create_pmt_packet+0x84>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003a72:	7a3b      	ldrb	r3, [r7, #8]
 8003a74:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8003a76:	7a7b      	ldrb	r3, [r7, #9]
 8003a78:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003a7a:	793b      	ldrb	r3, [r7, #4]
 8003a7c:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003a7e:	797b      	ldrb	r3, [r7, #5]
 8003a80:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003a82:	79bb      	ldrb	r3, [r7, #6]
 8003a84:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003a8a:	f107 010c 	add.w	r1, r7, #12
 8003a8e:	2364      	movs	r3, #100	; 0x64
 8003a90:	220a      	movs	r2, #10
 8003a92:	4808      	ldr	r0, [pc, #32]	; (8003ab4 <create_pmt_packet+0x88>)
 8003a94:	f010 fc30 	bl	80142f8 <HAL_UART_Transmit>

	pmt_seq++;
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <create_pmt_packet+0x84>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <create_pmt_packet+0x84>)
 8003aa2:	801a      	strh	r2, [r3, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	58020000 	.word	0x58020000
 8003ab0:	24001aea 	.word	0x24001aea
 8003ab4:	24001e3c 	.word	0x24001e3c

08003ab8 <create_erpa_packet>:


void create_erpa_packet() {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003abe:	bf00      	nop
 8003ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ac4:	4828      	ldr	r0, [pc, #160]	; (8003b68 <create_erpa_packet+0xb0>)
 8003ac6:	f007 fdbb 	bl	800b640 <HAL_GPIO_ReadPin>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f7      	bne.n	8003ac0 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003ad0:	23ff      	movs	r3, #255	; 0xff
 8003ad2:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 fa50 	bl	8004f7c <get_uptime>
	sweep_step = get_current_step();
 8003adc:	f7ff ff18 	bl	8003910 <get_current_step>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fa9d 	bl	8004028 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003aee:	f107 0308 	add.w	r3, r7, #8
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fab8 	bl	8004068 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003af8:	23ee      	movs	r3, #238	; 0xee
 8003afa:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003afc:	23ee      	movs	r3, #238	; 0xee
 8003afe:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <create_erpa_packet+0xb4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003b0a:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <create_erpa_packet+0xb4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003b14:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <create_erpa_packet+0xb4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003b1c:	7ffb      	ldrb	r3, [r7, #31]
 8003b1e:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003b20:	893b      	ldrh	r3, [r7, #8]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003b2a:	893b      	ldrh	r3, [r7, #8]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003b30:	7b3b      	ldrb	r3, [r7, #12]
 8003b32:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003b34:	7b7b      	ldrb	r3, [r7, #13]
 8003b36:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003b38:	793b      	ldrb	r3, [r7, #4]
 8003b3a:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003b3c:	797b      	ldrb	r3, [r7, #5]
 8003b3e:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003b40:	79bb      	ldrb	r3, [r7, #6]
 8003b42:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003b48:	f107 0110 	add.w	r1, r7, #16
 8003b4c:	2364      	movs	r3, #100	; 0x64
 8003b4e:	220e      	movs	r2, #14
 8003b50:	4807      	ldr	r0, [pc, #28]	; (8003b70 <create_erpa_packet+0xb8>)
 8003b52:	f010 fbd1 	bl	80142f8 <HAL_UART_Transmit>

	erpa_seq++;
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <create_erpa_packet+0xb4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a03      	ldr	r2, [pc, #12]	; (8003b6c <create_erpa_packet+0xb4>)
 8003b5e:	6013      	str	r3, [r2, #0]
}
 8003b60:	bf00      	nop
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	58020400 	.word	0x58020400
 8003b6c:	24001aec 	.word	0x24001aec
 8003b70:	24001e3c 	.word	0x24001e3c

08003b74 <create_hk_packet>:


void create_hk_packet() {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b092      	sub	sp, #72	; 0x48
 8003b78:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 f9fd 	bl	8004f7c <get_uptime>
	get_unix_time(timestamp);
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fa48 	bl	800501c <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8003b8c:	f001 ffe4 	bl	8005b58 <get_rail_monitor>
 8003b90:	6478      	str	r0, [r7, #68]	; 0x44


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003b92:	23dd      	movs	r3, #221	; 0xdd
 8003b94:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003b96:	23dd      	movs	r3, #221	; 0xdd
 8003b98:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003b9a:	4b93      	ldr	r3, [pc, #588]	; (8003de8 <create_hk_packet+0x274>)
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	74bb      	strb	r3, [r7, #18]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003ba6:	4b90      	ldr	r3, [pc, #576]	; (8003de8 <create_hk_packet+0x274>)
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	74fb      	strb	r3, [r7, #19]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb0:	889b      	ldrh	r3, [r3, #4]
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	753b      	strb	r3, [r7, #20]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bbc:	889b      	ldrh	r3, [r3, #4]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc4:	330a      	adds	r3, #10
 8003bc6:	889b      	ldrh	r3, [r3, #4]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd2:	330a      	adds	r3, #10
 8003bd4:	889b      	ldrh	r3, [r3, #4]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	75fb      	strb	r3, [r7, #23]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bdc:	3314      	adds	r3, #20
 8003bde:	889b      	ldrh	r3, [r3, #4]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	763b      	strb	r3, [r7, #24]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bea:	3314      	adds	r3, #20
 8003bec:	889b      	ldrh	r3, [r3, #4]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf4:	331e      	adds	r3, #30
 8003bf6:	889b      	ldrh	r3, [r3, #4]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c02:	331e      	adds	r3, #30
 8003c04:	889b      	ldrh	r3, [r3, #4]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0c:	3328      	adds	r3, #40	; 0x28
 8003c0e:	889b      	ldrh	r3, [r3, #4]
 8003c10:	0a1b      	lsrs	r3, r3, #8
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	773b      	strb	r3, [r7, #28]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1a:	3328      	adds	r3, #40	; 0x28
 8003c1c:	889b      	ldrh	r3, [r3, #4]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c24:	3332      	adds	r3, #50	; 0x32
 8003c26:	889b      	ldrh	r3, [r3, #4]
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c32:	3332      	adds	r3, #50	; 0x32
 8003c34:	889b      	ldrh	r3, [r3, #4]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3c:	333c      	adds	r3, #60	; 0x3c
 8003c3e:	889b      	ldrh	r3, [r3, #4]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4c:	333c      	adds	r3, #60	; 0x3c
 8003c4e:	889b      	ldrh	r3, [r3, #4]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c58:	3346      	adds	r3, #70	; 0x46
 8003c5a:	889b      	ldrh	r3, [r3, #4]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c68:	3346      	adds	r3, #70	; 0x46
 8003c6a:	889b      	ldrh	r3, [r3, #4]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c74:	3350      	adds	r3, #80	; 0x50
 8003c76:	889b      	ldrh	r3, [r3, #4]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c84:	3350      	adds	r3, #80	; 0x50
 8003c86:	889b      	ldrh	r3, [r3, #4]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c90:	335a      	adds	r3, #90	; 0x5a
 8003c92:	889b      	ldrh	r3, [r3, #4]
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca0:	335a      	adds	r3, #90	; 0x5a
 8003ca2:	889b      	ldrh	r3, [r3, #4]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cac:	3364      	adds	r3, #100	; 0x64
 8003cae:	889b      	ldrh	r3, [r3, #4]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cbc:	3364      	adds	r3, #100	; 0x64
 8003cbe:	889b      	ldrh	r3, [r3, #4]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003cc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc8:	336e      	adds	r3, #110	; 0x6e
 8003cca:	889b      	ldrh	r3, [r3, #4]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd8:	336e      	adds	r3, #110	; 0x6e
 8003cda:	889b      	ldrh	r3, [r3, #4]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce4:	3378      	adds	r3, #120	; 0x78
 8003ce6:	889b      	ldrh	r3, [r3, #4]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf4:	3378      	adds	r3, #120	; 0x78
 8003cf6:	889b      	ldrh	r3, [r3, #4]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d00:	3382      	adds	r3, #130	; 0x82
 8003d02:	889b      	ldrh	r3, [r3, #4]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d10:	3382      	adds	r3, #130	; 0x82
 8003d12:	889b      	ldrh	r3, [r3, #4]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1c:	338c      	adds	r3, #140	; 0x8c
 8003d1e:	889b      	ldrh	r3, [r3, #4]
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2c:	338c      	adds	r3, #140	; 0x8c
 8003d2e:	889b      	ldrh	r3, [r3, #4]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d38:	3396      	adds	r3, #150	; 0x96
 8003d3a:	889b      	ldrh	r3, [r3, #4]
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d48:	3396      	adds	r3, #150	; 0x96
 8003d4a:	889b      	ldrh	r3, [r3, #4]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d54:	33a0      	adds	r3, #160	; 0xa0
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d64:	33a0      	adds	r3, #160	; 0xa0
 8003d66:	889b      	ldrh	r3, [r3, #4]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d70:	33aa      	adds	r3, #170	; 0xaa
 8003d72:	889b      	ldrh	r3, [r3, #4]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d80:	33aa      	adds	r3, #170	; 0xaa
 8003d82:	889b      	ldrh	r3, [r3, #4]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = timestamp[0];
 8003d8a:	7a3b      	ldrb	r3, [r7, #8]
 8003d8c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = timestamp[1];
 8003d90:	7a7b      	ldrb	r3, [r7, #9]
 8003d92:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = timestamp[2];
 8003d96:	7abb      	ldrb	r3, [r7, #10]
 8003d98:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = timestamp[3];
 8003d9c:	7afb      	ldrb	r3, [r7, #11]
 8003d9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = timestamp[4];
 8003da2:	7b3b      	ldrb	r3, [r7, #12]
 8003da4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = timestamp[5];
 8003da8:	7b7b      	ldrb	r3, [r7, #13]
 8003daa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = uptime[0];
 8003dae:	793b      	ldrb	r3, [r7, #4]
 8003db0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = uptime[1];
 8003db4:	797b      	ldrb	r3, [r7, #5]
 8003db6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = uptime[2];
 8003dba:	79bb      	ldrb	r3, [r7, #6]
 8003dbc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = uptime[3];
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003dc6:	f107 0110 	add.w	r1, r7, #16
 8003dca:	2364      	movs	r3, #100	; 0x64
 8003dcc:	2232      	movs	r2, #50	; 0x32
 8003dce:	4807      	ldr	r0, [pc, #28]	; (8003dec <create_hk_packet+0x278>)
 8003dd0:	f010 fa92 	bl	80142f8 <HAL_UART_Transmit>

	hk_seq++;
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <create_hk_packet+0x274>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	4b02      	ldr	r3, [pc, #8]	; (8003de8 <create_hk_packet+0x274>)
 8003dde:	801a      	strh	r2, [r3, #0]
}
 8003de0:	bf00      	nop
 8003de2:	3748      	adds	r7, #72	; 0x48
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	24001af0 	.word	0x24001af0
 8003dec:	24001e3c 	.word	0x24001e3c

08003df0 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <reset_packet_sequence_numbers+0x20>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <reset_packet_sequence_numbers+0x24>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <reset_packet_sequence_numbers+0x28>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	801a      	strh	r2, [r3, #0]
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	24001aea 	.word	0x24001aea
 8003e14:	24001aec 	.word	0x24001aec
 8003e18:	24001af0 	.word	0x24001af0

08003e1c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003e30:	2300      	movs	r3, #0
 8003e32:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003e34:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e36:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <MX_RTC_Init+0xb8>)
 8003e38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e3a:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003e40:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e42:	2263      	movs	r2, #99	; 0x63
 8003e44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003e46:	4b22      	ldr	r3, [pc, #136]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e48:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e66:	481a      	ldr	r0, [pc, #104]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e68:	f00d fd2c 	bl	80118c4 <HAL_RTC_Init>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003e72:	f7ff fdcd 	bl	8003a10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4619      	mov	r1, r3
 8003e90:	480f      	ldr	r0, [pc, #60]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003e92:	f00d fd99 	bl	80119c8 <HAL_RTC_SetTime>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003e9c:	f7ff fdb8 	bl	8003a10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003eb0:	463b      	mov	r3, r7
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4806      	ldr	r0, [pc, #24]	; (8003ed0 <MX_RTC_Init+0xb4>)
 8003eb8:	f00d fe80 	bl	8011bbc <HAL_RTC_SetDate>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003ec2:	f7ff fda5 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	24001af4 	.word	0x24001af4
 8003ed4:	58004000 	.word	0x58004000

08003ed8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b0b2      	sub	sp, #200	; 0xc8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ee0:	f107 0308 	add.w	r3, r7, #8
 8003ee4:	22c0      	movs	r2, #192	; 0xc0
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f016 fa2f 	bl	801a34c <memset>
  if(rtcHandle->Instance==RTC)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a10      	ldr	r2, [pc, #64]	; (8003f34 <HAL_RTC_MspInit+0x5c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d118      	bne.n	8003f2a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ef8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_RTC_MspInit+0x60>)
 8003f06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f00a ffda 	bl	800eec8 <HAL_RCCEx_PeriphCLKConfig>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003f1a:	f7ff fd79 	bl	8003a10 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_RTC_MspInit+0x64>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	4a06      	ldr	r2, [pc, #24]	; (8003f3c <HAL_RTC_MspInit+0x64>)
 8003f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f28:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	37c8      	adds	r7, #200	; 0xc8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	58004000 	.word	0x58004000
 8003f38:	00019300 	.word	0x00019300
 8003f3c:	58024400 	.word	0x58024400

08003f40 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003f4a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f52:	481f      	ldr	r0, [pc, #124]	; (8003fd0 <init_adc_dma+0x90>)
 8003f54:	f003 fa6c 	bl	8007430 <HAL_ADCEx_Calibration_Start>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003f5e:	f7ff fd57 	bl	8003a10 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003f62:	220b      	movs	r2, #11
 8003f64:	491b      	ldr	r1, [pc, #108]	; (8003fd4 <init_adc_dma+0x94>)
 8003f66:	481a      	ldr	r0, [pc, #104]	; (8003fd0 <init_adc_dma+0x90>)
 8003f68:	f002 fb40 	bl	80065ec <HAL_ADC_Start_DMA>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003f72:	f7ff fd4d 	bl	8003a10 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003f76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003f7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f7e:	4816      	ldr	r0, [pc, #88]	; (8003fd8 <init_adc_dma+0x98>)
 8003f80:	f003 fa56 	bl	8007430 <HAL_ADCEx_Calibration_Start>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003f8a:	f7ff fd41 	bl	8003a10 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003f8e:	2204      	movs	r2, #4
 8003f90:	4912      	ldr	r1, [pc, #72]	; (8003fdc <init_adc_dma+0x9c>)
 8003f92:	4811      	ldr	r0, [pc, #68]	; (8003fd8 <init_adc_dma+0x98>)
 8003f94:	f002 fb2a 	bl	80065ec <HAL_ADC_Start_DMA>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003f9e:	f7ff fd37 	bl	8003a10 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003fa2:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <init_adc_dma+0xa0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <init_adc_dma+0xa0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fb0:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <init_adc_dma+0xa4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <init_adc_dma+0xa4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc0:	601a      	str	r2, [r3, #0]


	status = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	71fb      	strb	r3, [r7, #7]

	return status;
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	2400015c 	.word	0x2400015c
 8003fd4:	24001b20 	.word	0x24001b20
 8003fd8:	240001c0 	.word	0x240001c0
 8003fdc:	24001b40 	.word	0x24001b40
 8003fe0:	24001bdc 	.word	0x24001bdc
 8003fe4:	24001b54 	.word	0x24001b54

08003fe8 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	490b      	ldr	r1, [pc, #44]	; (8004020 <sample_pmt_spi+0x38>)
 8003ff4:	480b      	ldr	r0, [pc, #44]	; (8004024 <sample_pmt_spi+0x3c>)
 8003ff6:	f00e f8ab 	bl	8012150 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <sample_pmt_spi+0x38>)
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	b29b      	uxth	r3, r3
 8004002:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <sample_pmt_spi+0x38>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7bfa      	ldrb	r2, [r7, #15]
 800400e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3301      	adds	r3, #1
 8004014:	7bba      	ldrb	r2, [r7, #14]
 8004016:	701a      	strb	r2, [r3, #0]
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	24001b4c 	.word	0x24001b4c
 8004024:	24001b54 	.word	0x24001b54

08004028 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8004030:	2201      	movs	r2, #1
 8004032:	490b      	ldr	r1, [pc, #44]	; (8004060 <sample_erpa_spi+0x38>)
 8004034:	480b      	ldr	r0, [pc, #44]	; (8004064 <sample_erpa_spi+0x3c>)
 8004036:	f00e f88b 	bl	8012150 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <sample_erpa_spi+0x38>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	b29b      	uxth	r3, r3
 8004042:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <sample_erpa_spi+0x38>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3301      	adds	r3, #1
 8004054:	7bba      	ldrb	r2, [r7, #14]
 8004056:	701a      	strb	r2, [r3, #0]
}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	24001b48 	.word	0x24001b48
 8004064:	24001bdc 	.word	0x24001bdc

08004068 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <sample_erpa_adc+0x20>)
 8004072:	885b      	ldrh	r3, [r3, #2]
 8004074:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	89fa      	ldrh	r2, [r7, #14]
 800407a:	801a      	strh	r2, [r3, #0]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	24001b20 	.word	0x24001b20

0800408c <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8004094:	2390      	movs	r3, #144	; 0x90
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f8a2 	bl	80041e0 <poll_i2c_sensor>
 800409c:	4603      	mov	r3, r0
 800409e:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80040a0:	2394      	movs	r3, #148	; 0x94
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f89c 	bl	80041e0 <poll_i2c_sensor>
 80040a8:	4603      	mov	r3, r0
 80040aa:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80040ac:	2392      	movs	r3, #146	; 0x92
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f896 	bl	80041e0 <poll_i2c_sensor>
 80040b4:	4603      	mov	r3, r0
 80040b6:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80040b8:	2396      	movs	r3, #150	; 0x96
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f890 	bl	80041e0 <poll_i2c_sensor>
 80040c0:	4603      	mov	r3, r0
 80040c2:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	89fa      	ldrh	r2, [r7, #14]
 80040c8:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3302      	adds	r3, #2
 80040ce:	89ba      	ldrh	r2, [r7, #12]
 80040d0:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	897a      	ldrh	r2, [r7, #10]
 80040d8:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3306      	adds	r3, #6
 80040de:	893a      	ldrh	r2, [r7, #8]
 80040e0:	801a      	strh	r2, [r3, #0]
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 80040ec:	b480      	push	{r7}
 80040ee:	b089      	sub	sp, #36	; 0x24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <sample_hk_adc1+0xa0>)
 80040f6:	8a9b      	ldrh	r3, [r3, #20]
 80040f8:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <sample_hk_adc1+0xa0>)
 80040fc:	8a1b      	ldrh	r3, [r3, #16]
 80040fe:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8004100:	4b22      	ldr	r3, [pc, #136]	; (800418c <sample_hk_adc1+0xa0>)
 8004102:	899b      	ldrh	r3, [r3, #12]
 8004104:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8004106:	4b21      	ldr	r3, [pc, #132]	; (800418c <sample_hk_adc1+0xa0>)
 8004108:	8a5b      	ldrh	r3, [r3, #18]
 800410a:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 800410c:	4b1f      	ldr	r3, [pc, #124]	; (800418c <sample_hk_adc1+0xa0>)
 800410e:	889b      	ldrh	r3, [r3, #4]
 8004110:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8004112:	4b1e      	ldr	r3, [pc, #120]	; (800418c <sample_hk_adc1+0xa0>)
 8004114:	88db      	ldrh	r3, [r3, #6]
 8004116:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8004118:	4b1c      	ldr	r3, [pc, #112]	; (800418c <sample_hk_adc1+0xa0>)
 800411a:	89db      	ldrh	r3, [r3, #14]
 800411c:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <sample_hk_adc1+0xa0>)
 8004120:	891b      	ldrh	r3, [r3, #8]
 8004122:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <sample_hk_adc1+0xa0>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 800412a:	4b18      	ldr	r3, [pc, #96]	; (800418c <sample_hk_adc1+0xa0>)
 800412c:	895b      	ldrh	r3, [r3, #10]
 800412e:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8bfa      	ldrh	r2, [r7, #30]
 8004134:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3302      	adds	r3, #2
 800413a:	8bba      	ldrh	r2, [r7, #28]
 800413c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	8b7a      	ldrh	r2, [r7, #26]
 8004144:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3306      	adds	r3, #6
 800414a:	8b3a      	ldrh	r2, [r7, #24]
 800414c:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3308      	adds	r3, #8
 8004152:	8afa      	ldrh	r2, [r7, #22]
 8004154:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	330a      	adds	r3, #10
 800415a:	8aba      	ldrh	r2, [r7, #20]
 800415c:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	330c      	adds	r3, #12
 8004162:	8a7a      	ldrh	r2, [r7, #18]
 8004164:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	330e      	adds	r3, #14
 800416a:	8a3a      	ldrh	r2, [r7, #16]
 800416c:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3310      	adds	r3, #16
 8004172:	89fa      	ldrh	r2, [r7, #14]
 8004174:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3312      	adds	r3, #18
 800417a:	89ba      	ldrh	r2, [r7, #12]
 800417c:	801a      	strh	r2, [r3, #0]
}
 800417e:	bf00      	nop
 8004180:	3724      	adds	r7, #36	; 0x24
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	24001b20 	.word	0x24001b20

08004190 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <sample_hk_adc3+0x4c>)
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <sample_hk_adc3+0x4c>)
 80041a0:	885b      	ldrh	r3, [r3, #2]
 80041a2:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 80041a4:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <sample_hk_adc3+0x4c>)
 80041a6:	889b      	ldrh	r3, [r3, #4]
 80041a8:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <sample_hk_adc3+0x4c>)
 80041ac:	88db      	ldrh	r3, [r3, #6]
 80041ae:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	89fa      	ldrh	r2, [r7, #14]
 80041b4:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3302      	adds	r3, #2
 80041ba:	89ba      	ldrh	r2, [r7, #12]
 80041bc:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	897a      	ldrh	r2, [r7, #10]
 80041c4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3306      	adds	r3, #6
 80041ca:	893a      	ldrh	r2, [r7, #8]
 80041cc:	801a      	strh	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	24001b40 	.word	0x24001b40

080041e0 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 80041ea:	2200      	movs	r2, #0
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <poll_i2c_sensor+0x90>)
 80041ee:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	b299      	uxth	r1, r3
 80041f4:	2301      	movs	r3, #1
 80041f6:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <poll_i2c_sensor+0x90>)
 80041f8:	481e      	ldr	r0, [pc, #120]	; (8004274 <poll_i2c_sensor+0x94>)
 80041fa:	f007 faef 	bl	800b7dc <HAL_I2C_Master_Transmit_DMA>
 80041fe:	4603      	mov	r3, r0
 8004200:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8004202:	7b7b      	ldrb	r3, [r7, #13]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8004208:	481b      	ldr	r0, [pc, #108]	; (8004278 <poll_i2c_sensor+0x98>)
 800420a:	f016 f915 	bl	801a438 <puts>
 800420e:	e028      	b.n	8004262 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004210:	bf00      	nop
 8004212:	4818      	ldr	r0, [pc, #96]	; (8004274 <poll_i2c_sensor+0x94>)
 8004214:	f007 fdc9 	bl	800bdaa <HAL_I2C_GetState>
 8004218:	4603      	mov	r3, r0
 800421a:	2b20      	cmp	r3, #32
 800421c:	d1f9      	bne.n	8004212 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	b299      	uxth	r1, r3
 8004222:	2302      	movs	r3, #2
 8004224:	4a12      	ldr	r2, [pc, #72]	; (8004270 <poll_i2c_sensor+0x90>)
 8004226:	4813      	ldr	r0, [pc, #76]	; (8004274 <poll_i2c_sensor+0x94>)
 8004228:	f007 fbec 	bl	800ba04 <HAL_I2C_Master_Receive_DMA>
 800422c:	4603      	mov	r3, r0
 800422e:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8004230:	7b7b      	ldrb	r3, [r7, #13]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8004236:	4811      	ldr	r0, [pc, #68]	; (800427c <poll_i2c_sensor+0x9c>)
 8004238:	f016 f8fe 	bl	801a438 <puts>
 800423c:	e011      	b.n	8004262 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 800423e:	bf00      	nop
 8004240:	480c      	ldr	r0, [pc, #48]	; (8004274 <poll_i2c_sensor+0x94>)
 8004242:	f007 fdb2 	bl	800bdaa <HAL_I2C_GetState>
 8004246:	4603      	mov	r3, r0
 8004248:	2b20      	cmp	r3, #32
 800424a:	d1f9      	bne.n	8004240 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <poll_i2c_sensor+0x90>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8004254:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004258:	4a05      	ldr	r2, [pc, #20]	; (8004270 <poll_i2c_sensor+0x90>)
 800425a:	7852      	ldrb	r2, [r2, #1]
 800425c:	4313      	orrs	r3, r2
 800425e:	10db      	asrs	r3, r3, #3
 8004260:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8004262:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	24001b50 	.word	0x24001b50
 8004274:	2400193c 	.word	0x2400193c
 8004278:	0801afa0 	.word	0x0801afa0
 800427c:	0801afb0 	.word	0x0801afb0

08004280 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004284:	4b28      	ldr	r3, [pc, #160]	; (8004328 <MX_SPI1_Init+0xa8>)
 8004286:	4a29      	ldr	r2, [pc, #164]	; (800432c <MX_SPI1_Init+0xac>)
 8004288:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800428a:	4b27      	ldr	r3, [pc, #156]	; (8004328 <MX_SPI1_Init+0xa8>)
 800428c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004290:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004292:	4b25      	ldr	r3, [pc, #148]	; (8004328 <MX_SPI1_Init+0xa8>)
 8004294:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004298:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800429a:	4b23      	ldr	r3, [pc, #140]	; (8004328 <MX_SPI1_Init+0xa8>)
 800429c:	220f      	movs	r2, #15
 800429e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a0:	4b21      	ldr	r3, [pc, #132]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042ac:	4b1e      	ldr	r3, [pc, #120]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80042b4:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042b6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80042ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042be:	2200      	movs	r2, #0
 80042c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c8:	4b17      	ldr	r3, [pc, #92]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80042ce:	4b16      	ldr	r3, [pc, #88]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042da:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042de:	2200      	movs	r2, #0
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042ee:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <MX_SPI1_Init+0xa8>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <MX_SPI1_Init+0xa8>)
 8004302:	2200      	movs	r2, #0
 8004304:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <MX_SPI1_Init+0xa8>)
 8004308:	2200      	movs	r2, #0
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <MX_SPI1_Init+0xa8>)
 800430e:	2200      	movs	r2, #0
 8004310:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004312:	4805      	ldr	r0, [pc, #20]	; (8004328 <MX_SPI1_Init+0xa8>)
 8004314:	f00d fdf8 	bl	8011f08 <HAL_SPI_Init>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800431e:	f7ff fb77 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	24001b54 	.word	0x24001b54
 800432c:	40013000 	.word	0x40013000

08004330 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004336:	4a29      	ldr	r2, [pc, #164]	; (80043dc <MX_SPI2_Init+0xac>)
 8004338:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800433c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004340:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004342:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004344:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004348:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800434a:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800434c:	220f      	movs	r2, #15
 800434e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004350:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800435e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004362:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004364:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004366:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800436a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800436e:	2200      	movs	r2, #0
 8004370:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004374:	2200      	movs	r2, #0
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800437a:	2200      	movs	r2, #0
 800437c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004380:	2200      	movs	r2, #0
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800438a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800438e:	2200      	movs	r2, #0
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <MX_SPI2_Init+0xa8>)
 8004394:	2200      	movs	r2, #0
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <MX_SPI2_Init+0xa8>)
 800439a:	2200      	movs	r2, #0
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043be:	2200      	movs	r2, #0
 80043c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043c2:	4805      	ldr	r0, [pc, #20]	; (80043d8 <MX_SPI2_Init+0xa8>)
 80043c4:	f00d fda0 	bl	8011f08 <HAL_SPI_Init>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80043ce:	f7ff fb1f 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	24001bdc 	.word	0x24001bdc
 80043dc:	40003800 	.word	0x40003800

080043e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b0bc      	sub	sp, #240	; 0xf0
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	609a      	str	r2, [r3, #8]
 80043f4:	60da      	str	r2, [r3, #12]
 80043f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043f8:	f107 0318 	add.w	r3, r7, #24
 80043fc:	22c0      	movs	r2, #192	; 0xc0
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f015 ffa3 	bl	801a34c <memset>
  if(spiHandle->Instance==SPI1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a83      	ldr	r2, [pc, #524]	; (8004618 <HAL_SPI_MspInit+0x238>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d17c      	bne.n	800450a <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800441c:	2300      	movs	r3, #0
 800441e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004420:	f107 0318 	add.w	r3, r7, #24
 8004424:	4618      	mov	r0, r3
 8004426:	f00a fd4f 	bl	800eec8 <HAL_RCCEx_PeriphCLKConfig>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004430:	f7ff faee 	bl	8003a10 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004434:	4b79      	ldr	r3, [pc, #484]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800443a:	4a78      	ldr	r2, [pc, #480]	; (800461c <HAL_SPI_MspInit+0x23c>)
 800443c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004440:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004444:	4b75      	ldr	r3, [pc, #468]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800444a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004452:	4b72      	ldr	r3, [pc, #456]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004458:	4a70      	ldr	r2, [pc, #448]	; (800461c <HAL_SPI_MspInit+0x23c>)
 800445a:	f043 0302 	orr.w	r3, r3, #2
 800445e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004462:	4b6e      	ldr	r3, [pc, #440]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004470:	2318      	movs	r3, #24
 8004472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004476:	2302      	movs	r3, #2
 8004478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004482:	2300      	movs	r3, #0
 8004484:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004488:	2305      	movs	r3, #5
 800448a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004492:	4619      	mov	r1, r3
 8004494:	4862      	ldr	r0, [pc, #392]	; (8004620 <HAL_SPI_MspInit+0x240>)
 8004496:	f006 ff23 	bl	800b2e0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800449a:	4b62      	ldr	r3, [pc, #392]	; (8004624 <HAL_SPI_MspInit+0x244>)
 800449c:	4a62      	ldr	r2, [pc, #392]	; (8004628 <HAL_SPI_MspInit+0x248>)
 800449e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80044a0:	4b60      	ldr	r3, [pc, #384]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044a2:	2225      	movs	r2, #37	; 0x25
 80044a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044a6:	4b5f      	ldr	r3, [pc, #380]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ac:	4b5d      	ldr	r3, [pc, #372]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80044ba:	4b5a      	ldr	r3, [pc, #360]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044c0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80044c2:	4b58      	ldr	r3, [pc, #352]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80044ca:	4b56      	ldr	r3, [pc, #344]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044d0:	4b54      	ldr	r3, [pc, #336]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044d6:	4b53      	ldr	r3, [pc, #332]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044d8:	2200      	movs	r2, #0
 80044da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80044dc:	4851      	ldr	r0, [pc, #324]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044de:	f003 fdcf 	bl	8008080 <HAL_DMA_Init>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80044e8:	f7ff fa92 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a4d      	ldr	r2, [pc, #308]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c
 80044f2:	4a4c      	ldr	r2, [pc, #304]	; (8004624 <HAL_SPI_MspInit+0x244>)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80044f8:	2200      	movs	r2, #0
 80044fa:	2105      	movs	r1, #5
 80044fc:	2023      	movs	r0, #35	; 0x23
 80044fe:	f003 f991 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004502:	2023      	movs	r0, #35	; 0x23
 8004504:	f003 f9a8 	bl	8007858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004508:	e081      	b.n	800460e <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a47      	ldr	r2, [pc, #284]	; (800462c <HAL_SPI_MspInit+0x24c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d17c      	bne.n	800460e <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004514:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004520:	2300      	movs	r3, #0
 8004522:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004524:	f107 0318 	add.w	r3, r7, #24
 8004528:	4618      	mov	r0, r3
 800452a:	f00a fccd 	bl	800eec8 <HAL_RCCEx_PeriphCLKConfig>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8004534:	f7ff fa6c 	bl	8003a10 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004538:	4b38      	ldr	r3, [pc, #224]	; (800461c <HAL_SPI_MspInit+0x23c>)
 800453a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800453e:	4a37      	ldr	r2, [pc, #220]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004544:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004548:	4b34      	ldr	r3, [pc, #208]	; (800461c <HAL_SPI_MspInit+0x23c>)
 800454a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004556:	4b31      	ldr	r3, [pc, #196]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800455c:	4a2f      	ldr	r2, [pc, #188]	; (800461c <HAL_SPI_MspInit+0x23c>)
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004566:	4b2d      	ldr	r3, [pc, #180]	; (800461c <HAL_SPI_MspInit+0x23c>)
 8004568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004574:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004578:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457c:	2302      	movs	r3, #2
 800457e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004588:	2300      	movs	r3, #0
 800458a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800458e:	2305      	movs	r3, #5
 8004590:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004594:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004598:	4619      	mov	r1, r3
 800459a:	4821      	ldr	r0, [pc, #132]	; (8004620 <HAL_SPI_MspInit+0x240>)
 800459c:	f006 fea0 	bl	800b2e0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80045a0:	4b23      	ldr	r3, [pc, #140]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045a2:	4a24      	ldr	r2, [pc, #144]	; (8004634 <HAL_SPI_MspInit+0x254>)
 80045a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80045a6:	4b22      	ldr	r3, [pc, #136]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045a8:	2227      	movs	r2, #39	; 0x27
 80045aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045ac:	4b20      	ldr	r3, [pc, #128]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045b2:	4b1f      	ldr	r3, [pc, #124]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045be:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045c0:	4b1b      	ldr	r3, [pc, #108]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045c6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045ce:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80045d0:	4b17      	ldr	r3, [pc, #92]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045d6:	4b16      	ldr	r3, [pc, #88]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045d8:	2200      	movs	r2, #0
 80045da:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045dc:	4b14      	ldr	r3, [pc, #80]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045de:	2200      	movs	r2, #0
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80045e2:	4813      	ldr	r0, [pc, #76]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045e4:	f003 fd4c 	bl	8008080 <HAL_DMA_Init>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 80045ee:	f7ff fa0f 	bl	8003a10 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045f6:	67da      	str	r2, [r3, #124]	; 0x7c
 80045f8:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <HAL_SPI_MspInit+0x250>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80045fe:	2200      	movs	r2, #0
 8004600:	2105      	movs	r1, #5
 8004602:	2024      	movs	r0, #36	; 0x24
 8004604:	f003 f90e 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004608:	2024      	movs	r0, #36	; 0x24
 800460a:	f003 f925 	bl	8007858 <HAL_NVIC_EnableIRQ>
}
 800460e:	bf00      	nop
 8004610:	37f0      	adds	r7, #240	; 0xf0
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40013000 	.word	0x40013000
 800461c:	58024400 	.word	0x58024400
 8004620:	58020400 	.word	0x58020400
 8004624:	24001c64 	.word	0x24001c64
 8004628:	40020070 	.word	0x40020070
 800462c:	40003800 	.word	0x40003800
 8004630:	24001cdc 	.word	0x24001cdc
 8004634:	40020058 	.word	0x40020058

08004638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <HAL_MspInit+0x38>)
 8004640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004644:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <HAL_MspInit+0x38>)
 8004646:	f043 0302 	orr.w	r3, r3, #2
 800464a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <HAL_MspInit+0x38>)
 8004650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800465c:	2200      	movs	r2, #0
 800465e:	210f      	movs	r1, #15
 8004660:	f06f 0001 	mvn.w	r0, #1
 8004664:	f003 f8de 	bl	8007824 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	58024400 	.word	0x58024400

08004674 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b090      	sub	sp, #64	; 0x40
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b0f      	cmp	r3, #15
 8004680:	d827      	bhi.n	80046d2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004682:	2200      	movs	r2, #0
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	2036      	movs	r0, #54	; 0x36
 8004688:	f003 f8cc 	bl	8007824 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800468c:	2036      	movs	r0, #54	; 0x36
 800468e:	f003 f8e3 	bl	8007858 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004692:	4a29      	ldr	r2, [pc, #164]	; (8004738 <HAL_InitTick+0xc4>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <HAL_InitTick+0xc8>)
 800469a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800469e:	4a27      	ldr	r2, [pc, #156]	; (800473c <HAL_InitTick+0xc8>)
 80046a0:	f043 0310 	orr.w	r3, r3, #16
 80046a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046a8:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_InitTick+0xc8>)
 80046aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80046b6:	f107 0210 	add.w	r2, r7, #16
 80046ba:	f107 0314 	add.w	r3, r7, #20
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f00a fbbf 	bl	800ee44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d106      	bne.n	80046de <HAL_InitTick+0x6a>
 80046d0:	e001      	b.n	80046d6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e02b      	b.n	800472e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80046d6:	f00a fb89 	bl	800edec <HAL_RCC_GetPCLK1Freq>
 80046da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80046dc:	e004      	b.n	80046e8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80046de:	f00a fb85 	bl	800edec <HAL_RCC_GetPCLK1Freq>
 80046e2:	4603      	mov	r3, r0
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80046e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <HAL_InitTick+0xcc>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	0c9b      	lsrs	r3, r3, #18
 80046f2:	3b01      	subs	r3, #1
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80046f6:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_InitTick+0xd0>)
 80046f8:	4a13      	ldr	r2, [pc, #76]	; (8004748 <HAL_InitTick+0xd4>)
 80046fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80046fc:	4b11      	ldr	r3, [pc, #68]	; (8004744 <HAL_InitTick+0xd0>)
 80046fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004702:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004704:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <HAL_InitTick+0xd0>)
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800470a:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <HAL_InitTick+0xd0>)
 800470c:	2200      	movs	r2, #0
 800470e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004710:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <HAL_InitTick+0xd0>)
 8004712:	2200      	movs	r2, #0
 8004714:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004716:	480b      	ldr	r0, [pc, #44]	; (8004744 <HAL_InitTick+0xd0>)
 8004718:	f00e f995 	bl	8012a46 <HAL_TIM_Base_Init>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004722:	4808      	ldr	r0, [pc, #32]	; (8004744 <HAL_InitTick+0xd0>)
 8004724:	f00e f9e6 	bl	8012af4 <HAL_TIM_Base_Start_IT>
 8004728:	4603      	mov	r3, r0
 800472a:	e000      	b.n	800472e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
}
 800472e:	4618      	mov	r0, r3
 8004730:	3740      	adds	r7, #64	; 0x40
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	240000c8 	.word	0x240000c8
 800473c:	58024400 	.word	0x58024400
 8004740:	431bde83 	.word	0x431bde83
 8004744:	24001d54 	.word	0x24001d54
 8004748:	40001000 	.word	0x40001000

0800474c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004750:	e7fe      	b.n	8004750 <NMI_Handler+0x4>

08004752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004756:	e7fe      	b.n	8004756 <HardFault_Handler+0x4>

08004758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800475c:	e7fe      	b.n	800475c <MemManage_Handler+0x4>

0800475e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004762:	e7fe      	b.n	8004762 <BusFault_Handler+0x4>

08004764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004768:	e7fe      	b.n	8004768 <UsageFault_Handler+0x4>

0800476a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <DMA1_Stream0_IRQHandler+0x10>)
 800477e:	f004 ffa9 	bl	80096d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	24000224 	.word	0x24000224

0800478c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <DMA1_Stream1_IRQHandler+0x10>)
 8004792:	f004 ff9f 	bl	80096d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2400029c 	.word	0x2400029c

080047a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <DMA1_Stream2_IRQHandler+0x10>)
 80047a6:	f004 ff95 	bl	80096d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	24001ed0 	.word	0x24001ed0

080047b4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80047b8:	4802      	ldr	r0, [pc, #8]	; (80047c4 <DMA1_Stream3_IRQHandler+0x10>)
 80047ba:	f004 ff8b 	bl	80096d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	24001cdc 	.word	0x24001cdc

080047c8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80047cc:	4802      	ldr	r0, [pc, #8]	; (80047d8 <DMA1_Stream4_IRQHandler+0x10>)
 80047ce:	f004 ff81 	bl	80096d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	24001c64 	.word	0x24001c64

080047dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80047e0:	4802      	ldr	r0, [pc, #8]	; (80047ec <DMA1_Stream5_IRQHandler+0x10>)
 80047e2:	f004 ff77 	bl	80096d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	24000328 	.word	0x24000328

080047f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80047f4:	4802      	ldr	r0, [pc, #8]	; (8004800 <DMA1_Stream6_IRQHandler+0x10>)
 80047f6:	f004 ff6d 	bl	80096d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	24001990 	.word	0x24001990

08004804 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004808:	4802      	ldr	r0, [pc, #8]	; (8004814 <TIM1_BRK_IRQHandler+0x10>)
 800480a:	f00e fc8a 	bl	8013122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	24001da4 	.word	0x24001da4

08004818 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800481c:	4802      	ldr	r0, [pc, #8]	; (8004828 <TIM1_UP_IRQHandler+0x10>)
 800481e:	f00e fc80 	bl	8013122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	24001da4 	.word	0x24001da4

0800482c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <TIM1_TRG_COM_IRQHandler+0x10>)
 8004832:	f00e fc76 	bl	8013122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	24001da4 	.word	0x24001da4

08004840 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <TIM1_CC_IRQHandler+0x10>)
 8004846:	f00e fc6c 	bl	8013122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	24001da4 	.word	0x24001da4

08004854 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004858:	4802      	ldr	r0, [pc, #8]	; (8004864 <TIM2_IRQHandler+0x10>)
 800485a:	f00e fc62 	bl	8013122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	24001df0 	.word	0x24001df0

08004868 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800486c:	4802      	ldr	r0, [pc, #8]	; (8004878 <I2C1_EV_IRQHandler+0x10>)
 800486e:	f007 f9b9 	bl	800bbe4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	2400193c 	.word	0x2400193c

0800487c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004880:	4802      	ldr	r0, [pc, #8]	; (800488c <I2C1_ER_IRQHandler+0x10>)
 8004882:	f007 f9c9 	bl	800bc18 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	2400193c 	.word	0x2400193c

08004890 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004894:	4802      	ldr	r0, [pc, #8]	; (80048a0 <SPI1_IRQHandler+0x10>)
 8004896:	f00d fda3 	bl	80123e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	24001b54 	.word	0x24001b54

080048a4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80048a8:	4802      	ldr	r0, [pc, #8]	; (80048b4 <SPI2_IRQHandler+0x10>)
 80048aa:	f00d fd99 	bl	80123e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	24001bdc 	.word	0x24001bdc

080048b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048bc:	4802      	ldr	r0, [pc, #8]	; (80048c8 <USART1_IRQHandler+0x10>)
 80048be:	f00f ff73 	bl	80147a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	24001e3c 	.word	0x24001e3c

080048cc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80048d0:	4802      	ldr	r0, [pc, #8]	; (80048dc <DMA1_Stream7_IRQHandler+0x10>)
 80048d2:	f004 feff 	bl	80096d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	24001a08 	.word	0x24001a08

080048e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <TIM6_DAC_IRQHandler+0x20>)
 80048e6:	791b      	ldrb	r3, [r3, #4]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80048ee:	4804      	ldr	r0, [pc, #16]	; (8004900 <TIM6_DAC_IRQHandler+0x20>)
 80048f0:	f003 f947 	bl	8007b82 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80048f4:	4803      	ldr	r0, [pc, #12]	; (8004904 <TIM6_DAC_IRQHandler+0x24>)
 80048f6:	f00e fc14 	bl	8013122 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048fa:	bf00      	nop
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	24000314 	.word	0x24000314
 8004904:	24001d54 	.word	0x24001d54

08004908 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8004912:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <ITM_SendChar+0x48>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a0e      	ldr	r2, [pc, #56]	; (8004950 <ITM_SendChar+0x48>)
 8004918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800491c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <ITM_SendChar+0x4c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a0c      	ldr	r2, [pc, #48]	; (8004954 <ITM_SendChar+0x4c>)
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800492a:	bf00      	nop
 800492c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f8      	beq.n	800492c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800493a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	6013      	str	r3, [r2, #0]
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000edfc 	.word	0xe000edfc
 8004954:	e0000e00 	.word	0xe0000e00

08004958 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e00a      	b.n	8004980 <_read+0x28>
		*ptr++ = __io_getchar();
 800496a:	f3af 8000 	nop.w
 800496e:	4601      	mov	r1, r0
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	60ba      	str	r2, [r7, #8]
 8004976:	b2ca      	uxtb	r2, r1
 8004978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3301      	adds	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	dbf0      	blt.n	800496a <_read+0x12>
	}

	return len;
 8004988:	687b      	ldr	r3, [r7, #4]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004992:	b580      	push	{r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e009      	b.n	80049b8 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	60ba      	str	r2, [r7, #8]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff ffab 	bl	8004908 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	3301      	adds	r3, #1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	dbf1      	blt.n	80049a4 <_write+0x12>
	}
	return len;
 80049c0:	687b      	ldr	r3, [r7, #4]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <_close>:

int _close(int file) {
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049f2:	605a      	str	r2, [r3, #4]
	return 0;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <_isatty>:

int _isatty(int file) {
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004a0a:	2301      	movs	r3, #1
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004a3c:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <_sbrk+0x64>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <_sbrk+0x64>)
 8004a52:	4a12      	ldr	r2, [pc, #72]	; (8004a9c <_sbrk+0x68>)
 8004a54:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004a56:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <_sbrk+0x64>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d207      	bcs.n	8004a74 <_sbrk+0x40>
		errno = ENOMEM;
 8004a64:	f015 fc3a 	bl	801a2dc <__errno>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	220c      	movs	r2, #12
 8004a6c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a72:	e009      	b.n	8004a88 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004a74:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <_sbrk+0x64>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004a7a:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <_sbrk+0x64>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	4a05      	ldr	r2, [pc, #20]	; (8004a98 <_sbrk+0x64>)
 8004a84:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004a86:	68fb      	ldr	r3, [r7, #12]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	24080000 	.word	0x24080000
 8004a94:	00000400 	.word	0x00000400
 8004a98:	24001da0 	.word	0x24001da0
 8004a9c:	24006980 	.word	0x24006980

08004aa0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004aa4:	4b37      	ldr	r3, [pc, #220]	; (8004b84 <SystemInit+0xe4>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	4a36      	ldr	r2, [pc, #216]	; (8004b84 <SystemInit+0xe4>)
 8004aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004ab4:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <SystemInit+0xe8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d807      	bhi.n	8004ad0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004ac0:	4b31      	ldr	r3, [pc, #196]	; (8004b88 <SystemInit+0xe8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f023 030f 	bic.w	r3, r3, #15
 8004ac8:	4a2f      	ldr	r2, [pc, #188]	; (8004b88 <SystemInit+0xe8>)
 8004aca:	f043 0307 	orr.w	r3, r3, #7
 8004ace:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004ad0:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <SystemInit+0xec>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2d      	ldr	r2, [pc, #180]	; (8004b8c <SystemInit+0xec>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004adc:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <SystemInit+0xec>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004ae2:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <SystemInit+0xec>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4929      	ldr	r1, [pc, #164]	; (8004b8c <SystemInit+0xec>)
 8004ae8:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <SystemInit+0xf0>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004aee:	4b26      	ldr	r3, [pc, #152]	; (8004b88 <SystemInit+0xe8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <SystemInit+0xe8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 030f 	bic.w	r3, r3, #15
 8004b02:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <SystemInit+0xe8>)
 8004b04:	f043 0307 	orr.w	r3, r3, #7
 8004b08:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <SystemInit+0xec>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <SystemInit+0xec>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <SystemInit+0xec>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <SystemInit+0xec>)
 8004b1e:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <SystemInit+0xf4>)
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004b22:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <SystemInit+0xec>)
 8004b24:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <SystemInit+0xf8>)
 8004b26:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004b28:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <SystemInit+0xec>)
 8004b2a:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <SystemInit+0xfc>)
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004b2e:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <SystemInit+0xec>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004b34:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <SystemInit+0xec>)
 8004b36:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <SystemInit+0xfc>)
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <SystemInit+0xec>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004b40:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <SystemInit+0xec>)
 8004b42:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <SystemInit+0xfc>)
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004b46:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <SystemInit+0xec>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <SystemInit+0xec>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <SystemInit+0xec>)
 8004b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b56:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <SystemInit+0xec>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <SystemInit+0x100>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <SystemInit+0x104>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6a:	d202      	bcs.n	8004b72 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <SystemInit+0x108>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <SystemInit+0x10c>)
 8004b74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004b78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004b7a:	bf00      	nop
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000ed00 	.word	0xe000ed00
 8004b88:	52002000 	.word	0x52002000
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	eaf6ed7f 	.word	0xeaf6ed7f
 8004b94:	02020200 	.word	0x02020200
 8004b98:	01ff0000 	.word	0x01ff0000
 8004b9c:	01010280 	.word	0x01010280
 8004ba0:	5c001000 	.word	0x5c001000
 8004ba4:	ffff0000 	.word	0xffff0000
 8004ba8:	51008108 	.word	0x51008108
 8004bac:	52004000 	.word	0x52004000

08004bb0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b09a      	sub	sp, #104	; 0x68
 8004bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	605a      	str	r2, [r3, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
 8004bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	611a      	str	r2, [r3, #16]
 8004be0:	615a      	str	r2, [r3, #20]
 8004be2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	222c      	movs	r2, #44	; 0x2c
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f015 fbae 	bl	801a34c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bf0:	4b44      	ldr	r3, [pc, #272]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004bf2:	4a45      	ldr	r2, [pc, #276]	; (8004d08 <MX_TIM1_Init+0x158>)
 8004bf4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004bf6:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004bf8:	224a      	movs	r2, #74	; 0x4a
 8004bfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bfc:	4b41      	ldr	r3, [pc, #260]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004c02:	4b40      	ldr	r3, [pc, #256]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c04:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004c08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c0a:	4b3e      	ldr	r3, [pc, #248]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c10:	4b3c      	ldr	r3, [pc, #240]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c16:	4b3b      	ldr	r3, [pc, #236]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004c1c:	4839      	ldr	r0, [pc, #228]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c1e:	f00d ff12 	bl	8012a46 <HAL_TIM_Base_Init>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004c28:	f7fe fef2 	bl	8003a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c30:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004c32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c36:	4619      	mov	r1, r3
 8004c38:	4832      	ldr	r0, [pc, #200]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c3a:	f00e fc8d 	bl	8013558 <HAL_TIM_ConfigClockSource>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004c44:	f7fe fee4 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c48:	482e      	ldr	r0, [pc, #184]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c4a:	f00e fa09 	bl	8013060 <HAL_TIM_PWM_Init>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004c54:	f7fe fedc 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4826      	ldr	r0, [pc, #152]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004c6c:	f00f f9ca 	bl	8014004 <HAL_TIMEx_MasterConfigSynchronization>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004c76:	f7fe fecb 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c7a:	2360      	movs	r3, #96	; 0x60
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004c7e:	f240 13df 	movw	r3, #479	; 0x1df
 8004c82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c84:	2300      	movs	r3, #0
 8004c86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c90:	2300      	movs	r3, #0
 8004c92:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c94:	2300      	movs	r3, #0
 8004c96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4818      	ldr	r0, [pc, #96]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004ca2:	f00e fb45 	bl	8013330 <HAL_TIM_PWM_ConfigChannel>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004cac:	f7fe feb0 	bl	8003a10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cc8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ce0:	1d3b      	adds	r3, r7, #4
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4807      	ldr	r0, [pc, #28]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004ce6:	f00f fa1b 	bl	8014120 <HAL_TIMEx_ConfigBreakDeadTime>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004cf0:	f7fe fe8e 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004cf4:	4803      	ldr	r0, [pc, #12]	; (8004d04 <MX_TIM1_Init+0x154>)
 8004cf6:	f000 f8dd 	bl	8004eb4 <HAL_TIM_MspPostInit>

}
 8004cfa:	bf00      	nop
 8004cfc:	3768      	adds	r7, #104	; 0x68
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	24001da4 	.word	0x24001da4
 8004d08:	40010000 	.word	0x40010000

08004d0c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08e      	sub	sp, #56	; 0x38
 8004d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
 8004d1c:	609a      	str	r2, [r3, #8]
 8004d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d20:	f107 031c 	add.w	r3, r7, #28
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	605a      	str	r2, [r3, #4]
 8004d34:	609a      	str	r2, [r3, #8]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	611a      	str	r2, [r3, #16]
 8004d3a:	615a      	str	r2, [r3, #20]
 8004d3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d3e:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004d46:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d48:	224a      	movs	r2, #74	; 0x4a
 8004d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d4c:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004d52:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d54:	f640 4234 	movw	r2, #3124	; 0xc34
 8004d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d5a:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d60:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d62:	2280      	movs	r2, #128	; 0x80
 8004d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d66:	4823      	ldr	r0, [pc, #140]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d68:	f00d fe6d 	bl	8012a46 <HAL_TIM_Base_Init>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004d72:	f7fe fe4d 	bl	8003a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d80:	4619      	mov	r1, r3
 8004d82:	481c      	ldr	r0, [pc, #112]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d84:	f00e fbe8 	bl	8013558 <HAL_TIM_ConfigClockSource>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004d8e:	f7fe fe3f 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004d92:	4818      	ldr	r0, [pc, #96]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004d94:	f00e f964 	bl	8013060 <HAL_TIM_PWM_Init>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004d9e:	f7fe fe37 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004da2:	2320      	movs	r3, #32
 8004da4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004daa:	f107 031c 	add.w	r3, r7, #28
 8004dae:	4619      	mov	r1, r3
 8004db0:	4810      	ldr	r0, [pc, #64]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004db2:	f00f f927 	bl	8014004 <HAL_TIMEx_MasterConfigSynchronization>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004dbc:	f7fe fe28 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dc0:	2360      	movs	r3, #96	; 0x60
 8004dc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	220c      	movs	r2, #12
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4807      	ldr	r0, [pc, #28]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004dd8:	f00e faaa 	bl	8013330 <HAL_TIM_PWM_ConfigChannel>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004de2:	f7fe fe15 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004de6:	4803      	ldr	r0, [pc, #12]	; (8004df4 <MX_TIM2_Init+0xe8>)
 8004de8:	f000 f864 	bl	8004eb4 <HAL_TIM_MspPostInit>

}
 8004dec:	bf00      	nop
 8004dee:	3738      	adds	r7, #56	; 0x38
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	24001df0 	.word	0x24001df0

08004df8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a29      	ldr	r2, [pc, #164]	; (8004eac <HAL_TIM_Base_MspInit+0xb4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d12f      	bne.n	8004e6a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e0a:	4b29      	ldr	r3, [pc, #164]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e10:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e1a:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2105      	movs	r1, #5
 8004e2c:	2018      	movs	r0, #24
 8004e2e:	f002 fcf9 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004e32:	2018      	movs	r0, #24
 8004e34:	f002 fd10 	bl	8007858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2105      	movs	r1, #5
 8004e3c:	2019      	movs	r0, #25
 8004e3e:	f002 fcf1 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004e42:	2019      	movs	r0, #25
 8004e44:	f002 fd08 	bl	8007858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2105      	movs	r1, #5
 8004e4c:	201a      	movs	r0, #26
 8004e4e:	f002 fce9 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004e52:	201a      	movs	r0, #26
 8004e54:	f002 fd00 	bl	8007858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2105      	movs	r1, #5
 8004e5c:	201b      	movs	r0, #27
 8004e5e:	f002 fce1 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004e62:	201b      	movs	r0, #27
 8004e64:	f002 fcf8 	bl	8007858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004e68:	e01b      	b.n	8004ea2 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e72:	d116      	bne.n	8004ea2 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e7a:	4a0d      	ldr	r2, [pc, #52]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <HAL_TIM_Base_MspInit+0xb8>)
 8004e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004e92:	2200      	movs	r2, #0
 8004e94:	2105      	movs	r1, #5
 8004e96:	201c      	movs	r0, #28
 8004e98:	f002 fcc4 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e9c:	201c      	movs	r0, #28
 8004e9e:	f002 fcdb 	bl	8007858 <HAL_NVIC_EnableIRQ>
}
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	58024400 	.word	0x58024400

08004eb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ebc:	f107 0314 	add.w	r3, r7, #20
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	60da      	str	r2, [r3, #12]
 8004eca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a26      	ldr	r2, [pc, #152]	; (8004f6c <HAL_TIM_MspPostInit+0xb8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d120      	bne.n	8004f18 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ed6:	4b26      	ldr	r3, [pc, #152]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004edc:	4a24      	ldr	r2, [pc, #144]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ee6:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efa:	2302      	movs	r3, #2
 8004efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f02:	2300      	movs	r3, #0
 8004f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f06:	2301      	movs	r3, #1
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f0a:	f107 0314 	add.w	r3, r7, #20
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4818      	ldr	r0, [pc, #96]	; (8004f74 <HAL_TIM_MspPostInit+0xc0>)
 8004f12:	f006 f9e5 	bl	800b2e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004f16:	e024      	b.n	8004f62 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f20:	d11f      	bne.n	8004f62 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f28:	4a11      	ldr	r2, [pc, #68]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004f2a:	f043 0302 	orr.w	r3, r3, #2
 8004f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f32:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <HAL_TIM_MspPostInit+0xbc>)
 8004f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f46:	2302      	movs	r3, #2
 8004f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f52:	2301      	movs	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f56:	f107 0314 	add.w	r3, r7, #20
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4806      	ldr	r0, [pc, #24]	; (8004f78 <HAL_TIM_MspPostInit+0xc4>)
 8004f5e:	f006 f9bf 	bl	800b2e0 <HAL_GPIO_Init>
}
 8004f62:	bf00      	nop
 8004f64:	3728      	adds	r7, #40	; 0x28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	58024400 	.word	0x58024400
 8004f74:	58020000 	.word	0x58020000
 8004f78:	58020400 	.word	0x58020400

08004f7c <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004f88:	4b21      	ldr	r3, [pc, #132]	; (8005010 <get_uptime+0x94>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <get_uptime+0x98>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004f94:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <get_uptime+0x94>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d005      	beq.n	8004faa <get_uptime+0x2e>
		ms = uptime_millis;
 8004f9e:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <get_uptime+0x94>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <get_uptime+0x98>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fb0:	fb03 f202 	mul.w	r2, r3, r2
 8004fb4:	4b17      	ldr	r3, [pc, #92]	; (8005014 <get_uptime+0x98>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	4917      	ldr	r1, [pc, #92]	; (8005018 <get_uptime+0x9c>)
 8004fbc:	fba1 1303 	umull	r1, r3, r1, r3
 8004fc0:	099b      	lsrs	r3, r3, #6
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <get_uptime+0x5a>
		uptime = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	0e1b      	lsrs	r3, r3, #24
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	0c1a      	lsrs	r2, r3, #16
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	0a1a      	lsrs	r2, r3, #8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3303      	adds	r3, #3
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	24001ae0 	.word	0x24001ae0
 8005014:	e000e010 	.word	0xe000e010
 8005018:	10624dd3 	.word	0x10624dd3

0800501c <get_unix_time>:

void get_unix_time(uint8_t* buffer) {
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005020:	b0a5      	sub	sp, #148	; 0x94
 8005022:	af00      	add	r7, sp, #0
 8005024:	65f8      	str	r0, [r7, #92]	; 0x5c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8005026:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800502a:	2200      	movs	r2, #0
 800502c:	4619      	mov	r1, r3
 800502e:	48bf      	ldr	r0, [pc, #764]	; (800532c <get_unix_time+0x310>)
 8005030:	f00c fd68 	bl	8011b04 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8005034:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005038:	2200      	movs	r2, #0
 800503a:	4619      	mov	r1, r3
 800503c:	48bb      	ldr	r0, [pc, #748]	; (800532c <get_unix_time+0x310>)
 800503e:	f00c fe45 	bl	8011ccc <HAL_RTC_GetDate>
	uint32_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 8005042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005044:	f242 7210 	movw	r2, #10000	; 0x2710
 8005048:	1ad2      	subs	r2, r2, r3
 800504a:	4bb9      	ldr	r3, [pc, #740]	; (8005330 <get_unix_time+0x314>)
 800504c:	fba3 2302 	umull	r2, r3, r3, r2
 8005050:	08db      	lsrs	r3, r3, #3
 8005052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80


	y = current_date.Year + 2000;
 8005062:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005066:	b29b      	uxth	r3, r3
 8005068:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800506c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	m = current_date.Month;
 8005070:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005074:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	d = current_date.Date;
 8005078:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800507c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 8005080:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8005084:	2b02      	cmp	r3, #2
 8005086:	d809      	bhi.n	800509c <get_unix_time+0x80>
	{
		m += 12;
 8005088:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800508c:	330c      	adds	r3, #12
 800508e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		y -= 1;
 8005092:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005096:	3b01      	subs	r3, #1
 8005098:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 800509c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80050a0:	f240 136d 	movw	r3, #365	; 0x16d
 80050a4:	fb03 f202 	mul.w	r2, r3, r2
 80050a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80050ac:	089b      	lsrs	r3, r3, #2
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	18d1      	adds	r1, r2, r3
 80050b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80050b6:	4b9f      	ldr	r3, [pc, #636]	; (8005334 <get_unix_time+0x318>)
 80050b8:	fba3 2302 	umull	r2, r3, r3, r2
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	b29b      	uxth	r3, r3
 80050c0:	1ac9      	subs	r1, r1, r3
 80050c2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80050c6:	4b9b      	ldr	r3, [pc, #620]	; (8005334 <get_unix_time+0x318>)
 80050c8:	fba3 2302 	umull	r2, r3, r3, r2
 80050cc:	09db      	lsrs	r3, r3, #7
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	440b      	add	r3, r1
 80050d2:	17da      	asrs	r2, r3, #31
 80050d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050dc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 80050e0:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80050e4:	4613      	mov	r3, r2
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4618      	mov	r0, r3
 80050ee:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	4613      	mov	r3, r2
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	1899      	adds	r1, r3, r2
 80050fa:	4b8f      	ldr	r3, [pc, #572]	; (8005338 <get_unix_time+0x31c>)
 80050fc:	fb83 2301 	smull	r2, r3, r3, r1
 8005100:	105a      	asrs	r2, r3, #1
 8005102:	17cb      	asrs	r3, r1, #31
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	18c2      	adds	r2, r0, r3
 8005108:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800510c:	4413      	add	r3, r2
 800510e:	17da      	asrs	r2, r3, #31
 8005110:	653b      	str	r3, [r7, #80]	; 0x50
 8005112:	657a      	str	r2, [r7, #84]	; 0x54
 8005114:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005118:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800511a:	1851      	adds	r1, r2, r1
 800511c:	6339      	str	r1, [r7, #48]	; 0x30
 800511e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005120:	eb43 0101 	adc.w	r1, r3, r1
 8005124:	6379      	str	r1, [r7, #52]	; 0x34
 8005126:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800512a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 800512e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005132:	4982      	ldr	r1, [pc, #520]	; (800533c <get_unix_time+0x320>)
 8005134:	1851      	adds	r1, r2, r1
 8005136:	62b9      	str	r1, [r7, #40]	; 0x28
 8005138:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005142:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 8005146:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	1896      	adds	r6, r2, r2
 8005150:	623e      	str	r6, [r7, #32]
 8005152:	415b      	adcs	r3, r3
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
 8005156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800515a:	1814      	adds	r4, r2, r0
 800515c:	eb43 0501 	adc.w	r5, r3, r1
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	012b      	lsls	r3, r5, #4
 800516a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800516e:	0122      	lsls	r2, r4, #4
 8005170:	ebb2 0804 	subs.w	r8, r2, r4
 8005174:	eb63 0905 	sbc.w	r9, r3, r5
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8005184:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8005188:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800518c:	ebb2 0108 	subs.w	r1, r2, r8
 8005190:	61b9      	str	r1, [r7, #24]
 8005192:	eb63 0309 	sbc.w	r3, r3, r9
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80051a4:	4629      	mov	r1, r5
 80051a6:	01cb      	lsls	r3, r1, #7
 80051a8:	4621      	mov	r1, r4
 80051aa:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 80051ae:	4621      	mov	r1, r4
 80051b0:	01ca      	lsls	r2, r1, #7
 80051b2:	461c      	mov	r4, r3
 80051b4:	4613      	mov	r3, r2
 80051b6:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 80051ba:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80051be:	461a      	mov	r2, r3
 80051c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80051c4:	fb03 f102 	mul.w	r1, r3, r2
 80051c8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80051cc:	461a      	mov	r2, r3
 80051ce:	4613      	mov	r3, r2
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	18ca      	adds	r2, r1, r3
 80051d8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80051dc:	4413      	add	r3, r2
 80051de:	2200      	movs	r2, #0
 80051e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051e4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80051e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80051ec:	4621      	mov	r1, r4
 80051ee:	1851      	adds	r1, r2, r1
 80051f0:	6139      	str	r1, [r7, #16]
 80051f2:	4629      	mov	r1, r5
 80051f4:	eb43 0101 	adc.w	r1, r3, r1
 80051f8:	6179      	str	r1, [r7, #20]
 80051fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80051fe:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	// Convert to milliseconds
	unix_tm_val *= 1000;
 8005202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	f04f 0400 	mov.w	r4, #0
 800520e:	f04f 0500 	mov.w	r5, #0
 8005212:	015d      	lsls	r5, r3, #5
 8005214:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8005218:	0154      	lsls	r4, r2, #5
 800521a:	4622      	mov	r2, r4
 800521c:	462b      	mov	r3, r5
 800521e:	ebb2 0a00 	subs.w	sl, r2, r0
 8005222:	eb63 0b01 	sbc.w	fp, r3, r1
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8005232:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8005236:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800523a:	4692      	mov	sl, r2
 800523c:	469b      	mov	fp, r3
 800523e:	eb1a 0300 	adds.w	r3, sl, r0
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	eb4b 0301 	adc.w	r3, fp, r1
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005256:	4629      	mov	r1, r5
 8005258:	00cb      	lsls	r3, r1, #3
 800525a:	4621      	mov	r1, r4
 800525c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005260:	4621      	mov	r1, r4
 8005262:	00ca      	lsls	r2, r1, #3
 8005264:	461c      	mov	r4, r3
 8005266:	4613      	mov	r3, r2
 8005268:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	// Add milliseconds
	unix_tm_val += milliseconds;
 800526c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005270:	2200      	movs	r2, #0
 8005272:	643b      	str	r3, [r7, #64]	; 0x40
 8005274:	647a      	str	r2, [r7, #68]	; 0x44
 8005276:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800527a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800527e:	4621      	mov	r1, r4
 8005280:	1851      	adds	r1, r2, r1
 8005282:	6039      	str	r1, [r7, #0]
 8005284:	4629      	mov	r1, r5
 8005286:	eb43 0101 	adc.w	r1, r3, r1
 800528a:	6079      	str	r1, [r7, #4]
 800528c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005290:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

	buffer[0] = ((unix_tm_val >> 40) & 0xFF);
 8005294:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	0a0a      	lsrs	r2, r1, #8
 80052a2:	2300      	movs	r3, #0
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a8:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 32) & 0xFF);
 80052aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	000a      	movs	r2, r1
 80052b8:	2300      	movs	r3, #0
 80052ba:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80052bc:	3101      	adds	r1, #1
 80052be:	b2d3      	uxtb	r3, r2
 80052c0:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 24) & 0xFF);
 80052c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	0e02      	lsrs	r2, r0, #24
 80052d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80052d4:	0e0b      	lsrs	r3, r1, #24
 80052d6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80052d8:	3102      	adds	r1, #2
 80052da:	b2d3      	uxtb	r3, r2
 80052dc:	700b      	strb	r3, [r1, #0]
	buffer[3] = ((unix_tm_val >> 16) & 0xFF);
 80052de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	0c02      	lsrs	r2, r0, #16
 80052ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80052f0:	0c0b      	lsrs	r3, r1, #16
 80052f2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80052f4:	3103      	adds	r1, #3
 80052f6:	b2d3      	uxtb	r3, r2
 80052f8:	700b      	strb	r3, [r1, #0]
	buffer[4] = ((unix_tm_val >> 8) & 0xFF);
 80052fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	0a02      	lsrs	r2, r0, #8
 8005308:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800530c:	0a0b      	lsrs	r3, r1, #8
 800530e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005310:	3104      	adds	r1, #4
 8005312:	b2d3      	uxtb	r3, r2
 8005314:	700b      	strb	r3, [r1, #0]
	buffer[5] = unix_tm_val & 0xFF;
 8005316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005318:	3305      	adds	r3, #5
 800531a:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 800531e:	701a      	strb	r2, [r3, #0]
}
 8005320:	bf00      	nop
 8005322:	3794      	adds	r7, #148	; 0x94
 8005324:	46bd      	mov	sp, r7
 8005326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532a:	bf00      	nop
 800532c:	24001af4 	.word	0x24001af4
 8005330:	cccccccd 	.word	0xcccccccd
 8005334:	51eb851f 	.word	0x51eb851f
 8005338:	66666667 	.word	0x66666667
 800533c:	fff50537 	.word	0xfff50537

08005340 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b08c      	sub	sp, #48	; 0x30
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	789b      	ldrb	r3, [r3, #2]
 8005354:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	78db      	ldrb	r3, [r3, #3]
 800535c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	791b      	ldrb	r3, [r3, #4]
 8005364:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	795b      	ldrb	r3, [r3, #5]
 800536c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	799b      	ldrb	r3, [r3, #6]
 8005374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3307      	adds	r3, #7
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	b21a      	sxth	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3308      	adds	r3, #8
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	b21b      	sxth	r3, r3
 800538a:	4313      	orrs	r3, r2
 800538c:	b21b      	sxth	r3, r3
 800538e:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005398:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800539c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80053a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80053a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80053ac:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 80053ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053b2:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80053b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80053b8:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80053ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80053bc:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80053be:	f107 0320 	add.w	r3, r7, #32
 80053c2:	2200      	movs	r2, #0
 80053c4:	4619      	mov	r1, r3
 80053c6:	480b      	ldr	r0, [pc, #44]	; (80053f4 <calibrateRTC+0xb4>)
 80053c8:	f00c fbf8 	bl	8011bbc <HAL_RTC_SetDate>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80053d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <calibrateRTC+0x9e>
		Error_Handler();
 80053da:	f7fe fb19 	bl	8003a10 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80053de:	f107 030c 	add.w	r3, r7, #12
 80053e2:	2200      	movs	r2, #0
 80053e4:	4619      	mov	r1, r3
 80053e6:	4803      	ldr	r0, [pc, #12]	; (80053f4 <calibrateRTC+0xb4>)
 80053e8:	f000 f806 	bl	80053f8 <RTC_SetTime>
}
 80053ec:	bf00      	nop
 80053ee:	3730      	adds	r7, #48	; 0x30
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	24001af4 	.word	0x24001af4

080053f8 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d101      	bne.n	8005412 <RTC_SetTime+0x1a>
 800540e:	2302      	movs	r3, #2
 8005410:	e051      	b.n	80054b6 <RTC_SetTime+0xbe>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	22ca      	movs	r2, #202	; 0xca
 8005428:	625a      	str	r2, [r3, #36]	; 0x24
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2253      	movs	r2, #83	; 0x53
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f00c fcbc 	bl	8011db0 <RTC_EnterInitMode>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 800543c:	7dfb      	ldrb	r3, [r7, #23]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d129      	bne.n	8005496 <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2200      	movs	r2, #0
 8005446:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f00c fd21 	bl	8011e94 <RTC_ByteToBcd2>
 8005452:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005454:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	4618      	mov	r0, r3
 800545c:	f00c fd1a 	bl	8011e94 <RTC_ByteToBcd2>
 8005460:	4603      	mov	r3, r0
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	789b      	ldrb	r3, [r3, #2]
 800546a:	4618      	mov	r0, r3
 800546c:	f00c fd12 	bl	8011e94 <RTC_ByteToBcd2>
 8005470:	4603      	mov	r3, r0
 8005472:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	78db      	ldrb	r3, [r3, #3]
 800547a:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	6939      	ldr	r1, [r7, #16]
 8005486:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <RTC_SetTime+0xc8>)
 8005488:	400b      	ands	r3, r1
 800548a:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f00c fcc3 	bl	8011e18 <RTC_ExitInitMode>
 8005492:	4603      	mov	r3, r0
 8005494:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	22ff      	movs	r2, #255	; 0xff
 800549c:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d103      	bne.n	80054ac <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80054b4:	7dfb      	ldrb	r3, [r7, #23]

}
 80054b6:	4618      	mov	r0, r3
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd90      	pop	{r4, r7, pc}
 80054be:	bf00      	nop
 80054c0:	007f7f7f 	.word	0x007f7f7f

080054c4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80054c8:	4b30      	ldr	r3, [pc, #192]	; (800558c <MX_USART1_UART_Init+0xc8>)
 80054ca:	4a31      	ldr	r2, [pc, #196]	; (8005590 <MX_USART1_UART_Init+0xcc>)
 80054cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80054ce:	4b2f      	ldr	r3, [pc, #188]	; (800558c <MX_USART1_UART_Init+0xc8>)
 80054d0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80054d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054d6:	4b2d      	ldr	r3, [pc, #180]	; (800558c <MX_USART1_UART_Init+0xc8>)
 80054d8:	2200      	movs	r2, #0
 80054da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054dc:	4b2b      	ldr	r3, [pc, #172]	; (800558c <MX_USART1_UART_Init+0xc8>)
 80054de:	2200      	movs	r2, #0
 80054e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054e2:	4b2a      	ldr	r3, [pc, #168]	; (800558c <MX_USART1_UART_Init+0xc8>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054e8:	4b28      	ldr	r3, [pc, #160]	; (800558c <MX_USART1_UART_Init+0xc8>)
 80054ea:	220c      	movs	r2, #12
 80054ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054ee:	4b27      	ldr	r3, [pc, #156]	; (800558c <MX_USART1_UART_Init+0xc8>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054f4:	4b25      	ldr	r3, [pc, #148]	; (800558c <MX_USART1_UART_Init+0xc8>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054fa:	4b24      	ldr	r3, [pc, #144]	; (800558c <MX_USART1_UART_Init+0xc8>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005500:	4b22      	ldr	r3, [pc, #136]	; (800558c <MX_USART1_UART_Init+0xc8>)
 8005502:	2200      	movs	r2, #0
 8005504:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005506:	4b21      	ldr	r3, [pc, #132]	; (800558c <MX_USART1_UART_Init+0xc8>)
 8005508:	2200      	movs	r2, #0
 800550a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800550c:	481f      	ldr	r0, [pc, #124]	; (800558c <MX_USART1_UART_Init+0xc8>)
 800550e:	f00e fea3 	bl	8014258 <HAL_UART_Init>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005518:	f7fe fa7a 	bl	8003a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800551c:	2100      	movs	r1, #0
 800551e:	481b      	ldr	r0, [pc, #108]	; (800558c <MX_USART1_UART_Init+0xc8>)
 8005520:	f011 fbe9 	bl	8016cf6 <HAL_UARTEx_SetTxFifoThreshold>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800552a:	f7fe fa71 	bl	8003a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800552e:	2100      	movs	r1, #0
 8005530:	4816      	ldr	r0, [pc, #88]	; (800558c <MX_USART1_UART_Init+0xc8>)
 8005532:	f011 fc1e 	bl	8016d72 <HAL_UARTEx_SetRxFifoThreshold>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800553c:	f7fe fa68 	bl	8003a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005540:	4812      	ldr	r0, [pc, #72]	; (800558c <MX_USART1_UART_Init+0xc8>)
 8005542:	f011 fb9f 	bl	8016c84 <HAL_UARTEx_DisableFifoMode>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800554c:	f7fe fa60 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005550:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005554:	480d      	ldr	r0, [pc, #52]	; (800558c <MX_USART1_UART_Init+0xc8>)
 8005556:	f011 fc0c 	bl	8016d72 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800555a:	480c      	ldr	r0, [pc, #48]	; (800558c <MX_USART1_UART_Init+0xc8>)
 800555c:	f011 fb57 	bl	8016c0e <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005560:	480a      	ldr	r0, [pc, #40]	; (800558c <MX_USART1_UART_Init+0xc8>)
 8005562:	f011 fb21 	bl	8016ba8 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005566:	4b09      	ldr	r3, [pc, #36]	; (800558c <MX_USART1_UART_Init+0xc8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	4b07      	ldr	r3, [pc, #28]	; (800558c <MX_USART1_UART_Init+0xc8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005574:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <MX_USART1_UART_Init+0xc8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	4b03      	ldr	r3, [pc, #12]	; (800558c <MX_USART1_UART_Init+0xc8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005584:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	24001e3c 	.word	0x24001e3c
 8005590:	40011000 	.word	0x40011000

08005594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b0ba      	sub	sp, #232	; 0xe8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800559c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	605a      	str	r2, [r3, #4]
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80055ac:	f107 0310 	add.w	r3, r7, #16
 80055b0:	22c0      	movs	r2, #192	; 0xc0
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f014 fec9 	bl	801a34c <memset>
  if(uartHandle->Instance==USART1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a41      	ldr	r2, [pc, #260]	; (80056c4 <HAL_UART_MspInit+0x130>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d17b      	bne.n	80056bc <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80055c4:	f04f 0201 	mov.w	r2, #1
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80055d0:	2318      	movs	r3, #24
 80055d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055d6:	f107 0310 	add.w	r3, r7, #16
 80055da:	4618      	mov	r0, r3
 80055dc:	f009 fc74 	bl	800eec8 <HAL_RCCEx_PeriphCLKConfig>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80055e6:	f7fe fa13 	bl	8003a10 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80055ea:	4b37      	ldr	r3, [pc, #220]	; (80056c8 <HAL_UART_MspInit+0x134>)
 80055ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055f0:	4a35      	ldr	r2, [pc, #212]	; (80056c8 <HAL_UART_MspInit+0x134>)
 80055f2:	f043 0310 	orr.w	r3, r3, #16
 80055f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055fa:	4b33      	ldr	r3, [pc, #204]	; (80056c8 <HAL_UART_MspInit+0x134>)
 80055fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005608:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <HAL_UART_MspInit+0x134>)
 800560a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800560e:	4a2e      	ldr	r2, [pc, #184]	; (80056c8 <HAL_UART_MspInit+0x134>)
 8005610:	f043 0301 	orr.w	r3, r3, #1
 8005614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005618:	4b2b      	ldr	r3, [pc, #172]	; (80056c8 <HAL_UART_MspInit+0x134>)
 800561a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005626:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800562a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562e:	2302      	movs	r3, #2
 8005630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005634:	2300      	movs	r3, #0
 8005636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800563a:	2300      	movs	r3, #0
 800563c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005640:	2307      	movs	r3, #7
 8005642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005646:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800564a:	4619      	mov	r1, r3
 800564c:	481f      	ldr	r0, [pc, #124]	; (80056cc <HAL_UART_MspInit+0x138>)
 800564e:	f005 fe47 	bl	800b2e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005652:	4b1f      	ldr	r3, [pc, #124]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 8005654:	4a1f      	ldr	r2, [pc, #124]	; (80056d4 <HAL_UART_MspInit+0x140>)
 8005656:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 800565a:	222a      	movs	r2, #42	; 0x2a
 800565c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800565e:	4b1c      	ldr	r3, [pc, #112]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 8005660:	2240      	movs	r2, #64	; 0x40
 8005662:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005664:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 8005666:	2200      	movs	r2, #0
 8005668:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800566a:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 800566c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005670:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005672:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 8005674:	2200      	movs	r2, #0
 8005676:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 800567a:	2200      	movs	r2, #0
 800567c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800567e:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 8005680:	2200      	movs	r2, #0
 8005682:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 8005686:	2200      	movs	r2, #0
 8005688:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800568a:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 800568c:	2200      	movs	r2, #0
 800568e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005690:	480f      	ldr	r0, [pc, #60]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 8005692:	f002 fcf5 	bl	8008080 <HAL_DMA_Init>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800569c:	f7fe f9b8 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a0b      	ldr	r2, [pc, #44]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 80056a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80056a6:	4a0a      	ldr	r2, [pc, #40]	; (80056d0 <HAL_UART_MspInit+0x13c>)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80056ac:	2200      	movs	r2, #0
 80056ae:	2105      	movs	r1, #5
 80056b0:	2025      	movs	r0, #37	; 0x25
 80056b2:	f002 f8b7 	bl	8007824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80056b6:	2025      	movs	r0, #37	; 0x25
 80056b8:	f002 f8ce 	bl	8007858 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80056bc:	bf00      	nop
 80056be:	37e8      	adds	r7, #232	; 0xe8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40011000 	.word	0x40011000
 80056c8:	58024400 	.word	0x58024400
 80056cc:	58020000 	.word	0x58020000
 80056d0:	24001ed0 	.word	0x24001ed0
 80056d4:	40020040 	.word	0x40020040

080056d8 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 80056e2:	4bc2      	ldr	r3, [pc, #776]	; (80059ec <voltage_monitor_init+0x314>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 80056e8:	4bc0      	ldr	r3, [pc, #768]	; (80059ec <voltage_monitor_init+0x314>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80056ee:	4bbf      	ldr	r3, [pc, #764]	; (80059ec <voltage_monitor_init+0x314>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80056f4:	4bbd      	ldr	r3, [pc, #756]	; (80059ec <voltage_monitor_init+0x314>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 80056fa:	4bbc      	ldr	r3, [pc, #752]	; (80059ec <voltage_monitor_init+0x314>)
 80056fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8005700:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8005702:	4bba      	ldr	r3, [pc, #744]	; (80059ec <voltage_monitor_init+0x314>)
 8005704:	2200      	movs	r2, #0
 8005706:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8005708:	4bb8      	ldr	r3, [pc, #736]	; (80059ec <voltage_monitor_init+0x314>)
 800570a:	2201      	movs	r2, #1
 800570c:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 800570e:	4bb7      	ldr	r3, [pc, #732]	; (80059ec <voltage_monitor_init+0x314>)
 8005710:	2200      	movs	r2, #0
 8005712:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8005714:	4bb5      	ldr	r3, [pc, #724]	; (80059ec <voltage_monitor_init+0x314>)
 8005716:	2201      	movs	r2, #1
 8005718:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 800571a:	4bb4      	ldr	r3, [pc, #720]	; (80059ec <voltage_monitor_init+0x314>)
 800571c:	2200      	movs	r2, #0
 800571e:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005720:	4bb2      	ldr	r3, [pc, #712]	; (80059ec <voltage_monitor_init+0x314>)
 8005722:	f242 7210 	movw	r2, #10000	; 0x2710
 8005726:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8005728:	4bb0      	ldr	r3, [pc, #704]	; (80059ec <voltage_monitor_init+0x314>)
 800572a:	2200      	movs	r2, #0
 800572c:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 800572e:	4baf      	ldr	r3, [pc, #700]	; (80059ec <voltage_monitor_init+0x314>)
 8005730:	2202      	movs	r2, #2
 8005732:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005734:	4bad      	ldr	r3, [pc, #692]	; (80059ec <voltage_monitor_init+0x314>)
 8005736:	2200      	movs	r2, #0
 8005738:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 800573a:	4bac      	ldr	r3, [pc, #688]	; (80059ec <voltage_monitor_init+0x314>)
 800573c:	2201      	movs	r2, #1
 800573e:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8005740:	4baa      	ldr	r3, [pc, #680]	; (80059ec <voltage_monitor_init+0x314>)
 8005742:	2200      	movs	r2, #0
 8005744:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005746:	4ba9      	ldr	r3, [pc, #676]	; (80059ec <voltage_monitor_init+0x314>)
 8005748:	f242 7210 	movw	r2, #10000	; 0x2710
 800574c:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 800574e:	4ba7      	ldr	r3, [pc, #668]	; (80059ec <voltage_monitor_init+0x314>)
 8005750:	2200      	movs	r2, #0
 8005752:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005754:	4ba5      	ldr	r3, [pc, #660]	; (80059ec <voltage_monitor_init+0x314>)
 8005756:	2203      	movs	r2, #3
 8005758:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 800575a:	4ba4      	ldr	r3, [pc, #656]	; (80059ec <voltage_monitor_init+0x314>)
 800575c:	2200      	movs	r2, #0
 800575e:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8005760:	4ba2      	ldr	r3, [pc, #648]	; (80059ec <voltage_monitor_init+0x314>)
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8005768:	4ba0      	ldr	r3, [pc, #640]	; (80059ec <voltage_monitor_init+0x314>)
 800576a:	2200      	movs	r2, #0
 800576c:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 800576e:	4b9f      	ldr	r3, [pc, #636]	; (80059ec <voltage_monitor_init+0x314>)
 8005770:	f242 7210 	movw	r2, #10000	; 0x2710
 8005774:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8005776:	4b9d      	ldr	r3, [pc, #628]	; (80059ec <voltage_monitor_init+0x314>)
 8005778:	2200      	movs	r2, #0
 800577a:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 800577c:	4b9b      	ldr	r3, [pc, #620]	; (80059ec <voltage_monitor_init+0x314>)
 800577e:	2204      	movs	r2, #4
 8005780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005784:	4b99      	ldr	r3, [pc, #612]	; (80059ec <voltage_monitor_init+0x314>)
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 800578c:	4b97      	ldr	r3, [pc, #604]	; (80059ec <voltage_monitor_init+0x314>)
 800578e:	2201      	movs	r2, #1
 8005790:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005794:	4b95      	ldr	r3, [pc, #596]	; (80059ec <voltage_monitor_init+0x314>)
 8005796:	2200      	movs	r2, #0
 8005798:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800579a:	4b94      	ldr	r3, [pc, #592]	; (80059ec <voltage_monitor_init+0x314>)
 800579c:	f242 7210 	movw	r2, #10000	; 0x2710
 80057a0:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 80057a2:	4b92      	ldr	r3, [pc, #584]	; (80059ec <voltage_monitor_init+0x314>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 80057a8:	4b90      	ldr	r3, [pc, #576]	; (80059ec <voltage_monitor_init+0x314>)
 80057aa:	2205      	movs	r2, #5
 80057ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 80057b0:	4b8e      	ldr	r3, [pc, #568]	; (80059ec <voltage_monitor_init+0x314>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 80057b8:	4b8c      	ldr	r3, [pc, #560]	; (80059ec <voltage_monitor_init+0x314>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 80057c0:	4b8a      	ldr	r3, [pc, #552]	; (80059ec <voltage_monitor_init+0x314>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057c6:	4b89      	ldr	r3, [pc, #548]	; (80059ec <voltage_monitor_init+0x314>)
 80057c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80057cc:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 80057ce:	4b87      	ldr	r3, [pc, #540]	; (80059ec <voltage_monitor_init+0x314>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80057d4:	4b85      	ldr	r3, [pc, #532]	; (80059ec <voltage_monitor_init+0x314>)
 80057d6:	2206      	movs	r2, #6
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 80057dc:	4b83      	ldr	r3, [pc, #524]	; (80059ec <voltage_monitor_init+0x314>)
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 80057e4:	4b81      	ldr	r3, [pc, #516]	; (80059ec <voltage_monitor_init+0x314>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80057ec:	4b7f      	ldr	r3, [pc, #508]	; (80059ec <voltage_monitor_init+0x314>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057f4:	4b7d      	ldr	r3, [pc, #500]	; (80059ec <voltage_monitor_init+0x314>)
 80057f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80057fa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80057fe:	4b7b      	ldr	r3, [pc, #492]	; (80059ec <voltage_monitor_init+0x314>)
 8005800:	2200      	movs	r2, #0
 8005802:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8005806:	4b79      	ldr	r3, [pc, #484]	; (80059ec <voltage_monitor_init+0x314>)
 8005808:	2207      	movs	r2, #7
 800580a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 800580e:	4b77      	ldr	r3, [pc, #476]	; (80059ec <voltage_monitor_init+0x314>)
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8005816:	4b75      	ldr	r3, [pc, #468]	; (80059ec <voltage_monitor_init+0x314>)
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 800581e:	4b73      	ldr	r3, [pc, #460]	; (80059ec <voltage_monitor_init+0x314>)
 8005820:	2200      	movs	r2, #0
 8005822:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005826:	4b71      	ldr	r3, [pc, #452]	; (80059ec <voltage_monitor_init+0x314>)
 8005828:	f242 7210 	movw	r2, #10000	; 0x2710
 800582c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8005830:	4b6e      	ldr	r3, [pc, #440]	; (80059ec <voltage_monitor_init+0x314>)
 8005832:	2200      	movs	r2, #0
 8005834:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8005838:	4b6c      	ldr	r3, [pc, #432]	; (80059ec <voltage_monitor_init+0x314>)
 800583a:	2208      	movs	r2, #8
 800583c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8005840:	4b6a      	ldr	r3, [pc, #424]	; (80059ec <voltage_monitor_init+0x314>)
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8005848:	4b68      	ldr	r3, [pc, #416]	; (80059ec <voltage_monitor_init+0x314>)
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8005850:	4b66      	ldr	r3, [pc, #408]	; (80059ec <voltage_monitor_init+0x314>)
 8005852:	2200      	movs	r2, #0
 8005854:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8005858:	4b64      	ldr	r3, [pc, #400]	; (80059ec <voltage_monitor_init+0x314>)
 800585a:	f640 42b9 	movw	r2, #3257	; 0xcb9
 800585e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8005862:	4b62      	ldr	r3, [pc, #392]	; (80059ec <voltage_monitor_init+0x314>)
 8005864:	f640 3283 	movw	r2, #2947	; 0xb83
 8005868:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 800586c:	4b5f      	ldr	r3, [pc, #380]	; (80059ec <voltage_monitor_init+0x314>)
 800586e:	2209      	movs	r2, #9
 8005870:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005874:	4b5d      	ldr	r3, [pc, #372]	; (80059ec <voltage_monitor_init+0x314>)
 8005876:	2200      	movs	r2, #0
 8005878:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 800587c:	4b5b      	ldr	r3, [pc, #364]	; (80059ec <voltage_monitor_init+0x314>)
 800587e:	2200      	movs	r2, #0
 8005880:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005884:	4b59      	ldr	r3, [pc, #356]	; (80059ec <voltage_monitor_init+0x314>)
 8005886:	2200      	movs	r2, #0
 8005888:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 800588c:	4b57      	ldr	r3, [pc, #348]	; (80059ec <voltage_monitor_init+0x314>)
 800588e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005892:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005896:	4b55      	ldr	r3, [pc, #340]	; (80059ec <voltage_monitor_init+0x314>)
 8005898:	2200      	movs	r2, #0
 800589a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800589e:	4b53      	ldr	r3, [pc, #332]	; (80059ec <voltage_monitor_init+0x314>)
 80058a0:	220a      	movs	r2, #10
 80058a2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 80058a6:	4b51      	ldr	r3, [pc, #324]	; (80059ec <voltage_monitor_init+0x314>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 80058ae:	4b4f      	ldr	r3, [pc, #316]	; (80059ec <voltage_monitor_init+0x314>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 80058b6:	4b4d      	ldr	r3, [pc, #308]	; (80059ec <voltage_monitor_init+0x314>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 80058be:	4b4b      	ldr	r3, [pc, #300]	; (80059ec <voltage_monitor_init+0x314>)
 80058c0:	f640 7245 	movw	r2, #3909	; 0xf45
 80058c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 80058c8:	4b48      	ldr	r3, [pc, #288]	; (80059ec <voltage_monitor_init+0x314>)
 80058ca:	f640 52d1 	movw	r2, #3537	; 0xdd1
 80058ce:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 80058d2:	4b46      	ldr	r3, [pc, #280]	; (80059ec <voltage_monitor_init+0x314>)
 80058d4:	220b      	movs	r2, #11
 80058d6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 80058da:	4b44      	ldr	r3, [pc, #272]	; (80059ec <voltage_monitor_init+0x314>)
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 80058e2:	4b42      	ldr	r3, [pc, #264]	; (80059ec <voltage_monitor_init+0x314>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 80058ea:	4b40      	ldr	r3, [pc, #256]	; (80059ec <voltage_monitor_init+0x314>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80058f2:	4b3e      	ldr	r3, [pc, #248]	; (80059ec <voltage_monitor_init+0x314>)
 80058f4:	f640 72fb 	movw	r2, #4091	; 0xffb
 80058f8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80058fc:	4b3b      	ldr	r3, [pc, #236]	; (80059ec <voltage_monitor_init+0x314>)
 80058fe:	f640 6276 	movw	r2, #3702	; 0xe76
 8005902:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8005906:	4b39      	ldr	r3, [pc, #228]	; (80059ec <voltage_monitor_init+0x314>)
 8005908:	220c      	movs	r2, #12
 800590a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 800590e:	4b37      	ldr	r3, [pc, #220]	; (80059ec <voltage_monitor_init+0x314>)
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8005916:	4b35      	ldr	r3, [pc, #212]	; (80059ec <voltage_monitor_init+0x314>)
 8005918:	2200      	movs	r2, #0
 800591a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 800591e:	4b33      	ldr	r3, [pc, #204]	; (80059ec <voltage_monitor_init+0x314>)
 8005920:	2200      	movs	r2, #0
 8005922:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8005926:	4b31      	ldr	r3, [pc, #196]	; (80059ec <voltage_monitor_init+0x314>)
 8005928:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800592c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8005930:	4b2e      	ldr	r3, [pc, #184]	; (80059ec <voltage_monitor_init+0x314>)
 8005932:	2200      	movs	r2, #0
 8005934:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8005938:	4b2c      	ldr	r3, [pc, #176]	; (80059ec <voltage_monitor_init+0x314>)
 800593a:	220d      	movs	r2, #13
 800593c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8005940:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <voltage_monitor_init+0x314>)
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8005948:	4b28      	ldr	r3, [pc, #160]	; (80059ec <voltage_monitor_init+0x314>)
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8005950:	4b26      	ldr	r3, [pc, #152]	; (80059ec <voltage_monitor_init+0x314>)
 8005952:	2200      	movs	r2, #0
 8005954:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8005958:	4b24      	ldr	r3, [pc, #144]	; (80059ec <voltage_monitor_init+0x314>)
 800595a:	f640 7238 	movw	r2, #3896	; 0xf38
 800595e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8005962:	4b22      	ldr	r3, [pc, #136]	; (80059ec <voltage_monitor_init+0x314>)
 8005964:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8005968:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 800596c:	4b1f      	ldr	r3, [pc, #124]	; (80059ec <voltage_monitor_init+0x314>)
 800596e:	220e      	movs	r2, #14
 8005970:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005974:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <voltage_monitor_init+0x314>)
 8005976:	2200      	movs	r2, #0
 8005978:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 800597c:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <voltage_monitor_init+0x314>)
 800597e:	2200      	movs	r2, #0
 8005980:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005984:	4b19      	ldr	r3, [pc, #100]	; (80059ec <voltage_monitor_init+0x314>)
 8005986:	2200      	movs	r2, #0
 8005988:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 800598c:	4b17      	ldr	r3, [pc, #92]	; (80059ec <voltage_monitor_init+0x314>)
 800598e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005992:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005996:	4b15      	ldr	r3, [pc, #84]	; (80059ec <voltage_monitor_init+0x314>)
 8005998:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800599c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 80059a0:	4b12      	ldr	r3, [pc, #72]	; (80059ec <voltage_monitor_init+0x314>)
 80059a2:	220f      	movs	r2, #15
 80059a4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 80059a8:	4b10      	ldr	r3, [pc, #64]	; (80059ec <voltage_monitor_init+0x314>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 80059b0:	4b0e      	ldr	r3, [pc, #56]	; (80059ec <voltage_monitor_init+0x314>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 80059b8:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <voltage_monitor_init+0x314>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <voltage_monitor_init+0x314>)
 80059c2:	f241 0264 	movw	r2, #4196	; 0x1064
 80059c6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 80059ca:	4b08      	ldr	r3, [pc, #32]	; (80059ec <voltage_monitor_init+0x314>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <voltage_monitor_init+0x314>)
 80059d4:	2210      	movs	r2, #16
 80059d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 80059da:	4b04      	ldr	r3, [pc, #16]	; (80059ec <voltage_monitor_init+0x314>)
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80059e2:	4b02      	ldr	r3, [pc, #8]	; (80059ec <voltage_monitor_init+0x314>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80059ea:	e001      	b.n	80059f0 <voltage_monitor_init+0x318>
 80059ec:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 80059f0:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <voltage_monitor_init+0x378>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80059f8:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <voltage_monitor_init+0x378>)
 80059fa:	f640 5208 	movw	r2, #3336	; 0xd08
 80059fe:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <voltage_monitor_init+0x378>)
 8005a04:	f640 32ca 	movw	r2, #3018	; 0xbca
 8005a08:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8005a0c:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <voltage_monitor_init+0x378>)
 8005a0e:	2211      	movs	r2, #17
 8005a10:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005a14:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <voltage_monitor_init+0x378>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <voltage_monitor_init+0x378>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8005a24:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <voltage_monitor_init+0x378>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005a2c:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <voltage_monitor_init+0x378>)
 8005a2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a32:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005a36:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <voltage_monitor_init+0x378>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	71fb      	strb	r3, [r7, #7]

	return status;
 8005a42:	79fb      	ldrb	r3, [r7, #7]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	24001f48 	.word	0x24001f48

08005a54 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	460a      	mov	r2, r1
 8005a5e:	71fb      	strb	r3, [r7, #7]
 8005a60:	4613      	mov	r3, r2
 8005a62:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005a68:	79fa      	ldrb	r2, [r7, #7]
 8005a6a:	4909      	ldr	r1, [pc, #36]	; (8005a90 <set_rail_monitor_enable+0x3c>)
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	440b      	add	r3, r1
 8005a76:	3302      	adds	r3, #2
 8005a78:	79ba      	ldrb	r2, [r7, #6]
 8005a7a:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]

	return status;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	24001f48 	.word	0x24001f48

08005a94 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	; 0x28
 8005a98:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe faf2 	bl	800408c <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005aa8:	f107 0310 	add.w	r3, r7, #16
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe fb1d 	bl	80040ec <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005ab2:	f107 0308 	add.w	r3, r7, #8
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe fb6a 	bl	8004190 <sample_hk_adc3>
 8005abc:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8005abe:	4b25      	ldr	r3, [pc, #148]	; (8005b54 <set_rail_monitor+0xc0>)
 8005ac0:	809a      	strh	r2, [r3, #4]
 8005ac2:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005ac4:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <set_rail_monitor+0xc0>)
 8005ac6:	81da      	strh	r2, [r3, #14]
 8005ac8:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8005aca:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <set_rail_monitor+0xc0>)
 8005acc:	831a      	strh	r2, [r3, #24]
 8005ace:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <set_rail_monitor+0xc0>)
 8005ad2:	845a      	strh	r2, [r3, #34]	; 0x22
 8005ad4:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8005ad6:	4b1f      	ldr	r3, [pc, #124]	; (8005b54 <set_rail_monitor+0xc0>)
 8005ad8:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005ada:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005adc:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <set_rail_monitor+0xc0>)
 8005ade:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ae0:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005ae2:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <set_rail_monitor+0xc0>)
 8005ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005ae8:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8005aea:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <set_rail_monitor+0xc0>)
 8005aec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005af0:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8005af2:	4b18      	ldr	r3, [pc, #96]	; (8005b54 <set_rail_monitor+0xc0>)
 8005af4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005af8:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8005afa:	4b16      	ldr	r3, [pc, #88]	; (8005b54 <set_rail_monitor+0xc0>)
 8005afc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005b00:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8005b02:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <set_rail_monitor+0xc0>)
 8005b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005b08:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8005b0a:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <set_rail_monitor+0xc0>)
 8005b0c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005b10:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005b12:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <set_rail_monitor+0xc0>)
 8005b14:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005b18:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8005b1a:	4b0e      	ldr	r3, [pc, #56]	; (8005b54 <set_rail_monitor+0xc0>)
 8005b1c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005b20:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8005b22:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <set_rail_monitor+0xc0>)
 8005b24:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005b28:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <set_rail_monitor+0xc0>)
 8005b2c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005b30:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <set_rail_monitor+0xc0>)
 8005b34:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005b38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <set_rail_monitor+0xc0>)
 8005b3c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3728      	adds	r7, #40	; 0x28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	24001f48 	.word	0x24001f48

08005b58 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005b5c:	4b02      	ldr	r3, [pc, #8]	; (8005b68 <get_rail_monitor+0x10>)
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	24001f48 	.word	0x24001f48

08005b6c <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8005b7a:	89fb      	ldrh	r3, [r7, #14]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	db05      	blt.n	8005b8e <in_range+0x22>
 8005b82:	89fb      	ldrh	r3, [r7, #14]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	dc01      	bgt.n	8005b8e <in_range+0x22>
		return 1;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <in_range+0x24>
	}
	return 0;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <monitor_rails>:


void monitor_rails() {
 8005b9c:	b590      	push	{r4, r7, lr}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	607b      	str	r3, [r7, #4]
 8005ba6:	e062      	b.n	8005c6e <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8005ba8:	4935      	ldr	r1, [pc, #212]	; (8005c80 <monitor_rails+0xe4>)
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3302      	adds	r3, #2
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d054      	beq.n	8005c68 <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8005bbe:	4930      	ldr	r1, [pc, #192]	; (8005c80 <monitor_rails+0xe4>)
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	440b      	add	r3, r1
 8005bcc:	3304      	adds	r3, #4
 8005bce:	8818      	ldrh	r0, [r3, #0]
 8005bd0:	492b      	ldr	r1, [pc, #172]	; (8005c80 <monitor_rails+0xe4>)
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	440b      	add	r3, r1
 8005bde:	3308      	adds	r3, #8
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	461c      	mov	r4, r3
 8005be4:	4926      	ldr	r1, [pc, #152]	; (8005c80 <monitor_rails+0xe4>)
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3306      	adds	r3, #6
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	f7ff ffb7 	bl	8005b6c <in_range>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d131      	bne.n	8005c68 <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005c04:	491e      	ldr	r1, [pc, #120]	; (8005c80 <monitor_rails+0xe4>)
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	440b      	add	r3, r1
 8005c12:	3301      	adds	r3, #1
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	3301      	adds	r3, #1
 8005c18:	b2d8      	uxtb	r0, r3
 8005c1a:	4919      	ldr	r1, [pc, #100]	; (8005c80 <monitor_rails+0xe4>)
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	440b      	add	r3, r1
 8005c28:	3301      	adds	r3, #1
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005c2e:	4914      	ldr	r1, [pc, #80]	; (8005c80 <monitor_rails+0xe4>)
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	440b      	add	r3, r1
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d111      	bne.n	8005c68 <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005c44:	490e      	ldr	r1, [pc, #56]	; (8005c80 <monitor_rails+0xe4>)
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	440b      	add	r3, r1
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 f815 	bl	8005c84 <get_rail_name_error_detail>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 8005c62:	6838      	ldr	r0, [r7, #0]
 8005c64:	f7fc f97a 	bl	8001f5c <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b11      	cmp	r3, #17
 8005c72:	dd99      	ble.n	8005ba8 <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd90      	pop	{r4, r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	24001f48 	.word	0x24001f48

08005c84 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	2b11      	cmp	r3, #17
 8005c92:	d84b      	bhi.n	8005d2c <get_rail_name_error_detail+0xa8>
 8005c94:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <get_rail_name_error_detail+0x18>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005ce5 	.word	0x08005ce5
 8005ca0:	08005ce9 	.word	0x08005ce9
 8005ca4:	08005ced 	.word	0x08005ced
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005cf5 	.word	0x08005cf5
 8005cb0:	08005cf9 	.word	0x08005cf9
 8005cb4:	08005cfd 	.word	0x08005cfd
 8005cb8:	08005d01 	.word	0x08005d01
 8005cbc:	08005d05 	.word	0x08005d05
 8005cc0:	08005d09 	.word	0x08005d09
 8005cc4:	08005d0d 	.word	0x08005d0d
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d15 	.word	0x08005d15
 8005cd0:	08005d19 	.word	0x08005d19
 8005cd4:	08005d1d 	.word	0x08005d1d
 8005cd8:	08005d21 	.word	0x08005d21
 8005cdc:	08005d25 	.word	0x08005d25
 8005ce0:	08005d29 	.word	0x08005d29
	case RAIL_vsense:
		return ED_vsense;
 8005ce4:	2306      	movs	r3, #6
 8005ce6:	e022      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8005ce8:	2307      	movs	r3, #7
 8005cea:	e020      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8005cec:	2308      	movs	r3, #8
 8005cee:	e01e      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8005cf0:	2309      	movs	r3, #9
 8005cf2:	e01c      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8005cf4:	230a      	movs	r3, #10
 8005cf6:	e01a      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8005cf8:	230b      	movs	r3, #11
 8005cfa:	e018      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	e016      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8005d00:	230d      	movs	r3, #13
 8005d02:	e014      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8005d04:	230e      	movs	r3, #14
 8005d06:	e012      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8005d08:	230f      	movs	r3, #15
 8005d0a:	e010      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	e00e      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8005d10:	2311      	movs	r3, #17
 8005d12:	e00c      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8005d14:	2312      	movs	r3, #18
 8005d16:	e00a      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8005d18:	2313      	movs	r3, #19
 8005d1a:	e008      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8005d1c:	2314      	movs	r3, #20
 8005d1e:	e006      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8005d20:	2315      	movs	r3, #21
 8005d22:	e004      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8005d24:	2316      	movs	r3, #22
 8005d26:	e002      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8005d28:	2317      	movs	r3, #23
 8005d2a:	e000      	b.n	8005d2e <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005d2c:	231a      	movs	r3, #26
	}
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop

08005d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005d74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005d40:	f7fe feae 	bl	8004aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d44:	480c      	ldr	r0, [pc, #48]	; (8005d78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005d46:	490d      	ldr	r1, [pc, #52]	; (8005d7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005d48:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d4c:	e002      	b.n	8005d54 <LoopCopyDataInit>

08005d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d52:	3304      	adds	r3, #4

08005d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d58:	d3f9      	bcc.n	8005d4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d5a:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005d5c:	4c0a      	ldr	r4, [pc, #40]	; (8005d88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d60:	e001      	b.n	8005d66 <LoopFillZerobss>

08005d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d64:	3204      	adds	r2, #4

08005d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d68:	d3fb      	bcc.n	8005d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d6a:	f014 fabd 	bl	801a2e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d6e:	f7fd fc6d 	bl	800364c <main>
  bx  lr
 8005d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005d74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005d78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005d7c:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8005d80:	0801b218 	.word	0x0801b218
  ldr r2, =_sbss
 8005d84:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8005d88:	2400697c 	.word	0x2400697c

08005d8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d8c:	e7fe      	b.n	8005d8c <ADC3_IRQHandler>
	...

08005d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d96:	2003      	movs	r0, #3
 8005d98:	f001 fd39 	bl	800780e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d9c:	f008 fe7c 	bl	800ea98 <HAL_RCC_GetSysClockFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <HAL_Init+0x68>)
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	0a1b      	lsrs	r3, r3, #8
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	4913      	ldr	r1, [pc, #76]	; (8005dfc <HAL_Init+0x6c>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	fa22 f303 	lsr.w	r3, r2, r3
 8005db8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dba:	4b0f      	ldr	r3, [pc, #60]	; (8005df8 <HAL_Init+0x68>)
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	4a0e      	ldr	r2, [pc, #56]	; (8005dfc <HAL_Init+0x6c>)
 8005dc4:	5cd3      	ldrb	r3, [r2, r3]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd0:	4a0b      	ldr	r2, [pc, #44]	; (8005e00 <HAL_Init+0x70>)
 8005dd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dd4:	4a0b      	ldr	r2, [pc, #44]	; (8005e04 <HAL_Init+0x74>)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005dda:	2005      	movs	r0, #5
 8005ddc:	f7fe fc4a 	bl	8004674 <HAL_InitTick>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e002      	b.n	8005df0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005dea:	f7fe fc25 	bl	8004638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	0801b164 	.word	0x0801b164
 8005e00:	240000c4 	.word	0x240000c4
 8005e04:	240000c0 	.word	0x240000c0

08005e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <HAL_IncTick+0x20>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <HAL_IncTick+0x24>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4413      	add	r3, r2
 8005e18:	4a04      	ldr	r2, [pc, #16]	; (8005e2c <HAL_IncTick+0x24>)
 8005e1a:	6013      	str	r3, [r2, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	240000cc 	.word	0x240000cc
 8005e2c:	24001ffc 	.word	0x24001ffc

08005e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return uwTick;
 8005e34:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <HAL_GetTick+0x14>)
 8005e36:	681b      	ldr	r3, [r3, #0]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	24001ffc 	.word	0x24001ffc

08005e48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005e4c:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <HAL_GetREVID+0x14>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	0c1b      	lsrs	r3, r3, #16
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	5c001000 	.word	0x5c001000

08005e60 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	43db      	mvns	r3, r3
 8005e72:	401a      	ands	r2, r3
 8005e74:	4904      	ldr	r1, [pc, #16]	; (8005e88 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	604b      	str	r3, [r1, #4]
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	58000400 	.word	0x58000400

08005e8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	609a      	str	r2, [r3, #8]
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3360      	adds	r3, #96	; 0x60
 8005f06:	461a      	mov	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	430b      	orrs	r3, r1
 8005f22:	431a      	orrs	r2, r3
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 031f 	and.w	r3, r3, #31
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	fa01 f303 	lsl.w	r3, r1, r3
 8005f54:	431a      	orrs	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	611a      	str	r2, [r3, #16]
}
 8005f5a:	bf00      	nop
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b087      	sub	sp, #28
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3360      	adds	r3, #96	; 0x60
 8005f76:	461a      	mov	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	601a      	str	r2, [r3, #0]
  }
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3330      	adds	r3, #48	; 0x30
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	0a1b      	lsrs	r3, r3, #8
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	f003 030c 	and.w	r3, r3, #12
 8005fde:	4413      	add	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	211f      	movs	r1, #31
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	401a      	ands	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	0e9b      	lsrs	r3, r3, #26
 8005ffa:	f003 011f 	and.w	r1, r3, #31
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	fa01 f303 	lsl.w	r3, r1, r3
 8006008:	431a      	orrs	r2, r3
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f023 0203 	bic.w	r2, r3, #3
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60da      	str	r2, [r3, #12]
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3314      	adds	r3, #20
 8006050:	461a      	mov	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	0e5b      	lsrs	r3, r3, #25
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	4413      	add	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	0d1b      	lsrs	r3, r3, #20
 8006068:	f003 031f 	and.w	r3, r3, #31
 800606c:	2107      	movs	r1, #7
 800606e:	fa01 f303 	lsl.w	r3, r1, r3
 8006072:	43db      	mvns	r3, r3
 8006074:	401a      	ands	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	0d1b      	lsrs	r3, r3, #20
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	fa01 f303 	lsl.w	r3, r1, r3
 8006084:	431a      	orrs	r2, r3
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
	...

08006098 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f003 0318 	and.w	r3, r3, #24
 80060ba:	4908      	ldr	r1, [pc, #32]	; (80060dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80060bc:	40d9      	lsrs	r1, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	400b      	ands	r3, r1
 80060c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060c6:	431a      	orrs	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	000fffff 	.word	0x000fffff

080060e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 031f 	and.w	r3, r3, #31
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <LL_ADC_DisableDeepPowerDown+0x20>)
 800610a:	4013      	ands	r3, r2
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6093      	str	r3, [r2, #8]
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	5fffffc0 	.word	0x5fffffc0

08006120 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006134:	d101      	bne.n	800613a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <LL_ADC_EnableInternalRegulator+0x24>)
 8006156:	4013      	ands	r3, r2
 8006158:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	6fffffc0 	.word	0x6fffffc0

08006170 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006184:	d101      	bne.n	800618a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <LL_ADC_Enable+0x24>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	f043 0201 	orr.w	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	7fffffc0 	.word	0x7fffffc0

080061c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <LL_ADC_Disable+0x24>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	f043 0202 	orr.w	r2, r3, #2
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	7fffffc0 	.word	0x7fffffc0

080061e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <LL_ADC_IsEnabled+0x18>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <LL_ADC_IsEnabled+0x1a>
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b02      	cmp	r3, #2
 8006220:	d101      	bne.n	8006226 <LL_ADC_IsDisableOngoing+0x18>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <LL_ADC_IsDisableOngoing+0x1a>
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	4b05      	ldr	r3, [pc, #20]	; (8006258 <LL_ADC_REG_StartConversion+0x24>)
 8006242:	4013      	ands	r3, r2
 8006244:	f043 0204 	orr.w	r2, r3, #4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	7fffffc0 	.word	0x7fffffc0

0800625c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b04      	cmp	r3, #4
 800626e:	d101      	bne.n	8006274 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006270:	2301      	movs	r3, #1
 8006272:	e000      	b.n	8006276 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b08      	cmp	r3, #8
 8006294:	d101      	bne.n	800629a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b089      	sub	sp, #36	; 0x24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e18f      	b.n	80065e2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d109      	bne.n	80062e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7fa fb3b 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff ff19 	bl	8006120 <LL_ADC_IsDeepPowerDownEnabled>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff feff 	bl	80060fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff ff34 	bl	8006170 <LL_ADC_IsInternalRegulatorEnabled>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d114      	bne.n	8006338 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff ff18 	bl	8006148 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006318:	4b87      	ldr	r3, [pc, #540]	; (8006538 <HAL_ADC_Init+0x290>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	099b      	lsrs	r3, r3, #6
 800631e:	4a87      	ldr	r2, [pc, #540]	; (800653c <HAL_ADC_Init+0x294>)
 8006320:	fba2 2303 	umull	r2, r3, r2, r3
 8006324:	099b      	lsrs	r3, r3, #6
 8006326:	3301      	adds	r3, #1
 8006328:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800632a:	e002      	b.n	8006332 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	3b01      	subs	r3, #1
 8006330:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f9      	bne.n	800632c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff ff17 	bl	8006170 <LL_ADC_IsInternalRegulatorEnabled>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10d      	bne.n	8006364 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634c:	f043 0210 	orr.w	r2, r3, #16
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006358:	f043 0201 	orr.w	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff ff77 	bl	800625c <LL_ADC_REG_IsConversionOngoing>
 800636e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	f040 8129 	bne.w	80065d0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 8125 	bne.w	80065d0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800638e:	f043 0202 	orr.w	r2, r3, #2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff ff24 	bl	80061e8 <LL_ADC_IsEnabled>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d136      	bne.n	8006414 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a65      	ldr	r2, [pc, #404]	; (8006540 <HAL_ADC_Init+0x298>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_ADC_Init+0x112>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a63      	ldr	r2, [pc, #396]	; (8006544 <HAL_ADC_Init+0x29c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d10e      	bne.n	80063d8 <HAL_ADC_Init+0x130>
 80063ba:	4861      	ldr	r0, [pc, #388]	; (8006540 <HAL_ADC_Init+0x298>)
 80063bc:	f7ff ff14 	bl	80061e8 <LL_ADC_IsEnabled>
 80063c0:	4604      	mov	r4, r0
 80063c2:	4860      	ldr	r0, [pc, #384]	; (8006544 <HAL_ADC_Init+0x29c>)
 80063c4:	f7ff ff10 	bl	80061e8 <LL_ADC_IsEnabled>
 80063c8:	4603      	mov	r3, r0
 80063ca:	4323      	orrs	r3, r4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	e008      	b.n	80063ea <HAL_ADC_Init+0x142>
 80063d8:	485b      	ldr	r0, [pc, #364]	; (8006548 <HAL_ADC_Init+0x2a0>)
 80063da:	f7ff ff05 	bl	80061e8 <LL_ADC_IsEnabled>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d012      	beq.n	8006414 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a53      	ldr	r2, [pc, #332]	; (8006540 <HAL_ADC_Init+0x298>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d004      	beq.n	8006402 <HAL_ADC_Init+0x15a>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a51      	ldr	r2, [pc, #324]	; (8006544 <HAL_ADC_Init+0x29c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d101      	bne.n	8006406 <HAL_ADC_Init+0x15e>
 8006402:	4a52      	ldr	r2, [pc, #328]	; (800654c <HAL_ADC_Init+0x2a4>)
 8006404:	e000      	b.n	8006408 <HAL_ADC_Init+0x160>
 8006406:	4a52      	ldr	r2, [pc, #328]	; (8006550 <HAL_ADC_Init+0x2a8>)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4619      	mov	r1, r3
 800640e:	4610      	mov	r0, r2
 8006410:	f7ff fd3c 	bl	8005e8c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006414:	f7ff fd18 	bl	8005e48 <HAL_GetREVID>
 8006418:	4603      	mov	r3, r0
 800641a:	f241 0203 	movw	r2, #4099	; 0x1003
 800641e:	4293      	cmp	r3, r2
 8006420:	d914      	bls.n	800644c <HAL_ADC_Init+0x1a4>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	2b10      	cmp	r3, #16
 8006428:	d110      	bne.n	800644c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	7d5b      	ldrb	r3, [r3, #21]
 800642e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006434:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800643a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	7f1b      	ldrb	r3, [r3, #28]
 8006440:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006442:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006444:	f043 030c 	orr.w	r3, r3, #12
 8006448:	61bb      	str	r3, [r7, #24]
 800644a:	e00d      	b.n	8006468 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	7d5b      	ldrb	r3, [r3, #21]
 8006450:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006456:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800645c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	7f1b      	ldrb	r3, [r3, #28]
 8006462:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006464:	4313      	orrs	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	7f1b      	ldrb	r3, [r3, #28]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	3b01      	subs	r3, #1
 8006476:	045b      	lsls	r3, r3, #17
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	4313      	orrs	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	4313      	orrs	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	4b2c      	ldr	r3, [pc, #176]	; (8006554 <HAL_ADC_Init+0x2ac>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	69b9      	ldr	r1, [r7, #24]
 80064aa:	430b      	orrs	r3, r1
 80064ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff fed2 	bl	800625c <LL_ADC_REG_IsConversionOngoing>
 80064b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fedf 	bl	8006282 <LL_ADC_INJ_IsConversionOngoing>
 80064c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d15f      	bne.n	800658c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d15c      	bne.n	800658c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	7d1b      	ldrb	r3, [r3, #20]
 80064d6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80064dc:	4313      	orrs	r3, r2
 80064de:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	4b1c      	ldr	r3, [pc, #112]	; (8006558 <HAL_ADC_Init+0x2b0>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	69b9      	ldr	r1, [r7, #24]
 80064f0:	430b      	orrs	r3, r1
 80064f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d130      	bne.n	8006560 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	4b14      	ldr	r3, [pc, #80]	; (800655c <HAL_ADC_Init+0x2b4>)
 800650c:	4013      	ands	r3, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006512:	3a01      	subs	r2, #1
 8006514:	0411      	lsls	r1, r2, #16
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800651a:	4311      	orrs	r1, r2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006520:	4311      	orrs	r1, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006526:	430a      	orrs	r2, r1
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	611a      	str	r2, [r3, #16]
 8006534:	e01c      	b.n	8006570 <HAL_ADC_Init+0x2c8>
 8006536:	bf00      	nop
 8006538:	240000c0 	.word	0x240000c0
 800653c:	053e2d63 	.word	0x053e2d63
 8006540:	40022000 	.word	0x40022000
 8006544:	40022100 	.word	0x40022100
 8006548:	58026000 	.word	0x58026000
 800654c:	40022300 	.word	0x40022300
 8006550:	58026300 	.word	0x58026300
 8006554:	fff0c003 	.word	0xfff0c003
 8006558:	ffffbffc 	.word	0xffffbffc
 800655c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691a      	ldr	r2, [r3, #16]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0201 	bic.w	r2, r2, #1
 800656e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fdec 	bl	8007164 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10c      	bne.n	80065ae <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	f023 010f 	bic.w	r1, r3, #15
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	1e5a      	subs	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
 80065ac:	e007      	b.n	80065be <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 020f 	bic.w	r2, r2, #15
 80065bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	f043 0201 	orr.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54
 80065ce:	e007      	b.n	80065e0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d4:	f043 0210 	orr.w	r2, r3, #16
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80065e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3724      	adds	r7, #36	; 0x24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd90      	pop	{r4, r7, pc}
 80065ea:	bf00      	nop

080065ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a55      	ldr	r2, [pc, #340]	; (8006754 <HAL_ADC_Start_DMA+0x168>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_ADC_Start_DMA+0x20>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a54      	ldr	r2, [pc, #336]	; (8006758 <HAL_ADC_Start_DMA+0x16c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d101      	bne.n	8006610 <HAL_ADC_Start_DMA+0x24>
 800660c:	4b53      	ldr	r3, [pc, #332]	; (800675c <HAL_ADC_Start_DMA+0x170>)
 800660e:	e000      	b.n	8006612 <HAL_ADC_Start_DMA+0x26>
 8006610:	4b53      	ldr	r3, [pc, #332]	; (8006760 <HAL_ADC_Start_DMA+0x174>)
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fd64 	bl	80060e0 <LL_ADC_GetMultimode>
 8006618:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fe1c 	bl	800625c <LL_ADC_REG_IsConversionOngoing>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 808c 	bne.w	8006744 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_ADC_Start_DMA+0x4e>
 8006636:	2302      	movs	r3, #2
 8006638:	e087      	b.n	800674a <HAL_ADC_Start_DMA+0x15e>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b05      	cmp	r3, #5
 800664c:	d002      	beq.n	8006654 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b09      	cmp	r3, #9
 8006652:	d170      	bne.n	8006736 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fc07 	bl	8006e68 <ADC_Enable>
 800665a:	4603      	mov	r3, r0
 800665c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800665e:	7dfb      	ldrb	r3, [r7, #23]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d163      	bne.n	800672c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006668:	4b3e      	ldr	r3, [pc, #248]	; (8006764 <HAL_ADC_Start_DMA+0x178>)
 800666a:	4013      	ands	r3, r2
 800666c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a37      	ldr	r2, [pc, #220]	; (8006758 <HAL_ADC_Start_DMA+0x16c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d002      	beq.n	8006684 <HAL_ADC_Start_DMA+0x98>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	e000      	b.n	8006686 <HAL_ADC_Start_DMA+0x9a>
 8006684:	4b33      	ldr	r3, [pc, #204]	; (8006754 <HAL_ADC_Start_DMA+0x168>)
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	4293      	cmp	r3, r2
 800668c:	d002      	beq.n	8006694 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006698:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d006      	beq.n	80066ba <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b0:	f023 0206 	bic.w	r2, r3, #6
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	659a      	str	r2, [r3, #88]	; 0x58
 80066b8:	e002      	b.n	80066c0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c4:	4a28      	ldr	r2, [pc, #160]	; (8006768 <HAL_ADC_Start_DMA+0x17c>)
 80066c6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <HAL_ADC_Start_DMA+0x180>)
 80066ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d4:	4a26      	ldr	r2, [pc, #152]	; (8006770 <HAL_ADC_Start_DMA+0x184>)
 80066d6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	221c      	movs	r2, #28
 80066de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0210 	orr.w	r2, r2, #16
 80066f6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	4619      	mov	r1, r3
 8006702:	4610      	mov	r0, r2
 8006704:	f7ff fc89 	bl	800601a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3340      	adds	r3, #64	; 0x40
 8006712:	4619      	mov	r1, r3
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f002 f80e 	bl	8008738 <HAL_DMA_Start_IT>
 800671c:	4603      	mov	r3, r0
 800671e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff fd85 	bl	8006234 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800672a:	e00d      	b.n	8006748 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8006734:	e008      	b.n	8006748 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006742:	e001      	b.n	8006748 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006744:	2302      	movs	r3, #2
 8006746:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006748:	7dfb      	ldrb	r3, [r7, #23]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40022000 	.word	0x40022000
 8006758:	40022100 	.word	0x40022100
 800675c:	40022300 	.word	0x40022300
 8006760:	58026300 	.word	0x58026300
 8006764:	fffff0fe 	.word	0xfffff0fe
 8006768:	0800703b 	.word	0x0800703b
 800676c:	08007113 	.word	0x08007113
 8006770:	0800712f 	.word	0x0800712f

08006774 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80067b0:	b590      	push	{r4, r7, lr}
 80067b2:	b0a1      	sub	sp, #132	; 0x84
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	4a65      	ldr	r2, [pc, #404]	; (8006960 <HAL_ADC_ConfigChannel+0x1b0>)
 80067ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_ADC_ConfigChannel+0x2a>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e32e      	b.n	8006e38 <HAL_ADC_ConfigChannel+0x688>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fd38 	bl	800625c <LL_ADC_REG_IsConversionOngoing>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f040 8313 	bne.w	8006e1a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	db2c      	blt.n	8006856 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006804:	2b00      	cmp	r3, #0
 8006806:	d108      	bne.n	800681a <HAL_ADC_ConfigChannel+0x6a>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	0e9b      	lsrs	r3, r3, #26
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	2201      	movs	r2, #1
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	e016      	b.n	8006848 <HAL_ADC_ConfigChannel+0x98>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006822:	fa93 f3a3 	rbit	r3, r3
 8006826:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800682a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800682c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8006832:	2320      	movs	r3, #32
 8006834:	e003      	b.n	800683e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8006836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006838:	fab3 f383 	clz	r3, r3
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2201      	movs	r2, #1
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6812      	ldr	r2, [r2, #0]
 800684c:	69d1      	ldr	r1, [r2, #28]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	430b      	orrs	r3, r1
 8006854:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	6859      	ldr	r1, [r3, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	f7ff fbad 	bl	8005fc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fcf5 	bl	800625c <LL_ADC_REG_IsConversionOngoing>
 8006872:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fd02 	bl	8006282 <LL_ADC_INJ_IsConversionOngoing>
 800687e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006882:	2b00      	cmp	r3, #0
 8006884:	f040 80b8 	bne.w	80069f8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 80b4 	bne.w	80069f8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6818      	ldr	r0, [r3, #0]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	6819      	ldr	r1, [r3, #0]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	461a      	mov	r2, r3
 800689e:	f7ff fbcf 	bl	8006040 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80068a2:	4b30      	ldr	r3, [pc, #192]	; (8006964 <HAL_ADC_ConfigChannel+0x1b4>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80068aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068ae:	d10b      	bne.n	80068c8 <HAL_ADC_ConfigChannel+0x118>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695a      	ldr	r2, [r3, #20]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	089b      	lsrs	r3, r3, #2
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	fa02 f303 	lsl.w	r3, r2, r3
 80068c6:	e01d      	b.n	8006904 <HAL_ADC_ConfigChannel+0x154>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10b      	bne.n	80068ee <HAL_ADC_ConfigChannel+0x13e>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	695a      	ldr	r2, [r3, #20]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	089b      	lsrs	r3, r3, #2
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	e00a      	b.n	8006904 <HAL_ADC_ConfigChannel+0x154>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695a      	ldr	r2, [r3, #20]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	089b      	lsrs	r3, r3, #2
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	2b04      	cmp	r3, #4
 800690c:	d02c      	beq.n	8006968 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6919      	ldr	r1, [r3, #16]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800691c:	f7ff faea 	bl	8005ef4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6919      	ldr	r1, [r3, #16]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	7e5b      	ldrb	r3, [r3, #25]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d102      	bne.n	8006936 <HAL_ADC_ConfigChannel+0x186>
 8006930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006934:	e000      	b.n	8006938 <HAL_ADC_ConfigChannel+0x188>
 8006936:	2300      	movs	r3, #0
 8006938:	461a      	mov	r2, r3
 800693a:	f7ff fb14 	bl	8005f66 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6919      	ldr	r1, [r3, #16]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	7e1b      	ldrb	r3, [r3, #24]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d102      	bne.n	8006954 <HAL_ADC_ConfigChannel+0x1a4>
 800694e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006952:	e000      	b.n	8006956 <HAL_ADC_ConfigChannel+0x1a6>
 8006954:	2300      	movs	r3, #0
 8006956:	461a      	mov	r2, r3
 8006958:	f7ff faec 	bl	8005f34 <LL_ADC_SetDataRightShift>
 800695c:	e04c      	b.n	80069f8 <HAL_ADC_ConfigChannel+0x248>
 800695e:	bf00      	nop
 8006960:	47ff0000 	.word	0x47ff0000
 8006964:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	069b      	lsls	r3, r3, #26
 8006978:	429a      	cmp	r2, r3
 800697a:	d107      	bne.n	800698c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800698a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006992:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	069b      	lsls	r3, r3, #26
 800699c:	429a      	cmp	r2, r3
 800699e:	d107      	bne.n	80069b0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80069ae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	069b      	lsls	r3, r3, #26
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d107      	bne.n	80069d4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80069d2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	069b      	lsls	r3, r3, #26
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d107      	bne.n	80069f8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80069f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff fbf3 	bl	80061e8 <LL_ADC_IsEnabled>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 8211 	bne.w	8006e2c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6819      	ldr	r1, [r3, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f7ff fb3e 	bl	8006098 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4aa1      	ldr	r2, [pc, #644]	; (8006ca8 <HAL_ADC_ConfigChannel+0x4f8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	f040 812e 	bne.w	8006c84 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10b      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x2a0>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	0e9b      	lsrs	r3, r3, #26
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	2b09      	cmp	r3, #9
 8006a46:	bf94      	ite	ls
 8006a48:	2301      	movls	r3, #1
 8006a4a:	2300      	movhi	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	e019      	b.n	8006a84 <HAL_ADC_ConfigChannel+0x2d4>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a58:	fa93 f3a3 	rbit	r3, r3
 8006a5c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006a68:	2320      	movs	r3, #32
 8006a6a:	e003      	b.n	8006a74 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a6e:	fab3 f383 	clz	r3, r3
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	3301      	adds	r3, #1
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2b09      	cmp	r3, #9
 8006a7c:	bf94      	ite	ls
 8006a7e:	2301      	movls	r3, #1
 8006a80:	2300      	movhi	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d079      	beq.n	8006b7c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d107      	bne.n	8006aa4 <HAL_ADC_ConfigChannel+0x2f4>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	0e9b      	lsrs	r3, r3, #26
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	069b      	lsls	r3, r3, #26
 8006a9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006aa2:	e015      	b.n	8006ad0 <HAL_ADC_ConfigChannel+0x320>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aac:	fa93 f3a3 	rbit	r3, r3
 8006ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006abc:	2320      	movs	r3, #32
 8006abe:	e003      	b.n	8006ac8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac2:	fab3 f383 	clz	r3, r3
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	3301      	adds	r3, #1
 8006aca:	069b      	lsls	r3, r3, #26
 8006acc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d109      	bne.n	8006af0 <HAL_ADC_ConfigChannel+0x340>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	0e9b      	lsrs	r3, r3, #26
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	2101      	movs	r1, #1
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	e017      	b.n	8006b20 <HAL_ADC_ConfigChannel+0x370>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006af8:	fa93 f3a3 	rbit	r3, r3
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b00:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8006b08:	2320      	movs	r3, #32
 8006b0a:	e003      	b.n	8006b14 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8006b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0e:	fab3 f383 	clz	r3, r3
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	3301      	adds	r3, #1
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b20:	ea42 0103 	orr.w	r1, r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <HAL_ADC_ConfigChannel+0x396>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	0e9b      	lsrs	r3, r3, #26
 8006b36:	3301      	adds	r3, #1
 8006b38:	f003 021f 	and.w	r2, r3, #31
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	4413      	add	r3, r2
 8006b42:	051b      	lsls	r3, r3, #20
 8006b44:	e018      	b.n	8006b78 <HAL_ADC_ConfigChannel+0x3c8>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	fa93 f3a3 	rbit	r3, r3
 8006b52:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8006b5e:	2320      	movs	r3, #32
 8006b60:	e003      	b.n	8006b6a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	fab3 f383 	clz	r3, r3
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	f003 021f 	and.w	r2, r3, #31
 8006b70:	4613      	mov	r3, r2
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	4413      	add	r3, r2
 8006b76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b78:	430b      	orrs	r3, r1
 8006b7a:	e07e      	b.n	8006c7a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d107      	bne.n	8006b98 <HAL_ADC_ConfigChannel+0x3e8>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	0e9b      	lsrs	r3, r3, #26
 8006b8e:	3301      	adds	r3, #1
 8006b90:	069b      	lsls	r3, r3, #26
 8006b92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b96:	e015      	b.n	8006bc4 <HAL_ADC_ConfigChannel+0x414>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	fa93 f3a3 	rbit	r3, r3
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8006bb0:	2320      	movs	r3, #32
 8006bb2:	e003      	b.n	8006bbc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	fab3 f383 	clz	r3, r3
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	069b      	lsls	r3, r3, #26
 8006bc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <HAL_ADC_ConfigChannel+0x434>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	0e9b      	lsrs	r3, r3, #26
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2101      	movs	r1, #1
 8006bde:	fa01 f303 	lsl.w	r3, r1, r3
 8006be2:	e017      	b.n	8006c14 <HAL_ADC_ConfigChannel+0x464>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	fa93 f3a3 	rbit	r3, r3
 8006bf0:	61bb      	str	r3, [r7, #24]
  return result;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8006bfc:	2320      	movs	r3, #32
 8006bfe:	e003      	b.n	8006c08 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	fab3 f383 	clz	r3, r3
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	2101      	movs	r1, #1
 8006c10:	fa01 f303 	lsl.w	r3, r1, r3
 8006c14:	ea42 0103 	orr.w	r1, r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10d      	bne.n	8006c40 <HAL_ADC_ConfigChannel+0x490>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	0e9b      	lsrs	r3, r3, #26
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f003 021f 	and.w	r2, r3, #31
 8006c30:	4613      	mov	r3, r2
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	4413      	add	r3, r2
 8006c36:	3b1e      	subs	r3, #30
 8006c38:	051b      	lsls	r3, r3, #20
 8006c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c3e:	e01b      	b.n	8006c78 <HAL_ADC_ConfigChannel+0x4c8>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	fa93 f3a3 	rbit	r3, r3
 8006c4c:	60fb      	str	r3, [r7, #12]
  return result;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006c58:	2320      	movs	r3, #32
 8006c5a:	e003      	b.n	8006c64 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	fab3 f383 	clz	r3, r3
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	3301      	adds	r3, #1
 8006c66:	f003 021f 	and.w	r2, r3, #31
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	4413      	add	r3, r2
 8006c70:	3b1e      	subs	r3, #30
 8006c72:	051b      	lsls	r3, r3, #20
 8006c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	6892      	ldr	r2, [r2, #8]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	f7ff f9de 	bl	8006040 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f280 80cf 	bge.w	8006e2c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a06      	ldr	r2, [pc, #24]	; (8006cac <HAL_ADC_ConfigChannel+0x4fc>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <HAL_ADC_ConfigChannel+0x4f2>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a04      	ldr	r2, [pc, #16]	; (8006cb0 <HAL_ADC_ConfigChannel+0x500>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d10a      	bne.n	8006cb8 <HAL_ADC_ConfigChannel+0x508>
 8006ca2:	4b04      	ldr	r3, [pc, #16]	; (8006cb4 <HAL_ADC_ConfigChannel+0x504>)
 8006ca4:	e009      	b.n	8006cba <HAL_ADC_ConfigChannel+0x50a>
 8006ca6:	bf00      	nop
 8006ca8:	47ff0000 	.word	0x47ff0000
 8006cac:	40022000 	.word	0x40022000
 8006cb0:	40022100 	.word	0x40022100
 8006cb4:	40022300 	.word	0x40022300
 8006cb8:	4b61      	ldr	r3, [pc, #388]	; (8006e40 <HAL_ADC_ConfigChannel+0x690>)
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff f90c 	bl	8005ed8 <LL_ADC_GetCommonPathInternalCh>
 8006cc0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a5f      	ldr	r2, [pc, #380]	; (8006e44 <HAL_ADC_ConfigChannel+0x694>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d004      	beq.n	8006cd6 <HAL_ADC_ConfigChannel+0x526>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a5d      	ldr	r2, [pc, #372]	; (8006e48 <HAL_ADC_ConfigChannel+0x698>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d10e      	bne.n	8006cf4 <HAL_ADC_ConfigChannel+0x544>
 8006cd6:	485b      	ldr	r0, [pc, #364]	; (8006e44 <HAL_ADC_ConfigChannel+0x694>)
 8006cd8:	f7ff fa86 	bl	80061e8 <LL_ADC_IsEnabled>
 8006cdc:	4604      	mov	r4, r0
 8006cde:	485a      	ldr	r0, [pc, #360]	; (8006e48 <HAL_ADC_ConfigChannel+0x698>)
 8006ce0:	f7ff fa82 	bl	80061e8 <LL_ADC_IsEnabled>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	4323      	orrs	r3, r4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e008      	b.n	8006d06 <HAL_ADC_ConfigChannel+0x556>
 8006cf4:	4855      	ldr	r0, [pc, #340]	; (8006e4c <HAL_ADC_ConfigChannel+0x69c>)
 8006cf6:	f7ff fa77 	bl	80061e8 <LL_ADC_IsEnabled>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf0c      	ite	eq
 8006d00:	2301      	moveq	r3, #1
 8006d02:	2300      	movne	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d07d      	beq.n	8006e06 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a50      	ldr	r2, [pc, #320]	; (8006e50 <HAL_ADC_ConfigChannel+0x6a0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d130      	bne.n	8006d76 <HAL_ADC_ConfigChannel+0x5c6>
 8006d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d12b      	bne.n	8006d76 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a4a      	ldr	r2, [pc, #296]	; (8006e4c <HAL_ADC_ConfigChannel+0x69c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	f040 8081 	bne.w	8006e2c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a45      	ldr	r2, [pc, #276]	; (8006e44 <HAL_ADC_ConfigChannel+0x694>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_ADC_ConfigChannel+0x58e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a43      	ldr	r2, [pc, #268]	; (8006e48 <HAL_ADC_ConfigChannel+0x698>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d101      	bne.n	8006d42 <HAL_ADC_ConfigChannel+0x592>
 8006d3e:	4a45      	ldr	r2, [pc, #276]	; (8006e54 <HAL_ADC_ConfigChannel+0x6a4>)
 8006d40:	e000      	b.n	8006d44 <HAL_ADC_ConfigChannel+0x594>
 8006d42:	4a3f      	ldr	r2, [pc, #252]	; (8006e40 <HAL_ADC_ConfigChannel+0x690>)
 8006d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f7ff f8b0 	bl	8005eb2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d52:	4b41      	ldr	r3, [pc, #260]	; (8006e58 <HAL_ADC_ConfigChannel+0x6a8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	4a40      	ldr	r2, [pc, #256]	; (8006e5c <HAL_ADC_ConfigChannel+0x6ac>)
 8006d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5e:	099b      	lsrs	r3, r3, #6
 8006d60:	3301      	adds	r3, #1
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006d66:	e002      	b.n	8006d6e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f9      	bne.n	8006d68 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d74:	e05a      	b.n	8006e2c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a39      	ldr	r2, [pc, #228]	; (8006e60 <HAL_ADC_ConfigChannel+0x6b0>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d11e      	bne.n	8006dbe <HAL_ADC_ConfigChannel+0x60e>
 8006d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d119      	bne.n	8006dbe <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a2f      	ldr	r2, [pc, #188]	; (8006e4c <HAL_ADC_ConfigChannel+0x69c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d14b      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a2a      	ldr	r2, [pc, #168]	; (8006e44 <HAL_ADC_ConfigChannel+0x694>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <HAL_ADC_ConfigChannel+0x5f8>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a29      	ldr	r2, [pc, #164]	; (8006e48 <HAL_ADC_ConfigChannel+0x698>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d101      	bne.n	8006dac <HAL_ADC_ConfigChannel+0x5fc>
 8006da8:	4a2a      	ldr	r2, [pc, #168]	; (8006e54 <HAL_ADC_ConfigChannel+0x6a4>)
 8006daa:	e000      	b.n	8006dae <HAL_ADC_ConfigChannel+0x5fe>
 8006dac:	4a24      	ldr	r2, [pc, #144]	; (8006e40 <HAL_ADC_ConfigChannel+0x690>)
 8006dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	f7ff f87b 	bl	8005eb2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dbc:	e036      	b.n	8006e2c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a28      	ldr	r2, [pc, #160]	; (8006e64 <HAL_ADC_ConfigChannel+0x6b4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d131      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x67c>
 8006dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d12c      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1d      	ldr	r2, [pc, #116]	; (8006e4c <HAL_ADC_ConfigChannel+0x69c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d127      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a18      	ldr	r2, [pc, #96]	; (8006e44 <HAL_ADC_ConfigChannel+0x694>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <HAL_ADC_ConfigChannel+0x640>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a17      	ldr	r2, [pc, #92]	; (8006e48 <HAL_ADC_ConfigChannel+0x698>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d101      	bne.n	8006df4 <HAL_ADC_ConfigChannel+0x644>
 8006df0:	4a18      	ldr	r2, [pc, #96]	; (8006e54 <HAL_ADC_ConfigChannel+0x6a4>)
 8006df2:	e000      	b.n	8006df6 <HAL_ADC_ConfigChannel+0x646>
 8006df4:	4a12      	ldr	r2, [pc, #72]	; (8006e40 <HAL_ADC_ConfigChannel+0x690>)
 8006df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f7ff f857 	bl	8005eb2 <LL_ADC_SetCommonPathInternalCh>
 8006e04:	e012      	b.n	8006e2c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0a:	f043 0220 	orr.w	r2, r3, #32
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006e18:	e008      	b.n	8006e2c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	f043 0220 	orr.w	r2, r3, #32
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006e34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3784      	adds	r7, #132	; 0x84
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd90      	pop	{r4, r7, pc}
 8006e40:	58026300 	.word	0x58026300
 8006e44:	40022000 	.word	0x40022000
 8006e48:	40022100 	.word	0x40022100
 8006e4c:	58026000 	.word	0x58026000
 8006e50:	cb840000 	.word	0xcb840000
 8006e54:	40022300 	.word	0x40022300
 8006e58:	240000c0 	.word	0x240000c0
 8006e5c:	053e2d63 	.word	0x053e2d63
 8006e60:	c7520000 	.word	0xc7520000
 8006e64:	cfb80000 	.word	0xcfb80000

08006e68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff f9b7 	bl	80061e8 <LL_ADC_IsEnabled>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d16e      	bne.n	8006f5e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	4b38      	ldr	r3, [pc, #224]	; (8006f68 <ADC_Enable+0x100>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	f043 0210 	orr.w	r2, r3, #16
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9e:	f043 0201 	orr.w	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e05a      	b.n	8006f60 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff f972 	bl	8006198 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006eb4:	f7fe ffbc 	bl	8005e30 <HAL_GetTick>
 8006eb8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a2b      	ldr	r2, [pc, #172]	; (8006f6c <ADC_Enable+0x104>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <ADC_Enable+0x66>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a29      	ldr	r2, [pc, #164]	; (8006f70 <ADC_Enable+0x108>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d101      	bne.n	8006ed2 <ADC_Enable+0x6a>
 8006ece:	4b29      	ldr	r3, [pc, #164]	; (8006f74 <ADC_Enable+0x10c>)
 8006ed0:	e000      	b.n	8006ed4 <ADC_Enable+0x6c>
 8006ed2:	4b29      	ldr	r3, [pc, #164]	; (8006f78 <ADC_Enable+0x110>)
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7ff f903 	bl	80060e0 <LL_ADC_GetMultimode>
 8006eda:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a23      	ldr	r2, [pc, #140]	; (8006f70 <ADC_Enable+0x108>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d002      	beq.n	8006eec <ADC_Enable+0x84>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	e000      	b.n	8006eee <ADC_Enable+0x86>
 8006eec:	4b1f      	ldr	r3, [pc, #124]	; (8006f6c <ADC_Enable+0x104>)
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6812      	ldr	r2, [r2, #0]
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d02c      	beq.n	8006f50 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d130      	bne.n	8006f5e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006efc:	e028      	b.n	8006f50 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff f970 	bl	80061e8 <LL_ADC_IsEnabled>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff f940 	bl	8006198 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006f18:	f7fe ff8a 	bl	8005e30 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d914      	bls.n	8006f50 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d00d      	beq.n	8006f50 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f38:	f043 0210 	orr.w	r2, r3, #16
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f44:	f043 0201 	orr.w	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e007      	b.n	8006f60 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d1cf      	bne.n	8006efe <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	8000003f 	.word	0x8000003f
 8006f6c:	40022000 	.word	0x40022000
 8006f70:	40022100 	.word	0x40022100
 8006f74:	40022300 	.word	0x40022300
 8006f78:	58026300 	.word	0x58026300

08006f7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff f940 	bl	800620e <LL_ADC_IsDisableOngoing>
 8006f8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff f927 	bl	80061e8 <LL_ADC_IsEnabled>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d047      	beq.n	8007030 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d144      	bne.n	8007030 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 030d 	and.w	r3, r3, #13
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d10c      	bne.n	8006fce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff f901 	bl	80061c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006fc6:	f7fe ff33 	bl	8005e30 <HAL_GetTick>
 8006fca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006fcc:	e029      	b.n	8007022 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd2:	f043 0210 	orr.w	r2, r3, #16
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fde:	f043 0201 	orr.w	r2, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e023      	b.n	8007032 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006fea:	f7fe ff21 	bl	8005e30 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d914      	bls.n	8007022 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00d      	beq.n	8007022 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700a:	f043 0210 	orr.w	r2, r3, #16
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007016:	f043 0201 	orr.w	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e007      	b.n	8007032 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1dc      	bne.n	8006fea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007050:	2b00      	cmp	r3, #0
 8007052:	d14b      	bne.n	80070ec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007058:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d021      	beq.n	80070b2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe ff92 	bl	8005f9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d032      	beq.n	80070e4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d12b      	bne.n	80070e4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d11f      	bne.n	80070e4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a8:	f043 0201 	orr.w	r2, r3, #1
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	655a      	str	r2, [r3, #84]	; 0x54
 80070b0:	e018      	b.n	80070e4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f003 0303 	and.w	r3, r3, #3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d111      	bne.n	80070e4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d105      	bne.n	80070e4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070dc:	f043 0201 	orr.w	r2, r3, #1
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff fb45 	bl	8006774 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80070ea:	e00e      	b.n	800710a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7ff fb4f 	bl	800679c <HAL_ADC_ErrorCallback>
}
 80070fe:	e004      	b.n	800710a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
}
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff fb31 	bl	8006788 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714c:	f043 0204 	orr.w	r2, r3, #4
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff fb21 	bl	800679c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800715a:	bf00      	nop
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a7a      	ldr	r2, [pc, #488]	; (800735c <ADC_ConfigureBoostMode+0x1f8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <ADC_ConfigureBoostMode+0x1c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a79      	ldr	r2, [pc, #484]	; (8007360 <ADC_ConfigureBoostMode+0x1fc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d109      	bne.n	8007194 <ADC_ConfigureBoostMode+0x30>
 8007180:	4b78      	ldr	r3, [pc, #480]	; (8007364 <ADC_ConfigureBoostMode+0x200>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007188:	2b00      	cmp	r3, #0
 800718a:	bf14      	ite	ne
 800718c:	2301      	movne	r3, #1
 800718e:	2300      	moveq	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	e008      	b.n	80071a6 <ADC_ConfigureBoostMode+0x42>
 8007194:	4b74      	ldr	r3, [pc, #464]	; (8007368 <ADC_ConfigureBoostMode+0x204>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800719c:	2b00      	cmp	r3, #0
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01c      	beq.n	80071e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80071aa:	f007 fdef 	bl	800ed8c <HAL_RCC_GetHCLKFreq>
 80071ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071b8:	d010      	beq.n	80071dc <ADC_ConfigureBoostMode+0x78>
 80071ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071be:	d873      	bhi.n	80072a8 <ADC_ConfigureBoostMode+0x144>
 80071c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c4:	d002      	beq.n	80071cc <ADC_ConfigureBoostMode+0x68>
 80071c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ca:	d16d      	bne.n	80072a8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	60fb      	str	r3, [r7, #12]
        break;
 80071da:	e068      	b.n	80072ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	089b      	lsrs	r3, r3, #2
 80071e0:	60fb      	str	r3, [r7, #12]
        break;
 80071e2:	e064      	b.n	80072ae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80071e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80071e8:	f04f 0100 	mov.w	r1, #0
 80071ec:	f009 f876 	bl	80102dc <HAL_RCCEx_GetPeriphCLKFreq>
 80071f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80071fa:	d051      	beq.n	80072a0 <ADC_ConfigureBoostMode+0x13c>
 80071fc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007200:	d854      	bhi.n	80072ac <ADC_ConfigureBoostMode+0x148>
 8007202:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007206:	d047      	beq.n	8007298 <ADC_ConfigureBoostMode+0x134>
 8007208:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800720c:	d84e      	bhi.n	80072ac <ADC_ConfigureBoostMode+0x148>
 800720e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007212:	d03d      	beq.n	8007290 <ADC_ConfigureBoostMode+0x12c>
 8007214:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007218:	d848      	bhi.n	80072ac <ADC_ConfigureBoostMode+0x148>
 800721a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800721e:	d033      	beq.n	8007288 <ADC_ConfigureBoostMode+0x124>
 8007220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007224:	d842      	bhi.n	80072ac <ADC_ConfigureBoostMode+0x148>
 8007226:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800722a:	d029      	beq.n	8007280 <ADC_ConfigureBoostMode+0x11c>
 800722c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007230:	d83c      	bhi.n	80072ac <ADC_ConfigureBoostMode+0x148>
 8007232:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007236:	d01a      	beq.n	800726e <ADC_ConfigureBoostMode+0x10a>
 8007238:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800723c:	d836      	bhi.n	80072ac <ADC_ConfigureBoostMode+0x148>
 800723e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007242:	d014      	beq.n	800726e <ADC_ConfigureBoostMode+0x10a>
 8007244:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007248:	d830      	bhi.n	80072ac <ADC_ConfigureBoostMode+0x148>
 800724a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800724e:	d00e      	beq.n	800726e <ADC_ConfigureBoostMode+0x10a>
 8007250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007254:	d82a      	bhi.n	80072ac <ADC_ConfigureBoostMode+0x148>
 8007256:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800725a:	d008      	beq.n	800726e <ADC_ConfigureBoostMode+0x10a>
 800725c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007260:	d824      	bhi.n	80072ac <ADC_ConfigureBoostMode+0x148>
 8007262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007266:	d002      	beq.n	800726e <ADC_ConfigureBoostMode+0x10a>
 8007268:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800726c:	d11e      	bne.n	80072ac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	0c9b      	lsrs	r3, r3, #18
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	fbb2 f3f3 	udiv	r3, r2, r3
 800727c:	60fb      	str	r3, [r7, #12]
        break;
 800727e:	e016      	b.n	80072ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	091b      	lsrs	r3, r3, #4
 8007284:	60fb      	str	r3, [r7, #12]
        break;
 8007286:	e012      	b.n	80072ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	60fb      	str	r3, [r7, #12]
        break;
 800728e:	e00e      	b.n	80072ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	099b      	lsrs	r3, r3, #6
 8007294:	60fb      	str	r3, [r7, #12]
        break;
 8007296:	e00a      	b.n	80072ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	09db      	lsrs	r3, r3, #7
 800729c:	60fb      	str	r3, [r7, #12]
        break;
 800729e:	e006      	b.n	80072ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	0a1b      	lsrs	r3, r3, #8
 80072a4:	60fb      	str	r3, [r7, #12]
        break;
 80072a6:	e002      	b.n	80072ae <ADC_ConfigureBoostMode+0x14a>
        break;
 80072a8:	bf00      	nop
 80072aa:	e000      	b.n	80072ae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80072ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80072ae:	f7fe fdcb 	bl	8005e48 <HAL_GetREVID>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d815      	bhi.n	80072e8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a2b      	ldr	r2, [pc, #172]	; (800736c <ADC_ConfigureBoostMode+0x208>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d908      	bls.n	80072d6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80072d4:	e03e      	b.n	8007354 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072e4:	609a      	str	r2, [r3, #8]
}
 80072e6:	e035      	b.n	8007354 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4a1f      	ldr	r2, [pc, #124]	; (8007370 <ADC_ConfigureBoostMode+0x20c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d808      	bhi.n	8007308 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007304:	609a      	str	r2, [r3, #8]
}
 8007306:	e025      	b.n	8007354 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4a1a      	ldr	r2, [pc, #104]	; (8007374 <ADC_ConfigureBoostMode+0x210>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d80a      	bhi.n	8007326 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007322:	609a      	str	r2, [r3, #8]
}
 8007324:	e016      	b.n	8007354 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4a13      	ldr	r2, [pc, #76]	; (8007378 <ADC_ConfigureBoostMode+0x214>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d80a      	bhi.n	8007344 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007340:	609a      	str	r2, [r3, #8]
}
 8007342:	e007      	b.n	8007354 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007352:	609a      	str	r2, [r3, #8]
}
 8007354:	bf00      	nop
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40022000 	.word	0x40022000
 8007360:	40022100 	.word	0x40022100
 8007364:	40022300 	.word	0x40022300
 8007368:	58026300 	.word	0x58026300
 800736c:	01312d00 	.word	0x01312d00
 8007370:	005f5e10 	.word	0x005f5e10
 8007374:	00bebc20 	.word	0x00bebc20
 8007378:	017d7840 	.word	0x017d7840

0800737c <LL_ADC_IsEnabled>:
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <LL_ADC_IsEnabled+0x18>
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <LL_ADC_IsEnabled+0x1a>
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
	...

080073a4 <LL_ADC_StartCalibration>:
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	689a      	ldr	r2, [r3, #8]
 80073b4:	4b09      	ldr	r3, [pc, #36]	; (80073dc <LL_ADC_StartCalibration+0x38>)
 80073b6:	4013      	ands	r3, r2
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80073c4:	430a      	orrs	r2, r1
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	609a      	str	r2, [r3, #8]
}
 80073d0:	bf00      	nop
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	3ffeffc0 	.word	0x3ffeffc0

080073e0 <LL_ADC_IsCalibrationOnGoing>:
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f4:	d101      	bne.n	80073fa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <LL_ADC_REG_IsConversionOngoing>:
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b04      	cmp	r3, #4
 800741a:	d101      	bne.n	8007420 <LL_ADC_REG_IsConversionOngoing+0x18>
 800741c:	2301      	movs	r3, #1
 800741e:	e000      	b.n	8007422 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800743c:	2300      	movs	r3, #0
 800743e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007446:	2b01      	cmp	r3, #1
 8007448:	d101      	bne.n	800744e <HAL_ADCEx_Calibration_Start+0x1e>
 800744a:	2302      	movs	r3, #2
 800744c:	e04c      	b.n	80074e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f7ff fd90 	bl	8006f7c <ADC_Disable>
 800745c:	4603      	mov	r3, r0
 800745e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d135      	bne.n	80074d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800746a:	4b21      	ldr	r3, [pc, #132]	; (80074f0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800746c:	4013      	ands	r3, r2
 800746e:	f043 0202 	orr.w	r2, r3, #2
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff ff90 	bl	80073a4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007484:	e014      	b.n	80074b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	3301      	adds	r3, #1
 800748a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	4a19      	ldr	r2, [pc, #100]	; (80074f4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d30d      	bcc.n	80074b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007498:	f023 0312 	bic.w	r3, r3, #18
 800749c:	f043 0210 	orr.w	r2, r3, #16
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e01b      	b.n	80074e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff ff93 	bl	80073e0 <LL_ADC_IsCalibrationOnGoing>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e2      	bne.n	8007486 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c4:	f023 0303 	bic.w	r3, r3, #3
 80074c8:	f043 0201 	orr.w	r2, r3, #1
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
 80074d0:	e005      	b.n	80074de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	f043 0210 	orr.w	r2, r3, #16
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	ffffeefd 	.word	0xffffeefd
 80074f4:	25c3f800 	.word	0x25c3f800

080074f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b09f      	sub	sp, #124	; 0x7c
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800750e:	2b01      	cmp	r3, #1
 8007510:	d101      	bne.n	8007516 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007512:	2302      	movs	r3, #2
 8007514:	e0be      	b.n	8007694 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800751e:	2300      	movs	r3, #0
 8007520:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007522:	2300      	movs	r3, #0
 8007524:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a5c      	ldr	r2, [pc, #368]	; (800769c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d102      	bne.n	8007536 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007530:	4b5b      	ldr	r3, [pc, #364]	; (80076a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007532:	60bb      	str	r3, [r7, #8]
 8007534:	e001      	b.n	800753a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007536:	2300      	movs	r3, #0
 8007538:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10b      	bne.n	8007558 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007544:	f043 0220 	orr.w	r2, r3, #32
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e09d      	b.n	8007694 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff ff54 	bl	8007408 <LL_ADC_REG_IsConversionOngoing>
 8007560:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f7ff ff4e 	bl	8007408 <LL_ADC_REG_IsConversionOngoing>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d17f      	bne.n	8007672 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007574:	2b00      	cmp	r3, #0
 8007576:	d17c      	bne.n	8007672 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a47      	ldr	r2, [pc, #284]	; (800769c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d004      	beq.n	800758c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a46      	ldr	r2, [pc, #280]	; (80076a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d101      	bne.n	8007590 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800758c:	4b45      	ldr	r3, [pc, #276]	; (80076a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800758e:	e000      	b.n	8007592 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007590:	4b45      	ldr	r3, [pc, #276]	; (80076a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007592:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d039      	beq.n	8007610 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800759c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	431a      	orrs	r2, r3
 80075aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ac:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a3a      	ldr	r2, [pc, #232]	; (800769c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d004      	beq.n	80075c2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a38      	ldr	r2, [pc, #224]	; (80076a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d10e      	bne.n	80075e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80075c2:	4836      	ldr	r0, [pc, #216]	; (800769c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80075c4:	f7ff feda 	bl	800737c <LL_ADC_IsEnabled>
 80075c8:	4604      	mov	r4, r0
 80075ca:	4835      	ldr	r0, [pc, #212]	; (80076a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80075cc:	f7ff fed6 	bl	800737c <LL_ADC_IsEnabled>
 80075d0:	4603      	mov	r3, r0
 80075d2:	4323      	orrs	r3, r4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bf0c      	ite	eq
 80075d8:	2301      	moveq	r3, #1
 80075da:	2300      	movne	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	e008      	b.n	80075f2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80075e0:	4832      	ldr	r0, [pc, #200]	; (80076ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80075e2:	f7ff fecb 	bl	800737c <LL_ADC_IsEnabled>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bf0c      	ite	eq
 80075ec:	2301      	moveq	r3, #1
 80075ee:	2300      	movne	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d047      	beq.n	8007686 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80075f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	4b2d      	ldr	r3, [pc, #180]	; (80076b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	6811      	ldr	r1, [r2, #0]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	6892      	ldr	r2, [r2, #8]
 8007606:	430a      	orrs	r2, r1
 8007608:	431a      	orrs	r2, r3
 800760a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800760e:	e03a      	b.n	8007686 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1e      	ldr	r2, [pc, #120]	; (800769c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1d      	ldr	r2, [pc, #116]	; (80076a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d10e      	bne.n	800764e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007630:	481a      	ldr	r0, [pc, #104]	; (800769c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007632:	f7ff fea3 	bl	800737c <LL_ADC_IsEnabled>
 8007636:	4604      	mov	r4, r0
 8007638:	4819      	ldr	r0, [pc, #100]	; (80076a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800763a:	f7ff fe9f 	bl	800737c <LL_ADC_IsEnabled>
 800763e:	4603      	mov	r3, r0
 8007640:	4323      	orrs	r3, r4
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	e008      	b.n	8007660 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800764e:	4817      	ldr	r0, [pc, #92]	; (80076ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007650:	f7ff fe94 	bl	800737c <LL_ADC_IsEnabled>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	bf0c      	ite	eq
 800765a:	2301      	moveq	r3, #1
 800765c:	2300      	movne	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d010      	beq.n	8007686 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800766a:	4013      	ands	r3, r2
 800766c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800766e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007670:	e009      	b.n	8007686 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007676:	f043 0220 	orr.w	r2, r3, #32
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007684:	e000      	b.n	8007688 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007686:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007690:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007694:	4618      	mov	r0, r3
 8007696:	377c      	adds	r7, #124	; 0x7c
 8007698:	46bd      	mov	sp, r7
 800769a:	bd90      	pop	{r4, r7, pc}
 800769c:	40022000 	.word	0x40022000
 80076a0:	40022100 	.word	0x40022100
 80076a4:	40022300 	.word	0x40022300
 80076a8:	58026300 	.word	0x58026300
 80076ac:	58026000 	.word	0x58026000
 80076b0:	fffff0e0 	.word	0xfffff0e0

080076b4 <__NVIC_SetPriorityGrouping>:
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <__NVIC_SetPriorityGrouping+0x40>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80076d0:	4013      	ands	r3, r2
 80076d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80076dc:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <__NVIC_SetPriorityGrouping+0x44>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076e2:	4a04      	ldr	r2, [pc, #16]	; (80076f4 <__NVIC_SetPriorityGrouping+0x40>)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	60d3      	str	r3, [r2, #12]
}
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	e000ed00 	.word	0xe000ed00
 80076f8:	05fa0000 	.word	0x05fa0000

080076fc <__NVIC_GetPriorityGrouping>:
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007700:	4b04      	ldr	r3, [pc, #16]	; (8007714 <__NVIC_GetPriorityGrouping+0x18>)
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	0a1b      	lsrs	r3, r3, #8
 8007706:	f003 0307 	and.w	r3, r3, #7
}
 800770a:	4618      	mov	r0, r3
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	e000ed00 	.word	0xe000ed00

08007718 <__NVIC_EnableIRQ>:
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	4603      	mov	r3, r0
 8007720:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007726:	2b00      	cmp	r3, #0
 8007728:	db0b      	blt.n	8007742 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	f003 021f 	and.w	r2, r3, #31
 8007730:	4907      	ldr	r1, [pc, #28]	; (8007750 <__NVIC_EnableIRQ+0x38>)
 8007732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	2001      	movs	r0, #1
 800773a:	fa00 f202 	lsl.w	r2, r0, r2
 800773e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007742:	bf00      	nop
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	e000e100 	.word	0xe000e100

08007754 <__NVIC_SetPriority>:
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	6039      	str	r1, [r7, #0]
 800775e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007764:	2b00      	cmp	r3, #0
 8007766:	db0a      	blt.n	800777e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	b2da      	uxtb	r2, r3
 800776c:	490c      	ldr	r1, [pc, #48]	; (80077a0 <__NVIC_SetPriority+0x4c>)
 800776e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007772:	0112      	lsls	r2, r2, #4
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	440b      	add	r3, r1
 8007778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800777c:	e00a      	b.n	8007794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	4908      	ldr	r1, [pc, #32]	; (80077a4 <__NVIC_SetPriority+0x50>)
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	3b04      	subs	r3, #4
 800778c:	0112      	lsls	r2, r2, #4
 800778e:	b2d2      	uxtb	r2, r2
 8007790:	440b      	add	r3, r1
 8007792:	761a      	strb	r2, [r3, #24]
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	e000e100 	.word	0xe000e100
 80077a4:	e000ed00 	.word	0xe000ed00

080077a8 <NVIC_EncodePriority>:
{
 80077a8:	b480      	push	{r7}
 80077aa:	b089      	sub	sp, #36	; 0x24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f1c3 0307 	rsb	r3, r3, #7
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	bf28      	it	cs
 80077c6:	2304      	movcs	r3, #4
 80077c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	3304      	adds	r3, #4
 80077ce:	2b06      	cmp	r3, #6
 80077d0:	d902      	bls.n	80077d8 <NVIC_EncodePriority+0x30>
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	3b03      	subs	r3, #3
 80077d6:	e000      	b.n	80077da <NVIC_EncodePriority+0x32>
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	fa02 f303 	lsl.w	r3, r2, r3
 80077e6:	43da      	mvns	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	401a      	ands	r2, r3
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	fa01 f303 	lsl.w	r3, r1, r3
 80077fa:	43d9      	mvns	r1, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007800:	4313      	orrs	r3, r2
}
 8007802:	4618      	mov	r0, r3
 8007804:	3724      	adds	r7, #36	; 0x24
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff ff4c 	bl	80076b4 <__NVIC_SetPriorityGrouping>
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	4603      	mov	r3, r0
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007832:	f7ff ff63 	bl	80076fc <__NVIC_GetPriorityGrouping>
 8007836:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	6978      	ldr	r0, [r7, #20]
 800783e:	f7ff ffb3 	bl	80077a8 <NVIC_EncodePriority>
 8007842:	4602      	mov	r2, r0
 8007844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff ff82 	bl	8007754 <__NVIC_SetPriority>
}
 8007850:	bf00      	nop
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff ff56 	bl	8007718 <__NVIC_EnableIRQ>
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e014      	b.n	80078b0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	791b      	ldrb	r3, [r3, #4]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7f9 f9a4 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e046      	b.n	800795a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	795b      	ldrb	r3, [r3, #5]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_DAC_Start+0x20>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e040      	b.n	800795a <HAL_DAC_Start+0xa2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6819      	ldr	r1, [r3, #0]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2201      	movs	r2, #1
 80078f2:	409a      	lsls	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10f      	bne.n	8007922 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800790c:	2b02      	cmp	r3, #2
 800790e:	d11d      	bne.n	800794c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0201 	orr.w	r2, r2, #1
 800791e:	605a      	str	r2, [r3, #4]
 8007920:	e014      	b.n	800794c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	f003 0310 	and.w	r3, r3, #16
 8007932:	2102      	movs	r1, #2
 8007934:	fa01 f303 	lsl.w	r3, r1, r3
 8007938:	429a      	cmp	r2, r3
 800793a:	d107      	bne.n	800794c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0202 	orr.w	r2, r2, #2
 800794a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
	...

08007968 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e0a2      	b.n	8007ac6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	795b      	ldrb	r3, [r3, #5]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_DAC_Start_DMA+0x24>
 8007988:	2302      	movs	r3, #2
 800798a:	e09c      	b.n	8007ac6 <HAL_DAC_Start_DMA+0x15e>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2202      	movs	r2, #2
 8007996:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d129      	bne.n	80079f2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	4a4b      	ldr	r2, [pc, #300]	; (8007ad0 <HAL_DAC_Start_DMA+0x168>)
 80079a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	4a4a      	ldr	r2, [pc, #296]	; (8007ad4 <HAL_DAC_Start_DMA+0x16c>)
 80079ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	4a49      	ldr	r2, [pc, #292]	; (8007ad8 <HAL_DAC_Start_DMA+0x170>)
 80079b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079c4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <HAL_DAC_Start_DMA+0x6c>
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d005      	beq.n	80079de <HAL_DAC_Start_DMA+0x76>
 80079d2:	e009      	b.n	80079e8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	613b      	str	r3, [r7, #16]
        break;
 80079dc:	e033      	b.n	8007a46 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	613b      	str	r3, [r7, #16]
        break;
 80079e6:	e02e      	b.n	8007a46 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3310      	adds	r3, #16
 80079ee:	613b      	str	r3, [r7, #16]
        break;
 80079f0:	e029      	b.n	8007a46 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	4a39      	ldr	r2, [pc, #228]	; (8007adc <HAL_DAC_Start_DMA+0x174>)
 80079f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	4a38      	ldr	r2, [pc, #224]	; (8007ae0 <HAL_DAC_Start_DMA+0x178>)
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	4a37      	ldr	r2, [pc, #220]	; (8007ae4 <HAL_DAC_Start_DMA+0x17c>)
 8007a08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a18:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_DAC_Start_DMA+0xc0>
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d005      	beq.n	8007a32 <HAL_DAC_Start_DMA+0xca>
 8007a26:	e009      	b.n	8007a3c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3314      	adds	r3, #20
 8007a2e:	613b      	str	r3, [r7, #16]
        break;
 8007a30:	e009      	b.n	8007a46 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3318      	adds	r3, #24
 8007a38:	613b      	str	r3, [r7, #16]
        break;
 8007a3a:	e004      	b.n	8007a46 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	331c      	adds	r3, #28
 8007a42:	613b      	str	r3, [r7, #16]
        break;
 8007a44:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d111      	bne.n	8007a70 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6898      	ldr	r0, [r3, #8]
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	f000 fe67 	bl	8008738 <HAL_DMA_Start_IT>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	75fb      	strb	r3, [r7, #23]
 8007a6e:	e010      	b.n	8007a92 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007a7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	68d8      	ldr	r0, [r3, #12]
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	f000 fe55 	bl	8008738 <HAL_DMA_Start_IT>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10c      	bne.n	8007ab8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6819      	ldr	r1, [r3, #0]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f003 0310 	and.w	r3, r3, #16
 8007aaa:	2201      	movs	r2, #1
 8007aac:	409a      	lsls	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e005      	b.n	8007ac4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f043 0204 	orr.w	r2, r3, #4
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	08007f59 	.word	0x08007f59
 8007ad4:	08007f7b 	.word	0x08007f7b
 8007ad8:	08007f97 	.word	0x08007f97
 8007adc:	08008015 	.word	0x08008015
 8007ae0:	08008037 	.word	0x08008037
 8007ae4:	08008053 	.word	0x08008053

08007ae8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e03e      	b.n	8007b7a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6819      	ldr	r1, [r3, #0]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	f003 0310 	and.w	r3, r3, #16
 8007b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	43da      	mvns	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	400a      	ands	r2, r1
 8007b18:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6819      	ldr	r1, [r3, #0]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	2201      	movs	r2, #1
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	43da      	mvns	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	400a      	ands	r2, r1
 8007b34:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10d      	bne.n	8007b58 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 f863 	bl	8008c0c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	e00c      	b.n	8007b72 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 f855 	bl	8008c0c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007b70:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b98:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01d      	beq.n	8007be0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d018      	beq.n	8007be0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2204      	movs	r2, #4
 8007bb2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f043 0201 	orr.w	r2, r3, #1
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007bc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bd8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f86f 	bl	8007cbe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d01d      	beq.n	8007c26 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d018      	beq.n	8007c26 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2204      	movs	r2, #4
 8007bf8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	f043 0202 	orr.w	r2, r3, #2
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007c0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007c1e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f9ed 	bl	8008000 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b087      	sub	sp, #28
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e015      	b.n	8007c76 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d105      	bne.n	8007c62 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	617b      	str	r3, [r7, #20]
 8007c60:	e004      	b.n	8007c6c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4413      	add	r3, r2
 8007c68:	3314      	adds	r3, #20
 8007c6a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08a      	sub	sp, #40	; 0x28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <HAL_DAC_ConfigChannel+0x1e>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e12a      	b.n	8007f4c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	795b      	ldrb	r3, [r3, #5]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d101      	bne.n	8007d02 <HAL_DAC_ConfigChannel+0x2e>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e124      	b.n	8007f4c <HAL_DAC_ConfigChannel+0x278>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d17a      	bne.n	8007e0c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007d16:	f7fe f88b 	bl	8005e30 <HAL_GetTick>
 8007d1a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d13d      	bne.n	8007d9e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007d22:	e018      	b.n	8007d56 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007d24:	f7fe f884 	bl	8005e30 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d911      	bls.n	8007d56 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d38:	4b86      	ldr	r3, [pc, #536]	; (8007f54 <HAL_DAC_ConfigChannel+0x280>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	f043 0208 	orr.w	r2, r3, #8
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2203      	movs	r2, #3
 8007d50:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e0fa      	b.n	8007f4c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d5c:	4b7d      	ldr	r3, [pc, #500]	; (8007f54 <HAL_DAC_ConfigChannel+0x280>)
 8007d5e:	4013      	ands	r3, r2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1df      	bne.n	8007d24 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	6992      	ldr	r2, [r2, #24]
 8007d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8007d6e:	e020      	b.n	8007db2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007d70:	f7fe f85e 	bl	8005e30 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d90f      	bls.n	8007d9e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	da0a      	bge.n	8007d9e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	f043 0208 	orr.w	r2, r3, #8
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2203      	movs	r2, #3
 8007d98:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e0d6      	b.n	8007f4c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dbe3      	blt.n	8007d70 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	6992      	ldr	r2, [r2, #24]
 8007db0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f003 0310 	and.w	r3, r3, #16
 8007dbe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc6:	43db      	mvns	r3, r3
 8007dc8:	ea02 0103 	and.w	r1, r2, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	69da      	ldr	r2, [r3, #28]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	409a      	lsls	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f003 0310 	and.w	r3, r3, #16
 8007dec:	21ff      	movs	r1, #255	; 0xff
 8007dee:	fa01 f303 	lsl.w	r3, r1, r3
 8007df2:	43db      	mvns	r3, r3
 8007df4:	ea02 0103 	and.w	r1, r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	6a1a      	ldr	r2, [r3, #32]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f003 0310 	and.w	r3, r3, #16
 8007e02:	409a      	lsls	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d11d      	bne.n	8007e50 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f003 0310 	and.w	r3, r3, #16
 8007e22:	221f      	movs	r2, #31
 8007e24:	fa02 f303 	lsl.w	r3, r2, r3
 8007e28:	43db      	mvns	r3, r3
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f003 0310 	and.w	r3, r3, #16
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e56:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f003 0310 	and.w	r3, r3, #16
 8007e5e:	2207      	movs	r2, #7
 8007e60:	fa02 f303 	lsl.w	r3, r2, r3
 8007e64:	43db      	mvns	r3, r3
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d102      	bne.n	8007e7a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007e74:	2300      	movs	r3, #0
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
 8007e78:	e00f      	b.n	8007e9a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d102      	bne.n	8007e88 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007e82:	2301      	movs	r3, #1
 8007e84:	627b      	str	r3, [r7, #36]	; 0x24
 8007e86:	e008      	b.n	8007e9a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d102      	bne.n	8007e96 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007e90:	2301      	movs	r3, #1
 8007e92:	627b      	str	r3, [r7, #36]	; 0x24
 8007e94:	e001      	b.n	8007e9a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6819      	ldr	r1, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	43da      	mvns	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	400a      	ands	r2, r1
 8007ee0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f003 0310 	and.w	r3, r3, #16
 8007ef0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	4013      	ands	r3, r2
 8007efe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f003 0310 	and.w	r3, r3, #16
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6819      	ldr	r1, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f003 0310 	and.w	r3, r3, #16
 8007f2c:	22c0      	movs	r2, #192	; 0xc0
 8007f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f32:	43da      	mvns	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	400a      	ands	r2, r1
 8007f3a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3728      	adds	r7, #40	; 0x28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20008000 	.word	0x20008000

08007f58 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f7ff fe8b 	bl	8007c82 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	711a      	strb	r2, [r3, #4]
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f86:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f7ff fe84 	bl	8007c96 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f043 0204 	orr.w	r2, r3, #4
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f7ff fe7a 	bl	8007caa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	711a      	strb	r2, [r3, #4]
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff ffce 	bl	8007fc4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	711a      	strb	r2, [r3, #4]
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff ffc7 	bl	8007fd8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f043 0204 	orr.w	r2, r3, #4
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff ffbd 	bl	8007fec <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	711a      	strb	r2, [r3, #4]
}
 8008078:	bf00      	nop
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008088:	f7fd fed2 	bl	8005e30 <HAL_GetTick>
 800808c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e316      	b.n	80086c6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a66      	ldr	r2, [pc, #408]	; (8008238 <HAL_DMA_Init+0x1b8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d04a      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a65      	ldr	r2, [pc, #404]	; (800823c <HAL_DMA_Init+0x1bc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d045      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a63      	ldr	r2, [pc, #396]	; (8008240 <HAL_DMA_Init+0x1c0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d040      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a62      	ldr	r2, [pc, #392]	; (8008244 <HAL_DMA_Init+0x1c4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d03b      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a60      	ldr	r2, [pc, #384]	; (8008248 <HAL_DMA_Init+0x1c8>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d036      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a5f      	ldr	r2, [pc, #380]	; (800824c <HAL_DMA_Init+0x1cc>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d031      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a5d      	ldr	r2, [pc, #372]	; (8008250 <HAL_DMA_Init+0x1d0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d02c      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a5c      	ldr	r2, [pc, #368]	; (8008254 <HAL_DMA_Init+0x1d4>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d027      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a5a      	ldr	r2, [pc, #360]	; (8008258 <HAL_DMA_Init+0x1d8>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d022      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a59      	ldr	r2, [pc, #356]	; (800825c <HAL_DMA_Init+0x1dc>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d01d      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a57      	ldr	r2, [pc, #348]	; (8008260 <HAL_DMA_Init+0x1e0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d018      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a56      	ldr	r2, [pc, #344]	; (8008264 <HAL_DMA_Init+0x1e4>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d013      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a54      	ldr	r2, [pc, #336]	; (8008268 <HAL_DMA_Init+0x1e8>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00e      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a53      	ldr	r2, [pc, #332]	; (800826c <HAL_DMA_Init+0x1ec>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d009      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a51      	ldr	r2, [pc, #324]	; (8008270 <HAL_DMA_Init+0x1f0>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_DMA_Init+0xb8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a50      	ldr	r2, [pc, #320]	; (8008274 <HAL_DMA_Init+0x1f4>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d101      	bne.n	800813c <HAL_DMA_Init+0xbc>
 8008138:	2301      	movs	r3, #1
 800813a:	e000      	b.n	800813e <HAL_DMA_Init+0xbe>
 800813c:	2300      	movs	r3, #0
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 813b 	beq.w	80083ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a37      	ldr	r2, [pc, #220]	; (8008238 <HAL_DMA_Init+0x1b8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d04a      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a36      	ldr	r2, [pc, #216]	; (800823c <HAL_DMA_Init+0x1bc>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d045      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a34      	ldr	r2, [pc, #208]	; (8008240 <HAL_DMA_Init+0x1c0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d040      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a33      	ldr	r2, [pc, #204]	; (8008244 <HAL_DMA_Init+0x1c4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d03b      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a31      	ldr	r2, [pc, #196]	; (8008248 <HAL_DMA_Init+0x1c8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d036      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a30      	ldr	r2, [pc, #192]	; (800824c <HAL_DMA_Init+0x1cc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d031      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a2e      	ldr	r2, [pc, #184]	; (8008250 <HAL_DMA_Init+0x1d0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d02c      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a2d      	ldr	r2, [pc, #180]	; (8008254 <HAL_DMA_Init+0x1d4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d027      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a2b      	ldr	r2, [pc, #172]	; (8008258 <HAL_DMA_Init+0x1d8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d022      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a2a      	ldr	r2, [pc, #168]	; (800825c <HAL_DMA_Init+0x1dc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d01d      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a28      	ldr	r2, [pc, #160]	; (8008260 <HAL_DMA_Init+0x1e0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d018      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a27      	ldr	r2, [pc, #156]	; (8008264 <HAL_DMA_Init+0x1e4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d013      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a25      	ldr	r2, [pc, #148]	; (8008268 <HAL_DMA_Init+0x1e8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00e      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a24      	ldr	r2, [pc, #144]	; (800826c <HAL_DMA_Init+0x1ec>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d009      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a22      	ldr	r2, [pc, #136]	; (8008270 <HAL_DMA_Init+0x1f0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d004      	beq.n	80081f4 <HAL_DMA_Init+0x174>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a21      	ldr	r2, [pc, #132]	; (8008274 <HAL_DMA_Init+0x1f4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d108      	bne.n	8008206 <HAL_DMA_Init+0x186>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0201 	bic.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e007      	b.n	8008216 <HAL_DMA_Init+0x196>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0201 	bic.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008216:	e02f      	b.n	8008278 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008218:	f7fd fe0a 	bl	8005e30 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b05      	cmp	r3, #5
 8008224:	d928      	bls.n	8008278 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2220      	movs	r2, #32
 800822a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2203      	movs	r2, #3
 8008230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e246      	b.n	80086c6 <HAL_DMA_Init+0x646>
 8008238:	40020010 	.word	0x40020010
 800823c:	40020028 	.word	0x40020028
 8008240:	40020040 	.word	0x40020040
 8008244:	40020058 	.word	0x40020058
 8008248:	40020070 	.word	0x40020070
 800824c:	40020088 	.word	0x40020088
 8008250:	400200a0 	.word	0x400200a0
 8008254:	400200b8 	.word	0x400200b8
 8008258:	40020410 	.word	0x40020410
 800825c:	40020428 	.word	0x40020428
 8008260:	40020440 	.word	0x40020440
 8008264:	40020458 	.word	0x40020458
 8008268:	40020470 	.word	0x40020470
 800826c:	40020488 	.word	0x40020488
 8008270:	400204a0 	.word	0x400204a0
 8008274:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1c8      	bne.n	8008218 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4b83      	ldr	r3, [pc, #524]	; (80084a0 <HAL_DMA_Init+0x420>)
 8008292:	4013      	ands	r3, r2
 8008294:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800829e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b04      	cmp	r3, #4
 80082ca:	d107      	bne.n	80082dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d4:	4313      	orrs	r3, r2
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80082dc:	4b71      	ldr	r3, [pc, #452]	; (80084a4 <HAL_DMA_Init+0x424>)
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	4b71      	ldr	r3, [pc, #452]	; (80084a8 <HAL_DMA_Init+0x428>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082e8:	d328      	bcc.n	800833c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b28      	cmp	r3, #40	; 0x28
 80082f0:	d903      	bls.n	80082fa <HAL_DMA_Init+0x27a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	2b2e      	cmp	r3, #46	; 0x2e
 80082f8:	d917      	bls.n	800832a <HAL_DMA_Init+0x2aa>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008300:	d903      	bls.n	800830a <HAL_DMA_Init+0x28a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	2b42      	cmp	r3, #66	; 0x42
 8008308:	d90f      	bls.n	800832a <HAL_DMA_Init+0x2aa>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b46      	cmp	r3, #70	; 0x46
 8008310:	d903      	bls.n	800831a <HAL_DMA_Init+0x29a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b48      	cmp	r3, #72	; 0x48
 8008318:	d907      	bls.n	800832a <HAL_DMA_Init+0x2aa>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2b4e      	cmp	r3, #78	; 0x4e
 8008320:	d905      	bls.n	800832e <HAL_DMA_Init+0x2ae>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2b52      	cmp	r3, #82	; 0x52
 8008328:	d801      	bhi.n	800832e <HAL_DMA_Init+0x2ae>
 800832a:	2301      	movs	r3, #1
 800832c:	e000      	b.n	8008330 <HAL_DMA_Init+0x2b0>
 800832e:	2300      	movs	r3, #0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800833a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f023 0307 	bic.w	r3, r3, #7
 8008352:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	4313      	orrs	r3, r2
 800835c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	2b04      	cmp	r3, #4
 8008364:	d117      	bne.n	8008396 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4313      	orrs	r3, r2
 800836e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00e      	beq.n	8008396 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f002 fb4d 	bl	800aa18 <DMA_CheckFifoParam>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2240      	movs	r2, #64	; 0x40
 8008388:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e197      	b.n	80086c6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f002 fa88 	bl	800a8b4 <DMA_CalcBaseAndBitshift>
 80083a4:	4603      	mov	r3, r0
 80083a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ac:	f003 031f 	and.w	r3, r3, #31
 80083b0:	223f      	movs	r2, #63	; 0x3f
 80083b2:	409a      	lsls	r2, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	609a      	str	r2, [r3, #8]
 80083b8:	e0cd      	b.n	8008556 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a3b      	ldr	r2, [pc, #236]	; (80084ac <HAL_DMA_Init+0x42c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d022      	beq.n	800840a <HAL_DMA_Init+0x38a>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a39      	ldr	r2, [pc, #228]	; (80084b0 <HAL_DMA_Init+0x430>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d01d      	beq.n	800840a <HAL_DMA_Init+0x38a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a38      	ldr	r2, [pc, #224]	; (80084b4 <HAL_DMA_Init+0x434>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d018      	beq.n	800840a <HAL_DMA_Init+0x38a>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a36      	ldr	r2, [pc, #216]	; (80084b8 <HAL_DMA_Init+0x438>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <HAL_DMA_Init+0x38a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a35      	ldr	r2, [pc, #212]	; (80084bc <HAL_DMA_Init+0x43c>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d00e      	beq.n	800840a <HAL_DMA_Init+0x38a>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a33      	ldr	r2, [pc, #204]	; (80084c0 <HAL_DMA_Init+0x440>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d009      	beq.n	800840a <HAL_DMA_Init+0x38a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a32      	ldr	r2, [pc, #200]	; (80084c4 <HAL_DMA_Init+0x444>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d004      	beq.n	800840a <HAL_DMA_Init+0x38a>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a30      	ldr	r2, [pc, #192]	; (80084c8 <HAL_DMA_Init+0x448>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d101      	bne.n	800840e <HAL_DMA_Init+0x38e>
 800840a:	2301      	movs	r3, #1
 800840c:	e000      	b.n	8008410 <HAL_DMA_Init+0x390>
 800840e:	2300      	movs	r3, #0
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 8097 	beq.w	8008544 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a24      	ldr	r2, [pc, #144]	; (80084ac <HAL_DMA_Init+0x42c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d021      	beq.n	8008464 <HAL_DMA_Init+0x3e4>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a22      	ldr	r2, [pc, #136]	; (80084b0 <HAL_DMA_Init+0x430>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d01c      	beq.n	8008464 <HAL_DMA_Init+0x3e4>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a21      	ldr	r2, [pc, #132]	; (80084b4 <HAL_DMA_Init+0x434>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d017      	beq.n	8008464 <HAL_DMA_Init+0x3e4>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a1f      	ldr	r2, [pc, #124]	; (80084b8 <HAL_DMA_Init+0x438>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d012      	beq.n	8008464 <HAL_DMA_Init+0x3e4>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a1e      	ldr	r2, [pc, #120]	; (80084bc <HAL_DMA_Init+0x43c>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00d      	beq.n	8008464 <HAL_DMA_Init+0x3e4>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a1c      	ldr	r2, [pc, #112]	; (80084c0 <HAL_DMA_Init+0x440>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d008      	beq.n	8008464 <HAL_DMA_Init+0x3e4>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1b      	ldr	r2, [pc, #108]	; (80084c4 <HAL_DMA_Init+0x444>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d003      	beq.n	8008464 <HAL_DMA_Init+0x3e4>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a19      	ldr	r2, [pc, #100]	; (80084c8 <HAL_DMA_Init+0x448>)
 8008462:	4293      	cmp	r3, r2
 8008464:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2202      	movs	r2, #2
 800846a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	4b12      	ldr	r3, [pc, #72]	; (80084cc <HAL_DMA_Init+0x44c>)
 8008482:	4013      	ands	r3, r2
 8008484:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d020      	beq.n	80084d0 <HAL_DMA_Init+0x450>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	2b80      	cmp	r3, #128	; 0x80
 8008494:	d102      	bne.n	800849c <HAL_DMA_Init+0x41c>
 8008496:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800849a:	e01a      	b.n	80084d2 <HAL_DMA_Init+0x452>
 800849c:	2300      	movs	r3, #0
 800849e:	e018      	b.n	80084d2 <HAL_DMA_Init+0x452>
 80084a0:	fe10803f 	.word	0xfe10803f
 80084a4:	5c001000 	.word	0x5c001000
 80084a8:	ffff0000 	.word	0xffff0000
 80084ac:	58025408 	.word	0x58025408
 80084b0:	5802541c 	.word	0x5802541c
 80084b4:	58025430 	.word	0x58025430
 80084b8:	58025444 	.word	0x58025444
 80084bc:	58025458 	.word	0x58025458
 80084c0:	5802546c 	.word	0x5802546c
 80084c4:	58025480 	.word	0x58025480
 80084c8:	58025494 	.word	0x58025494
 80084cc:	fffe000f 	.word	0xfffe000f
 80084d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	68d2      	ldr	r2, [r2, #12]
 80084d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80084d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80084e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80084e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80084f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80084f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008500:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	4313      	orrs	r3, r2
 8008506:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	4b6e      	ldr	r3, [pc, #440]	; (80086d0 <HAL_DMA_Init+0x650>)
 8008518:	4413      	add	r3, r2
 800851a:	4a6e      	ldr	r2, [pc, #440]	; (80086d4 <HAL_DMA_Init+0x654>)
 800851c:	fba2 2303 	umull	r2, r3, r2, r3
 8008520:	091b      	lsrs	r3, r3, #4
 8008522:	009a      	lsls	r2, r3, #2
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f002 f9c3 	bl	800a8b4 <DMA_CalcBaseAndBitshift>
 800852e:	4603      	mov	r3, r0
 8008530:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008536:	f003 031f 	and.w	r3, r3, #31
 800853a:	2201      	movs	r2, #1
 800853c:	409a      	lsls	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	e008      	b.n	8008556 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2240      	movs	r2, #64	; 0x40
 8008548:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2203      	movs	r2, #3
 800854e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e0b7      	b.n	80086c6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a5f      	ldr	r2, [pc, #380]	; (80086d8 <HAL_DMA_Init+0x658>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d072      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a5d      	ldr	r2, [pc, #372]	; (80086dc <HAL_DMA_Init+0x65c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d06d      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a5c      	ldr	r2, [pc, #368]	; (80086e0 <HAL_DMA_Init+0x660>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d068      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a5a      	ldr	r2, [pc, #360]	; (80086e4 <HAL_DMA_Init+0x664>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d063      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a59      	ldr	r2, [pc, #356]	; (80086e8 <HAL_DMA_Init+0x668>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d05e      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a57      	ldr	r2, [pc, #348]	; (80086ec <HAL_DMA_Init+0x66c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d059      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a56      	ldr	r2, [pc, #344]	; (80086f0 <HAL_DMA_Init+0x670>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d054      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a54      	ldr	r2, [pc, #336]	; (80086f4 <HAL_DMA_Init+0x674>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d04f      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a53      	ldr	r2, [pc, #332]	; (80086f8 <HAL_DMA_Init+0x678>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d04a      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a51      	ldr	r2, [pc, #324]	; (80086fc <HAL_DMA_Init+0x67c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d045      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a50      	ldr	r2, [pc, #320]	; (8008700 <HAL_DMA_Init+0x680>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d040      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a4e      	ldr	r2, [pc, #312]	; (8008704 <HAL_DMA_Init+0x684>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d03b      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a4d      	ldr	r2, [pc, #308]	; (8008708 <HAL_DMA_Init+0x688>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d036      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a4b      	ldr	r2, [pc, #300]	; (800870c <HAL_DMA_Init+0x68c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d031      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a4a      	ldr	r2, [pc, #296]	; (8008710 <HAL_DMA_Init+0x690>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d02c      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a48      	ldr	r2, [pc, #288]	; (8008714 <HAL_DMA_Init+0x694>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d027      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a47      	ldr	r2, [pc, #284]	; (8008718 <HAL_DMA_Init+0x698>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d022      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a45      	ldr	r2, [pc, #276]	; (800871c <HAL_DMA_Init+0x69c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d01d      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a44      	ldr	r2, [pc, #272]	; (8008720 <HAL_DMA_Init+0x6a0>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d018      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a42      	ldr	r2, [pc, #264]	; (8008724 <HAL_DMA_Init+0x6a4>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d013      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a41      	ldr	r2, [pc, #260]	; (8008728 <HAL_DMA_Init+0x6a8>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00e      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a3f      	ldr	r2, [pc, #252]	; (800872c <HAL_DMA_Init+0x6ac>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d009      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a3e      	ldr	r2, [pc, #248]	; (8008730 <HAL_DMA_Init+0x6b0>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d004      	beq.n	8008646 <HAL_DMA_Init+0x5c6>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a3c      	ldr	r2, [pc, #240]	; (8008734 <HAL_DMA_Init+0x6b4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d101      	bne.n	800864a <HAL_DMA_Init+0x5ca>
 8008646:	2301      	movs	r3, #1
 8008648:	e000      	b.n	800864c <HAL_DMA_Init+0x5cc>
 800864a:	2300      	movs	r3, #0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d032      	beq.n	80086b6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f002 fa5d 	bl	800ab10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b80      	cmp	r3, #128	; 0x80
 800865c:	d102      	bne.n	8008664 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008678:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d010      	beq.n	80086a4 <HAL_DMA_Init+0x624>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	2b08      	cmp	r3, #8
 8008688:	d80c      	bhi.n	80086a4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f002 fada 	bl	800ac44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80086a0:	605a      	str	r2, [r3, #4]
 80086a2:	e008      	b.n	80086b6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	a7fdabf8 	.word	0xa7fdabf8
 80086d4:	cccccccd 	.word	0xcccccccd
 80086d8:	40020010 	.word	0x40020010
 80086dc:	40020028 	.word	0x40020028
 80086e0:	40020040 	.word	0x40020040
 80086e4:	40020058 	.word	0x40020058
 80086e8:	40020070 	.word	0x40020070
 80086ec:	40020088 	.word	0x40020088
 80086f0:	400200a0 	.word	0x400200a0
 80086f4:	400200b8 	.word	0x400200b8
 80086f8:	40020410 	.word	0x40020410
 80086fc:	40020428 	.word	0x40020428
 8008700:	40020440 	.word	0x40020440
 8008704:	40020458 	.word	0x40020458
 8008708:	40020470 	.word	0x40020470
 800870c:	40020488 	.word	0x40020488
 8008710:	400204a0 	.word	0x400204a0
 8008714:	400204b8 	.word	0x400204b8
 8008718:	58025408 	.word	0x58025408
 800871c:	5802541c 	.word	0x5802541c
 8008720:	58025430 	.word	0x58025430
 8008724:	58025444 	.word	0x58025444
 8008728:	58025458 	.word	0x58025458
 800872c:	5802546c 	.word	0x5802546c
 8008730:	58025480 	.word	0x58025480
 8008734:	58025494 	.word	0x58025494

08008738 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e226      	b.n	8008ba2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800875a:	2b01      	cmp	r3, #1
 800875c:	d101      	bne.n	8008762 <HAL_DMA_Start_IT+0x2a>
 800875e:	2302      	movs	r3, #2
 8008760:	e21f      	b.n	8008ba2 <HAL_DMA_Start_IT+0x46a>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b01      	cmp	r3, #1
 8008774:	f040 820a 	bne.w	8008b8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2202      	movs	r2, #2
 800877c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a68      	ldr	r2, [pc, #416]	; (800892c <HAL_DMA_Start_IT+0x1f4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d04a      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a66      	ldr	r2, [pc, #408]	; (8008930 <HAL_DMA_Start_IT+0x1f8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d045      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a65      	ldr	r2, [pc, #404]	; (8008934 <HAL_DMA_Start_IT+0x1fc>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d040      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a63      	ldr	r2, [pc, #396]	; (8008938 <HAL_DMA_Start_IT+0x200>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d03b      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a62      	ldr	r2, [pc, #392]	; (800893c <HAL_DMA_Start_IT+0x204>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d036      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a60      	ldr	r2, [pc, #384]	; (8008940 <HAL_DMA_Start_IT+0x208>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d031      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a5f      	ldr	r2, [pc, #380]	; (8008944 <HAL_DMA_Start_IT+0x20c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d02c      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a5d      	ldr	r2, [pc, #372]	; (8008948 <HAL_DMA_Start_IT+0x210>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d027      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a5c      	ldr	r2, [pc, #368]	; (800894c <HAL_DMA_Start_IT+0x214>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d022      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a5a      	ldr	r2, [pc, #360]	; (8008950 <HAL_DMA_Start_IT+0x218>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01d      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a59      	ldr	r2, [pc, #356]	; (8008954 <HAL_DMA_Start_IT+0x21c>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d018      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a57      	ldr	r2, [pc, #348]	; (8008958 <HAL_DMA_Start_IT+0x220>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d013      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a56      	ldr	r2, [pc, #344]	; (800895c <HAL_DMA_Start_IT+0x224>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d00e      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a54      	ldr	r2, [pc, #336]	; (8008960 <HAL_DMA_Start_IT+0x228>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d009      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a53      	ldr	r2, [pc, #332]	; (8008964 <HAL_DMA_Start_IT+0x22c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d004      	beq.n	8008826 <HAL_DMA_Start_IT+0xee>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a51      	ldr	r2, [pc, #324]	; (8008968 <HAL_DMA_Start_IT+0x230>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d108      	bne.n	8008838 <HAL_DMA_Start_IT+0x100>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0201 	bic.w	r2, r2, #1
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	e007      	b.n	8008848 <HAL_DMA_Start_IT+0x110>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0201 	bic.w	r2, r2, #1
 8008846:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	68b9      	ldr	r1, [r7, #8]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f001 fe84 	bl	800a55c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a34      	ldr	r2, [pc, #208]	; (800892c <HAL_DMA_Start_IT+0x1f4>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d04a      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a33      	ldr	r2, [pc, #204]	; (8008930 <HAL_DMA_Start_IT+0x1f8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d045      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a31      	ldr	r2, [pc, #196]	; (8008934 <HAL_DMA_Start_IT+0x1fc>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d040      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a30      	ldr	r2, [pc, #192]	; (8008938 <HAL_DMA_Start_IT+0x200>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d03b      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a2e      	ldr	r2, [pc, #184]	; (800893c <HAL_DMA_Start_IT+0x204>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d036      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a2d      	ldr	r2, [pc, #180]	; (8008940 <HAL_DMA_Start_IT+0x208>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d031      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a2b      	ldr	r2, [pc, #172]	; (8008944 <HAL_DMA_Start_IT+0x20c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d02c      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a2a      	ldr	r2, [pc, #168]	; (8008948 <HAL_DMA_Start_IT+0x210>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d027      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a28      	ldr	r2, [pc, #160]	; (800894c <HAL_DMA_Start_IT+0x214>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d022      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a27      	ldr	r2, [pc, #156]	; (8008950 <HAL_DMA_Start_IT+0x218>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d01d      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a25      	ldr	r2, [pc, #148]	; (8008954 <HAL_DMA_Start_IT+0x21c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d018      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a24      	ldr	r2, [pc, #144]	; (8008958 <HAL_DMA_Start_IT+0x220>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d013      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a22      	ldr	r2, [pc, #136]	; (800895c <HAL_DMA_Start_IT+0x224>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00e      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a21      	ldr	r2, [pc, #132]	; (8008960 <HAL_DMA_Start_IT+0x228>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d009      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1f      	ldr	r2, [pc, #124]	; (8008964 <HAL_DMA_Start_IT+0x22c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d004      	beq.n	80088f4 <HAL_DMA_Start_IT+0x1bc>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a1e      	ldr	r2, [pc, #120]	; (8008968 <HAL_DMA_Start_IT+0x230>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d101      	bne.n	80088f8 <HAL_DMA_Start_IT+0x1c0>
 80088f4:	2301      	movs	r3, #1
 80088f6:	e000      	b.n	80088fa <HAL_DMA_Start_IT+0x1c2>
 80088f8:	2300      	movs	r3, #0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d036      	beq.n	800896c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f023 021e 	bic.w	r2, r3, #30
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f042 0216 	orr.w	r2, r2, #22
 8008910:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d03e      	beq.n	8008998 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f042 0208 	orr.w	r2, r2, #8
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	e035      	b.n	8008998 <HAL_DMA_Start_IT+0x260>
 800892c:	40020010 	.word	0x40020010
 8008930:	40020028 	.word	0x40020028
 8008934:	40020040 	.word	0x40020040
 8008938:	40020058 	.word	0x40020058
 800893c:	40020070 	.word	0x40020070
 8008940:	40020088 	.word	0x40020088
 8008944:	400200a0 	.word	0x400200a0
 8008948:	400200b8 	.word	0x400200b8
 800894c:	40020410 	.word	0x40020410
 8008950:	40020428 	.word	0x40020428
 8008954:	40020440 	.word	0x40020440
 8008958:	40020458 	.word	0x40020458
 800895c:	40020470 	.word	0x40020470
 8008960:	40020488 	.word	0x40020488
 8008964:	400204a0 	.word	0x400204a0
 8008968:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f023 020e 	bic.w	r2, r3, #14
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 020a 	orr.w	r2, r2, #10
 800897e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d007      	beq.n	8008998 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0204 	orr.w	r2, r2, #4
 8008996:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a83      	ldr	r2, [pc, #524]	; (8008bac <HAL_DMA_Start_IT+0x474>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d072      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a82      	ldr	r2, [pc, #520]	; (8008bb0 <HAL_DMA_Start_IT+0x478>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d06d      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a80      	ldr	r2, [pc, #512]	; (8008bb4 <HAL_DMA_Start_IT+0x47c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d068      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a7f      	ldr	r2, [pc, #508]	; (8008bb8 <HAL_DMA_Start_IT+0x480>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d063      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a7d      	ldr	r2, [pc, #500]	; (8008bbc <HAL_DMA_Start_IT+0x484>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d05e      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a7c      	ldr	r2, [pc, #496]	; (8008bc0 <HAL_DMA_Start_IT+0x488>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d059      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a7a      	ldr	r2, [pc, #488]	; (8008bc4 <HAL_DMA_Start_IT+0x48c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d054      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a79      	ldr	r2, [pc, #484]	; (8008bc8 <HAL_DMA_Start_IT+0x490>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d04f      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a77      	ldr	r2, [pc, #476]	; (8008bcc <HAL_DMA_Start_IT+0x494>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d04a      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a76      	ldr	r2, [pc, #472]	; (8008bd0 <HAL_DMA_Start_IT+0x498>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d045      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a74      	ldr	r2, [pc, #464]	; (8008bd4 <HAL_DMA_Start_IT+0x49c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d040      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a73      	ldr	r2, [pc, #460]	; (8008bd8 <HAL_DMA_Start_IT+0x4a0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d03b      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a71      	ldr	r2, [pc, #452]	; (8008bdc <HAL_DMA_Start_IT+0x4a4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d036      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a70      	ldr	r2, [pc, #448]	; (8008be0 <HAL_DMA_Start_IT+0x4a8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d031      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a6e      	ldr	r2, [pc, #440]	; (8008be4 <HAL_DMA_Start_IT+0x4ac>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d02c      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a6d      	ldr	r2, [pc, #436]	; (8008be8 <HAL_DMA_Start_IT+0x4b0>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d027      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a6b      	ldr	r2, [pc, #428]	; (8008bec <HAL_DMA_Start_IT+0x4b4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d022      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a6a      	ldr	r2, [pc, #424]	; (8008bf0 <HAL_DMA_Start_IT+0x4b8>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d01d      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a68      	ldr	r2, [pc, #416]	; (8008bf4 <HAL_DMA_Start_IT+0x4bc>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d018      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a67      	ldr	r2, [pc, #412]	; (8008bf8 <HAL_DMA_Start_IT+0x4c0>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d013      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a65      	ldr	r2, [pc, #404]	; (8008bfc <HAL_DMA_Start_IT+0x4c4>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00e      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a64      	ldr	r2, [pc, #400]	; (8008c00 <HAL_DMA_Start_IT+0x4c8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d009      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a62      	ldr	r2, [pc, #392]	; (8008c04 <HAL_DMA_Start_IT+0x4cc>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d004      	beq.n	8008a88 <HAL_DMA_Start_IT+0x350>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a61      	ldr	r2, [pc, #388]	; (8008c08 <HAL_DMA_Start_IT+0x4d0>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d101      	bne.n	8008a8c <HAL_DMA_Start_IT+0x354>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <HAL_DMA_Start_IT+0x356>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01a      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d007      	beq.n	8008ab0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d007      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ac6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a37      	ldr	r2, [pc, #220]	; (8008bac <HAL_DMA_Start_IT+0x474>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d04a      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a36      	ldr	r2, [pc, #216]	; (8008bb0 <HAL_DMA_Start_IT+0x478>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d045      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a34      	ldr	r2, [pc, #208]	; (8008bb4 <HAL_DMA_Start_IT+0x47c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d040      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a33      	ldr	r2, [pc, #204]	; (8008bb8 <HAL_DMA_Start_IT+0x480>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d03b      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a31      	ldr	r2, [pc, #196]	; (8008bbc <HAL_DMA_Start_IT+0x484>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d036      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a30      	ldr	r2, [pc, #192]	; (8008bc0 <HAL_DMA_Start_IT+0x488>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d031      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a2e      	ldr	r2, [pc, #184]	; (8008bc4 <HAL_DMA_Start_IT+0x48c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d02c      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a2d      	ldr	r2, [pc, #180]	; (8008bc8 <HAL_DMA_Start_IT+0x490>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d027      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a2b      	ldr	r2, [pc, #172]	; (8008bcc <HAL_DMA_Start_IT+0x494>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d022      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a2a      	ldr	r2, [pc, #168]	; (8008bd0 <HAL_DMA_Start_IT+0x498>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d01d      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a28      	ldr	r2, [pc, #160]	; (8008bd4 <HAL_DMA_Start_IT+0x49c>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d018      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a27      	ldr	r2, [pc, #156]	; (8008bd8 <HAL_DMA_Start_IT+0x4a0>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d013      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a25      	ldr	r2, [pc, #148]	; (8008bdc <HAL_DMA_Start_IT+0x4a4>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d00e      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a24      	ldr	r2, [pc, #144]	; (8008be0 <HAL_DMA_Start_IT+0x4a8>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d009      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a22      	ldr	r2, [pc, #136]	; (8008be4 <HAL_DMA_Start_IT+0x4ac>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d004      	beq.n	8008b68 <HAL_DMA_Start_IT+0x430>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a21      	ldr	r2, [pc, #132]	; (8008be8 <HAL_DMA_Start_IT+0x4b0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d108      	bne.n	8008b7a <HAL_DMA_Start_IT+0x442>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e012      	b.n	8008ba0 <HAL_DMA_Start_IT+0x468>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f042 0201 	orr.w	r2, r2, #1
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	e009      	b.n	8008ba0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	40020010 	.word	0x40020010
 8008bb0:	40020028 	.word	0x40020028
 8008bb4:	40020040 	.word	0x40020040
 8008bb8:	40020058 	.word	0x40020058
 8008bbc:	40020070 	.word	0x40020070
 8008bc0:	40020088 	.word	0x40020088
 8008bc4:	400200a0 	.word	0x400200a0
 8008bc8:	400200b8 	.word	0x400200b8
 8008bcc:	40020410 	.word	0x40020410
 8008bd0:	40020428 	.word	0x40020428
 8008bd4:	40020440 	.word	0x40020440
 8008bd8:	40020458 	.word	0x40020458
 8008bdc:	40020470 	.word	0x40020470
 8008be0:	40020488 	.word	0x40020488
 8008be4:	400204a0 	.word	0x400204a0
 8008be8:	400204b8 	.word	0x400204b8
 8008bec:	58025408 	.word	0x58025408
 8008bf0:	5802541c 	.word	0x5802541c
 8008bf4:	58025430 	.word	0x58025430
 8008bf8:	58025444 	.word	0x58025444
 8008bfc:	58025458 	.word	0x58025458
 8008c00:	5802546c 	.word	0x5802546c
 8008c04:	58025480 	.word	0x58025480
 8008c08:	58025494 	.word	0x58025494

08008c0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008c14:	f7fd f90c 	bl	8005e30 <HAL_GetTick>
 8008c18:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e2dc      	b.n	80091de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d008      	beq.n	8008c42 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2280      	movs	r2, #128	; 0x80
 8008c34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e2cd      	b.n	80091de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a76      	ldr	r2, [pc, #472]	; (8008e20 <HAL_DMA_Abort+0x214>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d04a      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a74      	ldr	r2, [pc, #464]	; (8008e24 <HAL_DMA_Abort+0x218>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d045      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a73      	ldr	r2, [pc, #460]	; (8008e28 <HAL_DMA_Abort+0x21c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d040      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a71      	ldr	r2, [pc, #452]	; (8008e2c <HAL_DMA_Abort+0x220>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d03b      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a70      	ldr	r2, [pc, #448]	; (8008e30 <HAL_DMA_Abort+0x224>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d036      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a6e      	ldr	r2, [pc, #440]	; (8008e34 <HAL_DMA_Abort+0x228>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d031      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a6d      	ldr	r2, [pc, #436]	; (8008e38 <HAL_DMA_Abort+0x22c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d02c      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a6b      	ldr	r2, [pc, #428]	; (8008e3c <HAL_DMA_Abort+0x230>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d027      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a6a      	ldr	r2, [pc, #424]	; (8008e40 <HAL_DMA_Abort+0x234>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d022      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a68      	ldr	r2, [pc, #416]	; (8008e44 <HAL_DMA_Abort+0x238>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d01d      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a67      	ldr	r2, [pc, #412]	; (8008e48 <HAL_DMA_Abort+0x23c>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d018      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a65      	ldr	r2, [pc, #404]	; (8008e4c <HAL_DMA_Abort+0x240>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d013      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a64      	ldr	r2, [pc, #400]	; (8008e50 <HAL_DMA_Abort+0x244>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d00e      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a62      	ldr	r2, [pc, #392]	; (8008e54 <HAL_DMA_Abort+0x248>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d009      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a61      	ldr	r2, [pc, #388]	; (8008e58 <HAL_DMA_Abort+0x24c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d004      	beq.n	8008ce2 <HAL_DMA_Abort+0xd6>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a5f      	ldr	r2, [pc, #380]	; (8008e5c <HAL_DMA_Abort+0x250>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d101      	bne.n	8008ce6 <HAL_DMA_Abort+0xda>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e000      	b.n	8008ce8 <HAL_DMA_Abort+0xdc>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d013      	beq.n	8008d14 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 021e 	bic.w	r2, r2, #30
 8008cfa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	695a      	ldr	r2, [r3, #20]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d0a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	617b      	str	r3, [r7, #20]
 8008d12:	e00a      	b.n	8008d2a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f022 020e 	bic.w	r2, r2, #14
 8008d22:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a3c      	ldr	r2, [pc, #240]	; (8008e20 <HAL_DMA_Abort+0x214>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d072      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a3a      	ldr	r2, [pc, #232]	; (8008e24 <HAL_DMA_Abort+0x218>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d06d      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a39      	ldr	r2, [pc, #228]	; (8008e28 <HAL_DMA_Abort+0x21c>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d068      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a37      	ldr	r2, [pc, #220]	; (8008e2c <HAL_DMA_Abort+0x220>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d063      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a36      	ldr	r2, [pc, #216]	; (8008e30 <HAL_DMA_Abort+0x224>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d05e      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a34      	ldr	r2, [pc, #208]	; (8008e34 <HAL_DMA_Abort+0x228>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d059      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a33      	ldr	r2, [pc, #204]	; (8008e38 <HAL_DMA_Abort+0x22c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d054      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a31      	ldr	r2, [pc, #196]	; (8008e3c <HAL_DMA_Abort+0x230>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d04f      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a30      	ldr	r2, [pc, #192]	; (8008e40 <HAL_DMA_Abort+0x234>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d04a      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a2e      	ldr	r2, [pc, #184]	; (8008e44 <HAL_DMA_Abort+0x238>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d045      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a2d      	ldr	r2, [pc, #180]	; (8008e48 <HAL_DMA_Abort+0x23c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d040      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a2b      	ldr	r2, [pc, #172]	; (8008e4c <HAL_DMA_Abort+0x240>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d03b      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a2a      	ldr	r2, [pc, #168]	; (8008e50 <HAL_DMA_Abort+0x244>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d036      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a28      	ldr	r2, [pc, #160]	; (8008e54 <HAL_DMA_Abort+0x248>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d031      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a27      	ldr	r2, [pc, #156]	; (8008e58 <HAL_DMA_Abort+0x24c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d02c      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a25      	ldr	r2, [pc, #148]	; (8008e5c <HAL_DMA_Abort+0x250>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d027      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a24      	ldr	r2, [pc, #144]	; (8008e60 <HAL_DMA_Abort+0x254>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d022      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a22      	ldr	r2, [pc, #136]	; (8008e64 <HAL_DMA_Abort+0x258>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d01d      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a21      	ldr	r2, [pc, #132]	; (8008e68 <HAL_DMA_Abort+0x25c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d018      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a1f      	ldr	r2, [pc, #124]	; (8008e6c <HAL_DMA_Abort+0x260>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d013      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a1e      	ldr	r2, [pc, #120]	; (8008e70 <HAL_DMA_Abort+0x264>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00e      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a1c      	ldr	r2, [pc, #112]	; (8008e74 <HAL_DMA_Abort+0x268>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d009      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a1b      	ldr	r2, [pc, #108]	; (8008e78 <HAL_DMA_Abort+0x26c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d004      	beq.n	8008e1a <HAL_DMA_Abort+0x20e>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a19      	ldr	r2, [pc, #100]	; (8008e7c <HAL_DMA_Abort+0x270>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d132      	bne.n	8008e80 <HAL_DMA_Abort+0x274>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e031      	b.n	8008e82 <HAL_DMA_Abort+0x276>
 8008e1e:	bf00      	nop
 8008e20:	40020010 	.word	0x40020010
 8008e24:	40020028 	.word	0x40020028
 8008e28:	40020040 	.word	0x40020040
 8008e2c:	40020058 	.word	0x40020058
 8008e30:	40020070 	.word	0x40020070
 8008e34:	40020088 	.word	0x40020088
 8008e38:	400200a0 	.word	0x400200a0
 8008e3c:	400200b8 	.word	0x400200b8
 8008e40:	40020410 	.word	0x40020410
 8008e44:	40020428 	.word	0x40020428
 8008e48:	40020440 	.word	0x40020440
 8008e4c:	40020458 	.word	0x40020458
 8008e50:	40020470 	.word	0x40020470
 8008e54:	40020488 	.word	0x40020488
 8008e58:	400204a0 	.word	0x400204a0
 8008e5c:	400204b8 	.word	0x400204b8
 8008e60:	58025408 	.word	0x58025408
 8008e64:	5802541c 	.word	0x5802541c
 8008e68:	58025430 	.word	0x58025430
 8008e6c:	58025444 	.word	0x58025444
 8008e70:	58025458 	.word	0x58025458
 8008e74:	5802546c 	.word	0x5802546c
 8008e78:	58025480 	.word	0x58025480
 8008e7c:	58025494 	.word	0x58025494
 8008e80:	2300      	movs	r3, #0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d007      	beq.n	8008e96 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e94:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a6d      	ldr	r2, [pc, #436]	; (8009050 <HAL_DMA_Abort+0x444>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d04a      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a6b      	ldr	r2, [pc, #428]	; (8009054 <HAL_DMA_Abort+0x448>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d045      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a6a      	ldr	r2, [pc, #424]	; (8009058 <HAL_DMA_Abort+0x44c>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d040      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a68      	ldr	r2, [pc, #416]	; (800905c <HAL_DMA_Abort+0x450>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d03b      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a67      	ldr	r2, [pc, #412]	; (8009060 <HAL_DMA_Abort+0x454>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d036      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a65      	ldr	r2, [pc, #404]	; (8009064 <HAL_DMA_Abort+0x458>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d031      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a64      	ldr	r2, [pc, #400]	; (8009068 <HAL_DMA_Abort+0x45c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d02c      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a62      	ldr	r2, [pc, #392]	; (800906c <HAL_DMA_Abort+0x460>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d027      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a61      	ldr	r2, [pc, #388]	; (8009070 <HAL_DMA_Abort+0x464>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d022      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a5f      	ldr	r2, [pc, #380]	; (8009074 <HAL_DMA_Abort+0x468>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d01d      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a5e      	ldr	r2, [pc, #376]	; (8009078 <HAL_DMA_Abort+0x46c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d018      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a5c      	ldr	r2, [pc, #368]	; (800907c <HAL_DMA_Abort+0x470>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d013      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a5b      	ldr	r2, [pc, #364]	; (8009080 <HAL_DMA_Abort+0x474>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d00e      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a59      	ldr	r2, [pc, #356]	; (8009084 <HAL_DMA_Abort+0x478>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d009      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a58      	ldr	r2, [pc, #352]	; (8009088 <HAL_DMA_Abort+0x47c>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d004      	beq.n	8008f36 <HAL_DMA_Abort+0x32a>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a56      	ldr	r2, [pc, #344]	; (800908c <HAL_DMA_Abort+0x480>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d108      	bne.n	8008f48 <HAL_DMA_Abort+0x33c>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 0201 	bic.w	r2, r2, #1
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	e007      	b.n	8008f58 <HAL_DMA_Abort+0x34c>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 0201 	bic.w	r2, r2, #1
 8008f56:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008f58:	e013      	b.n	8008f82 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008f5a:	f7fc ff69 	bl	8005e30 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	2b05      	cmp	r3, #5
 8008f66:	d90c      	bls.n	8008f82 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2203      	movs	r2, #3
 8008f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e12d      	b.n	80091de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0301 	and.w	r3, r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e5      	bne.n	8008f5a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a2f      	ldr	r2, [pc, #188]	; (8009050 <HAL_DMA_Abort+0x444>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d04a      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a2d      	ldr	r2, [pc, #180]	; (8009054 <HAL_DMA_Abort+0x448>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d045      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a2c      	ldr	r2, [pc, #176]	; (8009058 <HAL_DMA_Abort+0x44c>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d040      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a2a      	ldr	r2, [pc, #168]	; (800905c <HAL_DMA_Abort+0x450>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d03b      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a29      	ldr	r2, [pc, #164]	; (8009060 <HAL_DMA_Abort+0x454>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d036      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a27      	ldr	r2, [pc, #156]	; (8009064 <HAL_DMA_Abort+0x458>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d031      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a26      	ldr	r2, [pc, #152]	; (8009068 <HAL_DMA_Abort+0x45c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d02c      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a24      	ldr	r2, [pc, #144]	; (800906c <HAL_DMA_Abort+0x460>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d027      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a23      	ldr	r2, [pc, #140]	; (8009070 <HAL_DMA_Abort+0x464>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d022      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a21      	ldr	r2, [pc, #132]	; (8009074 <HAL_DMA_Abort+0x468>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d01d      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a20      	ldr	r2, [pc, #128]	; (8009078 <HAL_DMA_Abort+0x46c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d018      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a1e      	ldr	r2, [pc, #120]	; (800907c <HAL_DMA_Abort+0x470>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d013      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a1d      	ldr	r2, [pc, #116]	; (8009080 <HAL_DMA_Abort+0x474>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d00e      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a1b      	ldr	r2, [pc, #108]	; (8009084 <HAL_DMA_Abort+0x478>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d009      	beq.n	800902e <HAL_DMA_Abort+0x422>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a1a      	ldr	r2, [pc, #104]	; (8009088 <HAL_DMA_Abort+0x47c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d004      	beq.n	800902e <HAL_DMA_Abort+0x422>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a18      	ldr	r2, [pc, #96]	; (800908c <HAL_DMA_Abort+0x480>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d101      	bne.n	8009032 <HAL_DMA_Abort+0x426>
 800902e:	2301      	movs	r3, #1
 8009030:	e000      	b.n	8009034 <HAL_DMA_Abort+0x428>
 8009032:	2300      	movs	r3, #0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d02b      	beq.n	8009090 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009042:	f003 031f 	and.w	r3, r3, #31
 8009046:	223f      	movs	r2, #63	; 0x3f
 8009048:	409a      	lsls	r2, r3
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	609a      	str	r2, [r3, #8]
 800904e:	e02a      	b.n	80090a6 <HAL_DMA_Abort+0x49a>
 8009050:	40020010 	.word	0x40020010
 8009054:	40020028 	.word	0x40020028
 8009058:	40020040 	.word	0x40020040
 800905c:	40020058 	.word	0x40020058
 8009060:	40020070 	.word	0x40020070
 8009064:	40020088 	.word	0x40020088
 8009068:	400200a0 	.word	0x400200a0
 800906c:	400200b8 	.word	0x400200b8
 8009070:	40020410 	.word	0x40020410
 8009074:	40020428 	.word	0x40020428
 8009078:	40020440 	.word	0x40020440
 800907c:	40020458 	.word	0x40020458
 8009080:	40020470 	.word	0x40020470
 8009084:	40020488 	.word	0x40020488
 8009088:	400204a0 	.word	0x400204a0
 800908c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009094:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800909a:	f003 031f 	and.w	r3, r3, #31
 800909e:	2201      	movs	r2, #1
 80090a0:	409a      	lsls	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a4f      	ldr	r2, [pc, #316]	; (80091e8 <HAL_DMA_Abort+0x5dc>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d072      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a4d      	ldr	r2, [pc, #308]	; (80091ec <HAL_DMA_Abort+0x5e0>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d06d      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a4c      	ldr	r2, [pc, #304]	; (80091f0 <HAL_DMA_Abort+0x5e4>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d068      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a4a      	ldr	r2, [pc, #296]	; (80091f4 <HAL_DMA_Abort+0x5e8>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d063      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a49      	ldr	r2, [pc, #292]	; (80091f8 <HAL_DMA_Abort+0x5ec>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d05e      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a47      	ldr	r2, [pc, #284]	; (80091fc <HAL_DMA_Abort+0x5f0>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d059      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a46      	ldr	r2, [pc, #280]	; (8009200 <HAL_DMA_Abort+0x5f4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d054      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a44      	ldr	r2, [pc, #272]	; (8009204 <HAL_DMA_Abort+0x5f8>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d04f      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a43      	ldr	r2, [pc, #268]	; (8009208 <HAL_DMA_Abort+0x5fc>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d04a      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a41      	ldr	r2, [pc, #260]	; (800920c <HAL_DMA_Abort+0x600>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d045      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a40      	ldr	r2, [pc, #256]	; (8009210 <HAL_DMA_Abort+0x604>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d040      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a3e      	ldr	r2, [pc, #248]	; (8009214 <HAL_DMA_Abort+0x608>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d03b      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a3d      	ldr	r2, [pc, #244]	; (8009218 <HAL_DMA_Abort+0x60c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d036      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a3b      	ldr	r2, [pc, #236]	; (800921c <HAL_DMA_Abort+0x610>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d031      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a3a      	ldr	r2, [pc, #232]	; (8009220 <HAL_DMA_Abort+0x614>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d02c      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a38      	ldr	r2, [pc, #224]	; (8009224 <HAL_DMA_Abort+0x618>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d027      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a37      	ldr	r2, [pc, #220]	; (8009228 <HAL_DMA_Abort+0x61c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d022      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a35      	ldr	r2, [pc, #212]	; (800922c <HAL_DMA_Abort+0x620>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d01d      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a34      	ldr	r2, [pc, #208]	; (8009230 <HAL_DMA_Abort+0x624>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d018      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a32      	ldr	r2, [pc, #200]	; (8009234 <HAL_DMA_Abort+0x628>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d013      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a31      	ldr	r2, [pc, #196]	; (8009238 <HAL_DMA_Abort+0x62c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d00e      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a2f      	ldr	r2, [pc, #188]	; (800923c <HAL_DMA_Abort+0x630>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d009      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a2e      	ldr	r2, [pc, #184]	; (8009240 <HAL_DMA_Abort+0x634>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d004      	beq.n	8009196 <HAL_DMA_Abort+0x58a>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a2c      	ldr	r2, [pc, #176]	; (8009244 <HAL_DMA_Abort+0x638>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d101      	bne.n	800919a <HAL_DMA_Abort+0x58e>
 8009196:	2301      	movs	r3, #1
 8009198:	e000      	b.n	800919c <HAL_DMA_Abort+0x590>
 800919a:	2300      	movs	r3, #0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d015      	beq.n	80091cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80091a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00c      	beq.n	80091cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80091ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	40020010 	.word	0x40020010
 80091ec:	40020028 	.word	0x40020028
 80091f0:	40020040 	.word	0x40020040
 80091f4:	40020058 	.word	0x40020058
 80091f8:	40020070 	.word	0x40020070
 80091fc:	40020088 	.word	0x40020088
 8009200:	400200a0 	.word	0x400200a0
 8009204:	400200b8 	.word	0x400200b8
 8009208:	40020410 	.word	0x40020410
 800920c:	40020428 	.word	0x40020428
 8009210:	40020440 	.word	0x40020440
 8009214:	40020458 	.word	0x40020458
 8009218:	40020470 	.word	0x40020470
 800921c:	40020488 	.word	0x40020488
 8009220:	400204a0 	.word	0x400204a0
 8009224:	400204b8 	.word	0x400204b8
 8009228:	58025408 	.word	0x58025408
 800922c:	5802541c 	.word	0x5802541c
 8009230:	58025430 	.word	0x58025430
 8009234:	58025444 	.word	0x58025444
 8009238:	58025458 	.word	0x58025458
 800923c:	5802546c 	.word	0x5802546c
 8009240:	58025480 	.word	0x58025480
 8009244:	58025494 	.word	0x58025494

08009248 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e237      	b.n	80096ca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b02      	cmp	r3, #2
 8009264:	d004      	beq.n	8009270 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2280      	movs	r2, #128	; 0x80
 800926a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e22c      	b.n	80096ca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a5c      	ldr	r2, [pc, #368]	; (80093e8 <HAL_DMA_Abort_IT+0x1a0>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d04a      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a5b      	ldr	r2, [pc, #364]	; (80093ec <HAL_DMA_Abort_IT+0x1a4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d045      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a59      	ldr	r2, [pc, #356]	; (80093f0 <HAL_DMA_Abort_IT+0x1a8>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d040      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a58      	ldr	r2, [pc, #352]	; (80093f4 <HAL_DMA_Abort_IT+0x1ac>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d03b      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a56      	ldr	r2, [pc, #344]	; (80093f8 <HAL_DMA_Abort_IT+0x1b0>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d036      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a55      	ldr	r2, [pc, #340]	; (80093fc <HAL_DMA_Abort_IT+0x1b4>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d031      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a53      	ldr	r2, [pc, #332]	; (8009400 <HAL_DMA_Abort_IT+0x1b8>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d02c      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a52      	ldr	r2, [pc, #328]	; (8009404 <HAL_DMA_Abort_IT+0x1bc>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d027      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a50      	ldr	r2, [pc, #320]	; (8009408 <HAL_DMA_Abort_IT+0x1c0>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d022      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a4f      	ldr	r2, [pc, #316]	; (800940c <HAL_DMA_Abort_IT+0x1c4>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d01d      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a4d      	ldr	r2, [pc, #308]	; (8009410 <HAL_DMA_Abort_IT+0x1c8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d018      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a4c      	ldr	r2, [pc, #304]	; (8009414 <HAL_DMA_Abort_IT+0x1cc>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d013      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a4a      	ldr	r2, [pc, #296]	; (8009418 <HAL_DMA_Abort_IT+0x1d0>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d00e      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a49      	ldr	r2, [pc, #292]	; (800941c <HAL_DMA_Abort_IT+0x1d4>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d009      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a47      	ldr	r2, [pc, #284]	; (8009420 <HAL_DMA_Abort_IT+0x1d8>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d004      	beq.n	8009310 <HAL_DMA_Abort_IT+0xc8>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a46      	ldr	r2, [pc, #280]	; (8009424 <HAL_DMA_Abort_IT+0x1dc>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d101      	bne.n	8009314 <HAL_DMA_Abort_IT+0xcc>
 8009310:	2301      	movs	r3, #1
 8009312:	e000      	b.n	8009316 <HAL_DMA_Abort_IT+0xce>
 8009314:	2300      	movs	r3, #0
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 8086 	beq.w	8009428 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2204      	movs	r2, #4
 8009320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a2f      	ldr	r2, [pc, #188]	; (80093e8 <HAL_DMA_Abort_IT+0x1a0>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d04a      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a2e      	ldr	r2, [pc, #184]	; (80093ec <HAL_DMA_Abort_IT+0x1a4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d045      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a2c      	ldr	r2, [pc, #176]	; (80093f0 <HAL_DMA_Abort_IT+0x1a8>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d040      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a2b      	ldr	r2, [pc, #172]	; (80093f4 <HAL_DMA_Abort_IT+0x1ac>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d03b      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a29      	ldr	r2, [pc, #164]	; (80093f8 <HAL_DMA_Abort_IT+0x1b0>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d036      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a28      	ldr	r2, [pc, #160]	; (80093fc <HAL_DMA_Abort_IT+0x1b4>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d031      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a26      	ldr	r2, [pc, #152]	; (8009400 <HAL_DMA_Abort_IT+0x1b8>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d02c      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a25      	ldr	r2, [pc, #148]	; (8009404 <HAL_DMA_Abort_IT+0x1bc>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d027      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a23      	ldr	r2, [pc, #140]	; (8009408 <HAL_DMA_Abort_IT+0x1c0>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d022      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a22      	ldr	r2, [pc, #136]	; (800940c <HAL_DMA_Abort_IT+0x1c4>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d01d      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a20      	ldr	r2, [pc, #128]	; (8009410 <HAL_DMA_Abort_IT+0x1c8>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d018      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a1f      	ldr	r2, [pc, #124]	; (8009414 <HAL_DMA_Abort_IT+0x1cc>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d013      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a1d      	ldr	r2, [pc, #116]	; (8009418 <HAL_DMA_Abort_IT+0x1d0>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00e      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a1c      	ldr	r2, [pc, #112]	; (800941c <HAL_DMA_Abort_IT+0x1d4>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d009      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a1a      	ldr	r2, [pc, #104]	; (8009420 <HAL_DMA_Abort_IT+0x1d8>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d004      	beq.n	80093c4 <HAL_DMA_Abort_IT+0x17c>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a19      	ldr	r2, [pc, #100]	; (8009424 <HAL_DMA_Abort_IT+0x1dc>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d108      	bne.n	80093d6 <HAL_DMA_Abort_IT+0x18e>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0201 	bic.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	e178      	b.n	80096c8 <HAL_DMA_Abort_IT+0x480>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0201 	bic.w	r2, r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	e16f      	b.n	80096c8 <HAL_DMA_Abort_IT+0x480>
 80093e8:	40020010 	.word	0x40020010
 80093ec:	40020028 	.word	0x40020028
 80093f0:	40020040 	.word	0x40020040
 80093f4:	40020058 	.word	0x40020058
 80093f8:	40020070 	.word	0x40020070
 80093fc:	40020088 	.word	0x40020088
 8009400:	400200a0 	.word	0x400200a0
 8009404:	400200b8 	.word	0x400200b8
 8009408:	40020410 	.word	0x40020410
 800940c:	40020428 	.word	0x40020428
 8009410:	40020440 	.word	0x40020440
 8009414:	40020458 	.word	0x40020458
 8009418:	40020470 	.word	0x40020470
 800941c:	40020488 	.word	0x40020488
 8009420:	400204a0 	.word	0x400204a0
 8009424:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 020e 	bic.w	r2, r2, #14
 8009436:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a6c      	ldr	r2, [pc, #432]	; (80095f0 <HAL_DMA_Abort_IT+0x3a8>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d04a      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a6b      	ldr	r2, [pc, #428]	; (80095f4 <HAL_DMA_Abort_IT+0x3ac>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d045      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a69      	ldr	r2, [pc, #420]	; (80095f8 <HAL_DMA_Abort_IT+0x3b0>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d040      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a68      	ldr	r2, [pc, #416]	; (80095fc <HAL_DMA_Abort_IT+0x3b4>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d03b      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a66      	ldr	r2, [pc, #408]	; (8009600 <HAL_DMA_Abort_IT+0x3b8>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d036      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a65      	ldr	r2, [pc, #404]	; (8009604 <HAL_DMA_Abort_IT+0x3bc>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d031      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a63      	ldr	r2, [pc, #396]	; (8009608 <HAL_DMA_Abort_IT+0x3c0>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d02c      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a62      	ldr	r2, [pc, #392]	; (800960c <HAL_DMA_Abort_IT+0x3c4>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d027      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a60      	ldr	r2, [pc, #384]	; (8009610 <HAL_DMA_Abort_IT+0x3c8>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d022      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a5f      	ldr	r2, [pc, #380]	; (8009614 <HAL_DMA_Abort_IT+0x3cc>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d01d      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a5d      	ldr	r2, [pc, #372]	; (8009618 <HAL_DMA_Abort_IT+0x3d0>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d018      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a5c      	ldr	r2, [pc, #368]	; (800961c <HAL_DMA_Abort_IT+0x3d4>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d013      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a5a      	ldr	r2, [pc, #360]	; (8009620 <HAL_DMA_Abort_IT+0x3d8>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d00e      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a59      	ldr	r2, [pc, #356]	; (8009624 <HAL_DMA_Abort_IT+0x3dc>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d009      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a57      	ldr	r2, [pc, #348]	; (8009628 <HAL_DMA_Abort_IT+0x3e0>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d004      	beq.n	80094d8 <HAL_DMA_Abort_IT+0x290>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a56      	ldr	r2, [pc, #344]	; (800962c <HAL_DMA_Abort_IT+0x3e4>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d108      	bne.n	80094ea <HAL_DMA_Abort_IT+0x2a2>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0201 	bic.w	r2, r2, #1
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	e007      	b.n	80094fa <HAL_DMA_Abort_IT+0x2b2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0201 	bic.w	r2, r2, #1
 80094f8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a3c      	ldr	r2, [pc, #240]	; (80095f0 <HAL_DMA_Abort_IT+0x3a8>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d072      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a3a      	ldr	r2, [pc, #232]	; (80095f4 <HAL_DMA_Abort_IT+0x3ac>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d06d      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a39      	ldr	r2, [pc, #228]	; (80095f8 <HAL_DMA_Abort_IT+0x3b0>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d068      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a37      	ldr	r2, [pc, #220]	; (80095fc <HAL_DMA_Abort_IT+0x3b4>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d063      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a36      	ldr	r2, [pc, #216]	; (8009600 <HAL_DMA_Abort_IT+0x3b8>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d05e      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a34      	ldr	r2, [pc, #208]	; (8009604 <HAL_DMA_Abort_IT+0x3bc>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d059      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a33      	ldr	r2, [pc, #204]	; (8009608 <HAL_DMA_Abort_IT+0x3c0>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d054      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a31      	ldr	r2, [pc, #196]	; (800960c <HAL_DMA_Abort_IT+0x3c4>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d04f      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a30      	ldr	r2, [pc, #192]	; (8009610 <HAL_DMA_Abort_IT+0x3c8>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d04a      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a2e      	ldr	r2, [pc, #184]	; (8009614 <HAL_DMA_Abort_IT+0x3cc>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d045      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a2d      	ldr	r2, [pc, #180]	; (8009618 <HAL_DMA_Abort_IT+0x3d0>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d040      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a2b      	ldr	r2, [pc, #172]	; (800961c <HAL_DMA_Abort_IT+0x3d4>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d03b      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a2a      	ldr	r2, [pc, #168]	; (8009620 <HAL_DMA_Abort_IT+0x3d8>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d036      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a28      	ldr	r2, [pc, #160]	; (8009624 <HAL_DMA_Abort_IT+0x3dc>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d031      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a27      	ldr	r2, [pc, #156]	; (8009628 <HAL_DMA_Abort_IT+0x3e0>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d02c      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a25      	ldr	r2, [pc, #148]	; (800962c <HAL_DMA_Abort_IT+0x3e4>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d027      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a24      	ldr	r2, [pc, #144]	; (8009630 <HAL_DMA_Abort_IT+0x3e8>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d022      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a22      	ldr	r2, [pc, #136]	; (8009634 <HAL_DMA_Abort_IT+0x3ec>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d01d      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a21      	ldr	r2, [pc, #132]	; (8009638 <HAL_DMA_Abort_IT+0x3f0>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d018      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a1f      	ldr	r2, [pc, #124]	; (800963c <HAL_DMA_Abort_IT+0x3f4>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d013      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a1e      	ldr	r2, [pc, #120]	; (8009640 <HAL_DMA_Abort_IT+0x3f8>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d00e      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a1c      	ldr	r2, [pc, #112]	; (8009644 <HAL_DMA_Abort_IT+0x3fc>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d009      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a1b      	ldr	r2, [pc, #108]	; (8009648 <HAL_DMA_Abort_IT+0x400>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d004      	beq.n	80095ea <HAL_DMA_Abort_IT+0x3a2>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a19      	ldr	r2, [pc, #100]	; (800964c <HAL_DMA_Abort_IT+0x404>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d132      	bne.n	8009650 <HAL_DMA_Abort_IT+0x408>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e031      	b.n	8009652 <HAL_DMA_Abort_IT+0x40a>
 80095ee:	bf00      	nop
 80095f0:	40020010 	.word	0x40020010
 80095f4:	40020028 	.word	0x40020028
 80095f8:	40020040 	.word	0x40020040
 80095fc:	40020058 	.word	0x40020058
 8009600:	40020070 	.word	0x40020070
 8009604:	40020088 	.word	0x40020088
 8009608:	400200a0 	.word	0x400200a0
 800960c:	400200b8 	.word	0x400200b8
 8009610:	40020410 	.word	0x40020410
 8009614:	40020428 	.word	0x40020428
 8009618:	40020440 	.word	0x40020440
 800961c:	40020458 	.word	0x40020458
 8009620:	40020470 	.word	0x40020470
 8009624:	40020488 	.word	0x40020488
 8009628:	400204a0 	.word	0x400204a0
 800962c:	400204b8 	.word	0x400204b8
 8009630:	58025408 	.word	0x58025408
 8009634:	5802541c 	.word	0x5802541c
 8009638:	58025430 	.word	0x58025430
 800963c:	58025444 	.word	0x58025444
 8009640:	58025458 	.word	0x58025458
 8009644:	5802546c 	.word	0x5802546c
 8009648:	58025480 	.word	0x58025480
 800964c:	58025494 	.word	0x58025494
 8009650:	2300      	movs	r3, #0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d028      	beq.n	80096a8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009664:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800966a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009670:	f003 031f 	and.w	r3, r3, #31
 8009674:	2201      	movs	r2, #1
 8009676:	409a      	lsls	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009684:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00c      	beq.n	80096a8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800969c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80096a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop

080096d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08a      	sub	sp, #40	; 0x28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80096e0:	4b67      	ldr	r3, [pc, #412]	; (8009880 <HAL_DMA_IRQHandler+0x1ac>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a67      	ldr	r2, [pc, #412]	; (8009884 <HAL_DMA_IRQHandler+0x1b0>)
 80096e6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ea:	0a9b      	lsrs	r3, r3, #10
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a5f      	ldr	r2, [pc, #380]	; (8009888 <HAL_DMA_IRQHandler+0x1b4>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d04a      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a5d      	ldr	r2, [pc, #372]	; (800988c <HAL_DMA_IRQHandler+0x1b8>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d045      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a5c      	ldr	r2, [pc, #368]	; (8009890 <HAL_DMA_IRQHandler+0x1bc>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d040      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a5a      	ldr	r2, [pc, #360]	; (8009894 <HAL_DMA_IRQHandler+0x1c0>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d03b      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a59      	ldr	r2, [pc, #356]	; (8009898 <HAL_DMA_IRQHandler+0x1c4>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d036      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a57      	ldr	r2, [pc, #348]	; (800989c <HAL_DMA_IRQHandler+0x1c8>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d031      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a56      	ldr	r2, [pc, #344]	; (80098a0 <HAL_DMA_IRQHandler+0x1cc>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d02c      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a54      	ldr	r2, [pc, #336]	; (80098a4 <HAL_DMA_IRQHandler+0x1d0>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d027      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a53      	ldr	r2, [pc, #332]	; (80098a8 <HAL_DMA_IRQHandler+0x1d4>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d022      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a51      	ldr	r2, [pc, #324]	; (80098ac <HAL_DMA_IRQHandler+0x1d8>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d01d      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a50      	ldr	r2, [pc, #320]	; (80098b0 <HAL_DMA_IRQHandler+0x1dc>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d018      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a4e      	ldr	r2, [pc, #312]	; (80098b4 <HAL_DMA_IRQHandler+0x1e0>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d013      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a4d      	ldr	r2, [pc, #308]	; (80098b8 <HAL_DMA_IRQHandler+0x1e4>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d00e      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a4b      	ldr	r2, [pc, #300]	; (80098bc <HAL_DMA_IRQHandler+0x1e8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d009      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a4a      	ldr	r2, [pc, #296]	; (80098c0 <HAL_DMA_IRQHandler+0x1ec>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d004      	beq.n	80097a6 <HAL_DMA_IRQHandler+0xd2>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a48      	ldr	r2, [pc, #288]	; (80098c4 <HAL_DMA_IRQHandler+0x1f0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d101      	bne.n	80097aa <HAL_DMA_IRQHandler+0xd6>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e000      	b.n	80097ac <HAL_DMA_IRQHandler+0xd8>
 80097aa:	2300      	movs	r3, #0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f000 842b 	beq.w	800a008 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097b6:	f003 031f 	and.w	r3, r3, #31
 80097ba:	2208      	movs	r2, #8
 80097bc:	409a      	lsls	r2, r3
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	4013      	ands	r3, r2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 80a2 	beq.w	800990c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a2e      	ldr	r2, [pc, #184]	; (8009888 <HAL_DMA_IRQHandler+0x1b4>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d04a      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a2d      	ldr	r2, [pc, #180]	; (800988c <HAL_DMA_IRQHandler+0x1b8>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d045      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a2b      	ldr	r2, [pc, #172]	; (8009890 <HAL_DMA_IRQHandler+0x1bc>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d040      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a2a      	ldr	r2, [pc, #168]	; (8009894 <HAL_DMA_IRQHandler+0x1c0>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d03b      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a28      	ldr	r2, [pc, #160]	; (8009898 <HAL_DMA_IRQHandler+0x1c4>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d036      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a27      	ldr	r2, [pc, #156]	; (800989c <HAL_DMA_IRQHandler+0x1c8>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d031      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a25      	ldr	r2, [pc, #148]	; (80098a0 <HAL_DMA_IRQHandler+0x1cc>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d02c      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a24      	ldr	r2, [pc, #144]	; (80098a4 <HAL_DMA_IRQHandler+0x1d0>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d027      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a22      	ldr	r2, [pc, #136]	; (80098a8 <HAL_DMA_IRQHandler+0x1d4>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d022      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a21      	ldr	r2, [pc, #132]	; (80098ac <HAL_DMA_IRQHandler+0x1d8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d01d      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a1f      	ldr	r2, [pc, #124]	; (80098b0 <HAL_DMA_IRQHandler+0x1dc>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d018      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a1e      	ldr	r2, [pc, #120]	; (80098b4 <HAL_DMA_IRQHandler+0x1e0>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a1c      	ldr	r2, [pc, #112]	; (80098b8 <HAL_DMA_IRQHandler+0x1e4>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00e      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <HAL_DMA_IRQHandler+0x1e8>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d009      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <HAL_DMA_IRQHandler+0x1ec>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d004      	beq.n	8009868 <HAL_DMA_IRQHandler+0x194>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a18      	ldr	r2, [pc, #96]	; (80098c4 <HAL_DMA_IRQHandler+0x1f0>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d12f      	bne.n	80098c8 <HAL_DMA_IRQHandler+0x1f4>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0304 	and.w	r3, r3, #4
 8009872:	2b00      	cmp	r3, #0
 8009874:	bf14      	ite	ne
 8009876:	2301      	movne	r3, #1
 8009878:	2300      	moveq	r3, #0
 800987a:	b2db      	uxtb	r3, r3
 800987c:	e02e      	b.n	80098dc <HAL_DMA_IRQHandler+0x208>
 800987e:	bf00      	nop
 8009880:	240000c0 	.word	0x240000c0
 8009884:	1b4e81b5 	.word	0x1b4e81b5
 8009888:	40020010 	.word	0x40020010
 800988c:	40020028 	.word	0x40020028
 8009890:	40020040 	.word	0x40020040
 8009894:	40020058 	.word	0x40020058
 8009898:	40020070 	.word	0x40020070
 800989c:	40020088 	.word	0x40020088
 80098a0:	400200a0 	.word	0x400200a0
 80098a4:	400200b8 	.word	0x400200b8
 80098a8:	40020410 	.word	0x40020410
 80098ac:	40020428 	.word	0x40020428
 80098b0:	40020440 	.word	0x40020440
 80098b4:	40020458 	.word	0x40020458
 80098b8:	40020470 	.word	0x40020470
 80098bc:	40020488 	.word	0x40020488
 80098c0:	400204a0 	.word	0x400204a0
 80098c4:	400204b8 	.word	0x400204b8
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0308 	and.w	r3, r3, #8
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bf14      	ite	ne
 80098d6:	2301      	movne	r3, #1
 80098d8:	2300      	moveq	r3, #0
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d015      	beq.n	800990c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f022 0204 	bic.w	r2, r2, #4
 80098ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098f4:	f003 031f 	and.w	r3, r3, #31
 80098f8:	2208      	movs	r2, #8
 80098fa:	409a      	lsls	r2, r3
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009904:	f043 0201 	orr.w	r2, r3, #1
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009910:	f003 031f 	and.w	r3, r3, #31
 8009914:	69ba      	ldr	r2, [r7, #24]
 8009916:	fa22 f303 	lsr.w	r3, r2, r3
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d06e      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a69      	ldr	r2, [pc, #420]	; (8009acc <HAL_DMA_IRQHandler+0x3f8>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d04a      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a67      	ldr	r2, [pc, #412]	; (8009ad0 <HAL_DMA_IRQHandler+0x3fc>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d045      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a66      	ldr	r2, [pc, #408]	; (8009ad4 <HAL_DMA_IRQHandler+0x400>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d040      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a64      	ldr	r2, [pc, #400]	; (8009ad8 <HAL_DMA_IRQHandler+0x404>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d03b      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a63      	ldr	r2, [pc, #396]	; (8009adc <HAL_DMA_IRQHandler+0x408>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d036      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a61      	ldr	r2, [pc, #388]	; (8009ae0 <HAL_DMA_IRQHandler+0x40c>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d031      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a60      	ldr	r2, [pc, #384]	; (8009ae4 <HAL_DMA_IRQHandler+0x410>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d02c      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a5e      	ldr	r2, [pc, #376]	; (8009ae8 <HAL_DMA_IRQHandler+0x414>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d027      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a5d      	ldr	r2, [pc, #372]	; (8009aec <HAL_DMA_IRQHandler+0x418>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d022      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a5b      	ldr	r2, [pc, #364]	; (8009af0 <HAL_DMA_IRQHandler+0x41c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d01d      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a5a      	ldr	r2, [pc, #360]	; (8009af4 <HAL_DMA_IRQHandler+0x420>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d018      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a58      	ldr	r2, [pc, #352]	; (8009af8 <HAL_DMA_IRQHandler+0x424>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d013      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a57      	ldr	r2, [pc, #348]	; (8009afc <HAL_DMA_IRQHandler+0x428>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d00e      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a55      	ldr	r2, [pc, #340]	; (8009b00 <HAL_DMA_IRQHandler+0x42c>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d009      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a54      	ldr	r2, [pc, #336]	; (8009b04 <HAL_DMA_IRQHandler+0x430>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d004      	beq.n	80099c2 <HAL_DMA_IRQHandler+0x2ee>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a52      	ldr	r2, [pc, #328]	; (8009b08 <HAL_DMA_IRQHandler+0x434>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d10a      	bne.n	80099d8 <HAL_DMA_IRQHandler+0x304>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	bf14      	ite	ne
 80099d0:	2301      	movne	r3, #1
 80099d2:	2300      	moveq	r3, #0
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	e003      	b.n	80099e0 <HAL_DMA_IRQHandler+0x30c>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2300      	movs	r3, #0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00d      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099e8:	f003 031f 	and.w	r3, r3, #31
 80099ec:	2201      	movs	r2, #1
 80099ee:	409a      	lsls	r2, r3
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f8:	f043 0202 	orr.w	r2, r3, #2
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a04:	f003 031f 	and.w	r3, r3, #31
 8009a08:	2204      	movs	r2, #4
 8009a0a:	409a      	lsls	r2, r3
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 808f 	beq.w	8009b34 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a2c      	ldr	r2, [pc, #176]	; (8009acc <HAL_DMA_IRQHandler+0x3f8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d04a      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a2a      	ldr	r2, [pc, #168]	; (8009ad0 <HAL_DMA_IRQHandler+0x3fc>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d045      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a29      	ldr	r2, [pc, #164]	; (8009ad4 <HAL_DMA_IRQHandler+0x400>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d040      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a27      	ldr	r2, [pc, #156]	; (8009ad8 <HAL_DMA_IRQHandler+0x404>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d03b      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a26      	ldr	r2, [pc, #152]	; (8009adc <HAL_DMA_IRQHandler+0x408>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d036      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a24      	ldr	r2, [pc, #144]	; (8009ae0 <HAL_DMA_IRQHandler+0x40c>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d031      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a23      	ldr	r2, [pc, #140]	; (8009ae4 <HAL_DMA_IRQHandler+0x410>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d02c      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a21      	ldr	r2, [pc, #132]	; (8009ae8 <HAL_DMA_IRQHandler+0x414>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d027      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a20      	ldr	r2, [pc, #128]	; (8009aec <HAL_DMA_IRQHandler+0x418>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d022      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a1e      	ldr	r2, [pc, #120]	; (8009af0 <HAL_DMA_IRQHandler+0x41c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d01d      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a1d      	ldr	r2, [pc, #116]	; (8009af4 <HAL_DMA_IRQHandler+0x420>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d018      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a1b      	ldr	r2, [pc, #108]	; (8009af8 <HAL_DMA_IRQHandler+0x424>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d013      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a1a      	ldr	r2, [pc, #104]	; (8009afc <HAL_DMA_IRQHandler+0x428>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d00e      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a18      	ldr	r2, [pc, #96]	; (8009b00 <HAL_DMA_IRQHandler+0x42c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d009      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a17      	ldr	r2, [pc, #92]	; (8009b04 <HAL_DMA_IRQHandler+0x430>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d004      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x3e2>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a15      	ldr	r2, [pc, #84]	; (8009b08 <HAL_DMA_IRQHandler+0x434>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d12a      	bne.n	8009b0c <HAL_DMA_IRQHandler+0x438>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0302 	and.w	r3, r3, #2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	bf14      	ite	ne
 8009ac4:	2301      	movne	r3, #1
 8009ac6:	2300      	moveq	r3, #0
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	e023      	b.n	8009b14 <HAL_DMA_IRQHandler+0x440>
 8009acc:	40020010 	.word	0x40020010
 8009ad0:	40020028 	.word	0x40020028
 8009ad4:	40020040 	.word	0x40020040
 8009ad8:	40020058 	.word	0x40020058
 8009adc:	40020070 	.word	0x40020070
 8009ae0:	40020088 	.word	0x40020088
 8009ae4:	400200a0 	.word	0x400200a0
 8009ae8:	400200b8 	.word	0x400200b8
 8009aec:	40020410 	.word	0x40020410
 8009af0:	40020428 	.word	0x40020428
 8009af4:	40020440 	.word	0x40020440
 8009af8:	40020458 	.word	0x40020458
 8009afc:	40020470 	.word	0x40020470
 8009b00:	40020488 	.word	0x40020488
 8009b04:	400204a0 	.word	0x400204a0
 8009b08:	400204b8 	.word	0x400204b8
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2300      	movs	r3, #0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00d      	beq.n	8009b34 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b1c:	f003 031f 	and.w	r3, r3, #31
 8009b20:	2204      	movs	r2, #4
 8009b22:	409a      	lsls	r2, r3
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2c:	f043 0204 	orr.w	r2, r3, #4
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b38:	f003 031f 	and.w	r3, r3, #31
 8009b3c:	2210      	movs	r2, #16
 8009b3e:	409a      	lsls	r2, r3
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	4013      	ands	r3, r2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 80a6 	beq.w	8009c96 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a85      	ldr	r2, [pc, #532]	; (8009d64 <HAL_DMA_IRQHandler+0x690>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d04a      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a83      	ldr	r2, [pc, #524]	; (8009d68 <HAL_DMA_IRQHandler+0x694>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d045      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a82      	ldr	r2, [pc, #520]	; (8009d6c <HAL_DMA_IRQHandler+0x698>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d040      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a80      	ldr	r2, [pc, #512]	; (8009d70 <HAL_DMA_IRQHandler+0x69c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d03b      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a7f      	ldr	r2, [pc, #508]	; (8009d74 <HAL_DMA_IRQHandler+0x6a0>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d036      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a7d      	ldr	r2, [pc, #500]	; (8009d78 <HAL_DMA_IRQHandler+0x6a4>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d031      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a7c      	ldr	r2, [pc, #496]	; (8009d7c <HAL_DMA_IRQHandler+0x6a8>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d02c      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a7a      	ldr	r2, [pc, #488]	; (8009d80 <HAL_DMA_IRQHandler+0x6ac>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d027      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a79      	ldr	r2, [pc, #484]	; (8009d84 <HAL_DMA_IRQHandler+0x6b0>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d022      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a77      	ldr	r2, [pc, #476]	; (8009d88 <HAL_DMA_IRQHandler+0x6b4>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d01d      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a76      	ldr	r2, [pc, #472]	; (8009d8c <HAL_DMA_IRQHandler+0x6b8>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d018      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a74      	ldr	r2, [pc, #464]	; (8009d90 <HAL_DMA_IRQHandler+0x6bc>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d013      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a73      	ldr	r2, [pc, #460]	; (8009d94 <HAL_DMA_IRQHandler+0x6c0>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d00e      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a71      	ldr	r2, [pc, #452]	; (8009d98 <HAL_DMA_IRQHandler+0x6c4>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d009      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a70      	ldr	r2, [pc, #448]	; (8009d9c <HAL_DMA_IRQHandler+0x6c8>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d004      	beq.n	8009bea <HAL_DMA_IRQHandler+0x516>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a6e      	ldr	r2, [pc, #440]	; (8009da0 <HAL_DMA_IRQHandler+0x6cc>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d10a      	bne.n	8009c00 <HAL_DMA_IRQHandler+0x52c>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0308 	and.w	r3, r3, #8
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bf14      	ite	ne
 8009bf8:	2301      	movne	r3, #1
 8009bfa:	2300      	moveq	r3, #0
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	e009      	b.n	8009c14 <HAL_DMA_IRQHandler+0x540>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	bf14      	ite	ne
 8009c0e:	2301      	movne	r3, #1
 8009c10:	2300      	moveq	r3, #0
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d03e      	beq.n	8009c96 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c1c:	f003 031f 	and.w	r3, r3, #31
 8009c20:	2210      	movs	r2, #16
 8009c22:	409a      	lsls	r2, r3
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d018      	beq.n	8009c68 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d108      	bne.n	8009c56 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d024      	beq.n	8009c96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	4798      	blx	r3
 8009c54:	e01f      	b.n	8009c96 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01b      	beq.n	8009c96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4798      	blx	r3
 8009c66:	e016      	b.n	8009c96 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d107      	bne.n	8009c86 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f022 0208 	bic.w	r2, r2, #8
 8009c84:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c9a:	f003 031f 	and.w	r3, r3, #31
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	409a      	lsls	r2, r3
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f000 8110 	beq.w	8009ecc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a2c      	ldr	r2, [pc, #176]	; (8009d64 <HAL_DMA_IRQHandler+0x690>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d04a      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a2b      	ldr	r2, [pc, #172]	; (8009d68 <HAL_DMA_IRQHandler+0x694>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d045      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a29      	ldr	r2, [pc, #164]	; (8009d6c <HAL_DMA_IRQHandler+0x698>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d040      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a28      	ldr	r2, [pc, #160]	; (8009d70 <HAL_DMA_IRQHandler+0x69c>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d03b      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a26      	ldr	r2, [pc, #152]	; (8009d74 <HAL_DMA_IRQHandler+0x6a0>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d036      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a25      	ldr	r2, [pc, #148]	; (8009d78 <HAL_DMA_IRQHandler+0x6a4>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d031      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a23      	ldr	r2, [pc, #140]	; (8009d7c <HAL_DMA_IRQHandler+0x6a8>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d02c      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a22      	ldr	r2, [pc, #136]	; (8009d80 <HAL_DMA_IRQHandler+0x6ac>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d027      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a20      	ldr	r2, [pc, #128]	; (8009d84 <HAL_DMA_IRQHandler+0x6b0>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d022      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a1f      	ldr	r2, [pc, #124]	; (8009d88 <HAL_DMA_IRQHandler+0x6b4>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d01d      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a1d      	ldr	r2, [pc, #116]	; (8009d8c <HAL_DMA_IRQHandler+0x6b8>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d018      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a1c      	ldr	r2, [pc, #112]	; (8009d90 <HAL_DMA_IRQHandler+0x6bc>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d013      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a1a      	ldr	r2, [pc, #104]	; (8009d94 <HAL_DMA_IRQHandler+0x6c0>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d00e      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a19      	ldr	r2, [pc, #100]	; (8009d98 <HAL_DMA_IRQHandler+0x6c4>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d009      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a17      	ldr	r2, [pc, #92]	; (8009d9c <HAL_DMA_IRQHandler+0x6c8>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d004      	beq.n	8009d4c <HAL_DMA_IRQHandler+0x678>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a16      	ldr	r2, [pc, #88]	; (8009da0 <HAL_DMA_IRQHandler+0x6cc>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d12b      	bne.n	8009da4 <HAL_DMA_IRQHandler+0x6d0>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0310 	and.w	r3, r3, #16
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bf14      	ite	ne
 8009d5a:	2301      	movne	r3, #1
 8009d5c:	2300      	moveq	r3, #0
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	e02a      	b.n	8009db8 <HAL_DMA_IRQHandler+0x6e4>
 8009d62:	bf00      	nop
 8009d64:	40020010 	.word	0x40020010
 8009d68:	40020028 	.word	0x40020028
 8009d6c:	40020040 	.word	0x40020040
 8009d70:	40020058 	.word	0x40020058
 8009d74:	40020070 	.word	0x40020070
 8009d78:	40020088 	.word	0x40020088
 8009d7c:	400200a0 	.word	0x400200a0
 8009d80:	400200b8 	.word	0x400200b8
 8009d84:	40020410 	.word	0x40020410
 8009d88:	40020428 	.word	0x40020428
 8009d8c:	40020440 	.word	0x40020440
 8009d90:	40020458 	.word	0x40020458
 8009d94:	40020470 	.word	0x40020470
 8009d98:	40020488 	.word	0x40020488
 8009d9c:	400204a0 	.word	0x400204a0
 8009da0:	400204b8 	.word	0x400204b8
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0302 	and.w	r3, r3, #2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	bf14      	ite	ne
 8009db2:	2301      	movne	r3, #1
 8009db4:	2300      	moveq	r3, #0
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 8087 	beq.w	8009ecc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dc2:	f003 031f 	and.w	r3, r3, #31
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	409a      	lsls	r2, r3
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b04      	cmp	r3, #4
 8009dd8:	d139      	bne.n	8009e4e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0216 	bic.w	r2, r2, #22
 8009de8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	695a      	ldr	r2, [r3, #20]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009df8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d103      	bne.n	8009e0a <HAL_DMA_IRQHandler+0x736>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d007      	beq.n	8009e1a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0208 	bic.w	r2, r2, #8
 8009e18:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e1e:	f003 031f 	and.w	r3, r3, #31
 8009e22:	223f      	movs	r2, #63	; 0x3f
 8009e24:	409a      	lsls	r2, r3
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 834a 	beq.w	800a4d8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	4798      	blx	r3
          }
          return;
 8009e4c:	e344      	b.n	800a4d8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d018      	beq.n	8009e8e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d108      	bne.n	8009e7c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d02c      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	4798      	blx	r3
 8009e7a:	e027      	b.n	8009ecc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d023      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	4798      	blx	r3
 8009e8c:	e01e      	b.n	8009ecc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10f      	bne.n	8009ebc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f022 0210 	bic.w	r2, r2, #16
 8009eaa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d003      	beq.n	8009ecc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 8306 	beq.w	800a4e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 8088 	beq.w	8009ff4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2204      	movs	r2, #4
 8009ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a7a      	ldr	r2, [pc, #488]	; (800a0dc <HAL_DMA_IRQHandler+0xa08>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d04a      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a79      	ldr	r2, [pc, #484]	; (800a0e0 <HAL_DMA_IRQHandler+0xa0c>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d045      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a77      	ldr	r2, [pc, #476]	; (800a0e4 <HAL_DMA_IRQHandler+0xa10>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d040      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a76      	ldr	r2, [pc, #472]	; (800a0e8 <HAL_DMA_IRQHandler+0xa14>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d03b      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a74      	ldr	r2, [pc, #464]	; (800a0ec <HAL_DMA_IRQHandler+0xa18>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d036      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a73      	ldr	r2, [pc, #460]	; (800a0f0 <HAL_DMA_IRQHandler+0xa1c>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d031      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a71      	ldr	r2, [pc, #452]	; (800a0f4 <HAL_DMA_IRQHandler+0xa20>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d02c      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a70      	ldr	r2, [pc, #448]	; (800a0f8 <HAL_DMA_IRQHandler+0xa24>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d027      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a6e      	ldr	r2, [pc, #440]	; (800a0fc <HAL_DMA_IRQHandler+0xa28>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d022      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a6d      	ldr	r2, [pc, #436]	; (800a100 <HAL_DMA_IRQHandler+0xa2c>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d01d      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a6b      	ldr	r2, [pc, #428]	; (800a104 <HAL_DMA_IRQHandler+0xa30>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d018      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a6a      	ldr	r2, [pc, #424]	; (800a108 <HAL_DMA_IRQHandler+0xa34>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d013      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a68      	ldr	r2, [pc, #416]	; (800a10c <HAL_DMA_IRQHandler+0xa38>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d00e      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a67      	ldr	r2, [pc, #412]	; (800a110 <HAL_DMA_IRQHandler+0xa3c>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d009      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a65      	ldr	r2, [pc, #404]	; (800a114 <HAL_DMA_IRQHandler+0xa40>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d004      	beq.n	8009f8c <HAL_DMA_IRQHandler+0x8b8>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a64      	ldr	r2, [pc, #400]	; (800a118 <HAL_DMA_IRQHandler+0xa44>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d108      	bne.n	8009f9e <HAL_DMA_IRQHandler+0x8ca>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 0201 	bic.w	r2, r2, #1
 8009f9a:	601a      	str	r2, [r3, #0]
 8009f9c:	e007      	b.n	8009fae <HAL_DMA_IRQHandler+0x8da>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f022 0201 	bic.w	r2, r2, #1
 8009fac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d307      	bcc.n	8009fca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1f2      	bne.n	8009fae <HAL_DMA_IRQHandler+0x8da>
 8009fc8:	e000      	b.n	8009fcc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009fca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d004      	beq.n	8009fe4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2203      	movs	r2, #3
 8009fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009fe2:	e003      	b.n	8009fec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 8272 	beq.w	800a4e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	4798      	blx	r3
 800a006:	e26c      	b.n	800a4e2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a43      	ldr	r2, [pc, #268]	; (800a11c <HAL_DMA_IRQHandler+0xa48>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d022      	beq.n	800a058 <HAL_DMA_IRQHandler+0x984>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a42      	ldr	r2, [pc, #264]	; (800a120 <HAL_DMA_IRQHandler+0xa4c>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d01d      	beq.n	800a058 <HAL_DMA_IRQHandler+0x984>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a40      	ldr	r2, [pc, #256]	; (800a124 <HAL_DMA_IRQHandler+0xa50>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d018      	beq.n	800a058 <HAL_DMA_IRQHandler+0x984>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a3f      	ldr	r2, [pc, #252]	; (800a128 <HAL_DMA_IRQHandler+0xa54>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d013      	beq.n	800a058 <HAL_DMA_IRQHandler+0x984>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a3d      	ldr	r2, [pc, #244]	; (800a12c <HAL_DMA_IRQHandler+0xa58>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d00e      	beq.n	800a058 <HAL_DMA_IRQHandler+0x984>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a3c      	ldr	r2, [pc, #240]	; (800a130 <HAL_DMA_IRQHandler+0xa5c>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d009      	beq.n	800a058 <HAL_DMA_IRQHandler+0x984>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a3a      	ldr	r2, [pc, #232]	; (800a134 <HAL_DMA_IRQHandler+0xa60>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d004      	beq.n	800a058 <HAL_DMA_IRQHandler+0x984>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a39      	ldr	r2, [pc, #228]	; (800a138 <HAL_DMA_IRQHandler+0xa64>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d101      	bne.n	800a05c <HAL_DMA_IRQHandler+0x988>
 800a058:	2301      	movs	r3, #1
 800a05a:	e000      	b.n	800a05e <HAL_DMA_IRQHandler+0x98a>
 800a05c:	2300      	movs	r3, #0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 823f 	beq.w	800a4e2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a070:	f003 031f 	and.w	r3, r3, #31
 800a074:	2204      	movs	r2, #4
 800a076:	409a      	lsls	r2, r3
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	4013      	ands	r3, r2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 80cd 	beq.w	800a21c <HAL_DMA_IRQHandler+0xb48>
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 80c7 	beq.w	800a21c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a092:	f003 031f 	and.w	r3, r3, #31
 800a096:	2204      	movs	r2, #4
 800a098:	409a      	lsls	r2, r3
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d049      	beq.n	800a13c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d109      	bne.n	800a0c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 8210 	beq.w	800a4dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a0c4:	e20a      	b.n	800a4dc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 8206 	beq.w	800a4dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a0d8:	e200      	b.n	800a4dc <HAL_DMA_IRQHandler+0xe08>
 800a0da:	bf00      	nop
 800a0dc:	40020010 	.word	0x40020010
 800a0e0:	40020028 	.word	0x40020028
 800a0e4:	40020040 	.word	0x40020040
 800a0e8:	40020058 	.word	0x40020058
 800a0ec:	40020070 	.word	0x40020070
 800a0f0:	40020088 	.word	0x40020088
 800a0f4:	400200a0 	.word	0x400200a0
 800a0f8:	400200b8 	.word	0x400200b8
 800a0fc:	40020410 	.word	0x40020410
 800a100:	40020428 	.word	0x40020428
 800a104:	40020440 	.word	0x40020440
 800a108:	40020458 	.word	0x40020458
 800a10c:	40020470 	.word	0x40020470
 800a110:	40020488 	.word	0x40020488
 800a114:	400204a0 	.word	0x400204a0
 800a118:	400204b8 	.word	0x400204b8
 800a11c:	58025408 	.word	0x58025408
 800a120:	5802541c 	.word	0x5802541c
 800a124:	58025430 	.word	0x58025430
 800a128:	58025444 	.word	0x58025444
 800a12c:	58025458 	.word	0x58025458
 800a130:	5802546c 	.word	0x5802546c
 800a134:	58025480 	.word	0x58025480
 800a138:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f003 0320 	and.w	r3, r3, #32
 800a142:	2b00      	cmp	r3, #0
 800a144:	d160      	bne.n	800a208 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a7f      	ldr	r2, [pc, #508]	; (800a348 <HAL_DMA_IRQHandler+0xc74>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d04a      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a7d      	ldr	r2, [pc, #500]	; (800a34c <HAL_DMA_IRQHandler+0xc78>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d045      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a7c      	ldr	r2, [pc, #496]	; (800a350 <HAL_DMA_IRQHandler+0xc7c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d040      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a7a      	ldr	r2, [pc, #488]	; (800a354 <HAL_DMA_IRQHandler+0xc80>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d03b      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a79      	ldr	r2, [pc, #484]	; (800a358 <HAL_DMA_IRQHandler+0xc84>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d036      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a77      	ldr	r2, [pc, #476]	; (800a35c <HAL_DMA_IRQHandler+0xc88>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d031      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a76      	ldr	r2, [pc, #472]	; (800a360 <HAL_DMA_IRQHandler+0xc8c>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d02c      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a74      	ldr	r2, [pc, #464]	; (800a364 <HAL_DMA_IRQHandler+0xc90>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d027      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a73      	ldr	r2, [pc, #460]	; (800a368 <HAL_DMA_IRQHandler+0xc94>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d022      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a71      	ldr	r2, [pc, #452]	; (800a36c <HAL_DMA_IRQHandler+0xc98>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d01d      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a70      	ldr	r2, [pc, #448]	; (800a370 <HAL_DMA_IRQHandler+0xc9c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d018      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a6e      	ldr	r2, [pc, #440]	; (800a374 <HAL_DMA_IRQHandler+0xca0>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d013      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a6d      	ldr	r2, [pc, #436]	; (800a378 <HAL_DMA_IRQHandler+0xca4>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d00e      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a6b      	ldr	r2, [pc, #428]	; (800a37c <HAL_DMA_IRQHandler+0xca8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d009      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a6a      	ldr	r2, [pc, #424]	; (800a380 <HAL_DMA_IRQHandler+0xcac>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d004      	beq.n	800a1e6 <HAL_DMA_IRQHandler+0xb12>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a68      	ldr	r2, [pc, #416]	; (800a384 <HAL_DMA_IRQHandler+0xcb0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d108      	bne.n	800a1f8 <HAL_DMA_IRQHandler+0xb24>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0208 	bic.w	r2, r2, #8
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	e007      	b.n	800a208 <HAL_DMA_IRQHandler+0xb34>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f022 0204 	bic.w	r2, r2, #4
 800a206:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f000 8165 	beq.w	800a4dc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a21a:	e15f      	b.n	800a4dc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a220:	f003 031f 	and.w	r3, r3, #31
 800a224:	2202      	movs	r2, #2
 800a226:	409a      	lsls	r2, r3
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	4013      	ands	r3, r2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f000 80c5 	beq.w	800a3bc <HAL_DMA_IRQHandler+0xce8>
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f003 0302 	and.w	r3, r3, #2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 80bf 	beq.w	800a3bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a242:	f003 031f 	and.w	r3, r3, #31
 800a246:	2202      	movs	r2, #2
 800a248:	409a      	lsls	r2, r3
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d018      	beq.n	800a28a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a266:	2b00      	cmp	r3, #0
 800a268:	f000 813a 	beq.w	800a4e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a274:	e134      	b.n	800a4e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 8130 	beq.w	800a4e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a288:	e12a      	b.n	800a4e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f003 0320 	and.w	r3, r3, #32
 800a290:	2b00      	cmp	r3, #0
 800a292:	f040 8089 	bne.w	800a3a8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a2b      	ldr	r2, [pc, #172]	; (800a348 <HAL_DMA_IRQHandler+0xc74>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d04a      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a29      	ldr	r2, [pc, #164]	; (800a34c <HAL_DMA_IRQHandler+0xc78>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d045      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a28      	ldr	r2, [pc, #160]	; (800a350 <HAL_DMA_IRQHandler+0xc7c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d040      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a26      	ldr	r2, [pc, #152]	; (800a354 <HAL_DMA_IRQHandler+0xc80>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d03b      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a25      	ldr	r2, [pc, #148]	; (800a358 <HAL_DMA_IRQHandler+0xc84>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d036      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a23      	ldr	r2, [pc, #140]	; (800a35c <HAL_DMA_IRQHandler+0xc88>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d031      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a22      	ldr	r2, [pc, #136]	; (800a360 <HAL_DMA_IRQHandler+0xc8c>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d02c      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a20      	ldr	r2, [pc, #128]	; (800a364 <HAL_DMA_IRQHandler+0xc90>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d027      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a1f      	ldr	r2, [pc, #124]	; (800a368 <HAL_DMA_IRQHandler+0xc94>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d022      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a1d      	ldr	r2, [pc, #116]	; (800a36c <HAL_DMA_IRQHandler+0xc98>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d01d      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a1c      	ldr	r2, [pc, #112]	; (800a370 <HAL_DMA_IRQHandler+0xc9c>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d018      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a1a      	ldr	r2, [pc, #104]	; (800a374 <HAL_DMA_IRQHandler+0xca0>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d013      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a19      	ldr	r2, [pc, #100]	; (800a378 <HAL_DMA_IRQHandler+0xca4>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d00e      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a17      	ldr	r2, [pc, #92]	; (800a37c <HAL_DMA_IRQHandler+0xca8>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d009      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a16      	ldr	r2, [pc, #88]	; (800a380 <HAL_DMA_IRQHandler+0xcac>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d004      	beq.n	800a336 <HAL_DMA_IRQHandler+0xc62>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a14      	ldr	r2, [pc, #80]	; (800a384 <HAL_DMA_IRQHandler+0xcb0>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d128      	bne.n	800a388 <HAL_DMA_IRQHandler+0xcb4>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f022 0214 	bic.w	r2, r2, #20
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	e027      	b.n	800a398 <HAL_DMA_IRQHandler+0xcc4>
 800a348:	40020010 	.word	0x40020010
 800a34c:	40020028 	.word	0x40020028
 800a350:	40020040 	.word	0x40020040
 800a354:	40020058 	.word	0x40020058
 800a358:	40020070 	.word	0x40020070
 800a35c:	40020088 	.word	0x40020088
 800a360:	400200a0 	.word	0x400200a0
 800a364:	400200b8 	.word	0x400200b8
 800a368:	40020410 	.word	0x40020410
 800a36c:	40020428 	.word	0x40020428
 800a370:	40020440 	.word	0x40020440
 800a374:	40020458 	.word	0x40020458
 800a378:	40020470 	.word	0x40020470
 800a37c:	40020488 	.word	0x40020488
 800a380:	400204a0 	.word	0x400204a0
 800a384:	400204b8 	.word	0x400204b8
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 020a 	bic.w	r2, r2, #10
 800a396:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f000 8097 	beq.w	800a4e0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3ba:	e091      	b.n	800a4e0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3c0:	f003 031f 	and.w	r3, r3, #31
 800a3c4:	2208      	movs	r2, #8
 800a3c6:	409a      	lsls	r2, r3
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 8088 	beq.w	800a4e2 <HAL_DMA_IRQHandler+0xe0e>
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	f003 0308 	and.w	r3, r3, #8
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 8082 	beq.w	800a4e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a41      	ldr	r2, [pc, #260]	; (800a4e8 <HAL_DMA_IRQHandler+0xe14>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d04a      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a3f      	ldr	r2, [pc, #252]	; (800a4ec <HAL_DMA_IRQHandler+0xe18>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d045      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a3e      	ldr	r2, [pc, #248]	; (800a4f0 <HAL_DMA_IRQHandler+0xe1c>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d040      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a3c      	ldr	r2, [pc, #240]	; (800a4f4 <HAL_DMA_IRQHandler+0xe20>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d03b      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a3b      	ldr	r2, [pc, #236]	; (800a4f8 <HAL_DMA_IRQHandler+0xe24>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d036      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a39      	ldr	r2, [pc, #228]	; (800a4fc <HAL_DMA_IRQHandler+0xe28>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d031      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a38      	ldr	r2, [pc, #224]	; (800a500 <HAL_DMA_IRQHandler+0xe2c>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d02c      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a36      	ldr	r2, [pc, #216]	; (800a504 <HAL_DMA_IRQHandler+0xe30>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d027      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a35      	ldr	r2, [pc, #212]	; (800a508 <HAL_DMA_IRQHandler+0xe34>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d022      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a33      	ldr	r2, [pc, #204]	; (800a50c <HAL_DMA_IRQHandler+0xe38>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d01d      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a32      	ldr	r2, [pc, #200]	; (800a510 <HAL_DMA_IRQHandler+0xe3c>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d018      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a30      	ldr	r2, [pc, #192]	; (800a514 <HAL_DMA_IRQHandler+0xe40>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d013      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a2f      	ldr	r2, [pc, #188]	; (800a518 <HAL_DMA_IRQHandler+0xe44>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d00e      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a2d      	ldr	r2, [pc, #180]	; (800a51c <HAL_DMA_IRQHandler+0xe48>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d009      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a2c      	ldr	r2, [pc, #176]	; (800a520 <HAL_DMA_IRQHandler+0xe4c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d004      	beq.n	800a47e <HAL_DMA_IRQHandler+0xdaa>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a2a      	ldr	r2, [pc, #168]	; (800a524 <HAL_DMA_IRQHandler+0xe50>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d108      	bne.n	800a490 <HAL_DMA_IRQHandler+0xdbc>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f022 021c 	bic.w	r2, r2, #28
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	e007      	b.n	800a4a0 <HAL_DMA_IRQHandler+0xdcc>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 020e 	bic.w	r2, r2, #14
 800a49e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4a4:	f003 031f 	and.w	r3, r3, #31
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	409a      	lsls	r2, r3
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
 800a4d6:	e004      	b.n	800a4e2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a4d8:	bf00      	nop
 800a4da:	e002      	b.n	800a4e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a4dc:	bf00      	nop
 800a4de:	e000      	b.n	800a4e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a4e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a4e2:	3728      	adds	r7, #40	; 0x28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	40020010 	.word	0x40020010
 800a4ec:	40020028 	.word	0x40020028
 800a4f0:	40020040 	.word	0x40020040
 800a4f4:	40020058 	.word	0x40020058
 800a4f8:	40020070 	.word	0x40020070
 800a4fc:	40020088 	.word	0x40020088
 800a500:	400200a0 	.word	0x400200a0
 800a504:	400200b8 	.word	0x400200b8
 800a508:	40020410 	.word	0x40020410
 800a50c:	40020428 	.word	0x40020428
 800a510:	40020440 	.word	0x40020440
 800a514:	40020458 	.word	0x40020458
 800a518:	40020470 	.word	0x40020470
 800a51c:	40020488 	.word	0x40020488
 800a520:	400204a0 	.word	0x400204a0
 800a524:	400204b8 	.word	0x400204b8

0800a528 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a536:	b2db      	uxtb	r3, r3
}
 800a538:	4618      	mov	r0, r3
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a56e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a574:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a7f      	ldr	r2, [pc, #508]	; (800a778 <DMA_SetConfig+0x21c>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d072      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a7d      	ldr	r2, [pc, #500]	; (800a77c <DMA_SetConfig+0x220>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d06d      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a7c      	ldr	r2, [pc, #496]	; (800a780 <DMA_SetConfig+0x224>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d068      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a7a      	ldr	r2, [pc, #488]	; (800a784 <DMA_SetConfig+0x228>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d063      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a79      	ldr	r2, [pc, #484]	; (800a788 <DMA_SetConfig+0x22c>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d05e      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a77      	ldr	r2, [pc, #476]	; (800a78c <DMA_SetConfig+0x230>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d059      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a76      	ldr	r2, [pc, #472]	; (800a790 <DMA_SetConfig+0x234>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d054      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a74      	ldr	r2, [pc, #464]	; (800a794 <DMA_SetConfig+0x238>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d04f      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a73      	ldr	r2, [pc, #460]	; (800a798 <DMA_SetConfig+0x23c>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d04a      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a71      	ldr	r2, [pc, #452]	; (800a79c <DMA_SetConfig+0x240>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d045      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a70      	ldr	r2, [pc, #448]	; (800a7a0 <DMA_SetConfig+0x244>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d040      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a6e      	ldr	r2, [pc, #440]	; (800a7a4 <DMA_SetConfig+0x248>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d03b      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a6d      	ldr	r2, [pc, #436]	; (800a7a8 <DMA_SetConfig+0x24c>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d036      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a6b      	ldr	r2, [pc, #428]	; (800a7ac <DMA_SetConfig+0x250>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d031      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a6a      	ldr	r2, [pc, #424]	; (800a7b0 <DMA_SetConfig+0x254>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d02c      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a68      	ldr	r2, [pc, #416]	; (800a7b4 <DMA_SetConfig+0x258>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d027      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a67      	ldr	r2, [pc, #412]	; (800a7b8 <DMA_SetConfig+0x25c>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d022      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a65      	ldr	r2, [pc, #404]	; (800a7bc <DMA_SetConfig+0x260>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d01d      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a64      	ldr	r2, [pc, #400]	; (800a7c0 <DMA_SetConfig+0x264>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d018      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a62      	ldr	r2, [pc, #392]	; (800a7c4 <DMA_SetConfig+0x268>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d013      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a61      	ldr	r2, [pc, #388]	; (800a7c8 <DMA_SetConfig+0x26c>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d00e      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a5f      	ldr	r2, [pc, #380]	; (800a7cc <DMA_SetConfig+0x270>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d009      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a5e      	ldr	r2, [pc, #376]	; (800a7d0 <DMA_SetConfig+0x274>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d004      	beq.n	800a666 <DMA_SetConfig+0x10a>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a5c      	ldr	r2, [pc, #368]	; (800a7d4 <DMA_SetConfig+0x278>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d101      	bne.n	800a66a <DMA_SetConfig+0x10e>
 800a666:	2301      	movs	r3, #1
 800a668:	e000      	b.n	800a66c <DMA_SetConfig+0x110>
 800a66a:	2300      	movs	r3, #0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00d      	beq.n	800a68c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a678:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d004      	beq.n	800a68c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a68a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a39      	ldr	r2, [pc, #228]	; (800a778 <DMA_SetConfig+0x21c>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d04a      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a38      	ldr	r2, [pc, #224]	; (800a77c <DMA_SetConfig+0x220>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d045      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a36      	ldr	r2, [pc, #216]	; (800a780 <DMA_SetConfig+0x224>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d040      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a35      	ldr	r2, [pc, #212]	; (800a784 <DMA_SetConfig+0x228>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d03b      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a33      	ldr	r2, [pc, #204]	; (800a788 <DMA_SetConfig+0x22c>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d036      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a32      	ldr	r2, [pc, #200]	; (800a78c <DMA_SetConfig+0x230>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d031      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a30      	ldr	r2, [pc, #192]	; (800a790 <DMA_SetConfig+0x234>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d02c      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a2f      	ldr	r2, [pc, #188]	; (800a794 <DMA_SetConfig+0x238>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d027      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a2d      	ldr	r2, [pc, #180]	; (800a798 <DMA_SetConfig+0x23c>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d022      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a2c      	ldr	r2, [pc, #176]	; (800a79c <DMA_SetConfig+0x240>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d01d      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a2a      	ldr	r2, [pc, #168]	; (800a7a0 <DMA_SetConfig+0x244>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d018      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a29      	ldr	r2, [pc, #164]	; (800a7a4 <DMA_SetConfig+0x248>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d013      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a27      	ldr	r2, [pc, #156]	; (800a7a8 <DMA_SetConfig+0x24c>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d00e      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a26      	ldr	r2, [pc, #152]	; (800a7ac <DMA_SetConfig+0x250>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d009      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a24      	ldr	r2, [pc, #144]	; (800a7b0 <DMA_SetConfig+0x254>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d004      	beq.n	800a72c <DMA_SetConfig+0x1d0>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a23      	ldr	r2, [pc, #140]	; (800a7b4 <DMA_SetConfig+0x258>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d101      	bne.n	800a730 <DMA_SetConfig+0x1d4>
 800a72c:	2301      	movs	r3, #1
 800a72e:	e000      	b.n	800a732 <DMA_SetConfig+0x1d6>
 800a730:	2300      	movs	r3, #0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d059      	beq.n	800a7ea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a73a:	f003 031f 	and.w	r3, r3, #31
 800a73e:	223f      	movs	r2, #63	; 0x3f
 800a740:	409a      	lsls	r2, r3
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a754:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	2b40      	cmp	r3, #64	; 0x40
 800a764:	d138      	bne.n	800a7d8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a776:	e086      	b.n	800a886 <DMA_SetConfig+0x32a>
 800a778:	40020010 	.word	0x40020010
 800a77c:	40020028 	.word	0x40020028
 800a780:	40020040 	.word	0x40020040
 800a784:	40020058 	.word	0x40020058
 800a788:	40020070 	.word	0x40020070
 800a78c:	40020088 	.word	0x40020088
 800a790:	400200a0 	.word	0x400200a0
 800a794:	400200b8 	.word	0x400200b8
 800a798:	40020410 	.word	0x40020410
 800a79c:	40020428 	.word	0x40020428
 800a7a0:	40020440 	.word	0x40020440
 800a7a4:	40020458 	.word	0x40020458
 800a7a8:	40020470 	.word	0x40020470
 800a7ac:	40020488 	.word	0x40020488
 800a7b0:	400204a0 	.word	0x400204a0
 800a7b4:	400204b8 	.word	0x400204b8
 800a7b8:	58025408 	.word	0x58025408
 800a7bc:	5802541c 	.word	0x5802541c
 800a7c0:	58025430 	.word	0x58025430
 800a7c4:	58025444 	.word	0x58025444
 800a7c8:	58025458 	.word	0x58025458
 800a7cc:	5802546c 	.word	0x5802546c
 800a7d0:	58025480 	.word	0x58025480
 800a7d4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	60da      	str	r2, [r3, #12]
}
 800a7e8:	e04d      	b.n	800a886 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a29      	ldr	r2, [pc, #164]	; (800a894 <DMA_SetConfig+0x338>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d022      	beq.n	800a83a <DMA_SetConfig+0x2de>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a27      	ldr	r2, [pc, #156]	; (800a898 <DMA_SetConfig+0x33c>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d01d      	beq.n	800a83a <DMA_SetConfig+0x2de>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a26      	ldr	r2, [pc, #152]	; (800a89c <DMA_SetConfig+0x340>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d018      	beq.n	800a83a <DMA_SetConfig+0x2de>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a24      	ldr	r2, [pc, #144]	; (800a8a0 <DMA_SetConfig+0x344>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d013      	beq.n	800a83a <DMA_SetConfig+0x2de>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a23      	ldr	r2, [pc, #140]	; (800a8a4 <DMA_SetConfig+0x348>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d00e      	beq.n	800a83a <DMA_SetConfig+0x2de>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a21      	ldr	r2, [pc, #132]	; (800a8a8 <DMA_SetConfig+0x34c>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d009      	beq.n	800a83a <DMA_SetConfig+0x2de>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a20      	ldr	r2, [pc, #128]	; (800a8ac <DMA_SetConfig+0x350>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d004      	beq.n	800a83a <DMA_SetConfig+0x2de>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a1e      	ldr	r2, [pc, #120]	; (800a8b0 <DMA_SetConfig+0x354>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d101      	bne.n	800a83e <DMA_SetConfig+0x2e2>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e000      	b.n	800a840 <DMA_SetConfig+0x2e4>
 800a83e:	2300      	movs	r3, #0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d020      	beq.n	800a886 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a848:	f003 031f 	and.w	r3, r3, #31
 800a84c:	2201      	movs	r2, #1
 800a84e:	409a      	lsls	r2, r3
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	2b40      	cmp	r3, #64	; 0x40
 800a862:	d108      	bne.n	800a876 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	60da      	str	r2, [r3, #12]
}
 800a874:	e007      	b.n	800a886 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	60da      	str	r2, [r3, #12]
}
 800a886:	bf00      	nop
 800a888:	371c      	adds	r7, #28
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	58025408 	.word	0x58025408
 800a898:	5802541c 	.word	0x5802541c
 800a89c:	58025430 	.word	0x58025430
 800a8a0:	58025444 	.word	0x58025444
 800a8a4:	58025458 	.word	0x58025458
 800a8a8:	5802546c 	.word	0x5802546c
 800a8ac:	58025480 	.word	0x58025480
 800a8b0:	58025494 	.word	0x58025494

0800a8b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a42      	ldr	r2, [pc, #264]	; (800a9cc <DMA_CalcBaseAndBitshift+0x118>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d04a      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a41      	ldr	r2, [pc, #260]	; (800a9d0 <DMA_CalcBaseAndBitshift+0x11c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d045      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a3f      	ldr	r2, [pc, #252]	; (800a9d4 <DMA_CalcBaseAndBitshift+0x120>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d040      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a3e      	ldr	r2, [pc, #248]	; (800a9d8 <DMA_CalcBaseAndBitshift+0x124>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d03b      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a3c      	ldr	r2, [pc, #240]	; (800a9dc <DMA_CalcBaseAndBitshift+0x128>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d036      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a3b      	ldr	r2, [pc, #236]	; (800a9e0 <DMA_CalcBaseAndBitshift+0x12c>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d031      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a39      	ldr	r2, [pc, #228]	; (800a9e4 <DMA_CalcBaseAndBitshift+0x130>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d02c      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a38      	ldr	r2, [pc, #224]	; (800a9e8 <DMA_CalcBaseAndBitshift+0x134>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d027      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a36      	ldr	r2, [pc, #216]	; (800a9ec <DMA_CalcBaseAndBitshift+0x138>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d022      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a35      	ldr	r2, [pc, #212]	; (800a9f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d01d      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a33      	ldr	r2, [pc, #204]	; (800a9f4 <DMA_CalcBaseAndBitshift+0x140>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d018      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a32      	ldr	r2, [pc, #200]	; (800a9f8 <DMA_CalcBaseAndBitshift+0x144>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d013      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a30      	ldr	r2, [pc, #192]	; (800a9fc <DMA_CalcBaseAndBitshift+0x148>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d00e      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a2f      	ldr	r2, [pc, #188]	; (800aa00 <DMA_CalcBaseAndBitshift+0x14c>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d009      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a2d      	ldr	r2, [pc, #180]	; (800aa04 <DMA_CalcBaseAndBitshift+0x150>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d004      	beq.n	800a95c <DMA_CalcBaseAndBitshift+0xa8>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a2c      	ldr	r2, [pc, #176]	; (800aa08 <DMA_CalcBaseAndBitshift+0x154>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d101      	bne.n	800a960 <DMA_CalcBaseAndBitshift+0xac>
 800a95c:	2301      	movs	r3, #1
 800a95e:	e000      	b.n	800a962 <DMA_CalcBaseAndBitshift+0xae>
 800a960:	2300      	movs	r3, #0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d024      	beq.n	800a9b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	3b10      	subs	r3, #16
 800a96e:	4a27      	ldr	r2, [pc, #156]	; (800aa0c <DMA_CalcBaseAndBitshift+0x158>)
 800a970:	fba2 2303 	umull	r2, r3, r2, r3
 800a974:	091b      	lsrs	r3, r3, #4
 800a976:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	4a24      	ldr	r2, [pc, #144]	; (800aa10 <DMA_CalcBaseAndBitshift+0x15c>)
 800a980:	5cd3      	ldrb	r3, [r2, r3]
 800a982:	461a      	mov	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d908      	bls.n	800a9a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	4b1f      	ldr	r3, [pc, #124]	; (800aa14 <DMA_CalcBaseAndBitshift+0x160>)
 800a996:	4013      	ands	r3, r2
 800a998:	1d1a      	adds	r2, r3, #4
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	659a      	str	r2, [r3, #88]	; 0x58
 800a99e:	e00d      	b.n	800a9bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	4b1b      	ldr	r3, [pc, #108]	; (800aa14 <DMA_CalcBaseAndBitshift+0x160>)
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	6593      	str	r3, [r2, #88]	; 0x58
 800a9ae:	e005      	b.n	800a9bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	40020010 	.word	0x40020010
 800a9d0:	40020028 	.word	0x40020028
 800a9d4:	40020040 	.word	0x40020040
 800a9d8:	40020058 	.word	0x40020058
 800a9dc:	40020070 	.word	0x40020070
 800a9e0:	40020088 	.word	0x40020088
 800a9e4:	400200a0 	.word	0x400200a0
 800a9e8:	400200b8 	.word	0x400200b8
 800a9ec:	40020410 	.word	0x40020410
 800a9f0:	40020428 	.word	0x40020428
 800a9f4:	40020440 	.word	0x40020440
 800a9f8:	40020458 	.word	0x40020458
 800a9fc:	40020470 	.word	0x40020470
 800aa00:	40020488 	.word	0x40020488
 800aa04:	400204a0 	.word	0x400204a0
 800aa08:	400204b8 	.word	0x400204b8
 800aa0c:	aaaaaaab 	.word	0xaaaaaaab
 800aa10:	0801b174 	.word	0x0801b174
 800aa14:	fffffc00 	.word	0xfffffc00

0800aa18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d120      	bne.n	800aa6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	d858      	bhi.n	800aae6 <DMA_CheckFifoParam+0xce>
 800aa34:	a201      	add	r2, pc, #4	; (adr r2, 800aa3c <DMA_CheckFifoParam+0x24>)
 800aa36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3a:	bf00      	nop
 800aa3c:	0800aa4d 	.word	0x0800aa4d
 800aa40:	0800aa5f 	.word	0x0800aa5f
 800aa44:	0800aa4d 	.word	0x0800aa4d
 800aa48:	0800aae7 	.word	0x0800aae7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d048      	beq.n	800aaea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800aa5c:	e045      	b.n	800aaea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa66:	d142      	bne.n	800aaee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800aa6c:	e03f      	b.n	800aaee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa76:	d123      	bne.n	800aac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d838      	bhi.n	800aaf2 <DMA_CheckFifoParam+0xda>
 800aa80:	a201      	add	r2, pc, #4	; (adr r2, 800aa88 <DMA_CheckFifoParam+0x70>)
 800aa82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa86:	bf00      	nop
 800aa88:	0800aa99 	.word	0x0800aa99
 800aa8c:	0800aa9f 	.word	0x0800aa9f
 800aa90:	0800aa99 	.word	0x0800aa99
 800aa94:	0800aab1 	.word	0x0800aab1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	73fb      	strb	r3, [r7, #15]
        break;
 800aa9c:	e030      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d025      	beq.n	800aaf6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800aaae:	e022      	b.n	800aaf6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aab8:	d11f      	bne.n	800aafa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800aabe:	e01c      	b.n	800aafa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d902      	bls.n	800aace <DMA_CheckFifoParam+0xb6>
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d003      	beq.n	800aad4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800aacc:	e018      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	73fb      	strb	r3, [r7, #15]
        break;
 800aad2:	e015      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00e      	beq.n	800aafe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	73fb      	strb	r3, [r7, #15]
    break;
 800aae4:	e00b      	b.n	800aafe <DMA_CheckFifoParam+0xe6>
        break;
 800aae6:	bf00      	nop
 800aae8:	e00a      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
        break;
 800aaea:	bf00      	nop
 800aaec:	e008      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
        break;
 800aaee:	bf00      	nop
 800aaf0:	e006      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
        break;
 800aaf2:	bf00      	nop
 800aaf4:	e004      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
        break;
 800aaf6:	bf00      	nop
 800aaf8:	e002      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
        break;
 800aafa:	bf00      	nop
 800aafc:	e000      	b.n	800ab00 <DMA_CheckFifoParam+0xe8>
    break;
 800aafe:	bf00      	nop
    }
  }

  return status;
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop

0800ab10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a38      	ldr	r2, [pc, #224]	; (800ac04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d022      	beq.n	800ab6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a36      	ldr	r2, [pc, #216]	; (800ac08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d01d      	beq.n	800ab6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a35      	ldr	r2, [pc, #212]	; (800ac0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d018      	beq.n	800ab6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a33      	ldr	r2, [pc, #204]	; (800ac10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d013      	beq.n	800ab6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a32      	ldr	r2, [pc, #200]	; (800ac14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d00e      	beq.n	800ab6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a30      	ldr	r2, [pc, #192]	; (800ac18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d009      	beq.n	800ab6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a2f      	ldr	r2, [pc, #188]	; (800ac1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d004      	beq.n	800ab6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a2d      	ldr	r2, [pc, #180]	; (800ac20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d101      	bne.n	800ab72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e000      	b.n	800ab74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800ab72:	2300      	movs	r3, #0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d01a      	beq.n	800abae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	3b08      	subs	r3, #8
 800ab80:	4a28      	ldr	r2, [pc, #160]	; (800ac24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800ab82:	fba2 2303 	umull	r2, r3, r2, r3
 800ab86:	091b      	lsrs	r3, r3, #4
 800ab88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	4b26      	ldr	r3, [pc, #152]	; (800ac28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800ab8e:	4413      	add	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	461a      	mov	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a24      	ldr	r2, [pc, #144]	; (800ac2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800ab9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f003 031f 	and.w	r3, r3, #31
 800aba4:	2201      	movs	r2, #1
 800aba6:	409a      	lsls	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800abac:	e024      	b.n	800abf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	3b10      	subs	r3, #16
 800abb6:	4a1e      	ldr	r2, [pc, #120]	; (800ac30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800abb8:	fba2 2303 	umull	r2, r3, r2, r3
 800abbc:	091b      	lsrs	r3, r3, #4
 800abbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	4a1c      	ldr	r2, [pc, #112]	; (800ac34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d806      	bhi.n	800abd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	4a1b      	ldr	r2, [pc, #108]	; (800ac38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d902      	bls.n	800abd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3308      	adds	r3, #8
 800abd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4b18      	ldr	r3, [pc, #96]	; (800ac3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800abda:	4413      	add	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	461a      	mov	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a16      	ldr	r2, [pc, #88]	; (800ac40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800abe8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f003 031f 	and.w	r3, r3, #31
 800abf0:	2201      	movs	r2, #1
 800abf2:	409a      	lsls	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800abf8:	bf00      	nop
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	58025408 	.word	0x58025408
 800ac08:	5802541c 	.word	0x5802541c
 800ac0c:	58025430 	.word	0x58025430
 800ac10:	58025444 	.word	0x58025444
 800ac14:	58025458 	.word	0x58025458
 800ac18:	5802546c 	.word	0x5802546c
 800ac1c:	58025480 	.word	0x58025480
 800ac20:	58025494 	.word	0x58025494
 800ac24:	cccccccd 	.word	0xcccccccd
 800ac28:	16009600 	.word	0x16009600
 800ac2c:	58025880 	.word	0x58025880
 800ac30:	aaaaaaab 	.word	0xaaaaaaab
 800ac34:	400204b8 	.word	0x400204b8
 800ac38:	4002040f 	.word	0x4002040f
 800ac3c:	10008200 	.word	0x10008200
 800ac40:	40020880 	.word	0x40020880

0800ac44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d04a      	beq.n	800acf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	d847      	bhi.n	800acf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a25      	ldr	r2, [pc, #148]	; (800acfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d022      	beq.n	800acb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a24      	ldr	r2, [pc, #144]	; (800ad00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d01d      	beq.n	800acb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a22      	ldr	r2, [pc, #136]	; (800ad04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d018      	beq.n	800acb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a21      	ldr	r2, [pc, #132]	; (800ad08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d013      	beq.n	800acb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a1f      	ldr	r2, [pc, #124]	; (800ad0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d00e      	beq.n	800acb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a1e      	ldr	r2, [pc, #120]	; (800ad10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d009      	beq.n	800acb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a1c      	ldr	r2, [pc, #112]	; (800ad14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d004      	beq.n	800acb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a1b      	ldr	r2, [pc, #108]	; (800ad18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d101      	bne.n	800acb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800acb0:	2301      	movs	r3, #1
 800acb2:	e000      	b.n	800acb6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800acb4:	2300      	movs	r3, #0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	4b17      	ldr	r3, [pc, #92]	; (800ad1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800acbe:	4413      	add	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	461a      	mov	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a15      	ldr	r2, [pc, #84]	; (800ad20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800accc:	671a      	str	r2, [r3, #112]	; 0x70
 800acce:	e009      	b.n	800ace4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4b14      	ldr	r3, [pc, #80]	; (800ad24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800acd4:	4413      	add	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	461a      	mov	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a11      	ldr	r2, [pc, #68]	; (800ad28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ace2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	2201      	movs	r2, #1
 800acea:	409a      	lsls	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800acf0:	bf00      	nop
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	58025408 	.word	0x58025408
 800ad00:	5802541c 	.word	0x5802541c
 800ad04:	58025430 	.word	0x58025430
 800ad08:	58025444 	.word	0x58025444
 800ad0c:	58025458 	.word	0x58025458
 800ad10:	5802546c 	.word	0x5802546c
 800ad14:	58025480 	.word	0x58025480
 800ad18:	58025494 	.word	0x58025494
 800ad1c:	1600963f 	.word	0x1600963f
 800ad20:	58025940 	.word	0x58025940
 800ad24:	1000823f 	.word	0x1000823f
 800ad28:	40020940 	.word	0x40020940

0800ad2c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b08a      	sub	sp, #40	; 0x28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800ad40:	2308      	movs	r3, #8
 800ad42:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ad44:	4b40      	ldr	r3, [pc, #256]	; (800ae48 <HAL_FLASH_Program+0x11c>)
 800ad46:	7d1b      	ldrb	r3, [r3, #20]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d101      	bne.n	800ad50 <HAL_FLASH_Program+0x24>
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	e076      	b.n	800ae3e <HAL_FLASH_Program+0x112>
 800ad50:	4b3d      	ldr	r3, [pc, #244]	; (800ae48 <HAL_FLASH_Program+0x11c>)
 800ad52:	2201      	movs	r2, #1
 800ad54:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad5c:	d306      	bcc.n	800ad6c <HAL_FLASH_Program+0x40>
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800ad64:	d202      	bcs.n	800ad6c <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800ad66:	2301      	movs	r3, #1
 800ad68:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800ad6a:	e00c      	b.n	800ad86 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800ad72:	d306      	bcc.n	800ad82 <HAL_FLASH_Program+0x56>
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800ad7a:	d202      	bcs.n	800ad82 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	61bb      	str	r3, [r7, #24]
 800ad80:	e001      	b.n	800ad86 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e05b      	b.n	800ae3e <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ad86:	4b30      	ldr	r3, [pc, #192]	; (800ae48 <HAL_FLASH_Program+0x11c>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800ad8c:	69b9      	ldr	r1, [r7, #24]
 800ad8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad92:	f000 f897 	bl	800aec4 <FLASH_WaitForLastOperation>
 800ad96:	4603      	mov	r3, r0
 800ad98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800ad9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d147      	bne.n	800ae34 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d106      	bne.n	800adb8 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800adaa:	4b28      	ldr	r3, [pc, #160]	; (800ae4c <HAL_FLASH_Program+0x120>)
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	4a27      	ldr	r2, [pc, #156]	; (800ae4c <HAL_FLASH_Program+0x120>)
 800adb0:	f043 0302 	orr.w	r3, r3, #2
 800adb4:	60d3      	str	r3, [r2, #12]
 800adb6:	e007      	b.n	800adc8 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800adb8:	4b24      	ldr	r3, [pc, #144]	; (800ae4c <HAL_FLASH_Program+0x120>)
 800adba:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800adbe:	4a23      	ldr	r2, [pc, #140]	; (800ae4c <HAL_FLASH_Program+0x120>)
 800adc0:	f043 0302 	orr.w	r3, r3, #2
 800adc4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800adc8:	f3bf 8f6f 	isb	sy
}
 800adcc:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800adce:	f3bf 8f4f 	dsb	sy
}
 800add2:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	3304      	adds	r3, #4
 800ade0:	623b      	str	r3, [r7, #32]
        src_addr++;
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	3304      	adds	r3, #4
 800ade6:	61fb      	str	r3, [r7, #28]
        row_index--;
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
 800adea:	3b01      	subs	r3, #1
 800adec:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800adee:	7dfb      	ldrb	r3, [r7, #23]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1ef      	bne.n	800add4 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800adf4:	f3bf 8f6f 	isb	sy
}
 800adf8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800adfa:	f3bf 8f4f 	dsb	sy
}
 800adfe:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800ae00:	69b9      	ldr	r1, [r7, #24]
 800ae02:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae06:	f000 f85d 	bl	800aec4 <FLASH_WaitForLastOperation>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d106      	bne.n	800ae24 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800ae16:	4b0d      	ldr	r3, [pc, #52]	; (800ae4c <HAL_FLASH_Program+0x120>)
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	4a0c      	ldr	r2, [pc, #48]	; (800ae4c <HAL_FLASH_Program+0x120>)
 800ae1c:	f023 0302 	bic.w	r3, r3, #2
 800ae20:	60d3      	str	r3, [r2, #12]
 800ae22:	e007      	b.n	800ae34 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800ae24:	4b09      	ldr	r3, [pc, #36]	; (800ae4c <HAL_FLASH_Program+0x120>)
 800ae26:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae2a:	4a08      	ldr	r2, [pc, #32]	; (800ae4c <HAL_FLASH_Program+0x120>)
 800ae2c:	f023 0302 	bic.w	r3, r3, #2
 800ae30:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ae34:	4b04      	ldr	r3, [pc, #16]	; (800ae48 <HAL_FLASH_Program+0x11c>)
 800ae36:	2200      	movs	r2, #0
 800ae38:	751a      	strb	r2, [r3, #20]

  return status;
 800ae3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3728      	adds	r7, #40	; 0x28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	24002000 	.word	0x24002000
 800ae4c:	52002000 	.word	0x52002000

0800ae50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ae50:	b480      	push	{r7}
 800ae52:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ae54:	4b18      	ldr	r3, [pc, #96]	; (800aeb8 <HAL_FLASH_Unlock+0x68>)
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	f003 0301 	and.w	r3, r3, #1
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00d      	beq.n	800ae7c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800ae60:	4b15      	ldr	r3, [pc, #84]	; (800aeb8 <HAL_FLASH_Unlock+0x68>)
 800ae62:	4a16      	ldr	r2, [pc, #88]	; (800aebc <HAL_FLASH_Unlock+0x6c>)
 800ae64:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800ae66:	4b14      	ldr	r3, [pc, #80]	; (800aeb8 <HAL_FLASH_Unlock+0x68>)
 800ae68:	4a15      	ldr	r2, [pc, #84]	; (800aec0 <HAL_FLASH_Unlock+0x70>)
 800ae6a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ae6c:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <HAL_FLASH_Unlock+0x68>)
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f003 0301 	and.w	r3, r3, #1
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e018      	b.n	800aeae <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800ae7c:	4b0e      	ldr	r3, [pc, #56]	; (800aeb8 <HAL_FLASH_Unlock+0x68>)
 800ae7e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d010      	beq.n	800aeac <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800ae8a:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <HAL_FLASH_Unlock+0x68>)
 800ae8c:	4a0b      	ldr	r2, [pc, #44]	; (800aebc <HAL_FLASH_Unlock+0x6c>)
 800ae8e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800ae92:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <HAL_FLASH_Unlock+0x68>)
 800ae94:	4a0a      	ldr	r2, [pc, #40]	; (800aec0 <HAL_FLASH_Unlock+0x70>)
 800ae96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800ae9a:	4b07      	ldr	r3, [pc, #28]	; (800aeb8 <HAL_FLASH_Unlock+0x68>)
 800ae9c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e000      	b.n	800aeae <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	52002000 	.word	0x52002000
 800aebc:	45670123 	.word	0x45670123
 800aec0:	cdef89ab 	.word	0xcdef89ab

0800aec4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800aece:	2304      	movs	r3, #4
 800aed0:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800aed6:	f7fa ffab 	bl	8005e30 <HAL_GetTick>
 800aeda:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d113      	bne.n	800af0a <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800aee2:	4b41      	ldr	r3, [pc, #260]	; (800afe8 <FLASH_WaitForLastOperation+0x124>)
 800aee4:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aee6:	e010      	b.n	800af0a <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeee:	d00c      	beq.n	800af0a <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aef0:	f7fa ff9e 	bl	8005e30 <HAL_GetTick>
 800aef4:	4602      	mov	r2, r0
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d302      	bcc.n	800af06 <FLASH_WaitForLastOperation+0x42>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e06a      	b.n	800afe0 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	4b37      	ldr	r3, [pc, #220]	; (800afec <FLASH_WaitForLastOperation+0x128>)
 800af0e:	4013      	ands	r3, r2
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	429a      	cmp	r2, r3
 800af14:	d10a      	bne.n	800af2c <FLASH_WaitForLastOperation+0x68>
 800af16:	4b36      	ldr	r3, [pc, #216]	; (800aff0 <FLASH_WaitForLastOperation+0x12c>)
 800af18:	691a      	ldr	r2, [r3, #16]
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4013      	ands	r3, r2
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	429a      	cmp	r2, r3
 800af22:	bf0c      	ite	eq
 800af24:	2301      	moveq	r3, #1
 800af26:	2300      	movne	r3, #0
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	e00c      	b.n	800af46 <FLASH_WaitForLastOperation+0x82>
 800af2c:	4b30      	ldr	r3, [pc, #192]	; (800aff0 <FLASH_WaitForLastOperation+0x12c>)
 800af2e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800af32:	43da      	mvns	r2, r3
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	4013      	ands	r3, r2
 800af38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bf0c      	ite	eq
 800af40:	2301      	moveq	r3, #1
 800af42:	2300      	movne	r3, #0
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1ce      	bne.n	800aee8 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d105      	bne.n	800af5c <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800af50:	4b27      	ldr	r3, [pc, #156]	; (800aff0 <FLASH_WaitForLastOperation+0x12c>)
 800af52:	691a      	ldr	r2, [r3, #16]
 800af54:	4b27      	ldr	r3, [pc, #156]	; (800aff4 <FLASH_WaitForLastOperation+0x130>)
 800af56:	4013      	ands	r3, r2
 800af58:	613b      	str	r3, [r7, #16]
 800af5a:	e007      	b.n	800af6c <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800af5c:	4b24      	ldr	r3, [pc, #144]	; (800aff0 <FLASH_WaitForLastOperation+0x12c>)
 800af5e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800af62:	4b24      	ldr	r3, [pc, #144]	; (800aff4 <FLASH_WaitForLastOperation+0x130>)
 800af64:	4013      	ands	r3, r2
 800af66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af6a:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d017      	beq.n	800afa6 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800af76:	4b20      	ldr	r3, [pc, #128]	; (800aff8 <FLASH_WaitForLastOperation+0x134>)
 800af78:	699a      	ldr	r2, [r3, #24]
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	4a1e      	ldr	r2, [pc, #120]	; (800aff8 <FLASH_WaitForLastOperation+0x134>)
 800af80:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	4b19      	ldr	r3, [pc, #100]	; (800afec <FLASH_WaitForLastOperation+0x128>)
 800af86:	4013      	ands	r3, r2
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d103      	bne.n	800af96 <FLASH_WaitForLastOperation+0xd2>
 800af8e:	4a18      	ldr	r2, [pc, #96]	; (800aff0 <FLASH_WaitForLastOperation+0x12c>)
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	6153      	str	r3, [r2, #20]
 800af94:	e005      	b.n	800afa2 <FLASH_WaitForLastOperation+0xde>
 800af96:	4a16      	ldr	r2, [pc, #88]	; (800aff0 <FLASH_WaitForLastOperation+0x12c>)
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af9e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	e01c      	b.n	800afe0 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d10b      	bne.n	800afc4 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800afac:	4b10      	ldr	r3, [pc, #64]	; (800aff0 <FLASH_WaitForLastOperation+0x12c>)
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afb8:	d111      	bne.n	800afde <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800afba:	4b0d      	ldr	r3, [pc, #52]	; (800aff0 <FLASH_WaitForLastOperation+0x12c>)
 800afbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800afc0:	615a      	str	r2, [r3, #20]
 800afc2:	e00c      	b.n	800afde <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800afc4:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <FLASH_WaitForLastOperation+0x12c>)
 800afc6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800afca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afd2:	d104      	bne.n	800afde <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800afd4:	4b06      	ldr	r3, [pc, #24]	; (800aff0 <FLASH_WaitForLastOperation+0x12c>)
 800afd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800afda:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3718      	adds	r7, #24
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	80000004 	.word	0x80000004
 800afec:	1fef000f 	.word	0x1fef000f
 800aff0:	52002000 	.word	0x52002000
 800aff4:	17ee0000 	.word	0x17ee0000
 800aff8:	24002000 	.word	0x24002000

0800affc <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b00a:	4b5e      	ldr	r3, [pc, #376]	; (800b184 <HAL_FLASHEx_Erase+0x188>)
 800b00c:	7d1b      	ldrb	r3, [r3, #20]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d101      	bne.n	800b016 <HAL_FLASHEx_Erase+0x1a>
 800b012:	2302      	movs	r3, #2
 800b014:	e0b2      	b.n	800b17c <HAL_FLASHEx_Erase+0x180>
 800b016:	4b5b      	ldr	r3, [pc, #364]	; (800b184 <HAL_FLASHEx_Erase+0x188>)
 800b018:	2201      	movs	r2, #1
 800b01a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b01c:	4b59      	ldr	r3, [pc, #356]	; (800b184 <HAL_FLASHEx_Erase+0x188>)
 800b01e:	2200      	movs	r2, #0
 800b020:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	f003 0301 	and.w	r3, r3, #1
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d009      	beq.n	800b042 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b02e:	2101      	movs	r1, #1
 800b030:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b034:	f7ff ff46 	bl	800aec4 <FLASH_WaitForLastOperation>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	f003 0302 	and.w	r3, r3, #2
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d009      	beq.n	800b062 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b04e:	2102      	movs	r1, #2
 800b050:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b054:	f7ff ff36 	bl	800aec4 <FLASH_WaitForLastOperation>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d001      	beq.n	800b062 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800b05e:	2301      	movs	r3, #1
 800b060:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f040 8085 	bne.w	800b174 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d136      	bne.n	800b0e0 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	691a      	ldr	r2, [r3, #16]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	4619      	mov	r1, r3
 800b07c:	4610      	mov	r0, r2
 800b07e:	f000 f887 	bl	800b190 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00f      	beq.n	800b0ae <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b08e:	2101      	movs	r1, #1
 800b090:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b094:	f7ff ff16 	bl	800aec4 <FLASH_WaitForLastOperation>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800b0a2:	4b39      	ldr	r3, [pc, #228]	; (800b188 <HAL_FLASHEx_Erase+0x18c>)
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	4a38      	ldr	r2, [pc, #224]	; (800b188 <HAL_FLASHEx_Erase+0x18c>)
 800b0a8:	f023 0308 	bic.w	r3, r3, #8
 800b0ac:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	f003 0302 	and.w	r3, r3, #2
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d05c      	beq.n	800b174 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b0ba:	2102      	movs	r1, #2
 800b0bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b0c0:	f7ff ff00 	bl	800aec4 <FLASH_WaitForLastOperation>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800b0ce:	4b2e      	ldr	r3, [pc, #184]	; (800b188 <HAL_FLASHEx_Erase+0x18c>)
 800b0d0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b0d4:	4a2c      	ldr	r2, [pc, #176]	; (800b188 <HAL_FLASHEx_Erase+0x18c>)
 800b0d6:	f023 0308 	bic.w	r3, r3, #8
 800b0da:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800b0de:	e049      	b.n	800b174 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0e6:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	60bb      	str	r3, [r7, #8]
 800b0ee:	e039      	b.n	800b164 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6859      	ldr	r1, [r3, #4]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	68b8      	ldr	r0, [r7, #8]
 800b0fc:	f000 f8b2 	bl	800b264 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00c      	beq.n	800b126 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800b10c:	2101      	movs	r1, #1
 800b10e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b112:	f7ff fed7 	bl	800aec4 <FLASH_WaitForLastOperation>
 800b116:	4603      	mov	r3, r0
 800b118:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b11a:	4b1b      	ldr	r3, [pc, #108]	; (800b188 <HAL_FLASHEx_Erase+0x18c>)
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	491a      	ldr	r1, [pc, #104]	; (800b188 <HAL_FLASHEx_Erase+0x18c>)
 800b120:	4b1a      	ldr	r3, [pc, #104]	; (800b18c <HAL_FLASHEx_Erase+0x190>)
 800b122:	4013      	ands	r3, r2
 800b124:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00e      	beq.n	800b150 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800b132:	2102      	movs	r1, #2
 800b134:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b138:	f7ff fec4 	bl	800aec4 <FLASH_WaitForLastOperation>
 800b13c:	4603      	mov	r3, r0
 800b13e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b140:	4b11      	ldr	r3, [pc, #68]	; (800b188 <HAL_FLASHEx_Erase+0x18c>)
 800b142:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b146:	4910      	ldr	r1, [pc, #64]	; (800b188 <HAL_FLASHEx_Erase+0x18c>)
 800b148:	4b10      	ldr	r3, [pc, #64]	; (800b18c <HAL_FLASHEx_Erase+0x190>)
 800b14a:	4013      	ands	r3, r2
 800b14c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	601a      	str	r2, [r3, #0]
          break;
 800b15c:	e00a      	b.n	800b174 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	3301      	adds	r3, #1
 800b162:	60bb      	str	r3, [r7, #8]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68da      	ldr	r2, [r3, #12]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	4413      	add	r3, r2
 800b16e:	68ba      	ldr	r2, [r7, #8]
 800b170:	429a      	cmp	r2, r3
 800b172:	d3bd      	bcc.n	800b0f0 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b174:	4b03      	ldr	r3, [pc, #12]	; (800b184 <HAL_FLASHEx_Erase+0x188>)
 800b176:	2200      	movs	r2, #0
 800b178:	751a      	strb	r2, [r3, #20]

  return status;
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	24002000 	.word	0x24002000
 800b188:	52002000 	.word	0x52002000
 800b18c:	fffff8fb 	.word	0xfffff8fb

0800b190 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	f003 0303 	and.w	r3, r3, #3
 800b1a0:	2b03      	cmp	r3, #3
 800b1a2:	d122      	bne.n	800b1ea <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b1a4:	4b2e      	ldr	r3, [pc, #184]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	4a2d      	ldr	r2, [pc, #180]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b1ae:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b1b0:	4b2b      	ldr	r3, [pc, #172]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b1b6:	4a2a      	ldr	r2, [pc, #168]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b1bc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800b1c0:	4b27      	ldr	r3, [pc, #156]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1c2:	68da      	ldr	r2, [r3, #12]
 800b1c4:	4926      	ldr	r1, [pc, #152]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800b1cc:	4b24      	ldr	r3, [pc, #144]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1ce:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b1d2:	4923      	ldr	r1, [pc, #140]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800b1dc:	4b20      	ldr	r3, [pc, #128]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	4a1f      	ldr	r2, [pc, #124]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1e2:	f043 0310 	orr.w	r3, r3, #16
 800b1e6:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800b1e8:	e033      	b.n	800b252 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	f003 0301 	and.w	r3, r3, #1
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d011      	beq.n	800b218 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b1f4:	4b1a      	ldr	r3, [pc, #104]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	4a19      	ldr	r2, [pc, #100]	; (800b260 <FLASH_MassErase+0xd0>)
 800b1fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b1fe:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800b200:	4b17      	ldr	r3, [pc, #92]	; (800b260 <FLASH_MassErase+0xd0>)
 800b202:	68da      	ldr	r2, [r3, #12]
 800b204:	4916      	ldr	r1, [pc, #88]	; (800b260 <FLASH_MassErase+0xd0>)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4313      	orrs	r3, r2
 800b20a:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800b20c:	4b14      	ldr	r3, [pc, #80]	; (800b260 <FLASH_MassErase+0xd0>)
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	4a13      	ldr	r2, [pc, #76]	; (800b260 <FLASH_MassErase+0xd0>)
 800b212:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b216:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	f003 0302 	and.w	r3, r3, #2
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d017      	beq.n	800b252 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b222:	4b0f      	ldr	r3, [pc, #60]	; (800b260 <FLASH_MassErase+0xd0>)
 800b224:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b228:	4a0d      	ldr	r2, [pc, #52]	; (800b260 <FLASH_MassErase+0xd0>)
 800b22a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b22e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800b232:	4b0b      	ldr	r3, [pc, #44]	; (800b260 <FLASH_MassErase+0xd0>)
 800b234:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b238:	4909      	ldr	r1, [pc, #36]	; (800b260 <FLASH_MassErase+0xd0>)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800b242:	4b07      	ldr	r3, [pc, #28]	; (800b260 <FLASH_MassErase+0xd0>)
 800b244:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b248:	4a05      	ldr	r2, [pc, #20]	; (800b260 <FLASH_MassErase+0xd0>)
 800b24a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b24e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	52002000 	.word	0x52002000

0800b264 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	f003 0301 	and.w	r3, r3, #1
 800b276:	2b00      	cmp	r3, #0
 800b278:	d010      	beq.n	800b29c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b27a:	4b18      	ldr	r3, [pc, #96]	; (800b2dc <FLASH_Erase_Sector+0x78>)
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	4a17      	ldr	r2, [pc, #92]	; (800b2dc <FLASH_Erase_Sector+0x78>)
 800b280:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b284:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b286:	4b15      	ldr	r3, [pc, #84]	; (800b2dc <FLASH_Erase_Sector+0x78>)
 800b288:	68da      	ldr	r2, [r3, #12]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	0219      	lsls	r1, r3, #8
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	430b      	orrs	r3, r1
 800b292:	4313      	orrs	r3, r2
 800b294:	4a11      	ldr	r2, [pc, #68]	; (800b2dc <FLASH_Erase_Sector+0x78>)
 800b296:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b29a:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	f003 0302 	and.w	r3, r3, #2
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d014      	beq.n	800b2d0 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b2a6:	4b0d      	ldr	r3, [pc, #52]	; (800b2dc <FLASH_Erase_Sector+0x78>)
 800b2a8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b2ac:	4a0b      	ldr	r2, [pc, #44]	; (800b2dc <FLASH_Erase_Sector+0x78>)
 800b2ae:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b2b2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b2b6:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <FLASH_Erase_Sector+0x78>)
 800b2b8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	0219      	lsls	r1, r3, #8
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	430b      	orrs	r3, r1
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	4a05      	ldr	r2, [pc, #20]	; (800b2dc <FLASH_Erase_Sector+0x78>)
 800b2c8:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b2cc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800b2d0:	bf00      	nop
 800b2d2:	3714      	adds	r7, #20
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	52002000 	.word	0x52002000

0800b2e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b089      	sub	sp, #36	; 0x24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b2ee:	4b89      	ldr	r3, [pc, #548]	; (800b514 <HAL_GPIO_Init+0x234>)
 800b2f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b2f2:	e194      	b.n	800b61e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b300:	4013      	ands	r3, r2
 800b302:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	2b00      	cmp	r3, #0
 800b308:	f000 8186 	beq.w	800b618 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	f003 0303 	and.w	r3, r3, #3
 800b314:	2b01      	cmp	r3, #1
 800b316:	d005      	beq.n	800b324 <HAL_GPIO_Init+0x44>
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	f003 0303 	and.w	r3, r3, #3
 800b320:	2b02      	cmp	r3, #2
 800b322:	d130      	bne.n	800b386 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	005b      	lsls	r3, r3, #1
 800b32e:	2203      	movs	r2, #3
 800b330:	fa02 f303 	lsl.w	r3, r2, r3
 800b334:	43db      	mvns	r3, r3
 800b336:	69ba      	ldr	r2, [r7, #24]
 800b338:	4013      	ands	r3, r2
 800b33a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	68da      	ldr	r2, [r3, #12]
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	fa02 f303 	lsl.w	r3, r2, r3
 800b348:	69ba      	ldr	r2, [r7, #24]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	69ba      	ldr	r2, [r7, #24]
 800b352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b35a:	2201      	movs	r2, #1
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	fa02 f303 	lsl.w	r3, r2, r3
 800b362:	43db      	mvns	r3, r3
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	4013      	ands	r3, r2
 800b368:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	091b      	lsrs	r3, r3, #4
 800b370:	f003 0201 	and.w	r2, r3, #1
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	fa02 f303 	lsl.w	r3, r2, r3
 800b37a:	69ba      	ldr	r2, [r7, #24]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	69ba      	ldr	r2, [r7, #24]
 800b384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f003 0303 	and.w	r3, r3, #3
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d017      	beq.n	800b3c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	005b      	lsls	r3, r3, #1
 800b39c:	2203      	movs	r2, #3
 800b39e:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a2:	43db      	mvns	r3, r3
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	689a      	ldr	r2, [r3, #8]
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b6:	69ba      	ldr	r2, [r7, #24]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	69ba      	ldr	r2, [r7, #24]
 800b3c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f003 0303 	and.w	r3, r3, #3
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d123      	bne.n	800b416 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	08da      	lsrs	r2, r3, #3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	3208      	adds	r2, #8
 800b3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	f003 0307 	and.w	r3, r3, #7
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	220f      	movs	r2, #15
 800b3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ea:	43db      	mvns	r3, r3
 800b3ec:	69ba      	ldr	r2, [r7, #24]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	691a      	ldr	r2, [r3, #16]
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	f003 0307 	and.w	r3, r3, #7
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	4313      	orrs	r3, r2
 800b406:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	08da      	lsrs	r2, r3, #3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3208      	adds	r2, #8
 800b410:	69b9      	ldr	r1, [r7, #24]
 800b412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	2203      	movs	r2, #3
 800b422:	fa02 f303 	lsl.w	r3, r2, r3
 800b426:	43db      	mvns	r3, r3
 800b428:	69ba      	ldr	r2, [r7, #24]
 800b42a:	4013      	ands	r3, r2
 800b42c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	f003 0203 	and.w	r2, r3, #3
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	005b      	lsls	r3, r3, #1
 800b43a:	fa02 f303 	lsl.w	r3, r2, r3
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	4313      	orrs	r3, r2
 800b442:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 80e0 	beq.w	800b618 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b458:	4b2f      	ldr	r3, [pc, #188]	; (800b518 <HAL_GPIO_Init+0x238>)
 800b45a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b45e:	4a2e      	ldr	r2, [pc, #184]	; (800b518 <HAL_GPIO_Init+0x238>)
 800b460:	f043 0302 	orr.w	r3, r3, #2
 800b464:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b468:	4b2b      	ldr	r3, [pc, #172]	; (800b518 <HAL_GPIO_Init+0x238>)
 800b46a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b46e:	f003 0302 	and.w	r3, r3, #2
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b476:	4a29      	ldr	r2, [pc, #164]	; (800b51c <HAL_GPIO_Init+0x23c>)
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	089b      	lsrs	r3, r3, #2
 800b47c:	3302      	adds	r3, #2
 800b47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	220f      	movs	r2, #15
 800b48e:	fa02 f303 	lsl.w	r3, r2, r3
 800b492:	43db      	mvns	r3, r3
 800b494:	69ba      	ldr	r2, [r7, #24]
 800b496:	4013      	ands	r3, r2
 800b498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a20      	ldr	r2, [pc, #128]	; (800b520 <HAL_GPIO_Init+0x240>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d052      	beq.n	800b548 <HAL_GPIO_Init+0x268>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a1f      	ldr	r2, [pc, #124]	; (800b524 <HAL_GPIO_Init+0x244>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d031      	beq.n	800b50e <HAL_GPIO_Init+0x22e>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a1e      	ldr	r2, [pc, #120]	; (800b528 <HAL_GPIO_Init+0x248>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d02b      	beq.n	800b50a <HAL_GPIO_Init+0x22a>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a1d      	ldr	r2, [pc, #116]	; (800b52c <HAL_GPIO_Init+0x24c>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d025      	beq.n	800b506 <HAL_GPIO_Init+0x226>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a1c      	ldr	r2, [pc, #112]	; (800b530 <HAL_GPIO_Init+0x250>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d01f      	beq.n	800b502 <HAL_GPIO_Init+0x222>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a1b      	ldr	r2, [pc, #108]	; (800b534 <HAL_GPIO_Init+0x254>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d019      	beq.n	800b4fe <HAL_GPIO_Init+0x21e>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a1a      	ldr	r2, [pc, #104]	; (800b538 <HAL_GPIO_Init+0x258>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d013      	beq.n	800b4fa <HAL_GPIO_Init+0x21a>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a19      	ldr	r2, [pc, #100]	; (800b53c <HAL_GPIO_Init+0x25c>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d00d      	beq.n	800b4f6 <HAL_GPIO_Init+0x216>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a18      	ldr	r2, [pc, #96]	; (800b540 <HAL_GPIO_Init+0x260>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d007      	beq.n	800b4f2 <HAL_GPIO_Init+0x212>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a17      	ldr	r2, [pc, #92]	; (800b544 <HAL_GPIO_Init+0x264>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d101      	bne.n	800b4ee <HAL_GPIO_Init+0x20e>
 800b4ea:	2309      	movs	r3, #9
 800b4ec:	e02d      	b.n	800b54a <HAL_GPIO_Init+0x26a>
 800b4ee:	230a      	movs	r3, #10
 800b4f0:	e02b      	b.n	800b54a <HAL_GPIO_Init+0x26a>
 800b4f2:	2308      	movs	r3, #8
 800b4f4:	e029      	b.n	800b54a <HAL_GPIO_Init+0x26a>
 800b4f6:	2307      	movs	r3, #7
 800b4f8:	e027      	b.n	800b54a <HAL_GPIO_Init+0x26a>
 800b4fa:	2306      	movs	r3, #6
 800b4fc:	e025      	b.n	800b54a <HAL_GPIO_Init+0x26a>
 800b4fe:	2305      	movs	r3, #5
 800b500:	e023      	b.n	800b54a <HAL_GPIO_Init+0x26a>
 800b502:	2304      	movs	r3, #4
 800b504:	e021      	b.n	800b54a <HAL_GPIO_Init+0x26a>
 800b506:	2303      	movs	r3, #3
 800b508:	e01f      	b.n	800b54a <HAL_GPIO_Init+0x26a>
 800b50a:	2302      	movs	r3, #2
 800b50c:	e01d      	b.n	800b54a <HAL_GPIO_Init+0x26a>
 800b50e:	2301      	movs	r3, #1
 800b510:	e01b      	b.n	800b54a <HAL_GPIO_Init+0x26a>
 800b512:	bf00      	nop
 800b514:	58000080 	.word	0x58000080
 800b518:	58024400 	.word	0x58024400
 800b51c:	58000400 	.word	0x58000400
 800b520:	58020000 	.word	0x58020000
 800b524:	58020400 	.word	0x58020400
 800b528:	58020800 	.word	0x58020800
 800b52c:	58020c00 	.word	0x58020c00
 800b530:	58021000 	.word	0x58021000
 800b534:	58021400 	.word	0x58021400
 800b538:	58021800 	.word	0x58021800
 800b53c:	58021c00 	.word	0x58021c00
 800b540:	58022000 	.word	0x58022000
 800b544:	58022400 	.word	0x58022400
 800b548:	2300      	movs	r3, #0
 800b54a:	69fa      	ldr	r2, [r7, #28]
 800b54c:	f002 0203 	and.w	r2, r2, #3
 800b550:	0092      	lsls	r2, r2, #2
 800b552:	4093      	lsls	r3, r2
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	4313      	orrs	r3, r2
 800b558:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b55a:	4938      	ldr	r1, [pc, #224]	; (800b63c <HAL_GPIO_Init+0x35c>)
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	089b      	lsrs	r3, r3, #2
 800b560:	3302      	adds	r3, #2
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	43db      	mvns	r3, r3
 800b574:	69ba      	ldr	r2, [r7, #24]
 800b576:	4013      	ands	r3, r2
 800b578:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b58e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	43db      	mvns	r3, r3
 800b5a2:	69ba      	ldr	r2, [r7, #24]
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d003      	beq.n	800b5bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b5b4:	69ba      	ldr	r2, [r7, #24]
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b5bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	43db      	mvns	r3, r3
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b5e0:	69ba      	ldr	r2, [r7, #24]
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	69ba      	ldr	r2, [r7, #24]
 800b5ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	43db      	mvns	r3, r3
 800b5f8:	69ba      	ldr	r2, [r7, #24]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d003      	beq.n	800b612 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b60a:	69ba      	ldr	r2, [r7, #24]
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	4313      	orrs	r3, r2
 800b610:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	69ba      	ldr	r2, [r7, #24]
 800b616:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	3301      	adds	r3, #1
 800b61c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	fa22 f303 	lsr.w	r3, r2, r3
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f47f ae63 	bne.w	800b2f4 <HAL_GPIO_Init+0x14>
  }
}
 800b62e:	bf00      	nop
 800b630:	bf00      	nop
 800b632:	3724      	adds	r7, #36	; 0x24
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	58000400 	.word	0x58000400

0800b640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	460b      	mov	r3, r1
 800b64a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	691a      	ldr	r2, [r3, #16]
 800b650:	887b      	ldrh	r3, [r7, #2]
 800b652:	4013      	ands	r3, r2
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b658:	2301      	movs	r3, #1
 800b65a:	73fb      	strb	r3, [r7, #15]
 800b65c:	e001      	b.n	800b662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b65e:	2300      	movs	r3, #0
 800b660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b662:	7bfb      	ldrb	r3, [r7, #15]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	807b      	strh	r3, [r7, #2]
 800b67c:	4613      	mov	r3, r2
 800b67e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b680:	787b      	ldrb	r3, [r7, #1]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d003      	beq.n	800b68e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b686:	887a      	ldrh	r2, [r7, #2]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b68c:	e003      	b.n	800b696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b68e:	887b      	ldrh	r3, [r7, #2]
 800b690:	041a      	lsls	r2, r3, #16
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	619a      	str	r2, [r3, #24]
}
 800b696:	bf00      	nop
 800b698:	370c      	adds	r7, #12
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
	...

0800b6a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d101      	bne.n	800b6b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e08b      	b.n	800b7ce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d106      	bne.n	800b6d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f7f7 f9cc 	bl	8002a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2224      	movs	r2, #36	; 0x24
 800b6d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f022 0201 	bic.w	r2, r2, #1
 800b6e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b6f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	689a      	ldr	r2, [r3, #8]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b704:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d107      	bne.n	800b71e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	689a      	ldr	r2, [r3, #8]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b71a:	609a      	str	r2, [r3, #8]
 800b71c:	e006      	b.n	800b72c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	689a      	ldr	r2, [r3, #8]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b72a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	2b02      	cmp	r3, #2
 800b732:	d108      	bne.n	800b746 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b742:	605a      	str	r2, [r3, #4]
 800b744:	e007      	b.n	800b756 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b754:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6859      	ldr	r1, [r3, #4]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	4b1d      	ldr	r3, [pc, #116]	; (800b7d8 <HAL_I2C_Init+0x134>)
 800b762:	430b      	orrs	r3, r1
 800b764:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68da      	ldr	r2, [r3, #12]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b774:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	691a      	ldr	r2, [r3, #16]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	699b      	ldr	r3, [r3, #24]
 800b786:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	430a      	orrs	r2, r1
 800b78e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	69d9      	ldr	r1, [r3, #28]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a1a      	ldr	r2, [r3, #32]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	430a      	orrs	r2, r1
 800b79e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f042 0201 	orr.w	r2, r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2220      	movs	r2, #32
 800b7ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	02008000 	.word	0x02008000

0800b7dc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08a      	sub	sp, #40	; 0x28
 800b7e0:	af02      	add	r7, sp, #8
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	607a      	str	r2, [r7, #4]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	817b      	strh	r3, [r7, #10]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	2b20      	cmp	r3, #32
 800b7fe:	f040 80ef 	bne.w	800b9e0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b80c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b810:	d101      	bne.n	800b816 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b812:	2302      	movs	r3, #2
 800b814:	e0e5      	b.n	800b9e2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d101      	bne.n	800b824 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b820:	2302      	movs	r3, #2
 800b822:	e0de      	b.n	800b9e2 <HAL_I2C_Master_Transmit_DMA+0x206>
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2221      	movs	r2, #33	; 0x21
 800b830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2210      	movs	r2, #16
 800b838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	893a      	ldrh	r2, [r7, #8]
 800b84c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	4a66      	ldr	r2, [pc, #408]	; (800b9ec <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b852:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	4a66      	ldr	r2, [pc, #408]	; (800b9f0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b858:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b85e:	b29b      	uxth	r3, r3
 800b860:	2bff      	cmp	r3, #255	; 0xff
 800b862:	d906      	bls.n	800b872 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	22ff      	movs	r2, #255	; 0xff
 800b868:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b86a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b86e:	61fb      	str	r3, [r7, #28]
 800b870:	e007      	b.n	800b882 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b876:	b29a      	uxth	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b87c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b880:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b886:	2b00      	cmp	r3, #0
 800b888:	d01a      	beq.n	800b8c0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88e:	781a      	ldrb	r2, [r3, #0]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89a:	1c5a      	adds	r2, r3, #1
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8a4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d074      	beq.n	800b9b2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d022      	beq.n	800b916 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d4:	4a47      	ldr	r2, [pc, #284]	; (800b9f4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b8d6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8dc:	4a46      	ldr	r2, [pc, #280]	; (800b9f8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b8de:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b900:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b906:	f7fc ff17 	bl	8008738 <HAL_DMA_Start_IT>
 800b90a:	4603      	mov	r3, r0
 800b90c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b90e:	7dfb      	ldrb	r3, [r7, #23]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d13a      	bne.n	800b98a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b914:	e013      	b.n	800b93e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2220      	movs	r2, #32
 800b91a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b92a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e051      	b.n	800b9e2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b942:	b2db      	uxtb	r3, r3
 800b944:	3301      	adds	r3, #1
 800b946:	b2da      	uxtb	r2, r3
 800b948:	8979      	ldrh	r1, [r7, #10]
 800b94a:	4b2c      	ldr	r3, [pc, #176]	; (800b9fc <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f002 f83b 	bl	800d9cc <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b95a:	b29a      	uxth	r2, r3
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	b29a      	uxth	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b970:	2110      	movs	r1, #16
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f002 f85c 	bl	800da30 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b986:	601a      	str	r2, [r3, #0]
 800b988:	e028      	b.n	800b9dc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2220      	movs	r2, #32
 800b98e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b99e:	f043 0210 	orr.w	r2, r3, #16
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e017      	b.n	800b9e2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	4a12      	ldr	r2, [pc, #72]	; (800ba00 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b9b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	8979      	ldrh	r1, [r7, #10]
 800b9be:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b9c0:	9300      	str	r3, [sp, #0]
 800b9c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f002 f800 	bl	800d9cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f002 f82a 	bl	800da30 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	e000      	b.n	800b9e2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b9e0:	2302      	movs	r3, #2
  }
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3720      	adds	r7, #32
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	ffff0000 	.word	0xffff0000
 800b9f0:	0800c237 	.word	0x0800c237
 800b9f4:	0800d5ef 	.word	0x0800d5ef
 800b9f8:	0800d71d 	.word	0x0800d71d
 800b9fc:	80002000 	.word	0x80002000
 800ba00:	0800bdc7 	.word	0x0800bdc7

0800ba04 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af02      	add	r7, sp, #8
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	607a      	str	r2, [r7, #4]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	460b      	mov	r3, r1
 800ba12:	817b      	strh	r3, [r7, #10]
 800ba14:	4613      	mov	r3, r2
 800ba16:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	2b20      	cmp	r3, #32
 800ba22:	f040 80cd 	bne.w	800bbc0 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba34:	d101      	bne.n	800ba3a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800ba36:	2302      	movs	r3, #2
 800ba38:	e0c3      	b.n	800bbc2 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d101      	bne.n	800ba48 <HAL_I2C_Master_Receive_DMA+0x44>
 800ba44:	2302      	movs	r3, #2
 800ba46:	e0bc      	b.n	800bbc2 <HAL_I2C_Master_Receive_DMA+0x1be>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2222      	movs	r2, #34	; 0x22
 800ba54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2210      	movs	r2, #16
 800ba5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	893a      	ldrh	r2, [r7, #8]
 800ba70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	4a55      	ldr	r2, [pc, #340]	; (800bbcc <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800ba76:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4a55      	ldr	r2, [pc, #340]	; (800bbd0 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800ba7c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	2bff      	cmp	r3, #255	; 0xff
 800ba86:	d906      	bls.n	800ba96 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	22ff      	movs	r2, #255	; 0xff
 800ba8c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800ba8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba92:	617b      	str	r3, [r7, #20]
 800ba94:	e007      	b.n	800baa6 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800baa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800baa4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d070      	beq.n	800bb90 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d020      	beq.n	800baf8 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baba:	4a46      	ldr	r2, [pc, #280]	; (800bbd4 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800babc:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac2:	4a45      	ldr	r2, [pc, #276]	; (800bbd8 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800bac4:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baca:	2200      	movs	r2, #0
 800bacc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad2:	2200      	movs	r2, #0
 800bad4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3324      	adds	r3, #36	; 0x24
 800bae0:	4619      	mov	r1, r3
 800bae2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bae8:	f7fc fe26 	bl	8008738 <HAL_DMA_Start_IT>
 800baec:	4603      	mov	r3, r0
 800baee:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800baf0:	7cfb      	ldrb	r3, [r7, #19]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d138      	bne.n	800bb68 <HAL_I2C_Master_Receive_DMA+0x164>
 800baf6:	e013      	b.n	800bb20 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2220      	movs	r2, #32
 800bafc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e050      	b.n	800bbc2 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	8979      	ldrh	r1, [r7, #10]
 800bb28:	4b2c      	ldr	r3, [pc, #176]	; (800bbdc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f001 ff4c 	bl	800d9cc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bb4e:	2110      	movs	r1, #16
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f001 ff6d 	bl	800da30 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	e029      	b.n	800bbbc <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb7c:	f043 0210 	orr.w	r2, r3, #16
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e018      	b.n	800bbc2 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	4a13      	ldr	r2, [pc, #76]	; (800bbe0 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800bb94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	8979      	ldrh	r1, [r7, #10]
 800bb9e:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f001 ff10 	bl	800d9cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bbb4:	2102      	movs	r1, #2
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f001 ff3a 	bl	800da30 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	e000      	b.n	800bbc2 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800bbc0:	2302      	movs	r3, #2
  }
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	ffff0000 	.word	0xffff0000
 800bbd0:	0800c237 	.word	0x0800c237
 800bbd4:	0800d685 	.word	0x0800d685
 800bbd8:	0800d71d 	.word	0x0800d71d
 800bbdc:	80002400 	.word	0x80002400
 800bbe0:	0800bdc7 	.word	0x0800bdc7

0800bbe4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d005      	beq.n	800bc10 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	68f9      	ldr	r1, [r7, #12]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	4798      	blx	r3
  }
}
 800bc10:	bf00      	nop
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	0a1b      	lsrs	r3, r3, #8
 800bc34:	f003 0301 	and.w	r3, r3, #1
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d010      	beq.n	800bc5e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	09db      	lsrs	r3, r3, #7
 800bc40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00a      	beq.n	800bc5e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc4c:	f043 0201 	orr.w	r2, r3, #1
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc5c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	0a9b      	lsrs	r3, r3, #10
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d010      	beq.n	800bc8c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	09db      	lsrs	r3, r3, #7
 800bc6e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00a      	beq.n	800bc8c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7a:	f043 0208 	orr.w	r2, r3, #8
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc8a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	0a5b      	lsrs	r3, r3, #9
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d010      	beq.n	800bcba <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	09db      	lsrs	r3, r3, #7
 800bc9c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00a      	beq.n	800bcba <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bca8:	f043 0202 	orr.w	r2, r3, #2
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcb8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcbe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f003 030b 	and.w	r3, r3, #11
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800bcca:	68f9      	ldr	r1, [r7, #12]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f001 fb53 	bl	800d378 <I2C_ITError>
  }
}
 800bcd2:	bf00      	nop
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800bce2:	bf00      	nop
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b083      	sub	sp, #12
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800bcf6:	bf00      	nop
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bd0a:	bf00      	nop
 800bd0c:	370c      	adds	r7, #12
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd16:	b480      	push	{r7}
 800bd18:	b083      	sub	sp, #12
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bd1e:	bf00      	nop
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	460b      	mov	r3, r1
 800bd34:	70fb      	strb	r3, [r7, #3]
 800bd36:	4613      	mov	r3, r2
 800bd38:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bd3a:	bf00      	nop
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd46:	b480      	push	{r7}
 800bd48:	b083      	sub	sp, #12
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bd4e:	bf00      	nop
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr

0800bd5a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b083      	sub	sp, #12
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800bd62:	bf00      	nop
 800bd64:	370c      	adds	r7, #12
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr

0800bd6e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd6e:	b480      	push	{r7}
 800bd70:	b083      	sub	sp, #12
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800bd76:	bf00      	nop
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bd8a:	bf00      	nop
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b083      	sub	sp, #12
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bd9e:	bf00      	nop
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b083      	sub	sp, #12
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdb8:	b2db      	uxtb	r3, r3
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	370c      	adds	r7, #12
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr

0800bdc6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b088      	sub	sp, #32
 800bdca:	af02      	add	r7, sp, #8
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d101      	bne.n	800bde4 <I2C_Master_ISR_IT+0x1e>
 800bde0:	2302      	movs	r3, #2
 800bde2:	e120      	b.n	800c026 <I2C_Master_ISR_IT+0x260>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	091b      	lsrs	r3, r3, #4
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d013      	beq.n	800be20 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	091b      	lsrs	r3, r3, #4
 800bdfc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800be00:	2b00      	cmp	r3, #0
 800be02:	d00d      	beq.n	800be20 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	2210      	movs	r2, #16
 800be0a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be10:	f043 0204 	orr.w	r2, r3, #4
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f001 fbc4 	bl	800d5a6 <I2C_Flush_TXDR>
 800be1e:	e0ed      	b.n	800bffc <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	089b      	lsrs	r3, r3, #2
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d023      	beq.n	800be74 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	089b      	lsrs	r3, r3, #2
 800be30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800be34:	2b00      	cmp	r3, #0
 800be36:	d01d      	beq.n	800be74 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	f023 0304 	bic.w	r3, r3, #4
 800be3e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4a:	b2d2      	uxtb	r2, r2
 800be4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be5c:	3b01      	subs	r3, #1
 800be5e:	b29a      	uxth	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be68:	b29b      	uxth	r3, r3
 800be6a:	3b01      	subs	r3, #1
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	855a      	strh	r2, [r3, #42]	; 0x2a
 800be72:	e0c3      	b.n	800bffc <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	099b      	lsrs	r3, r3, #6
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d12a      	bne.n	800bed6 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	085b      	lsrs	r3, r3, #1
 800be84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d024      	beq.n	800bed6 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	085b      	lsrs	r3, r3, #1
 800be90:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01e      	beq.n	800bed6 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f000 80ac 	beq.w	800bffc <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea8:	781a      	ldrb	r2, [r3, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb4:	1c5a      	adds	r2, r3, #1
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bebe:	3b01      	subs	r3, #1
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beca:	b29b      	uxth	r3, r3
 800becc:	3b01      	subs	r3, #1
 800bece:	b29a      	uxth	r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800bed4:	e092      	b.n	800bffc <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	09db      	lsrs	r3, r3, #7
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d05d      	beq.n	800bf9e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	099b      	lsrs	r3, r3, #6
 800bee6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800beea:	2b00      	cmp	r3, #0
 800beec:	d057      	beq.n	800bf9e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d040      	beq.n	800bf7a <I2C_Master_ISR_IT+0x1b4>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800befc:	2b00      	cmp	r3, #0
 800befe:	d13c      	bne.n	800bf7a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf0c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	2bff      	cmp	r3, #255	; 0xff
 800bf16:	d90e      	bls.n	800bf36 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	22ff      	movs	r2, #255	; 0xff
 800bf1c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	8a79      	ldrh	r1, [r7, #18]
 800bf26:	2300      	movs	r3, #0
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f001 fd4c 	bl	800d9cc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf34:	e032      	b.n	800bf9c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bf48:	d00b      	beq.n	800bf62 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf54:	8a79      	ldrh	r1, [r7, #18]
 800bf56:	2000      	movs	r0, #0
 800bf58:	9000      	str	r0, [sp, #0]
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	f001 fd36 	bl	800d9cc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf60:	e01c      	b.n	800bf9c <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	8a79      	ldrh	r1, [r7, #18]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f001 fd2a 	bl	800d9cc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf78:	e010      	b.n	800bf9c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf88:	d003      	beq.n	800bf92 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f000 fdde 	bl	800cb4c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bf90:	e034      	b.n	800bffc <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf92:	2140      	movs	r1, #64	; 0x40
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f001 f9ef 	bl	800d378 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bf9a:	e02f      	b.n	800bffc <I2C_Master_ISR_IT+0x236>
 800bf9c:	e02e      	b.n	800bffc <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	099b      	lsrs	r3, r3, #6
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d028      	beq.n	800bffc <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	099b      	lsrs	r3, r3, #6
 800bfae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d022      	beq.n	800bffc <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d119      	bne.n	800bff4 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfce:	d015      	beq.n	800bffc <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bfd8:	d108      	bne.n	800bfec <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	685a      	ldr	r2, [r3, #4]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfe8:	605a      	str	r2, [r3, #4]
 800bfea:	e007      	b.n	800bffc <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f000 fdad 	bl	800cb4c <I2C_ITMasterSeqCplt>
 800bff2:	e003      	b.n	800bffc <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bff4:	2140      	movs	r1, #64	; 0x40
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f001 f9be 	bl	800d378 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	095b      	lsrs	r3, r3, #5
 800c000:	f003 0301 	and.w	r3, r3, #1
 800c004:	2b00      	cmp	r3, #0
 800c006:	d009      	beq.n	800c01c <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	095b      	lsrs	r3, r3, #5
 800c00c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c010:	2b00      	cmp	r3, #0
 800c012:	d003      	beq.n	800c01c <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c014:	6979      	ldr	r1, [r7, #20]
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f000 fe34 	bl	800cc84 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3718      	adds	r7, #24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b086      	sub	sp, #24
 800c032:	af00      	add	r7, sp, #0
 800c034:	60f8      	str	r0, [r7, #12]
 800c036:	60b9      	str	r1, [r7, #8]
 800c038:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d101      	bne.n	800c052 <I2C_Slave_ISR_IT+0x24>
 800c04e:	2302      	movs	r3, #2
 800c050:	e0ed      	b.n	800c22e <I2C_Slave_ISR_IT+0x200>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	095b      	lsrs	r3, r3, #5
 800c05e:	f003 0301 	and.w	r3, r3, #1
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00a      	beq.n	800c07c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	095b      	lsrs	r3, r3, #5
 800c06a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d004      	beq.n	800c07c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c072:	6939      	ldr	r1, [r7, #16]
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f000 fecf 	bl	800ce18 <I2C_ITSlaveCplt>
 800c07a:	e0d3      	b.n	800c224 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	091b      	lsrs	r3, r3, #4
 800c080:	f003 0301 	and.w	r3, r3, #1
 800c084:	2b00      	cmp	r3, #0
 800c086:	d04d      	beq.n	800c124 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	091b      	lsrs	r3, r3, #4
 800c08c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c090:	2b00      	cmp	r3, #0
 800c092:	d047      	beq.n	800c124 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c098:	b29b      	uxth	r3, r3
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d128      	bne.n	800c0f0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b28      	cmp	r3, #40	; 0x28
 800c0a8:	d108      	bne.n	800c0bc <I2C_Slave_ISR_IT+0x8e>
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0b0:	d104      	bne.n	800c0bc <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c0b2:	6939      	ldr	r1, [r7, #16]
 800c0b4:	68f8      	ldr	r0, [r7, #12]
 800c0b6:	f001 f909 	bl	800d2cc <I2C_ITListenCplt>
 800c0ba:	e032      	b.n	800c122 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	2b29      	cmp	r3, #41	; 0x29
 800c0c6:	d10e      	bne.n	800c0e6 <I2C_Slave_ISR_IT+0xb8>
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c0ce:	d00a      	beq.n	800c0e6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2210      	movs	r2, #16
 800c0d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c0d8:	68f8      	ldr	r0, [r7, #12]
 800c0da:	f001 fa64 	bl	800d5a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f000 fd71 	bl	800cbc6 <I2C_ITSlaveSeqCplt>
 800c0e4:	e01d      	b.n	800c122 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2210      	movs	r2, #16
 800c0ec:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c0ee:	e096      	b.n	800c21e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2210      	movs	r2, #16
 800c0f6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0fc:	f043 0204 	orr.w	r2, r3, #4
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d004      	beq.n	800c114 <I2C_Slave_ISR_IT+0xe6>
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c110:	f040 8085 	bne.w	800c21e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c118:	4619      	mov	r1, r3
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f001 f92c 	bl	800d378 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c120:	e07d      	b.n	800c21e <I2C_Slave_ISR_IT+0x1f0>
 800c122:	e07c      	b.n	800c21e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	089b      	lsrs	r3, r3, #2
 800c128:	f003 0301 	and.w	r3, r3, #1
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d030      	beq.n	800c192 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	089b      	lsrs	r3, r3, #2
 800c134:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d02a      	beq.n	800c192 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c140:	b29b      	uxth	r3, r3
 800c142:	2b00      	cmp	r3, #0
 800c144:	d018      	beq.n	800c178 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	b2d2      	uxtb	r2, r2
 800c152:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c158:	1c5a      	adds	r2, r3, #1
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c162:	3b01      	subs	r3, #1
 800c164:	b29a      	uxth	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c16e:	b29b      	uxth	r3, r3
 800c170:	3b01      	subs	r3, #1
 800c172:	b29a      	uxth	r2, r3
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d14f      	bne.n	800c222 <I2C_Slave_ISR_IT+0x1f4>
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c188:	d04b      	beq.n	800c222 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	f000 fd1b 	bl	800cbc6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c190:	e047      	b.n	800c222 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	08db      	lsrs	r3, r3, #3
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00a      	beq.n	800c1b4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	08db      	lsrs	r3, r3, #3
 800c1a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d004      	beq.n	800c1b4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c1aa:	6939      	ldr	r1, [r7, #16]
 800c1ac:	68f8      	ldr	r0, [r7, #12]
 800c1ae:	f000 fc49 	bl	800ca44 <I2C_ITAddrCplt>
 800c1b2:	e037      	b.n	800c224 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	085b      	lsrs	r3, r3, #1
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d031      	beq.n	800c224 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	085b      	lsrs	r3, r3, #1
 800c1c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d02b      	beq.n	800c224 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d018      	beq.n	800c208 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1da:	781a      	ldrb	r2, [r3, #0]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e6:	1c5a      	adds	r2, r3, #1
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1fe:	3b01      	subs	r3, #1
 800c200:	b29a      	uxth	r2, r3
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	851a      	strh	r2, [r3, #40]	; 0x28
 800c206:	e00d      	b.n	800c224 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c20e:	d002      	beq.n	800c216 <I2C_Slave_ISR_IT+0x1e8>
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d106      	bne.n	800c224 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f000 fcd5 	bl	800cbc6 <I2C_ITSlaveSeqCplt>
 800c21c:	e002      	b.n	800c224 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800c21e:	bf00      	nop
 800c220:	e000      	b.n	800c224 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800c222:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3718      	adds	r7, #24
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b088      	sub	sp, #32
 800c23a:	af02      	add	r7, sp, #8
 800c23c:	60f8      	str	r0, [r7, #12]
 800c23e:	60b9      	str	r1, [r7, #8]
 800c240:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d101      	bne.n	800c250 <I2C_Master_ISR_DMA+0x1a>
 800c24c:	2302      	movs	r3, #2
 800c24e:	e0e1      	b.n	800c414 <I2C_Master_ISR_DMA+0x1de>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2201      	movs	r2, #1
 800c254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	091b      	lsrs	r3, r3, #4
 800c25c:	f003 0301 	and.w	r3, r3, #1
 800c260:	2b00      	cmp	r3, #0
 800c262:	d017      	beq.n	800c294 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	091b      	lsrs	r3, r3, #4
 800c268:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d011      	beq.n	800c294 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2210      	movs	r2, #16
 800c276:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c27c:	f043 0204 	orr.w	r2, r3, #4
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c284:	2120      	movs	r1, #32
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f001 fbd2 	bl	800da30 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f001 f98a 	bl	800d5a6 <I2C_Flush_TXDR>
 800c292:	e0ba      	b.n	800c40a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	09db      	lsrs	r3, r3, #7
 800c298:	f003 0301 	and.w	r3, r3, #1
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d072      	beq.n	800c386 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	099b      	lsrs	r3, r3, #6
 800c2a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d06c      	beq.n	800c386 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2ba:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d04e      	beq.n	800c364 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2d2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	2bff      	cmp	r3, #255	; 0xff
 800c2dc:	d906      	bls.n	800c2ec <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	22ff      	movs	r2, #255	; 0xff
 800c2e2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800c2e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c2e8:	617b      	str	r3, [r7, #20]
 800c2ea:	e010      	b.n	800c30e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c2fe:	d003      	beq.n	800c308 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	e002      	b.n	800c30e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c30c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c312:	b2da      	uxtb	r2, r3
 800c314:	8a79      	ldrh	r1, [r7, #18]
 800c316:	2300      	movs	r3, #0
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f001 fb55 	bl	800d9cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c326:	b29a      	uxth	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	b29a      	uxth	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2b22      	cmp	r3, #34	; 0x22
 800c33e:	d108      	bne.n	800c352 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c34e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c350:	e05b      	b.n	800c40a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c360:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c362:	e052      	b.n	800c40a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c36e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c372:	d003      	beq.n	800c37c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f000 fbe9 	bl	800cb4c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c37a:	e046      	b.n	800c40a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c37c:	2140      	movs	r1, #64	; 0x40
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f000 fffa 	bl	800d378 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c384:	e041      	b.n	800c40a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	099b      	lsrs	r3, r3, #6
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d029      	beq.n	800c3e6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	099b      	lsrs	r3, r3, #6
 800c396:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d023      	beq.n	800c3e6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d119      	bne.n	800c3dc <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3b6:	d027      	beq.n	800c408 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c3c0:	d108      	bne.n	800c3d4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	685a      	ldr	r2, [r3, #4]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3d0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c3d2:	e019      	b.n	800c408 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 fbb9 	bl	800cb4c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c3da:	e015      	b.n	800c408 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c3dc:	2140      	movs	r1, #64	; 0x40
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f000 ffca 	bl	800d378 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c3e4:	e010      	b.n	800c408 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	095b      	lsrs	r3, r3, #5
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00b      	beq.n	800c40a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	095b      	lsrs	r3, r3, #5
 800c3f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d005      	beq.n	800c40a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 fc3f 	bl	800cc84 <I2C_ITMasterCplt>
 800c406:	e000      	b.n	800c40a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c408:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3718      	adds	r7, #24
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b088      	sub	sp, #32
 800c420:	af02      	add	r7, sp, #8
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c428:	4b92      	ldr	r3, [pc, #584]	; (800c674 <I2C_Mem_ISR_DMA+0x258>)
 800c42a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c432:	2b01      	cmp	r3, #1
 800c434:	d101      	bne.n	800c43a <I2C_Mem_ISR_DMA+0x1e>
 800c436:	2302      	movs	r3, #2
 800c438:	e118      	b.n	800c66c <I2C_Mem_ISR_DMA+0x250>
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	091b      	lsrs	r3, r3, #4
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d017      	beq.n	800c47e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	091b      	lsrs	r3, r3, #4
 800c452:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c456:	2b00      	cmp	r3, #0
 800c458:	d011      	beq.n	800c47e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2210      	movs	r2, #16
 800c460:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c466:	f043 0204 	orr.w	r2, r3, #4
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c46e:	2120      	movs	r1, #32
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f001 fadd 	bl	800da30 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f001 f895 	bl	800d5a6 <I2C_Flush_TXDR>
 800c47c:	e0f1      	b.n	800c662 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	085b      	lsrs	r3, r3, #1
 800c482:	f003 0301 	and.w	r3, r3, #1
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00f      	beq.n	800c4aa <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	085b      	lsrs	r3, r3, #1
 800c48e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c492:	2b00      	cmp	r3, #0
 800c494:	d009      	beq.n	800c4aa <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c49e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4a6:	651a      	str	r2, [r3, #80]	; 0x50
 800c4a8:	e0db      	b.n	800c662 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	09db      	lsrs	r3, r3, #7
 800c4ae:	f003 0301 	and.w	r3, r3, #1
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d060      	beq.n	800c578 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	099b      	lsrs	r3, r3, #6
 800c4ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d05a      	beq.n	800c578 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c4c2:	2101      	movs	r1, #1
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f001 fb37 	bl	800db38 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c4ca:	2110      	movs	r1, #16
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f001 faaf 	bl	800da30 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d048      	beq.n	800c56e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	2bff      	cmp	r3, #255	; 0xff
 800c4e4:	d910      	bls.n	800c508 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	22ff      	movs	r2, #255	; 0xff
 800c4ea:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f0:	b299      	uxth	r1, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f001 fa63 	bl	800d9cc <I2C_TransferConfig>
 800c506:	e011      	b.n	800c52c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c516:	b299      	uxth	r1, r3
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c51c:	b2da      	uxtb	r2, r3
 800c51e:	2300      	movs	r3, #0
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f001 fa50 	bl	800d9cc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c530:	b29a      	uxth	r2, r3
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c536:	1ad3      	subs	r3, r2, r3
 800c538:	b29a      	uxth	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c544:	b2db      	uxtb	r3, r3
 800c546:	2b22      	cmp	r3, #34	; 0x22
 800c548:	d108      	bne.n	800c55c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c558:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c55a:	e082      	b.n	800c662 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c56a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c56c:	e079      	b.n	800c662 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c56e:	2140      	movs	r1, #64	; 0x40
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f000 ff01 	bl	800d378 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c576:	e074      	b.n	800c662 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	099b      	lsrs	r3, r3, #6
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	2b00      	cmp	r3, #0
 800c582:	d05e      	beq.n	800c642 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	099b      	lsrs	r3, r3, #6
 800c588:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d058      	beq.n	800c642 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c590:	2101      	movs	r1, #1
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f001 fad0 	bl	800db38 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c598:	2110      	movs	r1, #16
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f001 fa48 	bl	800da30 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	2b22      	cmp	r3, #34	; 0x22
 800c5aa:	d101      	bne.n	800c5b0 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c5ac:	4b32      	ldr	r3, [pc, #200]	; (800c678 <I2C_Mem_ISR_DMA+0x25c>)
 800c5ae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	2bff      	cmp	r3, #255	; 0xff
 800c5b8:	d910      	bls.n	800c5dc <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	22ff      	movs	r2, #255	; 0xff
 800c5be:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5c4:	b299      	uxth	r1, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5ca:	b2da      	uxtb	r2, r3
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f001 f9f9 	bl	800d9cc <I2C_TransferConfig>
 800c5da:	e011      	b.n	800c600 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ea:	b299      	uxth	r1, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5f0:	b2da      	uxtb	r2, r3
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f001 f9e6 	bl	800d9cc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c604:	b29a      	uxth	r2, r3
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	b29a      	uxth	r2, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b22      	cmp	r3, #34	; 0x22
 800c61c:	d108      	bne.n	800c630 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c62c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c62e:	e018      	b.n	800c662 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c63e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c640:	e00f      	b.n	800c662 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	095b      	lsrs	r3, r3, #5
 800c646:	f003 0301 	and.w	r3, r3, #1
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d009      	beq.n	800c662 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	095b      	lsrs	r3, r3, #5
 800c652:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c65a:	68b9      	ldr	r1, [r7, #8]
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f000 fb11 	bl	800cc84 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3718      	adds	r7, #24
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	80002000 	.word	0x80002000
 800c678:	80002400 	.word	0x80002400

0800c67c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c68e:	2300      	movs	r3, #0
 800c690:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d101      	bne.n	800c6a0 <I2C_Slave_ISR_DMA+0x24>
 800c69c:	2302      	movs	r3, #2
 800c69e:	e1cc      	b.n	800ca3a <I2C_Slave_ISR_DMA+0x3be>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	095b      	lsrs	r3, r3, #5
 800c6ac:	f003 0301 	and.w	r3, r3, #1
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00a      	beq.n	800c6ca <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	095b      	lsrs	r3, r3, #5
 800c6b8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d004      	beq.n	800c6ca <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c6c0:	68b9      	ldr	r1, [r7, #8]
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f000 fba8 	bl	800ce18 <I2C_ITSlaveCplt>
 800c6c8:	e1b2      	b.n	800ca30 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	091b      	lsrs	r3, r3, #4
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 819c 	beq.w	800ca10 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	091b      	lsrs	r3, r3, #4
 800c6dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 8195 	beq.w	800ca10 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	0b9b      	lsrs	r3, r3, #14
 800c6ea:	f003 0301 	and.w	r3, r3, #1
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d106      	bne.n	800c700 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	0bdb      	lsrs	r3, r3, #15
 800c6f6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f000 8181 	beq.w	800ca02 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c704:	2b00      	cmp	r3, #0
 800c706:	d07c      	beq.n	800c802 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	0bdb      	lsrs	r3, r3, #15
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	2b00      	cmp	r3, #0
 800c712:	d076      	beq.n	800c802 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a75      	ldr	r2, [pc, #468]	; (800c8f0 <I2C_Slave_ISR_DMA+0x274>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d059      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a73      	ldr	r2, [pc, #460]	; (800c8f4 <I2C_Slave_ISR_DMA+0x278>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d053      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a71      	ldr	r2, [pc, #452]	; (800c8f8 <I2C_Slave_ISR_DMA+0x27c>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d04d      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a6f      	ldr	r2, [pc, #444]	; (800c8fc <I2C_Slave_ISR_DMA+0x280>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d047      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a6d      	ldr	r2, [pc, #436]	; (800c900 <I2C_Slave_ISR_DMA+0x284>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d041      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a6b      	ldr	r2, [pc, #428]	; (800c904 <I2C_Slave_ISR_DMA+0x288>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d03b      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a69      	ldr	r2, [pc, #420]	; (800c908 <I2C_Slave_ISR_DMA+0x28c>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d035      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a67      	ldr	r2, [pc, #412]	; (800c90c <I2C_Slave_ISR_DMA+0x290>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d02f      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a65      	ldr	r2, [pc, #404]	; (800c910 <I2C_Slave_ISR_DMA+0x294>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d029      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a63      	ldr	r2, [pc, #396]	; (800c914 <I2C_Slave_ISR_DMA+0x298>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d023      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a61      	ldr	r2, [pc, #388]	; (800c918 <I2C_Slave_ISR_DMA+0x29c>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d01d      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a5f      	ldr	r2, [pc, #380]	; (800c91c <I2C_Slave_ISR_DMA+0x2a0>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d017      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a5d      	ldr	r2, [pc, #372]	; (800c920 <I2C_Slave_ISR_DMA+0x2a4>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d011      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a5b      	ldr	r2, [pc, #364]	; (800c924 <I2C_Slave_ISR_DMA+0x2a8>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d00b      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a59      	ldr	r2, [pc, #356]	; (800c928 <I2C_Slave_ISR_DMA+0x2ac>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d005      	beq.n	800c7d4 <I2C_Slave_ISR_DMA+0x158>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a57      	ldr	r2, [pc, #348]	; (800c92c <I2C_Slave_ISR_DMA+0x2b0>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d109      	bne.n	800c7e8 <I2C_Slave_ISR_DMA+0x16c>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	bf0c      	ite	eq
 800c7e0:	2301      	moveq	r3, #1
 800c7e2:	2300      	movne	r3, #0
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	e008      	b.n	800c7fa <I2C_Slave_ISR_DMA+0x17e>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	bf0c      	ite	eq
 800c7f4:	2301      	moveq	r3, #1
 800c7f6:	2300      	movne	r3, #0
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d001      	beq.n	800c802 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c7fe:	2301      	movs	r3, #1
 800c800:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c806:	2b00      	cmp	r3, #0
 800c808:	f000 809f 	beq.w	800c94a <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	0b9b      	lsrs	r3, r3, #14
 800c810:	f003 0301 	and.w	r3, r3, #1
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 8098 	beq.w	800c94a <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a33      	ldr	r2, [pc, #204]	; (800c8f0 <I2C_Slave_ISR_DMA+0x274>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d059      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a31      	ldr	r2, [pc, #196]	; (800c8f4 <I2C_Slave_ISR_DMA+0x278>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d053      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a2f      	ldr	r2, [pc, #188]	; (800c8f8 <I2C_Slave_ISR_DMA+0x27c>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d04d      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a2d      	ldr	r2, [pc, #180]	; (800c8fc <I2C_Slave_ISR_DMA+0x280>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d047      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a2b      	ldr	r2, [pc, #172]	; (800c900 <I2C_Slave_ISR_DMA+0x284>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d041      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a29      	ldr	r2, [pc, #164]	; (800c904 <I2C_Slave_ISR_DMA+0x288>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d03b      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a27      	ldr	r2, [pc, #156]	; (800c908 <I2C_Slave_ISR_DMA+0x28c>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d035      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a25      	ldr	r2, [pc, #148]	; (800c90c <I2C_Slave_ISR_DMA+0x290>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d02f      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a23      	ldr	r2, [pc, #140]	; (800c910 <I2C_Slave_ISR_DMA+0x294>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d029      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a21      	ldr	r2, [pc, #132]	; (800c914 <I2C_Slave_ISR_DMA+0x298>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d023      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a1f      	ldr	r2, [pc, #124]	; (800c918 <I2C_Slave_ISR_DMA+0x29c>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d01d      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a1d      	ldr	r2, [pc, #116]	; (800c91c <I2C_Slave_ISR_DMA+0x2a0>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d017      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a1b      	ldr	r2, [pc, #108]	; (800c920 <I2C_Slave_ISR_DMA+0x2a4>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d011      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a19      	ldr	r2, [pc, #100]	; (800c924 <I2C_Slave_ISR_DMA+0x2a8>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d00b      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a17      	ldr	r2, [pc, #92]	; (800c928 <I2C_Slave_ISR_DMA+0x2ac>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d005      	beq.n	800c8da <I2C_Slave_ISR_DMA+0x25e>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a15      	ldr	r2, [pc, #84]	; (800c92c <I2C_Slave_ISR_DMA+0x2b0>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d12a      	bne.n	800c930 <I2C_Slave_ISR_DMA+0x2b4>
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	bf0c      	ite	eq
 800c8e6:	2301      	moveq	r3, #1
 800c8e8:	2300      	movne	r3, #0
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	e029      	b.n	800c942 <I2C_Slave_ISR_DMA+0x2c6>
 800c8ee:	bf00      	nop
 800c8f0:	40020010 	.word	0x40020010
 800c8f4:	40020028 	.word	0x40020028
 800c8f8:	40020040 	.word	0x40020040
 800c8fc:	40020058 	.word	0x40020058
 800c900:	40020070 	.word	0x40020070
 800c904:	40020088 	.word	0x40020088
 800c908:	400200a0 	.word	0x400200a0
 800c90c:	400200b8 	.word	0x400200b8
 800c910:	40020410 	.word	0x40020410
 800c914:	40020428 	.word	0x40020428
 800c918:	40020440 	.word	0x40020440
 800c91c:	40020458 	.word	0x40020458
 800c920:	40020470 	.word	0x40020470
 800c924:	40020488 	.word	0x40020488
 800c928:	400204a0 	.word	0x400204a0
 800c92c:	400204b8 	.word	0x400204b8
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	bf0c      	ite	eq
 800c93c:	2301      	moveq	r3, #1
 800c93e:	2300      	movne	r3, #0
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c946:	2301      	movs	r3, #1
 800c948:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d128      	bne.n	800c9a2 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c956:	b2db      	uxtb	r3, r3
 800c958:	2b28      	cmp	r3, #40	; 0x28
 800c95a:	d108      	bne.n	800c96e <I2C_Slave_ISR_DMA+0x2f2>
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c962:	d104      	bne.n	800c96e <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c964:	68b9      	ldr	r1, [r7, #8]
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f000 fcb0 	bl	800d2cc <I2C_ITListenCplt>
 800c96c:	e048      	b.n	800ca00 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c974:	b2db      	uxtb	r3, r3
 800c976:	2b29      	cmp	r3, #41	; 0x29
 800c978:	d10e      	bne.n	800c998 <I2C_Slave_ISR_DMA+0x31c>
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c980:	d00a      	beq.n	800c998 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2210      	movs	r2, #16
 800c988:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f000 fe0b 	bl	800d5a6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f000 f918 	bl	800cbc6 <I2C_ITSlaveSeqCplt>
 800c996:	e033      	b.n	800ca00 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2210      	movs	r2, #16
 800c99e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c9a0:	e034      	b.n	800ca0c <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2210      	movs	r2, #16
 800c9a8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ae:	f043 0204 	orr.w	r2, r3, #4
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9bc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d003      	beq.n	800c9cc <I2C_Slave_ISR_DMA+0x350>
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c9ca:	d11f      	bne.n	800ca0c <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
 800c9ce:	2b21      	cmp	r3, #33	; 0x21
 800c9d0:	d002      	beq.n	800c9d8 <I2C_Slave_ISR_DMA+0x35c>
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	2b29      	cmp	r3, #41	; 0x29
 800c9d6:	d103      	bne.n	800c9e0 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2221      	movs	r2, #33	; 0x21
 800c9dc:	631a      	str	r2, [r3, #48]	; 0x30
 800c9de:	e008      	b.n	800c9f2 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c9e0:	7dfb      	ldrb	r3, [r7, #23]
 800c9e2:	2b22      	cmp	r3, #34	; 0x22
 800c9e4:	d002      	beq.n	800c9ec <I2C_Slave_ISR_DMA+0x370>
 800c9e6:	7dfb      	ldrb	r3, [r7, #23]
 800c9e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ea:	d102      	bne.n	800c9f2 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2222      	movs	r2, #34	; 0x22
 800c9f0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f000 fcbd 	bl	800d378 <I2C_ITError>
      if (treatdmanack == 1U)
 800c9fe:	e005      	b.n	800ca0c <I2C_Slave_ISR_DMA+0x390>
 800ca00:	e004      	b.n	800ca0c <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	2210      	movs	r2, #16
 800ca08:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ca0a:	e011      	b.n	800ca30 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800ca0c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ca0e:	e00f      	b.n	800ca30 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	08db      	lsrs	r3, r3, #3
 800ca14:	f003 0301 	and.w	r3, r3, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d009      	beq.n	800ca30 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	08db      	lsrs	r3, r3, #3
 800ca20:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d003      	beq.n	800ca30 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ca28:	68b9      	ldr	r1, [r7, #8]
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f000 f80a 	bl	800ca44 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3720      	adds	r7, #32
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop

0800ca44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ca5a:	2b28      	cmp	r3, #40	; 0x28
 800ca5c:	d16a      	bne.n	800cb34 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	699b      	ldr	r3, [r3, #24]
 800ca64:	0c1b      	lsrs	r3, r3, #16
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	f003 0301 	and.w	r3, r3, #1
 800ca6c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	699b      	ldr	r3, [r3, #24]
 800ca74:	0c1b      	lsrs	r3, r3, #16
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ca7c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca8a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ca98:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d138      	bne.n	800cb14 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800caa2:	897b      	ldrh	r3, [r7, #10]
 800caa4:	09db      	lsrs	r3, r3, #7
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	89bb      	ldrh	r3, [r7, #12]
 800caaa:	4053      	eors	r3, r2
 800caac:	b29b      	uxth	r3, r3
 800caae:	f003 0306 	and.w	r3, r3, #6
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d11c      	bne.n	800caf0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800cab6:	897b      	ldrh	r3, [r7, #10]
 800cab8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cac8:	2b02      	cmp	r3, #2
 800caca:	d13b      	bne.n	800cb44 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2208      	movs	r2, #8
 800cad8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cae2:	89ba      	ldrh	r2, [r7, #12]
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
 800cae6:	4619      	mov	r1, r3
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff f91e 	bl	800bd2a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800caee:	e029      	b.n	800cb44 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800caf0:	893b      	ldrh	r3, [r7, #8]
 800caf2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800caf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f001 f81d 	bl	800db38 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cb06:	89ba      	ldrh	r2, [r7, #12]
 800cb08:	7bfb      	ldrb	r3, [r7, #15]
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7ff f90c 	bl	800bd2a <HAL_I2C_AddrCallback>
}
 800cb12:	e017      	b.n	800cb44 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cb14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f001 f80d 	bl	800db38 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cb26:	89ba      	ldrh	r2, [r7, #12]
 800cb28:	7bfb      	ldrb	r3, [r7, #15]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff f8fc 	bl	800bd2a <HAL_I2C_AddrCallback>
}
 800cb32:	e007      	b.n	800cb44 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2208      	movs	r2, #8
 800cb3a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800cb44:	bf00      	nop
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	2b21      	cmp	r3, #33	; 0x21
 800cb66:	d115      	bne.n	800cb94 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2220      	movs	r2, #32
 800cb6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2211      	movs	r2, #17
 800cb74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 ffda 	bl	800db38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7ff f8a4 	bl	800bcda <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cb92:	e014      	b.n	800cbbe <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2220      	movs	r2, #32
 800cb98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2212      	movs	r2, #18
 800cba0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cba8:	2102      	movs	r1, #2
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 ffc4 	bl	800db38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff f898 	bl	800bcee <HAL_I2C_MasterRxCpltCallback>
}
 800cbbe:	bf00      	nop
 800cbc0:	3708      	adds	r7, #8
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b084      	sub	sp, #16
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	0b9b      	lsrs	r3, r3, #14
 800cbe2:	f003 0301 	and.w	r3, r3, #1
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d008      	beq.n	800cbfc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	e00d      	b.n	800cc18 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	0bdb      	lsrs	r3, r3, #15
 800cc00:	f003 0301 	and.w	r3, r3, #1
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d007      	beq.n	800cc18 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc16:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b29      	cmp	r3, #41	; 0x29
 800cc22:	d112      	bne.n	800cc4a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2228      	movs	r2, #40	; 0x28
 800cc28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2221      	movs	r2, #33	; 0x21
 800cc30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cc32:	2101      	movs	r1, #1
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 ff7f 	bl	800db38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff f85d 	bl	800bd02 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cc48:	e017      	b.n	800cc7a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	2b2a      	cmp	r3, #42	; 0x2a
 800cc54:	d111      	bne.n	800cc7a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2228      	movs	r2, #40	; 0x28
 800cc5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2222      	movs	r2, #34	; 0x22
 800cc62:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cc64:	2102      	movs	r1, #2
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 ff66 	bl	800db38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff f84e 	bl	800bd16 <HAL_I2C_SlaveRxCpltCallback>
}
 800cc7a:	bf00      	nop
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
	...

0800cc84 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2220      	movs	r2, #32
 800cc98:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	2b21      	cmp	r3, #33	; 0x21
 800cca4:	d107      	bne.n	800ccb6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cca6:	2101      	movs	r1, #1
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 ff45 	bl	800db38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2211      	movs	r2, #17
 800ccb2:	631a      	str	r2, [r3, #48]	; 0x30
 800ccb4:	e00c      	b.n	800ccd0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	2b22      	cmp	r3, #34	; 0x22
 800ccc0:	d106      	bne.n	800ccd0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ccc2:	2102      	movs	r1, #2
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 ff37 	bl	800db38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2212      	movs	r2, #18
 800ccce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6859      	ldr	r1, [r3, #4]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	4b4d      	ldr	r3, [pc, #308]	; (800ce10 <I2C_ITMasterCplt+0x18c>)
 800ccdc:	400b      	ands	r3, r1
 800ccde:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4a4a      	ldr	r2, [pc, #296]	; (800ce14 <I2C_ITMasterCplt+0x190>)
 800ccea:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	091b      	lsrs	r3, r3, #4
 800ccf0:	f003 0301 	and.w	r3, r3, #1
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d009      	beq.n	800cd0c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2210      	movs	r2, #16
 800ccfe:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd04:	f043 0204 	orr.w	r2, r3, #4
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	2b60      	cmp	r3, #96	; 0x60
 800cd16:	d10b      	bne.n	800cd30 <I2C_ITMasterCplt+0xac>
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	089b      	lsrs	r3, r3, #2
 800cd1c:	f003 0301 	and.w	r3, r3, #1
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d005      	beq.n	800cd30 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 fc38 	bl	800d5a6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd3a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	2b60      	cmp	r3, #96	; 0x60
 800cd46:	d002      	beq.n	800cd4e <I2C_ITMasterCplt+0xca>
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d006      	beq.n	800cd5c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd52:	4619      	mov	r1, r3
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fb0f 	bl	800d378 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cd5a:	e054      	b.n	800ce06 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	2b21      	cmp	r3, #33	; 0x21
 800cd66:	d124      	bne.n	800cdb2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	2b40      	cmp	r3, #64	; 0x40
 800cd80:	d10b      	bne.n	800cd9a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7fe ffe1 	bl	800bd5a <HAL_I2C_MemTxCpltCallback>
}
 800cd98:	e035      	b.n	800ce06 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7fe ff95 	bl	800bcda <HAL_I2C_MasterTxCpltCallback>
}
 800cdb0:	e029      	b.n	800ce06 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b22      	cmp	r3, #34	; 0x22
 800cdbc:	d123      	bne.n	800ce06 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2220      	movs	r2, #32
 800cdc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	2b40      	cmp	r3, #64	; 0x40
 800cdd6:	d10b      	bne.n	800cdf0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f7fe ffc0 	bl	800bd6e <HAL_I2C_MemRxCpltCallback>
}
 800cdee:	e00a      	b.n	800ce06 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7fe ff74 	bl	800bcee <HAL_I2C_MasterRxCpltCallback>
}
 800ce06:	bf00      	nop
 800ce08:	3718      	adds	r7, #24
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	fe00e800 	.word	0xfe00e800
 800ce14:	ffff0000 	.word	0xffff0000

0800ce18 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce32:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce3a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2220      	movs	r2, #32
 800ce42:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ce44:	7afb      	ldrb	r3, [r7, #11]
 800ce46:	2b21      	cmp	r3, #33	; 0x21
 800ce48:	d002      	beq.n	800ce50 <I2C_ITSlaveCplt+0x38>
 800ce4a:	7afb      	ldrb	r3, [r7, #11]
 800ce4c:	2b29      	cmp	r3, #41	; 0x29
 800ce4e:	d108      	bne.n	800ce62 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ce50:	f248 0101 	movw	r1, #32769	; 0x8001
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 fe6f 	bl	800db38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2221      	movs	r2, #33	; 0x21
 800ce5e:	631a      	str	r2, [r3, #48]	; 0x30
 800ce60:	e019      	b.n	800ce96 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ce62:	7afb      	ldrb	r3, [r7, #11]
 800ce64:	2b22      	cmp	r3, #34	; 0x22
 800ce66:	d002      	beq.n	800ce6e <I2C_ITSlaveCplt+0x56>
 800ce68:	7afb      	ldrb	r3, [r7, #11]
 800ce6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce6c:	d108      	bne.n	800ce80 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ce6e:	f248 0102 	movw	r1, #32770	; 0x8002
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fe60 	bl	800db38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2222      	movs	r2, #34	; 0x22
 800ce7c:	631a      	str	r2, [r3, #48]	; 0x30
 800ce7e:	e00a      	b.n	800ce96 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800ce80:	7afb      	ldrb	r3, [r7, #11]
 800ce82:	2b28      	cmp	r3, #40	; 0x28
 800ce84:	d107      	bne.n	800ce96 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800ce86:	f248 0103 	movw	r1, #32771	; 0x8003
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fe54 	bl	800db38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cea4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	6859      	ldr	r1, [r3, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	4b80      	ldr	r3, [pc, #512]	; (800d0b4 <I2C_ITSlaveCplt+0x29c>)
 800ceb2:	400b      	ands	r3, r1
 800ceb4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 fb75 	bl	800d5a6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	0b9b      	lsrs	r3, r3, #14
 800cec0:	f003 0301 	and.w	r3, r3, #1
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d07a      	beq.n	800cfbe <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ced6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f000 8112 	beq.w	800d106 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a73      	ldr	r2, [pc, #460]	; (800d0b8 <I2C_ITSlaveCplt+0x2a0>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d059      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a71      	ldr	r2, [pc, #452]	; (800d0bc <I2C_ITSlaveCplt+0x2a4>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d053      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a6f      	ldr	r2, [pc, #444]	; (800d0c0 <I2C_ITSlaveCplt+0x2a8>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d04d      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a6d      	ldr	r2, [pc, #436]	; (800d0c4 <I2C_ITSlaveCplt+0x2ac>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d047      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a6b      	ldr	r2, [pc, #428]	; (800d0c8 <I2C_ITSlaveCplt+0x2b0>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d041      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a69      	ldr	r2, [pc, #420]	; (800d0cc <I2C_ITSlaveCplt+0x2b4>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d03b      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a67      	ldr	r2, [pc, #412]	; (800d0d0 <I2C_ITSlaveCplt+0x2b8>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d035      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a65      	ldr	r2, [pc, #404]	; (800d0d4 <I2C_ITSlaveCplt+0x2bc>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d02f      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a63      	ldr	r2, [pc, #396]	; (800d0d8 <I2C_ITSlaveCplt+0x2c0>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d029      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a61      	ldr	r2, [pc, #388]	; (800d0dc <I2C_ITSlaveCplt+0x2c4>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d023      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a5f      	ldr	r2, [pc, #380]	; (800d0e0 <I2C_ITSlaveCplt+0x2c8>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d01d      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a5d      	ldr	r2, [pc, #372]	; (800d0e4 <I2C_ITSlaveCplt+0x2cc>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d017      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a5b      	ldr	r2, [pc, #364]	; (800d0e8 <I2C_ITSlaveCplt+0x2d0>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d011      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a59      	ldr	r2, [pc, #356]	; (800d0ec <I2C_ITSlaveCplt+0x2d4>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d00b      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a57      	ldr	r2, [pc, #348]	; (800d0f0 <I2C_ITSlaveCplt+0x2d8>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d005      	beq.n	800cfa2 <I2C_ITSlaveCplt+0x18a>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a55      	ldr	r2, [pc, #340]	; (800d0f4 <I2C_ITSlaveCplt+0x2dc>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d105      	bne.n	800cfae <I2C_ITSlaveCplt+0x196>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	e004      	b.n	800cfb8 <I2C_ITSlaveCplt+0x1a0>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	8553      	strh	r3, [r2, #42]	; 0x2a
 800cfbc:	e0a3      	b.n	800d106 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	0bdb      	lsrs	r3, r3, #15
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f000 809d 	beq.w	800d106 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cfda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f000 8090 	beq.w	800d106 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a32      	ldr	r2, [pc, #200]	; (800d0b8 <I2C_ITSlaveCplt+0x2a0>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d059      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a30      	ldr	r2, [pc, #192]	; (800d0bc <I2C_ITSlaveCplt+0x2a4>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d053      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a2e      	ldr	r2, [pc, #184]	; (800d0c0 <I2C_ITSlaveCplt+0x2a8>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d04d      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a2c      	ldr	r2, [pc, #176]	; (800d0c4 <I2C_ITSlaveCplt+0x2ac>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d047      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a2a      	ldr	r2, [pc, #168]	; (800d0c8 <I2C_ITSlaveCplt+0x2b0>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d041      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a28      	ldr	r2, [pc, #160]	; (800d0cc <I2C_ITSlaveCplt+0x2b4>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d03b      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a26      	ldr	r2, [pc, #152]	; (800d0d0 <I2C_ITSlaveCplt+0x2b8>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d035      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a24      	ldr	r2, [pc, #144]	; (800d0d4 <I2C_ITSlaveCplt+0x2bc>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d02f      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a22      	ldr	r2, [pc, #136]	; (800d0d8 <I2C_ITSlaveCplt+0x2c0>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d029      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a20      	ldr	r2, [pc, #128]	; (800d0dc <I2C_ITSlaveCplt+0x2c4>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d023      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a1e      	ldr	r2, [pc, #120]	; (800d0e0 <I2C_ITSlaveCplt+0x2c8>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d01d      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a1c      	ldr	r2, [pc, #112]	; (800d0e4 <I2C_ITSlaveCplt+0x2cc>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d017      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a1a      	ldr	r2, [pc, #104]	; (800d0e8 <I2C_ITSlaveCplt+0x2d0>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d011      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a18      	ldr	r2, [pc, #96]	; (800d0ec <I2C_ITSlaveCplt+0x2d4>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d00b      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a16      	ldr	r2, [pc, #88]	; (800d0f0 <I2C_ITSlaveCplt+0x2d8>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d005      	beq.n	800d0a6 <I2C_ITSlaveCplt+0x28e>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a14      	ldr	r2, [pc, #80]	; (800d0f4 <I2C_ITSlaveCplt+0x2dc>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d128      	bne.n	800d0f8 <I2C_ITSlaveCplt+0x2e0>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	e027      	b.n	800d102 <I2C_ITSlaveCplt+0x2ea>
 800d0b2:	bf00      	nop
 800d0b4:	fe00e800 	.word	0xfe00e800
 800d0b8:	40020010 	.word	0x40020010
 800d0bc:	40020028 	.word	0x40020028
 800d0c0:	40020040 	.word	0x40020040
 800d0c4:	40020058 	.word	0x40020058
 800d0c8:	40020070 	.word	0x40020070
 800d0cc:	40020088 	.word	0x40020088
 800d0d0:	400200a0 	.word	0x400200a0
 800d0d4:	400200b8 	.word	0x400200b8
 800d0d8:	40020410 	.word	0x40020410
 800d0dc:	40020428 	.word	0x40020428
 800d0e0:	40020440 	.word	0x40020440
 800d0e4:	40020458 	.word	0x40020458
 800d0e8:	40020470 	.word	0x40020470
 800d0ec:	40020488 	.word	0x40020488
 800d0f0:	400204a0 	.word	0x400204a0
 800d0f4:	400204b8 	.word	0x400204b8
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	b29b      	uxth	r3, r3
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	089b      	lsrs	r3, r3, #2
 800d10a:	f003 0301 	and.w	r3, r3, #1
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d020      	beq.n	800d154 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f023 0304 	bic.w	r3, r3, #4
 800d118:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d124:	b2d2      	uxtb	r2, r2
 800d126:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12c:	1c5a      	adds	r2, r3, #1
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00c      	beq.n	800d154 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d13e:	3b01      	subs	r3, #1
 800d140:	b29a      	uxth	r2, r3
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	3b01      	subs	r3, #1
 800d14e:	b29a      	uxth	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d158:	b29b      	uxth	r3, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d005      	beq.n	800d16a <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d162:	f043 0204 	orr.w	r2, r3, #4
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	091b      	lsrs	r3, r3, #4
 800d16e:	f003 0301 	and.w	r3, r3, #1
 800d172:	2b00      	cmp	r3, #0
 800d174:	d04a      	beq.n	800d20c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	091b      	lsrs	r3, r3, #4
 800d17a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d044      	beq.n	800d20c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d186:	b29b      	uxth	r3, r3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d128      	bne.n	800d1de <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b28      	cmp	r3, #40	; 0x28
 800d196:	d108      	bne.n	800d1aa <I2C_ITSlaveCplt+0x392>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d19e:	d104      	bne.n	800d1aa <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d1a0:	6979      	ldr	r1, [r7, #20]
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 f892 	bl	800d2cc <I2C_ITListenCplt>
 800d1a8:	e030      	b.n	800d20c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	2b29      	cmp	r3, #41	; 0x29
 800d1b4:	d10e      	bne.n	800d1d4 <I2C_ITSlaveCplt+0x3bc>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d1bc:	d00a      	beq.n	800d1d4 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2210      	movs	r2, #16
 800d1c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f9ed 	bl	800d5a6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f7ff fcfa 	bl	800cbc6 <I2C_ITSlaveSeqCplt>
 800d1d2:	e01b      	b.n	800d20c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2210      	movs	r2, #16
 800d1da:	61da      	str	r2, [r3, #28]
 800d1dc:	e016      	b.n	800d20c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2210      	movs	r2, #16
 800d1e4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ea:	f043 0204 	orr.w	r2, r3, #4
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d003      	beq.n	800d200 <I2C_ITSlaveCplt+0x3e8>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d1fe:	d105      	bne.n	800d20c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f8b6 	bl	800d378 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d010      	beq.n	800d244 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d226:	4619      	mov	r1, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f8a5 	bl	800d378 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b28      	cmp	r3, #40	; 0x28
 800d238:	d141      	bne.n	800d2be <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d23a:	6979      	ldr	r1, [r7, #20]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 f845 	bl	800d2cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d242:	e03c      	b.n	800d2be <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d248:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d24c:	d014      	beq.n	800d278 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f7ff fcb9 	bl	800cbc6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a1c      	ldr	r2, [pc, #112]	; (800d2c8 <I2C_ITSlaveCplt+0x4b0>)
 800d258:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2220      	movs	r2, #32
 800d25e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f7fe fd68 	bl	800bd46 <HAL_I2C_ListenCpltCallback>
}
 800d276:	e022      	b.n	800d2be <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b22      	cmp	r3, #34	; 0x22
 800d282:	d10e      	bne.n	800d2a2 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2220      	movs	r2, #32
 800d288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7fe fd3b 	bl	800bd16 <HAL_I2C_SlaveRxCpltCallback>
}
 800d2a0:	e00d      	b.n	800d2be <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2220      	movs	r2, #32
 800d2a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7fe fd22 	bl	800bd02 <HAL_I2C_SlaveTxCpltCallback>
}
 800d2be:	bf00      	nop
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	ffff0000 	.word	0xffff0000

0800d2cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a26      	ldr	r2, [pc, #152]	; (800d374 <I2C_ITListenCplt+0xa8>)
 800d2da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2220      	movs	r2, #32
 800d2e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	089b      	lsrs	r3, r3, #2
 800d2fc:	f003 0301 	and.w	r3, r3, #1
 800d300:	2b00      	cmp	r3, #0
 800d302:	d022      	beq.n	800d34a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30e:	b2d2      	uxtb	r2, r2
 800d310:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d320:	2b00      	cmp	r3, #0
 800d322:	d012      	beq.n	800d34a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d328:	3b01      	subs	r3, #1
 800d32a:	b29a      	uxth	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d334:	b29b      	uxth	r3, r3
 800d336:	3b01      	subs	r3, #1
 800d338:	b29a      	uxth	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d342:	f043 0204 	orr.w	r2, r3, #4
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d34a:	f248 0103 	movw	r1, #32771	; 0x8003
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 fbf2 	bl	800db38 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2210      	movs	r2, #16
 800d35a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f7fe fcee 	bl	800bd46 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d36a:	bf00      	nop
 800d36c:	3708      	adds	r7, #8
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	ffff0000 	.word	0xffff0000

0800d378 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d388:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	4a6d      	ldr	r2, [pc, #436]	; (800d54c <I2C_ITError+0x1d4>)
 800d396:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	431a      	orrs	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
 800d3ac:	2b28      	cmp	r3, #40	; 0x28
 800d3ae:	d005      	beq.n	800d3bc <I2C_ITError+0x44>
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
 800d3b2:	2b29      	cmp	r3, #41	; 0x29
 800d3b4:	d002      	beq.n	800d3bc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
 800d3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ba:	d10b      	bne.n	800d3d4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d3bc:	2103      	movs	r1, #3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 fbba 	bl	800db38 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2228      	movs	r2, #40	; 0x28
 800d3c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a60      	ldr	r2, [pc, #384]	; (800d550 <I2C_ITError+0x1d8>)
 800d3d0:	635a      	str	r2, [r3, #52]	; 0x34
 800d3d2:	e030      	b.n	800d436 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d3d4:	f248 0103 	movw	r1, #32771	; 0x8003
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 fbad 	bl	800db38 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f8e1 	bl	800d5a6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	2b60      	cmp	r3, #96	; 0x60
 800d3ee:	d01f      	beq.n	800d430 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2220      	movs	r2, #32
 800d3f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	699b      	ldr	r3, [r3, #24]
 800d3fe:	f003 0320 	and.w	r3, r3, #32
 800d402:	2b20      	cmp	r3, #32
 800d404:	d114      	bne.n	800d430 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	699b      	ldr	r3, [r3, #24]
 800d40c:	f003 0310 	and.w	r3, r3, #16
 800d410:	2b10      	cmp	r3, #16
 800d412:	d109      	bne.n	800d428 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2210      	movs	r2, #16
 800d41a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d420:	f043 0204 	orr.w	r2, r3, #4
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2220      	movs	r2, #32
 800d42e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2200      	movs	r2, #0
 800d434:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d43a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d440:	2b00      	cmp	r3, #0
 800d442:	d039      	beq.n	800d4b8 <I2C_ITError+0x140>
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b11      	cmp	r3, #17
 800d448:	d002      	beq.n	800d450 <I2C_ITError+0xd8>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2b21      	cmp	r3, #33	; 0x21
 800d44e:	d133      	bne.n	800d4b8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d45a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d45e:	d107      	bne.n	800d470 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	681a      	ldr	r2, [r3, #0]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d46e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d474:	4618      	mov	r0, r3
 800d476:	f7fd f857 	bl	800a528 <HAL_DMA_GetState>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d017      	beq.n	800d4b0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d484:	4a33      	ldr	r2, [pc, #204]	; (800d554 <I2C_ITError+0x1dc>)
 800d486:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d494:	4618      	mov	r0, r3
 800d496:	f7fb fed7 	bl	8009248 <HAL_DMA_Abort_IT>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d04d      	beq.n	800d53c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d4ae:	e045      	b.n	800d53c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 f851 	bl	800d558 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d4b6:	e041      	b.n	800d53c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d039      	beq.n	800d534 <I2C_ITError+0x1bc>
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	2b12      	cmp	r3, #18
 800d4c4:	d002      	beq.n	800d4cc <I2C_ITError+0x154>
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	2b22      	cmp	r3, #34	; 0x22
 800d4ca:	d133      	bne.n	800d534 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4da:	d107      	bne.n	800d4ec <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d4ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7fd f819 	bl	800a528 <HAL_DMA_GetState>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d017      	beq.n	800d52c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d500:	4a14      	ldr	r2, [pc, #80]	; (800d554 <I2C_ITError+0x1dc>)
 800d502:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d510:	4618      	mov	r0, r3
 800d512:	f7fb fe99 	bl	8009248 <HAL_DMA_Abort_IT>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d011      	beq.n	800d540 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d526:	4610      	mov	r0, r2
 800d528:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d52a:	e009      	b.n	800d540 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 f813 	bl	800d558 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d532:	e005      	b.n	800d540 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 f80f 	bl	800d558 <I2C_TreatErrorCallback>
  }
}
 800d53a:	e002      	b.n	800d542 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d53c:	bf00      	nop
 800d53e:	e000      	b.n	800d542 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d540:	bf00      	nop
}
 800d542:	bf00      	nop
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	ffff0000 	.word	0xffff0000
 800d550:	0800c02f 	.word	0x0800c02f
 800d554:	0800d991 	.word	0x0800d991

0800d558 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d566:	b2db      	uxtb	r3, r3
 800d568:	2b60      	cmp	r3, #96	; 0x60
 800d56a:	d10e      	bne.n	800d58a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2220      	movs	r2, #32
 800d570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7fe fc07 	bl	800bd96 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d588:	e009      	b.n	800d59e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7fe fbf2 	bl	800bd82 <HAL_I2C_ErrorCallback>
}
 800d59e:	bf00      	nop
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d5a6:	b480      	push	{r7}
 800d5a8:	b083      	sub	sp, #12
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	699b      	ldr	r3, [r3, #24]
 800d5b4:	f003 0302 	and.w	r3, r3, #2
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	d103      	bne.n	800d5c4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	699b      	ldr	r3, [r3, #24]
 800d5ca:	f003 0301 	and.w	r3, r3, #1
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d007      	beq.n	800d5e2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	699a      	ldr	r2, [r3, #24]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f042 0201 	orr.w	r2, r2, #1
 800d5e0:	619a      	str	r2, [r3, #24]
  }
}
 800d5e2:	bf00      	nop
 800d5e4:	370c      	adds	r7, #12
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d60a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d610:	b29b      	uxth	r3, r3
 800d612:	2b00      	cmp	r3, #0
 800d614:	d104      	bne.n	800d620 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d616:	2120      	movs	r1, #32
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f000 fa09 	bl	800da30 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d61e:	e02d      	b.n	800d67c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d628:	441a      	add	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d632:	b29b      	uxth	r3, r3
 800d634:	2bff      	cmp	r3, #255	; 0xff
 800d636:	d903      	bls.n	800d640 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	22ff      	movs	r2, #255	; 0xff
 800d63c:	851a      	strh	r2, [r3, #40]	; 0x28
 800d63e:	e004      	b.n	800d64a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d644:	b29a      	uxth	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d652:	4619      	mov	r1, r3
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	3328      	adds	r3, #40	; 0x28
 800d65a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d660:	f7fb f86a 	bl	8008738 <HAL_DMA_Start_IT>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d004      	beq.n	800d674 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d66a:	2110      	movs	r1, #16
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	f7ff fe83 	bl	800d378 <I2C_ITError>
}
 800d672:	e003      	b.n	800d67c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d674:	2140      	movs	r1, #64	; 0x40
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f000 f9da 	bl	800da30 <I2C_Enable_IRQ>
}
 800d67c:	bf00      	nop
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d690:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d6a0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d104      	bne.n	800d6b6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d6ac:	2120      	movs	r1, #32
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f000 f9be 	bl	800da30 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d6b4:	e02d      	b.n	800d712 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d6be:	441a      	add	r2, r3
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	2bff      	cmp	r3, #255	; 0xff
 800d6cc:	d903      	bls.n	800d6d6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	22ff      	movs	r2, #255	; 0xff
 800d6d2:	851a      	strh	r2, [r3, #40]	; 0x28
 800d6d4:	e004      	b.n	800d6e0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3324      	adds	r3, #36	; 0x24
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d6f6:	f7fb f81f 	bl	8008738 <HAL_DMA_Start_IT>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d004      	beq.n	800d70a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d700:	2110      	movs	r1, #16
 800d702:	68f8      	ldr	r0, [r7, #12]
 800d704:	f7ff fe38 	bl	800d378 <I2C_ITError>
}
 800d708:	e003      	b.n	800d712 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d70a:	2140      	movs	r1, #64	; 0x40
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f000 f98f 	bl	800da30 <I2C_Enable_IRQ>
}
 800d712:	bf00      	nop
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
	...

0800d71c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d724:	2300      	movs	r3, #0
 800d726:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d732:	2b00      	cmp	r3, #0
 800d734:	d076      	beq.n	800d824 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a71      	ldr	r2, [pc, #452]	; (800d904 <I2C_DMAError+0x1e8>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d059      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a6f      	ldr	r2, [pc, #444]	; (800d908 <I2C_DMAError+0x1ec>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d053      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4a6d      	ldr	r2, [pc, #436]	; (800d90c <I2C_DMAError+0x1f0>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d04d      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a6b      	ldr	r2, [pc, #428]	; (800d910 <I2C_DMAError+0x1f4>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d047      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a69      	ldr	r2, [pc, #420]	; (800d914 <I2C_DMAError+0x1f8>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d041      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a67      	ldr	r2, [pc, #412]	; (800d918 <I2C_DMAError+0x1fc>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d03b      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a65      	ldr	r2, [pc, #404]	; (800d91c <I2C_DMAError+0x200>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d035      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a63      	ldr	r2, [pc, #396]	; (800d920 <I2C_DMAError+0x204>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d02f      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a61      	ldr	r2, [pc, #388]	; (800d924 <I2C_DMAError+0x208>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d029      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a5f      	ldr	r2, [pc, #380]	; (800d928 <I2C_DMAError+0x20c>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d023      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a5d      	ldr	r2, [pc, #372]	; (800d92c <I2C_DMAError+0x210>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d01d      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a5b      	ldr	r2, [pc, #364]	; (800d930 <I2C_DMAError+0x214>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d017      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4a59      	ldr	r2, [pc, #356]	; (800d934 <I2C_DMAError+0x218>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d011      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a57      	ldr	r2, [pc, #348]	; (800d938 <I2C_DMAError+0x21c>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d00b      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a55      	ldr	r2, [pc, #340]	; (800d93c <I2C_DMAError+0x220>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d005      	beq.n	800d7f6 <I2C_DMAError+0xda>
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a53      	ldr	r2, [pc, #332]	; (800d940 <I2C_DMAError+0x224>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d109      	bne.n	800d80a <I2C_DMAError+0xee>
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	bf0c      	ite	eq
 800d802:	2301      	moveq	r3, #1
 800d804:	2300      	movne	r3, #0
 800d806:	b2db      	uxtb	r3, r3
 800d808:	e008      	b.n	800d81c <I2C_DMAError+0x100>
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	bf0c      	ite	eq
 800d816:	2301      	moveq	r3, #1
 800d818:	2300      	movne	r3, #0
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d001      	beq.n	800d824 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d820:	2301      	movs	r3, #1
 800d822:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d828:	2b00      	cmp	r3, #0
 800d82a:	f000 8098 	beq.w	800d95e <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a33      	ldr	r2, [pc, #204]	; (800d904 <I2C_DMAError+0x1e8>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d059      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a31      	ldr	r2, [pc, #196]	; (800d908 <I2C_DMAError+0x1ec>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d053      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a2f      	ldr	r2, [pc, #188]	; (800d90c <I2C_DMAError+0x1f0>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d04d      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a2d      	ldr	r2, [pc, #180]	; (800d910 <I2C_DMAError+0x1f4>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d047      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a2b      	ldr	r2, [pc, #172]	; (800d914 <I2C_DMAError+0x1f8>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d041      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a29      	ldr	r2, [pc, #164]	; (800d918 <I2C_DMAError+0x1fc>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d03b      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a27      	ldr	r2, [pc, #156]	; (800d91c <I2C_DMAError+0x200>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d035      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a25      	ldr	r2, [pc, #148]	; (800d920 <I2C_DMAError+0x204>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d02f      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a23      	ldr	r2, [pc, #140]	; (800d924 <I2C_DMAError+0x208>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d029      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a21      	ldr	r2, [pc, #132]	; (800d928 <I2C_DMAError+0x20c>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d023      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a1f      	ldr	r2, [pc, #124]	; (800d92c <I2C_DMAError+0x210>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d01d      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a1d      	ldr	r2, [pc, #116]	; (800d930 <I2C_DMAError+0x214>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d017      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a1b      	ldr	r2, [pc, #108]	; (800d934 <I2C_DMAError+0x218>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d011      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a19      	ldr	r2, [pc, #100]	; (800d938 <I2C_DMAError+0x21c>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d00b      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a17      	ldr	r2, [pc, #92]	; (800d93c <I2C_DMAError+0x220>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d005      	beq.n	800d8ee <I2C_DMAError+0x1d2>
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a15      	ldr	r2, [pc, #84]	; (800d940 <I2C_DMAError+0x224>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d12a      	bne.n	800d944 <I2C_DMAError+0x228>
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	bf0c      	ite	eq
 800d8fa:	2301      	moveq	r3, #1
 800d8fc:	2300      	movne	r3, #0
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	e029      	b.n	800d956 <I2C_DMAError+0x23a>
 800d902:	bf00      	nop
 800d904:	40020010 	.word	0x40020010
 800d908:	40020028 	.word	0x40020028
 800d90c:	40020040 	.word	0x40020040
 800d910:	40020058 	.word	0x40020058
 800d914:	40020070 	.word	0x40020070
 800d918:	40020088 	.word	0x40020088
 800d91c:	400200a0 	.word	0x400200a0
 800d920:	400200b8 	.word	0x400200b8
 800d924:	40020410 	.word	0x40020410
 800d928:	40020428 	.word	0x40020428
 800d92c:	40020440 	.word	0x40020440
 800d930:	40020458 	.word	0x40020458
 800d934:	40020470 	.word	0x40020470
 800d938:	40020488 	.word	0x40020488
 800d93c:	400204a0 	.word	0x400204a0
 800d940:	400204b8 	.word	0x400204b8
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	bf0c      	ite	eq
 800d950:	2301      	moveq	r3, #1
 800d952:	2300      	movne	r3, #0
 800d954:	b2db      	uxtb	r3, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d95a:	2301      	movs	r3, #1
 800d95c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7fc fdf0 	bl	800a544 <HAL_DMA_GetError>
 800d964:	4603      	mov	r3, r0
 800d966:	2b02      	cmp	r3, #2
 800d968:	d00e      	beq.n	800d988 <I2C_DMAError+0x26c>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00b      	beq.n	800d988 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	685a      	ldr	r2, [r3, #4]
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d97e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d980:	2110      	movs	r1, #16
 800d982:	68b8      	ldr	r0, [r7, #8]
 800d984:	f7ff fcf8 	bl	800d378 <I2C_ITError>
  }
}
 800d988:	bf00      	nop
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d003      	beq.n	800d9be <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f7ff fdca 	bl	800d558 <I2C_TreatErrorCallback>
}
 800d9c4:	bf00      	nop
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	607b      	str	r3, [r7, #4]
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	817b      	strh	r3, [r7, #10]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d9de:	897b      	ldrh	r3, [r7, #10]
 800d9e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d9e4:	7a7b      	ldrb	r3, [r7, #9]
 800d9e6:	041b      	lsls	r3, r3, #16
 800d9e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d9ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	685a      	ldr	r2, [r3, #4]
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	0d5b      	lsrs	r3, r3, #21
 800da06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800da0a:	4b08      	ldr	r3, [pc, #32]	; (800da2c <I2C_TransferConfig+0x60>)
 800da0c:	430b      	orrs	r3, r1
 800da0e:	43db      	mvns	r3, r3
 800da10:	ea02 0103 	and.w	r1, r2, r3
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	697a      	ldr	r2, [r7, #20]
 800da1a:	430a      	orrs	r2, r1
 800da1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800da1e:	bf00      	nop
 800da20:	371c      	adds	r7, #28
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	03ff63ff 	.word	0x03ff63ff

0800da30 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800da30:	b480      	push	{r7}
 800da32:	b085      	sub	sp, #20
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	460b      	mov	r3, r1
 800da3a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800da3c:	2300      	movs	r3, #0
 800da3e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da44:	4a39      	ldr	r2, [pc, #228]	; (800db2c <I2C_Enable_IRQ+0xfc>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d032      	beq.n	800dab0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800da4e:	4a38      	ldr	r2, [pc, #224]	; (800db30 <I2C_Enable_IRQ+0x100>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d02d      	beq.n	800dab0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800da58:	4a36      	ldr	r2, [pc, #216]	; (800db34 <I2C_Enable_IRQ+0x104>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d028      	beq.n	800dab0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800da5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da62:	2b00      	cmp	r3, #0
 800da64:	da03      	bge.n	800da6e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800da6c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800da6e:	887b      	ldrh	r3, [r7, #2]
 800da70:	f003 0301 	and.w	r3, r3, #1
 800da74:	2b00      	cmp	r3, #0
 800da76:	d003      	beq.n	800da80 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800da7e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800da80:	887b      	ldrh	r3, [r7, #2]
 800da82:	f003 0302 	and.w	r3, r3, #2
 800da86:	2b00      	cmp	r3, #0
 800da88:	d003      	beq.n	800da92 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800da90:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800da92:	887b      	ldrh	r3, [r7, #2]
 800da94:	2b10      	cmp	r3, #16
 800da96:	d103      	bne.n	800daa0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800da9e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800daa0:	887b      	ldrh	r3, [r7, #2]
 800daa2:	2b20      	cmp	r3, #32
 800daa4:	d133      	bne.n	800db0e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f043 0320 	orr.w	r3, r3, #32
 800daac:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800daae:	e02e      	b.n	800db0e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	da03      	bge.n	800dac0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dabe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dac0:	887b      	ldrh	r3, [r7, #2]
 800dac2:	f003 0301 	and.w	r3, r3, #1
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d003      	beq.n	800dad2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dad0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dad2:	887b      	ldrh	r3, [r7, #2]
 800dad4:	f003 0302 	and.w	r3, r3, #2
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d003      	beq.n	800dae4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dae2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dae4:	887b      	ldrh	r3, [r7, #2]
 800dae6:	2b10      	cmp	r3, #16
 800dae8:	d103      	bne.n	800daf2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800daf0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800daf2:	887b      	ldrh	r3, [r7, #2]
 800daf4:	2b20      	cmp	r3, #32
 800daf6:	d103      	bne.n	800db00 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dafe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800db00:	887b      	ldrh	r3, [r7, #2]
 800db02:	2b40      	cmp	r3, #64	; 0x40
 800db04:	d103      	bne.n	800db0e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db0c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	6819      	ldr	r1, [r3, #0]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	430a      	orrs	r2, r1
 800db1c:	601a      	str	r2, [r3, #0]
}
 800db1e:	bf00      	nop
 800db20:	3714      	adds	r7, #20
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr
 800db2a:	bf00      	nop
 800db2c:	0800c237 	.word	0x0800c237
 800db30:	0800c67d 	.word	0x0800c67d
 800db34:	0800c41d 	.word	0x0800c41d

0800db38 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800db44:	2300      	movs	r3, #0
 800db46:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800db48:	887b      	ldrh	r3, [r7, #2]
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00f      	beq.n	800db72 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800db58:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db60:	b2db      	uxtb	r3, r3
 800db62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800db66:	2b28      	cmp	r3, #40	; 0x28
 800db68:	d003      	beq.n	800db72 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800db70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800db72:	887b      	ldrh	r3, [r7, #2]
 800db74:	f003 0302 	and.w	r3, r3, #2
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00f      	beq.n	800db9c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800db82:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800db90:	2b28      	cmp	r3, #40	; 0x28
 800db92:	d003      	beq.n	800db9c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800db9a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800db9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	da03      	bge.n	800dbac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dbaa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dbac:	887b      	ldrh	r3, [r7, #2]
 800dbae:	2b10      	cmp	r3, #16
 800dbb0:	d103      	bne.n	800dbba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dbb8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dbba:	887b      	ldrh	r3, [r7, #2]
 800dbbc:	2b20      	cmp	r3, #32
 800dbbe:	d103      	bne.n	800dbc8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f043 0320 	orr.w	r3, r3, #32
 800dbc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dbc8:	887b      	ldrh	r3, [r7, #2]
 800dbca:	2b40      	cmp	r3, #64	; 0x40
 800dbcc:	d103      	bne.n	800dbd6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbd4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	6819      	ldr	r1, [r3, #0]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	43da      	mvns	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	400a      	ands	r2, r1
 800dbe6:	601a      	str	r2, [r3, #0]
}
 800dbe8:	bf00      	nop
 800dbea:	3714      	adds	r7, #20
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	2b20      	cmp	r3, #32
 800dc08:	d138      	bne.n	800dc7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d101      	bne.n	800dc18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dc14:	2302      	movs	r3, #2
 800dc16:	e032      	b.n	800dc7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2224      	movs	r2, #36	; 0x24
 800dc24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f022 0201 	bic.w	r2, r2, #1
 800dc36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dc46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6819      	ldr	r1, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	683a      	ldr	r2, [r7, #0]
 800dc54:	430a      	orrs	r2, r1
 800dc56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f042 0201 	orr.w	r2, r2, #1
 800dc66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2220      	movs	r2, #32
 800dc6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	e000      	b.n	800dc7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dc7c:	2302      	movs	r3, #2
  }
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	370c      	adds	r7, #12
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800dc8a:	b480      	push	{r7}
 800dc8c:	b085      	sub	sp, #20
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	2b20      	cmp	r3, #32
 800dc9e:	d139      	bne.n	800dd14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d101      	bne.n	800dcae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800dcaa:	2302      	movs	r3, #2
 800dcac:	e033      	b.n	800dd16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2224      	movs	r2, #36	; 0x24
 800dcba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f022 0201 	bic.w	r2, r2, #1
 800dccc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800dcdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	021b      	lsls	r3, r3, #8
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f042 0201 	orr.w	r2, r2, #1
 800dcfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2220      	movs	r2, #32
 800dd04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dd10:	2300      	movs	r3, #0
 800dd12:	e000      	b.n	800dd16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800dd14:	2302      	movs	r3, #2
  }
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr
	...

0800dd24 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd2c:	4b0d      	ldr	r3, [pc, #52]	; (800dd64 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800dd2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dd32:	4a0c      	ldr	r2, [pc, #48]	; (800dd64 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800dd34:	f043 0302 	orr.w	r3, r3, #2
 800dd38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800dd3c:	4b09      	ldr	r3, [pc, #36]	; (800dd64 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800dd3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800dd42:	f003 0302 	and.w	r3, r3, #2
 800dd46:	60fb      	str	r3, [r7, #12]
 800dd48:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800dd4a:	4b07      	ldr	r3, [pc, #28]	; (800dd68 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800dd4c:	685a      	ldr	r2, [r3, #4]
 800dd4e:	4906      	ldr	r1, [pc, #24]	; (800dd68 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4313      	orrs	r3, r2
 800dd54:	604b      	str	r3, [r1, #4]
}
 800dd56:	bf00      	nop
 800dd58:	3714      	adds	r7, #20
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	58024400 	.word	0x58024400
 800dd68:	58000400 	.word	0x58000400

0800dd6c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800dd7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800dd98:	4b18      	ldr	r3, [pc, #96]	; (800ddfc <HAL_PWR_EnterSTOPMode+0x70>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f023 0201 	bic.w	r2, r3, #1
 800dda0:	4916      	ldr	r1, [pc, #88]	; (800ddfc <HAL_PWR_EnterSTOPMode+0x70>)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4313      	orrs	r3, r2
 800dda6:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800dda8:	4b14      	ldr	r3, [pc, #80]	; (800ddfc <HAL_PWR_EnterSTOPMode+0x70>)
 800ddaa:	691b      	ldr	r3, [r3, #16]
 800ddac:	4a13      	ldr	r2, [pc, #76]	; (800ddfc <HAL_PWR_EnterSTOPMode+0x70>)
 800ddae:	f023 0305 	bic.w	r3, r3, #5
 800ddb2:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800ddb4:	4b11      	ldr	r3, [pc, #68]	; (800ddfc <HAL_PWR_EnterSTOPMode+0x70>)
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	4a10      	ldr	r2, [pc, #64]	; (800ddfc <HAL_PWR_EnterSTOPMode+0x70>)
 800ddba:	f023 0302 	bic.w	r3, r3, #2
 800ddbe:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ddc0:	4b0f      	ldr	r3, [pc, #60]	; (800de00 <HAL_PWR_EnterSTOPMode+0x74>)
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	4a0e      	ldr	r2, [pc, #56]	; (800de00 <HAL_PWR_EnterSTOPMode+0x74>)
 800ddc6:	f043 0304 	orr.w	r3, r3, #4
 800ddca:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800ddcc:	f3bf 8f4f 	dsb	sy
}
 800ddd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ddd2:	f3bf 8f6f 	isb	sy
}
 800ddd6:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800ddd8:	78fb      	ldrb	r3, [r7, #3]
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d101      	bne.n	800dde2 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800ddde:	bf30      	wfi
 800dde0:	e000      	b.n	800dde4 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800dde2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800dde4:	4b06      	ldr	r3, [pc, #24]	; (800de00 <HAL_PWR_EnterSTOPMode+0x74>)
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	4a05      	ldr	r2, [pc, #20]	; (800de00 <HAL_PWR_EnterSTOPMode+0x74>)
 800ddea:	f023 0304 	bic.w	r3, r3, #4
 800ddee:	6113      	str	r3, [r2, #16]
}
 800ddf0:	bf00      	nop
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr
 800ddfc:	58024800 	.word	0x58024800
 800de00:	e000ed00 	.word	0xe000ed00

0800de04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800de0c:	4b19      	ldr	r3, [pc, #100]	; (800de74 <HAL_PWREx_ConfigSupply+0x70>)
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	f003 0304 	and.w	r3, r3, #4
 800de14:	2b04      	cmp	r3, #4
 800de16:	d00a      	beq.n	800de2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800de18:	4b16      	ldr	r3, [pc, #88]	; (800de74 <HAL_PWREx_ConfigSupply+0x70>)
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	f003 0307 	and.w	r3, r3, #7
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	429a      	cmp	r2, r3
 800de24:	d001      	beq.n	800de2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800de26:	2301      	movs	r3, #1
 800de28:	e01f      	b.n	800de6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800de2a:	2300      	movs	r3, #0
 800de2c:	e01d      	b.n	800de6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800de2e:	4b11      	ldr	r3, [pc, #68]	; (800de74 <HAL_PWREx_ConfigSupply+0x70>)
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	f023 0207 	bic.w	r2, r3, #7
 800de36:	490f      	ldr	r1, [pc, #60]	; (800de74 <HAL_PWREx_ConfigSupply+0x70>)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	4313      	orrs	r3, r2
 800de3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800de3e:	f7f7 fff7 	bl	8005e30 <HAL_GetTick>
 800de42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800de44:	e009      	b.n	800de5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800de46:	f7f7 fff3 	bl	8005e30 <HAL_GetTick>
 800de4a:	4602      	mov	r2, r0
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	1ad3      	subs	r3, r2, r3
 800de50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de54:	d901      	bls.n	800de5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800de56:	2301      	movs	r3, #1
 800de58:	e007      	b.n	800de6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800de5a:	4b06      	ldr	r3, [pc, #24]	; (800de74 <HAL_PWREx_ConfigSupply+0x70>)
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de66:	d1ee      	bne.n	800de46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	58024800 	.word	0x58024800

0800de78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b08c      	sub	sp, #48	; 0x30
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d102      	bne.n	800de8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800de86:	2301      	movs	r3, #1
 800de88:	f000 bc48 	b.w	800e71c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f003 0301 	and.w	r3, r3, #1
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 8088 	beq.w	800dfaa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de9a:	4b99      	ldr	r3, [pc, #612]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800de9c:	691b      	ldr	r3, [r3, #16]
 800de9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dea4:	4b96      	ldr	r3, [pc, #600]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800dea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dea8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800deaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deac:	2b10      	cmp	r3, #16
 800deae:	d007      	beq.n	800dec0 <HAL_RCC_OscConfig+0x48>
 800deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb2:	2b18      	cmp	r3, #24
 800deb4:	d111      	bne.n	800deda <HAL_RCC_OscConfig+0x62>
 800deb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb8:	f003 0303 	and.w	r3, r3, #3
 800debc:	2b02      	cmp	r3, #2
 800debe:	d10c      	bne.n	800deda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dec0:	4b8f      	ldr	r3, [pc, #572]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d06d      	beq.n	800dfa8 <HAL_RCC_OscConfig+0x130>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d169      	bne.n	800dfa8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	f000 bc21 	b.w	800e71c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dee2:	d106      	bne.n	800def2 <HAL_RCC_OscConfig+0x7a>
 800dee4:	4b86      	ldr	r3, [pc, #536]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a85      	ldr	r2, [pc, #532]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800deea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	e02e      	b.n	800df50 <HAL_RCC_OscConfig+0xd8>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10c      	bne.n	800df14 <HAL_RCC_OscConfig+0x9c>
 800defa:	4b81      	ldr	r3, [pc, #516]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a80      	ldr	r2, [pc, #512]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df04:	6013      	str	r3, [r2, #0]
 800df06:	4b7e      	ldr	r3, [pc, #504]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a7d      	ldr	r2, [pc, #500]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df10:	6013      	str	r3, [r2, #0]
 800df12:	e01d      	b.n	800df50 <HAL_RCC_OscConfig+0xd8>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800df1c:	d10c      	bne.n	800df38 <HAL_RCC_OscConfig+0xc0>
 800df1e:	4b78      	ldr	r3, [pc, #480]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a77      	ldr	r2, [pc, #476]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df28:	6013      	str	r3, [r2, #0]
 800df2a:	4b75      	ldr	r3, [pc, #468]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a74      	ldr	r2, [pc, #464]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df34:	6013      	str	r3, [r2, #0]
 800df36:	e00b      	b.n	800df50 <HAL_RCC_OscConfig+0xd8>
 800df38:	4b71      	ldr	r3, [pc, #452]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a70      	ldr	r2, [pc, #448]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df42:	6013      	str	r3, [r2, #0]
 800df44:	4b6e      	ldr	r3, [pc, #440]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a6d      	ldr	r2, [pc, #436]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d013      	beq.n	800df80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df58:	f7f7 ff6a 	bl	8005e30 <HAL_GetTick>
 800df5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800df5e:	e008      	b.n	800df72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800df60:	f7f7 ff66 	bl	8005e30 <HAL_GetTick>
 800df64:	4602      	mov	r2, r0
 800df66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df68:	1ad3      	subs	r3, r2, r3
 800df6a:	2b64      	cmp	r3, #100	; 0x64
 800df6c:	d901      	bls.n	800df72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800df6e:	2303      	movs	r3, #3
 800df70:	e3d4      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800df72:	4b63      	ldr	r3, [pc, #396]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d0f0      	beq.n	800df60 <HAL_RCC_OscConfig+0xe8>
 800df7e:	e014      	b.n	800dfaa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df80:	f7f7 ff56 	bl	8005e30 <HAL_GetTick>
 800df84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800df86:	e008      	b.n	800df9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800df88:	f7f7 ff52 	bl	8005e30 <HAL_GetTick>
 800df8c:	4602      	mov	r2, r0
 800df8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df90:	1ad3      	subs	r3, r2, r3
 800df92:	2b64      	cmp	r3, #100	; 0x64
 800df94:	d901      	bls.n	800df9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800df96:	2303      	movs	r3, #3
 800df98:	e3c0      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800df9a:	4b59      	ldr	r3, [pc, #356]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1f0      	bne.n	800df88 <HAL_RCC_OscConfig+0x110>
 800dfa6:	e000      	b.n	800dfaa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dfa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f003 0302 	and.w	r3, r3, #2
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 80ca 	beq.w	800e14c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dfb8:	4b51      	ldr	r3, [pc, #324]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800dfba:	691b      	ldr	r3, [r3, #16]
 800dfbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dfc2:	4b4f      	ldr	r3, [pc, #316]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800dfc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dfc8:	6a3b      	ldr	r3, [r7, #32]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d007      	beq.n	800dfde <HAL_RCC_OscConfig+0x166>
 800dfce:	6a3b      	ldr	r3, [r7, #32]
 800dfd0:	2b18      	cmp	r3, #24
 800dfd2:	d156      	bne.n	800e082 <HAL_RCC_OscConfig+0x20a>
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	f003 0303 	and.w	r3, r3, #3
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d151      	bne.n	800e082 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dfde:	4b48      	ldr	r3, [pc, #288]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f003 0304 	and.w	r3, r3, #4
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d005      	beq.n	800dff6 <HAL_RCC_OscConfig+0x17e>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d101      	bne.n	800dff6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800dff2:	2301      	movs	r3, #1
 800dff4:	e392      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dff6:	4b42      	ldr	r3, [pc, #264]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f023 0219 	bic.w	r2, r3, #25
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	493f      	ldr	r1, [pc, #252]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e004:	4313      	orrs	r3, r2
 800e006:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e008:	f7f7 ff12 	bl	8005e30 <HAL_GetTick>
 800e00c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e00e:	e008      	b.n	800e022 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e010:	f7f7 ff0e 	bl	8005e30 <HAL_GetTick>
 800e014:	4602      	mov	r2, r0
 800e016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	2b02      	cmp	r3, #2
 800e01c:	d901      	bls.n	800e022 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e01e:	2303      	movs	r3, #3
 800e020:	e37c      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e022:	4b37      	ldr	r3, [pc, #220]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f003 0304 	and.w	r3, r3, #4
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d0f0      	beq.n	800e010 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e02e:	f7f7 ff0b 	bl	8005e48 <HAL_GetREVID>
 800e032:	4603      	mov	r3, r0
 800e034:	f241 0203 	movw	r2, #4099	; 0x1003
 800e038:	4293      	cmp	r3, r2
 800e03a:	d817      	bhi.n	800e06c <HAL_RCC_OscConfig+0x1f4>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	691b      	ldr	r3, [r3, #16]
 800e040:	2b40      	cmp	r3, #64	; 0x40
 800e042:	d108      	bne.n	800e056 <HAL_RCC_OscConfig+0x1de>
 800e044:	4b2e      	ldr	r3, [pc, #184]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e04c:	4a2c      	ldr	r2, [pc, #176]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e04e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e052:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e054:	e07a      	b.n	800e14c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e056:	4b2a      	ldr	r3, [pc, #168]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	031b      	lsls	r3, r3, #12
 800e064:	4926      	ldr	r1, [pc, #152]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e066:	4313      	orrs	r3, r2
 800e068:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e06a:	e06f      	b.n	800e14c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e06c:	4b24      	ldr	r3, [pc, #144]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	691b      	ldr	r3, [r3, #16]
 800e078:	061b      	lsls	r3, r3, #24
 800e07a:	4921      	ldr	r1, [pc, #132]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e07c:	4313      	orrs	r3, r2
 800e07e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e080:	e064      	b.n	800e14c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d047      	beq.n	800e11a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e08a:	4b1d      	ldr	r3, [pc, #116]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f023 0219 	bic.w	r2, r3, #25
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	491a      	ldr	r1, [pc, #104]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e098:	4313      	orrs	r3, r2
 800e09a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e09c:	f7f7 fec8 	bl	8005e30 <HAL_GetTick>
 800e0a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e0a2:	e008      	b.n	800e0b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e0a4:	f7f7 fec4 	bl	8005e30 <HAL_GetTick>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	1ad3      	subs	r3, r2, r3
 800e0ae:	2b02      	cmp	r3, #2
 800e0b0:	d901      	bls.n	800e0b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e0b2:	2303      	movs	r3, #3
 800e0b4:	e332      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e0b6:	4b12      	ldr	r3, [pc, #72]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f003 0304 	and.w	r3, r3, #4
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d0f0      	beq.n	800e0a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e0c2:	f7f7 fec1 	bl	8005e48 <HAL_GetREVID>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	f241 0203 	movw	r2, #4099	; 0x1003
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d819      	bhi.n	800e104 <HAL_RCC_OscConfig+0x28c>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	2b40      	cmp	r3, #64	; 0x40
 800e0d6:	d108      	bne.n	800e0ea <HAL_RCC_OscConfig+0x272>
 800e0d8:	4b09      	ldr	r3, [pc, #36]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e0e0:	4a07      	ldr	r2, [pc, #28]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e0e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0e6:	6053      	str	r3, [r2, #4]
 800e0e8:	e030      	b.n	800e14c <HAL_RCC_OscConfig+0x2d4>
 800e0ea:	4b05      	ldr	r3, [pc, #20]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	031b      	lsls	r3, r3, #12
 800e0f8:	4901      	ldr	r1, [pc, #4]	; (800e100 <HAL_RCC_OscConfig+0x288>)
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	604b      	str	r3, [r1, #4]
 800e0fe:	e025      	b.n	800e14c <HAL_RCC_OscConfig+0x2d4>
 800e100:	58024400 	.word	0x58024400
 800e104:	4b9a      	ldr	r3, [pc, #616]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	691b      	ldr	r3, [r3, #16]
 800e110:	061b      	lsls	r3, r3, #24
 800e112:	4997      	ldr	r1, [pc, #604]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e114:	4313      	orrs	r3, r2
 800e116:	604b      	str	r3, [r1, #4]
 800e118:	e018      	b.n	800e14c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e11a:	4b95      	ldr	r3, [pc, #596]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a94      	ldr	r2, [pc, #592]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e120:	f023 0301 	bic.w	r3, r3, #1
 800e124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e126:	f7f7 fe83 	bl	8005e30 <HAL_GetTick>
 800e12a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e12c:	e008      	b.n	800e140 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e12e:	f7f7 fe7f 	bl	8005e30 <HAL_GetTick>
 800e132:	4602      	mov	r2, r0
 800e134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	2b02      	cmp	r3, #2
 800e13a:	d901      	bls.n	800e140 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e13c:	2303      	movs	r3, #3
 800e13e:	e2ed      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e140:	4b8b      	ldr	r3, [pc, #556]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f003 0304 	and.w	r3, r3, #4
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1f0      	bne.n	800e12e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f003 0310 	and.w	r3, r3, #16
 800e154:	2b00      	cmp	r3, #0
 800e156:	f000 80a9 	beq.w	800e2ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e15a:	4b85      	ldr	r3, [pc, #532]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e15c:	691b      	ldr	r3, [r3, #16]
 800e15e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e162:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e164:	4b82      	ldr	r3, [pc, #520]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e168:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e16a:	69bb      	ldr	r3, [r7, #24]
 800e16c:	2b08      	cmp	r3, #8
 800e16e:	d007      	beq.n	800e180 <HAL_RCC_OscConfig+0x308>
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	2b18      	cmp	r3, #24
 800e174:	d13a      	bne.n	800e1ec <HAL_RCC_OscConfig+0x374>
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	f003 0303 	and.w	r3, r3, #3
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d135      	bne.n	800e1ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e180:	4b7b      	ldr	r3, [pc, #492]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d005      	beq.n	800e198 <HAL_RCC_OscConfig+0x320>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	69db      	ldr	r3, [r3, #28]
 800e190:	2b80      	cmp	r3, #128	; 0x80
 800e192:	d001      	beq.n	800e198 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e194:	2301      	movs	r3, #1
 800e196:	e2c1      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e198:	f7f7 fe56 	bl	8005e48 <HAL_GetREVID>
 800e19c:	4603      	mov	r3, r0
 800e19e:	f241 0203 	movw	r2, #4099	; 0x1003
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d817      	bhi.n	800e1d6 <HAL_RCC_OscConfig+0x35e>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6a1b      	ldr	r3, [r3, #32]
 800e1aa:	2b20      	cmp	r3, #32
 800e1ac:	d108      	bne.n	800e1c0 <HAL_RCC_OscConfig+0x348>
 800e1ae:	4b70      	ldr	r3, [pc, #448]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e1b6:	4a6e      	ldr	r2, [pc, #440]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e1b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e1bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e1be:	e075      	b.n	800e2ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e1c0:	4b6b      	ldr	r3, [pc, #428]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6a1b      	ldr	r3, [r3, #32]
 800e1cc:	069b      	lsls	r3, r3, #26
 800e1ce:	4968      	ldr	r1, [pc, #416]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e1d4:	e06a      	b.n	800e2ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e1d6:	4b66      	ldr	r3, [pc, #408]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a1b      	ldr	r3, [r3, #32]
 800e1e2:	061b      	lsls	r3, r3, #24
 800e1e4:	4962      	ldr	r1, [pc, #392]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e1ea:	e05f      	b.n	800e2ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d042      	beq.n	800e27a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e1f4:	4b5e      	ldr	r3, [pc, #376]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4a5d      	ldr	r2, [pc, #372]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e1fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e200:	f7f7 fe16 	bl	8005e30 <HAL_GetTick>
 800e204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e206:	e008      	b.n	800e21a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e208:	f7f7 fe12 	bl	8005e30 <HAL_GetTick>
 800e20c:	4602      	mov	r2, r0
 800e20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	2b02      	cmp	r3, #2
 800e214:	d901      	bls.n	800e21a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e216:	2303      	movs	r3, #3
 800e218:	e280      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e21a:	4b55      	ldr	r3, [pc, #340]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e222:	2b00      	cmp	r3, #0
 800e224:	d0f0      	beq.n	800e208 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e226:	f7f7 fe0f 	bl	8005e48 <HAL_GetREVID>
 800e22a:	4603      	mov	r3, r0
 800e22c:	f241 0203 	movw	r2, #4099	; 0x1003
 800e230:	4293      	cmp	r3, r2
 800e232:	d817      	bhi.n	800e264 <HAL_RCC_OscConfig+0x3ec>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	2b20      	cmp	r3, #32
 800e23a:	d108      	bne.n	800e24e <HAL_RCC_OscConfig+0x3d6>
 800e23c:	4b4c      	ldr	r3, [pc, #304]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e244:	4a4a      	ldr	r2, [pc, #296]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e24a:	6053      	str	r3, [r2, #4]
 800e24c:	e02e      	b.n	800e2ac <HAL_RCC_OscConfig+0x434>
 800e24e:	4b48      	ldr	r3, [pc, #288]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a1b      	ldr	r3, [r3, #32]
 800e25a:	069b      	lsls	r3, r3, #26
 800e25c:	4944      	ldr	r1, [pc, #272]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e25e:	4313      	orrs	r3, r2
 800e260:	604b      	str	r3, [r1, #4]
 800e262:	e023      	b.n	800e2ac <HAL_RCC_OscConfig+0x434>
 800e264:	4b42      	ldr	r3, [pc, #264]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6a1b      	ldr	r3, [r3, #32]
 800e270:	061b      	lsls	r3, r3, #24
 800e272:	493f      	ldr	r1, [pc, #252]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e274:	4313      	orrs	r3, r2
 800e276:	60cb      	str	r3, [r1, #12]
 800e278:	e018      	b.n	800e2ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e27a:	4b3d      	ldr	r3, [pc, #244]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a3c      	ldr	r2, [pc, #240]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e286:	f7f7 fdd3 	bl	8005e30 <HAL_GetTick>
 800e28a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e28c:	e008      	b.n	800e2a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e28e:	f7f7 fdcf 	bl	8005e30 <HAL_GetTick>
 800e292:	4602      	mov	r2, r0
 800e294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e296:	1ad3      	subs	r3, r2, r3
 800e298:	2b02      	cmp	r3, #2
 800e29a:	d901      	bls.n	800e2a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e29c:	2303      	movs	r3, #3
 800e29e:	e23d      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e2a0:	4b33      	ldr	r3, [pc, #204]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d1f0      	bne.n	800e28e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f003 0308 	and.w	r3, r3, #8
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d036      	beq.n	800e326 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	695b      	ldr	r3, [r3, #20]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d019      	beq.n	800e2f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e2c0:	4b2b      	ldr	r3, [pc, #172]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e2c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c4:	4a2a      	ldr	r2, [pc, #168]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e2c6:	f043 0301 	orr.w	r3, r3, #1
 800e2ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2cc:	f7f7 fdb0 	bl	8005e30 <HAL_GetTick>
 800e2d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e2d2:	e008      	b.n	800e2e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e2d4:	f7f7 fdac 	bl	8005e30 <HAL_GetTick>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	2b02      	cmp	r3, #2
 800e2e0:	d901      	bls.n	800e2e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	e21a      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e2e6:	4b22      	ldr	r3, [pc, #136]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e2e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2ea:	f003 0302 	and.w	r3, r3, #2
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d0f0      	beq.n	800e2d4 <HAL_RCC_OscConfig+0x45c>
 800e2f2:	e018      	b.n	800e326 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e2f4:	4b1e      	ldr	r3, [pc, #120]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e2f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2f8:	4a1d      	ldr	r2, [pc, #116]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e2fa:	f023 0301 	bic.w	r3, r3, #1
 800e2fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e300:	f7f7 fd96 	bl	8005e30 <HAL_GetTick>
 800e304:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e306:	e008      	b.n	800e31a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e308:	f7f7 fd92 	bl	8005e30 <HAL_GetTick>
 800e30c:	4602      	mov	r2, r0
 800e30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	2b02      	cmp	r3, #2
 800e314:	d901      	bls.n	800e31a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e316:	2303      	movs	r3, #3
 800e318:	e200      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e31a:	4b15      	ldr	r3, [pc, #84]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e31c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e31e:	f003 0302 	and.w	r3, r3, #2
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1f0      	bne.n	800e308 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f003 0320 	and.w	r3, r3, #32
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d039      	beq.n	800e3a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	699b      	ldr	r3, [r3, #24]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d01c      	beq.n	800e374 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e33a:	4b0d      	ldr	r3, [pc, #52]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4a0c      	ldr	r2, [pc, #48]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e340:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e344:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e346:	f7f7 fd73 	bl	8005e30 <HAL_GetTick>
 800e34a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e34c:	e008      	b.n	800e360 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e34e:	f7f7 fd6f 	bl	8005e30 <HAL_GetTick>
 800e352:	4602      	mov	r2, r0
 800e354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e356:	1ad3      	subs	r3, r2, r3
 800e358:	2b02      	cmp	r3, #2
 800e35a:	d901      	bls.n	800e360 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e35c:	2303      	movs	r3, #3
 800e35e:	e1dd      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e360:	4b03      	ldr	r3, [pc, #12]	; (800e370 <HAL_RCC_OscConfig+0x4f8>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d0f0      	beq.n	800e34e <HAL_RCC_OscConfig+0x4d6>
 800e36c:	e01b      	b.n	800e3a6 <HAL_RCC_OscConfig+0x52e>
 800e36e:	bf00      	nop
 800e370:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e374:	4b9b      	ldr	r3, [pc, #620]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a9a      	ldr	r2, [pc, #616]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e37a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e37e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e380:	f7f7 fd56 	bl	8005e30 <HAL_GetTick>
 800e384:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e386:	e008      	b.n	800e39a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e388:	f7f7 fd52 	bl	8005e30 <HAL_GetTick>
 800e38c:	4602      	mov	r2, r0
 800e38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e390:	1ad3      	subs	r3, r2, r3
 800e392:	2b02      	cmp	r3, #2
 800e394:	d901      	bls.n	800e39a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e396:	2303      	movs	r3, #3
 800e398:	e1c0      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e39a:	4b92      	ldr	r3, [pc, #584]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1f0      	bne.n	800e388 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f003 0304 	and.w	r3, r3, #4
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	f000 8081 	beq.w	800e4b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e3b4:	4b8c      	ldr	r3, [pc, #560]	; (800e5e8 <HAL_RCC_OscConfig+0x770>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a8b      	ldr	r2, [pc, #556]	; (800e5e8 <HAL_RCC_OscConfig+0x770>)
 800e3ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e3c0:	f7f7 fd36 	bl	8005e30 <HAL_GetTick>
 800e3c4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e3c6:	e008      	b.n	800e3da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e3c8:	f7f7 fd32 	bl	8005e30 <HAL_GetTick>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	2b64      	cmp	r3, #100	; 0x64
 800e3d4:	d901      	bls.n	800e3da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	e1a0      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e3da:	4b83      	ldr	r3, [pc, #524]	; (800e5e8 <HAL_RCC_OscConfig+0x770>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d0f0      	beq.n	800e3c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	689b      	ldr	r3, [r3, #8]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d106      	bne.n	800e3fc <HAL_RCC_OscConfig+0x584>
 800e3ee:	4b7d      	ldr	r3, [pc, #500]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3f2:	4a7c      	ldr	r2, [pc, #496]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e3f4:	f043 0301 	orr.w	r3, r3, #1
 800e3f8:	6713      	str	r3, [r2, #112]	; 0x70
 800e3fa:	e02d      	b.n	800e458 <HAL_RCC_OscConfig+0x5e0>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	689b      	ldr	r3, [r3, #8]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10c      	bne.n	800e41e <HAL_RCC_OscConfig+0x5a6>
 800e404:	4b77      	ldr	r3, [pc, #476]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e408:	4a76      	ldr	r2, [pc, #472]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e40a:	f023 0301 	bic.w	r3, r3, #1
 800e40e:	6713      	str	r3, [r2, #112]	; 0x70
 800e410:	4b74      	ldr	r3, [pc, #464]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e414:	4a73      	ldr	r2, [pc, #460]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e416:	f023 0304 	bic.w	r3, r3, #4
 800e41a:	6713      	str	r3, [r2, #112]	; 0x70
 800e41c:	e01c      	b.n	800e458 <HAL_RCC_OscConfig+0x5e0>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	689b      	ldr	r3, [r3, #8]
 800e422:	2b05      	cmp	r3, #5
 800e424:	d10c      	bne.n	800e440 <HAL_RCC_OscConfig+0x5c8>
 800e426:	4b6f      	ldr	r3, [pc, #444]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e42a:	4a6e      	ldr	r2, [pc, #440]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e42c:	f043 0304 	orr.w	r3, r3, #4
 800e430:	6713      	str	r3, [r2, #112]	; 0x70
 800e432:	4b6c      	ldr	r3, [pc, #432]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e436:	4a6b      	ldr	r2, [pc, #428]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e438:	f043 0301 	orr.w	r3, r3, #1
 800e43c:	6713      	str	r3, [r2, #112]	; 0x70
 800e43e:	e00b      	b.n	800e458 <HAL_RCC_OscConfig+0x5e0>
 800e440:	4b68      	ldr	r3, [pc, #416]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e444:	4a67      	ldr	r2, [pc, #412]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e446:	f023 0301 	bic.w	r3, r3, #1
 800e44a:	6713      	str	r3, [r2, #112]	; 0x70
 800e44c:	4b65      	ldr	r3, [pc, #404]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e450:	4a64      	ldr	r2, [pc, #400]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e452:	f023 0304 	bic.w	r3, r3, #4
 800e456:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	689b      	ldr	r3, [r3, #8]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d015      	beq.n	800e48c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e460:	f7f7 fce6 	bl	8005e30 <HAL_GetTick>
 800e464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e466:	e00a      	b.n	800e47e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e468:	f7f7 fce2 	bl	8005e30 <HAL_GetTick>
 800e46c:	4602      	mov	r2, r0
 800e46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	f241 3288 	movw	r2, #5000	; 0x1388
 800e476:	4293      	cmp	r3, r2
 800e478:	d901      	bls.n	800e47e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e47a:	2303      	movs	r3, #3
 800e47c:	e14e      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e47e:	4b59      	ldr	r3, [pc, #356]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e482:	f003 0302 	and.w	r3, r3, #2
 800e486:	2b00      	cmp	r3, #0
 800e488:	d0ee      	beq.n	800e468 <HAL_RCC_OscConfig+0x5f0>
 800e48a:	e014      	b.n	800e4b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e48c:	f7f7 fcd0 	bl	8005e30 <HAL_GetTick>
 800e490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e492:	e00a      	b.n	800e4aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e494:	f7f7 fccc 	bl	8005e30 <HAL_GetTick>
 800e498:	4602      	mov	r2, r0
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d901      	bls.n	800e4aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e4a6:	2303      	movs	r3, #3
 800e4a8:	e138      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e4aa:	4b4e      	ldr	r3, [pc, #312]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4ae:	f003 0302 	and.w	r3, r3, #2
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1ee      	bne.n	800e494 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	f000 812d 	beq.w	800e71a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e4c0:	4b48      	ldr	r3, [pc, #288]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4c8:	2b18      	cmp	r3, #24
 800e4ca:	f000 80bd 	beq.w	800e648 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	f040 809e 	bne.w	800e614 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e4d8:	4b42      	ldr	r3, [pc, #264]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a41      	ldr	r2, [pc, #260]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e4de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e4e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e4e4:	f7f7 fca4 	bl	8005e30 <HAL_GetTick>
 800e4e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e4ea:	e008      	b.n	800e4fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e4ec:	f7f7 fca0 	bl	8005e30 <HAL_GetTick>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f4:	1ad3      	subs	r3, r2, r3
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	d901      	bls.n	800e4fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e4fa:	2303      	movs	r3, #3
 800e4fc:	e10e      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e4fe:	4b39      	ldr	r3, [pc, #228]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e506:	2b00      	cmp	r3, #0
 800e508:	d1f0      	bne.n	800e4ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e50a:	4b36      	ldr	r3, [pc, #216]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e50c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e50e:	4b37      	ldr	r3, [pc, #220]	; (800e5ec <HAL_RCC_OscConfig+0x774>)
 800e510:	4013      	ands	r3, r2
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e51a:	0112      	lsls	r2, r2, #4
 800e51c:	430a      	orrs	r2, r1
 800e51e:	4931      	ldr	r1, [pc, #196]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e520:	4313      	orrs	r3, r2
 800e522:	628b      	str	r3, [r1, #40]	; 0x28
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e528:	3b01      	subs	r3, #1
 800e52a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e532:	3b01      	subs	r3, #1
 800e534:	025b      	lsls	r3, r3, #9
 800e536:	b29b      	uxth	r3, r3
 800e538:	431a      	orrs	r2, r3
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e53e:	3b01      	subs	r3, #1
 800e540:	041b      	lsls	r3, r3, #16
 800e542:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e546:	431a      	orrs	r2, r3
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e54c:	3b01      	subs	r3, #1
 800e54e:	061b      	lsls	r3, r3, #24
 800e550:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e554:	4923      	ldr	r1, [pc, #140]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e556:	4313      	orrs	r3, r2
 800e558:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e55a:	4b22      	ldr	r3, [pc, #136]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e55e:	4a21      	ldr	r2, [pc, #132]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e560:	f023 0301 	bic.w	r3, r3, #1
 800e564:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e566:	4b1f      	ldr	r3, [pc, #124]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e56a:	4b21      	ldr	r3, [pc, #132]	; (800e5f0 <HAL_RCC_OscConfig+0x778>)
 800e56c:	4013      	ands	r3, r2
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e572:	00d2      	lsls	r2, r2, #3
 800e574:	491b      	ldr	r1, [pc, #108]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e576:	4313      	orrs	r3, r2
 800e578:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e57a:	4b1a      	ldr	r3, [pc, #104]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e57e:	f023 020c 	bic.w	r2, r3, #12
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e586:	4917      	ldr	r1, [pc, #92]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e588:	4313      	orrs	r3, r2
 800e58a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e58c:	4b15      	ldr	r3, [pc, #84]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e590:	f023 0202 	bic.w	r2, r3, #2
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e598:	4912      	ldr	r1, [pc, #72]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e59a:	4313      	orrs	r3, r2
 800e59c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e59e:	4b11      	ldr	r3, [pc, #68]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a2:	4a10      	ldr	r2, [pc, #64]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e5a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e5a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5aa:	4b0e      	ldr	r3, [pc, #56]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ae:	4a0d      	ldr	r2, [pc, #52]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e5b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e5b6:	4b0b      	ldr	r3, [pc, #44]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ba:	4a0a      	ldr	r2, [pc, #40]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e5bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e5c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e5c2:	4b08      	ldr	r3, [pc, #32]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c6:	4a07      	ldr	r2, [pc, #28]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e5c8:	f043 0301 	orr.w	r3, r3, #1
 800e5cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e5ce:	4b05      	ldr	r3, [pc, #20]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4a04      	ldr	r2, [pc, #16]	; (800e5e4 <HAL_RCC_OscConfig+0x76c>)
 800e5d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e5d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5da:	f7f7 fc29 	bl	8005e30 <HAL_GetTick>
 800e5de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e5e0:	e011      	b.n	800e606 <HAL_RCC_OscConfig+0x78e>
 800e5e2:	bf00      	nop
 800e5e4:	58024400 	.word	0x58024400
 800e5e8:	58024800 	.word	0x58024800
 800e5ec:	fffffc0c 	.word	0xfffffc0c
 800e5f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e5f4:	f7f7 fc1c 	bl	8005e30 <HAL_GetTick>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	2b02      	cmp	r3, #2
 800e600:	d901      	bls.n	800e606 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e602:	2303      	movs	r3, #3
 800e604:	e08a      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e606:	4b47      	ldr	r3, [pc, #284]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d0f0      	beq.n	800e5f4 <HAL_RCC_OscConfig+0x77c>
 800e612:	e082      	b.n	800e71a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e614:	4b43      	ldr	r3, [pc, #268]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a42      	ldr	r2, [pc, #264]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e61a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e61e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e620:	f7f7 fc06 	bl	8005e30 <HAL_GetTick>
 800e624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e626:	e008      	b.n	800e63a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e628:	f7f7 fc02 	bl	8005e30 <HAL_GetTick>
 800e62c:	4602      	mov	r2, r0
 800e62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	2b02      	cmp	r3, #2
 800e634:	d901      	bls.n	800e63a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e636:	2303      	movs	r3, #3
 800e638:	e070      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e63a:	4b3a      	ldr	r3, [pc, #232]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e642:	2b00      	cmp	r3, #0
 800e644:	d1f0      	bne.n	800e628 <HAL_RCC_OscConfig+0x7b0>
 800e646:	e068      	b.n	800e71a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e648:	4b36      	ldr	r3, [pc, #216]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e64c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e64e:	4b35      	ldr	r3, [pc, #212]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e652:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d031      	beq.n	800e6c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	f003 0203 	and.w	r2, r3, #3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e666:	429a      	cmp	r2, r3
 800e668:	d12a      	bne.n	800e6c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	091b      	lsrs	r3, r3, #4
 800e66e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e676:	429a      	cmp	r2, r3
 800e678:	d122      	bne.n	800e6c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e684:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e686:	429a      	cmp	r2, r3
 800e688:	d11a      	bne.n	800e6c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	0a5b      	lsrs	r3, r3, #9
 800e68e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e696:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e698:	429a      	cmp	r2, r3
 800e69a:	d111      	bne.n	800e6c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	0c1b      	lsrs	r3, r3, #16
 800e6a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d108      	bne.n	800e6c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	0e1b      	lsrs	r3, r3, #24
 800e6b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d001      	beq.n	800e6c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	e02b      	b.n	800e71c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e6c4:	4b17      	ldr	r3, [pc, #92]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c8:	08db      	lsrs	r3, r3, #3
 800e6ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6d4:	693a      	ldr	r2, [r7, #16]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d01f      	beq.n	800e71a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e6da:	4b12      	ldr	r3, [pc, #72]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6de:	4a11      	ldr	r2, [pc, #68]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e6e0:	f023 0301 	bic.w	r3, r3, #1
 800e6e4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e6e6:	f7f7 fba3 	bl	8005e30 <HAL_GetTick>
 800e6ea:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e6ec:	bf00      	nop
 800e6ee:	f7f7 fb9f 	bl	8005e30 <HAL_GetTick>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d0f9      	beq.n	800e6ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e6fa:	4b0a      	ldr	r3, [pc, #40]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e6fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6fe:	4b0a      	ldr	r3, [pc, #40]	; (800e728 <HAL_RCC_OscConfig+0x8b0>)
 800e700:	4013      	ands	r3, r2
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e706:	00d2      	lsls	r2, r2, #3
 800e708:	4906      	ldr	r1, [pc, #24]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e70a:	4313      	orrs	r3, r2
 800e70c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e70e:	4b05      	ldr	r3, [pc, #20]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e712:	4a04      	ldr	r2, [pc, #16]	; (800e724 <HAL_RCC_OscConfig+0x8ac>)
 800e714:	f043 0301 	orr.w	r3, r3, #1
 800e718:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e71a:	2300      	movs	r3, #0
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3730      	adds	r7, #48	; 0x30
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	58024400 	.word	0x58024400
 800e728:	ffff0007 	.word	0xffff0007

0800e72c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d101      	bne.n	800e740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e73c:	2301      	movs	r3, #1
 800e73e:	e19c      	b.n	800ea7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e740:	4b8a      	ldr	r3, [pc, #552]	; (800e96c <HAL_RCC_ClockConfig+0x240>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f003 030f 	and.w	r3, r3, #15
 800e748:	683a      	ldr	r2, [r7, #0]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d910      	bls.n	800e770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e74e:	4b87      	ldr	r3, [pc, #540]	; (800e96c <HAL_RCC_ClockConfig+0x240>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f023 020f 	bic.w	r2, r3, #15
 800e756:	4985      	ldr	r1, [pc, #532]	; (800e96c <HAL_RCC_ClockConfig+0x240>)
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	4313      	orrs	r3, r2
 800e75c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e75e:	4b83      	ldr	r3, [pc, #524]	; (800e96c <HAL_RCC_ClockConfig+0x240>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f003 030f 	and.w	r3, r3, #15
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d001      	beq.n	800e770 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	e184      	b.n	800ea7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f003 0304 	and.w	r3, r3, #4
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d010      	beq.n	800e79e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	691a      	ldr	r2, [r3, #16]
 800e780:	4b7b      	ldr	r3, [pc, #492]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e782:	699b      	ldr	r3, [r3, #24]
 800e784:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e788:	429a      	cmp	r2, r3
 800e78a:	d908      	bls.n	800e79e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e78c:	4b78      	ldr	r3, [pc, #480]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e78e:	699b      	ldr	r3, [r3, #24]
 800e790:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	4975      	ldr	r1, [pc, #468]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e79a:	4313      	orrs	r3, r2
 800e79c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f003 0308 	and.w	r3, r3, #8
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d010      	beq.n	800e7cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	695a      	ldr	r2, [r3, #20]
 800e7ae:	4b70      	ldr	r3, [pc, #448]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e7b0:	69db      	ldr	r3, [r3, #28]
 800e7b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d908      	bls.n	800e7cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e7ba:	4b6d      	ldr	r3, [pc, #436]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	695b      	ldr	r3, [r3, #20]
 800e7c6:	496a      	ldr	r1, [pc, #424]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f003 0310 	and.w	r3, r3, #16
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d010      	beq.n	800e7fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	699a      	ldr	r2, [r3, #24]
 800e7dc:	4b64      	ldr	r3, [pc, #400]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e7de:	69db      	ldr	r3, [r3, #28]
 800e7e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d908      	bls.n	800e7fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e7e8:	4b61      	ldr	r3, [pc, #388]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e7ea:	69db      	ldr	r3, [r3, #28]
 800e7ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	699b      	ldr	r3, [r3, #24]
 800e7f4:	495e      	ldr	r1, [pc, #376]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f003 0320 	and.w	r3, r3, #32
 800e802:	2b00      	cmp	r3, #0
 800e804:	d010      	beq.n	800e828 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	69da      	ldr	r2, [r3, #28]
 800e80a:	4b59      	ldr	r3, [pc, #356]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e80c:	6a1b      	ldr	r3, [r3, #32]
 800e80e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e812:	429a      	cmp	r2, r3
 800e814:	d908      	bls.n	800e828 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e816:	4b56      	ldr	r3, [pc, #344]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e818:	6a1b      	ldr	r3, [r3, #32]
 800e81a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	69db      	ldr	r3, [r3, #28]
 800e822:	4953      	ldr	r1, [pc, #332]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e824:	4313      	orrs	r3, r2
 800e826:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f003 0302 	and.w	r3, r3, #2
 800e830:	2b00      	cmp	r3, #0
 800e832:	d010      	beq.n	800e856 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	68da      	ldr	r2, [r3, #12]
 800e838:	4b4d      	ldr	r3, [pc, #308]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e83a:	699b      	ldr	r3, [r3, #24]
 800e83c:	f003 030f 	and.w	r3, r3, #15
 800e840:	429a      	cmp	r2, r3
 800e842:	d908      	bls.n	800e856 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e844:	4b4a      	ldr	r3, [pc, #296]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e846:	699b      	ldr	r3, [r3, #24]
 800e848:	f023 020f 	bic.w	r2, r3, #15
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	4947      	ldr	r1, [pc, #284]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e852:	4313      	orrs	r3, r2
 800e854:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f003 0301 	and.w	r3, r3, #1
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d055      	beq.n	800e90e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e862:	4b43      	ldr	r3, [pc, #268]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e864:	699b      	ldr	r3, [r3, #24]
 800e866:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	4940      	ldr	r1, [pc, #256]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e870:	4313      	orrs	r3, r2
 800e872:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d107      	bne.n	800e88c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e87c:	4b3c      	ldr	r3, [pc, #240]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e884:	2b00      	cmp	r3, #0
 800e886:	d121      	bne.n	800e8cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e888:	2301      	movs	r3, #1
 800e88a:	e0f6      	b.n	800ea7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	2b03      	cmp	r3, #3
 800e892:	d107      	bne.n	800e8a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e894:	4b36      	ldr	r3, [pc, #216]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d115      	bne.n	800e8cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e0ea      	b.n	800ea7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d107      	bne.n	800e8bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e8ac:	4b30      	ldr	r3, [pc, #192]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d109      	bne.n	800e8cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e0de      	b.n	800ea7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e8bc:	4b2c      	ldr	r3, [pc, #176]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f003 0304 	and.w	r3, r3, #4
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d101      	bne.n	800e8cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e0d6      	b.n	800ea7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e8cc:	4b28      	ldr	r3, [pc, #160]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e8ce:	691b      	ldr	r3, [r3, #16]
 800e8d0:	f023 0207 	bic.w	r2, r3, #7
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	4925      	ldr	r1, [pc, #148]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8de:	f7f7 faa7 	bl	8005e30 <HAL_GetTick>
 800e8e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e8e4:	e00a      	b.n	800e8fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e8e6:	f7f7 faa3 	bl	8005e30 <HAL_GetTick>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d901      	bls.n	800e8fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e0be      	b.n	800ea7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e8fc:	4b1c      	ldr	r3, [pc, #112]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e8fe:	691b      	ldr	r3, [r3, #16]
 800e900:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	00db      	lsls	r3, r3, #3
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d1eb      	bne.n	800e8e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f003 0302 	and.w	r3, r3, #2
 800e916:	2b00      	cmp	r3, #0
 800e918:	d010      	beq.n	800e93c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68da      	ldr	r2, [r3, #12]
 800e91e:	4b14      	ldr	r3, [pc, #80]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	f003 030f 	and.w	r3, r3, #15
 800e926:	429a      	cmp	r2, r3
 800e928:	d208      	bcs.n	800e93c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e92a:	4b11      	ldr	r3, [pc, #68]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	f023 020f 	bic.w	r2, r3, #15
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	490e      	ldr	r1, [pc, #56]	; (800e970 <HAL_RCC_ClockConfig+0x244>)
 800e938:	4313      	orrs	r3, r2
 800e93a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e93c:	4b0b      	ldr	r3, [pc, #44]	; (800e96c <HAL_RCC_ClockConfig+0x240>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f003 030f 	and.w	r3, r3, #15
 800e944:	683a      	ldr	r2, [r7, #0]
 800e946:	429a      	cmp	r2, r3
 800e948:	d214      	bcs.n	800e974 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e94a:	4b08      	ldr	r3, [pc, #32]	; (800e96c <HAL_RCC_ClockConfig+0x240>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f023 020f 	bic.w	r2, r3, #15
 800e952:	4906      	ldr	r1, [pc, #24]	; (800e96c <HAL_RCC_ClockConfig+0x240>)
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	4313      	orrs	r3, r2
 800e958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e95a:	4b04      	ldr	r3, [pc, #16]	; (800e96c <HAL_RCC_ClockConfig+0x240>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f003 030f 	and.w	r3, r3, #15
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	429a      	cmp	r2, r3
 800e966:	d005      	beq.n	800e974 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e968:	2301      	movs	r3, #1
 800e96a:	e086      	b.n	800ea7a <HAL_RCC_ClockConfig+0x34e>
 800e96c:	52002000 	.word	0x52002000
 800e970:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 0304 	and.w	r3, r3, #4
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d010      	beq.n	800e9a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	691a      	ldr	r2, [r3, #16]
 800e984:	4b3f      	ldr	r3, [pc, #252]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800e986:	699b      	ldr	r3, [r3, #24]
 800e988:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d208      	bcs.n	800e9a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e990:	4b3c      	ldr	r3, [pc, #240]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	691b      	ldr	r3, [r3, #16]
 800e99c:	4939      	ldr	r1, [pc, #228]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f003 0308 	and.w	r3, r3, #8
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d010      	beq.n	800e9d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	695a      	ldr	r2, [r3, #20]
 800e9b2:	4b34      	ldr	r3, [pc, #208]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800e9b4:	69db      	ldr	r3, [r3, #28]
 800e9b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d208      	bcs.n	800e9d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e9be:	4b31      	ldr	r3, [pc, #196]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800e9c0:	69db      	ldr	r3, [r3, #28]
 800e9c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	695b      	ldr	r3, [r3, #20]
 800e9ca:	492e      	ldr	r1, [pc, #184]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f003 0310 	and.w	r3, r3, #16
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d010      	beq.n	800e9fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	699a      	ldr	r2, [r3, #24]
 800e9e0:	4b28      	ldr	r3, [pc, #160]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800e9e2:	69db      	ldr	r3, [r3, #28]
 800e9e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d208      	bcs.n	800e9fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e9ec:	4b25      	ldr	r3, [pc, #148]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800e9ee:	69db      	ldr	r3, [r3, #28]
 800e9f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	699b      	ldr	r3, [r3, #24]
 800e9f8:	4922      	ldr	r1, [pc, #136]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800e9fa:	4313      	orrs	r3, r2
 800e9fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f003 0320 	and.w	r3, r3, #32
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d010      	beq.n	800ea2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	69da      	ldr	r2, [r3, #28]
 800ea0e:	4b1d      	ldr	r3, [pc, #116]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800ea10:	6a1b      	ldr	r3, [r3, #32]
 800ea12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d208      	bcs.n	800ea2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ea1a:	4b1a      	ldr	r3, [pc, #104]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800ea1c:	6a1b      	ldr	r3, [r3, #32]
 800ea1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	69db      	ldr	r3, [r3, #28]
 800ea26:	4917      	ldr	r1, [pc, #92]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ea2c:	f000 f834 	bl	800ea98 <HAL_RCC_GetSysClockFreq>
 800ea30:	4602      	mov	r2, r0
 800ea32:	4b14      	ldr	r3, [pc, #80]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800ea34:	699b      	ldr	r3, [r3, #24]
 800ea36:	0a1b      	lsrs	r3, r3, #8
 800ea38:	f003 030f 	and.w	r3, r3, #15
 800ea3c:	4912      	ldr	r1, [pc, #72]	; (800ea88 <HAL_RCC_ClockConfig+0x35c>)
 800ea3e:	5ccb      	ldrb	r3, [r1, r3]
 800ea40:	f003 031f 	and.w	r3, r3, #31
 800ea44:	fa22 f303 	lsr.w	r3, r2, r3
 800ea48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ea4a:	4b0e      	ldr	r3, [pc, #56]	; (800ea84 <HAL_RCC_ClockConfig+0x358>)
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	f003 030f 	and.w	r3, r3, #15
 800ea52:	4a0d      	ldr	r2, [pc, #52]	; (800ea88 <HAL_RCC_ClockConfig+0x35c>)
 800ea54:	5cd3      	ldrb	r3, [r2, r3]
 800ea56:	f003 031f 	and.w	r3, r3, #31
 800ea5a:	693a      	ldr	r2, [r7, #16]
 800ea5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ea60:	4a0a      	ldr	r2, [pc, #40]	; (800ea8c <HAL_RCC_ClockConfig+0x360>)
 800ea62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ea64:	4a0a      	ldr	r2, [pc, #40]	; (800ea90 <HAL_RCC_ClockConfig+0x364>)
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ea6a:	4b0a      	ldr	r3, [pc, #40]	; (800ea94 <HAL_RCC_ClockConfig+0x368>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7f5 fe00 	bl	8004674 <HAL_InitTick>
 800ea74:	4603      	mov	r3, r0
 800ea76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ea78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3718      	adds	r7, #24
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	58024400 	.word	0x58024400
 800ea88:	0801b164 	.word	0x0801b164
 800ea8c:	240000c4 	.word	0x240000c4
 800ea90:	240000c0 	.word	0x240000c0
 800ea94:	240000c8 	.word	0x240000c8

0800ea98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b089      	sub	sp, #36	; 0x24
 800ea9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ea9e:	4bb3      	ldr	r3, [pc, #716]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eaa6:	2b18      	cmp	r3, #24
 800eaa8:	f200 8155 	bhi.w	800ed56 <HAL_RCC_GetSysClockFreq+0x2be>
 800eaac:	a201      	add	r2, pc, #4	; (adr r2, 800eab4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800eaae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab2:	bf00      	nop
 800eab4:	0800eb19 	.word	0x0800eb19
 800eab8:	0800ed57 	.word	0x0800ed57
 800eabc:	0800ed57 	.word	0x0800ed57
 800eac0:	0800ed57 	.word	0x0800ed57
 800eac4:	0800ed57 	.word	0x0800ed57
 800eac8:	0800ed57 	.word	0x0800ed57
 800eacc:	0800ed57 	.word	0x0800ed57
 800ead0:	0800ed57 	.word	0x0800ed57
 800ead4:	0800eb3f 	.word	0x0800eb3f
 800ead8:	0800ed57 	.word	0x0800ed57
 800eadc:	0800ed57 	.word	0x0800ed57
 800eae0:	0800ed57 	.word	0x0800ed57
 800eae4:	0800ed57 	.word	0x0800ed57
 800eae8:	0800ed57 	.word	0x0800ed57
 800eaec:	0800ed57 	.word	0x0800ed57
 800eaf0:	0800ed57 	.word	0x0800ed57
 800eaf4:	0800eb45 	.word	0x0800eb45
 800eaf8:	0800ed57 	.word	0x0800ed57
 800eafc:	0800ed57 	.word	0x0800ed57
 800eb00:	0800ed57 	.word	0x0800ed57
 800eb04:	0800ed57 	.word	0x0800ed57
 800eb08:	0800ed57 	.word	0x0800ed57
 800eb0c:	0800ed57 	.word	0x0800ed57
 800eb10:	0800ed57 	.word	0x0800ed57
 800eb14:	0800eb4b 	.word	0x0800eb4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb18:	4b94      	ldr	r3, [pc, #592]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f003 0320 	and.w	r3, r3, #32
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d009      	beq.n	800eb38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb24:	4b91      	ldr	r3, [pc, #580]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	08db      	lsrs	r3, r3, #3
 800eb2a:	f003 0303 	and.w	r3, r3, #3
 800eb2e:	4a90      	ldr	r2, [pc, #576]	; (800ed70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800eb30:	fa22 f303 	lsr.w	r3, r2, r3
 800eb34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800eb36:	e111      	b.n	800ed5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800eb38:	4b8d      	ldr	r3, [pc, #564]	; (800ed70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800eb3a:	61bb      	str	r3, [r7, #24]
      break;
 800eb3c:	e10e      	b.n	800ed5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800eb3e:	4b8d      	ldr	r3, [pc, #564]	; (800ed74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800eb40:	61bb      	str	r3, [r7, #24]
      break;
 800eb42:	e10b      	b.n	800ed5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800eb44:	4b8c      	ldr	r3, [pc, #560]	; (800ed78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800eb46:	61bb      	str	r3, [r7, #24]
      break;
 800eb48:	e108      	b.n	800ed5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb4a:	4b88      	ldr	r3, [pc, #544]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb4e:	f003 0303 	and.w	r3, r3, #3
 800eb52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800eb54:	4b85      	ldr	r3, [pc, #532]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb58:	091b      	lsrs	r3, r3, #4
 800eb5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800eb60:	4b82      	ldr	r3, [pc, #520]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb64:	f003 0301 	and.w	r3, r3, #1
 800eb68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800eb6a:	4b80      	ldr	r3, [pc, #512]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb6e:	08db      	lsrs	r3, r3, #3
 800eb70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	fb02 f303 	mul.w	r3, r2, r3
 800eb7a:	ee07 3a90 	vmov	s15, r3
 800eb7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f000 80e1 	beq.w	800ed50 <HAL_RCC_GetSysClockFreq+0x2b8>
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	2b02      	cmp	r3, #2
 800eb92:	f000 8083 	beq.w	800ec9c <HAL_RCC_GetSysClockFreq+0x204>
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	2b02      	cmp	r3, #2
 800eb9a:	f200 80a1 	bhi.w	800ece0 <HAL_RCC_GetSysClockFreq+0x248>
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d003      	beq.n	800ebac <HAL_RCC_GetSysClockFreq+0x114>
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d056      	beq.n	800ec58 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ebaa:	e099      	b.n	800ece0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebac:	4b6f      	ldr	r3, [pc, #444]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f003 0320 	and.w	r3, r3, #32
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d02d      	beq.n	800ec14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ebb8:	4b6c      	ldr	r3, [pc, #432]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	08db      	lsrs	r3, r3, #3
 800ebbe:	f003 0303 	and.w	r3, r3, #3
 800ebc2:	4a6b      	ldr	r2, [pc, #428]	; (800ed70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ebc4:	fa22 f303 	lsr.w	r3, r2, r3
 800ebc8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	ee07 3a90 	vmov	s15, r3
 800ebd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	ee07 3a90 	vmov	s15, r3
 800ebda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebe2:	4b62      	ldr	r3, [pc, #392]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebea:	ee07 3a90 	vmov	s15, r3
 800ebee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800ebf6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ed7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ebfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ec12:	e087      	b.n	800ed24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	ee07 3a90 	vmov	s15, r3
 800ec1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ed80 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ec22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec26:	4b51      	ldr	r3, [pc, #324]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec2e:	ee07 3a90 	vmov	s15, r3
 800ec32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec36:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ed7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ec3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ec56:	e065      	b.n	800ed24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	ee07 3a90 	vmov	s15, r3
 800ec5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec62:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ed84 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ec66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec6a:	4b40      	ldr	r3, [pc, #256]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec72:	ee07 3a90 	vmov	s15, r3
 800ec76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ec7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ed7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ec82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ec9a:	e043      	b.n	800ed24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	ee07 3a90 	vmov	s15, r3
 800eca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eca6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ed88 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ecaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecae:	4b2f      	ldr	r3, [pc, #188]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecb6:	ee07 3a90 	vmov	s15, r3
 800ecba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecbe:	ed97 6a02 	vldr	s12, [r7, #8]
 800ecc2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ed7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ecc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ecde:	e021      	b.n	800ed24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	ee07 3a90 	vmov	s15, r3
 800ece6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecea:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ed84 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ecee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecf2:	4b1e      	ldr	r3, [pc, #120]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecfa:	ee07 3a90 	vmov	s15, r3
 800ecfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed02:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ed7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ed0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ed22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ed24:	4b11      	ldr	r3, [pc, #68]	; (800ed6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed28:	0a5b      	lsrs	r3, r3, #9
 800ed2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed2e:	3301      	adds	r3, #1
 800ed30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	ee07 3a90 	vmov	s15, r3
 800ed38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ed3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed48:	ee17 3a90 	vmov	r3, s15
 800ed4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ed4e:	e005      	b.n	800ed5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ed50:	2300      	movs	r3, #0
 800ed52:	61bb      	str	r3, [r7, #24]
      break;
 800ed54:	e002      	b.n	800ed5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ed56:	4b07      	ldr	r3, [pc, #28]	; (800ed74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ed58:	61bb      	str	r3, [r7, #24]
      break;
 800ed5a:	bf00      	nop
  }

  return sysclockfreq;
 800ed5c:	69bb      	ldr	r3, [r7, #24]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3724      	adds	r7, #36	; 0x24
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop
 800ed6c:	58024400 	.word	0x58024400
 800ed70:	03d09000 	.word	0x03d09000
 800ed74:	003d0900 	.word	0x003d0900
 800ed78:	017d7840 	.word	0x017d7840
 800ed7c:	46000000 	.word	0x46000000
 800ed80:	4c742400 	.word	0x4c742400
 800ed84:	4a742400 	.word	0x4a742400
 800ed88:	4bbebc20 	.word	0x4bbebc20

0800ed8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ed92:	f7ff fe81 	bl	800ea98 <HAL_RCC_GetSysClockFreq>
 800ed96:	4602      	mov	r2, r0
 800ed98:	4b10      	ldr	r3, [pc, #64]	; (800eddc <HAL_RCC_GetHCLKFreq+0x50>)
 800ed9a:	699b      	ldr	r3, [r3, #24]
 800ed9c:	0a1b      	lsrs	r3, r3, #8
 800ed9e:	f003 030f 	and.w	r3, r3, #15
 800eda2:	490f      	ldr	r1, [pc, #60]	; (800ede0 <HAL_RCC_GetHCLKFreq+0x54>)
 800eda4:	5ccb      	ldrb	r3, [r1, r3]
 800eda6:	f003 031f 	and.w	r3, r3, #31
 800edaa:	fa22 f303 	lsr.w	r3, r2, r3
 800edae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800edb0:	4b0a      	ldr	r3, [pc, #40]	; (800eddc <HAL_RCC_GetHCLKFreq+0x50>)
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	f003 030f 	and.w	r3, r3, #15
 800edb8:	4a09      	ldr	r2, [pc, #36]	; (800ede0 <HAL_RCC_GetHCLKFreq+0x54>)
 800edba:	5cd3      	ldrb	r3, [r2, r3]
 800edbc:	f003 031f 	and.w	r3, r3, #31
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	fa22 f303 	lsr.w	r3, r2, r3
 800edc6:	4a07      	ldr	r2, [pc, #28]	; (800ede4 <HAL_RCC_GetHCLKFreq+0x58>)
 800edc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800edca:	4a07      	ldr	r2, [pc, #28]	; (800ede8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800edd0:	4b04      	ldr	r3, [pc, #16]	; (800ede4 <HAL_RCC_GetHCLKFreq+0x58>)
 800edd2:	681b      	ldr	r3, [r3, #0]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	58024400 	.word	0x58024400
 800ede0:	0801b164 	.word	0x0801b164
 800ede4:	240000c4 	.word	0x240000c4
 800ede8:	240000c0 	.word	0x240000c0

0800edec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800edf0:	f7ff ffcc 	bl	800ed8c <HAL_RCC_GetHCLKFreq>
 800edf4:	4602      	mov	r2, r0
 800edf6:	4b06      	ldr	r3, [pc, #24]	; (800ee10 <HAL_RCC_GetPCLK1Freq+0x24>)
 800edf8:	69db      	ldr	r3, [r3, #28]
 800edfa:	091b      	lsrs	r3, r3, #4
 800edfc:	f003 0307 	and.w	r3, r3, #7
 800ee00:	4904      	ldr	r1, [pc, #16]	; (800ee14 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ee02:	5ccb      	ldrb	r3, [r1, r3]
 800ee04:	f003 031f 	and.w	r3, r3, #31
 800ee08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	58024400 	.word	0x58024400
 800ee14:	0801b164 	.word	0x0801b164

0800ee18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ee1c:	f7ff ffb6 	bl	800ed8c <HAL_RCC_GetHCLKFreq>
 800ee20:	4602      	mov	r2, r0
 800ee22:	4b06      	ldr	r3, [pc, #24]	; (800ee3c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ee24:	69db      	ldr	r3, [r3, #28]
 800ee26:	0a1b      	lsrs	r3, r3, #8
 800ee28:	f003 0307 	and.w	r3, r3, #7
 800ee2c:	4904      	ldr	r1, [pc, #16]	; (800ee40 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ee2e:	5ccb      	ldrb	r3, [r1, r3]
 800ee30:	f003 031f 	and.w	r3, r3, #31
 800ee34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	58024400 	.word	0x58024400
 800ee40:	0801b164 	.word	0x0801b164

0800ee44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	223f      	movs	r2, #63	; 0x3f
 800ee52:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ee54:	4b1a      	ldr	r3, [pc, #104]	; (800eec0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee56:	691b      	ldr	r3, [r3, #16]
 800ee58:	f003 0207 	and.w	r2, r3, #7
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ee60:	4b17      	ldr	r3, [pc, #92]	; (800eec0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee62:	699b      	ldr	r3, [r3, #24]
 800ee64:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ee6c:	4b14      	ldr	r3, [pc, #80]	; (800eec0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	f003 020f 	and.w	r2, r3, #15
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ee78:	4b11      	ldr	r3, [pc, #68]	; (800eec0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee7a:	699b      	ldr	r3, [r3, #24]
 800ee7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ee84:	4b0e      	ldr	r3, [pc, #56]	; (800eec0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee86:	69db      	ldr	r3, [r3, #28]
 800ee88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ee90:	4b0b      	ldr	r3, [pc, #44]	; (800eec0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee92:	69db      	ldr	r3, [r3, #28]
 800ee94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ee9c:	4b08      	ldr	r3, [pc, #32]	; (800eec0 <HAL_RCC_GetClockConfig+0x7c>)
 800ee9e:	6a1b      	ldr	r3, [r3, #32]
 800eea0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800eea8:	4b06      	ldr	r3, [pc, #24]	; (800eec4 <HAL_RCC_GetClockConfig+0x80>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f003 020f 	and.w	r2, r3, #15
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	601a      	str	r2, [r3, #0]
}
 800eeb4:	bf00      	nop
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	58024400 	.word	0x58024400
 800eec4:	52002000 	.word	0x52002000

0800eec8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800eec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eecc:	b0ca      	sub	sp, #296	; 0x128
 800eece:	af00      	add	r7, sp, #0
 800eed0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800eed4:	2300      	movs	r3, #0
 800eed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800eeda:	2300      	movs	r3, #0
 800eedc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800eee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800eeec:	2500      	movs	r5, #0
 800eeee:	ea54 0305 	orrs.w	r3, r4, r5
 800eef2:	d049      	beq.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800eef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eefa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eefe:	d02f      	beq.n	800ef60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ef00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ef04:	d828      	bhi.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ef06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef0a:	d01a      	beq.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ef0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef10:	d822      	bhi.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d003      	beq.n	800ef1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ef16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef1a:	d007      	beq.n	800ef2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ef1c:	e01c      	b.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef1e:	4bb8      	ldr	r3, [pc, #736]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ef20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef22:	4ab7      	ldr	r2, [pc, #732]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ef24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ef2a:	e01a      	b.n	800ef62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ef2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef30:	3308      	adds	r3, #8
 800ef32:	2102      	movs	r1, #2
 800ef34:	4618      	mov	r0, r3
 800ef36:	f002 fb61 	bl	80115fc <RCCEx_PLL2_Config>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ef40:	e00f      	b.n	800ef62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef46:	3328      	adds	r3, #40	; 0x28
 800ef48:	2102      	movs	r1, #2
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f002 fc08 	bl	8011760 <RCCEx_PLL3_Config>
 800ef50:	4603      	mov	r3, r0
 800ef52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ef56:	e004      	b.n	800ef62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef5e:	e000      	b.n	800ef62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ef60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d10a      	bne.n	800ef80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ef6a:	4ba5      	ldr	r3, [pc, #660]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ef6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ef72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef78:	4aa1      	ldr	r2, [pc, #644]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ef7a:	430b      	orrs	r3, r1
 800ef7c:	6513      	str	r3, [r2, #80]	; 0x50
 800ef7e:	e003      	b.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ef88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef90:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ef94:	f04f 0900 	mov.w	r9, #0
 800ef98:	ea58 0309 	orrs.w	r3, r8, r9
 800ef9c:	d047      	beq.n	800f02e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ef9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efa4:	2b04      	cmp	r3, #4
 800efa6:	d82a      	bhi.n	800effe <HAL_RCCEx_PeriphCLKConfig+0x136>
 800efa8:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800efaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efae:	bf00      	nop
 800efb0:	0800efc5 	.word	0x0800efc5
 800efb4:	0800efd3 	.word	0x0800efd3
 800efb8:	0800efe9 	.word	0x0800efe9
 800efbc:	0800f007 	.word	0x0800f007
 800efc0:	0800f007 	.word	0x0800f007
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efc4:	4b8e      	ldr	r3, [pc, #568]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800efc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc8:	4a8d      	ldr	r2, [pc, #564]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800efca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800efd0:	e01a      	b.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800efd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efd6:	3308      	adds	r3, #8
 800efd8:	2100      	movs	r1, #0
 800efda:	4618      	mov	r0, r3
 800efdc:	f002 fb0e 	bl	80115fc <RCCEx_PLL2_Config>
 800efe0:	4603      	mov	r3, r0
 800efe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800efe6:	e00f      	b.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800efe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efec:	3328      	adds	r3, #40	; 0x28
 800efee:	2100      	movs	r1, #0
 800eff0:	4618      	mov	r0, r3
 800eff2:	f002 fbb5 	bl	8011760 <RCCEx_PLL3_Config>
 800eff6:	4603      	mov	r3, r0
 800eff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800effc:	e004      	b.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800effe:	2301      	movs	r3, #1
 800f000:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f004:	e000      	b.n	800f008 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f006:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d10a      	bne.n	800f026 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f010:	4b7b      	ldr	r3, [pc, #492]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f014:	f023 0107 	bic.w	r1, r3, #7
 800f018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f01e:	4a78      	ldr	r2, [pc, #480]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f020:	430b      	orrs	r3, r1
 800f022:	6513      	str	r3, [r2, #80]	; 0x50
 800f024:	e003      	b.n	800f02e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f02a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f036:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800f03a:	f04f 0b00 	mov.w	fp, #0
 800f03e:	ea5a 030b 	orrs.w	r3, sl, fp
 800f042:	d04c      	beq.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f04a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f04e:	d030      	beq.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f054:	d829      	bhi.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f056:	2bc0      	cmp	r3, #192	; 0xc0
 800f058:	d02d      	beq.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f05a:	2bc0      	cmp	r3, #192	; 0xc0
 800f05c:	d825      	bhi.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f05e:	2b80      	cmp	r3, #128	; 0x80
 800f060:	d018      	beq.n	800f094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f062:	2b80      	cmp	r3, #128	; 0x80
 800f064:	d821      	bhi.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f066:	2b00      	cmp	r3, #0
 800f068:	d002      	beq.n	800f070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f06a:	2b40      	cmp	r3, #64	; 0x40
 800f06c:	d007      	beq.n	800f07e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f06e:	e01c      	b.n	800f0aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f070:	4b63      	ldr	r3, [pc, #396]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f074:	4a62      	ldr	r2, [pc, #392]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f07a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f07c:	e01c      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f082:	3308      	adds	r3, #8
 800f084:	2100      	movs	r1, #0
 800f086:	4618      	mov	r0, r3
 800f088:	f002 fab8 	bl	80115fc <RCCEx_PLL2_Config>
 800f08c:	4603      	mov	r3, r0
 800f08e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f092:	e011      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f098:	3328      	adds	r3, #40	; 0x28
 800f09a:	2100      	movs	r1, #0
 800f09c:	4618      	mov	r0, r3
 800f09e:	f002 fb5f 	bl	8011760 <RCCEx_PLL3_Config>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f0a8:	e006      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f0b0:	e002      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f0b2:	bf00      	nop
 800f0b4:	e000      	b.n	800f0b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f0b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d10a      	bne.n	800f0d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f0c0:	4b4f      	ldr	r3, [pc, #316]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0c4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800f0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0ce:	4a4c      	ldr	r2, [pc, #304]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0d0:	430b      	orrs	r3, r1
 800f0d2:	6513      	str	r3, [r2, #80]	; 0x50
 800f0d4:	e003      	b.n	800f0de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800f0ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f0f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	d053      	beq.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f102:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f10a:	d035      	beq.n	800f178 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f10c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f110:	d82e      	bhi.n	800f170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f112:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f116:	d031      	beq.n	800f17c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f118:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f11c:	d828      	bhi.n	800f170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f11e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f122:	d01a      	beq.n	800f15a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f128:	d822      	bhi.n	800f170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d003      	beq.n	800f136 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f12e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f132:	d007      	beq.n	800f144 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f134:	e01c      	b.n	800f170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f136:	4b32      	ldr	r3, [pc, #200]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f13a:	4a31      	ldr	r2, [pc, #196]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f13c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f140:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f142:	e01c      	b.n	800f17e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f148:	3308      	adds	r3, #8
 800f14a:	2100      	movs	r1, #0
 800f14c:	4618      	mov	r0, r3
 800f14e:	f002 fa55 	bl	80115fc <RCCEx_PLL2_Config>
 800f152:	4603      	mov	r3, r0
 800f154:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f158:	e011      	b.n	800f17e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f15e:	3328      	adds	r3, #40	; 0x28
 800f160:	2100      	movs	r1, #0
 800f162:	4618      	mov	r0, r3
 800f164:	f002 fafc 	bl	8011760 <RCCEx_PLL3_Config>
 800f168:	4603      	mov	r3, r0
 800f16a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f16e:	e006      	b.n	800f17e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f170:	2301      	movs	r3, #1
 800f172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f176:	e002      	b.n	800f17e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f178:	bf00      	nop
 800f17a:	e000      	b.n	800f17e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f17c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f17e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f182:	2b00      	cmp	r3, #0
 800f184:	d10b      	bne.n	800f19e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f186:	4b1e      	ldr	r3, [pc, #120]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f18a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800f18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f192:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f196:	4a1a      	ldr	r2, [pc, #104]	; (800f200 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f198:	430b      	orrs	r3, r1
 800f19a:	6593      	str	r3, [r2, #88]	; 0x58
 800f19c:	e003      	b.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f19e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ae:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800f1b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f1bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	d056      	beq.n	800f274 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f1ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f1d2:	d038      	beq.n	800f246 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f1d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f1d8:	d831      	bhi.n	800f23e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f1da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f1de:	d034      	beq.n	800f24a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f1e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f1e4:	d82b      	bhi.n	800f23e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f1e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1ea:	d01d      	beq.n	800f228 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f1ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1f0:	d825      	bhi.n	800f23e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d006      	beq.n	800f204 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f1f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f1fa:	d00a      	beq.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f1fc:	e01f      	b.n	800f23e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f1fe:	bf00      	nop
 800f200:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f204:	4ba2      	ldr	r3, [pc, #648]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f208:	4aa1      	ldr	r2, [pc, #644]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f20a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f20e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f210:	e01c      	b.n	800f24c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f216:	3308      	adds	r3, #8
 800f218:	2100      	movs	r1, #0
 800f21a:	4618      	mov	r0, r3
 800f21c:	f002 f9ee 	bl	80115fc <RCCEx_PLL2_Config>
 800f220:	4603      	mov	r3, r0
 800f222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f226:	e011      	b.n	800f24c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f22c:	3328      	adds	r3, #40	; 0x28
 800f22e:	2100      	movs	r1, #0
 800f230:	4618      	mov	r0, r3
 800f232:	f002 fa95 	bl	8011760 <RCCEx_PLL3_Config>
 800f236:	4603      	mov	r3, r0
 800f238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f23c:	e006      	b.n	800f24c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f23e:	2301      	movs	r3, #1
 800f240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f244:	e002      	b.n	800f24c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f246:	bf00      	nop
 800f248:	e000      	b.n	800f24c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f24a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f24c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f250:	2b00      	cmp	r3, #0
 800f252:	d10b      	bne.n	800f26c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f254:	4b8e      	ldr	r3, [pc, #568]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f258:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800f25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f260:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f264:	4a8a      	ldr	r2, [pc, #552]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f266:	430b      	orrs	r3, r1
 800f268:	6593      	str	r3, [r2, #88]	; 0x58
 800f26a:	e003      	b.n	800f274 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f26c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f270:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800f280:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f284:	2300      	movs	r3, #0
 800f286:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f28a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800f28e:	460b      	mov	r3, r1
 800f290:	4313      	orrs	r3, r2
 800f292:	d03a      	beq.n	800f30a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f29a:	2b30      	cmp	r3, #48	; 0x30
 800f29c:	d01f      	beq.n	800f2de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f29e:	2b30      	cmp	r3, #48	; 0x30
 800f2a0:	d819      	bhi.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f2a2:	2b20      	cmp	r3, #32
 800f2a4:	d00c      	beq.n	800f2c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f2a6:	2b20      	cmp	r3, #32
 800f2a8:	d815      	bhi.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d019      	beq.n	800f2e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f2ae:	2b10      	cmp	r3, #16
 800f2b0:	d111      	bne.n	800f2d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f2b2:	4b77      	ldr	r3, [pc, #476]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b6:	4a76      	ldr	r2, [pc, #472]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f2b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f2be:	e011      	b.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2c4:	3308      	adds	r3, #8
 800f2c6:	2102      	movs	r1, #2
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f002 f997 	bl	80115fc <RCCEx_PLL2_Config>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f2d4:	e006      	b.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f2dc:	e002      	b.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f2de:	bf00      	nop
 800f2e0:	e000      	b.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f2e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d10a      	bne.n	800f302 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f2ec:	4b68      	ldr	r3, [pc, #416]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f2ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2fa:	4a65      	ldr	r2, [pc, #404]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f2fc:	430b      	orrs	r3, r1
 800f2fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f300:	e003      	b.n	800f30a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f306:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f312:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f316:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f31a:	2300      	movs	r3, #0
 800f31c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f320:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f324:	460b      	mov	r3, r1
 800f326:	4313      	orrs	r3, r2
 800f328:	d051      	beq.n	800f3ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f32e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f334:	d035      	beq.n	800f3a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f33a:	d82e      	bhi.n	800f39a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f33c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f340:	d031      	beq.n	800f3a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f342:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f346:	d828      	bhi.n	800f39a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f34c:	d01a      	beq.n	800f384 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f34e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f352:	d822      	bhi.n	800f39a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f354:	2b00      	cmp	r3, #0
 800f356:	d003      	beq.n	800f360 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f35c:	d007      	beq.n	800f36e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f35e:	e01c      	b.n	800f39a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f360:	4b4b      	ldr	r3, [pc, #300]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f364:	4a4a      	ldr	r2, [pc, #296]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f36a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f36c:	e01c      	b.n	800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f372:	3308      	adds	r3, #8
 800f374:	2100      	movs	r1, #0
 800f376:	4618      	mov	r0, r3
 800f378:	f002 f940 	bl	80115fc <RCCEx_PLL2_Config>
 800f37c:	4603      	mov	r3, r0
 800f37e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f382:	e011      	b.n	800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f388:	3328      	adds	r3, #40	; 0x28
 800f38a:	2100      	movs	r1, #0
 800f38c:	4618      	mov	r0, r3
 800f38e:	f002 f9e7 	bl	8011760 <RCCEx_PLL3_Config>
 800f392:	4603      	mov	r3, r0
 800f394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f398:	e006      	b.n	800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f39a:	2301      	movs	r3, #1
 800f39c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f3a0:	e002      	b.n	800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f3a2:	bf00      	nop
 800f3a4:	e000      	b.n	800f3a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f3a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d10a      	bne.n	800f3c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f3b0:	4b37      	ldr	r3, [pc, #220]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3be:	4a34      	ldr	r2, [pc, #208]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3c0:	430b      	orrs	r3, r1
 800f3c2:	6513      	str	r3, [r2, #80]	; 0x50
 800f3c4:	e003      	b.n	800f3ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f3da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f3de:	2300      	movs	r3, #0
 800f3e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f3e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	d056      	beq.n	800f49c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f3f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f3f8:	d033      	beq.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f3fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f3fe:	d82c      	bhi.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f400:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f404:	d02f      	beq.n	800f466 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f406:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f40a:	d826      	bhi.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f40c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f410:	d02b      	beq.n	800f46a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f412:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f416:	d820      	bhi.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f41c:	d012      	beq.n	800f444 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f41e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f422:	d81a      	bhi.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f424:	2b00      	cmp	r3, #0
 800f426:	d022      	beq.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f42c:	d115      	bne.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f432:	3308      	adds	r3, #8
 800f434:	2101      	movs	r1, #1
 800f436:	4618      	mov	r0, r3
 800f438:	f002 f8e0 	bl	80115fc <RCCEx_PLL2_Config>
 800f43c:	4603      	mov	r3, r0
 800f43e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f442:	e015      	b.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f448:	3328      	adds	r3, #40	; 0x28
 800f44a:	2101      	movs	r1, #1
 800f44c:	4618      	mov	r0, r3
 800f44e:	f002 f987 	bl	8011760 <RCCEx_PLL3_Config>
 800f452:	4603      	mov	r3, r0
 800f454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f458:	e00a      	b.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f45a:	2301      	movs	r3, #1
 800f45c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f460:	e006      	b.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f462:	bf00      	nop
 800f464:	e004      	b.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f466:	bf00      	nop
 800f468:	e002      	b.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f46a:	bf00      	nop
 800f46c:	e000      	b.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f46e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f474:	2b00      	cmp	r3, #0
 800f476:	d10d      	bne.n	800f494 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f478:	4b05      	ldr	r3, [pc, #20]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f47c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f486:	4a02      	ldr	r2, [pc, #8]	; (800f490 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f488:	430b      	orrs	r3, r1
 800f48a:	6513      	str	r3, [r2, #80]	; 0x50
 800f48c:	e006      	b.n	800f49c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f48e:	bf00      	nop
 800f490:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f498:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f4a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f4b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	d055      	beq.n	800f568 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f4c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f4c8:	d033      	beq.n	800f532 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f4ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f4ce:	d82c      	bhi.n	800f52a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4d4:	d02f      	beq.n	800f536 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4da:	d826      	bhi.n	800f52a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f4dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f4e0:	d02b      	beq.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f4e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f4e6:	d820      	bhi.n	800f52a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f4e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4ec:	d012      	beq.n	800f514 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f4ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4f2:	d81a      	bhi.n	800f52a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d022      	beq.n	800f53e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f4f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4fc:	d115      	bne.n	800f52a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f502:	3308      	adds	r3, #8
 800f504:	2101      	movs	r1, #1
 800f506:	4618      	mov	r0, r3
 800f508:	f002 f878 	bl	80115fc <RCCEx_PLL2_Config>
 800f50c:	4603      	mov	r3, r0
 800f50e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f512:	e015      	b.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f518:	3328      	adds	r3, #40	; 0x28
 800f51a:	2101      	movs	r1, #1
 800f51c:	4618      	mov	r0, r3
 800f51e:	f002 f91f 	bl	8011760 <RCCEx_PLL3_Config>
 800f522:	4603      	mov	r3, r0
 800f524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f528:	e00a      	b.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f52a:	2301      	movs	r3, #1
 800f52c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f530:	e006      	b.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f532:	bf00      	nop
 800f534:	e004      	b.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f536:	bf00      	nop
 800f538:	e002      	b.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f53a:	bf00      	nop
 800f53c:	e000      	b.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f53e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f544:	2b00      	cmp	r3, #0
 800f546:	d10b      	bne.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f548:	4ba3      	ldr	r3, [pc, #652]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f54a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f54c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f558:	4a9f      	ldr	r2, [pc, #636]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f55a:	430b      	orrs	r3, r1
 800f55c:	6593      	str	r3, [r2, #88]	; 0x58
 800f55e:	e003      	b.n	800f568 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f564:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f570:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f578:	2300      	movs	r3, #0
 800f57a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f57e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f582:	460b      	mov	r3, r1
 800f584:	4313      	orrs	r3, r2
 800f586:	d037      	beq.n	800f5f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f58e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f592:	d00e      	beq.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f598:	d816      	bhi.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d018      	beq.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f59e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5a2:	d111      	bne.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f5a4:	4b8c      	ldr	r3, [pc, #560]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a8:	4a8b      	ldr	r2, [pc, #556]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f5aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f5ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f5b0:	e00f      	b.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5b6:	3308      	adds	r3, #8
 800f5b8:	2101      	movs	r1, #1
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f002 f81e 	bl	80115fc <RCCEx_PLL2_Config>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f5c6:	e004      	b.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f5ce:	e000      	b.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f5d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d10a      	bne.n	800f5f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f5da:	4b7f      	ldr	r3, [pc, #508]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f5dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5e8:	4a7b      	ldr	r2, [pc, #492]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f5ea:	430b      	orrs	r3, r1
 800f5ec:	6513      	str	r3, [r2, #80]	; 0x50
 800f5ee:	e003      	b.n	800f5f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f600:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f608:	2300      	movs	r3, #0
 800f60a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f60e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f612:	460b      	mov	r3, r1
 800f614:	4313      	orrs	r3, r2
 800f616:	d039      	beq.n	800f68c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f61c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f61e:	2b03      	cmp	r3, #3
 800f620:	d81c      	bhi.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f622:	a201      	add	r2, pc, #4	; (adr r2, 800f628 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f628:	0800f665 	.word	0x0800f665
 800f62c:	0800f639 	.word	0x0800f639
 800f630:	0800f647 	.word	0x0800f647
 800f634:	0800f665 	.word	0x0800f665
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f638:	4b67      	ldr	r3, [pc, #412]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f63c:	4a66      	ldr	r2, [pc, #408]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f63e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f644:	e00f      	b.n	800f666 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f64a:	3308      	adds	r3, #8
 800f64c:	2102      	movs	r1, #2
 800f64e:	4618      	mov	r0, r3
 800f650:	f001 ffd4 	bl	80115fc <RCCEx_PLL2_Config>
 800f654:	4603      	mov	r3, r0
 800f656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f65a:	e004      	b.n	800f666 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f65c:	2301      	movs	r3, #1
 800f65e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f662:	e000      	b.n	800f666 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f664:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10a      	bne.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f66e:	4b5a      	ldr	r3, [pc, #360]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f672:	f023 0103 	bic.w	r1, r3, #3
 800f676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f67c:	4a56      	ldr	r2, [pc, #344]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f67e:	430b      	orrs	r3, r1
 800f680:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f682:	e003      	b.n	800f68c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f688:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f694:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f69c:	2300      	movs	r3, #0
 800f69e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f6a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	f000 809f 	beq.w	800f7ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f6ae:	4b4b      	ldr	r3, [pc, #300]	; (800f7dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4a4a      	ldr	r2, [pc, #296]	; (800f7dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f6b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f6ba:	f7f6 fbb9 	bl	8005e30 <HAL_GetTick>
 800f6be:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f6c2:	e00b      	b.n	800f6dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f6c4:	f7f6 fbb4 	bl	8005e30 <HAL_GetTick>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f6ce:	1ad3      	subs	r3, r2, r3
 800f6d0:	2b64      	cmp	r3, #100	; 0x64
 800f6d2:	d903      	bls.n	800f6dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f6d4:	2303      	movs	r3, #3
 800f6d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f6da:	e005      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f6dc:	4b3f      	ldr	r3, [pc, #252]	; (800f7dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d0ed      	beq.n	800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f6e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d179      	bne.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f6f0:	4b39      	ldr	r3, [pc, #228]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f6fc:	4053      	eors	r3, r2
 800f6fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f702:	2b00      	cmp	r3, #0
 800f704:	d015      	beq.n	800f732 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f706:	4b34      	ldr	r3, [pc, #208]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f70a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f70e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f712:	4b31      	ldr	r3, [pc, #196]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f716:	4a30      	ldr	r2, [pc, #192]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f71c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f71e:	4b2e      	ldr	r3, [pc, #184]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f722:	4a2d      	ldr	r2, [pc, #180]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f728:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f72a:	4a2b      	ldr	r2, [pc, #172]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f72c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f730:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f736:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f73a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f73e:	d118      	bne.n	800f772 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f740:	f7f6 fb76 	bl	8005e30 <HAL_GetTick>
 800f744:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f748:	e00d      	b.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f74a:	f7f6 fb71 	bl	8005e30 <HAL_GetTick>
 800f74e:	4602      	mov	r2, r0
 800f750:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f754:	1ad2      	subs	r2, r2, r3
 800f756:	f241 3388 	movw	r3, #5000	; 0x1388
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d903      	bls.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f75e:	2303      	movs	r3, #3
 800f760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f764:	e005      	b.n	800f772 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f766:	4b1c      	ldr	r3, [pc, #112]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f76a:	f003 0302 	and.w	r3, r3, #2
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d0eb      	beq.n	800f74a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f776:	2b00      	cmp	r3, #0
 800f778:	d129      	bne.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f77e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f78a:	d10e      	bne.n	800f7aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f78c:	4b12      	ldr	r3, [pc, #72]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f78e:	691b      	ldr	r3, [r3, #16]
 800f790:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f798:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f79c:	091a      	lsrs	r2, r3, #4
 800f79e:	4b10      	ldr	r3, [pc, #64]	; (800f7e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f7a0:	4013      	ands	r3, r2
 800f7a2:	4a0d      	ldr	r2, [pc, #52]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7a4:	430b      	orrs	r3, r1
 800f7a6:	6113      	str	r3, [r2, #16]
 800f7a8:	e005      	b.n	800f7b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f7aa:	4b0b      	ldr	r3, [pc, #44]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	4a0a      	ldr	r2, [pc, #40]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f7b4:	6113      	str	r3, [r2, #16]
 800f7b6:	4b08      	ldr	r3, [pc, #32]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f7c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f7c6:	4a04      	ldr	r2, [pc, #16]	; (800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7c8:	430b      	orrs	r3, r1
 800f7ca:	6713      	str	r3, [r2, #112]	; 0x70
 800f7cc:	e00e      	b.n	800f7ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f7ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f7d6:	e009      	b.n	800f7ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f7d8:	58024400 	.word	0x58024400
 800f7dc:	58024800 	.word	0x58024800
 800f7e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f4:	f002 0301 	and.w	r3, r2, #1
 800f7f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f802:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f806:	460b      	mov	r3, r1
 800f808:	4313      	orrs	r3, r2
 800f80a:	f000 8089 	beq.w	800f920 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f814:	2b28      	cmp	r3, #40	; 0x28
 800f816:	d86b      	bhi.n	800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f818:	a201      	add	r2, pc, #4	; (adr r2, 800f820 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f81e:	bf00      	nop
 800f820:	0800f8f9 	.word	0x0800f8f9
 800f824:	0800f8f1 	.word	0x0800f8f1
 800f828:	0800f8f1 	.word	0x0800f8f1
 800f82c:	0800f8f1 	.word	0x0800f8f1
 800f830:	0800f8f1 	.word	0x0800f8f1
 800f834:	0800f8f1 	.word	0x0800f8f1
 800f838:	0800f8f1 	.word	0x0800f8f1
 800f83c:	0800f8f1 	.word	0x0800f8f1
 800f840:	0800f8c5 	.word	0x0800f8c5
 800f844:	0800f8f1 	.word	0x0800f8f1
 800f848:	0800f8f1 	.word	0x0800f8f1
 800f84c:	0800f8f1 	.word	0x0800f8f1
 800f850:	0800f8f1 	.word	0x0800f8f1
 800f854:	0800f8f1 	.word	0x0800f8f1
 800f858:	0800f8f1 	.word	0x0800f8f1
 800f85c:	0800f8f1 	.word	0x0800f8f1
 800f860:	0800f8db 	.word	0x0800f8db
 800f864:	0800f8f1 	.word	0x0800f8f1
 800f868:	0800f8f1 	.word	0x0800f8f1
 800f86c:	0800f8f1 	.word	0x0800f8f1
 800f870:	0800f8f1 	.word	0x0800f8f1
 800f874:	0800f8f1 	.word	0x0800f8f1
 800f878:	0800f8f1 	.word	0x0800f8f1
 800f87c:	0800f8f1 	.word	0x0800f8f1
 800f880:	0800f8f9 	.word	0x0800f8f9
 800f884:	0800f8f1 	.word	0x0800f8f1
 800f888:	0800f8f1 	.word	0x0800f8f1
 800f88c:	0800f8f1 	.word	0x0800f8f1
 800f890:	0800f8f1 	.word	0x0800f8f1
 800f894:	0800f8f1 	.word	0x0800f8f1
 800f898:	0800f8f1 	.word	0x0800f8f1
 800f89c:	0800f8f1 	.word	0x0800f8f1
 800f8a0:	0800f8f9 	.word	0x0800f8f9
 800f8a4:	0800f8f1 	.word	0x0800f8f1
 800f8a8:	0800f8f1 	.word	0x0800f8f1
 800f8ac:	0800f8f1 	.word	0x0800f8f1
 800f8b0:	0800f8f1 	.word	0x0800f8f1
 800f8b4:	0800f8f1 	.word	0x0800f8f1
 800f8b8:	0800f8f1 	.word	0x0800f8f1
 800f8bc:	0800f8f1 	.word	0x0800f8f1
 800f8c0:	0800f8f9 	.word	0x0800f8f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8c8:	3308      	adds	r3, #8
 800f8ca:	2101      	movs	r1, #1
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f001 fe95 	bl	80115fc <RCCEx_PLL2_Config>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f8d8:	e00f      	b.n	800f8fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8de:	3328      	adds	r3, #40	; 0x28
 800f8e0:	2101      	movs	r1, #1
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f001 ff3c 	bl	8011760 <RCCEx_PLL3_Config>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f8ee:	e004      	b.n	800f8fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f8f6:	e000      	b.n	800f8fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f8f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d10a      	bne.n	800f918 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f902:	4bbf      	ldr	r3, [pc, #764]	; (800fc00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f906:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f90e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f910:	4abb      	ldr	r2, [pc, #748]	; (800fc00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f912:	430b      	orrs	r3, r1
 800f914:	6553      	str	r3, [r2, #84]	; 0x54
 800f916:	e003      	b.n	800f920 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f918:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f91c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f928:	f002 0302 	and.w	r3, r2, #2
 800f92c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f930:	2300      	movs	r3, #0
 800f932:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f936:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f93a:	460b      	mov	r3, r1
 800f93c:	4313      	orrs	r3, r2
 800f93e:	d041      	beq.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f946:	2b05      	cmp	r3, #5
 800f948:	d824      	bhi.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f94a:	a201      	add	r2, pc, #4	; (adr r2, 800f950 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f950:	0800f99d 	.word	0x0800f99d
 800f954:	0800f969 	.word	0x0800f969
 800f958:	0800f97f 	.word	0x0800f97f
 800f95c:	0800f99d 	.word	0x0800f99d
 800f960:	0800f99d 	.word	0x0800f99d
 800f964:	0800f99d 	.word	0x0800f99d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f96c:	3308      	adds	r3, #8
 800f96e:	2101      	movs	r1, #1
 800f970:	4618      	mov	r0, r3
 800f972:	f001 fe43 	bl	80115fc <RCCEx_PLL2_Config>
 800f976:	4603      	mov	r3, r0
 800f978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f97c:	e00f      	b.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f982:	3328      	adds	r3, #40	; 0x28
 800f984:	2101      	movs	r1, #1
 800f986:	4618      	mov	r0, r3
 800f988:	f001 feea 	bl	8011760 <RCCEx_PLL3_Config>
 800f98c:	4603      	mov	r3, r0
 800f98e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f992:	e004      	b.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f994:	2301      	movs	r3, #1
 800f996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f99a:	e000      	b.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f99c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f99e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d10a      	bne.n	800f9bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f9a6:	4b96      	ldr	r3, [pc, #600]	; (800fc00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9aa:	f023 0107 	bic.w	r1, r3, #7
 800f9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9b4:	4a92      	ldr	r2, [pc, #584]	; (800fc00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f9b6:	430b      	orrs	r3, r1
 800f9b8:	6553      	str	r3, [r2, #84]	; 0x54
 800f9ba:	e003      	b.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f9c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9cc:	f002 0304 	and.w	r3, r2, #4
 800f9d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f9da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f9de:	460b      	mov	r3, r1
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	d044      	beq.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f9ec:	2b05      	cmp	r3, #5
 800f9ee:	d825      	bhi.n	800fa3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f9f0:	a201      	add	r2, pc, #4	; (adr r2, 800f9f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f6:	bf00      	nop
 800f9f8:	0800fa45 	.word	0x0800fa45
 800f9fc:	0800fa11 	.word	0x0800fa11
 800fa00:	0800fa27 	.word	0x0800fa27
 800fa04:	0800fa45 	.word	0x0800fa45
 800fa08:	0800fa45 	.word	0x0800fa45
 800fa0c:	0800fa45 	.word	0x0800fa45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fa10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa14:	3308      	adds	r3, #8
 800fa16:	2101      	movs	r1, #1
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f001 fdef 	bl	80115fc <RCCEx_PLL2_Config>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fa24:	e00f      	b.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa2a:	3328      	adds	r3, #40	; 0x28
 800fa2c:	2101      	movs	r1, #1
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f001 fe96 	bl	8011760 <RCCEx_PLL3_Config>
 800fa34:	4603      	mov	r3, r0
 800fa36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fa3a:	e004      	b.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa42:	e000      	b.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800fa44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10b      	bne.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fa4e:	4b6c      	ldr	r3, [pc, #432]	; (800fc00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa52:	f023 0107 	bic.w	r1, r3, #7
 800fa56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa5e:	4a68      	ldr	r2, [pc, #416]	; (800fc00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa60:	430b      	orrs	r3, r1
 800fa62:	6593      	str	r3, [r2, #88]	; 0x58
 800fa64:	e003      	b.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fa6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa76:	f002 0320 	and.w	r3, r2, #32
 800fa7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fa7e:	2300      	movs	r3, #0
 800fa80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fa84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800fa88:	460b      	mov	r3, r1
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	d055      	beq.n	800fb3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800fa8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa9a:	d033      	beq.n	800fb04 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800fa9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800faa0:	d82c      	bhi.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800faa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800faa6:	d02f      	beq.n	800fb08 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800faa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800faac:	d826      	bhi.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800faae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fab2:	d02b      	beq.n	800fb0c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800fab4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fab8:	d820      	bhi.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800faba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fabe:	d012      	beq.n	800fae6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800fac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fac4:	d81a      	bhi.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d022      	beq.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800faca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800face:	d115      	bne.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fad4:	3308      	adds	r3, #8
 800fad6:	2100      	movs	r1, #0
 800fad8:	4618      	mov	r0, r3
 800fada:	f001 fd8f 	bl	80115fc <RCCEx_PLL2_Config>
 800fade:	4603      	mov	r3, r0
 800fae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fae4:	e015      	b.n	800fb12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faea:	3328      	adds	r3, #40	; 0x28
 800faec:	2102      	movs	r1, #2
 800faee:	4618      	mov	r0, r3
 800faf0:	f001 fe36 	bl	8011760 <RCCEx_PLL3_Config>
 800faf4:	4603      	mov	r3, r0
 800faf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fafa:	e00a      	b.n	800fb12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fafc:	2301      	movs	r3, #1
 800fafe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb02:	e006      	b.n	800fb12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fb04:	bf00      	nop
 800fb06:	e004      	b.n	800fb12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fb08:	bf00      	nop
 800fb0a:	e002      	b.n	800fb12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fb0c:	bf00      	nop
 800fb0e:	e000      	b.n	800fb12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fb10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d10b      	bne.n	800fb32 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fb1a:	4b39      	ldr	r3, [pc, #228]	; (800fc00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800fb22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb2a:	4a35      	ldr	r2, [pc, #212]	; (800fc00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb2c:	430b      	orrs	r3, r1
 800fb2e:	6553      	str	r3, [r2, #84]	; 0x54
 800fb30:	e003      	b.n	800fb3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fb3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb42:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800fb46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fb50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800fb54:	460b      	mov	r3, r1
 800fb56:	4313      	orrs	r3, r2
 800fb58:	d058      	beq.n	800fc0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800fb5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fb62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fb66:	d033      	beq.n	800fbd0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800fb68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fb6c:	d82c      	bhi.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fb6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb72:	d02f      	beq.n	800fbd4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800fb74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb78:	d826      	bhi.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fb7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fb7e:	d02b      	beq.n	800fbd8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800fb80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fb84:	d820      	bhi.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fb86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb8a:	d012      	beq.n	800fbb2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800fb8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb90:	d81a      	bhi.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d022      	beq.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800fb96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb9a:	d115      	bne.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fba0:	3308      	adds	r3, #8
 800fba2:	2100      	movs	r1, #0
 800fba4:	4618      	mov	r0, r3
 800fba6:	f001 fd29 	bl	80115fc <RCCEx_PLL2_Config>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fbb0:	e015      	b.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbb6:	3328      	adds	r3, #40	; 0x28
 800fbb8:	2102      	movs	r1, #2
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f001 fdd0 	bl	8011760 <RCCEx_PLL3_Config>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fbc6:	e00a      	b.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fbc8:	2301      	movs	r3, #1
 800fbca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fbce:	e006      	b.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fbd0:	bf00      	nop
 800fbd2:	e004      	b.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fbd4:	bf00      	nop
 800fbd6:	e002      	b.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fbd8:	bf00      	nop
 800fbda:	e000      	b.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fbdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d10e      	bne.n	800fc04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fbe6:	4b06      	ldr	r3, [pc, #24]	; (800fc00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fbe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800fbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fbf6:	4a02      	ldr	r2, [pc, #8]	; (800fc00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fbf8:	430b      	orrs	r3, r1
 800fbfa:	6593      	str	r3, [r2, #88]	; 0x58
 800fbfc:	e006      	b.n	800fc0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800fbfe:	bf00      	nop
 800fc00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc14:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800fc18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fc22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800fc26:	460b      	mov	r3, r1
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	d055      	beq.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800fc2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fc34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fc38:	d033      	beq.n	800fca2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800fc3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fc3e:	d82c      	bhi.n	800fc9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fc40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc44:	d02f      	beq.n	800fca6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800fc46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc4a:	d826      	bhi.n	800fc9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fc4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fc50:	d02b      	beq.n	800fcaa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800fc52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fc56:	d820      	bhi.n	800fc9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fc58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fc5c:	d012      	beq.n	800fc84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800fc5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fc62:	d81a      	bhi.n	800fc9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d022      	beq.n	800fcae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800fc68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc6c:	d115      	bne.n	800fc9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc72:	3308      	adds	r3, #8
 800fc74:	2100      	movs	r1, #0
 800fc76:	4618      	mov	r0, r3
 800fc78:	f001 fcc0 	bl	80115fc <RCCEx_PLL2_Config>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fc82:	e015      	b.n	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc88:	3328      	adds	r3, #40	; 0x28
 800fc8a:	2102      	movs	r1, #2
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f001 fd67 	bl	8011760 <RCCEx_PLL3_Config>
 800fc92:	4603      	mov	r3, r0
 800fc94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fc98:	e00a      	b.n	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fca0:	e006      	b.n	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fca2:	bf00      	nop
 800fca4:	e004      	b.n	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fca6:	bf00      	nop
 800fca8:	e002      	b.n	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fcaa:	bf00      	nop
 800fcac:	e000      	b.n	800fcb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fcae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fcb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d10b      	bne.n	800fcd0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fcb8:	4ba1      	ldr	r3, [pc, #644]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fcba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcbc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800fcc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fcc8:	4a9d      	ldr	r2, [pc, #628]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fcca:	430b      	orrs	r3, r1
 800fccc:	6593      	str	r3, [r2, #88]	; 0x58
 800fcce:	e003      	b.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fcd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce0:	f002 0308 	and.w	r3, r2, #8
 800fce4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fce8:	2300      	movs	r3, #0
 800fcea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fcee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800fcf2:	460b      	mov	r3, r1
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	d01e      	beq.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800fcf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd04:	d10c      	bne.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd0a:	3328      	adds	r3, #40	; 0x28
 800fd0c:	2102      	movs	r1, #2
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f001 fd26 	bl	8011760 <RCCEx_PLL3_Config>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d002      	beq.n	800fd20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fd20:	4b87      	ldr	r3, [pc, #540]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fd28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd30:	4a83      	ldr	r2, [pc, #524]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd32:	430b      	orrs	r3, r1
 800fd34:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fd36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3e:	f002 0310 	and.w	r3, r2, #16
 800fd42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fd46:	2300      	movs	r3, #0
 800fd48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fd4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800fd50:	460b      	mov	r3, r1
 800fd52:	4313      	orrs	r3, r2
 800fd54:	d01e      	beq.n	800fd94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fd5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd62:	d10c      	bne.n	800fd7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd68:	3328      	adds	r3, #40	; 0x28
 800fd6a:	2102      	movs	r1, #2
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f001 fcf7 	bl	8011760 <RCCEx_PLL3_Config>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d002      	beq.n	800fd7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fd7e:	4b70      	ldr	r3, [pc, #448]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fd8e:	4a6c      	ldr	r2, [pc, #432]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fd90:	430b      	orrs	r3, r1
 800fd92:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800fda0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fda4:	2300      	movs	r3, #0
 800fda6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fdaa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800fdae:	460b      	mov	r3, r1
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	d03e      	beq.n	800fe32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800fdb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fdbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fdc0:	d022      	beq.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800fdc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fdc6:	d81b      	bhi.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d003      	beq.n	800fdd4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800fdcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdd0:	d00b      	beq.n	800fdea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800fdd2:	e015      	b.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fdd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdd8:	3308      	adds	r3, #8
 800fdda:	2100      	movs	r1, #0
 800fddc:	4618      	mov	r0, r3
 800fdde:	f001 fc0d 	bl	80115fc <RCCEx_PLL2_Config>
 800fde2:	4603      	mov	r3, r0
 800fde4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fde8:	e00f      	b.n	800fe0a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fdea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdee:	3328      	adds	r3, #40	; 0x28
 800fdf0:	2102      	movs	r1, #2
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f001 fcb4 	bl	8011760 <RCCEx_PLL3_Config>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fdfe:	e004      	b.n	800fe0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe00:	2301      	movs	r3, #1
 800fe02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fe06:	e000      	b.n	800fe0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800fe08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d10b      	bne.n	800fe2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fe12:	4b4b      	ldr	r3, [pc, #300]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800fe1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fe22:	4a47      	ldr	r2, [pc, #284]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe24:	430b      	orrs	r3, r1
 800fe26:	6593      	str	r3, [r2, #88]	; 0x58
 800fe28:	e003      	b.n	800fe32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fe32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800fe3e:	67bb      	str	r3, [r7, #120]	; 0x78
 800fe40:	2300      	movs	r3, #0
 800fe42:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fe44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800fe48:	460b      	mov	r3, r1
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	d03b      	beq.n	800fec6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800fe4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fe5a:	d01f      	beq.n	800fe9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800fe5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fe60:	d818      	bhi.n	800fe94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800fe62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe66:	d003      	beq.n	800fe70 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800fe68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fe6c:	d007      	beq.n	800fe7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800fe6e:	e011      	b.n	800fe94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe70:	4b33      	ldr	r3, [pc, #204]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe74:	4a32      	ldr	r2, [pc, #200]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fe7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800fe7c:	e00f      	b.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fe7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe82:	3328      	adds	r3, #40	; 0x28
 800fe84:	2101      	movs	r1, #1
 800fe86:	4618      	mov	r0, r3
 800fe88:	f001 fc6a 	bl	8011760 <RCCEx_PLL3_Config>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800fe92:	e004      	b.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe94:	2301      	movs	r3, #1
 800fe96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fe9a:	e000      	b.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800fe9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d10b      	bne.n	800febe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fea6:	4b26      	ldr	r3, [pc, #152]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feaa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800feae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800feb6:	4a22      	ldr	r2, [pc, #136]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800feb8:	430b      	orrs	r3, r1
 800feba:	6553      	str	r3, [r2, #84]	; 0x54
 800febc:	e003      	b.n	800fec6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800febe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fec2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fece:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800fed2:	673b      	str	r3, [r7, #112]	; 0x70
 800fed4:	2300      	movs	r3, #0
 800fed6:	677b      	str	r3, [r7, #116]	; 0x74
 800fed8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800fedc:	460b      	mov	r3, r1
 800fede:	4313      	orrs	r3, r2
 800fee0:	d034      	beq.n	800ff4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800fee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d003      	beq.n	800fef4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800feec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fef0:	d007      	beq.n	800ff02 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800fef2:	e011      	b.n	800ff18 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fef4:	4b12      	ldr	r3, [pc, #72]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef8:	4a11      	ldr	r2, [pc, #68]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fefa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fefe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ff00:	e00e      	b.n	800ff20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ff02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff06:	3308      	adds	r3, #8
 800ff08:	2102      	movs	r1, #2
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f001 fb76 	bl	80115fc <RCCEx_PLL2_Config>
 800ff10:	4603      	mov	r3, r0
 800ff12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ff16:	e003      	b.n	800ff20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ff18:	2301      	movs	r3, #1
 800ff1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ff1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d10d      	bne.n	800ff44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ff28:	4b05      	ldr	r3, [pc, #20]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ff30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff36:	4a02      	ldr	r2, [pc, #8]	; (800ff40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff38:	430b      	orrs	r3, r1
 800ff3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ff3c:	e006      	b.n	800ff4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ff3e:	bf00      	nop
 800ff40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ff4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff54:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ff58:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ff5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ff62:	460b      	mov	r3, r1
 800ff64:	4313      	orrs	r3, r2
 800ff66:	d00c      	beq.n	800ff82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ff68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff6c:	3328      	adds	r3, #40	; 0x28
 800ff6e:	2102      	movs	r1, #2
 800ff70:	4618      	mov	r0, r3
 800ff72:	f001 fbf5 	bl	8011760 <RCCEx_PLL3_Config>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d002      	beq.n	800ff82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ff82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ff8e:	663b      	str	r3, [r7, #96]	; 0x60
 800ff90:	2300      	movs	r3, #0
 800ff92:	667b      	str	r3, [r7, #100]	; 0x64
 800ff94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ff98:	460b      	mov	r3, r1
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	d038      	beq.n	8010010 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ff9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ffaa:	d018      	beq.n	800ffde <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ffac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ffb0:	d811      	bhi.n	800ffd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ffb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffb6:	d014      	beq.n	800ffe2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ffb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffbc:	d80b      	bhi.n	800ffd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d011      	beq.n	800ffe6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ffc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffc6:	d106      	bne.n	800ffd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ffc8:	4bc3      	ldr	r3, [pc, #780]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ffca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffcc:	4ac2      	ldr	r2, [pc, #776]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ffce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ffd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ffd4:	e008      	b.n	800ffe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ffdc:	e004      	b.n	800ffe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ffde:	bf00      	nop
 800ffe0:	e002      	b.n	800ffe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ffe2:	bf00      	nop
 800ffe4:	e000      	b.n	800ffe8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ffe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ffe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d10b      	bne.n	8010008 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fff0:	4bb9      	ldr	r3, [pc, #740]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fff4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010000:	4ab5      	ldr	r2, [pc, #724]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010002:	430b      	orrs	r3, r1
 8010004:	6553      	str	r3, [r2, #84]	; 0x54
 8010006:	e003      	b.n	8010010 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801000c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010018:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801001c:	65bb      	str	r3, [r7, #88]	; 0x58
 801001e:	2300      	movs	r3, #0
 8010020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010022:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8010026:	460b      	mov	r3, r1
 8010028:	4313      	orrs	r3, r2
 801002a:	d009      	beq.n	8010040 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801002c:	4baa      	ldr	r3, [pc, #680]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801002e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010030:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801003a:	4aa7      	ldr	r2, [pc, #668]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801003c:	430b      	orrs	r3, r1
 801003e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010048:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 801004c:	653b      	str	r3, [r7, #80]	; 0x50
 801004e:	2300      	movs	r3, #0
 8010050:	657b      	str	r3, [r7, #84]	; 0x54
 8010052:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8010056:	460b      	mov	r3, r1
 8010058:	4313      	orrs	r3, r2
 801005a:	d00a      	beq.n	8010072 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801005c:	4b9e      	ldr	r3, [pc, #632]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801005e:	691b      	ldr	r3, [r3, #16]
 8010060:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8010064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010068:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801006c:	4a9a      	ldr	r2, [pc, #616]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801006e:	430b      	orrs	r3, r1
 8010070:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801007e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010080:	2300      	movs	r3, #0
 8010082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010084:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010088:	460b      	mov	r3, r1
 801008a:	4313      	orrs	r3, r2
 801008c:	d009      	beq.n	80100a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801008e:	4b92      	ldr	r3, [pc, #584]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010092:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8010096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801009a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801009c:	4a8e      	ldr	r2, [pc, #568]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801009e:	430b      	orrs	r3, r1
 80100a0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80100a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100aa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80100ae:	643b      	str	r3, [r7, #64]	; 0x40
 80100b0:	2300      	movs	r3, #0
 80100b2:	647b      	str	r3, [r7, #68]	; 0x44
 80100b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80100b8:	460b      	mov	r3, r1
 80100ba:	4313      	orrs	r3, r2
 80100bc:	d00e      	beq.n	80100dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80100be:	4b86      	ldr	r3, [pc, #536]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100c0:	691b      	ldr	r3, [r3, #16]
 80100c2:	4a85      	ldr	r2, [pc, #532]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80100c8:	6113      	str	r3, [r2, #16]
 80100ca:	4b83      	ldr	r3, [pc, #524]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100cc:	6919      	ldr	r1, [r3, #16]
 80100ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80100d6:	4a80      	ldr	r2, [pc, #512]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100d8:	430b      	orrs	r3, r1
 80100da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80100dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80100e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80100ea:	2300      	movs	r3, #0
 80100ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80100f2:	460b      	mov	r3, r1
 80100f4:	4313      	orrs	r3, r2
 80100f6:	d009      	beq.n	801010c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80100f8:	4b77      	ldr	r3, [pc, #476]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80100fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100fc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8010100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010106:	4a74      	ldr	r2, [pc, #464]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010108:	430b      	orrs	r3, r1
 801010a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801010c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010114:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8010118:	633b      	str	r3, [r7, #48]	; 0x30
 801011a:	2300      	movs	r3, #0
 801011c:	637b      	str	r3, [r7, #52]	; 0x34
 801011e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8010122:	460b      	mov	r3, r1
 8010124:	4313      	orrs	r3, r2
 8010126:	d00a      	beq.n	801013e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010128:	4b6b      	ldr	r3, [pc, #428]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801012a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801012c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8010130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010138:	4a67      	ldr	r2, [pc, #412]	; (80102d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801013a:	430b      	orrs	r3, r1
 801013c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801013e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010146:	2100      	movs	r1, #0
 8010148:	62b9      	str	r1, [r7, #40]	; 0x28
 801014a:	f003 0301 	and.w	r3, r3, #1
 801014e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010150:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8010154:	460b      	mov	r3, r1
 8010156:	4313      	orrs	r3, r2
 8010158:	d011      	beq.n	801017e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801015a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801015e:	3308      	adds	r3, #8
 8010160:	2100      	movs	r1, #0
 8010162:	4618      	mov	r0, r3
 8010164:	f001 fa4a 	bl	80115fc <RCCEx_PLL2_Config>
 8010168:	4603      	mov	r3, r0
 801016a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801016e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010172:	2b00      	cmp	r3, #0
 8010174:	d003      	beq.n	801017e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801017a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801017e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010186:	2100      	movs	r1, #0
 8010188:	6239      	str	r1, [r7, #32]
 801018a:	f003 0302 	and.w	r3, r3, #2
 801018e:	627b      	str	r3, [r7, #36]	; 0x24
 8010190:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010194:	460b      	mov	r3, r1
 8010196:	4313      	orrs	r3, r2
 8010198:	d011      	beq.n	80101be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801019a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801019e:	3308      	adds	r3, #8
 80101a0:	2101      	movs	r1, #1
 80101a2:	4618      	mov	r0, r3
 80101a4:	f001 fa2a 	bl	80115fc <RCCEx_PLL2_Config>
 80101a8:	4603      	mov	r3, r0
 80101aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80101ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d003      	beq.n	80101be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80101be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c6:	2100      	movs	r1, #0
 80101c8:	61b9      	str	r1, [r7, #24]
 80101ca:	f003 0304 	and.w	r3, r3, #4
 80101ce:	61fb      	str	r3, [r7, #28]
 80101d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80101d4:	460b      	mov	r3, r1
 80101d6:	4313      	orrs	r3, r2
 80101d8:	d011      	beq.n	80101fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80101da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101de:	3308      	adds	r3, #8
 80101e0:	2102      	movs	r1, #2
 80101e2:	4618      	mov	r0, r3
 80101e4:	f001 fa0a 	bl	80115fc <RCCEx_PLL2_Config>
 80101e8:	4603      	mov	r3, r0
 80101ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80101ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d003      	beq.n	80101fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80101fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010206:	2100      	movs	r1, #0
 8010208:	6139      	str	r1, [r7, #16]
 801020a:	f003 0308 	and.w	r3, r3, #8
 801020e:	617b      	str	r3, [r7, #20]
 8010210:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010214:	460b      	mov	r3, r1
 8010216:	4313      	orrs	r3, r2
 8010218:	d011      	beq.n	801023e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801021a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801021e:	3328      	adds	r3, #40	; 0x28
 8010220:	2100      	movs	r1, #0
 8010222:	4618      	mov	r0, r3
 8010224:	f001 fa9c 	bl	8011760 <RCCEx_PLL3_Config>
 8010228:	4603      	mov	r3, r0
 801022a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 801022e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010232:	2b00      	cmp	r3, #0
 8010234:	d003      	beq.n	801023e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801023a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801023e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010246:	2100      	movs	r1, #0
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	f003 0310 	and.w	r3, r3, #16
 801024e:	60fb      	str	r3, [r7, #12]
 8010250:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010254:	460b      	mov	r3, r1
 8010256:	4313      	orrs	r3, r2
 8010258:	d011      	beq.n	801027e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801025a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801025e:	3328      	adds	r3, #40	; 0x28
 8010260:	2101      	movs	r1, #1
 8010262:	4618      	mov	r0, r3
 8010264:	f001 fa7c 	bl	8011760 <RCCEx_PLL3_Config>
 8010268:	4603      	mov	r3, r0
 801026a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801026e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010272:	2b00      	cmp	r3, #0
 8010274:	d003      	beq.n	801027e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801027a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801027e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010286:	2100      	movs	r1, #0
 8010288:	6039      	str	r1, [r7, #0]
 801028a:	f003 0320 	and.w	r3, r3, #32
 801028e:	607b      	str	r3, [r7, #4]
 8010290:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010294:	460b      	mov	r3, r1
 8010296:	4313      	orrs	r3, r2
 8010298:	d011      	beq.n	80102be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801029a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801029e:	3328      	adds	r3, #40	; 0x28
 80102a0:	2102      	movs	r1, #2
 80102a2:	4618      	mov	r0, r3
 80102a4:	f001 fa5c 	bl	8011760 <RCCEx_PLL3_Config>
 80102a8:	4603      	mov	r3, r0
 80102aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80102ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d003      	beq.n	80102be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80102be:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d101      	bne.n	80102ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80102c6:	2300      	movs	r3, #0
 80102c8:	e000      	b.n	80102cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80102ca:	2301      	movs	r3, #1
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80102d2:	46bd      	mov	sp, r7
 80102d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80102d8:	58024400 	.word	0x58024400

080102dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b090      	sub	sp, #64	; 0x40
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80102e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102ea:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80102ee:	430b      	orrs	r3, r1
 80102f0:	f040 8094 	bne.w	801041c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80102f4:	4b9e      	ldr	r3, [pc, #632]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80102f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102f8:	f003 0307 	and.w	r3, r3, #7
 80102fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	2b04      	cmp	r3, #4
 8010302:	f200 8087 	bhi.w	8010414 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8010306:	a201      	add	r2, pc, #4	; (adr r2, 801030c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801030c:	08010321 	.word	0x08010321
 8010310:	08010349 	.word	0x08010349
 8010314:	08010371 	.word	0x08010371
 8010318:	0801040d 	.word	0x0801040d
 801031c:	08010399 	.word	0x08010399
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010320:	4b93      	ldr	r3, [pc, #588]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801032c:	d108      	bne.n	8010340 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801032e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010332:	4618      	mov	r0, r3
 8010334:	f001 f810 	bl	8011358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801033c:	f000 bd45 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010340:	2300      	movs	r3, #0
 8010342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010344:	f000 bd41 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010348:	4b89      	ldr	r3, [pc, #548]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010354:	d108      	bne.n	8010368 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010356:	f107 0318 	add.w	r3, r7, #24
 801035a:	4618      	mov	r0, r3
 801035c:	f000 fd54 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010364:	f000 bd31 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010368:	2300      	movs	r3, #0
 801036a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801036c:	f000 bd2d 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010370:	4b7f      	ldr	r3, [pc, #508]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801037c:	d108      	bne.n	8010390 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801037e:	f107 030c 	add.w	r3, r7, #12
 8010382:	4618      	mov	r0, r3
 8010384:	f000 fe94 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801038c:	f000 bd1d 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010390:	2300      	movs	r3, #0
 8010392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010394:	f000 bd19 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010398:	4b75      	ldr	r3, [pc, #468]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801039a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801039c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80103a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80103a2:	4b73      	ldr	r3, [pc, #460]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	f003 0304 	and.w	r3, r3, #4
 80103aa:	2b04      	cmp	r3, #4
 80103ac:	d10c      	bne.n	80103c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80103ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d109      	bne.n	80103c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103b4:	4b6e      	ldr	r3, [pc, #440]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	08db      	lsrs	r3, r3, #3
 80103ba:	f003 0303 	and.w	r3, r3, #3
 80103be:	4a6d      	ldr	r2, [pc, #436]	; (8010574 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80103c0:	fa22 f303 	lsr.w	r3, r2, r3
 80103c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103c6:	e01f      	b.n	8010408 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80103c8:	4b69      	ldr	r3, [pc, #420]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103d4:	d106      	bne.n	80103e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80103d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80103dc:	d102      	bne.n	80103e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80103de:	4b66      	ldr	r3, [pc, #408]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80103e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103e2:	e011      	b.n	8010408 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80103e4:	4b62      	ldr	r3, [pc, #392]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80103ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80103f0:	d106      	bne.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80103f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103f8:	d102      	bne.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80103fa:	4b60      	ldr	r3, [pc, #384]	; (801057c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80103fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103fe:	e003      	b.n	8010408 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010400:	2300      	movs	r3, #0
 8010402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010404:	f000 bce1 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010408:	f000 bcdf 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801040c:	4b5c      	ldr	r3, [pc, #368]	; (8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801040e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010410:	f000 bcdb 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010414:	2300      	movs	r3, #0
 8010416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010418:	f000 bcd7 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801041c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010420:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8010424:	430b      	orrs	r3, r1
 8010426:	f040 80ad 	bne.w	8010584 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801042a:	4b51      	ldr	r3, [pc, #324]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801042c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801042e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8010432:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801043a:	d056      	beq.n	80104ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 801043c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010442:	f200 8090 	bhi.w	8010566 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010448:	2bc0      	cmp	r3, #192	; 0xc0
 801044a:	f000 8088 	beq.w	801055e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010450:	2bc0      	cmp	r3, #192	; 0xc0
 8010452:	f200 8088 	bhi.w	8010566 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010458:	2b80      	cmp	r3, #128	; 0x80
 801045a:	d032      	beq.n	80104c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801045c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801045e:	2b80      	cmp	r3, #128	; 0x80
 8010460:	f200 8081 	bhi.w	8010566 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010466:	2b00      	cmp	r3, #0
 8010468:	d003      	beq.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801046a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046c:	2b40      	cmp	r3, #64	; 0x40
 801046e:	d014      	beq.n	801049a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010470:	e079      	b.n	8010566 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010472:	4b3f      	ldr	r3, [pc, #252]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801047a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801047e:	d108      	bne.n	8010492 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010484:	4618      	mov	r0, r3
 8010486:	f000 ff67 	bl	8011358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801048e:	f000 bc9c 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010492:	2300      	movs	r3, #0
 8010494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010496:	f000 bc98 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801049a:	4b35      	ldr	r3, [pc, #212]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80104a6:	d108      	bne.n	80104ba <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104a8:	f107 0318 	add.w	r3, r7, #24
 80104ac:	4618      	mov	r0, r3
 80104ae:	f000 fcab 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104b2:	69bb      	ldr	r3, [r7, #24]
 80104b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104b6:	f000 bc88 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104ba:	2300      	movs	r3, #0
 80104bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104be:	f000 bc84 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104c2:	4b2b      	ldr	r3, [pc, #172]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104ce:	d108      	bne.n	80104e2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104d0:	f107 030c 	add.w	r3, r7, #12
 80104d4:	4618      	mov	r0, r3
 80104d6:	f000 fdeb 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104de:	f000 bc74 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104e2:	2300      	movs	r3, #0
 80104e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104e6:	f000 bc70 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80104ea:	4b21      	ldr	r3, [pc, #132]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80104f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80104f4:	4b1e      	ldr	r3, [pc, #120]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f003 0304 	and.w	r3, r3, #4
 80104fc:	2b04      	cmp	r3, #4
 80104fe:	d10c      	bne.n	801051a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010502:	2b00      	cmp	r3, #0
 8010504:	d109      	bne.n	801051a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010506:	4b1a      	ldr	r3, [pc, #104]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	08db      	lsrs	r3, r3, #3
 801050c:	f003 0303 	and.w	r3, r3, #3
 8010510:	4a18      	ldr	r2, [pc, #96]	; (8010574 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010512:	fa22 f303 	lsr.w	r3, r2, r3
 8010516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010518:	e01f      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801051a:	4b15      	ldr	r3, [pc, #84]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010526:	d106      	bne.n	8010536 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801052e:	d102      	bne.n	8010536 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010530:	4b11      	ldr	r3, [pc, #68]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010534:	e011      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010536:	4b0e      	ldr	r3, [pc, #56]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801053e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010542:	d106      	bne.n	8010552 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8010544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801054a:	d102      	bne.n	8010552 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801054c:	4b0b      	ldr	r3, [pc, #44]	; (801057c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801054e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010550:	e003      	b.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010552:	2300      	movs	r3, #0
 8010554:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010556:	f000 bc38 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801055a:	f000 bc36 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801055e:	4b08      	ldr	r3, [pc, #32]	; (8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010562:	f000 bc32 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010566:	2300      	movs	r3, #0
 8010568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801056a:	f000 bc2e 	b.w	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801056e:	bf00      	nop
 8010570:	58024400 	.word	0x58024400
 8010574:	03d09000 	.word	0x03d09000
 8010578:	003d0900 	.word	0x003d0900
 801057c:	017d7840 	.word	0x017d7840
 8010580:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010588:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801058c:	430b      	orrs	r3, r1
 801058e:	f040 809c 	bne.w	80106ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010592:	4b9e      	ldr	r3, [pc, #632]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010596:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801059a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801059c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80105a2:	d054      	beq.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80105a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80105aa:	f200 808b 	bhi.w	80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80105ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80105b4:	f000 8083 	beq.w	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80105b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80105be:	f200 8081 	bhi.w	80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80105c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80105c8:	d02f      	beq.n	801062a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80105ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80105d0:	d878      	bhi.n	80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80105d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d004      	beq.n	80105e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80105d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80105de:	d012      	beq.n	8010606 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80105e0:	e070      	b.n	80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80105e2:	4b8a      	ldr	r3, [pc, #552]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105ee:	d107      	bne.n	8010600 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80105f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105f4:	4618      	mov	r0, r3
 80105f6:	f000 feaf 	bl	8011358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80105fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105fe:	e3e4      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010600:	2300      	movs	r3, #0
 8010602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010604:	e3e1      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010606:	4b81      	ldr	r3, [pc, #516]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801060e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010612:	d107      	bne.n	8010624 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010614:	f107 0318 	add.w	r3, r7, #24
 8010618:	4618      	mov	r0, r3
 801061a:	f000 fbf5 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010622:	e3d2      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010624:	2300      	movs	r3, #0
 8010626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010628:	e3cf      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801062a:	4b78      	ldr	r3, [pc, #480]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010636:	d107      	bne.n	8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010638:	f107 030c 	add.w	r3, r7, #12
 801063c:	4618      	mov	r0, r3
 801063e:	f000 fd37 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010646:	e3c0      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010648:	2300      	movs	r3, #0
 801064a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801064c:	e3bd      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801064e:	4b6f      	ldr	r3, [pc, #444]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010656:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010658:	4b6c      	ldr	r3, [pc, #432]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f003 0304 	and.w	r3, r3, #4
 8010660:	2b04      	cmp	r3, #4
 8010662:	d10c      	bne.n	801067e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010666:	2b00      	cmp	r3, #0
 8010668:	d109      	bne.n	801067e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801066a:	4b68      	ldr	r3, [pc, #416]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	08db      	lsrs	r3, r3, #3
 8010670:	f003 0303 	and.w	r3, r3, #3
 8010674:	4a66      	ldr	r2, [pc, #408]	; (8010810 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010676:	fa22 f303 	lsr.w	r3, r2, r3
 801067a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801067c:	e01e      	b.n	80106bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801067e:	4b63      	ldr	r3, [pc, #396]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801068a:	d106      	bne.n	801069a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 801068c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801068e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010692:	d102      	bne.n	801069a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010694:	4b5f      	ldr	r3, [pc, #380]	; (8010814 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010698:	e010      	b.n	80106bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801069a:	4b5c      	ldr	r3, [pc, #368]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106a6:	d106      	bne.n	80106b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80106a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106ae:	d102      	bne.n	80106b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80106b0:	4b59      	ldr	r3, [pc, #356]	; (8010818 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80106b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106b4:	e002      	b.n	80106bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80106b6:	2300      	movs	r3, #0
 80106b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80106ba:	e386      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106bc:	e385      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80106be:	4b57      	ldr	r3, [pc, #348]	; (801081c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80106c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106c2:	e382      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80106c4:	2300      	movs	r3, #0
 80106c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106c8:	e37f      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80106ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106ce:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80106d2:	430b      	orrs	r3, r1
 80106d4:	f040 80a7 	bne.w	8010826 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80106d8:	4b4c      	ldr	r3, [pc, #304]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80106da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106dc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80106e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80106e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80106e8:	d055      	beq.n	8010796 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80106ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80106f0:	f200 8096 	bhi.w	8010820 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80106f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80106fa:	f000 8084 	beq.w	8010806 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80106fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010700:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010704:	f200 808c 	bhi.w	8010820 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801070a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801070e:	d030      	beq.n	8010772 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010712:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010716:	f200 8083 	bhi.w	8010820 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801071a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071c:	2b00      	cmp	r3, #0
 801071e:	d004      	beq.n	801072a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010722:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010726:	d012      	beq.n	801074e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010728:	e07a      	b.n	8010820 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801072a:	4b38      	ldr	r3, [pc, #224]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010736:	d107      	bne.n	8010748 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801073c:	4618      	mov	r0, r3
 801073e:	f000 fe0b 	bl	8011358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010744:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010746:	e340      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010748:	2300      	movs	r3, #0
 801074a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801074c:	e33d      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801074e:	4b2f      	ldr	r3, [pc, #188]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801075a:	d107      	bne.n	801076c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801075c:	f107 0318 	add.w	r3, r7, #24
 8010760:	4618      	mov	r0, r3
 8010762:	f000 fb51 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801076a:	e32e      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801076c:	2300      	movs	r3, #0
 801076e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010770:	e32b      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010772:	4b26      	ldr	r3, [pc, #152]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801077a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801077e:	d107      	bne.n	8010790 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010780:	f107 030c 	add.w	r3, r7, #12
 8010784:	4618      	mov	r0, r3
 8010786:	f000 fc93 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801078e:	e31c      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010790:	2300      	movs	r3, #0
 8010792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010794:	e319      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010796:	4b1d      	ldr	r3, [pc, #116]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801079a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801079e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80107a0:	4b1a      	ldr	r3, [pc, #104]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f003 0304 	and.w	r3, r3, #4
 80107a8:	2b04      	cmp	r3, #4
 80107aa:	d10c      	bne.n	80107c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80107ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d109      	bne.n	80107c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80107b2:	4b16      	ldr	r3, [pc, #88]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	08db      	lsrs	r3, r3, #3
 80107b8:	f003 0303 	and.w	r3, r3, #3
 80107bc:	4a14      	ldr	r2, [pc, #80]	; (8010810 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80107be:	fa22 f303 	lsr.w	r3, r2, r3
 80107c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107c4:	e01e      	b.n	8010804 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80107c6:	4b11      	ldr	r3, [pc, #68]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107d2:	d106      	bne.n	80107e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80107d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107da:	d102      	bne.n	80107e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80107dc:	4b0d      	ldr	r3, [pc, #52]	; (8010814 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80107de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107e0:	e010      	b.n	8010804 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80107e2:	4b0a      	ldr	r3, [pc, #40]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107ee:	d106      	bne.n	80107fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80107f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107f6:	d102      	bne.n	80107fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80107f8:	4b07      	ldr	r3, [pc, #28]	; (8010818 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80107fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107fc:	e002      	b.n	8010804 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80107fe:	2300      	movs	r3, #0
 8010800:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010802:	e2e2      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010804:	e2e1      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010806:	4b05      	ldr	r3, [pc, #20]	; (801081c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801080a:	e2de      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801080c:	58024400 	.word	0x58024400
 8010810:	03d09000 	.word	0x03d09000
 8010814:	003d0900 	.word	0x003d0900
 8010818:	017d7840 	.word	0x017d7840
 801081c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010820:	2300      	movs	r3, #0
 8010822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010824:	e2d1      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010826:	e9d7 2300 	ldrd	r2, r3, [r7]
 801082a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801082e:	430b      	orrs	r3, r1
 8010830:	f040 809c 	bne.w	801096c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010834:	4b93      	ldr	r3, [pc, #588]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010838:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801083c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801083e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010844:	d054      	beq.n	80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8010846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801084c:	f200 808b 	bhi.w	8010966 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010852:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010856:	f000 8083 	beq.w	8010960 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801085a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010860:	f200 8081 	bhi.w	8010966 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801086a:	d02f      	beq.n	80108cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 801086c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010872:	d878      	bhi.n	8010966 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010876:	2b00      	cmp	r3, #0
 8010878:	d004      	beq.n	8010884 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801087a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010880:	d012      	beq.n	80108a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010882:	e070      	b.n	8010966 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010884:	4b7f      	ldr	r3, [pc, #508]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801088c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010890:	d107      	bne.n	80108a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010896:	4618      	mov	r0, r3
 8010898:	f000 fd5e 	bl	8011358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108a0:	e293      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108a2:	2300      	movs	r3, #0
 80108a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108a6:	e290      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80108a8:	4b76      	ldr	r3, [pc, #472]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80108b4:	d107      	bne.n	80108c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108b6:	f107 0318 	add.w	r3, r7, #24
 80108ba:	4618      	mov	r0, r3
 80108bc:	f000 faa4 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108c4:	e281      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108c6:	2300      	movs	r3, #0
 80108c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108ca:	e27e      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80108cc:	4b6d      	ldr	r3, [pc, #436]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108d8:	d107      	bne.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108da:	f107 030c 	add.w	r3, r7, #12
 80108de:	4618      	mov	r0, r3
 80108e0:	f000 fbe6 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108e8:	e26f      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108ea:	2300      	movs	r3, #0
 80108ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108ee:	e26c      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80108f0:	4b64      	ldr	r3, [pc, #400]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80108f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80108f8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80108fa:	4b62      	ldr	r3, [pc, #392]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f003 0304 	and.w	r3, r3, #4
 8010902:	2b04      	cmp	r3, #4
 8010904:	d10c      	bne.n	8010920 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010908:	2b00      	cmp	r3, #0
 801090a:	d109      	bne.n	8010920 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801090c:	4b5d      	ldr	r3, [pc, #372]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	08db      	lsrs	r3, r3, #3
 8010912:	f003 0303 	and.w	r3, r3, #3
 8010916:	4a5c      	ldr	r2, [pc, #368]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010918:	fa22 f303 	lsr.w	r3, r2, r3
 801091c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801091e:	e01e      	b.n	801095e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010920:	4b58      	ldr	r3, [pc, #352]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801092c:	d106      	bne.n	801093c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010934:	d102      	bne.n	801093c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010936:	4b55      	ldr	r3, [pc, #340]	; (8010a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010938:	63fb      	str	r3, [r7, #60]	; 0x3c
 801093a:	e010      	b.n	801095e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801093c:	4b51      	ldr	r3, [pc, #324]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010948:	d106      	bne.n	8010958 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801094a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801094c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010950:	d102      	bne.n	8010958 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010952:	4b4f      	ldr	r3, [pc, #316]	; (8010a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010956:	e002      	b.n	801095e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010958:	2300      	movs	r3, #0
 801095a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801095c:	e235      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801095e:	e234      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010960:	4b4c      	ldr	r3, [pc, #304]	; (8010a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010964:	e231      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010966:	2300      	movs	r3, #0
 8010968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801096a:	e22e      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801096c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010970:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010974:	430b      	orrs	r3, r1
 8010976:	f040 808f 	bne.w	8010a98 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801097a:	4b42      	ldr	r3, [pc, #264]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801097c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801097e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010982:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010986:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801098a:	d06b      	beq.n	8010a64 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801098c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010992:	d874      	bhi.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010996:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801099a:	d056      	beq.n	8010a4a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 801099c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80109a2:	d86c      	bhi.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80109a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80109aa:	d03b      	beq.n	8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80109ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80109b2:	d864      	bhi.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80109b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109ba:	d021      	beq.n	8010a00 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80109bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109c2:	d85c      	bhi.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80109c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d004      	beq.n	80109d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80109ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109d0:	d004      	beq.n	80109dc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80109d2:	e054      	b.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80109d4:	f7fe fa0a 	bl	800edec <HAL_RCC_GetPCLK1Freq>
 80109d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80109da:	e1f6      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80109dc:	4b29      	ldr	r3, [pc, #164]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80109e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109e8:	d107      	bne.n	80109fa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109ea:	f107 0318 	add.w	r3, r7, #24
 80109ee:	4618      	mov	r0, r3
 80109f0:	f000 fa0a 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109f8:	e1e7      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109fa:	2300      	movs	r3, #0
 80109fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109fe:	e1e4      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a00:	4b20      	ldr	r3, [pc, #128]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a0c:	d107      	bne.n	8010a1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a0e:	f107 030c 	add.w	r3, r7, #12
 8010a12:	4618      	mov	r0, r3
 8010a14:	f000 fb4c 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a1c:	e1d5      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a22:	e1d2      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010a24:	4b17      	ldr	r3, [pc, #92]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f003 0304 	and.w	r3, r3, #4
 8010a2c:	2b04      	cmp	r3, #4
 8010a2e:	d109      	bne.n	8010a44 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010a30:	4b14      	ldr	r3, [pc, #80]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	08db      	lsrs	r3, r3, #3
 8010a36:	f003 0303 	and.w	r3, r3, #3
 8010a3a:	4a13      	ldr	r2, [pc, #76]	; (8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8010a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a42:	e1c2      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a44:	2300      	movs	r3, #0
 8010a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a48:	e1bf      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010a4a:	4b0e      	ldr	r3, [pc, #56]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a56:	d102      	bne.n	8010a5e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010a58:	4b0c      	ldr	r3, [pc, #48]	; (8010a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a5c:	e1b5      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a62:	e1b2      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010a64:	4b07      	ldr	r3, [pc, #28]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a70:	d102      	bne.n	8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010a72:	4b07      	ldr	r3, [pc, #28]	; (8010a90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a76:	e1a8      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a7c:	e1a5      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a82:	e1a2      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010a84:	58024400 	.word	0x58024400
 8010a88:	03d09000 	.word	0x03d09000
 8010a8c:	003d0900 	.word	0x003d0900
 8010a90:	017d7840 	.word	0x017d7840
 8010a94:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a9c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010aa0:	430b      	orrs	r3, r1
 8010aa2:	d173      	bne.n	8010b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010aa4:	4b9c      	ldr	r3, [pc, #624]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010aac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ab4:	d02f      	beq.n	8010b16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010abc:	d863      	bhi.n	8010b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d004      	beq.n	8010ace <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010aca:	d012      	beq.n	8010af2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010acc:	e05b      	b.n	8010b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010ace:	4b92      	ldr	r3, [pc, #584]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ad6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010ada:	d107      	bne.n	8010aec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010adc:	f107 0318 	add.w	r3, r7, #24
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f000 f991 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010ae6:	69bb      	ldr	r3, [r7, #24]
 8010ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010aea:	e16e      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010aec:	2300      	movs	r3, #0
 8010aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010af0:	e16b      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010af2:	4b89      	ldr	r3, [pc, #548]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010afe:	d107      	bne.n	8010b10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b00:	f107 030c 	add.w	r3, r7, #12
 8010b04:	4618      	mov	r0, r3
 8010b06:	f000 fad3 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b0e:	e15c      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b10:	2300      	movs	r3, #0
 8010b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b14:	e159      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010b16:	4b80      	ldr	r3, [pc, #512]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010b1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010b20:	4b7d      	ldr	r3, [pc, #500]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	f003 0304 	and.w	r3, r3, #4
 8010b28:	2b04      	cmp	r3, #4
 8010b2a:	d10c      	bne.n	8010b46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d109      	bne.n	8010b46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b32:	4b79      	ldr	r3, [pc, #484]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	08db      	lsrs	r3, r3, #3
 8010b38:	f003 0303 	and.w	r3, r3, #3
 8010b3c:	4a77      	ldr	r2, [pc, #476]	; (8010d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8010b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b44:	e01e      	b.n	8010b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010b46:	4b74      	ldr	r3, [pc, #464]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b52:	d106      	bne.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010b5a:	d102      	bne.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010b5c:	4b70      	ldr	r3, [pc, #448]	; (8010d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b60:	e010      	b.n	8010b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010b62:	4b6d      	ldr	r3, [pc, #436]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b6e:	d106      	bne.n	8010b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b76:	d102      	bne.n	8010b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010b78:	4b6a      	ldr	r3, [pc, #424]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b7c:	e002      	b.n	8010b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010b82:	e122      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010b84:	e121      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010b86:	2300      	movs	r3, #0
 8010b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b8a:	e11e      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b90:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010b94:	430b      	orrs	r3, r1
 8010b96:	d133      	bne.n	8010c00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010b98:	4b5f      	ldr	r3, [pc, #380]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ba0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d004      	beq.n	8010bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bae:	d012      	beq.n	8010bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010bb0:	e023      	b.n	8010bfa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010bb2:	4b59      	ldr	r3, [pc, #356]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010bbe:	d107      	bne.n	8010bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f000 fbc7 	bl	8011358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bce:	e0fc      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bd4:	e0f9      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010bd6:	4b50      	ldr	r3, [pc, #320]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010be2:	d107      	bne.n	8010bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010be4:	f107 0318 	add.w	r3, r7, #24
 8010be8:	4618      	mov	r0, r3
 8010bea:	f000 f90d 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010bee:	6a3b      	ldr	r3, [r7, #32]
 8010bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bf2:	e0ea      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bf8:	e0e7      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bfe:	e0e4      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c04:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010c08:	430b      	orrs	r3, r1
 8010c0a:	f040 808d 	bne.w	8010d28 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010c0e:	4b42      	ldr	r3, [pc, #264]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c12:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010c16:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010c1e:	d06b      	beq.n	8010cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010c26:	d874      	bhi.n	8010d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c2e:	d056      	beq.n	8010cde <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c36:	d86c      	bhi.n	8010d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010c3e:	d03b      	beq.n	8010cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010c46:	d864      	bhi.n	8010d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c4e:	d021      	beq.n	8010c94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c56:	d85c      	bhi.n	8010d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d004      	beq.n	8010c68 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010c64:	d004      	beq.n	8010c70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8010c66:	e054      	b.n	8010d12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010c68:	f000 f8b8 	bl	8010ddc <HAL_RCCEx_GetD3PCLK1Freq>
 8010c6c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010c6e:	e0ac      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010c70:	4b29      	ldr	r3, [pc, #164]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010c7c:	d107      	bne.n	8010c8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c7e:	f107 0318 	add.w	r3, r7, #24
 8010c82:	4618      	mov	r0, r3
 8010c84:	f000 f8c0 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c8c:	e09d      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c92:	e09a      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010c94:	4b20      	ldr	r3, [pc, #128]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ca0:	d107      	bne.n	8010cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ca2:	f107 030c 	add.w	r3, r7, #12
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f000 fa02 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010cb0:	e08b      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010cb6:	e088      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010cb8:	4b17      	ldr	r3, [pc, #92]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	f003 0304 	and.w	r3, r3, #4
 8010cc0:	2b04      	cmp	r3, #4
 8010cc2:	d109      	bne.n	8010cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010cc4:	4b14      	ldr	r3, [pc, #80]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	08db      	lsrs	r3, r3, #3
 8010cca:	f003 0303 	and.w	r3, r3, #3
 8010cce:	4a13      	ldr	r2, [pc, #76]	; (8010d1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8010cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010cd6:	e078      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010cdc:	e075      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010cde:	4b0e      	ldr	r3, [pc, #56]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cea:	d102      	bne.n	8010cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010cec:	4b0c      	ldr	r3, [pc, #48]	; (8010d20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010cf0:	e06b      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010cf6:	e068      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010cf8:	4b07      	ldr	r3, [pc, #28]	; (8010d18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010d04:	d102      	bne.n	8010d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010d06:	4b07      	ldr	r3, [pc, #28]	; (8010d24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d0a:	e05e      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d10:	e05b      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010d12:	2300      	movs	r3, #0
 8010d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d16:	e058      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010d18:	58024400 	.word	0x58024400
 8010d1c:	03d09000 	.word	0x03d09000
 8010d20:	003d0900 	.word	0x003d0900
 8010d24:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d2c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010d30:	430b      	orrs	r3, r1
 8010d32:	d148      	bne.n	8010dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010d34:	4b27      	ldr	r3, [pc, #156]	; (8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010d3c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d44:	d02a      	beq.n	8010d9c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d4c:	d838      	bhi.n	8010dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d004      	beq.n	8010d5e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010d5a:	d00d      	beq.n	8010d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010d5c:	e030      	b.n	8010dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010d5e:	4b1d      	ldr	r3, [pc, #116]	; (8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010d6a:	d102      	bne.n	8010d72 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010d6c:	4b1a      	ldr	r3, [pc, #104]	; (8010dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d70:	e02b      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d72:	2300      	movs	r3, #0
 8010d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d76:	e028      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010d78:	4b16      	ldr	r3, [pc, #88]	; (8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010d84:	d107      	bne.n	8010d96 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f000 fae4 	bl	8011358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d94:	e019      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d96:	2300      	movs	r3, #0
 8010d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d9a:	e016      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010d9c:	4b0d      	ldr	r3, [pc, #52]	; (8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010da8:	d107      	bne.n	8010dba <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010daa:	f107 0318 	add.w	r3, r7, #24
 8010dae:	4618      	mov	r0, r3
 8010db0:	f000 f82a 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010db4:	69fb      	ldr	r3, [r7, #28]
 8010db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010db8:	e007      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dbe:	e004      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dc4:	e001      	b.n	8010dca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3740      	adds	r7, #64	; 0x40
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	58024400 	.word	0x58024400
 8010dd8:	017d7840 	.word	0x017d7840

08010ddc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010de0:	f7fd ffd4 	bl	800ed8c <HAL_RCC_GetHCLKFreq>
 8010de4:	4602      	mov	r2, r0
 8010de6:	4b06      	ldr	r3, [pc, #24]	; (8010e00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010de8:	6a1b      	ldr	r3, [r3, #32]
 8010dea:	091b      	lsrs	r3, r3, #4
 8010dec:	f003 0307 	and.w	r3, r3, #7
 8010df0:	4904      	ldr	r1, [pc, #16]	; (8010e04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010df2:	5ccb      	ldrb	r3, [r1, r3]
 8010df4:	f003 031f 	and.w	r3, r3, #31
 8010df8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	58024400 	.word	0x58024400
 8010e04:	0801b164 	.word	0x0801b164

08010e08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b089      	sub	sp, #36	; 0x24
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010e10:	4ba1      	ldr	r3, [pc, #644]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e14:	f003 0303 	and.w	r3, r3, #3
 8010e18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010e1a:	4b9f      	ldr	r3, [pc, #636]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e1e:	0b1b      	lsrs	r3, r3, #12
 8010e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010e26:	4b9c      	ldr	r3, [pc, #624]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e2a:	091b      	lsrs	r3, r3, #4
 8010e2c:	f003 0301 	and.w	r3, r3, #1
 8010e30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010e32:	4b99      	ldr	r3, [pc, #612]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e36:	08db      	lsrs	r3, r3, #3
 8010e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e3c:	693a      	ldr	r2, [r7, #16]
 8010e3e:	fb02 f303 	mul.w	r3, r2, r3
 8010e42:	ee07 3a90 	vmov	s15, r3
 8010e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f000 8111 	beq.w	8011078 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	2b02      	cmp	r3, #2
 8010e5a:	f000 8083 	beq.w	8010f64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010e5e:	69bb      	ldr	r3, [r7, #24]
 8010e60:	2b02      	cmp	r3, #2
 8010e62:	f200 80a1 	bhi.w	8010fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d003      	beq.n	8010e74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	d056      	beq.n	8010f20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010e72:	e099      	b.n	8010fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e74:	4b88      	ldr	r3, [pc, #544]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f003 0320 	and.w	r3, r3, #32
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d02d      	beq.n	8010edc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e80:	4b85      	ldr	r3, [pc, #532]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	08db      	lsrs	r3, r3, #3
 8010e86:	f003 0303 	and.w	r3, r3, #3
 8010e8a:	4a84      	ldr	r2, [pc, #528]	; (801109c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8010e90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	ee07 3a90 	vmov	s15, r3
 8010e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	ee07 3a90 	vmov	s15, r3
 8010ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eaa:	4b7b      	ldr	r3, [pc, #492]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eb2:	ee07 3a90 	vmov	s15, r3
 8010eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ebe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80110a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010eda:	e087      	b.n	8010fec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	ee07 3a90 	vmov	s15, r3
 8010ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ee6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80110a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eee:	4b6a      	ldr	r3, [pc, #424]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ef6:	ee07 3a90 	vmov	s15, r3
 8010efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f02:	eddf 5a67 	vldr	s11, [pc, #412]	; 80110a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f1e:	e065      	b.n	8010fec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	ee07 3a90 	vmov	s15, r3
 8010f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80110a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f32:	4b59      	ldr	r3, [pc, #356]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f3a:	ee07 3a90 	vmov	s15, r3
 8010f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f46:	eddf 5a56 	vldr	s11, [pc, #344]	; 80110a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f62:	e043      	b.n	8010fec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	ee07 3a90 	vmov	s15, r3
 8010f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80110ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f76:	4b48      	ldr	r3, [pc, #288]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f7e:	ee07 3a90 	vmov	s15, r3
 8010f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80110a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010fa6:	e021      	b.n	8010fec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	ee07 3a90 	vmov	s15, r3
 8010fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80110a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010fba:	4b37      	ldr	r3, [pc, #220]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fc2:	ee07 3a90 	vmov	s15, r3
 8010fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8010fce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80110a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010fea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010fec:	4b2a      	ldr	r3, [pc, #168]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ff0:	0a5b      	lsrs	r3, r3, #9
 8010ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ff6:	ee07 3a90 	vmov	s15, r3
 8010ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011006:	edd7 6a07 	vldr	s13, [r7, #28]
 801100a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801100e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011012:	ee17 2a90 	vmov	r2, s15
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801101a:	4b1f      	ldr	r3, [pc, #124]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801101c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801101e:	0c1b      	lsrs	r3, r3, #16
 8011020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011024:	ee07 3a90 	vmov	s15, r3
 8011028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801102c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011030:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011034:	edd7 6a07 	vldr	s13, [r7, #28]
 8011038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801103c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011040:	ee17 2a90 	vmov	r2, s15
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011048:	4b13      	ldr	r3, [pc, #76]	; (8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801104a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801104c:	0e1b      	lsrs	r3, r3, #24
 801104e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011052:	ee07 3a90 	vmov	s15, r3
 8011056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801105a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801105e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011062:	edd7 6a07 	vldr	s13, [r7, #28]
 8011066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801106a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801106e:	ee17 2a90 	vmov	r2, s15
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8011076:	e008      	b.n	801108a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2200      	movs	r2, #0
 801107c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2200      	movs	r2, #0
 8011082:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2200      	movs	r2, #0
 8011088:	609a      	str	r2, [r3, #8]
}
 801108a:	bf00      	nop
 801108c:	3724      	adds	r7, #36	; 0x24
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	58024400 	.word	0x58024400
 801109c:	03d09000 	.word	0x03d09000
 80110a0:	46000000 	.word	0x46000000
 80110a4:	4c742400 	.word	0x4c742400
 80110a8:	4a742400 	.word	0x4a742400
 80110ac:	4bbebc20 	.word	0x4bbebc20

080110b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80110b0:	b480      	push	{r7}
 80110b2:	b089      	sub	sp, #36	; 0x24
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80110b8:	4ba1      	ldr	r3, [pc, #644]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110bc:	f003 0303 	and.w	r3, r3, #3
 80110c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80110c2:	4b9f      	ldr	r3, [pc, #636]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110c6:	0d1b      	lsrs	r3, r3, #20
 80110c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80110ce:	4b9c      	ldr	r3, [pc, #624]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110d2:	0a1b      	lsrs	r3, r3, #8
 80110d4:	f003 0301 	and.w	r3, r3, #1
 80110d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80110da:	4b99      	ldr	r3, [pc, #612]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80110dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110de:	08db      	lsrs	r3, r3, #3
 80110e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80110e4:	693a      	ldr	r2, [r7, #16]
 80110e6:	fb02 f303 	mul.w	r3, r2, r3
 80110ea:	ee07 3a90 	vmov	s15, r3
 80110ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f000 8111 	beq.w	8011320 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	2b02      	cmp	r3, #2
 8011102:	f000 8083 	beq.w	801120c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8011106:	69bb      	ldr	r3, [r7, #24]
 8011108:	2b02      	cmp	r3, #2
 801110a:	f200 80a1 	bhi.w	8011250 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d003      	beq.n	801111c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	2b01      	cmp	r3, #1
 8011118:	d056      	beq.n	80111c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801111a:	e099      	b.n	8011250 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801111c:	4b88      	ldr	r3, [pc, #544]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f003 0320 	and.w	r3, r3, #32
 8011124:	2b00      	cmp	r3, #0
 8011126:	d02d      	beq.n	8011184 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011128:	4b85      	ldr	r3, [pc, #532]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	08db      	lsrs	r3, r3, #3
 801112e:	f003 0303 	and.w	r3, r3, #3
 8011132:	4a84      	ldr	r2, [pc, #528]	; (8011344 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8011134:	fa22 f303 	lsr.w	r3, r2, r3
 8011138:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	ee07 3a90 	vmov	s15, r3
 8011140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	ee07 3a90 	vmov	s15, r3
 801114a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801114e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011152:	4b7b      	ldr	r3, [pc, #492]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801115a:	ee07 3a90 	vmov	s15, r3
 801115e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011162:	ed97 6a03 	vldr	s12, [r7, #12]
 8011166:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011348 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801116a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801116e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801117e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011182:	e087      	b.n	8011294 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	ee07 3a90 	vmov	s15, r3
 801118a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801118e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801134c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8011192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011196:	4b6a      	ldr	r3, [pc, #424]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801119a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801119e:	ee07 3a90 	vmov	s15, r3
 80111a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80111aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011348 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80111ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111c6:	e065      	b.n	8011294 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	ee07 3a90 	vmov	s15, r3
 80111ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011350 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80111d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111da:	4b59      	ldr	r3, [pc, #356]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80111dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111e2:	ee07 3a90 	vmov	s15, r3
 80111e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80111ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011348 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80111f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801120a:	e043      	b.n	8011294 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	ee07 3a90 	vmov	s15, r3
 8011212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011216:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011354 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801121a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801121e:	4b48      	ldr	r3, [pc, #288]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011226:	ee07 3a90 	vmov	s15, r3
 801122a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801122e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011232:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011348 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801123a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801123e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011246:	ee67 7a27 	vmul.f32	s15, s14, s15
 801124a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801124e:	e021      	b.n	8011294 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	ee07 3a90 	vmov	s15, r3
 8011256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801125a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011350 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801125e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011262:	4b37      	ldr	r3, [pc, #220]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801126a:	ee07 3a90 	vmov	s15, r3
 801126e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011272:	ed97 6a03 	vldr	s12, [r7, #12]
 8011276:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011348 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801127a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801127e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801128e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011292:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8011294:	4b2a      	ldr	r3, [pc, #168]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011298:	0a5b      	lsrs	r3, r3, #9
 801129a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801129e:	ee07 3a90 	vmov	s15, r3
 80112a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80112b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112ba:	ee17 2a90 	vmov	r2, s15
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80112c2:	4b1f      	ldr	r3, [pc, #124]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112c6:	0c1b      	lsrs	r3, r3, #16
 80112c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112cc:	ee07 3a90 	vmov	s15, r3
 80112d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80112e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112e8:	ee17 2a90 	vmov	r2, s15
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80112f0:	4b13      	ldr	r3, [pc, #76]	; (8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112f4:	0e1b      	lsrs	r3, r3, #24
 80112f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112fa:	ee07 3a90 	vmov	s15, r3
 80112fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011306:	ee37 7a87 	vadd.f32	s14, s15, s14
 801130a:	edd7 6a07 	vldr	s13, [r7, #28]
 801130e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011316:	ee17 2a90 	vmov	r2, s15
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801131e:	e008      	b.n	8011332 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2200      	movs	r2, #0
 8011324:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2200      	movs	r2, #0
 801132a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2200      	movs	r2, #0
 8011330:	609a      	str	r2, [r3, #8]
}
 8011332:	bf00      	nop
 8011334:	3724      	adds	r7, #36	; 0x24
 8011336:	46bd      	mov	sp, r7
 8011338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133c:	4770      	bx	lr
 801133e:	bf00      	nop
 8011340:	58024400 	.word	0x58024400
 8011344:	03d09000 	.word	0x03d09000
 8011348:	46000000 	.word	0x46000000
 801134c:	4c742400 	.word	0x4c742400
 8011350:	4a742400 	.word	0x4a742400
 8011354:	4bbebc20 	.word	0x4bbebc20

08011358 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011358:	b480      	push	{r7}
 801135a:	b089      	sub	sp, #36	; 0x24
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011360:	4ba0      	ldr	r3, [pc, #640]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011364:	f003 0303 	and.w	r3, r3, #3
 8011368:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801136a:	4b9e      	ldr	r3, [pc, #632]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801136e:	091b      	lsrs	r3, r3, #4
 8011370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011374:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8011376:	4b9b      	ldr	r3, [pc, #620]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801137a:	f003 0301 	and.w	r3, r3, #1
 801137e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011380:	4b98      	ldr	r3, [pc, #608]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011384:	08db      	lsrs	r3, r3, #3
 8011386:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801138a:	693a      	ldr	r2, [r7, #16]
 801138c:	fb02 f303 	mul.w	r3, r2, r3
 8011390:	ee07 3a90 	vmov	s15, r3
 8011394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011398:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f000 8111 	beq.w	80115c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	2b02      	cmp	r3, #2
 80113a8:	f000 8083 	beq.w	80114b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	2b02      	cmp	r3, #2
 80113b0:	f200 80a1 	bhi.w	80114f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d003      	beq.n	80113c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d056      	beq.n	801146e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80113c0:	e099      	b.n	80114f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113c2:	4b88      	ldr	r3, [pc, #544]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f003 0320 	and.w	r3, r3, #32
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d02d      	beq.n	801142a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80113ce:	4b85      	ldr	r3, [pc, #532]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	08db      	lsrs	r3, r3, #3
 80113d4:	f003 0303 	and.w	r3, r3, #3
 80113d8:	4a83      	ldr	r2, [pc, #524]	; (80115e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80113da:	fa22 f303 	lsr.w	r3, r2, r3
 80113de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	ee07 3a90 	vmov	s15, r3
 80113e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	ee07 3a90 	vmov	s15, r3
 80113f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80113f8:	4b7a      	ldr	r3, [pc, #488]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80113fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011400:	ee07 3a90 	vmov	s15, r3
 8011404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011408:	ed97 6a03 	vldr	s12, [r7, #12]
 801140c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80115ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801141c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011424:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011428:	e087      	b.n	801153a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	ee07 3a90 	vmov	s15, r3
 8011430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011434:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80115f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801143c:	4b69      	ldr	r3, [pc, #420]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011444:	ee07 3a90 	vmov	s15, r3
 8011448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801144c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011450:	eddf 5a66 	vldr	s11, [pc, #408]	; 80115ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801145c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011468:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801146c:	e065      	b.n	801153a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	ee07 3a90 	vmov	s15, r3
 8011474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011478:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80115f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801147c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011480:	4b58      	ldr	r3, [pc, #352]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011488:	ee07 3a90 	vmov	s15, r3
 801148c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011490:	ed97 6a03 	vldr	s12, [r7, #12]
 8011494:	eddf 5a55 	vldr	s11, [pc, #340]	; 80115ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801149c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80114b0:	e043      	b.n	801153a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	ee07 3a90 	vmov	s15, r3
 80114b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80115f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80114c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114c4:	4b47      	ldr	r3, [pc, #284]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114cc:	ee07 3a90 	vmov	s15, r3
 80114d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80114d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80115ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80114dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80114f4:	e021      	b.n	801153a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	ee07 3a90 	vmov	s15, r3
 80114fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011500:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80115f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011508:	4b36      	ldr	r3, [pc, #216]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801150c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011510:	ee07 3a90 	vmov	s15, r3
 8011514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011518:	ed97 6a03 	vldr	s12, [r7, #12]
 801151c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80115ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801152c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011534:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011538:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801153a:	4b2a      	ldr	r3, [pc, #168]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801153e:	0a5b      	lsrs	r3, r3, #9
 8011540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011544:	ee07 3a90 	vmov	s15, r3
 8011548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801154c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011554:	edd7 6a07 	vldr	s13, [r7, #28]
 8011558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801155c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011560:	ee17 2a90 	vmov	r2, s15
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011568:	4b1e      	ldr	r3, [pc, #120]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801156c:	0c1b      	lsrs	r3, r3, #16
 801156e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011572:	ee07 3a90 	vmov	s15, r3
 8011576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801157a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801157e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011582:	edd7 6a07 	vldr	s13, [r7, #28]
 8011586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801158a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801158e:	ee17 2a90 	vmov	r2, s15
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8011596:	4b13      	ldr	r3, [pc, #76]	; (80115e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801159a:	0e1b      	lsrs	r3, r3, #24
 801159c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115a0:	ee07 3a90 	vmov	s15, r3
 80115a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80115b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80115b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115bc:	ee17 2a90 	vmov	r2, s15
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80115c4:	e008      	b.n	80115d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2200      	movs	r2, #0
 80115d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2200      	movs	r2, #0
 80115d6:	609a      	str	r2, [r3, #8]
}
 80115d8:	bf00      	nop
 80115da:	3724      	adds	r7, #36	; 0x24
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr
 80115e4:	58024400 	.word	0x58024400
 80115e8:	03d09000 	.word	0x03d09000
 80115ec:	46000000 	.word	0x46000000
 80115f0:	4c742400 	.word	0x4c742400
 80115f4:	4a742400 	.word	0x4a742400
 80115f8:	4bbebc20 	.word	0x4bbebc20

080115fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b084      	sub	sp, #16
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011606:	2300      	movs	r3, #0
 8011608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801160a:	4b53      	ldr	r3, [pc, #332]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 801160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801160e:	f003 0303 	and.w	r3, r3, #3
 8011612:	2b03      	cmp	r3, #3
 8011614:	d101      	bne.n	801161a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011616:	2301      	movs	r3, #1
 8011618:	e099      	b.n	801174e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801161a:	4b4f      	ldr	r3, [pc, #316]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	4a4e      	ldr	r2, [pc, #312]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 8011620:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011626:	f7f4 fc03 	bl	8005e30 <HAL_GetTick>
 801162a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801162c:	e008      	b.n	8011640 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801162e:	f7f4 fbff 	bl	8005e30 <HAL_GetTick>
 8011632:	4602      	mov	r2, r0
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	1ad3      	subs	r3, r2, r3
 8011638:	2b02      	cmp	r3, #2
 801163a:	d901      	bls.n	8011640 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801163c:	2303      	movs	r3, #3
 801163e:	e086      	b.n	801174e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011640:	4b45      	ldr	r3, [pc, #276]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011648:	2b00      	cmp	r3, #0
 801164a:	d1f0      	bne.n	801162e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801164c:	4b42      	ldr	r3, [pc, #264]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 801164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011650:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	031b      	lsls	r3, r3, #12
 801165a:	493f      	ldr	r1, [pc, #252]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 801165c:	4313      	orrs	r3, r2
 801165e:	628b      	str	r3, [r1, #40]	; 0x28
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	3b01      	subs	r3, #1
 8011666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	689b      	ldr	r3, [r3, #8]
 801166e:	3b01      	subs	r3, #1
 8011670:	025b      	lsls	r3, r3, #9
 8011672:	b29b      	uxth	r3, r3
 8011674:	431a      	orrs	r2, r3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	68db      	ldr	r3, [r3, #12]
 801167a:	3b01      	subs	r3, #1
 801167c:	041b      	lsls	r3, r3, #16
 801167e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011682:	431a      	orrs	r2, r3
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	3b01      	subs	r3, #1
 801168a:	061b      	lsls	r3, r3, #24
 801168c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011690:	4931      	ldr	r1, [pc, #196]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 8011692:	4313      	orrs	r3, r2
 8011694:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011696:	4b30      	ldr	r3, [pc, #192]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 8011698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801169a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	695b      	ldr	r3, [r3, #20]
 80116a2:	492d      	ldr	r1, [pc, #180]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116a4:	4313      	orrs	r3, r2
 80116a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80116a8:	4b2b      	ldr	r3, [pc, #172]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ac:	f023 0220 	bic.w	r2, r3, #32
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	699b      	ldr	r3, [r3, #24]
 80116b4:	4928      	ldr	r1, [pc, #160]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116b6:	4313      	orrs	r3, r2
 80116b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80116ba:	4b27      	ldr	r3, [pc, #156]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116be:	4a26      	ldr	r2, [pc, #152]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116c0:	f023 0310 	bic.w	r3, r3, #16
 80116c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80116c6:	4b24      	ldr	r3, [pc, #144]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80116ca:	4b24      	ldr	r3, [pc, #144]	; (801175c <RCCEx_PLL2_Config+0x160>)
 80116cc:	4013      	ands	r3, r2
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	69d2      	ldr	r2, [r2, #28]
 80116d2:	00d2      	lsls	r2, r2, #3
 80116d4:	4920      	ldr	r1, [pc, #128]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116d6:	4313      	orrs	r3, r2
 80116d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80116da:	4b1f      	ldr	r3, [pc, #124]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116de:	4a1e      	ldr	r2, [pc, #120]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116e0:	f043 0310 	orr.w	r3, r3, #16
 80116e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d106      	bne.n	80116fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80116ec:	4b1a      	ldr	r3, [pc, #104]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f0:	4a19      	ldr	r2, [pc, #100]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 80116f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80116f8:	e00f      	b.n	801171a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d106      	bne.n	801170e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011700:	4b15      	ldr	r3, [pc, #84]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 8011702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011704:	4a14      	ldr	r2, [pc, #80]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 8011706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801170a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801170c:	e005      	b.n	801171a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801170e:	4b12      	ldr	r3, [pc, #72]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 8011710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011712:	4a11      	ldr	r2, [pc, #68]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 8011714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011718:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801171a:	4b0f      	ldr	r3, [pc, #60]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4a0e      	ldr	r2, [pc, #56]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 8011720:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011726:	f7f4 fb83 	bl	8005e30 <HAL_GetTick>
 801172a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801172c:	e008      	b.n	8011740 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801172e:	f7f4 fb7f 	bl	8005e30 <HAL_GetTick>
 8011732:	4602      	mov	r2, r0
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	2b02      	cmp	r3, #2
 801173a:	d901      	bls.n	8011740 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801173c:	2303      	movs	r3, #3
 801173e:	e006      	b.n	801174e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011740:	4b05      	ldr	r3, [pc, #20]	; (8011758 <RCCEx_PLL2_Config+0x15c>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011748:	2b00      	cmp	r3, #0
 801174a:	d0f0      	beq.n	801172e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801174c:	7bfb      	ldrb	r3, [r7, #15]
}
 801174e:	4618      	mov	r0, r3
 8011750:	3710      	adds	r7, #16
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	58024400 	.word	0x58024400
 801175c:	ffff0007 	.word	0xffff0007

08011760 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b084      	sub	sp, #16
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801176a:	2300      	movs	r3, #0
 801176c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801176e:	4b53      	ldr	r3, [pc, #332]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011772:	f003 0303 	and.w	r3, r3, #3
 8011776:	2b03      	cmp	r3, #3
 8011778:	d101      	bne.n	801177e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801177a:	2301      	movs	r3, #1
 801177c:	e099      	b.n	80118b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801177e:	4b4f      	ldr	r3, [pc, #316]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	4a4e      	ldr	r2, [pc, #312]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801178a:	f7f4 fb51 	bl	8005e30 <HAL_GetTick>
 801178e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011790:	e008      	b.n	80117a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011792:	f7f4 fb4d 	bl	8005e30 <HAL_GetTick>
 8011796:	4602      	mov	r2, r0
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	2b02      	cmp	r3, #2
 801179e:	d901      	bls.n	80117a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80117a0:	2303      	movs	r3, #3
 80117a2:	e086      	b.n	80118b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80117a4:	4b45      	ldr	r3, [pc, #276]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d1f0      	bne.n	8011792 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80117b0:	4b42      	ldr	r3, [pc, #264]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 80117b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	051b      	lsls	r3, r3, #20
 80117be:	493f      	ldr	r1, [pc, #252]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 80117c0:	4313      	orrs	r3, r2
 80117c2:	628b      	str	r3, [r1, #40]	; 0x28
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	3b01      	subs	r3, #1
 80117ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	689b      	ldr	r3, [r3, #8]
 80117d2:	3b01      	subs	r3, #1
 80117d4:	025b      	lsls	r3, r3, #9
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	431a      	orrs	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	3b01      	subs	r3, #1
 80117e0:	041b      	lsls	r3, r3, #16
 80117e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80117e6:	431a      	orrs	r2, r3
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	691b      	ldr	r3, [r3, #16]
 80117ec:	3b01      	subs	r3, #1
 80117ee:	061b      	lsls	r3, r3, #24
 80117f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80117f4:	4931      	ldr	r1, [pc, #196]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 80117f6:	4313      	orrs	r3, r2
 80117f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80117fa:	4b30      	ldr	r3, [pc, #192]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 80117fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	695b      	ldr	r3, [r3, #20]
 8011806:	492d      	ldr	r1, [pc, #180]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011808:	4313      	orrs	r3, r2
 801180a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801180c:	4b2b      	ldr	r3, [pc, #172]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 801180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011810:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	699b      	ldr	r3, [r3, #24]
 8011818:	4928      	ldr	r1, [pc, #160]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 801181a:	4313      	orrs	r3, r2
 801181c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801181e:	4b27      	ldr	r3, [pc, #156]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011822:	4a26      	ldr	r2, [pc, #152]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801182a:	4b24      	ldr	r3, [pc, #144]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 801182c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801182e:	4b24      	ldr	r3, [pc, #144]	; (80118c0 <RCCEx_PLL3_Config+0x160>)
 8011830:	4013      	ands	r3, r2
 8011832:	687a      	ldr	r2, [r7, #4]
 8011834:	69d2      	ldr	r2, [r2, #28]
 8011836:	00d2      	lsls	r2, r2, #3
 8011838:	4920      	ldr	r1, [pc, #128]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 801183a:	4313      	orrs	r3, r2
 801183c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801183e:	4b1f      	ldr	r3, [pc, #124]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011842:	4a1e      	ldr	r2, [pc, #120]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011848:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d106      	bne.n	801185e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011850:	4b1a      	ldr	r3, [pc, #104]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011854:	4a19      	ldr	r2, [pc, #100]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011856:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801185a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801185c:	e00f      	b.n	801187e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	2b01      	cmp	r3, #1
 8011862:	d106      	bne.n	8011872 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011864:	4b15      	ldr	r3, [pc, #84]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011868:	4a14      	ldr	r2, [pc, #80]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 801186a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801186e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011870:	e005      	b.n	801187e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011872:	4b12      	ldr	r3, [pc, #72]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011876:	4a11      	ldr	r2, [pc, #68]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801187c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801187e:	4b0f      	ldr	r3, [pc, #60]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	4a0e      	ldr	r2, [pc, #56]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 8011884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801188a:	f7f4 fad1 	bl	8005e30 <HAL_GetTick>
 801188e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011890:	e008      	b.n	80118a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011892:	f7f4 facd 	bl	8005e30 <HAL_GetTick>
 8011896:	4602      	mov	r2, r0
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	2b02      	cmp	r3, #2
 801189e:	d901      	bls.n	80118a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80118a0:	2303      	movs	r3, #3
 80118a2:	e006      	b.n	80118b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80118a4:	4b05      	ldr	r3, [pc, #20]	; (80118bc <RCCEx_PLL3_Config+0x15c>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d0f0      	beq.n	8011892 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80118b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3710      	adds	r7, #16
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	bf00      	nop
 80118bc:	58024400 	.word	0x58024400
 80118c0:	ffff0007 	.word	0xffff0007

080118c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80118cc:	2301      	movs	r3, #1
 80118ce:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d071      	beq.n	80119ba <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80118dc:	b2db      	uxtb	r3, r3
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d106      	bne.n	80118f0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2200      	movs	r2, #0
 80118e6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7f2 faf4 	bl	8003ed8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2202      	movs	r2, #2
 80118f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	68db      	ldr	r3, [r3, #12]
 80118fe:	f003 0310 	and.w	r3, r3, #16
 8011902:	2b10      	cmp	r3, #16
 8011904:	d050      	beq.n	80119a8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	22ca      	movs	r2, #202	; 0xca
 801190c:	625a      	str	r2, [r3, #36]	; 0x24
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2253      	movs	r2, #83	; 0x53
 8011914:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 fa4a 	bl	8011db0 <RTC_EnterInitMode>
 801191c:	4603      	mov	r3, r0
 801191e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011920:	7bfb      	ldrb	r3, [r7, #15]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d124      	bne.n	8011970 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	6899      	ldr	r1, [r3, #8]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	4b24      	ldr	r3, [pc, #144]	; (80119c4 <HAL_RTC_Init+0x100>)
 8011932:	400b      	ands	r3, r1
 8011934:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	6899      	ldr	r1, [r3, #8]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	685a      	ldr	r2, [r3, #4]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	691b      	ldr	r3, [r3, #16]
 8011944:	431a      	orrs	r2, r3
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	699b      	ldr	r3, [r3, #24]
 801194a:	431a      	orrs	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	430a      	orrs	r2, r1
 8011952:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	689b      	ldr	r3, [r3, #8]
 8011958:	0419      	lsls	r1, r3, #16
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	68da      	ldr	r2, [r3, #12]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	430a      	orrs	r2, r1
 8011964:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f000 fa56 	bl	8011e18 <RTC_ExitInitMode>
 801196c:	4603      	mov	r3, r0
 801196e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011970:	7bfb      	ldrb	r3, [r7, #15]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d113      	bne.n	801199e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	f022 0203 	bic.w	r2, r2, #3
 8011984:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	69da      	ldr	r2, [r3, #28]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	695b      	ldr	r3, [r3, #20]
 8011994:	431a      	orrs	r2, r3
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	430a      	orrs	r2, r1
 801199c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	22ff      	movs	r2, #255	; 0xff
 80119a4:	625a      	str	r2, [r3, #36]	; 0x24
 80119a6:	e001      	b.n	80119ac <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80119a8:	2300      	movs	r3, #0
 80119aa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80119ac:	7bfb      	ldrb	r3, [r7, #15]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d103      	bne.n	80119ba <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2201      	movs	r2, #1
 80119b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80119ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3710      	adds	r7, #16
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	ff8fffbf 	.word	0xff8fffbf

080119c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80119c8:	b590      	push	{r4, r7, lr}
 80119ca:	b087      	sub	sp, #28
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d101      	bne.n	80119e2 <HAL_RTC_SetTime+0x1a>
 80119de:	2302      	movs	r3, #2
 80119e0:	e089      	b.n	8011af6 <HAL_RTC_SetTime+0x12e>
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2201      	movs	r2, #1
 80119e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	2202      	movs	r2, #2
 80119ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	22ca      	movs	r2, #202	; 0xca
 80119f8:	625a      	str	r2, [r3, #36]	; 0x24
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2253      	movs	r2, #83	; 0x53
 8011a00:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011a02:	68f8      	ldr	r0, [r7, #12]
 8011a04:	f000 f9d4 	bl	8011db0 <RTC_EnterInitMode>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011a0c:	7cfb      	ldrb	r3, [r7, #19]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d161      	bne.n	8011ad6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d126      	bne.n	8011a66 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	689b      	ldr	r3, [r3, #8]
 8011a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d102      	bne.n	8011a2c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f000 fa2f 	bl	8011e94 <RTC_ByteToBcd2>
 8011a36:	4603      	mov	r3, r0
 8011a38:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	785b      	ldrb	r3, [r3, #1]
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f000 fa28 	bl	8011e94 <RTC_ByteToBcd2>
 8011a44:	4603      	mov	r3, r0
 8011a46:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a48:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	789b      	ldrb	r3, [r3, #2]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f000 fa20 	bl	8011e94 <RTC_ByteToBcd2>
 8011a54:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011a56:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	78db      	ldrb	r3, [r3, #3]
 8011a5e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a60:	4313      	orrs	r3, r2
 8011a62:	617b      	str	r3, [r7, #20]
 8011a64:	e018      	b.n	8011a98 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	689b      	ldr	r3, [r3, #8]
 8011a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d102      	bne.n	8011a7a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	2200      	movs	r2, #0
 8011a78:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	781b      	ldrb	r3, [r3, #0]
 8011a7e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	785b      	ldrb	r3, [r3, #1]
 8011a84:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a86:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011a88:	68ba      	ldr	r2, [r7, #8]
 8011a8a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011a8c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	78db      	ldrb	r3, [r3, #3]
 8011a92:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011a94:	4313      	orrs	r3, r2
 8011a96:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	6979      	ldr	r1, [r7, #20]
 8011a9e:	4b18      	ldr	r3, [pc, #96]	; (8011b00 <HAL_RTC_SetTime+0x138>)
 8011aa0:	400b      	ands	r3, r1
 8011aa2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	689a      	ldr	r2, [r3, #8]
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011ab2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	6899      	ldr	r1, [r3, #8]
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	68da      	ldr	r2, [r3, #12]
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	691b      	ldr	r3, [r3, #16]
 8011ac2:	431a      	orrs	r2, r3
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	430a      	orrs	r2, r1
 8011aca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011acc:	68f8      	ldr	r0, [r7, #12]
 8011ace:	f000 f9a3 	bl	8011e18 <RTC_ExitInitMode>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	22ff      	movs	r2, #255	; 0xff
 8011adc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011ade:	7cfb      	ldrb	r3, [r7, #19]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d103      	bne.n	8011aec <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2200      	movs	r2, #0
 8011af0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011af4:	7cfb      	ldrb	r3, [r7, #19]
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	371c      	adds	r7, #28
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd90      	pop	{r4, r7, pc}
 8011afe:	bf00      	nop
 8011b00:	007f7f7f 	.word	0x007f7f7f

08011b04 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b086      	sub	sp, #24
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	60f8      	str	r0, [r7, #12]
 8011b0c:	60b9      	str	r1, [r7, #8]
 8011b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	691b      	ldr	r3, [r3, #16]
 8011b20:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	4b22      	ldr	r3, [pc, #136]	; (8011bb8 <HAL_RTC_GetTime+0xb4>)
 8011b30:	4013      	ands	r3, r2
 8011b32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	0c1b      	lsrs	r3, r3, #16
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011b3e:	b2da      	uxtb	r2, r3
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	0a1b      	lsrs	r3, r3, #8
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b4e:	b2da      	uxtb	r2, r3
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b5c:	b2da      	uxtb	r2, r3
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	0d9b      	lsrs	r3, r3, #22
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	f003 0301 	and.w	r3, r3, #1
 8011b6c:	b2da      	uxtb	r2, r3
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d11a      	bne.n	8011bae <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f000 f9a9 	bl	8011ed4 <RTC_Bcd2ToByte>
 8011b82:	4603      	mov	r3, r0
 8011b84:	461a      	mov	r2, r3
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	785b      	ldrb	r3, [r3, #1]
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f000 f9a0 	bl	8011ed4 <RTC_Bcd2ToByte>
 8011b94:	4603      	mov	r3, r0
 8011b96:	461a      	mov	r2, r3
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	789b      	ldrb	r3, [r3, #2]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f000 f997 	bl	8011ed4 <RTC_Bcd2ToByte>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	461a      	mov	r2, r3
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011bae:	2300      	movs	r3, #0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3718      	adds	r7, #24
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	007f7f7f 	.word	0x007f7f7f

08011bbc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011bbc:	b590      	push	{r4, r7, lr}
 8011bbe:	b087      	sub	sp, #28
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	60f8      	str	r0, [r7, #12]
 8011bc4:	60b9      	str	r1, [r7, #8]
 8011bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011bce:	2b01      	cmp	r3, #1
 8011bd0:	d101      	bne.n	8011bd6 <HAL_RTC_SetDate+0x1a>
 8011bd2:	2302      	movs	r3, #2
 8011bd4:	e073      	b.n	8011cbe <HAL_RTC_SetDate+0x102>
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	2201      	movs	r2, #1
 8011bda:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2202      	movs	r2, #2
 8011be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d10e      	bne.n	8011c0a <HAL_RTC_SetDate+0x4e>
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	785b      	ldrb	r3, [r3, #1]
 8011bf0:	f003 0310 	and.w	r3, r3, #16
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d008      	beq.n	8011c0a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	785b      	ldrb	r3, [r3, #1]
 8011bfc:	f023 0310 	bic.w	r3, r3, #16
 8011c00:	b2db      	uxtb	r3, r3
 8011c02:	330a      	adds	r3, #10
 8011c04:	b2da      	uxtb	r2, r3
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d11c      	bne.n	8011c4a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	78db      	ldrb	r3, [r3, #3]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f000 f93d 	bl	8011e94 <RTC_ByteToBcd2>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	785b      	ldrb	r3, [r3, #1]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f000 f936 	bl	8011e94 <RTC_ByteToBcd2>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011c2c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	789b      	ldrb	r3, [r3, #2]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f000 f92e 	bl	8011e94 <RTC_ByteToBcd2>
 8011c38:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011c3a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011c44:	4313      	orrs	r3, r2
 8011c46:	617b      	str	r3, [r7, #20]
 8011c48:	e00e      	b.n	8011c68 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	78db      	ldrb	r3, [r3, #3]
 8011c4e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	785b      	ldrb	r3, [r3, #1]
 8011c54:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011c56:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8011c58:	68ba      	ldr	r2, [r7, #8]
 8011c5a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011c5c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011c64:	4313      	orrs	r3, r2
 8011c66:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	22ca      	movs	r2, #202	; 0xca
 8011c6e:	625a      	str	r2, [r3, #36]	; 0x24
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2253      	movs	r2, #83	; 0x53
 8011c76:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011c78:	68f8      	ldr	r0, [r7, #12]
 8011c7a:	f000 f899 	bl	8011db0 <RTC_EnterInitMode>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011c82:	7cfb      	ldrb	r3, [r7, #19]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d10a      	bne.n	8011c9e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	6979      	ldr	r1, [r7, #20]
 8011c8e:	4b0e      	ldr	r3, [pc, #56]	; (8011cc8 <HAL_RTC_SetDate+0x10c>)
 8011c90:	400b      	ands	r3, r1
 8011c92:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011c94:	68f8      	ldr	r0, [r7, #12]
 8011c96:	f000 f8bf 	bl	8011e18 <RTC_ExitInitMode>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	22ff      	movs	r2, #255	; 0xff
 8011ca4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011ca6:	7cfb      	ldrb	r3, [r7, #19]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d103      	bne.n	8011cb4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	2201      	movs	r2, #1
 8011cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011cbc:	7cfb      	ldrb	r3, [r7, #19]


}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	371c      	adds	r7, #28
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd90      	pop	{r4, r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	00ffff3f 	.word	0x00ffff3f

08011ccc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b086      	sub	sp, #24
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	685a      	ldr	r2, [r3, #4]
 8011cde:	4b21      	ldr	r3, [pc, #132]	; (8011d64 <HAL_RTC_GetDate+0x98>)
 8011ce0:	4013      	ands	r3, r2
 8011ce2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	0c1b      	lsrs	r3, r3, #16
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	0a1b      	lsrs	r3, r3, #8
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	f003 031f 	and.w	r3, r3, #31
 8011cf8:	b2da      	uxtb	r2, r3
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011d06:	b2da      	uxtb	r2, r3
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	0b5b      	lsrs	r3, r3, #13
 8011d10:	b2db      	uxtb	r3, r3
 8011d12:	f003 0307 	and.w	r3, r3, #7
 8011d16:	b2da      	uxtb	r2, r3
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d11a      	bne.n	8011d58 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	78db      	ldrb	r3, [r3, #3]
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 f8d4 	bl	8011ed4 <RTC_Bcd2ToByte>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	461a      	mov	r2, r3
 8011d30:	68bb      	ldr	r3, [r7, #8]
 8011d32:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	785b      	ldrb	r3, [r3, #1]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f000 f8cb 	bl	8011ed4 <RTC_Bcd2ToByte>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	461a      	mov	r2, r3
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	789b      	ldrb	r3, [r3, #2]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f000 f8c2 	bl	8011ed4 <RTC_Bcd2ToByte>
 8011d50:	4603      	mov	r3, r0
 8011d52:	461a      	mov	r2, r3
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011d58:	2300      	movs	r3, #0
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3718      	adds	r7, #24
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	00ffff3f 	.word	0x00ffff3f

08011d68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	4a0d      	ldr	r2, [pc, #52]	; (8011dac <HAL_RTC_WaitForSynchro+0x44>)
 8011d76:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8011d78:	f7f4 f85a 	bl	8005e30 <HAL_GetTick>
 8011d7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011d7e:	e009      	b.n	8011d94 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011d80:	f7f4 f856 	bl	8005e30 <HAL_GetTick>
 8011d84:	4602      	mov	r2, r0
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	1ad3      	subs	r3, r2, r3
 8011d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011d8e:	d901      	bls.n	8011d94 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8011d90:	2303      	movs	r3, #3
 8011d92:	e007      	b.n	8011da4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	68db      	ldr	r3, [r3, #12]
 8011d9a:	f003 0320 	and.w	r3, r3, #32
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d0ee      	beq.n	8011d80 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011da2:	2300      	movs	r3, #0
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	0003ff5f 	.word	0x0003ff5f

08011db0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b084      	sub	sp, #16
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011db8:	2300      	movs	r3, #0
 8011dba:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d120      	bne.n	8011e0c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011dd2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011dd4:	f7f4 f82c 	bl	8005e30 <HAL_GetTick>
 8011dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011dda:	e00d      	b.n	8011df8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011ddc:	f7f4 f828 	bl	8005e30 <HAL_GetTick>
 8011de0:	4602      	mov	r2, r0
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	1ad3      	subs	r3, r2, r3
 8011de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011dea:	d905      	bls.n	8011df8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011dec:	2303      	movs	r3, #3
 8011dee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2203      	movs	r2, #3
 8011df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	68db      	ldr	r3, [r3, #12]
 8011dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d102      	bne.n	8011e0c <RTC_EnterInitMode+0x5c>
 8011e06:	7bfb      	ldrb	r3, [r7, #15]
 8011e08:	2b03      	cmp	r3, #3
 8011e0a:	d1e7      	bne.n	8011ddc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3710      	adds	r7, #16
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
	...

08011e18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011e20:	2300      	movs	r3, #0
 8011e22:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011e24:	4b1a      	ldr	r3, [pc, #104]	; (8011e90 <RTC_ExitInitMode+0x78>)
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	4a19      	ldr	r2, [pc, #100]	; (8011e90 <RTC_ExitInitMode+0x78>)
 8011e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e2e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011e30:	4b17      	ldr	r3, [pc, #92]	; (8011e90 <RTC_ExitInitMode+0x78>)
 8011e32:	689b      	ldr	r3, [r3, #8]
 8011e34:	f003 0320 	and.w	r3, r3, #32
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d10c      	bne.n	8011e56 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f7ff ff93 	bl	8011d68 <HAL_RTC_WaitForSynchro>
 8011e42:	4603      	mov	r3, r0
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d01e      	beq.n	8011e86 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2203      	movs	r2, #3
 8011e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011e50:	2303      	movs	r3, #3
 8011e52:	73fb      	strb	r3, [r7, #15]
 8011e54:	e017      	b.n	8011e86 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011e56:	4b0e      	ldr	r3, [pc, #56]	; (8011e90 <RTC_ExitInitMode+0x78>)
 8011e58:	689b      	ldr	r3, [r3, #8]
 8011e5a:	4a0d      	ldr	r2, [pc, #52]	; (8011e90 <RTC_ExitInitMode+0x78>)
 8011e5c:	f023 0320 	bic.w	r3, r3, #32
 8011e60:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f7ff ff80 	bl	8011d68 <HAL_RTC_WaitForSynchro>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d005      	beq.n	8011e7a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2203      	movs	r2, #3
 8011e72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011e76:	2303      	movs	r3, #3
 8011e78:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011e7a:	4b05      	ldr	r3, [pc, #20]	; (8011e90 <RTC_ExitInitMode+0x78>)
 8011e7c:	689b      	ldr	r3, [r3, #8]
 8011e7e:	4a04      	ldr	r2, [pc, #16]	; (8011e90 <RTC_ExitInitMode+0x78>)
 8011e80:	f043 0320 	orr.w	r3, r3, #32
 8011e84:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3710      	adds	r7, #16
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	58004000 	.word	0x58004000

08011e94 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b085      	sub	sp, #20
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011ea2:	79fb      	ldrb	r3, [r7, #7]
 8011ea4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011ea6:	e005      	b.n	8011eb4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	3301      	adds	r3, #1
 8011eac:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011eae:	7afb      	ldrb	r3, [r7, #11]
 8011eb0:	3b0a      	subs	r3, #10
 8011eb2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011eb4:	7afb      	ldrb	r3, [r7, #11]
 8011eb6:	2b09      	cmp	r3, #9
 8011eb8:	d8f6      	bhi.n	8011ea8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	011b      	lsls	r3, r3, #4
 8011ec0:	b2da      	uxtb	r2, r3
 8011ec2:	7afb      	ldrb	r3, [r7, #11]
 8011ec4:	4313      	orrs	r3, r2
 8011ec6:	b2db      	uxtb	r3, r3
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3714      	adds	r7, #20
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr

08011ed4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b085      	sub	sp, #20
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	4603      	mov	r3, r0
 8011edc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011ede:	79fb      	ldrb	r3, [r7, #7]
 8011ee0:	091b      	lsrs	r3, r3, #4
 8011ee2:	b2db      	uxtb	r3, r3
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	0092      	lsls	r2, r2, #2
 8011ee8:	4413      	add	r3, r2
 8011eea:	005b      	lsls	r3, r3, #1
 8011eec:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011eee:	79fb      	ldrb	r3, [r7, #7]
 8011ef0:	f003 030f 	and.w	r3, r3, #15
 8011ef4:	b2da      	uxtb	r2, r3
 8011ef6:	7bfb      	ldrb	r3, [r7, #15]
 8011ef8:	4413      	add	r3, r2
 8011efa:	b2db      	uxtb	r3, r3
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3714      	adds	r7, #20
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr

08011f08 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d101      	bne.n	8011f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011f16:	2301      	movs	r3, #1
 8011f18:	e10f      	b.n	801213a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	4a87      	ldr	r2, [pc, #540]	; (8012144 <HAL_SPI_Init+0x23c>)
 8011f26:	4293      	cmp	r3, r2
 8011f28:	d00f      	beq.n	8011f4a <HAL_SPI_Init+0x42>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	4a86      	ldr	r2, [pc, #536]	; (8012148 <HAL_SPI_Init+0x240>)
 8011f30:	4293      	cmp	r3, r2
 8011f32:	d00a      	beq.n	8011f4a <HAL_SPI_Init+0x42>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	4a84      	ldr	r2, [pc, #528]	; (801214c <HAL_SPI_Init+0x244>)
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d005      	beq.n	8011f4a <HAL_SPI_Init+0x42>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	2b0f      	cmp	r3, #15
 8011f44:	d901      	bls.n	8011f4a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011f46:	2301      	movs	r3, #1
 8011f48:	e0f7      	b.n	801213a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f000 fd60 	bl	8012a10 <SPI_GetPacketSize>
 8011f50:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	4a7b      	ldr	r2, [pc, #492]	; (8012144 <HAL_SPI_Init+0x23c>)
 8011f58:	4293      	cmp	r3, r2
 8011f5a:	d00c      	beq.n	8011f76 <HAL_SPI_Init+0x6e>
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	4a79      	ldr	r2, [pc, #484]	; (8012148 <HAL_SPI_Init+0x240>)
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d007      	beq.n	8011f76 <HAL_SPI_Init+0x6e>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	4a78      	ldr	r2, [pc, #480]	; (801214c <HAL_SPI_Init+0x244>)
 8011f6c:	4293      	cmp	r3, r2
 8011f6e:	d002      	beq.n	8011f76 <HAL_SPI_Init+0x6e>
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2b08      	cmp	r3, #8
 8011f74:	d811      	bhi.n	8011f9a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011f7a:	4a72      	ldr	r2, [pc, #456]	; (8012144 <HAL_SPI_Init+0x23c>)
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d009      	beq.n	8011f94 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4a70      	ldr	r2, [pc, #448]	; (8012148 <HAL_SPI_Init+0x240>)
 8011f86:	4293      	cmp	r3, r2
 8011f88:	d004      	beq.n	8011f94 <HAL_SPI_Init+0x8c>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	4a6f      	ldr	r2, [pc, #444]	; (801214c <HAL_SPI_Init+0x244>)
 8011f90:	4293      	cmp	r3, r2
 8011f92:	d104      	bne.n	8011f9e <HAL_SPI_Init+0x96>
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2b10      	cmp	r3, #16
 8011f98:	d901      	bls.n	8011f9e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	e0cd      	b.n	801213a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d106      	bne.n	8011fb8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2200      	movs	r2, #0
 8011fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f7f2 fa14 	bl	80043e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2202      	movs	r2, #2
 8011fbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	681a      	ldr	r2, [r3, #0]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	f022 0201 	bic.w	r2, r2, #1
 8011fce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	689b      	ldr	r3, [r3, #8]
 8011fd6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011fda:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	699b      	ldr	r3, [r3, #24]
 8011fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011fe4:	d119      	bne.n	801201a <HAL_SPI_Init+0x112>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011fee:	d103      	bne.n	8011ff8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d008      	beq.n	801200a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d10c      	bne.n	801201a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8012004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012008:	d107      	bne.n	801201a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012018:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012022:	2b00      	cmp	r3, #0
 8012024:	d00f      	beq.n	8012046 <HAL_SPI_Init+0x13e>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	2b06      	cmp	r3, #6
 801202c:	d90b      	bls.n	8012046 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	430a      	orrs	r2, r1
 8012042:	601a      	str	r2, [r3, #0]
 8012044:	e007      	b.n	8012056 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	681a      	ldr	r2, [r3, #0]
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012054:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	69da      	ldr	r2, [r3, #28]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801205e:	431a      	orrs	r2, r3
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	431a      	orrs	r2, r3
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012068:	ea42 0103 	orr.w	r1, r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	68da      	ldr	r2, [r3, #12]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	430a      	orrs	r2, r1
 8012076:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012080:	431a      	orrs	r2, r3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012086:	431a      	orrs	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	699b      	ldr	r3, [r3, #24]
 801208c:	431a      	orrs	r2, r3
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	691b      	ldr	r3, [r3, #16]
 8012092:	431a      	orrs	r2, r3
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	695b      	ldr	r3, [r3, #20]
 8012098:	431a      	orrs	r2, r3
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6a1b      	ldr	r3, [r3, #32]
 801209e:	431a      	orrs	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	431a      	orrs	r2, r3
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120aa:	431a      	orrs	r2, r3
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	689b      	ldr	r3, [r3, #8]
 80120b0:	431a      	orrs	r2, r3
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80120b6:	ea42 0103 	orr.w	r1, r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	430a      	orrs	r2, r1
 80120c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	685b      	ldr	r3, [r3, #4]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d113      	bne.n	80120f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	689b      	ldr	r3, [r3, #8]
 80120d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80120e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	689b      	ldr	r3, [r3, #8]
 80120e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80120f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f022 0201 	bic.w	r2, r2, #1
 8012104:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00a      	beq.n	8012128 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	430a      	orrs	r2, r1
 8012126:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2200      	movs	r2, #0
 801212c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2201      	movs	r2, #1
 8012134:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8012138:	2300      	movs	r3, #0
}
 801213a:	4618      	mov	r0, r3
 801213c:	3710      	adds	r7, #16
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	40013000 	.word	0x40013000
 8012148:	40003800 	.word	0x40003800
 801214c:	40003c00 	.word	0x40003c00

08012150 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	60f8      	str	r0, [r7, #12]
 8012158:	60b9      	str	r1, [r7, #8]
 801215a:	4613      	mov	r3, r2
 801215c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012164:	b2db      	uxtb	r3, r3
 8012166:	2b01      	cmp	r3, #1
 8012168:	d005      	beq.n	8012176 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2200      	movs	r2, #0
 801216e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8012172:	2302      	movs	r3, #2
 8012174:	e127      	b.n	80123c6 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d002      	beq.n	8012182 <HAL_SPI_Receive_DMA+0x32>
 801217c:	88fb      	ldrh	r3, [r7, #6]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d105      	bne.n	801218e <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	2200      	movs	r2, #0
 8012186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 801218a:	2301      	movs	r3, #1
 801218c:	e11b      	b.n	80123c6 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012194:	2b01      	cmp	r3, #1
 8012196:	d101      	bne.n	801219c <HAL_SPI_Receive_DMA+0x4c>
 8012198:	2302      	movs	r3, #2
 801219a:	e114      	b.n	80123c6 <HAL_SPI_Receive_DMA+0x276>
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2201      	movs	r2, #1
 80121a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2204      	movs	r2, #4
 80121a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	2200      	movs	r2, #0
 80121b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	68ba      	ldr	r2, [r7, #8]
 80121b8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	88fa      	ldrh	r2, [r7, #6]
 80121be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	88fa      	ldrh	r2, [r7, #6]
 80121c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2200      	movs	r2, #0
 80121ce:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2200      	movs	r2, #0
 80121d4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2200      	movs	r2, #0
 80121da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2200      	movs	r2, #0
 80121e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	689b      	ldr	r3, [r3, #8]
 80121ea:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80121ee:	d108      	bne.n	8012202 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80121fe:	601a      	str	r2, [r3, #0]
 8012200:	e009      	b.n	8012216 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8012214:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	2b0f      	cmp	r3, #15
 801221c:	d905      	bls.n	801222a <HAL_SPI_Receive_DMA+0xda>
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012222:	699b      	ldr	r3, [r3, #24]
 8012224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012228:	d10f      	bne.n	801224a <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801222e:	2b07      	cmp	r3, #7
 8012230:	d911      	bls.n	8012256 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012236:	699b      	ldr	r3, [r3, #24]
 8012238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801223c:	d00b      	beq.n	8012256 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012242:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012248:	d005      	beq.n	8012256 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2200      	movs	r2, #0
 801224e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8012252:	2301      	movs	r3, #1
 8012254:	e0b7      	b.n	80123c6 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	689a      	ldr	r2, [r3, #8]
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012264:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	68db      	ldr	r3, [r3, #12]
 801226a:	2b07      	cmp	r3, #7
 801226c:	d820      	bhi.n	80122b0 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012272:	699b      	ldr	r3, [r3, #24]
 8012274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012278:	d109      	bne.n	801228e <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012280:	b29b      	uxth	r3, r3
 8012282:	3301      	adds	r3, #1
 8012284:	105b      	asrs	r3, r3, #1
 8012286:	b29a      	uxth	r2, r3
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012292:	699b      	ldr	r3, [r3, #24]
 8012294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012298:	d11e      	bne.n	80122d8 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	3303      	adds	r3, #3
 80122a4:	109b      	asrs	r3, r3, #2
 80122a6:	b29a      	uxth	r2, r3
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80122ae:	e013      	b.n	80122d8 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	2b0f      	cmp	r3, #15
 80122b6:	d80f      	bhi.n	80122d8 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122bc:	699b      	ldr	r3, [r3, #24]
 80122be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80122c2:	d109      	bne.n	80122d8 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	3301      	adds	r3, #1
 80122ce:	105b      	asrs	r3, r3, #1
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122dc:	4a3c      	ldr	r2, [pc, #240]	; (80123d0 <HAL_SPI_Receive_DMA+0x280>)
 80122de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122e4:	4a3b      	ldr	r2, [pc, #236]	; (80123d4 <HAL_SPI_Receive_DMA+0x284>)
 80122e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122ec:	4a3a      	ldr	r2, [pc, #232]	; (80123d8 <HAL_SPI_Receive_DMA+0x288>)
 80122ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122f4:	2200      	movs	r2, #0
 80122f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	3330      	adds	r3, #48	; 0x30
 8012302:	4619      	mov	r1, r3
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012308:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012310:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8012312:	f7f6 fa11 	bl	8008738 <HAL_DMA_Start_IT>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d011      	beq.n	8012340 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012322:	f043 0210 	orr.w	r2, r3, #16
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2201      	movs	r2, #1
 8012330:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2200      	movs	r2, #0
 8012338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 801233c:	2301      	movs	r3, #1
 801233e:	e042      	b.n	80123c6 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012344:	69db      	ldr	r3, [r3, #28]
 8012346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801234a:	d108      	bne.n	801235e <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	6859      	ldr	r1, [r3, #4]
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	681a      	ldr	r2, [r3, #0]
 8012356:	4b21      	ldr	r3, [pc, #132]	; (80123dc <HAL_SPI_Receive_DMA+0x28c>)
 8012358:	400b      	ands	r3, r1
 801235a:	6053      	str	r3, [r2, #4]
 801235c:	e009      	b.n	8012372 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	685a      	ldr	r2, [r3, #4]
 8012364:	4b1d      	ldr	r3, [pc, #116]	; (80123dc <HAL_SPI_Receive_DMA+0x28c>)
 8012366:	4013      	ands	r3, r2
 8012368:	88f9      	ldrh	r1, [r7, #6]
 801236a:	68fa      	ldr	r2, [r7, #12]
 801236c:	6812      	ldr	r2, [r2, #0]
 801236e:	430b      	orrs	r3, r1
 8012370:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	689a      	ldr	r2, [r3, #8]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012380:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	691a      	ldr	r2, [r3, #16]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8012390:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	f042 0201 	orr.w	r2, r2, #1
 80123a0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	685b      	ldr	r3, [r3, #4]
 80123a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80123aa:	d107      	bne.n	80123bc <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	681a      	ldr	r2, [r3, #0]
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80123ba:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	2200      	movs	r2, #0
 80123c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80123c4:	2300      	movs	r3, #0
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3710      	adds	r7, #16
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	0801283b 	.word	0x0801283b
 80123d4:	080127f5 	.word	0x080127f5
 80123d8:	08012857 	.word	0x08012857
 80123dc:	ffff0000 	.word	0xffff0000

080123e0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b08a      	sub	sp, #40	; 0x28
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	691b      	ldr	r3, [r3, #16]
 80123ee:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	695b      	ldr	r3, [r3, #20]
 80123f6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80123f8:	6a3a      	ldr	r2, [r7, #32]
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	4013      	ands	r3, r2
 80123fe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	689b      	ldr	r3, [r3, #8]
 8012406:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8012408:	2300      	movs	r3, #0
 801240a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012412:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	3330      	adds	r3, #48	; 0x30
 801241a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012422:	2b00      	cmp	r3, #0
 8012424:	d010      	beq.n	8012448 <HAL_SPI_IRQHandler+0x68>
 8012426:	6a3b      	ldr	r3, [r7, #32]
 8012428:	f003 0308 	and.w	r3, r3, #8
 801242c:	2b00      	cmp	r3, #0
 801242e:	d00b      	beq.n	8012448 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	699a      	ldr	r2, [r3, #24]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801243e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f000 f9cd 	bl	80127e0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8012446:	e192      	b.n	801276e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012448:	69bb      	ldr	r3, [r7, #24]
 801244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801244e:	2b00      	cmp	r3, #0
 8012450:	d113      	bne.n	801247a <HAL_SPI_IRQHandler+0x9a>
 8012452:	69bb      	ldr	r3, [r7, #24]
 8012454:	f003 0320 	and.w	r3, r3, #32
 8012458:	2b00      	cmp	r3, #0
 801245a:	d10e      	bne.n	801247a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012462:	2b00      	cmp	r3, #0
 8012464:	d009      	beq.n	801247a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	4798      	blx	r3
    handled = 1UL;
 8012476:	2301      	movs	r3, #1
 8012478:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801247a:	69bb      	ldr	r3, [r7, #24]
 801247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012480:	2b00      	cmp	r3, #0
 8012482:	d10f      	bne.n	80124a4 <HAL_SPI_IRQHandler+0xc4>
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	f003 0301 	and.w	r3, r3, #1
 801248a:	2b00      	cmp	r3, #0
 801248c:	d00a      	beq.n	80124a4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801248e:	69bb      	ldr	r3, [r7, #24]
 8012490:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012494:	2b00      	cmp	r3, #0
 8012496:	d105      	bne.n	80124a4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	4798      	blx	r3
    handled = 1UL;
 80124a0:	2301      	movs	r3, #1
 80124a2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80124a4:	69bb      	ldr	r3, [r7, #24]
 80124a6:	f003 0320 	and.w	r3, r3, #32
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d10f      	bne.n	80124ce <HAL_SPI_IRQHandler+0xee>
 80124ae:	69bb      	ldr	r3, [r7, #24]
 80124b0:	f003 0302 	and.w	r3, r3, #2
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00a      	beq.n	80124ce <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80124b8:	69bb      	ldr	r3, [r7, #24]
 80124ba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d105      	bne.n	80124ce <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	4798      	blx	r3
    handled = 1UL;
 80124ca:	2301      	movs	r3, #1
 80124cc:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80124ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	f040 8147 	bne.w	8012764 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80124d6:	69bb      	ldr	r3, [r7, #24]
 80124d8:	f003 0308 	and.w	r3, r3, #8
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f000 808b 	beq.w	80125f8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	699a      	ldr	r2, [r3, #24]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f042 0208 	orr.w	r2, r2, #8
 80124f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	699a      	ldr	r2, [r3, #24]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f042 0210 	orr.w	r2, r2, #16
 8012500:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	699a      	ldr	r2, [r3, #24]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012510:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	691a      	ldr	r2, [r3, #16]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	f022 0208 	bic.w	r2, r2, #8
 8012520:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	689b      	ldr	r3, [r3, #8]
 8012528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801252c:	2b00      	cmp	r3, #0
 801252e:	d13d      	bne.n	80125ac <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012530:	e036      	b.n	80125a0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	68db      	ldr	r3, [r3, #12]
 8012536:	2b0f      	cmp	r3, #15
 8012538:	d90b      	bls.n	8012552 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012542:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012544:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801254a:	1d1a      	adds	r2, r3, #4
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	665a      	str	r2, [r3, #100]	; 0x64
 8012550:	e01d      	b.n	801258e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	2b07      	cmp	r3, #7
 8012558:	d90b      	bls.n	8012572 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801255e:	68fa      	ldr	r2, [r7, #12]
 8012560:	8812      	ldrh	r2, [r2, #0]
 8012562:	b292      	uxth	r2, r2
 8012564:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801256a:	1c9a      	adds	r2, r3, #2
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	665a      	str	r2, [r3, #100]	; 0x64
 8012570:	e00d      	b.n	801258e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801257e:	7812      	ldrb	r2, [r2, #0]
 8012580:	b2d2      	uxtb	r2, r2
 8012582:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012588:	1c5a      	adds	r2, r3, #1
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012594:	b29b      	uxth	r3, r3
 8012596:	3b01      	subs	r3, #1
 8012598:	b29a      	uxth	r2, r3
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d1c2      	bne.n	8012532 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f000 f98f 	bl	80128d0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	2201      	movs	r2, #1
 80125b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d003      	beq.n	80125cc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 f901 	bl	80127cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80125ca:	e0d0      	b.n	801276e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80125cc:	7cfb      	ldrb	r3, [r7, #19]
 80125ce:	2b05      	cmp	r3, #5
 80125d0:	d103      	bne.n	80125da <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f000 f8e6 	bl	80127a4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80125d8:	e0c6      	b.n	8012768 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80125da:	7cfb      	ldrb	r3, [r7, #19]
 80125dc:	2b04      	cmp	r3, #4
 80125de:	d103      	bne.n	80125e8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f000 f8d5 	bl	8012790 <HAL_SPI_RxCpltCallback>
    return;
 80125e6:	e0bf      	b.n	8012768 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80125e8:	7cfb      	ldrb	r3, [r7, #19]
 80125ea:	2b03      	cmp	r3, #3
 80125ec:	f040 80bc 	bne.w	8012768 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f000 f8c3 	bl	801277c <HAL_SPI_TxCpltCallback>
    return;
 80125f6:	e0b7      	b.n	8012768 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f000 80b5 	beq.w	801276e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012604:	69bb      	ldr	r3, [r7, #24]
 8012606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801260a:	2b00      	cmp	r3, #0
 801260c:	d00f      	beq.n	801262e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012614:	f043 0204 	orr.w	r2, r3, #4
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	699a      	ldr	r2, [r3, #24]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801262c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801262e:	69bb      	ldr	r3, [r7, #24]
 8012630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012634:	2b00      	cmp	r3, #0
 8012636:	d00f      	beq.n	8012658 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801263e:	f043 0201 	orr.w	r2, r3, #1
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	699a      	ldr	r2, [r3, #24]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012656:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012658:	69bb      	ldr	r3, [r7, #24]
 801265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801265e:	2b00      	cmp	r3, #0
 8012660:	d00f      	beq.n	8012682 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012668:	f043 0208 	orr.w	r2, r3, #8
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	699a      	ldr	r2, [r3, #24]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012680:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012682:	69bb      	ldr	r3, [r7, #24]
 8012684:	f003 0320 	and.w	r3, r3, #32
 8012688:	2b00      	cmp	r3, #0
 801268a:	d00f      	beq.n	80126ac <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012692:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	699a      	ldr	r2, [r3, #24]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f042 0220 	orr.w	r2, r2, #32
 80126aa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d05a      	beq.n	801276c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	f022 0201 	bic.w	r2, r2, #1
 80126c4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	6919      	ldr	r1, [r3, #16]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	4b28      	ldr	r3, [pc, #160]	; (8012774 <HAL_SPI_IRQHandler+0x394>)
 80126d2:	400b      	ands	r3, r1
 80126d4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80126dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80126e0:	d138      	bne.n	8012754 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	689a      	ldr	r2, [r3, #8]
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80126f0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d013      	beq.n	8012722 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80126fe:	4a1e      	ldr	r2, [pc, #120]	; (8012778 <HAL_SPI_IRQHandler+0x398>)
 8012700:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012706:	4618      	mov	r0, r3
 8012708:	f7f6 fd9e 	bl	8009248 <HAL_DMA_Abort_IT>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d007      	beq.n	8012722 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012718:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012726:	2b00      	cmp	r3, #0
 8012728:	d020      	beq.n	801276c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801272e:	4a12      	ldr	r2, [pc, #72]	; (8012778 <HAL_SPI_IRQHandler+0x398>)
 8012730:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012736:	4618      	mov	r0, r3
 8012738:	f7f6 fd86 	bl	8009248 <HAL_DMA_Abort_IT>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d014      	beq.n	801276c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012748:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012752:	e00b      	b.n	801276c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2201      	movs	r2, #1
 8012758:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 f835 	bl	80127cc <HAL_SPI_ErrorCallback>
    return;
 8012762:	e003      	b.n	801276c <HAL_SPI_IRQHandler+0x38c>
    return;
 8012764:	bf00      	nop
 8012766:	e002      	b.n	801276e <HAL_SPI_IRQHandler+0x38e>
    return;
 8012768:	bf00      	nop
 801276a:	e000      	b.n	801276e <HAL_SPI_IRQHandler+0x38e>
    return;
 801276c:	bf00      	nop
  }
}
 801276e:	3728      	adds	r7, #40	; 0x28
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}
 8012774:	fffffc94 	.word	0xfffffc94
 8012778:	0801289d 	.word	0x0801289d

0801277c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8012784:	bf00      	nop
 8012786:	370c      	adds	r7, #12
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr

08012790 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012790:	b480      	push	{r7}
 8012792:	b083      	sub	sp, #12
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012798:	bf00      	nop
 801279a:	370c      	adds	r7, #12
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr

080127a4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80127ac:	bf00      	nop
 80127ae:	370c      	adds	r7, #12
 80127b0:	46bd      	mov	sp, r7
 80127b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b6:	4770      	bx	lr

080127b8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80127b8:	b480      	push	{r7}
 80127ba:	b083      	sub	sp, #12
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80127c0:	bf00      	nop
 80127c2:	370c      	adds	r7, #12
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr

080127cc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80127d4:	bf00      	nop
 80127d6:	370c      	adds	r7, #12
 80127d8:	46bd      	mov	sp, r7
 80127da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127de:	4770      	bx	lr

080127e0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80127e0:	b480      	push	{r7}
 80127e2:	b083      	sub	sp, #12
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80127e8:	bf00      	nop
 80127ea:	370c      	adds	r7, #12
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr

080127f4 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012800:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012808:	b2db      	uxtb	r3, r3
 801280a:	2b07      	cmp	r3, #7
 801280c:	d011      	beq.n	8012832 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012812:	69db      	ldr	r3, [r3, #28]
 8012814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012818:	d103      	bne.n	8012822 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 801281a:	68f8      	ldr	r0, [r7, #12]
 801281c:	f7ff ffb8 	bl	8012790 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012820:	e007      	b.n	8012832 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	691a      	ldr	r2, [r3, #16]
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f042 0208 	orr.w	r2, r2, #8
 8012830:	611a      	str	r2, [r3, #16]
}
 8012832:	bf00      	nop
 8012834:	3710      	adds	r7, #16
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}

0801283a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801283a:	b580      	push	{r7, lr}
 801283c:	b084      	sub	sp, #16
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012846:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012848:	68f8      	ldr	r0, [r7, #12]
 801284a:	f7ff ffb5 	bl	80127b8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801284e:	bf00      	nop
 8012850:	3710      	adds	r7, #16
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}

08012856 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012856:	b580      	push	{r7, lr}
 8012858:	b084      	sub	sp, #16
 801285a:	af00      	add	r7, sp, #0
 801285c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012862:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f7f7 fe6d 	bl	800a544 <HAL_DMA_GetError>
 801286a:	4603      	mov	r3, r0
 801286c:	2b02      	cmp	r3, #2
 801286e:	d011      	beq.n	8012894 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012870:	68f8      	ldr	r0, [r7, #12]
 8012872:	f000 f82d 	bl	80128d0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801287c:	f043 0210 	orr.w	r2, r3, #16
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2201      	movs	r2, #1
 801288a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801288e:	68f8      	ldr	r0, [r7, #12]
 8012890:	f7ff ff9c 	bl	80127cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012894:	bf00      	nop
 8012896:	3710      	adds	r7, #16
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b084      	sub	sp, #16
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2200      	movs	r2, #0
 80128ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2200      	movs	r2, #0
 80128b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	2201      	movs	r2, #1
 80128be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80128c2:	68f8      	ldr	r0, [r7, #12]
 80128c4:	f7ff ff82 	bl	80127cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80128c8:	bf00      	nop
 80128ca:	3710      	adds	r7, #16
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80128d0:	b480      	push	{r7}
 80128d2:	b085      	sub	sp, #20
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	695b      	ldr	r3, [r3, #20]
 80128de:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	699a      	ldr	r2, [r3, #24]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f042 0208 	orr.w	r2, r2, #8
 80128ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	699a      	ldr	r2, [r3, #24]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	f042 0210 	orr.w	r2, r2, #16
 80128fe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f022 0201 	bic.w	r2, r2, #1
 801290e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	6919      	ldr	r1, [r3, #16]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	4b3c      	ldr	r3, [pc, #240]	; (8012a0c <SPI_CloseTransfer+0x13c>)
 801291c:	400b      	ands	r3, r1
 801291e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	689a      	ldr	r2, [r3, #8]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801292e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012936:	b2db      	uxtb	r3, r3
 8012938:	2b04      	cmp	r3, #4
 801293a:	d014      	beq.n	8012966 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f003 0320 	and.w	r3, r3, #32
 8012942:	2b00      	cmp	r3, #0
 8012944:	d00f      	beq.n	8012966 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801294c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	699a      	ldr	r2, [r3, #24]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	f042 0220 	orr.w	r2, r2, #32
 8012964:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801296c:	b2db      	uxtb	r3, r3
 801296e:	2b03      	cmp	r3, #3
 8012970:	d014      	beq.n	801299c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012978:	2b00      	cmp	r3, #0
 801297a:	d00f      	beq.n	801299c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012982:	f043 0204 	orr.w	r2, r3, #4
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	699a      	ldr	r2, [r3, #24]
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801299a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d00f      	beq.n	80129c6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80129ac:	f043 0201 	orr.w	r2, r3, #1
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	699a      	ldr	r2, [r3, #24]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80129c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d00f      	beq.n	80129f0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80129d6:	f043 0208 	orr.w	r2, r3, #8
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	699a      	ldr	r2, [r3, #24]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80129ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2200      	movs	r2, #0
 80129f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012a00:	bf00      	nop
 8012a02:	3714      	adds	r7, #20
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr
 8012a0c:	fffffc90 	.word	0xfffffc90

08012a10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012a10:	b480      	push	{r7}
 8012a12:	b085      	sub	sp, #20
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a1c:	095b      	lsrs	r3, r3, #5
 8012a1e:	3301      	adds	r3, #1
 8012a20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	68db      	ldr	r3, [r3, #12]
 8012a26:	3301      	adds	r3, #1
 8012a28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	3307      	adds	r3, #7
 8012a2e:	08db      	lsrs	r3, r3, #3
 8012a30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	fb02 f303 	mul.w	r3, r2, r3
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3714      	adds	r7, #20
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr

08012a46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012a46:	b580      	push	{r7, lr}
 8012a48:	b082      	sub	sp, #8
 8012a4a:	af00      	add	r7, sp, #0
 8012a4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d101      	bne.n	8012a58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012a54:	2301      	movs	r3, #1
 8012a56:	e049      	b.n	8012aec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d106      	bne.n	8012a72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2200      	movs	r2, #0
 8012a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f7f2 f9c3 	bl	8004df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2202      	movs	r2, #2
 8012a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681a      	ldr	r2, [r3, #0]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	3304      	adds	r3, #4
 8012a82:	4619      	mov	r1, r3
 8012a84:	4610      	mov	r0, r2
 8012a86:	f000 fe7d 	bl	8013784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2201      	movs	r2, #1
 8012a8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2201      	movs	r2, #1
 8012a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2201      	movs	r2, #1
 8012a9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2201      	movs	r2, #1
 8012aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2201      	movs	r2, #1
 8012ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2201      	movs	r2, #1
 8012abe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2201      	movs	r2, #1
 8012ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2201      	movs	r2, #1
 8012ade:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012aea:	2300      	movs	r3, #0
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3708      	adds	r7, #8
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012af4:	b480      	push	{r7}
 8012af6:	b085      	sub	sp, #20
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012b02:	b2db      	uxtb	r3, r3
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	d001      	beq.n	8012b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012b08:	2301      	movs	r3, #1
 8012b0a:	e054      	b.n	8012bb6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2202      	movs	r2, #2
 8012b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	68da      	ldr	r2, [r3, #12]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	f042 0201 	orr.w	r2, r2, #1
 8012b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4a26      	ldr	r2, [pc, #152]	; (8012bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d022      	beq.n	8012b74 <HAL_TIM_Base_Start_IT+0x80>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b36:	d01d      	beq.n	8012b74 <HAL_TIM_Base_Start_IT+0x80>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	4a22      	ldr	r2, [pc, #136]	; (8012bc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	d018      	beq.n	8012b74 <HAL_TIM_Base_Start_IT+0x80>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	4a21      	ldr	r2, [pc, #132]	; (8012bcc <HAL_TIM_Base_Start_IT+0xd8>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d013      	beq.n	8012b74 <HAL_TIM_Base_Start_IT+0x80>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4a1f      	ldr	r2, [pc, #124]	; (8012bd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d00e      	beq.n	8012b74 <HAL_TIM_Base_Start_IT+0x80>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	4a1e      	ldr	r2, [pc, #120]	; (8012bd4 <HAL_TIM_Base_Start_IT+0xe0>)
 8012b5c:	4293      	cmp	r3, r2
 8012b5e:	d009      	beq.n	8012b74 <HAL_TIM_Base_Start_IT+0x80>
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	4a1c      	ldr	r2, [pc, #112]	; (8012bd8 <HAL_TIM_Base_Start_IT+0xe4>)
 8012b66:	4293      	cmp	r3, r2
 8012b68:	d004      	beq.n	8012b74 <HAL_TIM_Base_Start_IT+0x80>
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	4a1b      	ldr	r2, [pc, #108]	; (8012bdc <HAL_TIM_Base_Start_IT+0xe8>)
 8012b70:	4293      	cmp	r3, r2
 8012b72:	d115      	bne.n	8012ba0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	689a      	ldr	r2, [r3, #8]
 8012b7a:	4b19      	ldr	r3, [pc, #100]	; (8012be0 <HAL_TIM_Base_Start_IT+0xec>)
 8012b7c:	4013      	ands	r3, r2
 8012b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2b06      	cmp	r3, #6
 8012b84:	d015      	beq.n	8012bb2 <HAL_TIM_Base_Start_IT+0xbe>
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b8c:	d011      	beq.n	8012bb2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f042 0201 	orr.w	r2, r2, #1
 8012b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b9e:	e008      	b.n	8012bb2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	681a      	ldr	r2, [r3, #0]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f042 0201 	orr.w	r2, r2, #1
 8012bae:	601a      	str	r2, [r3, #0]
 8012bb0:	e000      	b.n	8012bb4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012bb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012bb4:	2300      	movs	r3, #0
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3714      	adds	r7, #20
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc0:	4770      	bx	lr
 8012bc2:	bf00      	nop
 8012bc4:	40010000 	.word	0x40010000
 8012bc8:	40000400 	.word	0x40000400
 8012bcc:	40000800 	.word	0x40000800
 8012bd0:	40000c00 	.word	0x40000c00
 8012bd4:	40010400 	.word	0x40010400
 8012bd8:	40001800 	.word	0x40001800
 8012bdc:	40014000 	.word	0x40014000
 8012be0:	00010007 	.word	0x00010007

08012be4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b084      	sub	sp, #16
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d109      	bne.n	8012c0c <HAL_TIM_OC_Start_IT+0x28>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	bf14      	ite	ne
 8012c04:	2301      	movne	r3, #1
 8012c06:	2300      	moveq	r3, #0
 8012c08:	b2db      	uxtb	r3, r3
 8012c0a:	e03c      	b.n	8012c86 <HAL_TIM_OC_Start_IT+0xa2>
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	2b04      	cmp	r3, #4
 8012c10:	d109      	bne.n	8012c26 <HAL_TIM_OC_Start_IT+0x42>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	2b01      	cmp	r3, #1
 8012c1c:	bf14      	ite	ne
 8012c1e:	2301      	movne	r3, #1
 8012c20:	2300      	moveq	r3, #0
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	e02f      	b.n	8012c86 <HAL_TIM_OC_Start_IT+0xa2>
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	2b08      	cmp	r3, #8
 8012c2a:	d109      	bne.n	8012c40 <HAL_TIM_OC_Start_IT+0x5c>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	2b01      	cmp	r3, #1
 8012c36:	bf14      	ite	ne
 8012c38:	2301      	movne	r3, #1
 8012c3a:	2300      	moveq	r3, #0
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	e022      	b.n	8012c86 <HAL_TIM_OC_Start_IT+0xa2>
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	2b0c      	cmp	r3, #12
 8012c44:	d109      	bne.n	8012c5a <HAL_TIM_OC_Start_IT+0x76>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012c4c:	b2db      	uxtb	r3, r3
 8012c4e:	2b01      	cmp	r3, #1
 8012c50:	bf14      	ite	ne
 8012c52:	2301      	movne	r3, #1
 8012c54:	2300      	moveq	r3, #0
 8012c56:	b2db      	uxtb	r3, r3
 8012c58:	e015      	b.n	8012c86 <HAL_TIM_OC_Start_IT+0xa2>
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	2b10      	cmp	r3, #16
 8012c5e:	d109      	bne.n	8012c74 <HAL_TIM_OC_Start_IT+0x90>
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	2b01      	cmp	r3, #1
 8012c6a:	bf14      	ite	ne
 8012c6c:	2301      	movne	r3, #1
 8012c6e:	2300      	moveq	r3, #0
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	e008      	b.n	8012c86 <HAL_TIM_OC_Start_IT+0xa2>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	bf14      	ite	ne
 8012c80:	2301      	movne	r3, #1
 8012c82:	2300      	moveq	r3, #0
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d001      	beq.n	8012c8e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	e0ec      	b.n	8012e68 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d104      	bne.n	8012c9e <HAL_TIM_OC_Start_IT+0xba>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2202      	movs	r2, #2
 8012c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012c9c:	e023      	b.n	8012ce6 <HAL_TIM_OC_Start_IT+0x102>
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	2b04      	cmp	r3, #4
 8012ca2:	d104      	bne.n	8012cae <HAL_TIM_OC_Start_IT+0xca>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2202      	movs	r2, #2
 8012ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012cac:	e01b      	b.n	8012ce6 <HAL_TIM_OC_Start_IT+0x102>
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	2b08      	cmp	r3, #8
 8012cb2:	d104      	bne.n	8012cbe <HAL_TIM_OC_Start_IT+0xda>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2202      	movs	r2, #2
 8012cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012cbc:	e013      	b.n	8012ce6 <HAL_TIM_OC_Start_IT+0x102>
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	2b0c      	cmp	r3, #12
 8012cc2:	d104      	bne.n	8012cce <HAL_TIM_OC_Start_IT+0xea>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2202      	movs	r2, #2
 8012cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012ccc:	e00b      	b.n	8012ce6 <HAL_TIM_OC_Start_IT+0x102>
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	2b10      	cmp	r3, #16
 8012cd2:	d104      	bne.n	8012cde <HAL_TIM_OC_Start_IT+0xfa>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2202      	movs	r2, #2
 8012cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012cdc:	e003      	b.n	8012ce6 <HAL_TIM_OC_Start_IT+0x102>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	2202      	movs	r2, #2
 8012ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	2b0c      	cmp	r3, #12
 8012cea:	d841      	bhi.n	8012d70 <HAL_TIM_OC_Start_IT+0x18c>
 8012cec:	a201      	add	r2, pc, #4	; (adr r2, 8012cf4 <HAL_TIM_OC_Start_IT+0x110>)
 8012cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cf2:	bf00      	nop
 8012cf4:	08012d29 	.word	0x08012d29
 8012cf8:	08012d71 	.word	0x08012d71
 8012cfc:	08012d71 	.word	0x08012d71
 8012d00:	08012d71 	.word	0x08012d71
 8012d04:	08012d3b 	.word	0x08012d3b
 8012d08:	08012d71 	.word	0x08012d71
 8012d0c:	08012d71 	.word	0x08012d71
 8012d10:	08012d71 	.word	0x08012d71
 8012d14:	08012d4d 	.word	0x08012d4d
 8012d18:	08012d71 	.word	0x08012d71
 8012d1c:	08012d71 	.word	0x08012d71
 8012d20:	08012d71 	.word	0x08012d71
 8012d24:	08012d5f 	.word	0x08012d5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	68da      	ldr	r2, [r3, #12]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	f042 0202 	orr.w	r2, r2, #2
 8012d36:	60da      	str	r2, [r3, #12]
      break;
 8012d38:	e01d      	b.n	8012d76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	68da      	ldr	r2, [r3, #12]
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	f042 0204 	orr.w	r2, r2, #4
 8012d48:	60da      	str	r2, [r3, #12]
      break;
 8012d4a:	e014      	b.n	8012d76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	68da      	ldr	r2, [r3, #12]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	f042 0208 	orr.w	r2, r2, #8
 8012d5a:	60da      	str	r2, [r3, #12]
      break;
 8012d5c:	e00b      	b.n	8012d76 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	68da      	ldr	r2, [r3, #12]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	f042 0210 	orr.w	r2, r2, #16
 8012d6c:	60da      	str	r2, [r3, #12]
      break;
 8012d6e:	e002      	b.n	8012d76 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012d70:	2301      	movs	r3, #1
 8012d72:	73fb      	strb	r3, [r7, #15]
      break;
 8012d74:	bf00      	nop
  }

  if (status == HAL_OK)
 8012d76:	7bfb      	ldrb	r3, [r7, #15]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d174      	bne.n	8012e66 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	2201      	movs	r2, #1
 8012d82:	6839      	ldr	r1, [r7, #0]
 8012d84:	4618      	mov	r0, r3
 8012d86:	f001 f917 	bl	8013fb8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	4a38      	ldr	r2, [pc, #224]	; (8012e70 <HAL_TIM_OC_Start_IT+0x28c>)
 8012d90:	4293      	cmp	r3, r2
 8012d92:	d013      	beq.n	8012dbc <HAL_TIM_OC_Start_IT+0x1d8>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	4a36      	ldr	r2, [pc, #216]	; (8012e74 <HAL_TIM_OC_Start_IT+0x290>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d00e      	beq.n	8012dbc <HAL_TIM_OC_Start_IT+0x1d8>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4a35      	ldr	r2, [pc, #212]	; (8012e78 <HAL_TIM_OC_Start_IT+0x294>)
 8012da4:	4293      	cmp	r3, r2
 8012da6:	d009      	beq.n	8012dbc <HAL_TIM_OC_Start_IT+0x1d8>
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	4a33      	ldr	r2, [pc, #204]	; (8012e7c <HAL_TIM_OC_Start_IT+0x298>)
 8012dae:	4293      	cmp	r3, r2
 8012db0:	d004      	beq.n	8012dbc <HAL_TIM_OC_Start_IT+0x1d8>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	4a32      	ldr	r2, [pc, #200]	; (8012e80 <HAL_TIM_OC_Start_IT+0x29c>)
 8012db8:	4293      	cmp	r3, r2
 8012dba:	d101      	bne.n	8012dc0 <HAL_TIM_OC_Start_IT+0x1dc>
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	e000      	b.n	8012dc2 <HAL_TIM_OC_Start_IT+0x1de>
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d007      	beq.n	8012dd6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012dd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	4a25      	ldr	r2, [pc, #148]	; (8012e70 <HAL_TIM_OC_Start_IT+0x28c>)
 8012ddc:	4293      	cmp	r3, r2
 8012dde:	d022      	beq.n	8012e26 <HAL_TIM_OC_Start_IT+0x242>
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012de8:	d01d      	beq.n	8012e26 <HAL_TIM_OC_Start_IT+0x242>
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	4a25      	ldr	r2, [pc, #148]	; (8012e84 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d018      	beq.n	8012e26 <HAL_TIM_OC_Start_IT+0x242>
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	4a23      	ldr	r2, [pc, #140]	; (8012e88 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	d013      	beq.n	8012e26 <HAL_TIM_OC_Start_IT+0x242>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	4a22      	ldr	r2, [pc, #136]	; (8012e8c <HAL_TIM_OC_Start_IT+0x2a8>)
 8012e04:	4293      	cmp	r3, r2
 8012e06:	d00e      	beq.n	8012e26 <HAL_TIM_OC_Start_IT+0x242>
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	4a19      	ldr	r2, [pc, #100]	; (8012e74 <HAL_TIM_OC_Start_IT+0x290>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d009      	beq.n	8012e26 <HAL_TIM_OC_Start_IT+0x242>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	4a1e      	ldr	r2, [pc, #120]	; (8012e90 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	d004      	beq.n	8012e26 <HAL_TIM_OC_Start_IT+0x242>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	4a15      	ldr	r2, [pc, #84]	; (8012e78 <HAL_TIM_OC_Start_IT+0x294>)
 8012e22:	4293      	cmp	r3, r2
 8012e24:	d115      	bne.n	8012e52 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	689a      	ldr	r2, [r3, #8]
 8012e2c:	4b19      	ldr	r3, [pc, #100]	; (8012e94 <HAL_TIM_OC_Start_IT+0x2b0>)
 8012e2e:	4013      	ands	r3, r2
 8012e30:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	2b06      	cmp	r3, #6
 8012e36:	d015      	beq.n	8012e64 <HAL_TIM_OC_Start_IT+0x280>
 8012e38:	68bb      	ldr	r3, [r7, #8]
 8012e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e3e:	d011      	beq.n	8012e64 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	681a      	ldr	r2, [r3, #0]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f042 0201 	orr.w	r2, r2, #1
 8012e4e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e50:	e008      	b.n	8012e64 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	f042 0201 	orr.w	r2, r2, #1
 8012e60:	601a      	str	r2, [r3, #0]
 8012e62:	e000      	b.n	8012e66 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e64:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3710      	adds	r7, #16
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}
 8012e70:	40010000 	.word	0x40010000
 8012e74:	40010400 	.word	0x40010400
 8012e78:	40014000 	.word	0x40014000
 8012e7c:	40014400 	.word	0x40014400
 8012e80:	40014800 	.word	0x40014800
 8012e84:	40000400 	.word	0x40000400
 8012e88:	40000800 	.word	0x40000800
 8012e8c:	40000c00 	.word	0x40000c00
 8012e90:	40001800 	.word	0x40001800
 8012e94:	00010007 	.word	0x00010007

08012e98 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b084      	sub	sp, #16
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	2b0c      	cmp	r3, #12
 8012eaa:	d841      	bhi.n	8012f30 <HAL_TIM_OC_Stop_IT+0x98>
 8012eac:	a201      	add	r2, pc, #4	; (adr r2, 8012eb4 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eb2:	bf00      	nop
 8012eb4:	08012ee9 	.word	0x08012ee9
 8012eb8:	08012f31 	.word	0x08012f31
 8012ebc:	08012f31 	.word	0x08012f31
 8012ec0:	08012f31 	.word	0x08012f31
 8012ec4:	08012efb 	.word	0x08012efb
 8012ec8:	08012f31 	.word	0x08012f31
 8012ecc:	08012f31 	.word	0x08012f31
 8012ed0:	08012f31 	.word	0x08012f31
 8012ed4:	08012f0d 	.word	0x08012f0d
 8012ed8:	08012f31 	.word	0x08012f31
 8012edc:	08012f31 	.word	0x08012f31
 8012ee0:	08012f31 	.word	0x08012f31
 8012ee4:	08012f1f 	.word	0x08012f1f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	68da      	ldr	r2, [r3, #12]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f022 0202 	bic.w	r2, r2, #2
 8012ef6:	60da      	str	r2, [r3, #12]
      break;
 8012ef8:	e01d      	b.n	8012f36 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	68da      	ldr	r2, [r3, #12]
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f022 0204 	bic.w	r2, r2, #4
 8012f08:	60da      	str	r2, [r3, #12]
      break;
 8012f0a:	e014      	b.n	8012f36 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	68da      	ldr	r2, [r3, #12]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	f022 0208 	bic.w	r2, r2, #8
 8012f1a:	60da      	str	r2, [r3, #12]
      break;
 8012f1c:	e00b      	b.n	8012f36 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	68da      	ldr	r2, [r3, #12]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	f022 0210 	bic.w	r2, r2, #16
 8012f2c:	60da      	str	r2, [r3, #12]
      break;
 8012f2e:	e002      	b.n	8012f36 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012f30:	2301      	movs	r3, #1
 8012f32:	73fb      	strb	r3, [r7, #15]
      break;
 8012f34:	bf00      	nop
  }

  if (status == HAL_OK)
 8012f36:	7bfb      	ldrb	r3, [r7, #15]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	f040 8081 	bne.w	8013040 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	2200      	movs	r2, #0
 8012f44:	6839      	ldr	r1, [r7, #0]
 8012f46:	4618      	mov	r0, r3
 8012f48:	f001 f836 	bl	8013fb8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	4a3e      	ldr	r2, [pc, #248]	; (801304c <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012f52:	4293      	cmp	r3, r2
 8012f54:	d013      	beq.n	8012f7e <HAL_TIM_OC_Stop_IT+0xe6>
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	4a3d      	ldr	r2, [pc, #244]	; (8013050 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	d00e      	beq.n	8012f7e <HAL_TIM_OC_Stop_IT+0xe6>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	4a3b      	ldr	r2, [pc, #236]	; (8013054 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d009      	beq.n	8012f7e <HAL_TIM_OC_Stop_IT+0xe6>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4a3a      	ldr	r2, [pc, #232]	; (8013058 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012f70:	4293      	cmp	r3, r2
 8012f72:	d004      	beq.n	8012f7e <HAL_TIM_OC_Stop_IT+0xe6>
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4a38      	ldr	r2, [pc, #224]	; (801305c <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d101      	bne.n	8012f82 <HAL_TIM_OC_Stop_IT+0xea>
 8012f7e:	2301      	movs	r3, #1
 8012f80:	e000      	b.n	8012f84 <HAL_TIM_OC_Stop_IT+0xec>
 8012f82:	2300      	movs	r3, #0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d017      	beq.n	8012fb8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	6a1a      	ldr	r2, [r3, #32]
 8012f8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8012f92:	4013      	ands	r3, r2
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d10f      	bne.n	8012fb8 <HAL_TIM_OC_Stop_IT+0x120>
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	6a1a      	ldr	r2, [r3, #32]
 8012f9e:	f240 4344 	movw	r3, #1092	; 0x444
 8012fa2:	4013      	ands	r3, r2
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d107      	bne.n	8012fb8 <HAL_TIM_OC_Stop_IT+0x120>
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012fb6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	6a1a      	ldr	r2, [r3, #32]
 8012fbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8012fc2:	4013      	ands	r3, r2
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d10f      	bne.n	8012fe8 <HAL_TIM_OC_Stop_IT+0x150>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	6a1a      	ldr	r2, [r3, #32]
 8012fce:	f240 4344 	movw	r3, #1092	; 0x444
 8012fd2:	4013      	ands	r3, r2
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d107      	bne.n	8012fe8 <HAL_TIM_OC_Stop_IT+0x150>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f022 0201 	bic.w	r2, r2, #1
 8012fe6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d104      	bne.n	8012ff8 <HAL_TIM_OC_Stop_IT+0x160>
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012ff6:	e023      	b.n	8013040 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	2b04      	cmp	r3, #4
 8012ffc:	d104      	bne.n	8013008 <HAL_TIM_OC_Stop_IT+0x170>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2201      	movs	r2, #1
 8013002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013006:	e01b      	b.n	8013040 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	2b08      	cmp	r3, #8
 801300c:	d104      	bne.n	8013018 <HAL_TIM_OC_Stop_IT+0x180>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2201      	movs	r2, #1
 8013012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013016:	e013      	b.n	8013040 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	2b0c      	cmp	r3, #12
 801301c:	d104      	bne.n	8013028 <HAL_TIM_OC_Stop_IT+0x190>
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	2201      	movs	r2, #1
 8013022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013026:	e00b      	b.n	8013040 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	2b10      	cmp	r3, #16
 801302c:	d104      	bne.n	8013038 <HAL_TIM_OC_Stop_IT+0x1a0>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2201      	movs	r2, #1
 8013032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013036:	e003      	b.n	8013040 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2201      	movs	r2, #1
 801303c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8013040:	7bfb      	ldrb	r3, [r7, #15]
}
 8013042:	4618      	mov	r0, r3
 8013044:	3710      	adds	r7, #16
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}
 801304a:	bf00      	nop
 801304c:	40010000 	.word	0x40010000
 8013050:	40010400 	.word	0x40010400
 8013054:	40014000 	.word	0x40014000
 8013058:	40014400 	.word	0x40014400
 801305c:	40014800 	.word	0x40014800

08013060 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d101      	bne.n	8013072 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801306e:	2301      	movs	r3, #1
 8013070:	e049      	b.n	8013106 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013078:	b2db      	uxtb	r3, r3
 801307a:	2b00      	cmp	r3, #0
 801307c:	d106      	bne.n	801308c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2200      	movs	r2, #0
 8013082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f000 f841 	bl	801310e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2202      	movs	r2, #2
 8013090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681a      	ldr	r2, [r3, #0]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	3304      	adds	r3, #4
 801309c:	4619      	mov	r1, r3
 801309e:	4610      	mov	r0, r2
 80130a0:	f000 fb70 	bl	8013784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2201      	movs	r2, #1
 80130a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	2201      	movs	r2, #1
 80130b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2201      	movs	r2, #1
 80130b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2201      	movs	r2, #1
 80130c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2201      	movs	r2, #1
 80130c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2201      	movs	r2, #1
 80130d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2201      	movs	r2, #1
 80130d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2201      	movs	r2, #1
 80130e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2201      	movs	r2, #1
 80130e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2201      	movs	r2, #1
 80130f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2201      	movs	r2, #1
 80130f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2201      	movs	r2, #1
 8013100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013104:	2300      	movs	r3, #0
}
 8013106:	4618      	mov	r0, r3
 8013108:	3708      	adds	r7, #8
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}

0801310e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801310e:	b480      	push	{r7}
 8013110:	b083      	sub	sp, #12
 8013112:	af00      	add	r7, sp, #0
 8013114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8013116:	bf00      	nop
 8013118:	370c      	adds	r7, #12
 801311a:	46bd      	mov	sp, r7
 801311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013120:	4770      	bx	lr

08013122 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013122:	b580      	push	{r7, lr}
 8013124:	b084      	sub	sp, #16
 8013126:	af00      	add	r7, sp, #0
 8013128:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	68db      	ldr	r3, [r3, #12]
 8013130:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	691b      	ldr	r3, [r3, #16]
 8013138:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	f003 0302 	and.w	r3, r3, #2
 8013140:	2b00      	cmp	r3, #0
 8013142:	d020      	beq.n	8013186 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	f003 0302 	and.w	r3, r3, #2
 801314a:	2b00      	cmp	r3, #0
 801314c:	d01b      	beq.n	8013186 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	f06f 0202 	mvn.w	r2, #2
 8013156:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2201      	movs	r2, #1
 801315c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	699b      	ldr	r3, [r3, #24]
 8013164:	f003 0303 	and.w	r3, r3, #3
 8013168:	2b00      	cmp	r3, #0
 801316a:	d003      	beq.n	8013174 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f000 faeb 	bl	8013748 <HAL_TIM_IC_CaptureCallback>
 8013172:	e005      	b.n	8013180 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f7ef fd6b 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f000 faee 	bl	801375c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2200      	movs	r2, #0
 8013184:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	f003 0304 	and.w	r3, r3, #4
 801318c:	2b00      	cmp	r3, #0
 801318e:	d020      	beq.n	80131d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f003 0304 	and.w	r3, r3, #4
 8013196:	2b00      	cmp	r3, #0
 8013198:	d01b      	beq.n	80131d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	f06f 0204 	mvn.w	r2, #4
 80131a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2202      	movs	r2, #2
 80131a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	699b      	ldr	r3, [r3, #24]
 80131b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d003      	beq.n	80131c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f000 fac5 	bl	8013748 <HAL_TIM_IC_CaptureCallback>
 80131be:	e005      	b.n	80131cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f7ef fd45 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f000 fac8 	bl	801375c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2200      	movs	r2, #0
 80131d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	f003 0308 	and.w	r3, r3, #8
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d020      	beq.n	801321e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	f003 0308 	and.w	r3, r3, #8
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d01b      	beq.n	801321e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f06f 0208 	mvn.w	r2, #8
 80131ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2204      	movs	r2, #4
 80131f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	69db      	ldr	r3, [r3, #28]
 80131fc:	f003 0303 	and.w	r3, r3, #3
 8013200:	2b00      	cmp	r3, #0
 8013202:	d003      	beq.n	801320c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f000 fa9f 	bl	8013748 <HAL_TIM_IC_CaptureCallback>
 801320a:	e005      	b.n	8013218 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f7ef fd1f 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f000 faa2 	bl	801375c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2200      	movs	r2, #0
 801321c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	f003 0310 	and.w	r3, r3, #16
 8013224:	2b00      	cmp	r3, #0
 8013226:	d020      	beq.n	801326a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	f003 0310 	and.w	r3, r3, #16
 801322e:	2b00      	cmp	r3, #0
 8013230:	d01b      	beq.n	801326a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	f06f 0210 	mvn.w	r2, #16
 801323a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2208      	movs	r2, #8
 8013240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	69db      	ldr	r3, [r3, #28]
 8013248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801324c:	2b00      	cmp	r3, #0
 801324e:	d003      	beq.n	8013258 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f000 fa79 	bl	8013748 <HAL_TIM_IC_CaptureCallback>
 8013256:	e005      	b.n	8013264 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7ef fcf9 	bl	8002c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f000 fa7c 	bl	801375c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2200      	movs	r2, #0
 8013268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	f003 0301 	and.w	r3, r3, #1
 8013270:	2b00      	cmp	r3, #0
 8013272:	d00c      	beq.n	801328e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	f003 0301 	and.w	r3, r3, #1
 801327a:	2b00      	cmp	r3, #0
 801327c:	d007      	beq.n	801328e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f06f 0201 	mvn.w	r2, #1
 8013286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f7f0 fbaf 	bl	80039ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013294:	2b00      	cmp	r3, #0
 8013296:	d104      	bne.n	80132a2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d00c      	beq.n	80132bc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d007      	beq.n	80132bc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80132b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f000 ffba 	bl	8014230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d00c      	beq.n	80132e0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d007      	beq.n	80132e0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80132d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f000 ffb2 	bl	8014244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00c      	beq.n	8013304 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d007      	beq.n	8013304 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80132fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f000 fa36 	bl	8013770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	f003 0320 	and.w	r3, r3, #32
 801330a:	2b00      	cmp	r3, #0
 801330c:	d00c      	beq.n	8013328 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	f003 0320 	and.w	r3, r3, #32
 8013314:	2b00      	cmp	r3, #0
 8013316:	d007      	beq.n	8013328 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	f06f 0220 	mvn.w	r2, #32
 8013320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f000 ff7a 	bl	801421c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013328:	bf00      	nop
 801332a:	3710      	adds	r7, #16
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}

08013330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b086      	sub	sp, #24
 8013334:	af00      	add	r7, sp, #0
 8013336:	60f8      	str	r0, [r7, #12]
 8013338:	60b9      	str	r1, [r7, #8]
 801333a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801333c:	2300      	movs	r3, #0
 801333e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013346:	2b01      	cmp	r3, #1
 8013348:	d101      	bne.n	801334e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801334a:	2302      	movs	r3, #2
 801334c:	e0ff      	b.n	801354e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2201      	movs	r2, #1
 8013352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2b14      	cmp	r3, #20
 801335a:	f200 80f0 	bhi.w	801353e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801335e:	a201      	add	r2, pc, #4	; (adr r2, 8013364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013364:	080133b9 	.word	0x080133b9
 8013368:	0801353f 	.word	0x0801353f
 801336c:	0801353f 	.word	0x0801353f
 8013370:	0801353f 	.word	0x0801353f
 8013374:	080133f9 	.word	0x080133f9
 8013378:	0801353f 	.word	0x0801353f
 801337c:	0801353f 	.word	0x0801353f
 8013380:	0801353f 	.word	0x0801353f
 8013384:	0801343b 	.word	0x0801343b
 8013388:	0801353f 	.word	0x0801353f
 801338c:	0801353f 	.word	0x0801353f
 8013390:	0801353f 	.word	0x0801353f
 8013394:	0801347b 	.word	0x0801347b
 8013398:	0801353f 	.word	0x0801353f
 801339c:	0801353f 	.word	0x0801353f
 80133a0:	0801353f 	.word	0x0801353f
 80133a4:	080134bd 	.word	0x080134bd
 80133a8:	0801353f 	.word	0x0801353f
 80133ac:	0801353f 	.word	0x0801353f
 80133b0:	0801353f 	.word	0x0801353f
 80133b4:	080134fd 	.word	0x080134fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	68b9      	ldr	r1, [r7, #8]
 80133be:	4618      	mov	r0, r3
 80133c0:	f000 fa86 	bl	80138d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	699a      	ldr	r2, [r3, #24]
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	f042 0208 	orr.w	r2, r2, #8
 80133d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	699a      	ldr	r2, [r3, #24]
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	f022 0204 	bic.w	r2, r2, #4
 80133e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	6999      	ldr	r1, [r3, #24]
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	691a      	ldr	r2, [r3, #16]
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	430a      	orrs	r2, r1
 80133f4:	619a      	str	r2, [r3, #24]
      break;
 80133f6:	e0a5      	b.n	8013544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	68b9      	ldr	r1, [r7, #8]
 80133fe:	4618      	mov	r0, r3
 8013400:	f000 faf6 	bl	80139f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	699a      	ldr	r2, [r3, #24]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	699a      	ldr	r2, [r3, #24]
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	6999      	ldr	r1, [r3, #24]
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	691b      	ldr	r3, [r3, #16]
 801342e:	021a      	lsls	r2, r3, #8
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	430a      	orrs	r2, r1
 8013436:	619a      	str	r2, [r3, #24]
      break;
 8013438:	e084      	b.n	8013544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	68b9      	ldr	r1, [r7, #8]
 8013440:	4618      	mov	r0, r3
 8013442:	f000 fb5f 	bl	8013b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	69da      	ldr	r2, [r3, #28]
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	f042 0208 	orr.w	r2, r2, #8
 8013454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	69da      	ldr	r2, [r3, #28]
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f022 0204 	bic.w	r2, r2, #4
 8013464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	69d9      	ldr	r1, [r3, #28]
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	691a      	ldr	r2, [r3, #16]
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	430a      	orrs	r2, r1
 8013476:	61da      	str	r2, [r3, #28]
      break;
 8013478:	e064      	b.n	8013544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	68b9      	ldr	r1, [r7, #8]
 8013480:	4618      	mov	r0, r3
 8013482:	f000 fbc7 	bl	8013c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	69da      	ldr	r2, [r3, #28]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	69da      	ldr	r2, [r3, #28]
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80134a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	69d9      	ldr	r1, [r3, #28]
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	691b      	ldr	r3, [r3, #16]
 80134b0:	021a      	lsls	r2, r3, #8
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	430a      	orrs	r2, r1
 80134b8:	61da      	str	r2, [r3, #28]
      break;
 80134ba:	e043      	b.n	8013544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	68b9      	ldr	r1, [r7, #8]
 80134c2:	4618      	mov	r0, r3
 80134c4:	f000 fc10 	bl	8013ce8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	f042 0208 	orr.w	r2, r2, #8
 80134d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	f022 0204 	bic.w	r2, r2, #4
 80134e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	691a      	ldr	r2, [r3, #16]
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	430a      	orrs	r2, r1
 80134f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80134fa:	e023      	b.n	8013544 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	68b9      	ldr	r1, [r7, #8]
 8013502:	4618      	mov	r0, r3
 8013504:	f000 fc54 	bl	8013db0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013516:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013526:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	691b      	ldr	r3, [r3, #16]
 8013532:	021a      	lsls	r2, r3, #8
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	430a      	orrs	r2, r1
 801353a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801353c:	e002      	b.n	8013544 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801353e:	2301      	movs	r3, #1
 8013540:	75fb      	strb	r3, [r7, #23]
      break;
 8013542:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	2200      	movs	r2, #0
 8013548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801354c:	7dfb      	ldrb	r3, [r7, #23]
}
 801354e:	4618      	mov	r0, r3
 8013550:	3718      	adds	r7, #24
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
 8013556:	bf00      	nop

08013558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b084      	sub	sp, #16
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013562:	2300      	movs	r3, #0
 8013564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801356c:	2b01      	cmp	r3, #1
 801356e:	d101      	bne.n	8013574 <HAL_TIM_ConfigClockSource+0x1c>
 8013570:	2302      	movs	r3, #2
 8013572:	e0dc      	b.n	801372e <HAL_TIM_ConfigClockSource+0x1d6>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2201      	movs	r2, #1
 8013578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2202      	movs	r2, #2
 8013580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	689b      	ldr	r3, [r3, #8]
 801358a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801358c:	68ba      	ldr	r2, [r7, #8]
 801358e:	4b6a      	ldr	r3, [pc, #424]	; (8013738 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013590:	4013      	ands	r3, r2
 8013592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801359a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	68ba      	ldr	r2, [r7, #8]
 80135a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	4a64      	ldr	r2, [pc, #400]	; (801373c <HAL_TIM_ConfigClockSource+0x1e4>)
 80135aa:	4293      	cmp	r3, r2
 80135ac:	f000 80a9 	beq.w	8013702 <HAL_TIM_ConfigClockSource+0x1aa>
 80135b0:	4a62      	ldr	r2, [pc, #392]	; (801373c <HAL_TIM_ConfigClockSource+0x1e4>)
 80135b2:	4293      	cmp	r3, r2
 80135b4:	f200 80ae 	bhi.w	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 80135b8:	4a61      	ldr	r2, [pc, #388]	; (8013740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80135ba:	4293      	cmp	r3, r2
 80135bc:	f000 80a1 	beq.w	8013702 <HAL_TIM_ConfigClockSource+0x1aa>
 80135c0:	4a5f      	ldr	r2, [pc, #380]	; (8013740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80135c2:	4293      	cmp	r3, r2
 80135c4:	f200 80a6 	bhi.w	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 80135c8:	4a5e      	ldr	r2, [pc, #376]	; (8013744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80135ca:	4293      	cmp	r3, r2
 80135cc:	f000 8099 	beq.w	8013702 <HAL_TIM_ConfigClockSource+0x1aa>
 80135d0:	4a5c      	ldr	r2, [pc, #368]	; (8013744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80135d2:	4293      	cmp	r3, r2
 80135d4:	f200 809e 	bhi.w	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 80135d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80135dc:	f000 8091 	beq.w	8013702 <HAL_TIM_ConfigClockSource+0x1aa>
 80135e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80135e4:	f200 8096 	bhi.w	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 80135e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80135ec:	f000 8089 	beq.w	8013702 <HAL_TIM_ConfigClockSource+0x1aa>
 80135f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80135f4:	f200 808e 	bhi.w	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 80135f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80135fc:	d03e      	beq.n	801367c <HAL_TIM_ConfigClockSource+0x124>
 80135fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013602:	f200 8087 	bhi.w	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 8013606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801360a:	f000 8086 	beq.w	801371a <HAL_TIM_ConfigClockSource+0x1c2>
 801360e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013612:	d87f      	bhi.n	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 8013614:	2b70      	cmp	r3, #112	; 0x70
 8013616:	d01a      	beq.n	801364e <HAL_TIM_ConfigClockSource+0xf6>
 8013618:	2b70      	cmp	r3, #112	; 0x70
 801361a:	d87b      	bhi.n	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 801361c:	2b60      	cmp	r3, #96	; 0x60
 801361e:	d050      	beq.n	80136c2 <HAL_TIM_ConfigClockSource+0x16a>
 8013620:	2b60      	cmp	r3, #96	; 0x60
 8013622:	d877      	bhi.n	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 8013624:	2b50      	cmp	r3, #80	; 0x50
 8013626:	d03c      	beq.n	80136a2 <HAL_TIM_ConfigClockSource+0x14a>
 8013628:	2b50      	cmp	r3, #80	; 0x50
 801362a:	d873      	bhi.n	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 801362c:	2b40      	cmp	r3, #64	; 0x40
 801362e:	d058      	beq.n	80136e2 <HAL_TIM_ConfigClockSource+0x18a>
 8013630:	2b40      	cmp	r3, #64	; 0x40
 8013632:	d86f      	bhi.n	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 8013634:	2b30      	cmp	r3, #48	; 0x30
 8013636:	d064      	beq.n	8013702 <HAL_TIM_ConfigClockSource+0x1aa>
 8013638:	2b30      	cmp	r3, #48	; 0x30
 801363a:	d86b      	bhi.n	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 801363c:	2b20      	cmp	r3, #32
 801363e:	d060      	beq.n	8013702 <HAL_TIM_ConfigClockSource+0x1aa>
 8013640:	2b20      	cmp	r3, #32
 8013642:	d867      	bhi.n	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
 8013644:	2b00      	cmp	r3, #0
 8013646:	d05c      	beq.n	8013702 <HAL_TIM_ConfigClockSource+0x1aa>
 8013648:	2b10      	cmp	r3, #16
 801364a:	d05a      	beq.n	8013702 <HAL_TIM_ConfigClockSource+0x1aa>
 801364c:	e062      	b.n	8013714 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6818      	ldr	r0, [r3, #0]
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	6899      	ldr	r1, [r3, #8]
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	685a      	ldr	r2, [r3, #4]
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	68db      	ldr	r3, [r3, #12]
 801365e:	f000 fc8b 	bl	8013f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	689b      	ldr	r3, [r3, #8]
 8013668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	68ba      	ldr	r2, [r7, #8]
 8013678:	609a      	str	r2, [r3, #8]
      break;
 801367a:	e04f      	b.n	801371c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6818      	ldr	r0, [r3, #0]
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	6899      	ldr	r1, [r3, #8]
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	685a      	ldr	r2, [r3, #4]
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	68db      	ldr	r3, [r3, #12]
 801368c:	f000 fc74 	bl	8013f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	689a      	ldr	r2, [r3, #8]
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801369e:	609a      	str	r2, [r3, #8]
      break;
 80136a0:	e03c      	b.n	801371c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6818      	ldr	r0, [r3, #0]
 80136a6:	683b      	ldr	r3, [r7, #0]
 80136a8:	6859      	ldr	r1, [r3, #4]
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	461a      	mov	r2, r3
 80136b0:	f000 fbe4 	bl	8013e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	2150      	movs	r1, #80	; 0x50
 80136ba:	4618      	mov	r0, r3
 80136bc:	f000 fc3e 	bl	8013f3c <TIM_ITRx_SetConfig>
      break;
 80136c0:	e02c      	b.n	801371c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6818      	ldr	r0, [r3, #0]
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	6859      	ldr	r1, [r3, #4]
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	68db      	ldr	r3, [r3, #12]
 80136ce:	461a      	mov	r2, r3
 80136d0:	f000 fc03 	bl	8013eda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2160      	movs	r1, #96	; 0x60
 80136da:	4618      	mov	r0, r3
 80136dc:	f000 fc2e 	bl	8013f3c <TIM_ITRx_SetConfig>
      break;
 80136e0:	e01c      	b.n	801371c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6818      	ldr	r0, [r3, #0]
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	6859      	ldr	r1, [r3, #4]
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	68db      	ldr	r3, [r3, #12]
 80136ee:	461a      	mov	r2, r3
 80136f0:	f000 fbc4 	bl	8013e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2140      	movs	r1, #64	; 0x40
 80136fa:	4618      	mov	r0, r3
 80136fc:	f000 fc1e 	bl	8013f3c <TIM_ITRx_SetConfig>
      break;
 8013700:	e00c      	b.n	801371c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681a      	ldr	r2, [r3, #0]
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	4619      	mov	r1, r3
 801370c:	4610      	mov	r0, r2
 801370e:	f000 fc15 	bl	8013f3c <TIM_ITRx_SetConfig>
      break;
 8013712:	e003      	b.n	801371c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013714:	2301      	movs	r3, #1
 8013716:	73fb      	strb	r3, [r7, #15]
      break;
 8013718:	e000      	b.n	801371c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801371a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2201      	movs	r2, #1
 8013720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2200      	movs	r2, #0
 8013728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801372c:	7bfb      	ldrb	r3, [r7, #15]
}
 801372e:	4618      	mov	r0, r3
 8013730:	3710      	adds	r7, #16
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
 8013736:	bf00      	nop
 8013738:	ffceff88 	.word	0xffceff88
 801373c:	00100040 	.word	0x00100040
 8013740:	00100030 	.word	0x00100030
 8013744:	00100020 	.word	0x00100020

08013748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013748:	b480      	push	{r7}
 801374a:	b083      	sub	sp, #12
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013750:	bf00      	nop
 8013752:	370c      	adds	r7, #12
 8013754:	46bd      	mov	sp, r7
 8013756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375a:	4770      	bx	lr

0801375c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801375c:	b480      	push	{r7}
 801375e:	b083      	sub	sp, #12
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013764:	bf00      	nop
 8013766:	370c      	adds	r7, #12
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013770:	b480      	push	{r7}
 8013772:	b083      	sub	sp, #12
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013778:	bf00      	nop
 801377a:	370c      	adds	r7, #12
 801377c:	46bd      	mov	sp, r7
 801377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013782:	4770      	bx	lr

08013784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013784:	b480      	push	{r7}
 8013786:	b085      	sub	sp, #20
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	4a46      	ldr	r2, [pc, #280]	; (80138b0 <TIM_Base_SetConfig+0x12c>)
 8013798:	4293      	cmp	r3, r2
 801379a:	d013      	beq.n	80137c4 <TIM_Base_SetConfig+0x40>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80137a2:	d00f      	beq.n	80137c4 <TIM_Base_SetConfig+0x40>
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	4a43      	ldr	r2, [pc, #268]	; (80138b4 <TIM_Base_SetConfig+0x130>)
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d00b      	beq.n	80137c4 <TIM_Base_SetConfig+0x40>
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4a42      	ldr	r2, [pc, #264]	; (80138b8 <TIM_Base_SetConfig+0x134>)
 80137b0:	4293      	cmp	r3, r2
 80137b2:	d007      	beq.n	80137c4 <TIM_Base_SetConfig+0x40>
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	4a41      	ldr	r2, [pc, #260]	; (80138bc <TIM_Base_SetConfig+0x138>)
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d003      	beq.n	80137c4 <TIM_Base_SetConfig+0x40>
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	4a40      	ldr	r2, [pc, #256]	; (80138c0 <TIM_Base_SetConfig+0x13c>)
 80137c0:	4293      	cmp	r3, r2
 80137c2:	d108      	bne.n	80137d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80137ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	685b      	ldr	r3, [r3, #4]
 80137d0:	68fa      	ldr	r2, [r7, #12]
 80137d2:	4313      	orrs	r3, r2
 80137d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	4a35      	ldr	r2, [pc, #212]	; (80138b0 <TIM_Base_SetConfig+0x12c>)
 80137da:	4293      	cmp	r3, r2
 80137dc:	d01f      	beq.n	801381e <TIM_Base_SetConfig+0x9a>
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80137e4:	d01b      	beq.n	801381e <TIM_Base_SetConfig+0x9a>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	4a32      	ldr	r2, [pc, #200]	; (80138b4 <TIM_Base_SetConfig+0x130>)
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d017      	beq.n	801381e <TIM_Base_SetConfig+0x9a>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	4a31      	ldr	r2, [pc, #196]	; (80138b8 <TIM_Base_SetConfig+0x134>)
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d013      	beq.n	801381e <TIM_Base_SetConfig+0x9a>
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4a30      	ldr	r2, [pc, #192]	; (80138bc <TIM_Base_SetConfig+0x138>)
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d00f      	beq.n	801381e <TIM_Base_SetConfig+0x9a>
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	4a2f      	ldr	r2, [pc, #188]	; (80138c0 <TIM_Base_SetConfig+0x13c>)
 8013802:	4293      	cmp	r3, r2
 8013804:	d00b      	beq.n	801381e <TIM_Base_SetConfig+0x9a>
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	4a2e      	ldr	r2, [pc, #184]	; (80138c4 <TIM_Base_SetConfig+0x140>)
 801380a:	4293      	cmp	r3, r2
 801380c:	d007      	beq.n	801381e <TIM_Base_SetConfig+0x9a>
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	4a2d      	ldr	r2, [pc, #180]	; (80138c8 <TIM_Base_SetConfig+0x144>)
 8013812:	4293      	cmp	r3, r2
 8013814:	d003      	beq.n	801381e <TIM_Base_SetConfig+0x9a>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	4a2c      	ldr	r2, [pc, #176]	; (80138cc <TIM_Base_SetConfig+0x148>)
 801381a:	4293      	cmp	r3, r2
 801381c:	d108      	bne.n	8013830 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	68db      	ldr	r3, [r3, #12]
 801382a:	68fa      	ldr	r2, [r7, #12]
 801382c:	4313      	orrs	r3, r2
 801382e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	695b      	ldr	r3, [r3, #20]
 801383a:	4313      	orrs	r3, r2
 801383c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	68fa      	ldr	r2, [r7, #12]
 8013842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	689a      	ldr	r2, [r3, #8]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	681a      	ldr	r2, [r3, #0]
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	4a16      	ldr	r2, [pc, #88]	; (80138b0 <TIM_Base_SetConfig+0x12c>)
 8013858:	4293      	cmp	r3, r2
 801385a:	d00f      	beq.n	801387c <TIM_Base_SetConfig+0xf8>
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	4a18      	ldr	r2, [pc, #96]	; (80138c0 <TIM_Base_SetConfig+0x13c>)
 8013860:	4293      	cmp	r3, r2
 8013862:	d00b      	beq.n	801387c <TIM_Base_SetConfig+0xf8>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	4a17      	ldr	r2, [pc, #92]	; (80138c4 <TIM_Base_SetConfig+0x140>)
 8013868:	4293      	cmp	r3, r2
 801386a:	d007      	beq.n	801387c <TIM_Base_SetConfig+0xf8>
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	4a16      	ldr	r2, [pc, #88]	; (80138c8 <TIM_Base_SetConfig+0x144>)
 8013870:	4293      	cmp	r3, r2
 8013872:	d003      	beq.n	801387c <TIM_Base_SetConfig+0xf8>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	4a15      	ldr	r2, [pc, #84]	; (80138cc <TIM_Base_SetConfig+0x148>)
 8013878:	4293      	cmp	r3, r2
 801387a:	d103      	bne.n	8013884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	691a      	ldr	r2, [r3, #16]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2201      	movs	r2, #1
 8013888:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	691b      	ldr	r3, [r3, #16]
 801388e:	f003 0301 	and.w	r3, r3, #1
 8013892:	2b01      	cmp	r3, #1
 8013894:	d105      	bne.n	80138a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	691b      	ldr	r3, [r3, #16]
 801389a:	f023 0201 	bic.w	r2, r3, #1
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	611a      	str	r2, [r3, #16]
  }
}
 80138a2:	bf00      	nop
 80138a4:	3714      	adds	r7, #20
 80138a6:	46bd      	mov	sp, r7
 80138a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ac:	4770      	bx	lr
 80138ae:	bf00      	nop
 80138b0:	40010000 	.word	0x40010000
 80138b4:	40000400 	.word	0x40000400
 80138b8:	40000800 	.word	0x40000800
 80138bc:	40000c00 	.word	0x40000c00
 80138c0:	40010400 	.word	0x40010400
 80138c4:	40014000 	.word	0x40014000
 80138c8:	40014400 	.word	0x40014400
 80138cc:	40014800 	.word	0x40014800

080138d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80138d0:	b480      	push	{r7}
 80138d2:	b087      	sub	sp, #28
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
 80138d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6a1b      	ldr	r3, [r3, #32]
 80138de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6a1b      	ldr	r3, [r3, #32]
 80138e4:	f023 0201 	bic.w	r2, r3, #1
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	699b      	ldr	r3, [r3, #24]
 80138f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80138f8:	68fa      	ldr	r2, [r7, #12]
 80138fa:	4b37      	ldr	r3, [pc, #220]	; (80139d8 <TIM_OC1_SetConfig+0x108>)
 80138fc:	4013      	ands	r3, r2
 80138fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	f023 0303 	bic.w	r3, r3, #3
 8013906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	68fa      	ldr	r2, [r7, #12]
 801390e:	4313      	orrs	r3, r2
 8013910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	f023 0302 	bic.w	r3, r3, #2
 8013918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	689b      	ldr	r3, [r3, #8]
 801391e:	697a      	ldr	r2, [r7, #20]
 8013920:	4313      	orrs	r3, r2
 8013922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	4a2d      	ldr	r2, [pc, #180]	; (80139dc <TIM_OC1_SetConfig+0x10c>)
 8013928:	4293      	cmp	r3, r2
 801392a:	d00f      	beq.n	801394c <TIM_OC1_SetConfig+0x7c>
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	4a2c      	ldr	r2, [pc, #176]	; (80139e0 <TIM_OC1_SetConfig+0x110>)
 8013930:	4293      	cmp	r3, r2
 8013932:	d00b      	beq.n	801394c <TIM_OC1_SetConfig+0x7c>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	4a2b      	ldr	r2, [pc, #172]	; (80139e4 <TIM_OC1_SetConfig+0x114>)
 8013938:	4293      	cmp	r3, r2
 801393a:	d007      	beq.n	801394c <TIM_OC1_SetConfig+0x7c>
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	4a2a      	ldr	r2, [pc, #168]	; (80139e8 <TIM_OC1_SetConfig+0x118>)
 8013940:	4293      	cmp	r3, r2
 8013942:	d003      	beq.n	801394c <TIM_OC1_SetConfig+0x7c>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	4a29      	ldr	r2, [pc, #164]	; (80139ec <TIM_OC1_SetConfig+0x11c>)
 8013948:	4293      	cmp	r3, r2
 801394a:	d10c      	bne.n	8013966 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	f023 0308 	bic.w	r3, r3, #8
 8013952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013954:	683b      	ldr	r3, [r7, #0]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	697a      	ldr	r2, [r7, #20]
 801395a:	4313      	orrs	r3, r2
 801395c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	f023 0304 	bic.w	r3, r3, #4
 8013964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	4a1c      	ldr	r2, [pc, #112]	; (80139dc <TIM_OC1_SetConfig+0x10c>)
 801396a:	4293      	cmp	r3, r2
 801396c:	d00f      	beq.n	801398e <TIM_OC1_SetConfig+0xbe>
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	4a1b      	ldr	r2, [pc, #108]	; (80139e0 <TIM_OC1_SetConfig+0x110>)
 8013972:	4293      	cmp	r3, r2
 8013974:	d00b      	beq.n	801398e <TIM_OC1_SetConfig+0xbe>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	4a1a      	ldr	r2, [pc, #104]	; (80139e4 <TIM_OC1_SetConfig+0x114>)
 801397a:	4293      	cmp	r3, r2
 801397c:	d007      	beq.n	801398e <TIM_OC1_SetConfig+0xbe>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4a19      	ldr	r2, [pc, #100]	; (80139e8 <TIM_OC1_SetConfig+0x118>)
 8013982:	4293      	cmp	r3, r2
 8013984:	d003      	beq.n	801398e <TIM_OC1_SetConfig+0xbe>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4a18      	ldr	r2, [pc, #96]	; (80139ec <TIM_OC1_SetConfig+0x11c>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d111      	bne.n	80139b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013996:	693b      	ldr	r3, [r7, #16]
 8013998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801399c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	695b      	ldr	r3, [r3, #20]
 80139a2:	693a      	ldr	r2, [r7, #16]
 80139a4:	4313      	orrs	r3, r2
 80139a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	699b      	ldr	r3, [r3, #24]
 80139ac:	693a      	ldr	r2, [r7, #16]
 80139ae:	4313      	orrs	r3, r2
 80139b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	693a      	ldr	r2, [r7, #16]
 80139b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	68fa      	ldr	r2, [r7, #12]
 80139bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	685a      	ldr	r2, [r3, #4]
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	697a      	ldr	r2, [r7, #20]
 80139ca:	621a      	str	r2, [r3, #32]
}
 80139cc:	bf00      	nop
 80139ce:	371c      	adds	r7, #28
 80139d0:	46bd      	mov	sp, r7
 80139d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d6:	4770      	bx	lr
 80139d8:	fffeff8f 	.word	0xfffeff8f
 80139dc:	40010000 	.word	0x40010000
 80139e0:	40010400 	.word	0x40010400
 80139e4:	40014000 	.word	0x40014000
 80139e8:	40014400 	.word	0x40014400
 80139ec:	40014800 	.word	0x40014800

080139f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80139f0:	b480      	push	{r7}
 80139f2:	b087      	sub	sp, #28
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
 80139f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6a1b      	ldr	r3, [r3, #32]
 80139fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6a1b      	ldr	r3, [r3, #32]
 8013a04:	f023 0210 	bic.w	r2, r3, #16
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	699b      	ldr	r3, [r3, #24]
 8013a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013a18:	68fa      	ldr	r2, [r7, #12]
 8013a1a:	4b34      	ldr	r3, [pc, #208]	; (8013aec <TIM_OC2_SetConfig+0xfc>)
 8013a1c:	4013      	ands	r3, r2
 8013a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	021b      	lsls	r3, r3, #8
 8013a2e:	68fa      	ldr	r2, [r7, #12]
 8013a30:	4313      	orrs	r3, r2
 8013a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	f023 0320 	bic.w	r3, r3, #32
 8013a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	689b      	ldr	r3, [r3, #8]
 8013a40:	011b      	lsls	r3, r3, #4
 8013a42:	697a      	ldr	r2, [r7, #20]
 8013a44:	4313      	orrs	r3, r2
 8013a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	4a29      	ldr	r2, [pc, #164]	; (8013af0 <TIM_OC2_SetConfig+0x100>)
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d003      	beq.n	8013a58 <TIM_OC2_SetConfig+0x68>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	4a28      	ldr	r2, [pc, #160]	; (8013af4 <TIM_OC2_SetConfig+0x104>)
 8013a54:	4293      	cmp	r3, r2
 8013a56:	d10d      	bne.n	8013a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013a58:	697b      	ldr	r3, [r7, #20]
 8013a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	011b      	lsls	r3, r3, #4
 8013a66:	697a      	ldr	r2, [r7, #20]
 8013a68:	4313      	orrs	r3, r2
 8013a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	4a1e      	ldr	r2, [pc, #120]	; (8013af0 <TIM_OC2_SetConfig+0x100>)
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	d00f      	beq.n	8013a9c <TIM_OC2_SetConfig+0xac>
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	4a1d      	ldr	r2, [pc, #116]	; (8013af4 <TIM_OC2_SetConfig+0x104>)
 8013a80:	4293      	cmp	r3, r2
 8013a82:	d00b      	beq.n	8013a9c <TIM_OC2_SetConfig+0xac>
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	4a1c      	ldr	r2, [pc, #112]	; (8013af8 <TIM_OC2_SetConfig+0x108>)
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d007      	beq.n	8013a9c <TIM_OC2_SetConfig+0xac>
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	4a1b      	ldr	r2, [pc, #108]	; (8013afc <TIM_OC2_SetConfig+0x10c>)
 8013a90:	4293      	cmp	r3, r2
 8013a92:	d003      	beq.n	8013a9c <TIM_OC2_SetConfig+0xac>
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	4a1a      	ldr	r2, [pc, #104]	; (8013b00 <TIM_OC2_SetConfig+0x110>)
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	d113      	bne.n	8013ac4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013a9c:	693b      	ldr	r3, [r7, #16]
 8013a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013aa4:	693b      	ldr	r3, [r7, #16]
 8013aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	695b      	ldr	r3, [r3, #20]
 8013ab0:	009b      	lsls	r3, r3, #2
 8013ab2:	693a      	ldr	r2, [r7, #16]
 8013ab4:	4313      	orrs	r3, r2
 8013ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013ab8:	683b      	ldr	r3, [r7, #0]
 8013aba:	699b      	ldr	r3, [r3, #24]
 8013abc:	009b      	lsls	r3, r3, #2
 8013abe:	693a      	ldr	r2, [r7, #16]
 8013ac0:	4313      	orrs	r3, r2
 8013ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	693a      	ldr	r2, [r7, #16]
 8013ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	68fa      	ldr	r2, [r7, #12]
 8013ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	685a      	ldr	r2, [r3, #4]
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	697a      	ldr	r2, [r7, #20]
 8013adc:	621a      	str	r2, [r3, #32]
}
 8013ade:	bf00      	nop
 8013ae0:	371c      	adds	r7, #28
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae8:	4770      	bx	lr
 8013aea:	bf00      	nop
 8013aec:	feff8fff 	.word	0xfeff8fff
 8013af0:	40010000 	.word	0x40010000
 8013af4:	40010400 	.word	0x40010400
 8013af8:	40014000 	.word	0x40014000
 8013afc:	40014400 	.word	0x40014400
 8013b00:	40014800 	.word	0x40014800

08013b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b087      	sub	sp, #28
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6a1b      	ldr	r3, [r3, #32]
 8013b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	6a1b      	ldr	r3, [r3, #32]
 8013b18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	69db      	ldr	r3, [r3, #28]
 8013b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013b2c:	68fa      	ldr	r2, [r7, #12]
 8013b2e:	4b33      	ldr	r3, [pc, #204]	; (8013bfc <TIM_OC3_SetConfig+0xf8>)
 8013b30:	4013      	ands	r3, r2
 8013b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	f023 0303 	bic.w	r3, r3, #3
 8013b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	68fa      	ldr	r2, [r7, #12]
 8013b42:	4313      	orrs	r3, r2
 8013b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	689b      	ldr	r3, [r3, #8]
 8013b52:	021b      	lsls	r3, r3, #8
 8013b54:	697a      	ldr	r2, [r7, #20]
 8013b56:	4313      	orrs	r3, r2
 8013b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	4a28      	ldr	r2, [pc, #160]	; (8013c00 <TIM_OC3_SetConfig+0xfc>)
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	d003      	beq.n	8013b6a <TIM_OC3_SetConfig+0x66>
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4a27      	ldr	r2, [pc, #156]	; (8013c04 <TIM_OC3_SetConfig+0x100>)
 8013b66:	4293      	cmp	r3, r2
 8013b68:	d10d      	bne.n	8013b86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	68db      	ldr	r3, [r3, #12]
 8013b76:	021b      	lsls	r3, r3, #8
 8013b78:	697a      	ldr	r2, [r7, #20]
 8013b7a:	4313      	orrs	r3, r2
 8013b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	4a1d      	ldr	r2, [pc, #116]	; (8013c00 <TIM_OC3_SetConfig+0xfc>)
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	d00f      	beq.n	8013bae <TIM_OC3_SetConfig+0xaa>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	4a1c      	ldr	r2, [pc, #112]	; (8013c04 <TIM_OC3_SetConfig+0x100>)
 8013b92:	4293      	cmp	r3, r2
 8013b94:	d00b      	beq.n	8013bae <TIM_OC3_SetConfig+0xaa>
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	4a1b      	ldr	r2, [pc, #108]	; (8013c08 <TIM_OC3_SetConfig+0x104>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d007      	beq.n	8013bae <TIM_OC3_SetConfig+0xaa>
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	4a1a      	ldr	r2, [pc, #104]	; (8013c0c <TIM_OC3_SetConfig+0x108>)
 8013ba2:	4293      	cmp	r3, r2
 8013ba4:	d003      	beq.n	8013bae <TIM_OC3_SetConfig+0xaa>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	4a19      	ldr	r2, [pc, #100]	; (8013c10 <TIM_OC3_SetConfig+0x10c>)
 8013baa:	4293      	cmp	r3, r2
 8013bac:	d113      	bne.n	8013bd6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013bb6:	693b      	ldr	r3, [r7, #16]
 8013bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	695b      	ldr	r3, [r3, #20]
 8013bc2:	011b      	lsls	r3, r3, #4
 8013bc4:	693a      	ldr	r2, [r7, #16]
 8013bc6:	4313      	orrs	r3, r2
 8013bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	699b      	ldr	r3, [r3, #24]
 8013bce:	011b      	lsls	r3, r3, #4
 8013bd0:	693a      	ldr	r2, [r7, #16]
 8013bd2:	4313      	orrs	r3, r2
 8013bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	693a      	ldr	r2, [r7, #16]
 8013bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	68fa      	ldr	r2, [r7, #12]
 8013be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	685a      	ldr	r2, [r3, #4]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	697a      	ldr	r2, [r7, #20]
 8013bee:	621a      	str	r2, [r3, #32]
}
 8013bf0:	bf00      	nop
 8013bf2:	371c      	adds	r7, #28
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfa:	4770      	bx	lr
 8013bfc:	fffeff8f 	.word	0xfffeff8f
 8013c00:	40010000 	.word	0x40010000
 8013c04:	40010400 	.word	0x40010400
 8013c08:	40014000 	.word	0x40014000
 8013c0c:	40014400 	.word	0x40014400
 8013c10:	40014800 	.word	0x40014800

08013c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013c14:	b480      	push	{r7}
 8013c16:	b087      	sub	sp, #28
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6a1b      	ldr	r3, [r3, #32]
 8013c22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6a1b      	ldr	r3, [r3, #32]
 8013c28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	685b      	ldr	r3, [r3, #4]
 8013c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	69db      	ldr	r3, [r3, #28]
 8013c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013c3c:	68fa      	ldr	r2, [r7, #12]
 8013c3e:	4b24      	ldr	r3, [pc, #144]	; (8013cd0 <TIM_OC4_SetConfig+0xbc>)
 8013c40:	4013      	ands	r3, r2
 8013c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	021b      	lsls	r3, r3, #8
 8013c52:	68fa      	ldr	r2, [r7, #12]
 8013c54:	4313      	orrs	r3, r2
 8013c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	031b      	lsls	r3, r3, #12
 8013c66:	693a      	ldr	r2, [r7, #16]
 8013c68:	4313      	orrs	r3, r2
 8013c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	4a19      	ldr	r2, [pc, #100]	; (8013cd4 <TIM_OC4_SetConfig+0xc0>)
 8013c70:	4293      	cmp	r3, r2
 8013c72:	d00f      	beq.n	8013c94 <TIM_OC4_SetConfig+0x80>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	4a18      	ldr	r2, [pc, #96]	; (8013cd8 <TIM_OC4_SetConfig+0xc4>)
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d00b      	beq.n	8013c94 <TIM_OC4_SetConfig+0x80>
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	4a17      	ldr	r2, [pc, #92]	; (8013cdc <TIM_OC4_SetConfig+0xc8>)
 8013c80:	4293      	cmp	r3, r2
 8013c82:	d007      	beq.n	8013c94 <TIM_OC4_SetConfig+0x80>
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	4a16      	ldr	r2, [pc, #88]	; (8013ce0 <TIM_OC4_SetConfig+0xcc>)
 8013c88:	4293      	cmp	r3, r2
 8013c8a:	d003      	beq.n	8013c94 <TIM_OC4_SetConfig+0x80>
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	4a15      	ldr	r2, [pc, #84]	; (8013ce4 <TIM_OC4_SetConfig+0xd0>)
 8013c90:	4293      	cmp	r3, r2
 8013c92:	d109      	bne.n	8013ca8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	695b      	ldr	r3, [r3, #20]
 8013ca0:	019b      	lsls	r3, r3, #6
 8013ca2:	697a      	ldr	r2, [r7, #20]
 8013ca4:	4313      	orrs	r3, r2
 8013ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	697a      	ldr	r2, [r7, #20]
 8013cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	68fa      	ldr	r2, [r7, #12]
 8013cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	685a      	ldr	r2, [r3, #4]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	693a      	ldr	r2, [r7, #16]
 8013cc0:	621a      	str	r2, [r3, #32]
}
 8013cc2:	bf00      	nop
 8013cc4:	371c      	adds	r7, #28
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ccc:	4770      	bx	lr
 8013cce:	bf00      	nop
 8013cd0:	feff8fff 	.word	0xfeff8fff
 8013cd4:	40010000 	.word	0x40010000
 8013cd8:	40010400 	.word	0x40010400
 8013cdc:	40014000 	.word	0x40014000
 8013ce0:	40014400 	.word	0x40014400
 8013ce4:	40014800 	.word	0x40014800

08013ce8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b087      	sub	sp, #28
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	6a1b      	ldr	r3, [r3, #32]
 8013cf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	6a1b      	ldr	r3, [r3, #32]
 8013cfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013d10:	68fa      	ldr	r2, [r7, #12]
 8013d12:	4b21      	ldr	r3, [pc, #132]	; (8013d98 <TIM_OC5_SetConfig+0xb0>)
 8013d14:	4013      	ands	r3, r2
 8013d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	68fa      	ldr	r2, [r7, #12]
 8013d1e:	4313      	orrs	r3, r2
 8013d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013d28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	689b      	ldr	r3, [r3, #8]
 8013d2e:	041b      	lsls	r3, r3, #16
 8013d30:	693a      	ldr	r2, [r7, #16]
 8013d32:	4313      	orrs	r3, r2
 8013d34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4a18      	ldr	r2, [pc, #96]	; (8013d9c <TIM_OC5_SetConfig+0xb4>)
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d00f      	beq.n	8013d5e <TIM_OC5_SetConfig+0x76>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	4a17      	ldr	r2, [pc, #92]	; (8013da0 <TIM_OC5_SetConfig+0xb8>)
 8013d42:	4293      	cmp	r3, r2
 8013d44:	d00b      	beq.n	8013d5e <TIM_OC5_SetConfig+0x76>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4a16      	ldr	r2, [pc, #88]	; (8013da4 <TIM_OC5_SetConfig+0xbc>)
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d007      	beq.n	8013d5e <TIM_OC5_SetConfig+0x76>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4a15      	ldr	r2, [pc, #84]	; (8013da8 <TIM_OC5_SetConfig+0xc0>)
 8013d52:	4293      	cmp	r3, r2
 8013d54:	d003      	beq.n	8013d5e <TIM_OC5_SetConfig+0x76>
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	4a14      	ldr	r2, [pc, #80]	; (8013dac <TIM_OC5_SetConfig+0xc4>)
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	d109      	bne.n	8013d72 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013d64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	695b      	ldr	r3, [r3, #20]
 8013d6a:	021b      	lsls	r3, r3, #8
 8013d6c:	697a      	ldr	r2, [r7, #20]
 8013d6e:	4313      	orrs	r3, r2
 8013d70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	697a      	ldr	r2, [r7, #20]
 8013d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	68fa      	ldr	r2, [r7, #12]
 8013d7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	685a      	ldr	r2, [r3, #4]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	693a      	ldr	r2, [r7, #16]
 8013d8a:	621a      	str	r2, [r3, #32]
}
 8013d8c:	bf00      	nop
 8013d8e:	371c      	adds	r7, #28
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr
 8013d98:	fffeff8f 	.word	0xfffeff8f
 8013d9c:	40010000 	.word	0x40010000
 8013da0:	40010400 	.word	0x40010400
 8013da4:	40014000 	.word	0x40014000
 8013da8:	40014400 	.word	0x40014400
 8013dac:	40014800 	.word	0x40014800

08013db0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b087      	sub	sp, #28
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6a1b      	ldr	r3, [r3, #32]
 8013dbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	6a1b      	ldr	r3, [r3, #32]
 8013dc4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	685b      	ldr	r3, [r3, #4]
 8013dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013dd8:	68fa      	ldr	r2, [r7, #12]
 8013dda:	4b22      	ldr	r3, [pc, #136]	; (8013e64 <TIM_OC6_SetConfig+0xb4>)
 8013ddc:	4013      	ands	r3, r2
 8013dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013de0:	683b      	ldr	r3, [r7, #0]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	021b      	lsls	r3, r3, #8
 8013de6:	68fa      	ldr	r2, [r7, #12]
 8013de8:	4313      	orrs	r3, r2
 8013dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	689b      	ldr	r3, [r3, #8]
 8013df8:	051b      	lsls	r3, r3, #20
 8013dfa:	693a      	ldr	r2, [r7, #16]
 8013dfc:	4313      	orrs	r3, r2
 8013dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	4a19      	ldr	r2, [pc, #100]	; (8013e68 <TIM_OC6_SetConfig+0xb8>)
 8013e04:	4293      	cmp	r3, r2
 8013e06:	d00f      	beq.n	8013e28 <TIM_OC6_SetConfig+0x78>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	4a18      	ldr	r2, [pc, #96]	; (8013e6c <TIM_OC6_SetConfig+0xbc>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d00b      	beq.n	8013e28 <TIM_OC6_SetConfig+0x78>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4a17      	ldr	r2, [pc, #92]	; (8013e70 <TIM_OC6_SetConfig+0xc0>)
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d007      	beq.n	8013e28 <TIM_OC6_SetConfig+0x78>
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	4a16      	ldr	r2, [pc, #88]	; (8013e74 <TIM_OC6_SetConfig+0xc4>)
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d003      	beq.n	8013e28 <TIM_OC6_SetConfig+0x78>
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	4a15      	ldr	r2, [pc, #84]	; (8013e78 <TIM_OC6_SetConfig+0xc8>)
 8013e24:	4293      	cmp	r3, r2
 8013e26:	d109      	bne.n	8013e3c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	695b      	ldr	r3, [r3, #20]
 8013e34:	029b      	lsls	r3, r3, #10
 8013e36:	697a      	ldr	r2, [r7, #20]
 8013e38:	4313      	orrs	r3, r2
 8013e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	697a      	ldr	r2, [r7, #20]
 8013e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	68fa      	ldr	r2, [r7, #12]
 8013e46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	685a      	ldr	r2, [r3, #4]
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	693a      	ldr	r2, [r7, #16]
 8013e54:	621a      	str	r2, [r3, #32]
}
 8013e56:	bf00      	nop
 8013e58:	371c      	adds	r7, #28
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e60:	4770      	bx	lr
 8013e62:	bf00      	nop
 8013e64:	feff8fff 	.word	0xfeff8fff
 8013e68:	40010000 	.word	0x40010000
 8013e6c:	40010400 	.word	0x40010400
 8013e70:	40014000 	.word	0x40014000
 8013e74:	40014400 	.word	0x40014400
 8013e78:	40014800 	.word	0x40014800

08013e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	b087      	sub	sp, #28
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	60b9      	str	r1, [r7, #8]
 8013e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	6a1b      	ldr	r3, [r3, #32]
 8013e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	6a1b      	ldr	r3, [r3, #32]
 8013e92:	f023 0201 	bic.w	r2, r3, #1
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	699b      	ldr	r3, [r3, #24]
 8013e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013ea0:	693b      	ldr	r3, [r7, #16]
 8013ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	011b      	lsls	r3, r3, #4
 8013eac:	693a      	ldr	r2, [r7, #16]
 8013eae:	4313      	orrs	r3, r2
 8013eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	f023 030a 	bic.w	r3, r3, #10
 8013eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013eba:	697a      	ldr	r2, [r7, #20]
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	4313      	orrs	r3, r2
 8013ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	693a      	ldr	r2, [r7, #16]
 8013ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	697a      	ldr	r2, [r7, #20]
 8013ecc:	621a      	str	r2, [r3, #32]
}
 8013ece:	bf00      	nop
 8013ed0:	371c      	adds	r7, #28
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr

08013eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013eda:	b480      	push	{r7}
 8013edc:	b087      	sub	sp, #28
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	60f8      	str	r0, [r7, #12]
 8013ee2:	60b9      	str	r1, [r7, #8]
 8013ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	6a1b      	ldr	r3, [r3, #32]
 8013eea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	6a1b      	ldr	r3, [r3, #32]
 8013ef0:	f023 0210 	bic.w	r2, r3, #16
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	699b      	ldr	r3, [r3, #24]
 8013efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	031b      	lsls	r3, r3, #12
 8013f0a:	693a      	ldr	r2, [r7, #16]
 8013f0c:	4313      	orrs	r3, r2
 8013f0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013f16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	011b      	lsls	r3, r3, #4
 8013f1c:	697a      	ldr	r2, [r7, #20]
 8013f1e:	4313      	orrs	r3, r2
 8013f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	693a      	ldr	r2, [r7, #16]
 8013f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	697a      	ldr	r2, [r7, #20]
 8013f2c:	621a      	str	r2, [r3, #32]
}
 8013f2e:	bf00      	nop
 8013f30:	371c      	adds	r7, #28
 8013f32:	46bd      	mov	sp, r7
 8013f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f38:	4770      	bx	lr
	...

08013f3c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	b085      	sub	sp, #20
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	689b      	ldr	r3, [r3, #8]
 8013f4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013f4c:	68fa      	ldr	r2, [r7, #12]
 8013f4e:	4b09      	ldr	r3, [pc, #36]	; (8013f74 <TIM_ITRx_SetConfig+0x38>)
 8013f50:	4013      	ands	r3, r2
 8013f52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013f54:	683a      	ldr	r2, [r7, #0]
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	4313      	orrs	r3, r2
 8013f5a:	f043 0307 	orr.w	r3, r3, #7
 8013f5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	68fa      	ldr	r2, [r7, #12]
 8013f64:	609a      	str	r2, [r3, #8]
}
 8013f66:	bf00      	nop
 8013f68:	3714      	adds	r7, #20
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f70:	4770      	bx	lr
 8013f72:	bf00      	nop
 8013f74:	ffcfff8f 	.word	0xffcfff8f

08013f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013f78:	b480      	push	{r7}
 8013f7a:	b087      	sub	sp, #28
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	60f8      	str	r0, [r7, #12]
 8013f80:	60b9      	str	r1, [r7, #8]
 8013f82:	607a      	str	r2, [r7, #4]
 8013f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	689b      	ldr	r3, [r3, #8]
 8013f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	021a      	lsls	r2, r3, #8
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	431a      	orrs	r2, r3
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	4313      	orrs	r3, r2
 8013fa0:	697a      	ldr	r2, [r7, #20]
 8013fa2:	4313      	orrs	r3, r2
 8013fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	697a      	ldr	r2, [r7, #20]
 8013faa:	609a      	str	r2, [r3, #8]
}
 8013fac:	bf00      	nop
 8013fae:	371c      	adds	r7, #28
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb6:	4770      	bx	lr

08013fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b087      	sub	sp, #28
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	f003 031f 	and.w	r3, r3, #31
 8013fca:	2201      	movs	r2, #1
 8013fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8013fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	6a1a      	ldr	r2, [r3, #32]
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	43db      	mvns	r3, r3
 8013fda:	401a      	ands	r2, r3
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	6a1a      	ldr	r2, [r3, #32]
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	f003 031f 	and.w	r3, r3, #31
 8013fea:	6879      	ldr	r1, [r7, #4]
 8013fec:	fa01 f303 	lsl.w	r3, r1, r3
 8013ff0:	431a      	orrs	r2, r3
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	621a      	str	r2, [r3, #32]
}
 8013ff6:	bf00      	nop
 8013ff8:	371c      	adds	r7, #28
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014000:	4770      	bx	lr
	...

08014004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014004:	b480      	push	{r7}
 8014006:	b085      	sub	sp, #20
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014014:	2b01      	cmp	r3, #1
 8014016:	d101      	bne.n	801401c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014018:	2302      	movs	r3, #2
 801401a:	e06d      	b.n	80140f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2201      	movs	r2, #1
 8014020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2202      	movs	r2, #2
 8014028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	689b      	ldr	r3, [r3, #8]
 801403a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4a30      	ldr	r2, [pc, #192]	; (8014104 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014042:	4293      	cmp	r3, r2
 8014044:	d004      	beq.n	8014050 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	4a2f      	ldr	r2, [pc, #188]	; (8014108 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801404c:	4293      	cmp	r3, r2
 801404e:	d108      	bne.n	8014062 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8014056:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	685b      	ldr	r3, [r3, #4]
 801405c:	68fa      	ldr	r2, [r7, #12]
 801405e:	4313      	orrs	r3, r2
 8014060:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014068:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	68fa      	ldr	r2, [r7, #12]
 8014070:	4313      	orrs	r3, r2
 8014072:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	68fa      	ldr	r2, [r7, #12]
 801407a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	4a20      	ldr	r2, [pc, #128]	; (8014104 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014082:	4293      	cmp	r3, r2
 8014084:	d022      	beq.n	80140cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801408e:	d01d      	beq.n	80140cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	4a1d      	ldr	r2, [pc, #116]	; (801410c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014096:	4293      	cmp	r3, r2
 8014098:	d018      	beq.n	80140cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	4a1c      	ldr	r2, [pc, #112]	; (8014110 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80140a0:	4293      	cmp	r3, r2
 80140a2:	d013      	beq.n	80140cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	4a1a      	ldr	r2, [pc, #104]	; (8014114 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80140aa:	4293      	cmp	r3, r2
 80140ac:	d00e      	beq.n	80140cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	4a15      	ldr	r2, [pc, #84]	; (8014108 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80140b4:	4293      	cmp	r3, r2
 80140b6:	d009      	beq.n	80140cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4a16      	ldr	r2, [pc, #88]	; (8014118 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80140be:	4293      	cmp	r3, r2
 80140c0:	d004      	beq.n	80140cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4a15      	ldr	r2, [pc, #84]	; (801411c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80140c8:	4293      	cmp	r3, r2
 80140ca:	d10c      	bne.n	80140e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80140d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	689b      	ldr	r3, [r3, #8]
 80140d8:	68ba      	ldr	r2, [r7, #8]
 80140da:	4313      	orrs	r3, r2
 80140dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	68ba      	ldr	r2, [r7, #8]
 80140e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2201      	movs	r2, #1
 80140ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2200      	movs	r2, #0
 80140f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80140f6:	2300      	movs	r3, #0
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3714      	adds	r7, #20
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr
 8014104:	40010000 	.word	0x40010000
 8014108:	40010400 	.word	0x40010400
 801410c:	40000400 	.word	0x40000400
 8014110:	40000800 	.word	0x40000800
 8014114:	40000c00 	.word	0x40000c00
 8014118:	40001800 	.word	0x40001800
 801411c:	40014000 	.word	0x40014000

08014120 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014120:	b480      	push	{r7}
 8014122:	b085      	sub	sp, #20
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
 8014128:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801412a:	2300      	movs	r3, #0
 801412c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014134:	2b01      	cmp	r3, #1
 8014136:	d101      	bne.n	801413c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014138:	2302      	movs	r3, #2
 801413a:	e065      	b.n	8014208 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2201      	movs	r2, #1
 8014140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	68db      	ldr	r3, [r3, #12]
 801414e:	4313      	orrs	r3, r2
 8014150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	689b      	ldr	r3, [r3, #8]
 801415c:	4313      	orrs	r3, r2
 801415e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	685b      	ldr	r3, [r3, #4]
 801416a:	4313      	orrs	r3, r2
 801416c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	4313      	orrs	r3, r2
 801417a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014182:	683b      	ldr	r3, [r7, #0]
 8014184:	691b      	ldr	r3, [r3, #16]
 8014186:	4313      	orrs	r3, r2
 8014188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	695b      	ldr	r3, [r3, #20]
 8014194:	4313      	orrs	r3, r2
 8014196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141a2:	4313      	orrs	r3, r2
 80141a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	699b      	ldr	r3, [r3, #24]
 80141b0:	041b      	lsls	r3, r3, #16
 80141b2:	4313      	orrs	r3, r2
 80141b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	4a16      	ldr	r2, [pc, #88]	; (8014214 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80141bc:	4293      	cmp	r3, r2
 80141be:	d004      	beq.n	80141ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	4a14      	ldr	r2, [pc, #80]	; (8014218 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80141c6:	4293      	cmp	r3, r2
 80141c8:	d115      	bne.n	80141f6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141d4:	051b      	lsls	r3, r3, #20
 80141d6:	4313      	orrs	r3, r2
 80141d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	69db      	ldr	r3, [r3, #28]
 80141e4:	4313      	orrs	r3, r2
 80141e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	6a1b      	ldr	r3, [r3, #32]
 80141f2:	4313      	orrs	r3, r2
 80141f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2200      	movs	r2, #0
 8014202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014206:	2300      	movs	r3, #0
}
 8014208:	4618      	mov	r0, r3
 801420a:	3714      	adds	r7, #20
 801420c:	46bd      	mov	sp, r7
 801420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014212:	4770      	bx	lr
 8014214:	40010000 	.word	0x40010000
 8014218:	40010400 	.word	0x40010400

0801421c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801421c:	b480      	push	{r7}
 801421e:	b083      	sub	sp, #12
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014224:	bf00      	nop
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr

08014230 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014230:	b480      	push	{r7}
 8014232:	b083      	sub	sp, #12
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014238:	bf00      	nop
 801423a:	370c      	adds	r7, #12
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr

08014244 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014244:	b480      	push	{r7}
 8014246:	b083      	sub	sp, #12
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801424c:	bf00      	nop
 801424e:	370c      	adds	r7, #12
 8014250:	46bd      	mov	sp, r7
 8014252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014256:	4770      	bx	lr

08014258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d101      	bne.n	801426a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014266:	2301      	movs	r3, #1
 8014268:	e042      	b.n	80142f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014270:	2b00      	cmp	r3, #0
 8014272:	d106      	bne.n	8014282 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2200      	movs	r2, #0
 8014278:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7f1 f989 	bl	8005594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2224      	movs	r2, #36	; 0x24
 8014286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	681a      	ldr	r2, [r3, #0]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	f022 0201 	bic.w	r2, r2, #1
 8014298:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d002      	beq.n	80142a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f001 fbc2 	bl	8015a2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f000 fe57 	bl	8014f5c <UART_SetConfig>
 80142ae:	4603      	mov	r3, r0
 80142b0:	2b01      	cmp	r3, #1
 80142b2:	d101      	bne.n	80142b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80142b4:	2301      	movs	r3, #1
 80142b6:	e01b      	b.n	80142f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	685a      	ldr	r2, [r3, #4]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80142c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	689a      	ldr	r2, [r3, #8]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80142d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	681a      	ldr	r2, [r3, #0]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	f042 0201 	orr.w	r2, r2, #1
 80142e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f001 fc41 	bl	8015b70 <UART_CheckIdleState>
 80142ee:	4603      	mov	r3, r0
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	3708      	adds	r7, #8
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b08a      	sub	sp, #40	; 0x28
 80142fc:	af02      	add	r7, sp, #8
 80142fe:	60f8      	str	r0, [r7, #12]
 8014300:	60b9      	str	r1, [r7, #8]
 8014302:	603b      	str	r3, [r7, #0]
 8014304:	4613      	mov	r3, r2
 8014306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801430e:	2b20      	cmp	r3, #32
 8014310:	d17b      	bne.n	801440a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d002      	beq.n	801431e <HAL_UART_Transmit+0x26>
 8014318:	88fb      	ldrh	r3, [r7, #6]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d101      	bne.n	8014322 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801431e:	2301      	movs	r3, #1
 8014320:	e074      	b.n	801440c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	2200      	movs	r2, #0
 8014326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	2221      	movs	r2, #33	; 0x21
 801432e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014332:	f7f1 fd7d 	bl	8005e30 <HAL_GetTick>
 8014336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	88fa      	ldrh	r2, [r7, #6]
 801433c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	88fa      	ldrh	r2, [r7, #6]
 8014344:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	689b      	ldr	r3, [r3, #8]
 801434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014350:	d108      	bne.n	8014364 <HAL_UART_Transmit+0x6c>
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	691b      	ldr	r3, [r3, #16]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d104      	bne.n	8014364 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801435a:	2300      	movs	r3, #0
 801435c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	61bb      	str	r3, [r7, #24]
 8014362:	e003      	b.n	801436c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014368:	2300      	movs	r3, #0
 801436a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801436c:	e030      	b.n	80143d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	9300      	str	r3, [sp, #0]
 8014372:	697b      	ldr	r3, [r7, #20]
 8014374:	2200      	movs	r2, #0
 8014376:	2180      	movs	r1, #128	; 0x80
 8014378:	68f8      	ldr	r0, [r7, #12]
 801437a:	f001 fca3 	bl	8015cc4 <UART_WaitOnFlagUntilTimeout>
 801437e:	4603      	mov	r3, r0
 8014380:	2b00      	cmp	r3, #0
 8014382:	d005      	beq.n	8014390 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	2220      	movs	r2, #32
 8014388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801438c:	2303      	movs	r3, #3
 801438e:	e03d      	b.n	801440c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8014390:	69fb      	ldr	r3, [r7, #28]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d10b      	bne.n	80143ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014396:	69bb      	ldr	r3, [r7, #24]
 8014398:	881b      	ldrh	r3, [r3, #0]
 801439a:	461a      	mov	r2, r3
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80143a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80143a6:	69bb      	ldr	r3, [r7, #24]
 80143a8:	3302      	adds	r3, #2
 80143aa:	61bb      	str	r3, [r7, #24]
 80143ac:	e007      	b.n	80143be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80143ae:	69fb      	ldr	r3, [r7, #28]
 80143b0:	781a      	ldrb	r2, [r3, #0]
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80143b8:	69fb      	ldr	r3, [r7, #28]
 80143ba:	3301      	adds	r3, #1
 80143bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80143c4:	b29b      	uxth	r3, r3
 80143c6:	3b01      	subs	r3, #1
 80143c8:	b29a      	uxth	r2, r3
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d1c8      	bne.n	801436e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	9300      	str	r3, [sp, #0]
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	2200      	movs	r2, #0
 80143e4:	2140      	movs	r1, #64	; 0x40
 80143e6:	68f8      	ldr	r0, [r7, #12]
 80143e8:	f001 fc6c 	bl	8015cc4 <UART_WaitOnFlagUntilTimeout>
 80143ec:	4603      	mov	r3, r0
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d005      	beq.n	80143fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	2220      	movs	r2, #32
 80143f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80143fa:	2303      	movs	r3, #3
 80143fc:	e006      	b.n	801440c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	2220      	movs	r2, #32
 8014402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8014406:	2300      	movs	r3, #0
 8014408:	e000      	b.n	801440c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801440a:	2302      	movs	r3, #2
  }
}
 801440c:	4618      	mov	r0, r3
 801440e:	3720      	adds	r7, #32
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}

08014414 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b08a      	sub	sp, #40	; 0x28
 8014418:	af02      	add	r7, sp, #8
 801441a:	60f8      	str	r0, [r7, #12]
 801441c:	60b9      	str	r1, [r7, #8]
 801441e:	603b      	str	r3, [r7, #0]
 8014420:	4613      	mov	r3, r2
 8014422:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801442a:	2b20      	cmp	r3, #32
 801442c:	f040 80b5 	bne.w	801459a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d002      	beq.n	801443c <HAL_UART_Receive+0x28>
 8014436:	88fb      	ldrh	r3, [r7, #6]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d101      	bne.n	8014440 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801443c:	2301      	movs	r3, #1
 801443e:	e0ad      	b.n	801459c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	2200      	movs	r2, #0
 8014444:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	2222      	movs	r2, #34	; 0x22
 801444c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	2200      	movs	r2, #0
 8014454:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014456:	f7f1 fceb 	bl	8005e30 <HAL_GetTick>
 801445a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	88fa      	ldrh	r2, [r7, #6]
 8014460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	88fa      	ldrh	r2, [r7, #6]
 8014468:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	689b      	ldr	r3, [r3, #8]
 8014470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014474:	d10e      	bne.n	8014494 <HAL_UART_Receive+0x80>
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	691b      	ldr	r3, [r3, #16]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d105      	bne.n	801448a <HAL_UART_Receive+0x76>
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014484:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014488:	e02d      	b.n	80144e6 <HAL_UART_Receive+0xd2>
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	22ff      	movs	r2, #255	; 0xff
 801448e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014492:	e028      	b.n	80144e6 <HAL_UART_Receive+0xd2>
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	689b      	ldr	r3, [r3, #8]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d10d      	bne.n	80144b8 <HAL_UART_Receive+0xa4>
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	691b      	ldr	r3, [r3, #16]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d104      	bne.n	80144ae <HAL_UART_Receive+0x9a>
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	22ff      	movs	r2, #255	; 0xff
 80144a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144ac:	e01b      	b.n	80144e6 <HAL_UART_Receive+0xd2>
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	227f      	movs	r2, #127	; 0x7f
 80144b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144b6:	e016      	b.n	80144e6 <HAL_UART_Receive+0xd2>
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	689b      	ldr	r3, [r3, #8]
 80144bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80144c0:	d10d      	bne.n	80144de <HAL_UART_Receive+0xca>
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	691b      	ldr	r3, [r3, #16]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d104      	bne.n	80144d4 <HAL_UART_Receive+0xc0>
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	227f      	movs	r2, #127	; 0x7f
 80144ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144d2:	e008      	b.n	80144e6 <HAL_UART_Receive+0xd2>
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	223f      	movs	r2, #63	; 0x3f
 80144d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144dc:	e003      	b.n	80144e6 <HAL_UART_Receive+0xd2>
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	2200      	movs	r2, #0
 80144e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80144ec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	689b      	ldr	r3, [r3, #8]
 80144f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80144f6:	d108      	bne.n	801450a <HAL_UART_Receive+0xf6>
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	691b      	ldr	r3, [r3, #16]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d104      	bne.n	801450a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014500:	2300      	movs	r3, #0
 8014502:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	61bb      	str	r3, [r7, #24]
 8014508:	e003      	b.n	8014512 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801450e:	2300      	movs	r3, #0
 8014510:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014512:	e036      	b.n	8014582 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	9300      	str	r3, [sp, #0]
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	2200      	movs	r2, #0
 801451c:	2120      	movs	r1, #32
 801451e:	68f8      	ldr	r0, [r7, #12]
 8014520:	f001 fbd0 	bl	8015cc4 <UART_WaitOnFlagUntilTimeout>
 8014524:	4603      	mov	r3, r0
 8014526:	2b00      	cmp	r3, #0
 8014528:	d005      	beq.n	8014536 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	2220      	movs	r2, #32
 801452e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8014532:	2303      	movs	r3, #3
 8014534:	e032      	b.n	801459c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8014536:	69fb      	ldr	r3, [r7, #28]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d10c      	bne.n	8014556 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014542:	b29a      	uxth	r2, r3
 8014544:	8a7b      	ldrh	r3, [r7, #18]
 8014546:	4013      	ands	r3, r2
 8014548:	b29a      	uxth	r2, r3
 801454a:	69bb      	ldr	r3, [r7, #24]
 801454c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801454e:	69bb      	ldr	r3, [r7, #24]
 8014550:	3302      	adds	r3, #2
 8014552:	61bb      	str	r3, [r7, #24]
 8014554:	e00c      	b.n	8014570 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801455c:	b2da      	uxtb	r2, r3
 801455e:	8a7b      	ldrh	r3, [r7, #18]
 8014560:	b2db      	uxtb	r3, r3
 8014562:	4013      	ands	r3, r2
 8014564:	b2da      	uxtb	r2, r3
 8014566:	69fb      	ldr	r3, [r7, #28]
 8014568:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801456a:	69fb      	ldr	r3, [r7, #28]
 801456c:	3301      	adds	r3, #1
 801456e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014576:	b29b      	uxth	r3, r3
 8014578:	3b01      	subs	r3, #1
 801457a:	b29a      	uxth	r2, r3
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014588:	b29b      	uxth	r3, r3
 801458a:	2b00      	cmp	r3, #0
 801458c:	d1c2      	bne.n	8014514 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2220      	movs	r2, #32
 8014592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8014596:	2300      	movs	r3, #0
 8014598:	e000      	b.n	801459c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801459a:	2302      	movs	r3, #2
  }
}
 801459c:	4618      	mov	r0, r3
 801459e:	3720      	adds	r7, #32
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b08a      	sub	sp, #40	; 0x28
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	60f8      	str	r0, [r7, #12]
 80145ac:	60b9      	str	r1, [r7, #8]
 80145ae:	4613      	mov	r3, r2
 80145b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80145b8:	2b20      	cmp	r3, #32
 80145ba:	d137      	bne.n	801462c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d002      	beq.n	80145c8 <HAL_UART_Receive_IT+0x24>
 80145c2:	88fb      	ldrh	r3, [r7, #6]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d101      	bne.n	80145cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80145c8:	2301      	movs	r3, #1
 80145ca:	e030      	b.n	801462e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	2200      	movs	r2, #0
 80145d0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	4a18      	ldr	r2, [pc, #96]	; (8014638 <HAL_UART_Receive_IT+0x94>)
 80145d8:	4293      	cmp	r3, r2
 80145da:	d01f      	beq.n	801461c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	685b      	ldr	r3, [r3, #4]
 80145e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d018      	beq.n	801461c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145f0:	697b      	ldr	r3, [r7, #20]
 80145f2:	e853 3f00 	ldrex	r3, [r3]
 80145f6:	613b      	str	r3, [r7, #16]
   return(result);
 80145f8:	693b      	ldr	r3, [r7, #16]
 80145fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80145fe:	627b      	str	r3, [r7, #36]	; 0x24
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	461a      	mov	r2, r3
 8014606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014608:	623b      	str	r3, [r7, #32]
 801460a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801460c:	69f9      	ldr	r1, [r7, #28]
 801460e:	6a3a      	ldr	r2, [r7, #32]
 8014610:	e841 2300 	strex	r3, r2, [r1]
 8014614:	61bb      	str	r3, [r7, #24]
   return(result);
 8014616:	69bb      	ldr	r3, [r7, #24]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d1e6      	bne.n	80145ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801461c:	88fb      	ldrh	r3, [r7, #6]
 801461e:	461a      	mov	r2, r3
 8014620:	68b9      	ldr	r1, [r7, #8]
 8014622:	68f8      	ldr	r0, [r7, #12]
 8014624:	f001 fbbc 	bl	8015da0 <UART_Start_Receive_IT>
 8014628:	4603      	mov	r3, r0
 801462a:	e000      	b.n	801462e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801462c:	2302      	movs	r3, #2
  }
}
 801462e:	4618      	mov	r0, r3
 8014630:	3728      	adds	r7, #40	; 0x28
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	58000c00 	.word	0x58000c00

0801463c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b09a      	sub	sp, #104	; 0x68
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801464a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801464c:	e853 3f00 	ldrex	r3, [r3]
 8014650:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014658:	667b      	str	r3, [r7, #100]	; 0x64
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	461a      	mov	r2, r3
 8014660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014662:	657b      	str	r3, [r7, #84]	; 0x54
 8014664:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014666:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014668:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801466a:	e841 2300 	strex	r3, r2, [r1]
 801466e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014672:	2b00      	cmp	r3, #0
 8014674:	d1e6      	bne.n	8014644 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	3308      	adds	r3, #8
 801467c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014680:	e853 3f00 	ldrex	r3, [r3]
 8014684:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014688:	4b46      	ldr	r3, [pc, #280]	; (80147a4 <HAL_UART_AbortReceive+0x168>)
 801468a:	4013      	ands	r3, r2
 801468c:	663b      	str	r3, [r7, #96]	; 0x60
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	3308      	adds	r3, #8
 8014694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014696:	643a      	str	r2, [r7, #64]	; 0x40
 8014698:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801469a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801469c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801469e:	e841 2300 	strex	r3, r2, [r1]
 80146a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80146a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d1e5      	bne.n	8014676 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146ae:	2b01      	cmp	r3, #1
 80146b0:	d118      	bne.n	80146e4 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146b8:	6a3b      	ldr	r3, [r7, #32]
 80146ba:	e853 3f00 	ldrex	r3, [r3]
 80146be:	61fb      	str	r3, [r7, #28]
   return(result);
 80146c0:	69fb      	ldr	r3, [r7, #28]
 80146c2:	f023 0310 	bic.w	r3, r3, #16
 80146c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	461a      	mov	r2, r3
 80146ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80146d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80146d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146d8:	e841 2300 	strex	r3, r2, [r1]
 80146dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80146de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d1e6      	bne.n	80146b2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	689b      	ldr	r3, [r3, #8]
 80146ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146ee:	2b40      	cmp	r3, #64	; 0x40
 80146f0:	d13b      	bne.n	801476a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	3308      	adds	r3, #8
 80146f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	e853 3f00 	ldrex	r3, [r3]
 8014700:	60bb      	str	r3, [r7, #8]
   return(result);
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014708:	65bb      	str	r3, [r7, #88]	; 0x58
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	3308      	adds	r3, #8
 8014710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014712:	61ba      	str	r2, [r7, #24]
 8014714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014716:	6979      	ldr	r1, [r7, #20]
 8014718:	69ba      	ldr	r2, [r7, #24]
 801471a:	e841 2300 	strex	r3, r2, [r1]
 801471e:	613b      	str	r3, [r7, #16]
   return(result);
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d1e5      	bne.n	80146f2 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801472c:	2b00      	cmp	r3, #0
 801472e:	d01c      	beq.n	801476a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014736:	2200      	movs	r2, #0
 8014738:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014740:	4618      	mov	r0, r3
 8014742:	f7f4 fa63 	bl	8008c0c <HAL_DMA_Abort>
 8014746:	4603      	mov	r3, r0
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00e      	beq.n	801476a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014752:	4618      	mov	r0, r3
 8014754:	f7f5 fef6 	bl	800a544 <HAL_DMA_GetError>
 8014758:	4603      	mov	r3, r0
 801475a:	2b20      	cmp	r3, #32
 801475c:	d105      	bne.n	801476a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	2210      	movs	r2, #16
 8014762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8014766:	2303      	movs	r3, #3
 8014768:	e017      	b.n	801479a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	2200      	movs	r2, #0
 801476e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	220f      	movs	r2, #15
 8014778:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	699a      	ldr	r2, [r3, #24]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f042 0208 	orr.w	r2, r2, #8
 8014788:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2220      	movs	r2, #32
 801478e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2200      	movs	r2, #0
 8014796:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8014798:	2300      	movs	r3, #0
}
 801479a:	4618      	mov	r0, r3
 801479c:	3768      	adds	r7, #104	; 0x68
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	effffffe 	.word	0xeffffffe

080147a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b0ba      	sub	sp, #232	; 0xe8
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	69db      	ldr	r3, [r3, #28]
 80147b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	689b      	ldr	r3, [r3, #8]
 80147ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80147ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80147d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80147d6:	4013      	ands	r3, r2
 80147d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80147dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d11b      	bne.n	801481c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80147e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80147e8:	f003 0320 	and.w	r3, r3, #32
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d015      	beq.n	801481c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80147f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80147f4:	f003 0320 	and.w	r3, r3, #32
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d105      	bne.n	8014808 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80147fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014804:	2b00      	cmp	r3, #0
 8014806:	d009      	beq.n	801481c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801480c:	2b00      	cmp	r3, #0
 801480e:	f000 8377 	beq.w	8014f00 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	4798      	blx	r3
      }
      return;
 801481a:	e371      	b.n	8014f00 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801481c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014820:	2b00      	cmp	r3, #0
 8014822:	f000 8123 	beq.w	8014a6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8014826:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801482a:	4b8d      	ldr	r3, [pc, #564]	; (8014a60 <HAL_UART_IRQHandler+0x2b8>)
 801482c:	4013      	ands	r3, r2
 801482e:	2b00      	cmp	r3, #0
 8014830:	d106      	bne.n	8014840 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014836:	4b8b      	ldr	r3, [pc, #556]	; (8014a64 <HAL_UART_IRQHandler+0x2bc>)
 8014838:	4013      	ands	r3, r2
 801483a:	2b00      	cmp	r3, #0
 801483c:	f000 8116 	beq.w	8014a6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014844:	f003 0301 	and.w	r3, r3, #1
 8014848:	2b00      	cmp	r3, #0
 801484a:	d011      	beq.n	8014870 <HAL_UART_IRQHandler+0xc8>
 801484c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014854:	2b00      	cmp	r3, #0
 8014856:	d00b      	beq.n	8014870 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	2201      	movs	r2, #1
 801485e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014866:	f043 0201 	orr.w	r2, r3, #1
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014874:	f003 0302 	and.w	r3, r3, #2
 8014878:	2b00      	cmp	r3, #0
 801487a:	d011      	beq.n	80148a0 <HAL_UART_IRQHandler+0xf8>
 801487c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014880:	f003 0301 	and.w	r3, r3, #1
 8014884:	2b00      	cmp	r3, #0
 8014886:	d00b      	beq.n	80148a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	2202      	movs	r2, #2
 801488e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014896:	f043 0204 	orr.w	r2, r3, #4
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80148a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80148a4:	f003 0304 	and.w	r3, r3, #4
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d011      	beq.n	80148d0 <HAL_UART_IRQHandler+0x128>
 80148ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148b0:	f003 0301 	and.w	r3, r3, #1
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d00b      	beq.n	80148d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2204      	movs	r2, #4
 80148be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80148c6:	f043 0202 	orr.w	r2, r3, #2
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80148d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80148d4:	f003 0308 	and.w	r3, r3, #8
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d017      	beq.n	801490c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80148dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80148e0:	f003 0320 	and.w	r3, r3, #32
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d105      	bne.n	80148f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80148e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80148ec:	4b5c      	ldr	r3, [pc, #368]	; (8014a60 <HAL_UART_IRQHandler+0x2b8>)
 80148ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d00b      	beq.n	801490c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2208      	movs	r2, #8
 80148fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014902:	f043 0208 	orr.w	r2, r3, #8
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801490c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014914:	2b00      	cmp	r3, #0
 8014916:	d012      	beq.n	801493e <HAL_UART_IRQHandler+0x196>
 8014918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801491c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014920:	2b00      	cmp	r3, #0
 8014922:	d00c      	beq.n	801493e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801492c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014934:	f043 0220 	orr.w	r2, r3, #32
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014944:	2b00      	cmp	r3, #0
 8014946:	f000 82dd 	beq.w	8014f04 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801494a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801494e:	f003 0320 	and.w	r3, r3, #32
 8014952:	2b00      	cmp	r3, #0
 8014954:	d013      	beq.n	801497e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801495a:	f003 0320 	and.w	r3, r3, #32
 801495e:	2b00      	cmp	r3, #0
 8014960:	d105      	bne.n	801496e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801496a:	2b00      	cmp	r3, #0
 801496c:	d007      	beq.n	801497e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014972:	2b00      	cmp	r3, #0
 8014974:	d003      	beq.n	801497e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	689b      	ldr	r3, [r3, #8]
 801498e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014992:	2b40      	cmp	r3, #64	; 0x40
 8014994:	d005      	beq.n	80149a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801499a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d054      	beq.n	8014a4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f001 fb1e 	bl	8015fe4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	689b      	ldr	r3, [r3, #8]
 80149ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149b2:	2b40      	cmp	r3, #64	; 0x40
 80149b4:	d146      	bne.n	8014a44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	3308      	adds	r3, #8
 80149bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80149c4:	e853 3f00 	ldrex	r3, [r3]
 80149c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80149cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80149d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80149d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	3308      	adds	r3, #8
 80149de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80149e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80149e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80149ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80149f2:	e841 2300 	strex	r3, r2, [r1]
 80149f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80149fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d1d9      	bne.n	80149b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d017      	beq.n	8014a3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014a12:	4a15      	ldr	r2, [pc, #84]	; (8014a68 <HAL_UART_IRQHandler+0x2c0>)
 8014a14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f7f4 fc13 	bl	8009248 <HAL_DMA_Abort_IT>
 8014a22:	4603      	mov	r3, r0
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d019      	beq.n	8014a5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014a36:	4610      	mov	r0, r2
 8014a38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a3a:	e00f      	b.n	8014a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f000 fa77 	bl	8014f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a42:	e00b      	b.n	8014a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f000 fa73 	bl	8014f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a4a:	e007      	b.n	8014a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f000 fa6f 	bl	8014f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2200      	movs	r2, #0
 8014a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8014a5a:	e253      	b.n	8014f04 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a5c:	bf00      	nop
    return;
 8014a5e:	e251      	b.n	8014f04 <HAL_UART_IRQHandler+0x75c>
 8014a60:	10000001 	.word	0x10000001
 8014a64:	04000120 	.word	0x04000120
 8014a68:	080160b1 	.word	0x080160b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	f040 81e7 	bne.w	8014e44 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a7a:	f003 0310 	and.w	r3, r3, #16
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	f000 81e0 	beq.w	8014e44 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a88:	f003 0310 	and.w	r3, r3, #16
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	f000 81d9 	beq.w	8014e44 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	2210      	movs	r2, #16
 8014a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	689b      	ldr	r3, [r3, #8]
 8014aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aa4:	2b40      	cmp	r3, #64	; 0x40
 8014aa6:	f040 8151 	bne.w	8014d4c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	4a96      	ldr	r2, [pc, #600]	; (8014d0c <HAL_UART_IRQHandler+0x564>)
 8014ab4:	4293      	cmp	r3, r2
 8014ab6:	d068      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	4a93      	ldr	r2, [pc, #588]	; (8014d10 <HAL_UART_IRQHandler+0x568>)
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	d061      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	4a91      	ldr	r2, [pc, #580]	; (8014d14 <HAL_UART_IRQHandler+0x56c>)
 8014ad0:	4293      	cmp	r3, r2
 8014ad2:	d05a      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	4a8e      	ldr	r2, [pc, #568]	; (8014d18 <HAL_UART_IRQHandler+0x570>)
 8014ade:	4293      	cmp	r3, r2
 8014ae0:	d053      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	4a8c      	ldr	r2, [pc, #560]	; (8014d1c <HAL_UART_IRQHandler+0x574>)
 8014aec:	4293      	cmp	r3, r2
 8014aee:	d04c      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	4a89      	ldr	r2, [pc, #548]	; (8014d20 <HAL_UART_IRQHandler+0x578>)
 8014afa:	4293      	cmp	r3, r2
 8014afc:	d045      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	4a87      	ldr	r2, [pc, #540]	; (8014d24 <HAL_UART_IRQHandler+0x57c>)
 8014b08:	4293      	cmp	r3, r2
 8014b0a:	d03e      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	4a84      	ldr	r2, [pc, #528]	; (8014d28 <HAL_UART_IRQHandler+0x580>)
 8014b16:	4293      	cmp	r3, r2
 8014b18:	d037      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	4a82      	ldr	r2, [pc, #520]	; (8014d2c <HAL_UART_IRQHandler+0x584>)
 8014b24:	4293      	cmp	r3, r2
 8014b26:	d030      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	4a7f      	ldr	r2, [pc, #508]	; (8014d30 <HAL_UART_IRQHandler+0x588>)
 8014b32:	4293      	cmp	r3, r2
 8014b34:	d029      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	4a7d      	ldr	r2, [pc, #500]	; (8014d34 <HAL_UART_IRQHandler+0x58c>)
 8014b40:	4293      	cmp	r3, r2
 8014b42:	d022      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	4a7a      	ldr	r2, [pc, #488]	; (8014d38 <HAL_UART_IRQHandler+0x590>)
 8014b4e:	4293      	cmp	r3, r2
 8014b50:	d01b      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	4a78      	ldr	r2, [pc, #480]	; (8014d3c <HAL_UART_IRQHandler+0x594>)
 8014b5c:	4293      	cmp	r3, r2
 8014b5e:	d014      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	4a75      	ldr	r2, [pc, #468]	; (8014d40 <HAL_UART_IRQHandler+0x598>)
 8014b6a:	4293      	cmp	r3, r2
 8014b6c:	d00d      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	4a73      	ldr	r2, [pc, #460]	; (8014d44 <HAL_UART_IRQHandler+0x59c>)
 8014b78:	4293      	cmp	r3, r2
 8014b7a:	d006      	beq.n	8014b8a <HAL_UART_IRQHandler+0x3e2>
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	4a70      	ldr	r2, [pc, #448]	; (8014d48 <HAL_UART_IRQHandler+0x5a0>)
 8014b86:	4293      	cmp	r3, r2
 8014b88:	d106      	bne.n	8014b98 <HAL_UART_IRQHandler+0x3f0>
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	685b      	ldr	r3, [r3, #4]
 8014b94:	b29b      	uxth	r3, r3
 8014b96:	e005      	b.n	8014ba4 <HAL_UART_IRQHandler+0x3fc>
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014ba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	f000 81ab 	beq.w	8014f08 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014bb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	f080 81a3 	bcs.w	8014f08 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014bd2:	69db      	ldr	r3, [r3, #28]
 8014bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bd8:	f000 8087 	beq.w	8014cea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014be8:	e853 3f00 	ldrex	r3, [r3]
 8014bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	461a      	mov	r2, r3
 8014c02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014c0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014c16:	e841 2300 	strex	r3, r2, [r1]
 8014c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d1da      	bne.n	8014bdc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	3308      	adds	r3, #8
 8014c2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014c30:	e853 3f00 	ldrex	r3, [r3]
 8014c34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c38:	f023 0301 	bic.w	r3, r3, #1
 8014c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	3308      	adds	r3, #8
 8014c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014c4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014c52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014c56:	e841 2300 	strex	r3, r2, [r1]
 8014c5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d1e1      	bne.n	8014c26 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	3308      	adds	r3, #8
 8014c68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014c6c:	e853 3f00 	ldrex	r3, [r3]
 8014c70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	3308      	adds	r3, #8
 8014c82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014c86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014c88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014c8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014c8e:	e841 2300 	strex	r3, r2, [r1]
 8014c92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d1e3      	bne.n	8014c62 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	2220      	movs	r2, #32
 8014c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014cb0:	e853 3f00 	ldrex	r3, [r3]
 8014cb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cb8:	f023 0310 	bic.w	r3, r3, #16
 8014cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014cca:	65bb      	str	r3, [r7, #88]	; 0x58
 8014ccc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014cd2:	e841 2300 	strex	r3, r2, [r1]
 8014cd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d1e4      	bne.n	8014ca8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7f3 ff91 	bl	8008c0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2202      	movs	r2, #2
 8014cee:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	1ad3      	subs	r3, r2, r3
 8014d00:	b29b      	uxth	r3, r3
 8014d02:	4619      	mov	r1, r3
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f000 f91d 	bl	8014f44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014d0a:	e0fd      	b.n	8014f08 <HAL_UART_IRQHandler+0x760>
 8014d0c:	40020010 	.word	0x40020010
 8014d10:	40020028 	.word	0x40020028
 8014d14:	40020040 	.word	0x40020040
 8014d18:	40020058 	.word	0x40020058
 8014d1c:	40020070 	.word	0x40020070
 8014d20:	40020088 	.word	0x40020088
 8014d24:	400200a0 	.word	0x400200a0
 8014d28:	400200b8 	.word	0x400200b8
 8014d2c:	40020410 	.word	0x40020410
 8014d30:	40020428 	.word	0x40020428
 8014d34:	40020440 	.word	0x40020440
 8014d38:	40020458 	.word	0x40020458
 8014d3c:	40020470 	.word	0x40020470
 8014d40:	40020488 	.word	0x40020488
 8014d44:	400204a0 	.word	0x400204a0
 8014d48:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014d58:	b29b      	uxth	r3, r3
 8014d5a:	1ad3      	subs	r3, r2, r3
 8014d5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014d66:	b29b      	uxth	r3, r3
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	f000 80cf 	beq.w	8014f0c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8014d6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	f000 80ca 	beq.w	8014f0c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d80:	e853 3f00 	ldrex	r3, [r3]
 8014d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	461a      	mov	r2, r3
 8014d96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8014d9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014da2:	e841 2300 	strex	r3, r2, [r1]
 8014da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d1e4      	bne.n	8014d78 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	3308      	adds	r3, #8
 8014db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db8:	e853 3f00 	ldrex	r3, [r3]
 8014dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8014dbe:	6a3a      	ldr	r2, [r7, #32]
 8014dc0:	4b55      	ldr	r3, [pc, #340]	; (8014f18 <HAL_UART_IRQHandler+0x770>)
 8014dc2:	4013      	ands	r3, r2
 8014dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	3308      	adds	r3, #8
 8014dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8014dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dda:	e841 2300 	strex	r3, r2, [r1]
 8014dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d1e3      	bne.n	8014dae <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	2220      	movs	r2, #32
 8014dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2200      	movs	r2, #0
 8014df2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2200      	movs	r2, #0
 8014df8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e00:	693b      	ldr	r3, [r7, #16]
 8014e02:	e853 3f00 	ldrex	r3, [r3]
 8014e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	f023 0310 	bic.w	r3, r3, #16
 8014e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	461a      	mov	r2, r3
 8014e18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014e1c:	61fb      	str	r3, [r7, #28]
 8014e1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e20:	69b9      	ldr	r1, [r7, #24]
 8014e22:	69fa      	ldr	r2, [r7, #28]
 8014e24:	e841 2300 	strex	r3, r2, [r1]
 8014e28:	617b      	str	r3, [r7, #20]
   return(result);
 8014e2a:	697b      	ldr	r3, [r7, #20]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d1e4      	bne.n	8014dfa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	2202      	movs	r2, #2
 8014e34:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014e36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014e3a:	4619      	mov	r1, r3
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f000 f881 	bl	8014f44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014e42:	e063      	b.n	8014f0c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d00e      	beq.n	8014e6e <HAL_UART_IRQHandler+0x6c6>
 8014e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d008      	beq.n	8014e6e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014e64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f001 fe80 	bl	8016b6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014e6c:	e051      	b.n	8014f12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d014      	beq.n	8014ea4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d105      	bne.n	8014e92 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d008      	beq.n	8014ea4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d03a      	beq.n	8014f10 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	4798      	blx	r3
    }
    return;
 8014ea2:	e035      	b.n	8014f10 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d009      	beq.n	8014ec4 <HAL_UART_IRQHandler+0x71c>
 8014eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d003      	beq.n	8014ec4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f001 f90d 	bl	80160dc <UART_EndTransmit_IT>
    return;
 8014ec2:	e026      	b.n	8014f12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d009      	beq.n	8014ee4 <HAL_UART_IRQHandler+0x73c>
 8014ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ed4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d003      	beq.n	8014ee4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f001 fe59 	bl	8016b94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014ee2:	e016      	b.n	8014f12 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d010      	beq.n	8014f12 <HAL_UART_IRQHandler+0x76a>
 8014ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	da0c      	bge.n	8014f12 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014ef8:	6878      	ldr	r0, [r7, #4]
 8014efa:	f001 fe41 	bl	8016b80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014efe:	e008      	b.n	8014f12 <HAL_UART_IRQHandler+0x76a>
      return;
 8014f00:	bf00      	nop
 8014f02:	e006      	b.n	8014f12 <HAL_UART_IRQHandler+0x76a>
    return;
 8014f04:	bf00      	nop
 8014f06:	e004      	b.n	8014f12 <HAL_UART_IRQHandler+0x76a>
      return;
 8014f08:	bf00      	nop
 8014f0a:	e002      	b.n	8014f12 <HAL_UART_IRQHandler+0x76a>
      return;
 8014f0c:	bf00      	nop
 8014f0e:	e000      	b.n	8014f12 <HAL_UART_IRQHandler+0x76a>
    return;
 8014f10:	bf00      	nop
  }
}
 8014f12:	37e8      	adds	r7, #232	; 0xe8
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	effffffe 	.word	0xeffffffe

08014f1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014f1c:	b480      	push	{r7}
 8014f1e:	b083      	sub	sp, #12
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014f24:	bf00      	nop
 8014f26:	370c      	adds	r7, #12
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2e:	4770      	bx	lr

08014f30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014f30:	b480      	push	{r7}
 8014f32:	b083      	sub	sp, #12
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014f38:	bf00      	nop
 8014f3a:	370c      	adds	r7, #12
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f42:	4770      	bx	lr

08014f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014f44:	b480      	push	{r7}
 8014f46:	b083      	sub	sp, #12
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	460b      	mov	r3, r1
 8014f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014f50:	bf00      	nop
 8014f52:	370c      	adds	r7, #12
 8014f54:	46bd      	mov	sp, r7
 8014f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5a:	4770      	bx	lr

08014f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014f60:	b092      	sub	sp, #72	; 0x48
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014f66:	2300      	movs	r3, #0
 8014f68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	689a      	ldr	r2, [r3, #8]
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	691b      	ldr	r3, [r3, #16]
 8014f74:	431a      	orrs	r2, r3
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	695b      	ldr	r3, [r3, #20]
 8014f7a:	431a      	orrs	r2, r3
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	69db      	ldr	r3, [r3, #28]
 8014f80:	4313      	orrs	r3, r2
 8014f82:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014f84:	697b      	ldr	r3, [r7, #20]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	681a      	ldr	r2, [r3, #0]
 8014f8a:	4bbe      	ldr	r3, [pc, #760]	; (8015284 <UART_SetConfig+0x328>)
 8014f8c:	4013      	ands	r3, r2
 8014f8e:	697a      	ldr	r2, [r7, #20]
 8014f90:	6812      	ldr	r2, [r2, #0]
 8014f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014f94:	430b      	orrs	r3, r1
 8014f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014fa2:	697b      	ldr	r3, [r7, #20]
 8014fa4:	68da      	ldr	r2, [r3, #12]
 8014fa6:	697b      	ldr	r3, [r7, #20]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	430a      	orrs	r2, r1
 8014fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	699b      	ldr	r3, [r3, #24]
 8014fb2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	4ab3      	ldr	r2, [pc, #716]	; (8015288 <UART_SetConfig+0x32c>)
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d004      	beq.n	8014fc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	6a1b      	ldr	r3, [r3, #32]
 8014fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014fc4:	4313      	orrs	r3, r2
 8014fc6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	689a      	ldr	r2, [r3, #8]
 8014fce:	4baf      	ldr	r3, [pc, #700]	; (801528c <UART_SetConfig+0x330>)
 8014fd0:	4013      	ands	r3, r2
 8014fd2:	697a      	ldr	r2, [r7, #20]
 8014fd4:	6812      	ldr	r2, [r2, #0]
 8014fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014fd8:	430b      	orrs	r3, r1
 8014fda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014fdc:	697b      	ldr	r3, [r7, #20]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fe2:	f023 010f 	bic.w	r1, r3, #15
 8014fe6:	697b      	ldr	r3, [r7, #20]
 8014fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	430a      	orrs	r2, r1
 8014ff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014ff2:	697b      	ldr	r3, [r7, #20]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	4aa6      	ldr	r2, [pc, #664]	; (8015290 <UART_SetConfig+0x334>)
 8014ff8:	4293      	cmp	r3, r2
 8014ffa:	d177      	bne.n	80150ec <UART_SetConfig+0x190>
 8014ffc:	4ba5      	ldr	r3, [pc, #660]	; (8015294 <UART_SetConfig+0x338>)
 8014ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015004:	2b28      	cmp	r3, #40	; 0x28
 8015006:	d86d      	bhi.n	80150e4 <UART_SetConfig+0x188>
 8015008:	a201      	add	r2, pc, #4	; (adr r2, 8015010 <UART_SetConfig+0xb4>)
 801500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801500e:	bf00      	nop
 8015010:	080150b5 	.word	0x080150b5
 8015014:	080150e5 	.word	0x080150e5
 8015018:	080150e5 	.word	0x080150e5
 801501c:	080150e5 	.word	0x080150e5
 8015020:	080150e5 	.word	0x080150e5
 8015024:	080150e5 	.word	0x080150e5
 8015028:	080150e5 	.word	0x080150e5
 801502c:	080150e5 	.word	0x080150e5
 8015030:	080150bd 	.word	0x080150bd
 8015034:	080150e5 	.word	0x080150e5
 8015038:	080150e5 	.word	0x080150e5
 801503c:	080150e5 	.word	0x080150e5
 8015040:	080150e5 	.word	0x080150e5
 8015044:	080150e5 	.word	0x080150e5
 8015048:	080150e5 	.word	0x080150e5
 801504c:	080150e5 	.word	0x080150e5
 8015050:	080150c5 	.word	0x080150c5
 8015054:	080150e5 	.word	0x080150e5
 8015058:	080150e5 	.word	0x080150e5
 801505c:	080150e5 	.word	0x080150e5
 8015060:	080150e5 	.word	0x080150e5
 8015064:	080150e5 	.word	0x080150e5
 8015068:	080150e5 	.word	0x080150e5
 801506c:	080150e5 	.word	0x080150e5
 8015070:	080150cd 	.word	0x080150cd
 8015074:	080150e5 	.word	0x080150e5
 8015078:	080150e5 	.word	0x080150e5
 801507c:	080150e5 	.word	0x080150e5
 8015080:	080150e5 	.word	0x080150e5
 8015084:	080150e5 	.word	0x080150e5
 8015088:	080150e5 	.word	0x080150e5
 801508c:	080150e5 	.word	0x080150e5
 8015090:	080150d5 	.word	0x080150d5
 8015094:	080150e5 	.word	0x080150e5
 8015098:	080150e5 	.word	0x080150e5
 801509c:	080150e5 	.word	0x080150e5
 80150a0:	080150e5 	.word	0x080150e5
 80150a4:	080150e5 	.word	0x080150e5
 80150a8:	080150e5 	.word	0x080150e5
 80150ac:	080150e5 	.word	0x080150e5
 80150b0:	080150dd 	.word	0x080150dd
 80150b4:	2301      	movs	r3, #1
 80150b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ba:	e222      	b.n	8015502 <UART_SetConfig+0x5a6>
 80150bc:	2304      	movs	r3, #4
 80150be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150c2:	e21e      	b.n	8015502 <UART_SetConfig+0x5a6>
 80150c4:	2308      	movs	r3, #8
 80150c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ca:	e21a      	b.n	8015502 <UART_SetConfig+0x5a6>
 80150cc:	2310      	movs	r3, #16
 80150ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150d2:	e216      	b.n	8015502 <UART_SetConfig+0x5a6>
 80150d4:	2320      	movs	r3, #32
 80150d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150da:	e212      	b.n	8015502 <UART_SetConfig+0x5a6>
 80150dc:	2340      	movs	r3, #64	; 0x40
 80150de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150e2:	e20e      	b.n	8015502 <UART_SetConfig+0x5a6>
 80150e4:	2380      	movs	r3, #128	; 0x80
 80150e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ea:	e20a      	b.n	8015502 <UART_SetConfig+0x5a6>
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	4a69      	ldr	r2, [pc, #420]	; (8015298 <UART_SetConfig+0x33c>)
 80150f2:	4293      	cmp	r3, r2
 80150f4:	d130      	bne.n	8015158 <UART_SetConfig+0x1fc>
 80150f6:	4b67      	ldr	r3, [pc, #412]	; (8015294 <UART_SetConfig+0x338>)
 80150f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150fa:	f003 0307 	and.w	r3, r3, #7
 80150fe:	2b05      	cmp	r3, #5
 8015100:	d826      	bhi.n	8015150 <UART_SetConfig+0x1f4>
 8015102:	a201      	add	r2, pc, #4	; (adr r2, 8015108 <UART_SetConfig+0x1ac>)
 8015104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015108:	08015121 	.word	0x08015121
 801510c:	08015129 	.word	0x08015129
 8015110:	08015131 	.word	0x08015131
 8015114:	08015139 	.word	0x08015139
 8015118:	08015141 	.word	0x08015141
 801511c:	08015149 	.word	0x08015149
 8015120:	2300      	movs	r3, #0
 8015122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015126:	e1ec      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015128:	2304      	movs	r3, #4
 801512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801512e:	e1e8      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015130:	2308      	movs	r3, #8
 8015132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015136:	e1e4      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015138:	2310      	movs	r3, #16
 801513a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801513e:	e1e0      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015140:	2320      	movs	r3, #32
 8015142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015146:	e1dc      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015148:	2340      	movs	r3, #64	; 0x40
 801514a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801514e:	e1d8      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015150:	2380      	movs	r3, #128	; 0x80
 8015152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015156:	e1d4      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015158:	697b      	ldr	r3, [r7, #20]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	4a4f      	ldr	r2, [pc, #316]	; (801529c <UART_SetConfig+0x340>)
 801515e:	4293      	cmp	r3, r2
 8015160:	d130      	bne.n	80151c4 <UART_SetConfig+0x268>
 8015162:	4b4c      	ldr	r3, [pc, #304]	; (8015294 <UART_SetConfig+0x338>)
 8015164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015166:	f003 0307 	and.w	r3, r3, #7
 801516a:	2b05      	cmp	r3, #5
 801516c:	d826      	bhi.n	80151bc <UART_SetConfig+0x260>
 801516e:	a201      	add	r2, pc, #4	; (adr r2, 8015174 <UART_SetConfig+0x218>)
 8015170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015174:	0801518d 	.word	0x0801518d
 8015178:	08015195 	.word	0x08015195
 801517c:	0801519d 	.word	0x0801519d
 8015180:	080151a5 	.word	0x080151a5
 8015184:	080151ad 	.word	0x080151ad
 8015188:	080151b5 	.word	0x080151b5
 801518c:	2300      	movs	r3, #0
 801518e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015192:	e1b6      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015194:	2304      	movs	r3, #4
 8015196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801519a:	e1b2      	b.n	8015502 <UART_SetConfig+0x5a6>
 801519c:	2308      	movs	r3, #8
 801519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151a2:	e1ae      	b.n	8015502 <UART_SetConfig+0x5a6>
 80151a4:	2310      	movs	r3, #16
 80151a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151aa:	e1aa      	b.n	8015502 <UART_SetConfig+0x5a6>
 80151ac:	2320      	movs	r3, #32
 80151ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151b2:	e1a6      	b.n	8015502 <UART_SetConfig+0x5a6>
 80151b4:	2340      	movs	r3, #64	; 0x40
 80151b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151ba:	e1a2      	b.n	8015502 <UART_SetConfig+0x5a6>
 80151bc:	2380      	movs	r3, #128	; 0x80
 80151be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151c2:	e19e      	b.n	8015502 <UART_SetConfig+0x5a6>
 80151c4:	697b      	ldr	r3, [r7, #20]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	4a35      	ldr	r2, [pc, #212]	; (80152a0 <UART_SetConfig+0x344>)
 80151ca:	4293      	cmp	r3, r2
 80151cc:	d130      	bne.n	8015230 <UART_SetConfig+0x2d4>
 80151ce:	4b31      	ldr	r3, [pc, #196]	; (8015294 <UART_SetConfig+0x338>)
 80151d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80151d2:	f003 0307 	and.w	r3, r3, #7
 80151d6:	2b05      	cmp	r3, #5
 80151d8:	d826      	bhi.n	8015228 <UART_SetConfig+0x2cc>
 80151da:	a201      	add	r2, pc, #4	; (adr r2, 80151e0 <UART_SetConfig+0x284>)
 80151dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151e0:	080151f9 	.word	0x080151f9
 80151e4:	08015201 	.word	0x08015201
 80151e8:	08015209 	.word	0x08015209
 80151ec:	08015211 	.word	0x08015211
 80151f0:	08015219 	.word	0x08015219
 80151f4:	08015221 	.word	0x08015221
 80151f8:	2300      	movs	r3, #0
 80151fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151fe:	e180      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015200:	2304      	movs	r3, #4
 8015202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015206:	e17c      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015208:	2308      	movs	r3, #8
 801520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801520e:	e178      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015210:	2310      	movs	r3, #16
 8015212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015216:	e174      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015218:	2320      	movs	r3, #32
 801521a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801521e:	e170      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015220:	2340      	movs	r3, #64	; 0x40
 8015222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015226:	e16c      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015228:	2380      	movs	r3, #128	; 0x80
 801522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801522e:	e168      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	4a1b      	ldr	r2, [pc, #108]	; (80152a4 <UART_SetConfig+0x348>)
 8015236:	4293      	cmp	r3, r2
 8015238:	d142      	bne.n	80152c0 <UART_SetConfig+0x364>
 801523a:	4b16      	ldr	r3, [pc, #88]	; (8015294 <UART_SetConfig+0x338>)
 801523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801523e:	f003 0307 	and.w	r3, r3, #7
 8015242:	2b05      	cmp	r3, #5
 8015244:	d838      	bhi.n	80152b8 <UART_SetConfig+0x35c>
 8015246:	a201      	add	r2, pc, #4	; (adr r2, 801524c <UART_SetConfig+0x2f0>)
 8015248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801524c:	08015265 	.word	0x08015265
 8015250:	0801526d 	.word	0x0801526d
 8015254:	08015275 	.word	0x08015275
 8015258:	0801527d 	.word	0x0801527d
 801525c:	080152a9 	.word	0x080152a9
 8015260:	080152b1 	.word	0x080152b1
 8015264:	2300      	movs	r3, #0
 8015266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801526a:	e14a      	b.n	8015502 <UART_SetConfig+0x5a6>
 801526c:	2304      	movs	r3, #4
 801526e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015272:	e146      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015274:	2308      	movs	r3, #8
 8015276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801527a:	e142      	b.n	8015502 <UART_SetConfig+0x5a6>
 801527c:	2310      	movs	r3, #16
 801527e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015282:	e13e      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015284:	cfff69f3 	.word	0xcfff69f3
 8015288:	58000c00 	.word	0x58000c00
 801528c:	11fff4ff 	.word	0x11fff4ff
 8015290:	40011000 	.word	0x40011000
 8015294:	58024400 	.word	0x58024400
 8015298:	40004400 	.word	0x40004400
 801529c:	40004800 	.word	0x40004800
 80152a0:	40004c00 	.word	0x40004c00
 80152a4:	40005000 	.word	0x40005000
 80152a8:	2320      	movs	r3, #32
 80152aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ae:	e128      	b.n	8015502 <UART_SetConfig+0x5a6>
 80152b0:	2340      	movs	r3, #64	; 0x40
 80152b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152b6:	e124      	b.n	8015502 <UART_SetConfig+0x5a6>
 80152b8:	2380      	movs	r3, #128	; 0x80
 80152ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152be:	e120      	b.n	8015502 <UART_SetConfig+0x5a6>
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	4acb      	ldr	r2, [pc, #812]	; (80155f4 <UART_SetConfig+0x698>)
 80152c6:	4293      	cmp	r3, r2
 80152c8:	d176      	bne.n	80153b8 <UART_SetConfig+0x45c>
 80152ca:	4bcb      	ldr	r3, [pc, #812]	; (80155f8 <UART_SetConfig+0x69c>)
 80152cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80152d2:	2b28      	cmp	r3, #40	; 0x28
 80152d4:	d86c      	bhi.n	80153b0 <UART_SetConfig+0x454>
 80152d6:	a201      	add	r2, pc, #4	; (adr r2, 80152dc <UART_SetConfig+0x380>)
 80152d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152dc:	08015381 	.word	0x08015381
 80152e0:	080153b1 	.word	0x080153b1
 80152e4:	080153b1 	.word	0x080153b1
 80152e8:	080153b1 	.word	0x080153b1
 80152ec:	080153b1 	.word	0x080153b1
 80152f0:	080153b1 	.word	0x080153b1
 80152f4:	080153b1 	.word	0x080153b1
 80152f8:	080153b1 	.word	0x080153b1
 80152fc:	08015389 	.word	0x08015389
 8015300:	080153b1 	.word	0x080153b1
 8015304:	080153b1 	.word	0x080153b1
 8015308:	080153b1 	.word	0x080153b1
 801530c:	080153b1 	.word	0x080153b1
 8015310:	080153b1 	.word	0x080153b1
 8015314:	080153b1 	.word	0x080153b1
 8015318:	080153b1 	.word	0x080153b1
 801531c:	08015391 	.word	0x08015391
 8015320:	080153b1 	.word	0x080153b1
 8015324:	080153b1 	.word	0x080153b1
 8015328:	080153b1 	.word	0x080153b1
 801532c:	080153b1 	.word	0x080153b1
 8015330:	080153b1 	.word	0x080153b1
 8015334:	080153b1 	.word	0x080153b1
 8015338:	080153b1 	.word	0x080153b1
 801533c:	08015399 	.word	0x08015399
 8015340:	080153b1 	.word	0x080153b1
 8015344:	080153b1 	.word	0x080153b1
 8015348:	080153b1 	.word	0x080153b1
 801534c:	080153b1 	.word	0x080153b1
 8015350:	080153b1 	.word	0x080153b1
 8015354:	080153b1 	.word	0x080153b1
 8015358:	080153b1 	.word	0x080153b1
 801535c:	080153a1 	.word	0x080153a1
 8015360:	080153b1 	.word	0x080153b1
 8015364:	080153b1 	.word	0x080153b1
 8015368:	080153b1 	.word	0x080153b1
 801536c:	080153b1 	.word	0x080153b1
 8015370:	080153b1 	.word	0x080153b1
 8015374:	080153b1 	.word	0x080153b1
 8015378:	080153b1 	.word	0x080153b1
 801537c:	080153a9 	.word	0x080153a9
 8015380:	2301      	movs	r3, #1
 8015382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015386:	e0bc      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015388:	2304      	movs	r3, #4
 801538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801538e:	e0b8      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015390:	2308      	movs	r3, #8
 8015392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015396:	e0b4      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015398:	2310      	movs	r3, #16
 801539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801539e:	e0b0      	b.n	8015502 <UART_SetConfig+0x5a6>
 80153a0:	2320      	movs	r3, #32
 80153a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153a6:	e0ac      	b.n	8015502 <UART_SetConfig+0x5a6>
 80153a8:	2340      	movs	r3, #64	; 0x40
 80153aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ae:	e0a8      	b.n	8015502 <UART_SetConfig+0x5a6>
 80153b0:	2380      	movs	r3, #128	; 0x80
 80153b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153b6:	e0a4      	b.n	8015502 <UART_SetConfig+0x5a6>
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	4a8f      	ldr	r2, [pc, #572]	; (80155fc <UART_SetConfig+0x6a0>)
 80153be:	4293      	cmp	r3, r2
 80153c0:	d130      	bne.n	8015424 <UART_SetConfig+0x4c8>
 80153c2:	4b8d      	ldr	r3, [pc, #564]	; (80155f8 <UART_SetConfig+0x69c>)
 80153c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153c6:	f003 0307 	and.w	r3, r3, #7
 80153ca:	2b05      	cmp	r3, #5
 80153cc:	d826      	bhi.n	801541c <UART_SetConfig+0x4c0>
 80153ce:	a201      	add	r2, pc, #4	; (adr r2, 80153d4 <UART_SetConfig+0x478>)
 80153d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153d4:	080153ed 	.word	0x080153ed
 80153d8:	080153f5 	.word	0x080153f5
 80153dc:	080153fd 	.word	0x080153fd
 80153e0:	08015405 	.word	0x08015405
 80153e4:	0801540d 	.word	0x0801540d
 80153e8:	08015415 	.word	0x08015415
 80153ec:	2300      	movs	r3, #0
 80153ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153f2:	e086      	b.n	8015502 <UART_SetConfig+0x5a6>
 80153f4:	2304      	movs	r3, #4
 80153f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153fa:	e082      	b.n	8015502 <UART_SetConfig+0x5a6>
 80153fc:	2308      	movs	r3, #8
 80153fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015402:	e07e      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015404:	2310      	movs	r3, #16
 8015406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801540a:	e07a      	b.n	8015502 <UART_SetConfig+0x5a6>
 801540c:	2320      	movs	r3, #32
 801540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015412:	e076      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015414:	2340      	movs	r3, #64	; 0x40
 8015416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801541a:	e072      	b.n	8015502 <UART_SetConfig+0x5a6>
 801541c:	2380      	movs	r3, #128	; 0x80
 801541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015422:	e06e      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	4a75      	ldr	r2, [pc, #468]	; (8015600 <UART_SetConfig+0x6a4>)
 801542a:	4293      	cmp	r3, r2
 801542c:	d130      	bne.n	8015490 <UART_SetConfig+0x534>
 801542e:	4b72      	ldr	r3, [pc, #456]	; (80155f8 <UART_SetConfig+0x69c>)
 8015430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015432:	f003 0307 	and.w	r3, r3, #7
 8015436:	2b05      	cmp	r3, #5
 8015438:	d826      	bhi.n	8015488 <UART_SetConfig+0x52c>
 801543a:	a201      	add	r2, pc, #4	; (adr r2, 8015440 <UART_SetConfig+0x4e4>)
 801543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015440:	08015459 	.word	0x08015459
 8015444:	08015461 	.word	0x08015461
 8015448:	08015469 	.word	0x08015469
 801544c:	08015471 	.word	0x08015471
 8015450:	08015479 	.word	0x08015479
 8015454:	08015481 	.word	0x08015481
 8015458:	2300      	movs	r3, #0
 801545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801545e:	e050      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015460:	2304      	movs	r3, #4
 8015462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015466:	e04c      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015468:	2308      	movs	r3, #8
 801546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801546e:	e048      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015470:	2310      	movs	r3, #16
 8015472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015476:	e044      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015478:	2320      	movs	r3, #32
 801547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801547e:	e040      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015480:	2340      	movs	r3, #64	; 0x40
 8015482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015486:	e03c      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015488:	2380      	movs	r3, #128	; 0x80
 801548a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801548e:	e038      	b.n	8015502 <UART_SetConfig+0x5a6>
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	4a5b      	ldr	r2, [pc, #364]	; (8015604 <UART_SetConfig+0x6a8>)
 8015496:	4293      	cmp	r3, r2
 8015498:	d130      	bne.n	80154fc <UART_SetConfig+0x5a0>
 801549a:	4b57      	ldr	r3, [pc, #348]	; (80155f8 <UART_SetConfig+0x69c>)
 801549c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801549e:	f003 0307 	and.w	r3, r3, #7
 80154a2:	2b05      	cmp	r3, #5
 80154a4:	d826      	bhi.n	80154f4 <UART_SetConfig+0x598>
 80154a6:	a201      	add	r2, pc, #4	; (adr r2, 80154ac <UART_SetConfig+0x550>)
 80154a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154ac:	080154c5 	.word	0x080154c5
 80154b0:	080154cd 	.word	0x080154cd
 80154b4:	080154d5 	.word	0x080154d5
 80154b8:	080154dd 	.word	0x080154dd
 80154bc:	080154e5 	.word	0x080154e5
 80154c0:	080154ed 	.word	0x080154ed
 80154c4:	2302      	movs	r3, #2
 80154c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ca:	e01a      	b.n	8015502 <UART_SetConfig+0x5a6>
 80154cc:	2304      	movs	r3, #4
 80154ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154d2:	e016      	b.n	8015502 <UART_SetConfig+0x5a6>
 80154d4:	2308      	movs	r3, #8
 80154d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154da:	e012      	b.n	8015502 <UART_SetConfig+0x5a6>
 80154dc:	2310      	movs	r3, #16
 80154de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154e2:	e00e      	b.n	8015502 <UART_SetConfig+0x5a6>
 80154e4:	2320      	movs	r3, #32
 80154e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ea:	e00a      	b.n	8015502 <UART_SetConfig+0x5a6>
 80154ec:	2340      	movs	r3, #64	; 0x40
 80154ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154f2:	e006      	b.n	8015502 <UART_SetConfig+0x5a6>
 80154f4:	2380      	movs	r3, #128	; 0x80
 80154f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154fa:	e002      	b.n	8015502 <UART_SetConfig+0x5a6>
 80154fc:	2380      	movs	r3, #128	; 0x80
 80154fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	4a3f      	ldr	r2, [pc, #252]	; (8015604 <UART_SetConfig+0x6a8>)
 8015508:	4293      	cmp	r3, r2
 801550a:	f040 80f8 	bne.w	80156fe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801550e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015512:	2b20      	cmp	r3, #32
 8015514:	dc46      	bgt.n	80155a4 <UART_SetConfig+0x648>
 8015516:	2b02      	cmp	r3, #2
 8015518:	f2c0 8082 	blt.w	8015620 <UART_SetConfig+0x6c4>
 801551c:	3b02      	subs	r3, #2
 801551e:	2b1e      	cmp	r3, #30
 8015520:	d87e      	bhi.n	8015620 <UART_SetConfig+0x6c4>
 8015522:	a201      	add	r2, pc, #4	; (adr r2, 8015528 <UART_SetConfig+0x5cc>)
 8015524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015528:	080155ab 	.word	0x080155ab
 801552c:	08015621 	.word	0x08015621
 8015530:	080155b3 	.word	0x080155b3
 8015534:	08015621 	.word	0x08015621
 8015538:	08015621 	.word	0x08015621
 801553c:	08015621 	.word	0x08015621
 8015540:	080155c3 	.word	0x080155c3
 8015544:	08015621 	.word	0x08015621
 8015548:	08015621 	.word	0x08015621
 801554c:	08015621 	.word	0x08015621
 8015550:	08015621 	.word	0x08015621
 8015554:	08015621 	.word	0x08015621
 8015558:	08015621 	.word	0x08015621
 801555c:	08015621 	.word	0x08015621
 8015560:	080155d3 	.word	0x080155d3
 8015564:	08015621 	.word	0x08015621
 8015568:	08015621 	.word	0x08015621
 801556c:	08015621 	.word	0x08015621
 8015570:	08015621 	.word	0x08015621
 8015574:	08015621 	.word	0x08015621
 8015578:	08015621 	.word	0x08015621
 801557c:	08015621 	.word	0x08015621
 8015580:	08015621 	.word	0x08015621
 8015584:	08015621 	.word	0x08015621
 8015588:	08015621 	.word	0x08015621
 801558c:	08015621 	.word	0x08015621
 8015590:	08015621 	.word	0x08015621
 8015594:	08015621 	.word	0x08015621
 8015598:	08015621 	.word	0x08015621
 801559c:	08015621 	.word	0x08015621
 80155a0:	08015613 	.word	0x08015613
 80155a4:	2b40      	cmp	r3, #64	; 0x40
 80155a6:	d037      	beq.n	8015618 <UART_SetConfig+0x6bc>
 80155a8:	e03a      	b.n	8015620 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80155aa:	f7fb fc17 	bl	8010ddc <HAL_RCCEx_GetD3PCLK1Freq>
 80155ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80155b0:	e03c      	b.n	801562c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80155b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7fb fc26 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80155bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155c0:	e034      	b.n	801562c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80155c2:	f107 0318 	add.w	r3, r7, #24
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7fb fd72 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80155cc:	69fb      	ldr	r3, [r7, #28]
 80155ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155d0:	e02c      	b.n	801562c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80155d2:	4b09      	ldr	r3, [pc, #36]	; (80155f8 <UART_SetConfig+0x69c>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	f003 0320 	and.w	r3, r3, #32
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d016      	beq.n	801560c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80155de:	4b06      	ldr	r3, [pc, #24]	; (80155f8 <UART_SetConfig+0x69c>)
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	08db      	lsrs	r3, r3, #3
 80155e4:	f003 0303 	and.w	r3, r3, #3
 80155e8:	4a07      	ldr	r2, [pc, #28]	; (8015608 <UART_SetConfig+0x6ac>)
 80155ea:	fa22 f303 	lsr.w	r3, r2, r3
 80155ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80155f0:	e01c      	b.n	801562c <UART_SetConfig+0x6d0>
 80155f2:	bf00      	nop
 80155f4:	40011400 	.word	0x40011400
 80155f8:	58024400 	.word	0x58024400
 80155fc:	40007800 	.word	0x40007800
 8015600:	40007c00 	.word	0x40007c00
 8015604:	58000c00 	.word	0x58000c00
 8015608:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801560c:	4b9d      	ldr	r3, [pc, #628]	; (8015884 <UART_SetConfig+0x928>)
 801560e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015610:	e00c      	b.n	801562c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015612:	4b9d      	ldr	r3, [pc, #628]	; (8015888 <UART_SetConfig+0x92c>)
 8015614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015616:	e009      	b.n	801562c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801561c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801561e:	e005      	b.n	801562c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015620:	2300      	movs	r3, #0
 8015622:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015624:	2301      	movs	r3, #1
 8015626:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801562a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801562e:	2b00      	cmp	r3, #0
 8015630:	f000 81de 	beq.w	80159f0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015638:	4a94      	ldr	r2, [pc, #592]	; (801588c <UART_SetConfig+0x930>)
 801563a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801563e:	461a      	mov	r2, r3
 8015640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015642:	fbb3 f3f2 	udiv	r3, r3, r2
 8015646:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	685a      	ldr	r2, [r3, #4]
 801564c:	4613      	mov	r3, r2
 801564e:	005b      	lsls	r3, r3, #1
 8015650:	4413      	add	r3, r2
 8015652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015654:	429a      	cmp	r2, r3
 8015656:	d305      	bcc.n	8015664 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	685b      	ldr	r3, [r3, #4]
 801565c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801565e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015660:	429a      	cmp	r2, r3
 8015662:	d903      	bls.n	801566c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8015664:	2301      	movs	r3, #1
 8015666:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801566a:	e1c1      	b.n	80159f0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801566c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801566e:	2200      	movs	r2, #0
 8015670:	60bb      	str	r3, [r7, #8]
 8015672:	60fa      	str	r2, [r7, #12]
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015678:	4a84      	ldr	r2, [pc, #528]	; (801588c <UART_SetConfig+0x930>)
 801567a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801567e:	b29b      	uxth	r3, r3
 8015680:	2200      	movs	r2, #0
 8015682:	603b      	str	r3, [r7, #0]
 8015684:	607a      	str	r2, [r7, #4]
 8015686:	e9d7 2300 	ldrd	r2, r3, [r7]
 801568a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801568e:	f7ea fe27 	bl	80002e0 <__aeabi_uldivmod>
 8015692:	4602      	mov	r2, r0
 8015694:	460b      	mov	r3, r1
 8015696:	4610      	mov	r0, r2
 8015698:	4619      	mov	r1, r3
 801569a:	f04f 0200 	mov.w	r2, #0
 801569e:	f04f 0300 	mov.w	r3, #0
 80156a2:	020b      	lsls	r3, r1, #8
 80156a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80156a8:	0202      	lsls	r2, r0, #8
 80156aa:	6979      	ldr	r1, [r7, #20]
 80156ac:	6849      	ldr	r1, [r1, #4]
 80156ae:	0849      	lsrs	r1, r1, #1
 80156b0:	2000      	movs	r0, #0
 80156b2:	460c      	mov	r4, r1
 80156b4:	4605      	mov	r5, r0
 80156b6:	eb12 0804 	adds.w	r8, r2, r4
 80156ba:	eb43 0905 	adc.w	r9, r3, r5
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	2200      	movs	r2, #0
 80156c4:	469a      	mov	sl, r3
 80156c6:	4693      	mov	fp, r2
 80156c8:	4652      	mov	r2, sl
 80156ca:	465b      	mov	r3, fp
 80156cc:	4640      	mov	r0, r8
 80156ce:	4649      	mov	r1, r9
 80156d0:	f7ea fe06 	bl	80002e0 <__aeabi_uldivmod>
 80156d4:	4602      	mov	r2, r0
 80156d6:	460b      	mov	r3, r1
 80156d8:	4613      	mov	r3, r2
 80156da:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80156dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80156e2:	d308      	bcc.n	80156f6 <UART_SetConfig+0x79a>
 80156e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80156ea:	d204      	bcs.n	80156f6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80156f2:	60da      	str	r2, [r3, #12]
 80156f4:	e17c      	b.n	80159f0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80156f6:	2301      	movs	r3, #1
 80156f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80156fc:	e178      	b.n	80159f0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	69db      	ldr	r3, [r3, #28]
 8015702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015706:	f040 80c5 	bne.w	8015894 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801570a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801570e:	2b20      	cmp	r3, #32
 8015710:	dc48      	bgt.n	80157a4 <UART_SetConfig+0x848>
 8015712:	2b00      	cmp	r3, #0
 8015714:	db7b      	blt.n	801580e <UART_SetConfig+0x8b2>
 8015716:	2b20      	cmp	r3, #32
 8015718:	d879      	bhi.n	801580e <UART_SetConfig+0x8b2>
 801571a:	a201      	add	r2, pc, #4	; (adr r2, 8015720 <UART_SetConfig+0x7c4>)
 801571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015720:	080157ab 	.word	0x080157ab
 8015724:	080157b3 	.word	0x080157b3
 8015728:	0801580f 	.word	0x0801580f
 801572c:	0801580f 	.word	0x0801580f
 8015730:	080157bb 	.word	0x080157bb
 8015734:	0801580f 	.word	0x0801580f
 8015738:	0801580f 	.word	0x0801580f
 801573c:	0801580f 	.word	0x0801580f
 8015740:	080157cb 	.word	0x080157cb
 8015744:	0801580f 	.word	0x0801580f
 8015748:	0801580f 	.word	0x0801580f
 801574c:	0801580f 	.word	0x0801580f
 8015750:	0801580f 	.word	0x0801580f
 8015754:	0801580f 	.word	0x0801580f
 8015758:	0801580f 	.word	0x0801580f
 801575c:	0801580f 	.word	0x0801580f
 8015760:	080157db 	.word	0x080157db
 8015764:	0801580f 	.word	0x0801580f
 8015768:	0801580f 	.word	0x0801580f
 801576c:	0801580f 	.word	0x0801580f
 8015770:	0801580f 	.word	0x0801580f
 8015774:	0801580f 	.word	0x0801580f
 8015778:	0801580f 	.word	0x0801580f
 801577c:	0801580f 	.word	0x0801580f
 8015780:	0801580f 	.word	0x0801580f
 8015784:	0801580f 	.word	0x0801580f
 8015788:	0801580f 	.word	0x0801580f
 801578c:	0801580f 	.word	0x0801580f
 8015790:	0801580f 	.word	0x0801580f
 8015794:	0801580f 	.word	0x0801580f
 8015798:	0801580f 	.word	0x0801580f
 801579c:	0801580f 	.word	0x0801580f
 80157a0:	08015801 	.word	0x08015801
 80157a4:	2b40      	cmp	r3, #64	; 0x40
 80157a6:	d02e      	beq.n	8015806 <UART_SetConfig+0x8aa>
 80157a8:	e031      	b.n	801580e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80157aa:	f7f9 fb1f 	bl	800edec <HAL_RCC_GetPCLK1Freq>
 80157ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80157b0:	e033      	b.n	801581a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80157b2:	f7f9 fb31 	bl	800ee18 <HAL_RCC_GetPCLK2Freq>
 80157b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80157b8:	e02f      	b.n	801581a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80157ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80157be:	4618      	mov	r0, r3
 80157c0:	f7fb fb22 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80157c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157c8:	e027      	b.n	801581a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80157ca:	f107 0318 	add.w	r3, r7, #24
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7fb fc6e 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80157d4:	69fb      	ldr	r3, [r7, #28]
 80157d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157d8:	e01f      	b.n	801581a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80157da:	4b2d      	ldr	r3, [pc, #180]	; (8015890 <UART_SetConfig+0x934>)
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	f003 0320 	and.w	r3, r3, #32
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d009      	beq.n	80157fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80157e6:	4b2a      	ldr	r3, [pc, #168]	; (8015890 <UART_SetConfig+0x934>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	08db      	lsrs	r3, r3, #3
 80157ec:	f003 0303 	and.w	r3, r3, #3
 80157f0:	4a24      	ldr	r2, [pc, #144]	; (8015884 <UART_SetConfig+0x928>)
 80157f2:	fa22 f303 	lsr.w	r3, r2, r3
 80157f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80157f8:	e00f      	b.n	801581a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80157fa:	4b22      	ldr	r3, [pc, #136]	; (8015884 <UART_SetConfig+0x928>)
 80157fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80157fe:	e00c      	b.n	801581a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015800:	4b21      	ldr	r3, [pc, #132]	; (8015888 <UART_SetConfig+0x92c>)
 8015802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015804:	e009      	b.n	801581a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801580a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801580c:	e005      	b.n	801581a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801580e:	2300      	movs	r3, #0
 8015810:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015812:	2301      	movs	r3, #1
 8015814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015818:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801581c:	2b00      	cmp	r3, #0
 801581e:	f000 80e7 	beq.w	80159f0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015822:	697b      	ldr	r3, [r7, #20]
 8015824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015826:	4a19      	ldr	r2, [pc, #100]	; (801588c <UART_SetConfig+0x930>)
 8015828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801582c:	461a      	mov	r2, r3
 801582e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015830:	fbb3 f3f2 	udiv	r3, r3, r2
 8015834:	005a      	lsls	r2, r3, #1
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	085b      	lsrs	r3, r3, #1
 801583c:	441a      	add	r2, r3
 801583e:	697b      	ldr	r3, [r7, #20]
 8015840:	685b      	ldr	r3, [r3, #4]
 8015842:	fbb2 f3f3 	udiv	r3, r2, r3
 8015846:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801584a:	2b0f      	cmp	r3, #15
 801584c:	d916      	bls.n	801587c <UART_SetConfig+0x920>
 801584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015854:	d212      	bcs.n	801587c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015858:	b29b      	uxth	r3, r3
 801585a:	f023 030f 	bic.w	r3, r3, #15
 801585e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015862:	085b      	lsrs	r3, r3, #1
 8015864:	b29b      	uxth	r3, r3
 8015866:	f003 0307 	and.w	r3, r3, #7
 801586a:	b29a      	uxth	r2, r3
 801586c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801586e:	4313      	orrs	r3, r2
 8015870:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015872:	697b      	ldr	r3, [r7, #20]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015878:	60da      	str	r2, [r3, #12]
 801587a:	e0b9      	b.n	80159f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801587c:	2301      	movs	r3, #1
 801587e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015882:	e0b5      	b.n	80159f0 <UART_SetConfig+0xa94>
 8015884:	03d09000 	.word	0x03d09000
 8015888:	003d0900 	.word	0x003d0900
 801588c:	0801b17c 	.word	0x0801b17c
 8015890:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015894:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015898:	2b20      	cmp	r3, #32
 801589a:	dc49      	bgt.n	8015930 <UART_SetConfig+0x9d4>
 801589c:	2b00      	cmp	r3, #0
 801589e:	db7c      	blt.n	801599a <UART_SetConfig+0xa3e>
 80158a0:	2b20      	cmp	r3, #32
 80158a2:	d87a      	bhi.n	801599a <UART_SetConfig+0xa3e>
 80158a4:	a201      	add	r2, pc, #4	; (adr r2, 80158ac <UART_SetConfig+0x950>)
 80158a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158aa:	bf00      	nop
 80158ac:	08015937 	.word	0x08015937
 80158b0:	0801593f 	.word	0x0801593f
 80158b4:	0801599b 	.word	0x0801599b
 80158b8:	0801599b 	.word	0x0801599b
 80158bc:	08015947 	.word	0x08015947
 80158c0:	0801599b 	.word	0x0801599b
 80158c4:	0801599b 	.word	0x0801599b
 80158c8:	0801599b 	.word	0x0801599b
 80158cc:	08015957 	.word	0x08015957
 80158d0:	0801599b 	.word	0x0801599b
 80158d4:	0801599b 	.word	0x0801599b
 80158d8:	0801599b 	.word	0x0801599b
 80158dc:	0801599b 	.word	0x0801599b
 80158e0:	0801599b 	.word	0x0801599b
 80158e4:	0801599b 	.word	0x0801599b
 80158e8:	0801599b 	.word	0x0801599b
 80158ec:	08015967 	.word	0x08015967
 80158f0:	0801599b 	.word	0x0801599b
 80158f4:	0801599b 	.word	0x0801599b
 80158f8:	0801599b 	.word	0x0801599b
 80158fc:	0801599b 	.word	0x0801599b
 8015900:	0801599b 	.word	0x0801599b
 8015904:	0801599b 	.word	0x0801599b
 8015908:	0801599b 	.word	0x0801599b
 801590c:	0801599b 	.word	0x0801599b
 8015910:	0801599b 	.word	0x0801599b
 8015914:	0801599b 	.word	0x0801599b
 8015918:	0801599b 	.word	0x0801599b
 801591c:	0801599b 	.word	0x0801599b
 8015920:	0801599b 	.word	0x0801599b
 8015924:	0801599b 	.word	0x0801599b
 8015928:	0801599b 	.word	0x0801599b
 801592c:	0801598d 	.word	0x0801598d
 8015930:	2b40      	cmp	r3, #64	; 0x40
 8015932:	d02e      	beq.n	8015992 <UART_SetConfig+0xa36>
 8015934:	e031      	b.n	801599a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015936:	f7f9 fa59 	bl	800edec <HAL_RCC_GetPCLK1Freq>
 801593a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801593c:	e033      	b.n	80159a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801593e:	f7f9 fa6b 	bl	800ee18 <HAL_RCC_GetPCLK2Freq>
 8015942:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015944:	e02f      	b.n	80159a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801594a:	4618      	mov	r0, r3
 801594c:	f7fb fa5c 	bl	8010e08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015954:	e027      	b.n	80159a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015956:	f107 0318 	add.w	r3, r7, #24
 801595a:	4618      	mov	r0, r3
 801595c:	f7fb fba8 	bl	80110b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015960:	69fb      	ldr	r3, [r7, #28]
 8015962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015964:	e01f      	b.n	80159a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015966:	4b2d      	ldr	r3, [pc, #180]	; (8015a1c <UART_SetConfig+0xac0>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	f003 0320 	and.w	r3, r3, #32
 801596e:	2b00      	cmp	r3, #0
 8015970:	d009      	beq.n	8015986 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015972:	4b2a      	ldr	r3, [pc, #168]	; (8015a1c <UART_SetConfig+0xac0>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	08db      	lsrs	r3, r3, #3
 8015978:	f003 0303 	and.w	r3, r3, #3
 801597c:	4a28      	ldr	r2, [pc, #160]	; (8015a20 <UART_SetConfig+0xac4>)
 801597e:	fa22 f303 	lsr.w	r3, r2, r3
 8015982:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015984:	e00f      	b.n	80159a6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015986:	4b26      	ldr	r3, [pc, #152]	; (8015a20 <UART_SetConfig+0xac4>)
 8015988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801598a:	e00c      	b.n	80159a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801598c:	4b25      	ldr	r3, [pc, #148]	; (8015a24 <UART_SetConfig+0xac8>)
 801598e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015990:	e009      	b.n	80159a6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015998:	e005      	b.n	80159a6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801599a:	2300      	movs	r3, #0
 801599c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801599e:	2301      	movs	r3, #1
 80159a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80159a4:	bf00      	nop
    }

    if (pclk != 0U)
 80159a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d021      	beq.n	80159f0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159b0:	4a1d      	ldr	r2, [pc, #116]	; (8015a28 <UART_SetConfig+0xacc>)
 80159b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80159b6:	461a      	mov	r2, r3
 80159b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	685b      	ldr	r3, [r3, #4]
 80159c2:	085b      	lsrs	r3, r3, #1
 80159c4:	441a      	add	r2, r3
 80159c6:	697b      	ldr	r3, [r7, #20]
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80159ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80159d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159d2:	2b0f      	cmp	r3, #15
 80159d4:	d909      	bls.n	80159ea <UART_SetConfig+0xa8e>
 80159d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159dc:	d205      	bcs.n	80159ea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80159de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159e0:	b29a      	uxth	r2, r3
 80159e2:	697b      	ldr	r3, [r7, #20]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	60da      	str	r2, [r3, #12]
 80159e8:	e002      	b.n	80159f0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80159ea:	2301      	movs	r3, #1
 80159ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80159f0:	697b      	ldr	r3, [r7, #20]
 80159f2:	2201      	movs	r2, #1
 80159f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	2201      	movs	r2, #1
 80159fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015a00:	697b      	ldr	r3, [r7, #20]
 8015a02:	2200      	movs	r2, #0
 8015a04:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015a06:	697b      	ldr	r3, [r7, #20]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015a0c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015a10:	4618      	mov	r0, r3
 8015a12:	3748      	adds	r7, #72	; 0x48
 8015a14:	46bd      	mov	sp, r7
 8015a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015a1a:	bf00      	nop
 8015a1c:	58024400 	.word	0x58024400
 8015a20:	03d09000 	.word	0x03d09000
 8015a24:	003d0900 	.word	0x003d0900
 8015a28:	0801b17c 	.word	0x0801b17c

08015a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a38:	f003 0308 	and.w	r3, r3, #8
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d00a      	beq.n	8015a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	430a      	orrs	r2, r1
 8015a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a5a:	f003 0301 	and.w	r3, r3, #1
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d00a      	beq.n	8015a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	685b      	ldr	r3, [r3, #4]
 8015a68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	430a      	orrs	r2, r1
 8015a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a7c:	f003 0302 	and.w	r3, r3, #2
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d00a      	beq.n	8015a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	685b      	ldr	r3, [r3, #4]
 8015a8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	430a      	orrs	r2, r1
 8015a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a9e:	f003 0304 	and.w	r3, r3, #4
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d00a      	beq.n	8015abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	685b      	ldr	r3, [r3, #4]
 8015aac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	430a      	orrs	r2, r1
 8015aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ac0:	f003 0310 	and.w	r3, r3, #16
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d00a      	beq.n	8015ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	689b      	ldr	r3, [r3, #8]
 8015ace:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	430a      	orrs	r2, r1
 8015adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ae2:	f003 0320 	and.w	r3, r3, #32
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d00a      	beq.n	8015b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	689b      	ldr	r3, [r3, #8]
 8015af0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	430a      	orrs	r2, r1
 8015afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d01a      	beq.n	8015b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	685b      	ldr	r3, [r3, #4]
 8015b12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	430a      	orrs	r2, r1
 8015b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015b2a:	d10a      	bne.n	8015b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	685b      	ldr	r3, [r3, #4]
 8015b32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	430a      	orrs	r2, r1
 8015b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d00a      	beq.n	8015b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	685b      	ldr	r3, [r3, #4]
 8015b54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	430a      	orrs	r2, r1
 8015b62:	605a      	str	r2, [r3, #4]
  }
}
 8015b64:	bf00      	nop
 8015b66:	370c      	adds	r7, #12
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6e:	4770      	bx	lr

08015b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b098      	sub	sp, #96	; 0x60
 8015b74:	af02      	add	r7, sp, #8
 8015b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015b80:	f7f0 f956 	bl	8005e30 <HAL_GetTick>
 8015b84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	f003 0308 	and.w	r3, r3, #8
 8015b90:	2b08      	cmp	r3, #8
 8015b92:	d12f      	bne.n	8015bf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015b98:	9300      	str	r3, [sp, #0]
 8015b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f000 f88e 	bl	8015cc4 <UART_WaitOnFlagUntilTimeout>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d022      	beq.n	8015bf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bb6:	e853 3f00 	ldrex	r3, [r3]
 8015bba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015bc2:	653b      	str	r3, [r7, #80]	; 0x50
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	461a      	mov	r2, r3
 8015bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8015bce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015bd4:	e841 2300 	strex	r3, r2, [r1]
 8015bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d1e6      	bne.n	8015bae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2220      	movs	r2, #32
 8015be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2200      	movs	r2, #0
 8015bec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015bf0:	2303      	movs	r3, #3
 8015bf2:	e063      	b.n	8015cbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	f003 0304 	and.w	r3, r3, #4
 8015bfe:	2b04      	cmp	r3, #4
 8015c00:	d149      	bne.n	8015c96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015c02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015c06:	9300      	str	r3, [sp, #0]
 8015c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f000 f857 	bl	8015cc4 <UART_WaitOnFlagUntilTimeout>
 8015c16:	4603      	mov	r3, r0
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d03c      	beq.n	8015c96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c24:	e853 3f00 	ldrex	r3, [r3]
 8015c28:	623b      	str	r3, [r7, #32]
   return(result);
 8015c2a:	6a3b      	ldr	r3, [r7, #32]
 8015c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	461a      	mov	r2, r3
 8015c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8015c3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c42:	e841 2300 	strex	r3, r2, [r1]
 8015c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d1e6      	bne.n	8015c1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	3308      	adds	r3, #8
 8015c54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c56:	693b      	ldr	r3, [r7, #16]
 8015c58:	e853 3f00 	ldrex	r3, [r3]
 8015c5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	f023 0301 	bic.w	r3, r3, #1
 8015c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	3308      	adds	r3, #8
 8015c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c6e:	61fa      	str	r2, [r7, #28]
 8015c70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c72:	69b9      	ldr	r1, [r7, #24]
 8015c74:	69fa      	ldr	r2, [r7, #28]
 8015c76:	e841 2300 	strex	r3, r2, [r1]
 8015c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8015c7c:	697b      	ldr	r3, [r7, #20]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d1e5      	bne.n	8015c4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	2220      	movs	r2, #32
 8015c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015c92:	2303      	movs	r3, #3
 8015c94:	e012      	b.n	8015cbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2220      	movs	r2, #32
 8015c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	2220      	movs	r2, #32
 8015ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	2200      	movs	r2, #0
 8015caa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2200      	movs	r2, #0
 8015cb0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015cba:	2300      	movs	r3, #0
}
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	3758      	adds	r7, #88	; 0x58
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}

08015cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b084      	sub	sp, #16
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	60b9      	str	r1, [r7, #8]
 8015cce:	603b      	str	r3, [r7, #0]
 8015cd0:	4613      	mov	r3, r2
 8015cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015cd4:	e04f      	b.n	8015d76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015cd6:	69bb      	ldr	r3, [r7, #24]
 8015cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015cdc:	d04b      	beq.n	8015d76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015cde:	f7f0 f8a7 	bl	8005e30 <HAL_GetTick>
 8015ce2:	4602      	mov	r2, r0
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	1ad3      	subs	r3, r2, r3
 8015ce8:	69ba      	ldr	r2, [r7, #24]
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d302      	bcc.n	8015cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8015cee:	69bb      	ldr	r3, [r7, #24]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d101      	bne.n	8015cf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015cf4:	2303      	movs	r3, #3
 8015cf6:	e04e      	b.n	8015d96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	f003 0304 	and.w	r3, r3, #4
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d037      	beq.n	8015d76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	2b80      	cmp	r3, #128	; 0x80
 8015d0a:	d034      	beq.n	8015d76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	2b40      	cmp	r3, #64	; 0x40
 8015d10:	d031      	beq.n	8015d76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	69db      	ldr	r3, [r3, #28]
 8015d18:	f003 0308 	and.w	r3, r3, #8
 8015d1c:	2b08      	cmp	r3, #8
 8015d1e:	d110      	bne.n	8015d42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	2208      	movs	r2, #8
 8015d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	f000 f95b 	bl	8015fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	2208      	movs	r2, #8
 8015d32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	2200      	movs	r2, #0
 8015d3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8015d3e:	2301      	movs	r3, #1
 8015d40:	e029      	b.n	8015d96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	69db      	ldr	r3, [r3, #28]
 8015d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015d50:	d111      	bne.n	8015d76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015d5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015d5c:	68f8      	ldr	r0, [r7, #12]
 8015d5e:	f000 f941 	bl	8015fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	2220      	movs	r2, #32
 8015d66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015d72:	2303      	movs	r3, #3
 8015d74:	e00f      	b.n	8015d96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	69da      	ldr	r2, [r3, #28]
 8015d7c:	68bb      	ldr	r3, [r7, #8]
 8015d7e:	4013      	ands	r3, r2
 8015d80:	68ba      	ldr	r2, [r7, #8]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	bf0c      	ite	eq
 8015d86:	2301      	moveq	r3, #1
 8015d88:	2300      	movne	r3, #0
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	461a      	mov	r2, r3
 8015d8e:	79fb      	ldrb	r3, [r7, #7]
 8015d90:	429a      	cmp	r2, r3
 8015d92:	d0a0      	beq.n	8015cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015d94:	2300      	movs	r3, #0
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3710      	adds	r7, #16
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}
	...

08015da0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015da0:	b480      	push	{r7}
 8015da2:	b0a3      	sub	sp, #140	; 0x8c
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	60f8      	str	r0, [r7, #12]
 8015da8:	60b9      	str	r1, [r7, #8]
 8015daa:	4613      	mov	r3, r2
 8015dac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	68ba      	ldr	r2, [r7, #8]
 8015db2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	88fa      	ldrh	r2, [r7, #6]
 8015db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	88fa      	ldrh	r2, [r7, #6]
 8015dc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	689b      	ldr	r3, [r3, #8]
 8015dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015dd2:	d10e      	bne.n	8015df2 <UART_Start_Receive_IT+0x52>
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	691b      	ldr	r3, [r3, #16]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d105      	bne.n	8015de8 <UART_Start_Receive_IT+0x48>
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015de2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015de6:	e02d      	b.n	8015e44 <UART_Start_Receive_IT+0xa4>
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	22ff      	movs	r2, #255	; 0xff
 8015dec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015df0:	e028      	b.n	8015e44 <UART_Start_Receive_IT+0xa4>
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	689b      	ldr	r3, [r3, #8]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d10d      	bne.n	8015e16 <UART_Start_Receive_IT+0x76>
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	691b      	ldr	r3, [r3, #16]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d104      	bne.n	8015e0c <UART_Start_Receive_IT+0x6c>
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	22ff      	movs	r2, #255	; 0xff
 8015e06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015e0a:	e01b      	b.n	8015e44 <UART_Start_Receive_IT+0xa4>
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	227f      	movs	r2, #127	; 0x7f
 8015e10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015e14:	e016      	b.n	8015e44 <UART_Start_Receive_IT+0xa4>
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	689b      	ldr	r3, [r3, #8]
 8015e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015e1e:	d10d      	bne.n	8015e3c <UART_Start_Receive_IT+0x9c>
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	691b      	ldr	r3, [r3, #16]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d104      	bne.n	8015e32 <UART_Start_Receive_IT+0x92>
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	227f      	movs	r2, #127	; 0x7f
 8015e2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015e30:	e008      	b.n	8015e44 <UART_Start_Receive_IT+0xa4>
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	223f      	movs	r2, #63	; 0x3f
 8015e36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015e3a:	e003      	b.n	8015e44 <UART_Start_Receive_IT+0xa4>
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	2200      	movs	r2, #0
 8015e40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	2200      	movs	r2, #0
 8015e48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	2222      	movs	r2, #34	; 0x22
 8015e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	3308      	adds	r3, #8
 8015e5a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015e5e:	e853 3f00 	ldrex	r3, [r3]
 8015e62:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015e66:	f043 0301 	orr.w	r3, r3, #1
 8015e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	3308      	adds	r3, #8
 8015e74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015e78:	673a      	str	r2, [r7, #112]	; 0x70
 8015e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e7c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015e7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015e80:	e841 2300 	strex	r3, r2, [r1]
 8015e84:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015e86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d1e3      	bne.n	8015e54 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015e94:	d14f      	bne.n	8015f36 <UART_Start_Receive_IT+0x196>
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015e9c:	88fa      	ldrh	r2, [r7, #6]
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	d349      	bcc.n	8015f36 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	689b      	ldr	r3, [r3, #8]
 8015ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015eaa:	d107      	bne.n	8015ebc <UART_Start_Receive_IT+0x11c>
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	691b      	ldr	r3, [r3, #16]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d103      	bne.n	8015ebc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	4a47      	ldr	r2, [pc, #284]	; (8015fd4 <UART_Start_Receive_IT+0x234>)
 8015eb8:	675a      	str	r2, [r3, #116]	; 0x74
 8015eba:	e002      	b.n	8015ec2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	4a46      	ldr	r2, [pc, #280]	; (8015fd8 <UART_Start_Receive_IT+0x238>)
 8015ec0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	691b      	ldr	r3, [r3, #16]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d01a      	beq.n	8015f00 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ed2:	e853 3f00 	ldrex	r3, [r3]
 8015ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	461a      	mov	r2, r3
 8015ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015eee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ef0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015ef2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015ef4:	e841 2300 	strex	r3, r2, [r1]
 8015ef8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d1e4      	bne.n	8015eca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	3308      	adds	r3, #8
 8015f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f0a:	e853 3f00 	ldrex	r3, [r3]
 8015f0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015f16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	3308      	adds	r3, #8
 8015f1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015f20:	64ba      	str	r2, [r7, #72]	; 0x48
 8015f22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015f28:	e841 2300 	strex	r3, r2, [r1]
 8015f2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d1e5      	bne.n	8015f00 <UART_Start_Receive_IT+0x160>
 8015f34:	e046      	b.n	8015fc4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	689b      	ldr	r3, [r3, #8]
 8015f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f3e:	d107      	bne.n	8015f50 <UART_Start_Receive_IT+0x1b0>
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	691b      	ldr	r3, [r3, #16]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d103      	bne.n	8015f50 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	4a24      	ldr	r2, [pc, #144]	; (8015fdc <UART_Start_Receive_IT+0x23c>)
 8015f4c:	675a      	str	r2, [r3, #116]	; 0x74
 8015f4e:	e002      	b.n	8015f56 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	4a23      	ldr	r2, [pc, #140]	; (8015fe0 <UART_Start_Receive_IT+0x240>)
 8015f54:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	691b      	ldr	r3, [r3, #16]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d019      	beq.n	8015f92 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f66:	e853 3f00 	ldrex	r3, [r3]
 8015f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8015f72:	677b      	str	r3, [r7, #116]	; 0x74
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	461a      	mov	r2, r3
 8015f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8015f7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f84:	e841 2300 	strex	r3, r2, [r1]
 8015f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d1e6      	bne.n	8015f5e <UART_Start_Receive_IT+0x1be>
 8015f90:	e018      	b.n	8015fc4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f98:	697b      	ldr	r3, [r7, #20]
 8015f9a:	e853 3f00 	ldrex	r3, [r3]
 8015f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	f043 0320 	orr.w	r3, r3, #32
 8015fa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	461a      	mov	r2, r3
 8015fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015fb0:	623b      	str	r3, [r7, #32]
 8015fb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fb4:	69f9      	ldr	r1, [r7, #28]
 8015fb6:	6a3a      	ldr	r2, [r7, #32]
 8015fb8:	e841 2300 	strex	r3, r2, [r1]
 8015fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8015fbe:	69bb      	ldr	r3, [r7, #24]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d1e6      	bne.n	8015f92 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015fc4:	2300      	movs	r3, #0
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	378c      	adds	r7, #140	; 0x8c
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop
 8015fd4:	08016805 	.word	0x08016805
 8015fd8:	080164a5 	.word	0x080164a5
 8015fdc:	080162ed 	.word	0x080162ed
 8015fe0:	08016135 	.word	0x08016135

08015fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b095      	sub	sp, #84	; 0x54
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ff4:	e853 3f00 	ldrex	r3, [r3]
 8015ff8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016000:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	461a      	mov	r2, r3
 8016008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801600a:	643b      	str	r3, [r7, #64]	; 0x40
 801600c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801600e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016010:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016012:	e841 2300 	strex	r3, r2, [r1]
 8016016:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801601a:	2b00      	cmp	r3, #0
 801601c:	d1e6      	bne.n	8015fec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	3308      	adds	r3, #8
 8016024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016026:	6a3b      	ldr	r3, [r7, #32]
 8016028:	e853 3f00 	ldrex	r3, [r3]
 801602c:	61fb      	str	r3, [r7, #28]
   return(result);
 801602e:	69fa      	ldr	r2, [r7, #28]
 8016030:	4b1e      	ldr	r3, [pc, #120]	; (80160ac <UART_EndRxTransfer+0xc8>)
 8016032:	4013      	ands	r3, r2
 8016034:	64bb      	str	r3, [r7, #72]	; 0x48
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	3308      	adds	r3, #8
 801603c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801603e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016040:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016046:	e841 2300 	strex	r3, r2, [r1]
 801604a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801604e:	2b00      	cmp	r3, #0
 8016050:	d1e5      	bne.n	801601e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016056:	2b01      	cmp	r3, #1
 8016058:	d118      	bne.n	801608c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	e853 3f00 	ldrex	r3, [r3]
 8016066:	60bb      	str	r3, [r7, #8]
   return(result);
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	f023 0310 	bic.w	r3, r3, #16
 801606e:	647b      	str	r3, [r7, #68]	; 0x44
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	461a      	mov	r2, r3
 8016076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016078:	61bb      	str	r3, [r7, #24]
 801607a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801607c:	6979      	ldr	r1, [r7, #20]
 801607e:	69ba      	ldr	r2, [r7, #24]
 8016080:	e841 2300 	strex	r3, r2, [r1]
 8016084:	613b      	str	r3, [r7, #16]
   return(result);
 8016086:	693b      	ldr	r3, [r7, #16]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d1e6      	bne.n	801605a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	2220      	movs	r2, #32
 8016090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2200      	movs	r2, #0
 8016098:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	2200      	movs	r2, #0
 801609e:	675a      	str	r2, [r3, #116]	; 0x74
}
 80160a0:	bf00      	nop
 80160a2:	3754      	adds	r7, #84	; 0x54
 80160a4:	46bd      	mov	sp, r7
 80160a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160aa:	4770      	bx	lr
 80160ac:	effffffe 	.word	0xeffffffe

080160b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b084      	sub	sp, #16
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	2200      	movs	r2, #0
 80160c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	2200      	movs	r2, #0
 80160ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80160ce:	68f8      	ldr	r0, [r7, #12]
 80160d0:	f7fe ff2e 	bl	8014f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80160d4:	bf00      	nop
 80160d6:	3710      	adds	r7, #16
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}

080160dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b088      	sub	sp, #32
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	e853 3f00 	ldrex	r3, [r3]
 80160f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80160f8:	61fb      	str	r3, [r7, #28]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	461a      	mov	r2, r3
 8016100:	69fb      	ldr	r3, [r7, #28]
 8016102:	61bb      	str	r3, [r7, #24]
 8016104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016106:	6979      	ldr	r1, [r7, #20]
 8016108:	69ba      	ldr	r2, [r7, #24]
 801610a:	e841 2300 	strex	r3, r2, [r1]
 801610e:	613b      	str	r3, [r7, #16]
   return(result);
 8016110:	693b      	ldr	r3, [r7, #16]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d1e6      	bne.n	80160e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	2220      	movs	r2, #32
 801611a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	2200      	movs	r2, #0
 8016122:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f7fe fef9 	bl	8014f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801612a:	bf00      	nop
 801612c:	3720      	adds	r7, #32
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
	...

08016134 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b09c      	sub	sp, #112	; 0x70
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016142:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801614c:	2b22      	cmp	r3, #34	; 0x22
 801614e:	f040 80be 	bne.w	80162ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016158:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801615c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8016160:	b2d9      	uxtb	r1, r3
 8016162:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8016166:	b2da      	uxtb	r2, r3
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801616c:	400a      	ands	r2, r1
 801616e:	b2d2      	uxtb	r2, r2
 8016170:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016176:	1c5a      	adds	r2, r3, #1
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016182:	b29b      	uxth	r3, r3
 8016184:	3b01      	subs	r3, #1
 8016186:	b29a      	uxth	r2, r3
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016194:	b29b      	uxth	r3, r3
 8016196:	2b00      	cmp	r3, #0
 8016198:	f040 80a1 	bne.w	80162de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161a4:	e853 3f00 	ldrex	r3, [r3]
 80161a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80161aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80161ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80161b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	461a      	mov	r2, r3
 80161b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80161ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80161bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80161c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80161c2:	e841 2300 	strex	r3, r2, [r1]
 80161c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80161c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d1e6      	bne.n	801619c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	3308      	adds	r3, #8
 80161d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161d8:	e853 3f00 	ldrex	r3, [r3]
 80161dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80161de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161e0:	f023 0301 	bic.w	r3, r3, #1
 80161e4:	667b      	str	r3, [r7, #100]	; 0x64
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	3308      	adds	r3, #8
 80161ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80161ee:	647a      	str	r2, [r7, #68]	; 0x44
 80161f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80161f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80161f6:	e841 2300 	strex	r3, r2, [r1]
 80161fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80161fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d1e5      	bne.n	80161ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	2220      	movs	r2, #32
 8016206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2200      	movs	r2, #0
 801620e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2200      	movs	r2, #0
 8016214:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	4a33      	ldr	r2, [pc, #204]	; (80162e8 <UART_RxISR_8BIT+0x1b4>)
 801621c:	4293      	cmp	r3, r2
 801621e:	d01f      	beq.n	8016260 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801622a:	2b00      	cmp	r3, #0
 801622c:	d018      	beq.n	8016260 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016236:	e853 3f00 	ldrex	r3, [r3]
 801623a:	623b      	str	r3, [r7, #32]
   return(result);
 801623c:	6a3b      	ldr	r3, [r7, #32]
 801623e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016242:	663b      	str	r3, [r7, #96]	; 0x60
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	461a      	mov	r2, r3
 801624a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801624c:	633b      	str	r3, [r7, #48]	; 0x30
 801624e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016254:	e841 2300 	strex	r3, r2, [r1]
 8016258:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801625c:	2b00      	cmp	r3, #0
 801625e:	d1e6      	bne.n	801622e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016264:	2b01      	cmp	r3, #1
 8016266:	d12e      	bne.n	80162c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	2200      	movs	r2, #0
 801626c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016274:	693b      	ldr	r3, [r7, #16]
 8016276:	e853 3f00 	ldrex	r3, [r3]
 801627a:	60fb      	str	r3, [r7, #12]
   return(result);
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	f023 0310 	bic.w	r3, r3, #16
 8016282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	461a      	mov	r2, r3
 801628a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801628c:	61fb      	str	r3, [r7, #28]
 801628e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016290:	69b9      	ldr	r1, [r7, #24]
 8016292:	69fa      	ldr	r2, [r7, #28]
 8016294:	e841 2300 	strex	r3, r2, [r1]
 8016298:	617b      	str	r3, [r7, #20]
   return(result);
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d1e6      	bne.n	801626e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	69db      	ldr	r3, [r3, #28]
 80162a6:	f003 0310 	and.w	r3, r3, #16
 80162aa:	2b10      	cmp	r3, #16
 80162ac:	d103      	bne.n	80162b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	2210      	movs	r2, #16
 80162b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80162bc:	4619      	mov	r1, r3
 80162be:	6878      	ldr	r0, [r7, #4]
 80162c0:	f7fe fe40 	bl	8014f44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80162c4:	e00b      	b.n	80162de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f7ec fd18 	bl	8002cfc <HAL_UART_RxCpltCallback>
}
 80162cc:	e007      	b.n	80162de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	699a      	ldr	r2, [r3, #24]
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	f042 0208 	orr.w	r2, r2, #8
 80162dc:	619a      	str	r2, [r3, #24]
}
 80162de:	bf00      	nop
 80162e0:	3770      	adds	r7, #112	; 0x70
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}
 80162e6:	bf00      	nop
 80162e8:	58000c00 	.word	0x58000c00

080162ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b09c      	sub	sp, #112	; 0x70
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80162fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016304:	2b22      	cmp	r3, #34	; 0x22
 8016306:	f040 80be 	bne.w	8016486 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016310:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016318:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801631a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801631e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8016322:	4013      	ands	r3, r2
 8016324:	b29a      	uxth	r2, r3
 8016326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016328:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801632e:	1c9a      	adds	r2, r3, #2
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801633a:	b29b      	uxth	r3, r3
 801633c:	3b01      	subs	r3, #1
 801633e:	b29a      	uxth	r2, r3
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801634c:	b29b      	uxth	r3, r3
 801634e:	2b00      	cmp	r3, #0
 8016350:	f040 80a1 	bne.w	8016496 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801635a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801635c:	e853 3f00 	ldrex	r3, [r3]
 8016360:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016368:	667b      	str	r3, [r7, #100]	; 0x64
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	461a      	mov	r2, r3
 8016370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016372:	657b      	str	r3, [r7, #84]	; 0x54
 8016374:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016376:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801637a:	e841 2300 	strex	r3, r2, [r1]
 801637e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016382:	2b00      	cmp	r3, #0
 8016384:	d1e6      	bne.n	8016354 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	3308      	adds	r3, #8
 801638c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801638e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016390:	e853 3f00 	ldrex	r3, [r3]
 8016394:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016398:	f023 0301 	bic.w	r3, r3, #1
 801639c:	663b      	str	r3, [r7, #96]	; 0x60
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	3308      	adds	r3, #8
 80163a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80163a6:	643a      	str	r2, [r7, #64]	; 0x40
 80163a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80163ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80163ae:	e841 2300 	strex	r3, r2, [r1]
 80163b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80163b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d1e5      	bne.n	8016386 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2220      	movs	r2, #32
 80163be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2200      	movs	r2, #0
 80163c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2200      	movs	r2, #0
 80163cc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	4a33      	ldr	r2, [pc, #204]	; (80164a0 <UART_RxISR_16BIT+0x1b4>)
 80163d4:	4293      	cmp	r3, r2
 80163d6:	d01f      	beq.n	8016418 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	685b      	ldr	r3, [r3, #4]
 80163de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d018      	beq.n	8016418 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ec:	6a3b      	ldr	r3, [r7, #32]
 80163ee:	e853 3f00 	ldrex	r3, [r3]
 80163f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80163f4:	69fb      	ldr	r3, [r7, #28]
 80163f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80163fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	461a      	mov	r2, r3
 8016402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016406:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801640a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801640c:	e841 2300 	strex	r3, r2, [r1]
 8016410:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016414:	2b00      	cmp	r3, #0
 8016416:	d1e6      	bne.n	80163e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801641c:	2b01      	cmp	r3, #1
 801641e:	d12e      	bne.n	801647e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	2200      	movs	r2, #0
 8016424:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	e853 3f00 	ldrex	r3, [r3]
 8016432:	60bb      	str	r3, [r7, #8]
   return(result);
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	f023 0310 	bic.w	r3, r3, #16
 801643a:	65bb      	str	r3, [r7, #88]	; 0x58
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	461a      	mov	r2, r3
 8016442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016444:	61bb      	str	r3, [r7, #24]
 8016446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016448:	6979      	ldr	r1, [r7, #20]
 801644a:	69ba      	ldr	r2, [r7, #24]
 801644c:	e841 2300 	strex	r3, r2, [r1]
 8016450:	613b      	str	r3, [r7, #16]
   return(result);
 8016452:	693b      	ldr	r3, [r7, #16]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d1e6      	bne.n	8016426 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	69db      	ldr	r3, [r3, #28]
 801645e:	f003 0310 	and.w	r3, r3, #16
 8016462:	2b10      	cmp	r3, #16
 8016464:	d103      	bne.n	801646e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	2210      	movs	r2, #16
 801646c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016474:	4619      	mov	r1, r3
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f7fe fd64 	bl	8014f44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801647c:	e00b      	b.n	8016496 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f7ec fc3c 	bl	8002cfc <HAL_UART_RxCpltCallback>
}
 8016484:	e007      	b.n	8016496 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	699a      	ldr	r2, [r3, #24]
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	f042 0208 	orr.w	r2, r2, #8
 8016494:	619a      	str	r2, [r3, #24]
}
 8016496:	bf00      	nop
 8016498:	3770      	adds	r7, #112	; 0x70
 801649a:	46bd      	mov	sp, r7
 801649c:	bd80      	pop	{r7, pc}
 801649e:	bf00      	nop
 80164a0:	58000c00 	.word	0x58000c00

080164a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b0ac      	sub	sp, #176	; 0xb0
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	69db      	ldr	r3, [r3, #28]
 80164bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	689b      	ldr	r3, [r3, #8]
 80164d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80164da:	2b22      	cmp	r3, #34	; 0x22
 80164dc:	f040 8180 	bne.w	80167e0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80164e6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80164ea:	e123      	b.n	8016734 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164f2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80164f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80164fa:	b2d9      	uxtb	r1, r3
 80164fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8016500:	b2da      	uxtb	r2, r3
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016506:	400a      	ands	r2, r1
 8016508:	b2d2      	uxtb	r2, r2
 801650a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016510:	1c5a      	adds	r2, r3, #1
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801651c:	b29b      	uxth	r3, r3
 801651e:	3b01      	subs	r3, #1
 8016520:	b29a      	uxth	r2, r3
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	69db      	ldr	r3, [r3, #28]
 801652e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016536:	f003 0307 	and.w	r3, r3, #7
 801653a:	2b00      	cmp	r3, #0
 801653c:	d053      	beq.n	80165e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801653e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016542:	f003 0301 	and.w	r3, r3, #1
 8016546:	2b00      	cmp	r3, #0
 8016548:	d011      	beq.n	801656e <UART_RxISR_8BIT_FIFOEN+0xca>
 801654a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801654e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016552:	2b00      	cmp	r3, #0
 8016554:	d00b      	beq.n	801656e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	2201      	movs	r2, #1
 801655c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016564:	f043 0201 	orr.w	r2, r3, #1
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801656e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016572:	f003 0302 	and.w	r3, r3, #2
 8016576:	2b00      	cmp	r3, #0
 8016578:	d011      	beq.n	801659e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801657a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801657e:	f003 0301 	and.w	r3, r3, #1
 8016582:	2b00      	cmp	r3, #0
 8016584:	d00b      	beq.n	801659e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	2202      	movs	r2, #2
 801658c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016594:	f043 0204 	orr.w	r2, r3, #4
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801659e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80165a2:	f003 0304 	and.w	r3, r3, #4
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d011      	beq.n	80165ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80165aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80165ae:	f003 0301 	and.w	r3, r3, #1
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d00b      	beq.n	80165ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2204      	movs	r2, #4
 80165bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165c4:	f043 0202 	orr.w	r2, r3, #2
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d006      	beq.n	80165e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f7fe fca9 	bl	8014f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	2200      	movs	r2, #0
 80165e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80165ec:	b29b      	uxth	r3, r3
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	f040 80a0 	bne.w	8016734 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80165fc:	e853 3f00 	ldrex	r3, [r3]
 8016600:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8016602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	461a      	mov	r2, r3
 8016612:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016616:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016618:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801661a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801661c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801661e:	e841 2300 	strex	r3, r2, [r1]
 8016622:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8016624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016626:	2b00      	cmp	r3, #0
 8016628:	d1e4      	bne.n	80165f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	3308      	adds	r3, #8
 8016630:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016634:	e853 3f00 	ldrex	r3, [r3]
 8016638:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801663a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801663c:	4b6e      	ldr	r3, [pc, #440]	; (80167f8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801663e:	4013      	ands	r3, r2
 8016640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	3308      	adds	r3, #8
 801664a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801664e:	66ba      	str	r2, [r7, #104]	; 0x68
 8016650:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016652:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016654:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016656:	e841 2300 	strex	r3, r2, [r1]
 801665a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801665c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801665e:	2b00      	cmp	r3, #0
 8016660:	d1e3      	bne.n	801662a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	2220      	movs	r2, #32
 8016666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	2200      	movs	r2, #0
 801666e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2200      	movs	r2, #0
 8016674:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	4a60      	ldr	r2, [pc, #384]	; (80167fc <UART_RxISR_8BIT_FIFOEN+0x358>)
 801667c:	4293      	cmp	r3, r2
 801667e:	d021      	beq.n	80166c4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	685b      	ldr	r3, [r3, #4]
 8016686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801668a:	2b00      	cmp	r3, #0
 801668c:	d01a      	beq.n	80166c4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016696:	e853 3f00 	ldrex	r3, [r3]
 801669a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801669c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801669e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80166a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	461a      	mov	r2, r3
 80166ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80166b0:	657b      	str	r3, [r7, #84]	; 0x54
 80166b2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80166b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80166b8:	e841 2300 	strex	r3, r2, [r1]
 80166bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80166be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d1e4      	bne.n	801668e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166c8:	2b01      	cmp	r3, #1
 80166ca:	d130      	bne.n	801672e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2200      	movs	r2, #0
 80166d0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166da:	e853 3f00 	ldrex	r3, [r3]
 80166de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80166e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e2:	f023 0310 	bic.w	r3, r3, #16
 80166e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	461a      	mov	r2, r3
 80166f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80166f4:	643b      	str	r3, [r7, #64]	; 0x40
 80166f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80166fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80166fc:	e841 2300 	strex	r3, r2, [r1]
 8016700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016704:	2b00      	cmp	r3, #0
 8016706:	d1e4      	bne.n	80166d2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	69db      	ldr	r3, [r3, #28]
 801670e:	f003 0310 	and.w	r3, r3, #16
 8016712:	2b10      	cmp	r3, #16
 8016714:	d103      	bne.n	801671e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	2210      	movs	r2, #16
 801671c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016724:	4619      	mov	r1, r3
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f7fe fc0c 	bl	8014f44 <HAL_UARTEx_RxEventCallback>
 801672c:	e002      	b.n	8016734 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801672e:	6878      	ldr	r0, [r7, #4]
 8016730:	f7ec fae4 	bl	8002cfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016734:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016738:	2b00      	cmp	r3, #0
 801673a:	d006      	beq.n	801674a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801673c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016740:	f003 0320 	and.w	r3, r3, #32
 8016744:	2b00      	cmp	r3, #0
 8016746:	f47f aed1 	bne.w	80164ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016750:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016754:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8016758:	2b00      	cmp	r3, #0
 801675a:	d049      	beq.n	80167f0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016762:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8016766:	429a      	cmp	r2, r3
 8016768:	d242      	bcs.n	80167f0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	3308      	adds	r3, #8
 8016770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016772:	6a3b      	ldr	r3, [r7, #32]
 8016774:	e853 3f00 	ldrex	r3, [r3]
 8016778:	61fb      	str	r3, [r7, #28]
   return(result);
 801677a:	69fb      	ldr	r3, [r7, #28]
 801677c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	3308      	adds	r3, #8
 801678a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801678e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016796:	e841 2300 	strex	r3, r2, [r1]
 801679a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d1e3      	bne.n	801676a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	4a16      	ldr	r2, [pc, #88]	; (8016800 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80167a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	e853 3f00 	ldrex	r3, [r3]
 80167b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80167b6:	68bb      	ldr	r3, [r7, #8]
 80167b8:	f043 0320 	orr.w	r3, r3, #32
 80167bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	461a      	mov	r2, r3
 80167c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80167ca:	61bb      	str	r3, [r7, #24]
 80167cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167ce:	6979      	ldr	r1, [r7, #20]
 80167d0:	69ba      	ldr	r2, [r7, #24]
 80167d2:	e841 2300 	strex	r3, r2, [r1]
 80167d6:	613b      	str	r3, [r7, #16]
   return(result);
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d1e4      	bne.n	80167a8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80167de:	e007      	b.n	80167f0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	699a      	ldr	r2, [r3, #24]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	f042 0208 	orr.w	r2, r2, #8
 80167ee:	619a      	str	r2, [r3, #24]
}
 80167f0:	bf00      	nop
 80167f2:	37b0      	adds	r7, #176	; 0xb0
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	effffffe 	.word	0xeffffffe
 80167fc:	58000c00 	.word	0x58000c00
 8016800:	08016135 	.word	0x08016135

08016804 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b0ae      	sub	sp, #184	; 0xb8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016812:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	69db      	ldr	r3, [r3, #28]
 801681c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	689b      	ldr	r3, [r3, #8]
 8016830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801683a:	2b22      	cmp	r3, #34	; 0x22
 801683c:	f040 8184 	bne.w	8016b48 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016846:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801684a:	e127      	b.n	8016a9c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016852:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801685a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801685e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8016862:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016866:	4013      	ands	r3, r2
 8016868:	b29a      	uxth	r2, r3
 801686a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801686e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016874:	1c9a      	adds	r2, r3, #2
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016880:	b29b      	uxth	r3, r3
 8016882:	3b01      	subs	r3, #1
 8016884:	b29a      	uxth	r2, r3
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	69db      	ldr	r3, [r3, #28]
 8016892:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801689a:	f003 0307 	and.w	r3, r3, #7
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d053      	beq.n	801694a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80168a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80168a6:	f003 0301 	and.w	r3, r3, #1
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d011      	beq.n	80168d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80168ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d00b      	beq.n	80168d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	2201      	movs	r2, #1
 80168c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80168c8:	f043 0201 	orr.w	r2, r3, #1
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80168d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80168d6:	f003 0302 	and.w	r3, r3, #2
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d011      	beq.n	8016902 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80168de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80168e2:	f003 0301 	and.w	r3, r3, #1
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d00b      	beq.n	8016902 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	2202      	movs	r2, #2
 80168f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80168f8:	f043 0204 	orr.w	r2, r3, #4
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016906:	f003 0304 	and.w	r3, r3, #4
 801690a:	2b00      	cmp	r3, #0
 801690c:	d011      	beq.n	8016932 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801690e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016912:	f003 0301 	and.w	r3, r3, #1
 8016916:	2b00      	cmp	r3, #0
 8016918:	d00b      	beq.n	8016932 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	2204      	movs	r2, #4
 8016920:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016928:	f043 0202 	orr.w	r2, r3, #2
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016938:	2b00      	cmp	r3, #0
 801693a:	d006      	beq.n	801694a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801693c:	6878      	ldr	r0, [r7, #4]
 801693e:	f7fe faf7 	bl	8014f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2200      	movs	r2, #0
 8016946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016950:	b29b      	uxth	r3, r3
 8016952:	2b00      	cmp	r3, #0
 8016954:	f040 80a2 	bne.w	8016a9c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801695e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016960:	e853 3f00 	ldrex	r3, [r3]
 8016964:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801696c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	461a      	mov	r2, r3
 8016976:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801697a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801697e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016980:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016986:	e841 2300 	strex	r3, r2, [r1]
 801698a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801698c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801698e:	2b00      	cmp	r3, #0
 8016990:	d1e2      	bne.n	8016958 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	3308      	adds	r3, #8
 8016998:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801699a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801699c:	e853 3f00 	ldrex	r3, [r3]
 80169a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80169a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80169a4:	4b6e      	ldr	r3, [pc, #440]	; (8016b60 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80169a6:	4013      	ands	r3, r2
 80169a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	3308      	adds	r3, #8
 80169b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80169b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80169b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80169bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80169be:	e841 2300 	strex	r3, r2, [r1]
 80169c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80169c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d1e3      	bne.n	8016992 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2220      	movs	r2, #32
 80169ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2200      	movs	r2, #0
 80169d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2200      	movs	r2, #0
 80169dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	4a60      	ldr	r2, [pc, #384]	; (8016b64 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80169e4:	4293      	cmp	r3, r2
 80169e6:	d021      	beq.n	8016a2c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	685b      	ldr	r3, [r3, #4]
 80169ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d01a      	beq.n	8016a2c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169fe:	e853 3f00 	ldrex	r3, [r3]
 8016a02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	461a      	mov	r2, r3
 8016a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016a18:	65bb      	str	r3, [r7, #88]	; 0x58
 8016a1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016a1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016a20:	e841 2300 	strex	r3, r2, [r1]
 8016a24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d1e4      	bne.n	80169f6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a30:	2b01      	cmp	r3, #1
 8016a32:	d130      	bne.n	8016a96 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	2200      	movs	r2, #0
 8016a38:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a42:	e853 3f00 	ldrex	r3, [r3]
 8016a46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a4a:	f023 0310 	bic.w	r3, r3, #16
 8016a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	461a      	mov	r2, r3
 8016a58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8016a5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016a64:	e841 2300 	strex	r3, r2, [r1]
 8016a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d1e4      	bne.n	8016a3a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	69db      	ldr	r3, [r3, #28]
 8016a76:	f003 0310 	and.w	r3, r3, #16
 8016a7a:	2b10      	cmp	r3, #16
 8016a7c:	d103      	bne.n	8016a86 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	2210      	movs	r2, #16
 8016a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f7fe fa58 	bl	8014f44 <HAL_UARTEx_RxEventCallback>
 8016a94:	e002      	b.n	8016a9c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f7ec f930 	bl	8002cfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016a9c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d006      	beq.n	8016ab2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016aa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016aa8:	f003 0320 	and.w	r3, r3, #32
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	f47f aecd 	bne.w	801684c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ab8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016abc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d049      	beq.n	8016b58 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016aca:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8016ace:	429a      	cmp	r2, r3
 8016ad0:	d242      	bcs.n	8016b58 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	3308      	adds	r3, #8
 8016ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016adc:	e853 3f00 	ldrex	r3, [r3]
 8016ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8016ae2:	6a3b      	ldr	r3, [r7, #32]
 8016ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	3308      	adds	r3, #8
 8016af2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016af6:	633a      	str	r2, [r7, #48]	; 0x30
 8016af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016afe:	e841 2300 	strex	r3, r2, [r1]
 8016b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d1e3      	bne.n	8016ad2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	4a16      	ldr	r2, [pc, #88]	; (8016b68 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8016b0e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b16:	693b      	ldr	r3, [r7, #16]
 8016b18:	e853 3f00 	ldrex	r3, [r3]
 8016b1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	f043 0320 	orr.w	r3, r3, #32
 8016b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	461a      	mov	r2, r3
 8016b2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016b32:	61fb      	str	r3, [r7, #28]
 8016b34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b36:	69b9      	ldr	r1, [r7, #24]
 8016b38:	69fa      	ldr	r2, [r7, #28]
 8016b3a:	e841 2300 	strex	r3, r2, [r1]
 8016b3e:	617b      	str	r3, [r7, #20]
   return(result);
 8016b40:	697b      	ldr	r3, [r7, #20]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d1e4      	bne.n	8016b10 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016b46:	e007      	b.n	8016b58 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	699a      	ldr	r2, [r3, #24]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	f042 0208 	orr.w	r2, r2, #8
 8016b56:	619a      	str	r2, [r3, #24]
}
 8016b58:	bf00      	nop
 8016b5a:	37b8      	adds	r7, #184	; 0xb8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}
 8016b60:	effffffe 	.word	0xeffffffe
 8016b64:	58000c00 	.word	0x58000c00
 8016b68:	080162ed 	.word	0x080162ed

08016b6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016b6c:	b480      	push	{r7}
 8016b6e:	b083      	sub	sp, #12
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016b74:	bf00      	nop
 8016b76:	370c      	adds	r7, #12
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7e:	4770      	bx	lr

08016b80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016b80:	b480      	push	{r7}
 8016b82:	b083      	sub	sp, #12
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016b88:	bf00      	nop
 8016b8a:	370c      	adds	r7, #12
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b92:	4770      	bx	lr

08016b94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016b94:	b480      	push	{r7}
 8016b96:	b083      	sub	sp, #12
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016b9c:	bf00      	nop
 8016b9e:	370c      	adds	r7, #12
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba6:	4770      	bx	lr

08016ba8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016ba8:	b480      	push	{r7}
 8016baa:	b089      	sub	sp, #36	; 0x24
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016bb6:	2b01      	cmp	r3, #1
 8016bb8:	d101      	bne.n	8016bbe <HAL_UARTEx_EnableStopMode+0x16>
 8016bba:	2302      	movs	r3, #2
 8016bbc:	e021      	b.n	8016c02 <HAL_UARTEx_EnableStopMode+0x5a>
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	2201      	movs	r2, #1
 8016bc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	e853 3f00 	ldrex	r3, [r3]
 8016bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	f043 0302 	orr.w	r3, r3, #2
 8016bda:	61fb      	str	r3, [r7, #28]
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	461a      	mov	r2, r3
 8016be2:	69fb      	ldr	r3, [r7, #28]
 8016be4:	61bb      	str	r3, [r7, #24]
 8016be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016be8:	6979      	ldr	r1, [r7, #20]
 8016bea:	69ba      	ldr	r2, [r7, #24]
 8016bec:	e841 2300 	strex	r3, r2, [r1]
 8016bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d1e6      	bne.n	8016bc6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016c00:	2300      	movs	r3, #0
}
 8016c02:	4618      	mov	r0, r3
 8016c04:	3724      	adds	r7, #36	; 0x24
 8016c06:	46bd      	mov	sp, r7
 8016c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c0c:	4770      	bx	lr

08016c0e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b084      	sub	sp, #16
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016c1c:	2b01      	cmp	r3, #1
 8016c1e:	d101      	bne.n	8016c24 <HAL_UARTEx_EnableFifoMode+0x16>
 8016c20:	2302      	movs	r3, #2
 8016c22:	e02b      	b.n	8016c7c <HAL_UARTEx_EnableFifoMode+0x6e>
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2201      	movs	r2, #1
 8016c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	2224      	movs	r2, #36	; 0x24
 8016c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	681a      	ldr	r2, [r3, #0]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	f022 0201 	bic.w	r2, r2, #1
 8016c4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016c52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8016c5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	68fa      	ldr	r2, [r7, #12]
 8016c62:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	f000 f8c3 	bl	8016df0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2220      	movs	r2, #32
 8016c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2200      	movs	r2, #0
 8016c76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016c7a:	2300      	movs	r3, #0
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3710      	adds	r7, #16
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016c84:	b480      	push	{r7}
 8016c86:	b085      	sub	sp, #20
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016c92:	2b01      	cmp	r3, #1
 8016c94:	d101      	bne.n	8016c9a <HAL_UARTEx_DisableFifoMode+0x16>
 8016c96:	2302      	movs	r3, #2
 8016c98:	e027      	b.n	8016cea <HAL_UARTEx_DisableFifoMode+0x66>
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2201      	movs	r2, #1
 8016c9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	2224      	movs	r2, #36	; 0x24
 8016ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	681a      	ldr	r2, [r3, #0]
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	f022 0201 	bic.w	r2, r2, #1
 8016cc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016cc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2200      	movs	r2, #0
 8016cce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	68fa      	ldr	r2, [r7, #12]
 8016cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2220      	movs	r2, #32
 8016cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016ce8:	2300      	movs	r3, #0
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	3714      	adds	r7, #20
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf4:	4770      	bx	lr

08016cf6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016cf6:	b580      	push	{r7, lr}
 8016cf8:	b084      	sub	sp, #16
 8016cfa:	af00      	add	r7, sp, #0
 8016cfc:	6078      	str	r0, [r7, #4]
 8016cfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016d06:	2b01      	cmp	r3, #1
 8016d08:	d101      	bne.n	8016d0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016d0a:	2302      	movs	r3, #2
 8016d0c:	e02d      	b.n	8016d6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2201      	movs	r2, #1
 8016d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	2224      	movs	r2, #36	; 0x24
 8016d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	f022 0201 	bic.w	r2, r2, #1
 8016d34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	689b      	ldr	r3, [r3, #8]
 8016d3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	683a      	ldr	r2, [r7, #0]
 8016d46:	430a      	orrs	r2, r1
 8016d48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016d4a:	6878      	ldr	r0, [r7, #4]
 8016d4c:	f000 f850 	bl	8016df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	68fa      	ldr	r2, [r7, #12]
 8016d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	2220      	movs	r2, #32
 8016d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	2200      	movs	r2, #0
 8016d64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016d68:	2300      	movs	r3, #0
}
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	3710      	adds	r7, #16
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	bd80      	pop	{r7, pc}

08016d72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016d72:	b580      	push	{r7, lr}
 8016d74:	b084      	sub	sp, #16
 8016d76:	af00      	add	r7, sp, #0
 8016d78:	6078      	str	r0, [r7, #4]
 8016d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	d101      	bne.n	8016d8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016d86:	2302      	movs	r3, #2
 8016d88:	e02d      	b.n	8016de6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2201      	movs	r2, #1
 8016d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	2224      	movs	r2, #36	; 0x24
 8016d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	681a      	ldr	r2, [r3, #0]
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	f022 0201 	bic.w	r2, r2, #1
 8016db0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	689b      	ldr	r3, [r3, #8]
 8016db8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	683a      	ldr	r2, [r7, #0]
 8016dc2:	430a      	orrs	r2, r1
 8016dc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016dc6:	6878      	ldr	r0, [r7, #4]
 8016dc8:	f000 f812 	bl	8016df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	68fa      	ldr	r2, [r7, #12]
 8016dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	2220      	movs	r2, #32
 8016dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2200      	movs	r2, #0
 8016de0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016de4:	2300      	movs	r3, #0
}
 8016de6:	4618      	mov	r0, r3
 8016de8:	3710      	adds	r7, #16
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd80      	pop	{r7, pc}
	...

08016df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016df0:	b480      	push	{r7}
 8016df2:	b085      	sub	sp, #20
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d108      	bne.n	8016e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	2201      	movs	r2, #1
 8016e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2201      	movs	r2, #1
 8016e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016e10:	e031      	b.n	8016e76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016e12:	2310      	movs	r3, #16
 8016e14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016e16:	2310      	movs	r3, #16
 8016e18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	689b      	ldr	r3, [r3, #8]
 8016e20:	0e5b      	lsrs	r3, r3, #25
 8016e22:	b2db      	uxtb	r3, r3
 8016e24:	f003 0307 	and.w	r3, r3, #7
 8016e28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	689b      	ldr	r3, [r3, #8]
 8016e30:	0f5b      	lsrs	r3, r3, #29
 8016e32:	b2db      	uxtb	r3, r3
 8016e34:	f003 0307 	and.w	r3, r3, #7
 8016e38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016e3a:	7bbb      	ldrb	r3, [r7, #14]
 8016e3c:	7b3a      	ldrb	r2, [r7, #12]
 8016e3e:	4911      	ldr	r1, [pc, #68]	; (8016e84 <UARTEx_SetNbDataToProcess+0x94>)
 8016e40:	5c8a      	ldrb	r2, [r1, r2]
 8016e42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016e46:	7b3a      	ldrb	r2, [r7, #12]
 8016e48:	490f      	ldr	r1, [pc, #60]	; (8016e88 <UARTEx_SetNbDataToProcess+0x98>)
 8016e4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016e50:	b29a      	uxth	r2, r3
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016e58:	7bfb      	ldrb	r3, [r7, #15]
 8016e5a:	7b7a      	ldrb	r2, [r7, #13]
 8016e5c:	4909      	ldr	r1, [pc, #36]	; (8016e84 <UARTEx_SetNbDataToProcess+0x94>)
 8016e5e:	5c8a      	ldrb	r2, [r1, r2]
 8016e60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016e64:	7b7a      	ldrb	r2, [r7, #13]
 8016e66:	4908      	ldr	r1, [pc, #32]	; (8016e88 <UARTEx_SetNbDataToProcess+0x98>)
 8016e68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8016e6e:	b29a      	uxth	r2, r3
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016e76:	bf00      	nop
 8016e78:	3714      	adds	r7, #20
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e80:	4770      	bx	lr
 8016e82:	bf00      	nop
 8016e84:	0801b194 	.word	0x0801b194
 8016e88:	0801b19c 	.word	0x0801b19c

08016e8c <__NVIC_SetPriority>:
{
 8016e8c:	b480      	push	{r7}
 8016e8e:	b083      	sub	sp, #12
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	4603      	mov	r3, r0
 8016e94:	6039      	str	r1, [r7, #0]
 8016e96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	db0a      	blt.n	8016eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	b2da      	uxtb	r2, r3
 8016ea4:	490c      	ldr	r1, [pc, #48]	; (8016ed8 <__NVIC_SetPriority+0x4c>)
 8016ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016eaa:	0112      	lsls	r2, r2, #4
 8016eac:	b2d2      	uxtb	r2, r2
 8016eae:	440b      	add	r3, r1
 8016eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016eb4:	e00a      	b.n	8016ecc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016eb6:	683b      	ldr	r3, [r7, #0]
 8016eb8:	b2da      	uxtb	r2, r3
 8016eba:	4908      	ldr	r1, [pc, #32]	; (8016edc <__NVIC_SetPriority+0x50>)
 8016ebc:	88fb      	ldrh	r3, [r7, #6]
 8016ebe:	f003 030f 	and.w	r3, r3, #15
 8016ec2:	3b04      	subs	r3, #4
 8016ec4:	0112      	lsls	r2, r2, #4
 8016ec6:	b2d2      	uxtb	r2, r2
 8016ec8:	440b      	add	r3, r1
 8016eca:	761a      	strb	r2, [r3, #24]
}
 8016ecc:	bf00      	nop
 8016ece:	370c      	adds	r7, #12
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed6:	4770      	bx	lr
 8016ed8:	e000e100 	.word	0xe000e100
 8016edc:	e000ed00 	.word	0xe000ed00

08016ee0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016ee4:	4b05      	ldr	r3, [pc, #20]	; (8016efc <SysTick_Handler+0x1c>)
 8016ee6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016ee8:	f002 f958 	bl	801919c <xTaskGetSchedulerState>
 8016eec:	4603      	mov	r3, r0
 8016eee:	2b01      	cmp	r3, #1
 8016ef0:	d001      	beq.n	8016ef6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016ef2:	f002 ff79 	bl	8019de8 <xPortSysTickHandler>
  }
}
 8016ef6:	bf00      	nop
 8016ef8:	bd80      	pop	{r7, pc}
 8016efa:	bf00      	nop
 8016efc:	e000e010 	.word	0xe000e010

08016f00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016f00:	b580      	push	{r7, lr}
 8016f02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016f04:	2100      	movs	r1, #0
 8016f06:	f06f 0004 	mvn.w	r0, #4
 8016f0a:	f7ff ffbf 	bl	8016e8c <__NVIC_SetPriority>
#endif
}
 8016f0e:	bf00      	nop
 8016f10:	bd80      	pop	{r7, pc}
	...

08016f14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016f14:	b480      	push	{r7}
 8016f16:	b083      	sub	sp, #12
 8016f18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f1a:	f3ef 8305 	mrs	r3, IPSR
 8016f1e:	603b      	str	r3, [r7, #0]
  return(result);
 8016f20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d003      	beq.n	8016f2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016f26:	f06f 0305 	mvn.w	r3, #5
 8016f2a:	607b      	str	r3, [r7, #4]
 8016f2c:	e00c      	b.n	8016f48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016f2e:	4b0a      	ldr	r3, [pc, #40]	; (8016f58 <osKernelInitialize+0x44>)
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d105      	bne.n	8016f42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016f36:	4b08      	ldr	r3, [pc, #32]	; (8016f58 <osKernelInitialize+0x44>)
 8016f38:	2201      	movs	r2, #1
 8016f3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	607b      	str	r3, [r7, #4]
 8016f40:	e002      	b.n	8016f48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016f48:	687b      	ldr	r3, [r7, #4]
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	370c      	adds	r7, #12
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f54:	4770      	bx	lr
 8016f56:	bf00      	nop
 8016f58:	2400201c 	.word	0x2400201c

08016f5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b082      	sub	sp, #8
 8016f60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f62:	f3ef 8305 	mrs	r3, IPSR
 8016f66:	603b      	str	r3, [r7, #0]
  return(result);
 8016f68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d003      	beq.n	8016f76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016f6e:	f06f 0305 	mvn.w	r3, #5
 8016f72:	607b      	str	r3, [r7, #4]
 8016f74:	e010      	b.n	8016f98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016f76:	4b0b      	ldr	r3, [pc, #44]	; (8016fa4 <osKernelStart+0x48>)
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	2b01      	cmp	r3, #1
 8016f7c:	d109      	bne.n	8016f92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016f7e:	f7ff ffbf 	bl	8016f00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016f82:	4b08      	ldr	r3, [pc, #32]	; (8016fa4 <osKernelStart+0x48>)
 8016f84:	2202      	movs	r2, #2
 8016f86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016f88:	f001 fc0c 	bl	80187a4 <vTaskStartScheduler>
      stat = osOK;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	607b      	str	r3, [r7, #4]
 8016f90:	e002      	b.n	8016f98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016f98:	687b      	ldr	r3, [r7, #4]
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3708      	adds	r7, #8
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}
 8016fa2:	bf00      	nop
 8016fa4:	2400201c 	.word	0x2400201c

08016fa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b08e      	sub	sp, #56	; 0x38
 8016fac:	af04      	add	r7, sp, #16
 8016fae:	60f8      	str	r0, [r7, #12]
 8016fb0:	60b9      	str	r1, [r7, #8]
 8016fb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016fb8:	f3ef 8305 	mrs	r3, IPSR
 8016fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8016fbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d17e      	bne.n	80170c2 <osThreadNew+0x11a>
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d07b      	beq.n	80170c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016fca:	2380      	movs	r3, #128	; 0x80
 8016fcc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016fce:	2318      	movs	r3, #24
 8016fd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d045      	beq.n	801706e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d002      	beq.n	8016ff0 <osThreadNew+0x48>
        name = attr->name;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	699b      	ldr	r3, [r3, #24]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d002      	beq.n	8016ffe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	699b      	ldr	r3, [r3, #24]
 8016ffc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016ffe:	69fb      	ldr	r3, [r7, #28]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d008      	beq.n	8017016 <osThreadNew+0x6e>
 8017004:	69fb      	ldr	r3, [r7, #28]
 8017006:	2b38      	cmp	r3, #56	; 0x38
 8017008:	d805      	bhi.n	8017016 <osThreadNew+0x6e>
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	685b      	ldr	r3, [r3, #4]
 801700e:	f003 0301 	and.w	r3, r3, #1
 8017012:	2b00      	cmp	r3, #0
 8017014:	d001      	beq.n	801701a <osThreadNew+0x72>
        return (NULL);
 8017016:	2300      	movs	r3, #0
 8017018:	e054      	b.n	80170c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	695b      	ldr	r3, [r3, #20]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d003      	beq.n	801702a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	695b      	ldr	r3, [r3, #20]
 8017026:	089b      	lsrs	r3, r3, #2
 8017028:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	689b      	ldr	r3, [r3, #8]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d00e      	beq.n	8017050 <osThreadNew+0xa8>
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	68db      	ldr	r3, [r3, #12]
 8017036:	2b5b      	cmp	r3, #91	; 0x5b
 8017038:	d90a      	bls.n	8017050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801703e:	2b00      	cmp	r3, #0
 8017040:	d006      	beq.n	8017050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	695b      	ldr	r3, [r3, #20]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d002      	beq.n	8017050 <osThreadNew+0xa8>
        mem = 1;
 801704a:	2301      	movs	r3, #1
 801704c:	61bb      	str	r3, [r7, #24]
 801704e:	e010      	b.n	8017072 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	689b      	ldr	r3, [r3, #8]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d10c      	bne.n	8017072 <osThreadNew+0xca>
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	68db      	ldr	r3, [r3, #12]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d108      	bne.n	8017072 <osThreadNew+0xca>
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	691b      	ldr	r3, [r3, #16]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d104      	bne.n	8017072 <osThreadNew+0xca>
          mem = 0;
 8017068:	2300      	movs	r3, #0
 801706a:	61bb      	str	r3, [r7, #24]
 801706c:	e001      	b.n	8017072 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801706e:	2300      	movs	r3, #0
 8017070:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017072:	69bb      	ldr	r3, [r7, #24]
 8017074:	2b01      	cmp	r3, #1
 8017076:	d110      	bne.n	801709a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801707c:	687a      	ldr	r2, [r7, #4]
 801707e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017080:	9202      	str	r2, [sp, #8]
 8017082:	9301      	str	r3, [sp, #4]
 8017084:	69fb      	ldr	r3, [r7, #28]
 8017086:	9300      	str	r3, [sp, #0]
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	6a3a      	ldr	r2, [r7, #32]
 801708c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801708e:	68f8      	ldr	r0, [r7, #12]
 8017090:	f001 f9b2 	bl	80183f8 <xTaskCreateStatic>
 8017094:	4603      	mov	r3, r0
 8017096:	613b      	str	r3, [r7, #16]
 8017098:	e013      	b.n	80170c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801709a:	69bb      	ldr	r3, [r7, #24]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d110      	bne.n	80170c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80170a0:	6a3b      	ldr	r3, [r7, #32]
 80170a2:	b29a      	uxth	r2, r3
 80170a4:	f107 0310 	add.w	r3, r7, #16
 80170a8:	9301      	str	r3, [sp, #4]
 80170aa:	69fb      	ldr	r3, [r7, #28]
 80170ac:	9300      	str	r3, [sp, #0]
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80170b2:	68f8      	ldr	r0, [r7, #12]
 80170b4:	f001 f9fd 	bl	80184b2 <xTaskCreate>
 80170b8:	4603      	mov	r3, r0
 80170ba:	2b01      	cmp	r3, #1
 80170bc:	d001      	beq.n	80170c2 <osThreadNew+0x11a>
            hTask = NULL;
 80170be:	2300      	movs	r3, #0
 80170c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80170c2:	693b      	ldr	r3, [r7, #16]
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	3728      	adds	r7, #40	; 0x28
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bd80      	pop	{r7, pc}

080170cc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80170cc:	b480      	push	{r7}
 80170ce:	b083      	sub	sp, #12
 80170d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170d2:	f3ef 8305 	mrs	r3, IPSR
 80170d6:	603b      	str	r3, [r7, #0]
  return(result);
 80170d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d003      	beq.n	80170e6 <osThreadYield+0x1a>
    stat = osErrorISR;
 80170de:	f06f 0305 	mvn.w	r3, #5
 80170e2:	607b      	str	r3, [r7, #4]
 80170e4:	e009      	b.n	80170fa <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80170e6:	2300      	movs	r3, #0
 80170e8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80170ea:	4b07      	ldr	r3, [pc, #28]	; (8017108 <osThreadYield+0x3c>)
 80170ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170f0:	601a      	str	r2, [r3, #0]
 80170f2:	f3bf 8f4f 	dsb	sy
 80170f6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80170fa:	687b      	ldr	r3, [r7, #4]
}
 80170fc:	4618      	mov	r0, r3
 80170fe:	370c      	adds	r7, #12
 8017100:	46bd      	mov	sp, r7
 8017102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017106:	4770      	bx	lr
 8017108:	e000ed04 	.word	0xe000ed04

0801710c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801710c:	b580      	push	{r7, lr}
 801710e:	b084      	sub	sp, #16
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017114:	f3ef 8305 	mrs	r3, IPSR
 8017118:	60bb      	str	r3, [r7, #8]
  return(result);
 801711a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801711c:	2b00      	cmp	r3, #0
 801711e:	d003      	beq.n	8017128 <osDelay+0x1c>
    stat = osErrorISR;
 8017120:	f06f 0305 	mvn.w	r3, #5
 8017124:	60fb      	str	r3, [r7, #12]
 8017126:	e007      	b.n	8017138 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017128:	2300      	movs	r3, #0
 801712a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d002      	beq.n	8017138 <osDelay+0x2c>
      vTaskDelay(ticks);
 8017132:	6878      	ldr	r0, [r7, #4]
 8017134:	f001 fb02 	bl	801873c <vTaskDelay>
    }
  }

  return (stat);
 8017138:	68fb      	ldr	r3, [r7, #12]
}
 801713a:	4618      	mov	r0, r3
 801713c:	3710      	adds	r7, #16
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}

08017142 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8017142:	b580      	push	{r7, lr}
 8017144:	b086      	sub	sp, #24
 8017146:	af00      	add	r7, sp, #0
 8017148:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801714a:	2300      	movs	r3, #0
 801714c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801714e:	f3ef 8305 	mrs	r3, IPSR
 8017152:	60fb      	str	r3, [r7, #12]
  return(result);
 8017154:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8017156:	2b00      	cmp	r3, #0
 8017158:	d12d      	bne.n	80171b6 <osEventFlagsNew+0x74>
    mem = -1;
 801715a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801715e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d015      	beq.n	8017192 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	689b      	ldr	r3, [r3, #8]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d006      	beq.n	801717c <osEventFlagsNew+0x3a>
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	68db      	ldr	r3, [r3, #12]
 8017172:	2b1f      	cmp	r3, #31
 8017174:	d902      	bls.n	801717c <osEventFlagsNew+0x3a>
        mem = 1;
 8017176:	2301      	movs	r3, #1
 8017178:	613b      	str	r3, [r7, #16]
 801717a:	e00c      	b.n	8017196 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	689b      	ldr	r3, [r3, #8]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d108      	bne.n	8017196 <osEventFlagsNew+0x54>
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	68db      	ldr	r3, [r3, #12]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d104      	bne.n	8017196 <osEventFlagsNew+0x54>
          mem = 0;
 801718c:	2300      	movs	r3, #0
 801718e:	613b      	str	r3, [r7, #16]
 8017190:	e001      	b.n	8017196 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8017192:	2300      	movs	r3, #0
 8017194:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	2b01      	cmp	r3, #1
 801719a:	d106      	bne.n	80171aa <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	689b      	ldr	r3, [r3, #8]
 80171a0:	4618      	mov	r0, r3
 80171a2:	f000 f91d 	bl	80173e0 <xEventGroupCreateStatic>
 80171a6:	6178      	str	r0, [r7, #20]
 80171a8:	e005      	b.n	80171b6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80171aa:	693b      	ldr	r3, [r7, #16]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d102      	bne.n	80171b6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80171b0:	f000 f94d 	bl	801744e <xEventGroupCreate>
 80171b4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80171b6:	697b      	ldr	r3, [r7, #20]
}
 80171b8:	4618      	mov	r0, r3
 80171ba:	3718      	adds	r7, #24
 80171bc:	46bd      	mov	sp, r7
 80171be:	bd80      	pop	{r7, pc}

080171c0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b086      	sub	sp, #24
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80171ce:	693b      	ldr	r3, [r7, #16]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d004      	beq.n	80171de <osEventFlagsSet+0x1e>
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d003      	beq.n	80171e6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80171de:	f06f 0303 	mvn.w	r3, #3
 80171e2:	617b      	str	r3, [r7, #20]
 80171e4:	e028      	b.n	8017238 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80171e6:	f3ef 8305 	mrs	r3, IPSR
 80171ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80171ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d01d      	beq.n	801722e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80171f2:	2300      	movs	r3, #0
 80171f4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80171f6:	f107 0308 	add.w	r3, r7, #8
 80171fa:	461a      	mov	r2, r3
 80171fc:	6839      	ldr	r1, [r7, #0]
 80171fe:	6938      	ldr	r0, [r7, #16]
 8017200:	f000 fb46 	bl	8017890 <xEventGroupSetBitsFromISR>
 8017204:	4603      	mov	r3, r0
 8017206:	2b00      	cmp	r3, #0
 8017208:	d103      	bne.n	8017212 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801720a:	f06f 0302 	mvn.w	r3, #2
 801720e:	617b      	str	r3, [r7, #20]
 8017210:	e012      	b.n	8017238 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8017216:	68bb      	ldr	r3, [r7, #8]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d00d      	beq.n	8017238 <osEventFlagsSet+0x78>
 801721c:	4b09      	ldr	r3, [pc, #36]	; (8017244 <osEventFlagsSet+0x84>)
 801721e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017222:	601a      	str	r2, [r3, #0]
 8017224:	f3bf 8f4f 	dsb	sy
 8017228:	f3bf 8f6f 	isb	sy
 801722c:	e004      	b.n	8017238 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801722e:	6839      	ldr	r1, [r7, #0]
 8017230:	6938      	ldr	r0, [r7, #16]
 8017232:	f000 fa65 	bl	8017700 <xEventGroupSetBits>
 8017236:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8017238:	697b      	ldr	r3, [r7, #20]
}
 801723a:	4618      	mov	r0, r3
 801723c:	3718      	adds	r7, #24
 801723e:	46bd      	mov	sp, r7
 8017240:	bd80      	pop	{r7, pc}
 8017242:	bf00      	nop
 8017244:	e000ed04 	.word	0xe000ed04

08017248 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8017248:	b580      	push	{r7, lr}
 801724a:	b086      	sub	sp, #24
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
 8017250:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8017256:	693b      	ldr	r3, [r7, #16]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d004      	beq.n	8017266 <osEventFlagsClear+0x1e>
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017262:	2b00      	cmp	r3, #0
 8017264:	d003      	beq.n	801726e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8017266:	f06f 0303 	mvn.w	r3, #3
 801726a:	617b      	str	r3, [r7, #20]
 801726c:	e019      	b.n	80172a2 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801726e:	f3ef 8305 	mrs	r3, IPSR
 8017272:	60fb      	str	r3, [r7, #12]
  return(result);
 8017274:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017276:	2b00      	cmp	r3, #0
 8017278:	d00e      	beq.n	8017298 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801727a:	6938      	ldr	r0, [r7, #16]
 801727c:	f000 fa1c 	bl	80176b8 <xEventGroupGetBitsFromISR>
 8017280:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8017282:	6839      	ldr	r1, [r7, #0]
 8017284:	6938      	ldr	r0, [r7, #16]
 8017286:	f000 fa03 	bl	8017690 <xEventGroupClearBitsFromISR>
 801728a:	4603      	mov	r3, r0
 801728c:	2b00      	cmp	r3, #0
 801728e:	d108      	bne.n	80172a2 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8017290:	f06f 0302 	mvn.w	r3, #2
 8017294:	617b      	str	r3, [r7, #20]
 8017296:	e004      	b.n	80172a2 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8017298:	6839      	ldr	r1, [r7, #0]
 801729a:	6938      	ldr	r0, [r7, #16]
 801729c:	f000 f9c0 	bl	8017620 <xEventGroupClearBits>
 80172a0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80172a2:	697b      	ldr	r3, [r7, #20]
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3718      	adds	r7, #24
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}

080172ac <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b08c      	sub	sp, #48	; 0x30
 80172b0:	af02      	add	r7, sp, #8
 80172b2:	60f8      	str	r0, [r7, #12]
 80172b4:	60b9      	str	r1, [r7, #8]
 80172b6:	607a      	str	r2, [r7, #4]
 80172b8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80172be:	69bb      	ldr	r3, [r7, #24]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d004      	beq.n	80172ce <osEventFlagsWait+0x22>
 80172c4:	68bb      	ldr	r3, [r7, #8]
 80172c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d003      	beq.n	80172d6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80172ce:	f06f 0303 	mvn.w	r3, #3
 80172d2:	61fb      	str	r3, [r7, #28]
 80172d4:	e04b      	b.n	801736e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80172d6:	f3ef 8305 	mrs	r3, IPSR
 80172da:	617b      	str	r3, [r7, #20]
  return(result);
 80172dc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d003      	beq.n	80172ea <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80172e2:	f06f 0305 	mvn.w	r3, #5
 80172e6:	61fb      	str	r3, [r7, #28]
 80172e8:	e041      	b.n	801736e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	f003 0301 	and.w	r3, r3, #1
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d002      	beq.n	80172fa <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80172f4:	2301      	movs	r3, #1
 80172f6:	627b      	str	r3, [r7, #36]	; 0x24
 80172f8:	e001      	b.n	80172fe <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80172fa:	2300      	movs	r3, #0
 80172fc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	f003 0302 	and.w	r3, r3, #2
 8017304:	2b00      	cmp	r3, #0
 8017306:	d002      	beq.n	801730e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8017308:	2300      	movs	r3, #0
 801730a:	623b      	str	r3, [r7, #32]
 801730c:	e001      	b.n	8017312 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801730e:	2301      	movs	r3, #1
 8017310:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8017312:	683b      	ldr	r3, [r7, #0]
 8017314:	9300      	str	r3, [sp, #0]
 8017316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017318:	6a3a      	ldr	r2, [r7, #32]
 801731a:	68b9      	ldr	r1, [r7, #8]
 801731c:	69b8      	ldr	r0, [r7, #24]
 801731e:	f000 f8b1 	bl	8017484 <xEventGroupWaitBits>
 8017322:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	f003 0301 	and.w	r3, r3, #1
 801732a:	2b00      	cmp	r3, #0
 801732c:	d010      	beq.n	8017350 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801732e:	68ba      	ldr	r2, [r7, #8]
 8017330:	69fb      	ldr	r3, [r7, #28]
 8017332:	4013      	ands	r3, r2
 8017334:	68ba      	ldr	r2, [r7, #8]
 8017336:	429a      	cmp	r2, r3
 8017338:	d019      	beq.n	801736e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801733a:	683b      	ldr	r3, [r7, #0]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d003      	beq.n	8017348 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8017340:	f06f 0301 	mvn.w	r3, #1
 8017344:	61fb      	str	r3, [r7, #28]
 8017346:	e012      	b.n	801736e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017348:	f06f 0302 	mvn.w	r3, #2
 801734c:	61fb      	str	r3, [r7, #28]
 801734e:	e00e      	b.n	801736e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8017350:	68ba      	ldr	r2, [r7, #8]
 8017352:	69fb      	ldr	r3, [r7, #28]
 8017354:	4013      	ands	r3, r2
 8017356:	2b00      	cmp	r3, #0
 8017358:	d109      	bne.n	801736e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d003      	beq.n	8017368 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8017360:	f06f 0301 	mvn.w	r3, #1
 8017364:	61fb      	str	r3, [r7, #28]
 8017366:	e002      	b.n	801736e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017368:	f06f 0302 	mvn.w	r3, #2
 801736c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801736e:	69fb      	ldr	r3, [r7, #28]
}
 8017370:	4618      	mov	r0, r3
 8017372:	3728      	adds	r7, #40	; 0x28
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}

08017378 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017378:	b480      	push	{r7}
 801737a:	b085      	sub	sp, #20
 801737c:	af00      	add	r7, sp, #0
 801737e:	60f8      	str	r0, [r7, #12]
 8017380:	60b9      	str	r1, [r7, #8]
 8017382:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	4a07      	ldr	r2, [pc, #28]	; (80173a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8017388:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	4a06      	ldr	r2, [pc, #24]	; (80173a8 <vApplicationGetIdleTaskMemory+0x30>)
 801738e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2280      	movs	r2, #128	; 0x80
 8017394:	601a      	str	r2, [r3, #0]
}
 8017396:	bf00      	nop
 8017398:	3714      	adds	r7, #20
 801739a:	46bd      	mov	sp, r7
 801739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a0:	4770      	bx	lr
 80173a2:	bf00      	nop
 80173a4:	24002020 	.word	0x24002020
 80173a8:	2400207c 	.word	0x2400207c

080173ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80173ac:	b480      	push	{r7}
 80173ae:	b085      	sub	sp, #20
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	60f8      	str	r0, [r7, #12]
 80173b4:	60b9      	str	r1, [r7, #8]
 80173b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	4a07      	ldr	r2, [pc, #28]	; (80173d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80173bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	4a06      	ldr	r2, [pc, #24]	; (80173dc <vApplicationGetTimerTaskMemory+0x30>)
 80173c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80173ca:	601a      	str	r2, [r3, #0]
}
 80173cc:	bf00      	nop
 80173ce:	3714      	adds	r7, #20
 80173d0:	46bd      	mov	sp, r7
 80173d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d6:	4770      	bx	lr
 80173d8:	2400227c 	.word	0x2400227c
 80173dc:	240022d8 	.word	0x240022d8

080173e0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b086      	sub	sp, #24
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d10a      	bne.n	8017404 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80173ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173f2:	f383 8811 	msr	BASEPRI, r3
 80173f6:	f3bf 8f6f 	isb	sy
 80173fa:	f3bf 8f4f 	dsb	sy
 80173fe:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017400:	bf00      	nop
 8017402:	e7fe      	b.n	8017402 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8017404:	2320      	movs	r3, #32
 8017406:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	2b20      	cmp	r3, #32
 801740c:	d00a      	beq.n	8017424 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017412:	f383 8811 	msr	BASEPRI, r3
 8017416:	f3bf 8f6f 	isb	sy
 801741a:	f3bf 8f4f 	dsb	sy
 801741e:	60fb      	str	r3, [r7, #12]
}
 8017420:	bf00      	nop
 8017422:	e7fe      	b.n	8017422 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8017428:	697b      	ldr	r3, [r7, #20]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d00a      	beq.n	8017444 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801742e:	697b      	ldr	r3, [r7, #20]
 8017430:	2200      	movs	r2, #0
 8017432:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017434:	697b      	ldr	r3, [r7, #20]
 8017436:	3304      	adds	r3, #4
 8017438:	4618      	mov	r0, r3
 801743a:	f000 fa3d 	bl	80178b8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801743e:	697b      	ldr	r3, [r7, #20]
 8017440:	2201      	movs	r2, #1
 8017442:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8017444:	697b      	ldr	r3, [r7, #20]
	}
 8017446:	4618      	mov	r0, r3
 8017448:	3718      	adds	r7, #24
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}

0801744e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801744e:	b580      	push	{r7, lr}
 8017450:	b082      	sub	sp, #8
 8017452:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017454:	2020      	movs	r0, #32
 8017456:	f002 fd57 	bl	8019f08 <pvPortMalloc>
 801745a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d00a      	beq.n	8017478 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	2200      	movs	r2, #0
 8017466:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	3304      	adds	r3, #4
 801746c:	4618      	mov	r0, r3
 801746e:	f000 fa23 	bl	80178b8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2200      	movs	r2, #0
 8017476:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8017478:	687b      	ldr	r3, [r7, #4]
	}
 801747a:	4618      	mov	r0, r3
 801747c:	3708      	adds	r7, #8
 801747e:	46bd      	mov	sp, r7
 8017480:	bd80      	pop	{r7, pc}
	...

08017484 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b090      	sub	sp, #64	; 0x40
 8017488:	af00      	add	r7, sp, #0
 801748a:	60f8      	str	r0, [r7, #12]
 801748c:	60b9      	str	r1, [r7, #8]
 801748e:	607a      	str	r2, [r7, #4]
 8017490:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8017496:	2300      	movs	r3, #0
 8017498:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801749a:	2300      	movs	r3, #0
 801749c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d10a      	bne.n	80174ba <xEventGroupWaitBits+0x36>
	__asm volatile
 80174a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174a8:	f383 8811 	msr	BASEPRI, r3
 80174ac:	f3bf 8f6f 	isb	sy
 80174b0:	f3bf 8f4f 	dsb	sy
 80174b4:	623b      	str	r3, [r7, #32]
}
 80174b6:	bf00      	nop
 80174b8:	e7fe      	b.n	80174b8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80174ba:	68bb      	ldr	r3, [r7, #8]
 80174bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d00a      	beq.n	80174da <xEventGroupWaitBits+0x56>
	__asm volatile
 80174c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174c8:	f383 8811 	msr	BASEPRI, r3
 80174cc:	f3bf 8f6f 	isb	sy
 80174d0:	f3bf 8f4f 	dsb	sy
 80174d4:	61fb      	str	r3, [r7, #28]
}
 80174d6:	bf00      	nop
 80174d8:	e7fe      	b.n	80174d8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80174da:	68bb      	ldr	r3, [r7, #8]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d10a      	bne.n	80174f6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80174e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174e4:	f383 8811 	msr	BASEPRI, r3
 80174e8:	f3bf 8f6f 	isb	sy
 80174ec:	f3bf 8f4f 	dsb	sy
 80174f0:	61bb      	str	r3, [r7, #24]
}
 80174f2:	bf00      	nop
 80174f4:	e7fe      	b.n	80174f4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80174f6:	f001 fe51 	bl	801919c <xTaskGetSchedulerState>
 80174fa:	4603      	mov	r3, r0
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d102      	bne.n	8017506 <xEventGroupWaitBits+0x82>
 8017500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017502:	2b00      	cmp	r3, #0
 8017504:	d101      	bne.n	801750a <xEventGroupWaitBits+0x86>
 8017506:	2301      	movs	r3, #1
 8017508:	e000      	b.n	801750c <xEventGroupWaitBits+0x88>
 801750a:	2300      	movs	r3, #0
 801750c:	2b00      	cmp	r3, #0
 801750e:	d10a      	bne.n	8017526 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8017510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017514:	f383 8811 	msr	BASEPRI, r3
 8017518:	f3bf 8f6f 	isb	sy
 801751c:	f3bf 8f4f 	dsb	sy
 8017520:	617b      	str	r3, [r7, #20]
}
 8017522:	bf00      	nop
 8017524:	e7fe      	b.n	8017524 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017526:	f001 f9a3 	bl	8018870 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8017530:	683a      	ldr	r2, [r7, #0]
 8017532:	68b9      	ldr	r1, [r7, #8]
 8017534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017536:	f000 f988 	bl	801784a <prvTestWaitCondition>
 801753a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801753e:	2b00      	cmp	r3, #0
 8017540:	d00e      	beq.n	8017560 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8017542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017544:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8017546:	2300      	movs	r3, #0
 8017548:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d028      	beq.n	80175a2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017552:	681a      	ldr	r2, [r3, #0]
 8017554:	68bb      	ldr	r3, [r7, #8]
 8017556:	43db      	mvns	r3, r3
 8017558:	401a      	ands	r2, r3
 801755a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801755c:	601a      	str	r2, [r3, #0]
 801755e:	e020      	b.n	80175a2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8017560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017562:	2b00      	cmp	r3, #0
 8017564:	d104      	bne.n	8017570 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8017566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017568:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801756a:	2301      	movs	r3, #1
 801756c:	633b      	str	r3, [r7, #48]	; 0x30
 801756e:	e018      	b.n	80175a2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d003      	beq.n	801757e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8017576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801757c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d003      	beq.n	801758c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017586:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801758a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801758c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801758e:	1d18      	adds	r0, r3, #4
 8017590:	68ba      	ldr	r2, [r7, #8]
 8017592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017594:	4313      	orrs	r3, r2
 8017596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017598:	4619      	mov	r1, r3
 801759a:	f001 fb77 	bl	8018c8c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801759e:	2300      	movs	r3, #0
 80175a0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80175a2:	f001 f973 	bl	801888c <xTaskResumeAll>
 80175a6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80175a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d031      	beq.n	8017612 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80175ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d107      	bne.n	80175c4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80175b4:	4b19      	ldr	r3, [pc, #100]	; (801761c <xEventGroupWaitBits+0x198>)
 80175b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175ba:	601a      	str	r2, [r3, #0]
 80175bc:	f3bf 8f4f 	dsb	sy
 80175c0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80175c4:	f001 fe76 	bl	80192b4 <uxTaskResetEventItemValue>
 80175c8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80175ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d11a      	bne.n	801760a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80175d4:	f002 fb76 	bl	8019cc4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80175d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80175de:	683a      	ldr	r2, [r7, #0]
 80175e0:	68b9      	ldr	r1, [r7, #8]
 80175e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80175e4:	f000 f931 	bl	801784a <prvTestWaitCondition>
 80175e8:	4603      	mov	r3, r0
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d009      	beq.n	8017602 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d006      	beq.n	8017602 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80175f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175f6:	681a      	ldr	r2, [r3, #0]
 80175f8:	68bb      	ldr	r3, [r7, #8]
 80175fa:	43db      	mvns	r3, r3
 80175fc:	401a      	ands	r2, r3
 80175fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017600:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8017602:	2301      	movs	r3, #1
 8017604:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017606:	f002 fb8d 	bl	8019d24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801760a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801760c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017610:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8017612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017614:	4618      	mov	r0, r3
 8017616:	3740      	adds	r7, #64	; 0x40
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}
 801761c:	e000ed04 	.word	0xe000ed04

08017620 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b086      	sub	sp, #24
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
 8017628:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d10a      	bne.n	801764a <xEventGroupClearBits+0x2a>
	__asm volatile
 8017634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017638:	f383 8811 	msr	BASEPRI, r3
 801763c:	f3bf 8f6f 	isb	sy
 8017640:	f3bf 8f4f 	dsb	sy
 8017644:	60fb      	str	r3, [r7, #12]
}
 8017646:	bf00      	nop
 8017648:	e7fe      	b.n	8017648 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017650:	2b00      	cmp	r3, #0
 8017652:	d00a      	beq.n	801766a <xEventGroupClearBits+0x4a>
	__asm volatile
 8017654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017658:	f383 8811 	msr	BASEPRI, r3
 801765c:	f3bf 8f6f 	isb	sy
 8017660:	f3bf 8f4f 	dsb	sy
 8017664:	60bb      	str	r3, [r7, #8]
}
 8017666:	bf00      	nop
 8017668:	e7fe      	b.n	8017668 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801766a:	f002 fb2b 	bl	8019cc4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017674:	697b      	ldr	r3, [r7, #20]
 8017676:	681a      	ldr	r2, [r3, #0]
 8017678:	683b      	ldr	r3, [r7, #0]
 801767a:	43db      	mvns	r3, r3
 801767c:	401a      	ands	r2, r3
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8017682:	f002 fb4f 	bl	8019d24 <vPortExitCritical>

	return uxReturn;
 8017686:	693b      	ldr	r3, [r7, #16]
}
 8017688:	4618      	mov	r0, r3
 801768a:	3718      	adds	r7, #24
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}

08017690 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8017690:	b580      	push	{r7, lr}
 8017692:	b084      	sub	sp, #16
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801769a:	2300      	movs	r3, #0
 801769c:	683a      	ldr	r2, [r7, #0]
 801769e:	6879      	ldr	r1, [r7, #4]
 80176a0:	4804      	ldr	r0, [pc, #16]	; (80176b4 <xEventGroupClearBitsFromISR+0x24>)
 80176a2:	f002 f9c1 	bl	8019a28 <xTimerPendFunctionCallFromISR>
 80176a6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80176a8:	68fb      	ldr	r3, [r7, #12]
	}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3710      	adds	r7, #16
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}
 80176b2:	bf00      	nop
 80176b4:	08017831 	.word	0x08017831

080176b8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80176b8:	b480      	push	{r7}
 80176ba:	b089      	sub	sp, #36	; 0x24
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80176c4:	f3ef 8211 	mrs	r2, BASEPRI
 80176c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176cc:	f383 8811 	msr	BASEPRI, r3
 80176d0:	f3bf 8f6f 	isb	sy
 80176d4:	f3bf 8f4f 	dsb	sy
 80176d8:	60fa      	str	r2, [r7, #12]
 80176da:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80176dc:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80176de:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80176e0:	69fb      	ldr	r3, [r7, #28]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	617b      	str	r3, [r7, #20]
 80176e6:	69bb      	ldr	r3, [r7, #24]
 80176e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80176ea:	693b      	ldr	r3, [r7, #16]
 80176ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80176f0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80176f2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80176f4:	4618      	mov	r0, r3
 80176f6:	3724      	adds	r7, #36	; 0x24
 80176f8:	46bd      	mov	sp, r7
 80176fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fe:	4770      	bx	lr

08017700 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b08e      	sub	sp, #56	; 0x38
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
 8017708:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801770a:	2300      	movs	r3, #0
 801770c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8017712:	2300      	movs	r3, #0
 8017714:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d10a      	bne.n	8017732 <xEventGroupSetBits+0x32>
	__asm volatile
 801771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017720:	f383 8811 	msr	BASEPRI, r3
 8017724:	f3bf 8f6f 	isb	sy
 8017728:	f3bf 8f4f 	dsb	sy
 801772c:	613b      	str	r3, [r7, #16]
}
 801772e:	bf00      	nop
 8017730:	e7fe      	b.n	8017730 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017732:	683b      	ldr	r3, [r7, #0]
 8017734:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017738:	2b00      	cmp	r3, #0
 801773a:	d00a      	beq.n	8017752 <xEventGroupSetBits+0x52>
	__asm volatile
 801773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017740:	f383 8811 	msr	BASEPRI, r3
 8017744:	f3bf 8f6f 	isb	sy
 8017748:	f3bf 8f4f 	dsb	sy
 801774c:	60fb      	str	r3, [r7, #12]
}
 801774e:	bf00      	nop
 8017750:	e7fe      	b.n	8017750 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8017752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017754:	3304      	adds	r3, #4
 8017756:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801775a:	3308      	adds	r3, #8
 801775c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801775e:	f001 f887 	bl	8018870 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8017762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017764:	68db      	ldr	r3, [r3, #12]
 8017766:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801776a:	681a      	ldr	r2, [r3, #0]
 801776c:	683b      	ldr	r3, [r7, #0]
 801776e:	431a      	orrs	r2, r3
 8017770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017772:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017774:	e03c      	b.n	80177f0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017778:	685b      	ldr	r3, [r3, #4]
 801777a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801777c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8017782:	2300      	movs	r3, #0
 8017784:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017786:	69bb      	ldr	r3, [r7, #24]
 8017788:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801778c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801778e:	69bb      	ldr	r3, [r7, #24]
 8017790:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017794:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801779c:	2b00      	cmp	r3, #0
 801779e:	d108      	bne.n	80177b2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80177a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a2:	681a      	ldr	r2, [r3, #0]
 80177a4:	69bb      	ldr	r3, [r7, #24]
 80177a6:	4013      	ands	r3, r2
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d00b      	beq.n	80177c4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80177ac:	2301      	movs	r3, #1
 80177ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80177b0:	e008      	b.n	80177c4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80177b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177b4:	681a      	ldr	r2, [r3, #0]
 80177b6:	69bb      	ldr	r3, [r7, #24]
 80177b8:	4013      	ands	r3, r2
 80177ba:	69ba      	ldr	r2, [r7, #24]
 80177bc:	429a      	cmp	r2, r3
 80177be:	d101      	bne.n	80177c4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80177c0:	2301      	movs	r3, #1
 80177c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80177c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d010      	beq.n	80177ec <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80177ca:	697b      	ldr	r3, [r7, #20]
 80177cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d003      	beq.n	80177dc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80177d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177d6:	69bb      	ldr	r3, [r7, #24]
 80177d8:	4313      	orrs	r3, r2
 80177da:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80177dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80177e4:	4619      	mov	r1, r3
 80177e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80177e8:	f001 fb1c 	bl	8018e24 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80177ec:	69fb      	ldr	r3, [r7, #28]
 80177ee:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80177f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80177f2:	6a3b      	ldr	r3, [r7, #32]
 80177f4:	429a      	cmp	r2, r3
 80177f6:	d1be      	bne.n	8017776 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80177f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177fa:	681a      	ldr	r2, [r3, #0]
 80177fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177fe:	43db      	mvns	r3, r3
 8017800:	401a      	ands	r2, r3
 8017802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017804:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017806:	f001 f841 	bl	801888c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801780c:	681b      	ldr	r3, [r3, #0]
}
 801780e:	4618      	mov	r0, r3
 8017810:	3738      	adds	r7, #56	; 0x38
 8017812:	46bd      	mov	sp, r7
 8017814:	bd80      	pop	{r7, pc}

08017816 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017816:	b580      	push	{r7, lr}
 8017818:	b082      	sub	sp, #8
 801781a:	af00      	add	r7, sp, #0
 801781c:	6078      	str	r0, [r7, #4]
 801781e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017820:	6839      	ldr	r1, [r7, #0]
 8017822:	6878      	ldr	r0, [r7, #4]
 8017824:	f7ff ff6c 	bl	8017700 <xEventGroupSetBits>
}
 8017828:	bf00      	nop
 801782a:	3708      	adds	r7, #8
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}

08017830 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b082      	sub	sp, #8
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
 8017838:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801783a:	6839      	ldr	r1, [r7, #0]
 801783c:	6878      	ldr	r0, [r7, #4]
 801783e:	f7ff feef 	bl	8017620 <xEventGroupClearBits>
}
 8017842:	bf00      	nop
 8017844:	3708      	adds	r7, #8
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}

0801784a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801784a:	b480      	push	{r7}
 801784c:	b087      	sub	sp, #28
 801784e:	af00      	add	r7, sp, #0
 8017850:	60f8      	str	r0, [r7, #12]
 8017852:	60b9      	str	r1, [r7, #8]
 8017854:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017856:	2300      	movs	r3, #0
 8017858:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d107      	bne.n	8017870 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017860:	68fa      	ldr	r2, [r7, #12]
 8017862:	68bb      	ldr	r3, [r7, #8]
 8017864:	4013      	ands	r3, r2
 8017866:	2b00      	cmp	r3, #0
 8017868:	d00a      	beq.n	8017880 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801786a:	2301      	movs	r3, #1
 801786c:	617b      	str	r3, [r7, #20]
 801786e:	e007      	b.n	8017880 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017870:	68fa      	ldr	r2, [r7, #12]
 8017872:	68bb      	ldr	r3, [r7, #8]
 8017874:	4013      	ands	r3, r2
 8017876:	68ba      	ldr	r2, [r7, #8]
 8017878:	429a      	cmp	r2, r3
 801787a:	d101      	bne.n	8017880 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801787c:	2301      	movs	r3, #1
 801787e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017880:	697b      	ldr	r3, [r7, #20]
}
 8017882:	4618      	mov	r0, r3
 8017884:	371c      	adds	r7, #28
 8017886:	46bd      	mov	sp, r7
 8017888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801788c:	4770      	bx	lr
	...

08017890 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017890:	b580      	push	{r7, lr}
 8017892:	b086      	sub	sp, #24
 8017894:	af00      	add	r7, sp, #0
 8017896:	60f8      	str	r0, [r7, #12]
 8017898:	60b9      	str	r1, [r7, #8]
 801789a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	68ba      	ldr	r2, [r7, #8]
 80178a0:	68f9      	ldr	r1, [r7, #12]
 80178a2:	4804      	ldr	r0, [pc, #16]	; (80178b4 <xEventGroupSetBitsFromISR+0x24>)
 80178a4:	f002 f8c0 	bl	8019a28 <xTimerPendFunctionCallFromISR>
 80178a8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80178aa:	697b      	ldr	r3, [r7, #20]
	}
 80178ac:	4618      	mov	r0, r3
 80178ae:	3718      	adds	r7, #24
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}
 80178b4:	08017817 	.word	0x08017817

080178b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80178b8:	b480      	push	{r7}
 80178ba:	b083      	sub	sp, #12
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f103 0208 	add.w	r2, r3, #8
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	f103 0208 	add.w	r2, r3, #8
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	f103 0208 	add.w	r2, r3, #8
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	2200      	movs	r2, #0
 80178ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80178ec:	bf00      	nop
 80178ee:	370c      	adds	r7, #12
 80178f0:	46bd      	mov	sp, r7
 80178f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f6:	4770      	bx	lr

080178f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80178f8:	b480      	push	{r7}
 80178fa:	b083      	sub	sp, #12
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	2200      	movs	r2, #0
 8017904:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017906:	bf00      	nop
 8017908:	370c      	adds	r7, #12
 801790a:	46bd      	mov	sp, r7
 801790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017910:	4770      	bx	lr

08017912 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017912:	b480      	push	{r7}
 8017914:	b085      	sub	sp, #20
 8017916:	af00      	add	r7, sp, #0
 8017918:	6078      	str	r0, [r7, #4]
 801791a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	685b      	ldr	r3, [r3, #4]
 8017920:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	68fa      	ldr	r2, [r7, #12]
 8017926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	689a      	ldr	r2, [r3, #8]
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	689b      	ldr	r3, [r3, #8]
 8017934:	683a      	ldr	r2, [r7, #0]
 8017936:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	683a      	ldr	r2, [r7, #0]
 801793c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	687a      	ldr	r2, [r7, #4]
 8017942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	1c5a      	adds	r2, r3, #1
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	601a      	str	r2, [r3, #0]
}
 801794e:	bf00      	nop
 8017950:	3714      	adds	r7, #20
 8017952:	46bd      	mov	sp, r7
 8017954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017958:	4770      	bx	lr

0801795a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801795a:	b480      	push	{r7}
 801795c:	b085      	sub	sp, #20
 801795e:	af00      	add	r7, sp, #0
 8017960:	6078      	str	r0, [r7, #4]
 8017962:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017964:	683b      	ldr	r3, [r7, #0]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801796a:	68bb      	ldr	r3, [r7, #8]
 801796c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017970:	d103      	bne.n	801797a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	691b      	ldr	r3, [r3, #16]
 8017976:	60fb      	str	r3, [r7, #12]
 8017978:	e00c      	b.n	8017994 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	3308      	adds	r3, #8
 801797e:	60fb      	str	r3, [r7, #12]
 8017980:	e002      	b.n	8017988 <vListInsert+0x2e>
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	685b      	ldr	r3, [r3, #4]
 8017986:	60fb      	str	r3, [r7, #12]
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	685b      	ldr	r3, [r3, #4]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	68ba      	ldr	r2, [r7, #8]
 8017990:	429a      	cmp	r2, r3
 8017992:	d2f6      	bcs.n	8017982 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	685a      	ldr	r2, [r3, #4]
 8017998:	683b      	ldr	r3, [r7, #0]
 801799a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801799c:	683b      	ldr	r3, [r7, #0]
 801799e:	685b      	ldr	r3, [r3, #4]
 80179a0:	683a      	ldr	r2, [r7, #0]
 80179a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80179a4:	683b      	ldr	r3, [r7, #0]
 80179a6:	68fa      	ldr	r2, [r7, #12]
 80179a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	683a      	ldr	r2, [r7, #0]
 80179ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80179b0:	683b      	ldr	r3, [r7, #0]
 80179b2:	687a      	ldr	r2, [r7, #4]
 80179b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	1c5a      	adds	r2, r3, #1
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	601a      	str	r2, [r3, #0]
}
 80179c0:	bf00      	nop
 80179c2:	3714      	adds	r7, #20
 80179c4:	46bd      	mov	sp, r7
 80179c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ca:	4770      	bx	lr

080179cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80179cc:	b480      	push	{r7}
 80179ce:	b085      	sub	sp, #20
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	691b      	ldr	r3, [r3, #16]
 80179d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	687a      	ldr	r2, [r7, #4]
 80179e0:	6892      	ldr	r2, [r2, #8]
 80179e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	689b      	ldr	r3, [r3, #8]
 80179e8:	687a      	ldr	r2, [r7, #4]
 80179ea:	6852      	ldr	r2, [r2, #4]
 80179ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	685b      	ldr	r3, [r3, #4]
 80179f2:	687a      	ldr	r2, [r7, #4]
 80179f4:	429a      	cmp	r2, r3
 80179f6:	d103      	bne.n	8017a00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	689a      	ldr	r2, [r3, #8]
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	2200      	movs	r2, #0
 8017a04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	1e5a      	subs	r2, r3, #1
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	681b      	ldr	r3, [r3, #0]
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	3714      	adds	r7, #20
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1e:	4770      	bx	lr

08017a20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b084      	sub	sp, #16
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d10a      	bne.n	8017a4a <xQueueGenericReset+0x2a>
	__asm volatile
 8017a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a38:	f383 8811 	msr	BASEPRI, r3
 8017a3c:	f3bf 8f6f 	isb	sy
 8017a40:	f3bf 8f4f 	dsb	sy
 8017a44:	60bb      	str	r3, [r7, #8]
}
 8017a46:	bf00      	nop
 8017a48:	e7fe      	b.n	8017a48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017a4a:	f002 f93b 	bl	8019cc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	681a      	ldr	r2, [r3, #0]
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a56:	68f9      	ldr	r1, [r7, #12]
 8017a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017a5a:	fb01 f303 	mul.w	r3, r1, r3
 8017a5e:	441a      	add	r2, r3
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	2200      	movs	r2, #0
 8017a68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	681a      	ldr	r2, [r3, #0]
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a7a:	3b01      	subs	r3, #1
 8017a7c:	68f9      	ldr	r1, [r7, #12]
 8017a7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017a80:	fb01 f303 	mul.w	r3, r1, r3
 8017a84:	441a      	add	r2, r3
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	22ff      	movs	r2, #255	; 0xff
 8017a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	22ff      	movs	r2, #255	; 0xff
 8017a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d114      	bne.n	8017aca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	691b      	ldr	r3, [r3, #16]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d01a      	beq.n	8017ade <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	3310      	adds	r3, #16
 8017aac:	4618      	mov	r0, r3
 8017aae:	f001 f955 	bl	8018d5c <xTaskRemoveFromEventList>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d012      	beq.n	8017ade <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017ab8:	4b0c      	ldr	r3, [pc, #48]	; (8017aec <xQueueGenericReset+0xcc>)
 8017aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017abe:	601a      	str	r2, [r3, #0]
 8017ac0:	f3bf 8f4f 	dsb	sy
 8017ac4:	f3bf 8f6f 	isb	sy
 8017ac8:	e009      	b.n	8017ade <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	3310      	adds	r3, #16
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f7ff fef2 	bl	80178b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	3324      	adds	r3, #36	; 0x24
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7ff feed 	bl	80178b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017ade:	f002 f921 	bl	8019d24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017ae2:	2301      	movs	r3, #1
}
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	3710      	adds	r7, #16
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	bd80      	pop	{r7, pc}
 8017aec:	e000ed04 	.word	0xe000ed04

08017af0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b08e      	sub	sp, #56	; 0x38
 8017af4:	af02      	add	r7, sp, #8
 8017af6:	60f8      	str	r0, [r7, #12]
 8017af8:	60b9      	str	r1, [r7, #8]
 8017afa:	607a      	str	r2, [r7, #4]
 8017afc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d10a      	bne.n	8017b1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b08:	f383 8811 	msr	BASEPRI, r3
 8017b0c:	f3bf 8f6f 	isb	sy
 8017b10:	f3bf 8f4f 	dsb	sy
 8017b14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017b16:	bf00      	nop
 8017b18:	e7fe      	b.n	8017b18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017b1a:	683b      	ldr	r3, [r7, #0]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d10a      	bne.n	8017b36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b24:	f383 8811 	msr	BASEPRI, r3
 8017b28:	f3bf 8f6f 	isb	sy
 8017b2c:	f3bf 8f4f 	dsb	sy
 8017b30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017b32:	bf00      	nop
 8017b34:	e7fe      	b.n	8017b34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d002      	beq.n	8017b42 <xQueueGenericCreateStatic+0x52>
 8017b3c:	68bb      	ldr	r3, [r7, #8]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d001      	beq.n	8017b46 <xQueueGenericCreateStatic+0x56>
 8017b42:	2301      	movs	r3, #1
 8017b44:	e000      	b.n	8017b48 <xQueueGenericCreateStatic+0x58>
 8017b46:	2300      	movs	r3, #0
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d10a      	bne.n	8017b62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b50:	f383 8811 	msr	BASEPRI, r3
 8017b54:	f3bf 8f6f 	isb	sy
 8017b58:	f3bf 8f4f 	dsb	sy
 8017b5c:	623b      	str	r3, [r7, #32]
}
 8017b5e:	bf00      	nop
 8017b60:	e7fe      	b.n	8017b60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d102      	bne.n	8017b6e <xQueueGenericCreateStatic+0x7e>
 8017b68:	68bb      	ldr	r3, [r7, #8]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d101      	bne.n	8017b72 <xQueueGenericCreateStatic+0x82>
 8017b6e:	2301      	movs	r3, #1
 8017b70:	e000      	b.n	8017b74 <xQueueGenericCreateStatic+0x84>
 8017b72:	2300      	movs	r3, #0
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d10a      	bne.n	8017b8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b7c:	f383 8811 	msr	BASEPRI, r3
 8017b80:	f3bf 8f6f 	isb	sy
 8017b84:	f3bf 8f4f 	dsb	sy
 8017b88:	61fb      	str	r3, [r7, #28]
}
 8017b8a:	bf00      	nop
 8017b8c:	e7fe      	b.n	8017b8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017b8e:	2350      	movs	r3, #80	; 0x50
 8017b90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017b92:	697b      	ldr	r3, [r7, #20]
 8017b94:	2b50      	cmp	r3, #80	; 0x50
 8017b96:	d00a      	beq.n	8017bae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b9c:	f383 8811 	msr	BASEPRI, r3
 8017ba0:	f3bf 8f6f 	isb	sy
 8017ba4:	f3bf 8f4f 	dsb	sy
 8017ba8:	61bb      	str	r3, [r7, #24]
}
 8017baa:	bf00      	nop
 8017bac:	e7fe      	b.n	8017bac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017bae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d00d      	beq.n	8017bd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bbc:	2201      	movs	r2, #1
 8017bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017bc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bc8:	9300      	str	r3, [sp, #0]
 8017bca:	4613      	mov	r3, r2
 8017bcc:	687a      	ldr	r2, [r7, #4]
 8017bce:	68b9      	ldr	r1, [r7, #8]
 8017bd0:	68f8      	ldr	r0, [r7, #12]
 8017bd2:	f000 f805 	bl	8017be0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017bd8:	4618      	mov	r0, r3
 8017bda:	3730      	adds	r7, #48	; 0x30
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}

08017be0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b084      	sub	sp, #16
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
 8017bec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017bee:	68bb      	ldr	r3, [r7, #8]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d103      	bne.n	8017bfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017bf4:	69bb      	ldr	r3, [r7, #24]
 8017bf6:	69ba      	ldr	r2, [r7, #24]
 8017bf8:	601a      	str	r2, [r3, #0]
 8017bfa:	e002      	b.n	8017c02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017bfc:	69bb      	ldr	r3, [r7, #24]
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017c02:	69bb      	ldr	r3, [r7, #24]
 8017c04:	68fa      	ldr	r2, [r7, #12]
 8017c06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017c08:	69bb      	ldr	r3, [r7, #24]
 8017c0a:	68ba      	ldr	r2, [r7, #8]
 8017c0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017c0e:	2101      	movs	r1, #1
 8017c10:	69b8      	ldr	r0, [r7, #24]
 8017c12:	f7ff ff05 	bl	8017a20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017c16:	69bb      	ldr	r3, [r7, #24]
 8017c18:	78fa      	ldrb	r2, [r7, #3]
 8017c1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017c1e:	bf00      	nop
 8017c20:	3710      	adds	r7, #16
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}
	...

08017c28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	b08e      	sub	sp, #56	; 0x38
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	60f8      	str	r0, [r7, #12]
 8017c30:	60b9      	str	r1, [r7, #8]
 8017c32:	607a      	str	r2, [r7, #4]
 8017c34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017c36:	2300      	movs	r3, #0
 8017c38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d10a      	bne.n	8017c5a <xQueueGenericSend+0x32>
	__asm volatile
 8017c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c48:	f383 8811 	msr	BASEPRI, r3
 8017c4c:	f3bf 8f6f 	isb	sy
 8017c50:	f3bf 8f4f 	dsb	sy
 8017c54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017c56:	bf00      	nop
 8017c58:	e7fe      	b.n	8017c58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017c5a:	68bb      	ldr	r3, [r7, #8]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d103      	bne.n	8017c68 <xQueueGenericSend+0x40>
 8017c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d101      	bne.n	8017c6c <xQueueGenericSend+0x44>
 8017c68:	2301      	movs	r3, #1
 8017c6a:	e000      	b.n	8017c6e <xQueueGenericSend+0x46>
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d10a      	bne.n	8017c88 <xQueueGenericSend+0x60>
	__asm volatile
 8017c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c76:	f383 8811 	msr	BASEPRI, r3
 8017c7a:	f3bf 8f6f 	isb	sy
 8017c7e:	f3bf 8f4f 	dsb	sy
 8017c82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017c84:	bf00      	nop
 8017c86:	e7fe      	b.n	8017c86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	2b02      	cmp	r3, #2
 8017c8c:	d103      	bne.n	8017c96 <xQueueGenericSend+0x6e>
 8017c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c92:	2b01      	cmp	r3, #1
 8017c94:	d101      	bne.n	8017c9a <xQueueGenericSend+0x72>
 8017c96:	2301      	movs	r3, #1
 8017c98:	e000      	b.n	8017c9c <xQueueGenericSend+0x74>
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d10a      	bne.n	8017cb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8017ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ca4:	f383 8811 	msr	BASEPRI, r3
 8017ca8:	f3bf 8f6f 	isb	sy
 8017cac:	f3bf 8f4f 	dsb	sy
 8017cb0:	623b      	str	r3, [r7, #32]
}
 8017cb2:	bf00      	nop
 8017cb4:	e7fe      	b.n	8017cb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017cb6:	f001 fa71 	bl	801919c <xTaskGetSchedulerState>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d102      	bne.n	8017cc6 <xQueueGenericSend+0x9e>
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d101      	bne.n	8017cca <xQueueGenericSend+0xa2>
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	e000      	b.n	8017ccc <xQueueGenericSend+0xa4>
 8017cca:	2300      	movs	r3, #0
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d10a      	bne.n	8017ce6 <xQueueGenericSend+0xbe>
	__asm volatile
 8017cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cd4:	f383 8811 	msr	BASEPRI, r3
 8017cd8:	f3bf 8f6f 	isb	sy
 8017cdc:	f3bf 8f4f 	dsb	sy
 8017ce0:	61fb      	str	r3, [r7, #28]
}
 8017ce2:	bf00      	nop
 8017ce4:	e7fe      	b.n	8017ce4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017ce6:	f001 ffed 	bl	8019cc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d302      	bcc.n	8017cfc <xQueueGenericSend+0xd4>
 8017cf6:	683b      	ldr	r3, [r7, #0]
 8017cf8:	2b02      	cmp	r3, #2
 8017cfa:	d129      	bne.n	8017d50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017cfc:	683a      	ldr	r2, [r7, #0]
 8017cfe:	68b9      	ldr	r1, [r7, #8]
 8017d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d02:	f000 fa0b 	bl	801811c <prvCopyDataToQueue>
 8017d06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d010      	beq.n	8017d32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d12:	3324      	adds	r3, #36	; 0x24
 8017d14:	4618      	mov	r0, r3
 8017d16:	f001 f821 	bl	8018d5c <xTaskRemoveFromEventList>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d013      	beq.n	8017d48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017d20:	4b3f      	ldr	r3, [pc, #252]	; (8017e20 <xQueueGenericSend+0x1f8>)
 8017d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d26:	601a      	str	r2, [r3, #0]
 8017d28:	f3bf 8f4f 	dsb	sy
 8017d2c:	f3bf 8f6f 	isb	sy
 8017d30:	e00a      	b.n	8017d48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d007      	beq.n	8017d48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017d38:	4b39      	ldr	r3, [pc, #228]	; (8017e20 <xQueueGenericSend+0x1f8>)
 8017d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d3e:	601a      	str	r2, [r3, #0]
 8017d40:	f3bf 8f4f 	dsb	sy
 8017d44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017d48:	f001 ffec 	bl	8019d24 <vPortExitCritical>
				return pdPASS;
 8017d4c:	2301      	movs	r3, #1
 8017d4e:	e063      	b.n	8017e18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d103      	bne.n	8017d5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017d56:	f001 ffe5 	bl	8019d24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	e05c      	b.n	8017e18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d106      	bne.n	8017d72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017d64:	f107 0314 	add.w	r3, r7, #20
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f001 f8bd 	bl	8018ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017d6e:	2301      	movs	r3, #1
 8017d70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017d72:	f001 ffd7 	bl	8019d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017d76:	f000 fd7b 	bl	8018870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017d7a:	f001 ffa3 	bl	8019cc4 <vPortEnterCritical>
 8017d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017d84:	b25b      	sxtb	r3, r3
 8017d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d8a:	d103      	bne.n	8017d94 <xQueueGenericSend+0x16c>
 8017d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d8e:	2200      	movs	r2, #0
 8017d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017d9a:	b25b      	sxtb	r3, r3
 8017d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017da0:	d103      	bne.n	8017daa <xQueueGenericSend+0x182>
 8017da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da4:	2200      	movs	r2, #0
 8017da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017daa:	f001 ffbb 	bl	8019d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017dae:	1d3a      	adds	r2, r7, #4
 8017db0:	f107 0314 	add.w	r3, r7, #20
 8017db4:	4611      	mov	r1, r2
 8017db6:	4618      	mov	r0, r3
 8017db8:	f001 f8ac 	bl	8018f14 <xTaskCheckForTimeOut>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d124      	bne.n	8017e0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017dc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017dc4:	f000 faa2 	bl	801830c <prvIsQueueFull>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d018      	beq.n	8017e00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd0:	3310      	adds	r3, #16
 8017dd2:	687a      	ldr	r2, [r7, #4]
 8017dd4:	4611      	mov	r1, r2
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f000 ff34 	bl	8018c44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017dde:	f000 fa2d 	bl	801823c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017de2:	f000 fd53 	bl	801888c <xTaskResumeAll>
 8017de6:	4603      	mov	r3, r0
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	f47f af7c 	bne.w	8017ce6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017dee:	4b0c      	ldr	r3, [pc, #48]	; (8017e20 <xQueueGenericSend+0x1f8>)
 8017df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017df4:	601a      	str	r2, [r3, #0]
 8017df6:	f3bf 8f4f 	dsb	sy
 8017dfa:	f3bf 8f6f 	isb	sy
 8017dfe:	e772      	b.n	8017ce6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e02:	f000 fa1b 	bl	801823c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017e06:	f000 fd41 	bl	801888c <xTaskResumeAll>
 8017e0a:	e76c      	b.n	8017ce6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e0e:	f000 fa15 	bl	801823c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017e12:	f000 fd3b 	bl	801888c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017e16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	3738      	adds	r7, #56	; 0x38
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}
 8017e20:	e000ed04 	.word	0xe000ed04

08017e24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b090      	sub	sp, #64	; 0x40
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	60f8      	str	r0, [r7, #12]
 8017e2c:	60b9      	str	r1, [r7, #8]
 8017e2e:	607a      	str	r2, [r7, #4]
 8017e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d10a      	bne.n	8017e52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e40:	f383 8811 	msr	BASEPRI, r3
 8017e44:	f3bf 8f6f 	isb	sy
 8017e48:	f3bf 8f4f 	dsb	sy
 8017e4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017e4e:	bf00      	nop
 8017e50:	e7fe      	b.n	8017e50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017e52:	68bb      	ldr	r3, [r7, #8]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d103      	bne.n	8017e60 <xQueueGenericSendFromISR+0x3c>
 8017e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d101      	bne.n	8017e64 <xQueueGenericSendFromISR+0x40>
 8017e60:	2301      	movs	r3, #1
 8017e62:	e000      	b.n	8017e66 <xQueueGenericSendFromISR+0x42>
 8017e64:	2300      	movs	r3, #0
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d10a      	bne.n	8017e80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e6e:	f383 8811 	msr	BASEPRI, r3
 8017e72:	f3bf 8f6f 	isb	sy
 8017e76:	f3bf 8f4f 	dsb	sy
 8017e7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017e7c:	bf00      	nop
 8017e7e:	e7fe      	b.n	8017e7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017e80:	683b      	ldr	r3, [r7, #0]
 8017e82:	2b02      	cmp	r3, #2
 8017e84:	d103      	bne.n	8017e8e <xQueueGenericSendFromISR+0x6a>
 8017e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e8a:	2b01      	cmp	r3, #1
 8017e8c:	d101      	bne.n	8017e92 <xQueueGenericSendFromISR+0x6e>
 8017e8e:	2301      	movs	r3, #1
 8017e90:	e000      	b.n	8017e94 <xQueueGenericSendFromISR+0x70>
 8017e92:	2300      	movs	r3, #0
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d10a      	bne.n	8017eae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e9c:	f383 8811 	msr	BASEPRI, r3
 8017ea0:	f3bf 8f6f 	isb	sy
 8017ea4:	f3bf 8f4f 	dsb	sy
 8017ea8:	623b      	str	r3, [r7, #32]
}
 8017eaa:	bf00      	nop
 8017eac:	e7fe      	b.n	8017eac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017eae:	f001 ffeb 	bl	8019e88 <vPortValidateInterruptPriority>
	__asm volatile
 8017eb2:	f3ef 8211 	mrs	r2, BASEPRI
 8017eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eba:	f383 8811 	msr	BASEPRI, r3
 8017ebe:	f3bf 8f6f 	isb	sy
 8017ec2:	f3bf 8f4f 	dsb	sy
 8017ec6:	61fa      	str	r2, [r7, #28]
 8017ec8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017eca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017ecc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ed6:	429a      	cmp	r2, r3
 8017ed8:	d302      	bcc.n	8017ee0 <xQueueGenericSendFromISR+0xbc>
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	2b02      	cmp	r3, #2
 8017ede:	d12f      	bne.n	8017f40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017eee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017ef0:	683a      	ldr	r2, [r7, #0]
 8017ef2:	68b9      	ldr	r1, [r7, #8]
 8017ef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017ef6:	f000 f911 	bl	801811c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017efa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f02:	d112      	bne.n	8017f2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d016      	beq.n	8017f3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f0e:	3324      	adds	r3, #36	; 0x24
 8017f10:	4618      	mov	r0, r3
 8017f12:	f000 ff23 	bl	8018d5c <xTaskRemoveFromEventList>
 8017f16:	4603      	mov	r3, r0
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d00e      	beq.n	8017f3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d00b      	beq.n	8017f3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2201      	movs	r2, #1
 8017f26:	601a      	str	r2, [r3, #0]
 8017f28:	e007      	b.n	8017f3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017f2e:	3301      	adds	r3, #1
 8017f30:	b2db      	uxtb	r3, r3
 8017f32:	b25a      	sxtb	r2, r3
 8017f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017f3a:	2301      	movs	r3, #1
 8017f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017f3e:	e001      	b.n	8017f44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017f40:	2300      	movs	r3, #0
 8017f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f46:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017f48:	697b      	ldr	r3, [r7, #20]
 8017f4a:	f383 8811 	msr	BASEPRI, r3
}
 8017f4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017f52:	4618      	mov	r0, r3
 8017f54:	3740      	adds	r7, #64	; 0x40
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}
	...

08017f5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b08c      	sub	sp, #48	; 0x30
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	60f8      	str	r0, [r7, #12]
 8017f64:	60b9      	str	r1, [r7, #8]
 8017f66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017f68:	2300      	movs	r3, #0
 8017f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d10a      	bne.n	8017f8c <xQueueReceive+0x30>
	__asm volatile
 8017f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f7a:	f383 8811 	msr	BASEPRI, r3
 8017f7e:	f3bf 8f6f 	isb	sy
 8017f82:	f3bf 8f4f 	dsb	sy
 8017f86:	623b      	str	r3, [r7, #32]
}
 8017f88:	bf00      	nop
 8017f8a:	e7fe      	b.n	8017f8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017f8c:	68bb      	ldr	r3, [r7, #8]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d103      	bne.n	8017f9a <xQueueReceive+0x3e>
 8017f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d101      	bne.n	8017f9e <xQueueReceive+0x42>
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	e000      	b.n	8017fa0 <xQueueReceive+0x44>
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d10a      	bne.n	8017fba <xQueueReceive+0x5e>
	__asm volatile
 8017fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fa8:	f383 8811 	msr	BASEPRI, r3
 8017fac:	f3bf 8f6f 	isb	sy
 8017fb0:	f3bf 8f4f 	dsb	sy
 8017fb4:	61fb      	str	r3, [r7, #28]
}
 8017fb6:	bf00      	nop
 8017fb8:	e7fe      	b.n	8017fb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017fba:	f001 f8ef 	bl	801919c <xTaskGetSchedulerState>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d102      	bne.n	8017fca <xQueueReceive+0x6e>
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d101      	bne.n	8017fce <xQueueReceive+0x72>
 8017fca:	2301      	movs	r3, #1
 8017fcc:	e000      	b.n	8017fd0 <xQueueReceive+0x74>
 8017fce:	2300      	movs	r3, #0
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d10a      	bne.n	8017fea <xQueueReceive+0x8e>
	__asm volatile
 8017fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd8:	f383 8811 	msr	BASEPRI, r3
 8017fdc:	f3bf 8f6f 	isb	sy
 8017fe0:	f3bf 8f4f 	dsb	sy
 8017fe4:	61bb      	str	r3, [r7, #24]
}
 8017fe6:	bf00      	nop
 8017fe8:	e7fe      	b.n	8017fe8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017fea:	f001 fe6b 	bl	8019cc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ff2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d01f      	beq.n	801803a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017ffa:	68b9      	ldr	r1, [r7, #8]
 8017ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ffe:	f000 f8f7 	bl	80181f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018004:	1e5a      	subs	r2, r3, #1
 8018006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018008:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801800c:	691b      	ldr	r3, [r3, #16]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d00f      	beq.n	8018032 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018014:	3310      	adds	r3, #16
 8018016:	4618      	mov	r0, r3
 8018018:	f000 fea0 	bl	8018d5c <xTaskRemoveFromEventList>
 801801c:	4603      	mov	r3, r0
 801801e:	2b00      	cmp	r3, #0
 8018020:	d007      	beq.n	8018032 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018022:	4b3d      	ldr	r3, [pc, #244]	; (8018118 <xQueueReceive+0x1bc>)
 8018024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018028:	601a      	str	r2, [r3, #0]
 801802a:	f3bf 8f4f 	dsb	sy
 801802e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018032:	f001 fe77 	bl	8019d24 <vPortExitCritical>
				return pdPASS;
 8018036:	2301      	movs	r3, #1
 8018038:	e069      	b.n	801810e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d103      	bne.n	8018048 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018040:	f001 fe70 	bl	8019d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018044:	2300      	movs	r3, #0
 8018046:	e062      	b.n	801810e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804a:	2b00      	cmp	r3, #0
 801804c:	d106      	bne.n	801805c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801804e:	f107 0310 	add.w	r3, r7, #16
 8018052:	4618      	mov	r0, r3
 8018054:	f000 ff48 	bl	8018ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018058:	2301      	movs	r3, #1
 801805a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801805c:	f001 fe62 	bl	8019d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018060:	f000 fc06 	bl	8018870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018064:	f001 fe2e 	bl	8019cc4 <vPortEnterCritical>
 8018068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801806a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801806e:	b25b      	sxtb	r3, r3
 8018070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018074:	d103      	bne.n	801807e <xQueueReceive+0x122>
 8018076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018078:	2200      	movs	r2, #0
 801807a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018084:	b25b      	sxtb	r3, r3
 8018086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801808a:	d103      	bne.n	8018094 <xQueueReceive+0x138>
 801808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801808e:	2200      	movs	r2, #0
 8018090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018094:	f001 fe46 	bl	8019d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018098:	1d3a      	adds	r2, r7, #4
 801809a:	f107 0310 	add.w	r3, r7, #16
 801809e:	4611      	mov	r1, r2
 80180a0:	4618      	mov	r0, r3
 80180a2:	f000 ff37 	bl	8018f14 <xTaskCheckForTimeOut>
 80180a6:	4603      	mov	r3, r0
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d123      	bne.n	80180f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80180ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180ae:	f000 f917 	bl	80182e0 <prvIsQueueEmpty>
 80180b2:	4603      	mov	r3, r0
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d017      	beq.n	80180e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80180b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ba:	3324      	adds	r3, #36	; 0x24
 80180bc:	687a      	ldr	r2, [r7, #4]
 80180be:	4611      	mov	r1, r2
 80180c0:	4618      	mov	r0, r3
 80180c2:	f000 fdbf 	bl	8018c44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80180c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180c8:	f000 f8b8 	bl	801823c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80180cc:	f000 fbde 	bl	801888c <xTaskResumeAll>
 80180d0:	4603      	mov	r3, r0
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d189      	bne.n	8017fea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80180d6:	4b10      	ldr	r3, [pc, #64]	; (8018118 <xQueueReceive+0x1bc>)
 80180d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180dc:	601a      	str	r2, [r3, #0]
 80180de:	f3bf 8f4f 	dsb	sy
 80180e2:	f3bf 8f6f 	isb	sy
 80180e6:	e780      	b.n	8017fea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80180e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180ea:	f000 f8a7 	bl	801823c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80180ee:	f000 fbcd 	bl	801888c <xTaskResumeAll>
 80180f2:	e77a      	b.n	8017fea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80180f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80180f6:	f000 f8a1 	bl	801823c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80180fa:	f000 fbc7 	bl	801888c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80180fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018100:	f000 f8ee 	bl	80182e0 <prvIsQueueEmpty>
 8018104:	4603      	mov	r3, r0
 8018106:	2b00      	cmp	r3, #0
 8018108:	f43f af6f 	beq.w	8017fea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801810c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801810e:	4618      	mov	r0, r3
 8018110:	3730      	adds	r7, #48	; 0x30
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}
 8018116:	bf00      	nop
 8018118:	e000ed04 	.word	0xe000ed04

0801811c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b086      	sub	sp, #24
 8018120:	af00      	add	r7, sp, #0
 8018122:	60f8      	str	r0, [r7, #12]
 8018124:	60b9      	str	r1, [r7, #8]
 8018126:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018128:	2300      	movs	r3, #0
 801812a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018130:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018136:	2b00      	cmp	r3, #0
 8018138:	d10d      	bne.n	8018156 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	2b00      	cmp	r3, #0
 8018140:	d14d      	bne.n	80181de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	689b      	ldr	r3, [r3, #8]
 8018146:	4618      	mov	r0, r3
 8018148:	f001 f846 	bl	80191d8 <xTaskPriorityDisinherit>
 801814c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	2200      	movs	r2, #0
 8018152:	609a      	str	r2, [r3, #8]
 8018154:	e043      	b.n	80181de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d119      	bne.n	8018190 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	6858      	ldr	r0, [r3, #4]
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018164:	461a      	mov	r2, r3
 8018166:	68b9      	ldr	r1, [r7, #8]
 8018168:	f002 f8e2 	bl	801a330 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	685a      	ldr	r2, [r3, #4]
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018174:	441a      	add	r2, r3
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	685a      	ldr	r2, [r3, #4]
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	689b      	ldr	r3, [r3, #8]
 8018182:	429a      	cmp	r2, r3
 8018184:	d32b      	bcc.n	80181de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	681a      	ldr	r2, [r3, #0]
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	605a      	str	r2, [r3, #4]
 801818e:	e026      	b.n	80181de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	68d8      	ldr	r0, [r3, #12]
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018198:	461a      	mov	r2, r3
 801819a:	68b9      	ldr	r1, [r7, #8]
 801819c:	f002 f8c8 	bl	801a330 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	68da      	ldr	r2, [r3, #12]
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181a8:	425b      	negs	r3, r3
 80181aa:	441a      	add	r2, r3
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	68da      	ldr	r2, [r3, #12]
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	429a      	cmp	r2, r3
 80181ba:	d207      	bcs.n	80181cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	689a      	ldr	r2, [r3, #8]
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181c4:	425b      	negs	r3, r3
 80181c6:	441a      	add	r2, r3
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	2b02      	cmp	r3, #2
 80181d0:	d105      	bne.n	80181de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80181d2:	693b      	ldr	r3, [r7, #16]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d002      	beq.n	80181de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80181d8:	693b      	ldr	r3, [r7, #16]
 80181da:	3b01      	subs	r3, #1
 80181dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80181de:	693b      	ldr	r3, [r7, #16]
 80181e0:	1c5a      	adds	r2, r3, #1
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80181e6:	697b      	ldr	r3, [r7, #20]
}
 80181e8:	4618      	mov	r0, r3
 80181ea:	3718      	adds	r7, #24
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b082      	sub	sp, #8
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
 80181f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d018      	beq.n	8018234 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	68da      	ldr	r2, [r3, #12]
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801820a:	441a      	add	r2, r3
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	68da      	ldr	r2, [r3, #12]
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	689b      	ldr	r3, [r3, #8]
 8018218:	429a      	cmp	r2, r3
 801821a:	d303      	bcc.n	8018224 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681a      	ldr	r2, [r3, #0]
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	68d9      	ldr	r1, [r3, #12]
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801822c:	461a      	mov	r2, r3
 801822e:	6838      	ldr	r0, [r7, #0]
 8018230:	f002 f87e 	bl	801a330 <memcpy>
	}
}
 8018234:	bf00      	nop
 8018236:	3708      	adds	r7, #8
 8018238:	46bd      	mov	sp, r7
 801823a:	bd80      	pop	{r7, pc}

0801823c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b084      	sub	sp, #16
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018244:	f001 fd3e 	bl	8019cc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801824e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018250:	e011      	b.n	8018276 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018256:	2b00      	cmp	r3, #0
 8018258:	d012      	beq.n	8018280 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	3324      	adds	r3, #36	; 0x24
 801825e:	4618      	mov	r0, r3
 8018260:	f000 fd7c 	bl	8018d5c <xTaskRemoveFromEventList>
 8018264:	4603      	mov	r3, r0
 8018266:	2b00      	cmp	r3, #0
 8018268:	d001      	beq.n	801826e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801826a:	f000 feb5 	bl	8018fd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801826e:	7bfb      	ldrb	r3, [r7, #15]
 8018270:	3b01      	subs	r3, #1
 8018272:	b2db      	uxtb	r3, r3
 8018274:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801827a:	2b00      	cmp	r3, #0
 801827c:	dce9      	bgt.n	8018252 <prvUnlockQueue+0x16>
 801827e:	e000      	b.n	8018282 <prvUnlockQueue+0x46>
					break;
 8018280:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	22ff      	movs	r2, #255	; 0xff
 8018286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801828a:	f001 fd4b 	bl	8019d24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801828e:	f001 fd19 	bl	8019cc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018298:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801829a:	e011      	b.n	80182c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	691b      	ldr	r3, [r3, #16]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d012      	beq.n	80182ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	3310      	adds	r3, #16
 80182a8:	4618      	mov	r0, r3
 80182aa:	f000 fd57 	bl	8018d5c <xTaskRemoveFromEventList>
 80182ae:	4603      	mov	r3, r0
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d001      	beq.n	80182b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80182b4:	f000 fe90 	bl	8018fd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80182b8:	7bbb      	ldrb	r3, [r7, #14]
 80182ba:	3b01      	subs	r3, #1
 80182bc:	b2db      	uxtb	r3, r3
 80182be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80182c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	dce9      	bgt.n	801829c <prvUnlockQueue+0x60>
 80182c8:	e000      	b.n	80182cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80182ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	22ff      	movs	r2, #255	; 0xff
 80182d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80182d4:	f001 fd26 	bl	8019d24 <vPortExitCritical>
}
 80182d8:	bf00      	nop
 80182da:	3710      	adds	r7, #16
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}

080182e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b084      	sub	sp, #16
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80182e8:	f001 fcec 	bl	8019cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d102      	bne.n	80182fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80182f4:	2301      	movs	r3, #1
 80182f6:	60fb      	str	r3, [r7, #12]
 80182f8:	e001      	b.n	80182fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80182fa:	2300      	movs	r3, #0
 80182fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80182fe:	f001 fd11 	bl	8019d24 <vPortExitCritical>

	return xReturn;
 8018302:	68fb      	ldr	r3, [r7, #12]
}
 8018304:	4618      	mov	r0, r3
 8018306:	3710      	adds	r7, #16
 8018308:	46bd      	mov	sp, r7
 801830a:	bd80      	pop	{r7, pc}

0801830c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b084      	sub	sp, #16
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018314:	f001 fcd6 	bl	8019cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018320:	429a      	cmp	r2, r3
 8018322:	d102      	bne.n	801832a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018324:	2301      	movs	r3, #1
 8018326:	60fb      	str	r3, [r7, #12]
 8018328:	e001      	b.n	801832e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801832a:	2300      	movs	r3, #0
 801832c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801832e:	f001 fcf9 	bl	8019d24 <vPortExitCritical>

	return xReturn;
 8018332:	68fb      	ldr	r3, [r7, #12]
}
 8018334:	4618      	mov	r0, r3
 8018336:	3710      	adds	r7, #16
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}

0801833c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801833c:	b480      	push	{r7}
 801833e:	b085      	sub	sp, #20
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
 8018344:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018346:	2300      	movs	r3, #0
 8018348:	60fb      	str	r3, [r7, #12]
 801834a:	e014      	b.n	8018376 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801834c:	4a0f      	ldr	r2, [pc, #60]	; (801838c <vQueueAddToRegistry+0x50>)
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018354:	2b00      	cmp	r3, #0
 8018356:	d10b      	bne.n	8018370 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018358:	490c      	ldr	r1, [pc, #48]	; (801838c <vQueueAddToRegistry+0x50>)
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	683a      	ldr	r2, [r7, #0]
 801835e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018362:	4a0a      	ldr	r2, [pc, #40]	; (801838c <vQueueAddToRegistry+0x50>)
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	00db      	lsls	r3, r3, #3
 8018368:	4413      	add	r3, r2
 801836a:	687a      	ldr	r2, [r7, #4]
 801836c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801836e:	e006      	b.n	801837e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	3301      	adds	r3, #1
 8018374:	60fb      	str	r3, [r7, #12]
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	2b07      	cmp	r3, #7
 801837a:	d9e7      	bls.n	801834c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801837c:	bf00      	nop
 801837e:	bf00      	nop
 8018380:	3714      	adds	r7, #20
 8018382:	46bd      	mov	sp, r7
 8018384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018388:	4770      	bx	lr
 801838a:	bf00      	nop
 801838c:	240026d8 	.word	0x240026d8

08018390 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018390:	b580      	push	{r7, lr}
 8018392:	b086      	sub	sp, #24
 8018394:	af00      	add	r7, sp, #0
 8018396:	60f8      	str	r0, [r7, #12]
 8018398:	60b9      	str	r1, [r7, #8]
 801839a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80183a0:	f001 fc90 	bl	8019cc4 <vPortEnterCritical>
 80183a4:	697b      	ldr	r3, [r7, #20]
 80183a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80183aa:	b25b      	sxtb	r3, r3
 80183ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183b0:	d103      	bne.n	80183ba <vQueueWaitForMessageRestricted+0x2a>
 80183b2:	697b      	ldr	r3, [r7, #20]
 80183b4:	2200      	movs	r2, #0
 80183b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80183ba:	697b      	ldr	r3, [r7, #20]
 80183bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80183c0:	b25b      	sxtb	r3, r3
 80183c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183c6:	d103      	bne.n	80183d0 <vQueueWaitForMessageRestricted+0x40>
 80183c8:	697b      	ldr	r3, [r7, #20]
 80183ca:	2200      	movs	r2, #0
 80183cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80183d0:	f001 fca8 	bl	8019d24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80183d4:	697b      	ldr	r3, [r7, #20]
 80183d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d106      	bne.n	80183ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80183dc:	697b      	ldr	r3, [r7, #20]
 80183de:	3324      	adds	r3, #36	; 0x24
 80183e0:	687a      	ldr	r2, [r7, #4]
 80183e2:	68b9      	ldr	r1, [r7, #8]
 80183e4:	4618      	mov	r0, r3
 80183e6:	f000 fc8d 	bl	8018d04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80183ea:	6978      	ldr	r0, [r7, #20]
 80183ec:	f7ff ff26 	bl	801823c <prvUnlockQueue>
	}
 80183f0:	bf00      	nop
 80183f2:	3718      	adds	r7, #24
 80183f4:	46bd      	mov	sp, r7
 80183f6:	bd80      	pop	{r7, pc}

080183f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b08e      	sub	sp, #56	; 0x38
 80183fc:	af04      	add	r7, sp, #16
 80183fe:	60f8      	str	r0, [r7, #12]
 8018400:	60b9      	str	r1, [r7, #8]
 8018402:	607a      	str	r2, [r7, #4]
 8018404:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018408:	2b00      	cmp	r3, #0
 801840a:	d10a      	bne.n	8018422 <xTaskCreateStatic+0x2a>
	__asm volatile
 801840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018410:	f383 8811 	msr	BASEPRI, r3
 8018414:	f3bf 8f6f 	isb	sy
 8018418:	f3bf 8f4f 	dsb	sy
 801841c:	623b      	str	r3, [r7, #32]
}
 801841e:	bf00      	nop
 8018420:	e7fe      	b.n	8018420 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018424:	2b00      	cmp	r3, #0
 8018426:	d10a      	bne.n	801843e <xTaskCreateStatic+0x46>
	__asm volatile
 8018428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801842c:	f383 8811 	msr	BASEPRI, r3
 8018430:	f3bf 8f6f 	isb	sy
 8018434:	f3bf 8f4f 	dsb	sy
 8018438:	61fb      	str	r3, [r7, #28]
}
 801843a:	bf00      	nop
 801843c:	e7fe      	b.n	801843c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801843e:	235c      	movs	r3, #92	; 0x5c
 8018440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018442:	693b      	ldr	r3, [r7, #16]
 8018444:	2b5c      	cmp	r3, #92	; 0x5c
 8018446:	d00a      	beq.n	801845e <xTaskCreateStatic+0x66>
	__asm volatile
 8018448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801844c:	f383 8811 	msr	BASEPRI, r3
 8018450:	f3bf 8f6f 	isb	sy
 8018454:	f3bf 8f4f 	dsb	sy
 8018458:	61bb      	str	r3, [r7, #24]
}
 801845a:	bf00      	nop
 801845c:	e7fe      	b.n	801845c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801845e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018462:	2b00      	cmp	r3, #0
 8018464:	d01e      	beq.n	80184a4 <xTaskCreateStatic+0xac>
 8018466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018468:	2b00      	cmp	r3, #0
 801846a:	d01b      	beq.n	80184a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801846e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018474:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018478:	2202      	movs	r2, #2
 801847a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801847e:	2300      	movs	r3, #0
 8018480:	9303      	str	r3, [sp, #12]
 8018482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018484:	9302      	str	r3, [sp, #8]
 8018486:	f107 0314 	add.w	r3, r7, #20
 801848a:	9301      	str	r3, [sp, #4]
 801848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801848e:	9300      	str	r3, [sp, #0]
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	687a      	ldr	r2, [r7, #4]
 8018494:	68b9      	ldr	r1, [r7, #8]
 8018496:	68f8      	ldr	r0, [r7, #12]
 8018498:	f000 f850 	bl	801853c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801849c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801849e:	f000 f8dd 	bl	801865c <prvAddNewTaskToReadyList>
 80184a2:	e001      	b.n	80184a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80184a4:	2300      	movs	r3, #0
 80184a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80184a8:	697b      	ldr	r3, [r7, #20]
	}
 80184aa:	4618      	mov	r0, r3
 80184ac:	3728      	adds	r7, #40	; 0x28
 80184ae:	46bd      	mov	sp, r7
 80184b0:	bd80      	pop	{r7, pc}

080184b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80184b2:	b580      	push	{r7, lr}
 80184b4:	b08c      	sub	sp, #48	; 0x30
 80184b6:	af04      	add	r7, sp, #16
 80184b8:	60f8      	str	r0, [r7, #12]
 80184ba:	60b9      	str	r1, [r7, #8]
 80184bc:	603b      	str	r3, [r7, #0]
 80184be:	4613      	mov	r3, r2
 80184c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80184c2:	88fb      	ldrh	r3, [r7, #6]
 80184c4:	009b      	lsls	r3, r3, #2
 80184c6:	4618      	mov	r0, r3
 80184c8:	f001 fd1e 	bl	8019f08 <pvPortMalloc>
 80184cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d00e      	beq.n	80184f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80184d4:	205c      	movs	r0, #92	; 0x5c
 80184d6:	f001 fd17 	bl	8019f08 <pvPortMalloc>
 80184da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80184dc:	69fb      	ldr	r3, [r7, #28]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d003      	beq.n	80184ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80184e2:	69fb      	ldr	r3, [r7, #28]
 80184e4:	697a      	ldr	r2, [r7, #20]
 80184e6:	631a      	str	r2, [r3, #48]	; 0x30
 80184e8:	e005      	b.n	80184f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80184ea:	6978      	ldr	r0, [r7, #20]
 80184ec:	f001 fdd8 	bl	801a0a0 <vPortFree>
 80184f0:	e001      	b.n	80184f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80184f2:	2300      	movs	r3, #0
 80184f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80184f6:	69fb      	ldr	r3, [r7, #28]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d017      	beq.n	801852c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80184fc:	69fb      	ldr	r3, [r7, #28]
 80184fe:	2200      	movs	r2, #0
 8018500:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018504:	88fa      	ldrh	r2, [r7, #6]
 8018506:	2300      	movs	r3, #0
 8018508:	9303      	str	r3, [sp, #12]
 801850a:	69fb      	ldr	r3, [r7, #28]
 801850c:	9302      	str	r3, [sp, #8]
 801850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018510:	9301      	str	r3, [sp, #4]
 8018512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018514:	9300      	str	r3, [sp, #0]
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	68b9      	ldr	r1, [r7, #8]
 801851a:	68f8      	ldr	r0, [r7, #12]
 801851c:	f000 f80e 	bl	801853c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018520:	69f8      	ldr	r0, [r7, #28]
 8018522:	f000 f89b 	bl	801865c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018526:	2301      	movs	r3, #1
 8018528:	61bb      	str	r3, [r7, #24]
 801852a:	e002      	b.n	8018532 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801852c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018530:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018532:	69bb      	ldr	r3, [r7, #24]
	}
 8018534:	4618      	mov	r0, r3
 8018536:	3720      	adds	r7, #32
 8018538:	46bd      	mov	sp, r7
 801853a:	bd80      	pop	{r7, pc}

0801853c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b088      	sub	sp, #32
 8018540:	af00      	add	r7, sp, #0
 8018542:	60f8      	str	r0, [r7, #12]
 8018544:	60b9      	str	r1, [r7, #8]
 8018546:	607a      	str	r2, [r7, #4]
 8018548:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801854c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	009b      	lsls	r3, r3, #2
 8018552:	461a      	mov	r2, r3
 8018554:	21a5      	movs	r1, #165	; 0xa5
 8018556:	f001 fef9 	bl	801a34c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801855c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801855e:	6879      	ldr	r1, [r7, #4]
 8018560:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018564:	440b      	add	r3, r1
 8018566:	009b      	lsls	r3, r3, #2
 8018568:	4413      	add	r3, r2
 801856a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801856c:	69bb      	ldr	r3, [r7, #24]
 801856e:	f023 0307 	bic.w	r3, r3, #7
 8018572:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018574:	69bb      	ldr	r3, [r7, #24]
 8018576:	f003 0307 	and.w	r3, r3, #7
 801857a:	2b00      	cmp	r3, #0
 801857c:	d00a      	beq.n	8018594 <prvInitialiseNewTask+0x58>
	__asm volatile
 801857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018582:	f383 8811 	msr	BASEPRI, r3
 8018586:	f3bf 8f6f 	isb	sy
 801858a:	f3bf 8f4f 	dsb	sy
 801858e:	617b      	str	r3, [r7, #20]
}
 8018590:	bf00      	nop
 8018592:	e7fe      	b.n	8018592 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018594:	68bb      	ldr	r3, [r7, #8]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d01f      	beq.n	80185da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801859a:	2300      	movs	r3, #0
 801859c:	61fb      	str	r3, [r7, #28]
 801859e:	e012      	b.n	80185c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80185a0:	68ba      	ldr	r2, [r7, #8]
 80185a2:	69fb      	ldr	r3, [r7, #28]
 80185a4:	4413      	add	r3, r2
 80185a6:	7819      	ldrb	r1, [r3, #0]
 80185a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185aa:	69fb      	ldr	r3, [r7, #28]
 80185ac:	4413      	add	r3, r2
 80185ae:	3334      	adds	r3, #52	; 0x34
 80185b0:	460a      	mov	r2, r1
 80185b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80185b4:	68ba      	ldr	r2, [r7, #8]
 80185b6:	69fb      	ldr	r3, [r7, #28]
 80185b8:	4413      	add	r3, r2
 80185ba:	781b      	ldrb	r3, [r3, #0]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d006      	beq.n	80185ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80185c0:	69fb      	ldr	r3, [r7, #28]
 80185c2:	3301      	adds	r3, #1
 80185c4:	61fb      	str	r3, [r7, #28]
 80185c6:	69fb      	ldr	r3, [r7, #28]
 80185c8:	2b0f      	cmp	r3, #15
 80185ca:	d9e9      	bls.n	80185a0 <prvInitialiseNewTask+0x64>
 80185cc:	e000      	b.n	80185d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80185ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80185d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d2:	2200      	movs	r2, #0
 80185d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80185d8:	e003      	b.n	80185e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80185da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185dc:	2200      	movs	r2, #0
 80185de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80185e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185e4:	2b37      	cmp	r3, #55	; 0x37
 80185e6:	d901      	bls.n	80185ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80185e8:	2337      	movs	r3, #55	; 0x37
 80185ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80185ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80185f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80185f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185fa:	2200      	movs	r2, #0
 80185fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80185fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018600:	3304      	adds	r3, #4
 8018602:	4618      	mov	r0, r3
 8018604:	f7ff f978 	bl	80178f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801860a:	3318      	adds	r3, #24
 801860c:	4618      	mov	r0, r3
 801860e:	f7ff f973 	bl	80178f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018616:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801861a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018620:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018626:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801862a:	2200      	movs	r2, #0
 801862c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018630:	2200      	movs	r2, #0
 8018632:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018636:	683a      	ldr	r2, [r7, #0]
 8018638:	68f9      	ldr	r1, [r7, #12]
 801863a:	69b8      	ldr	r0, [r7, #24]
 801863c:	f001 fa14 	bl	8019a68 <pxPortInitialiseStack>
 8018640:	4602      	mov	r2, r0
 8018642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018644:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018648:	2b00      	cmp	r3, #0
 801864a:	d002      	beq.n	8018652 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801864e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018650:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018652:	bf00      	nop
 8018654:	3720      	adds	r7, #32
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}
	...

0801865c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b082      	sub	sp, #8
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018664:	f001 fb2e 	bl	8019cc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018668:	4b2d      	ldr	r3, [pc, #180]	; (8018720 <prvAddNewTaskToReadyList+0xc4>)
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	3301      	adds	r3, #1
 801866e:	4a2c      	ldr	r2, [pc, #176]	; (8018720 <prvAddNewTaskToReadyList+0xc4>)
 8018670:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018672:	4b2c      	ldr	r3, [pc, #176]	; (8018724 <prvAddNewTaskToReadyList+0xc8>)
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d109      	bne.n	801868e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801867a:	4a2a      	ldr	r2, [pc, #168]	; (8018724 <prvAddNewTaskToReadyList+0xc8>)
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018680:	4b27      	ldr	r3, [pc, #156]	; (8018720 <prvAddNewTaskToReadyList+0xc4>)
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	2b01      	cmp	r3, #1
 8018686:	d110      	bne.n	80186aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018688:	f000 fcca 	bl	8019020 <prvInitialiseTaskLists>
 801868c:	e00d      	b.n	80186aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801868e:	4b26      	ldr	r3, [pc, #152]	; (8018728 <prvAddNewTaskToReadyList+0xcc>)
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d109      	bne.n	80186aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018696:	4b23      	ldr	r3, [pc, #140]	; (8018724 <prvAddNewTaskToReadyList+0xc8>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186a0:	429a      	cmp	r2, r3
 80186a2:	d802      	bhi.n	80186aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80186a4:	4a1f      	ldr	r2, [pc, #124]	; (8018724 <prvAddNewTaskToReadyList+0xc8>)
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80186aa:	4b20      	ldr	r3, [pc, #128]	; (801872c <prvAddNewTaskToReadyList+0xd0>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	3301      	adds	r3, #1
 80186b0:	4a1e      	ldr	r2, [pc, #120]	; (801872c <prvAddNewTaskToReadyList+0xd0>)
 80186b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80186b4:	4b1d      	ldr	r3, [pc, #116]	; (801872c <prvAddNewTaskToReadyList+0xd0>)
 80186b6:	681a      	ldr	r2, [r3, #0]
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186c0:	4b1b      	ldr	r3, [pc, #108]	; (8018730 <prvAddNewTaskToReadyList+0xd4>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	429a      	cmp	r2, r3
 80186c6:	d903      	bls.n	80186d0 <prvAddNewTaskToReadyList+0x74>
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186cc:	4a18      	ldr	r2, [pc, #96]	; (8018730 <prvAddNewTaskToReadyList+0xd4>)
 80186ce:	6013      	str	r3, [r2, #0]
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186d4:	4613      	mov	r3, r2
 80186d6:	009b      	lsls	r3, r3, #2
 80186d8:	4413      	add	r3, r2
 80186da:	009b      	lsls	r3, r3, #2
 80186dc:	4a15      	ldr	r2, [pc, #84]	; (8018734 <prvAddNewTaskToReadyList+0xd8>)
 80186de:	441a      	add	r2, r3
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	3304      	adds	r3, #4
 80186e4:	4619      	mov	r1, r3
 80186e6:	4610      	mov	r0, r2
 80186e8:	f7ff f913 	bl	8017912 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80186ec:	f001 fb1a 	bl	8019d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80186f0:	4b0d      	ldr	r3, [pc, #52]	; (8018728 <prvAddNewTaskToReadyList+0xcc>)
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d00e      	beq.n	8018716 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80186f8:	4b0a      	ldr	r3, [pc, #40]	; (8018724 <prvAddNewTaskToReadyList+0xc8>)
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018702:	429a      	cmp	r2, r3
 8018704:	d207      	bcs.n	8018716 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018706:	4b0c      	ldr	r3, [pc, #48]	; (8018738 <prvAddNewTaskToReadyList+0xdc>)
 8018708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801870c:	601a      	str	r2, [r3, #0]
 801870e:	f3bf 8f4f 	dsb	sy
 8018712:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018716:	bf00      	nop
 8018718:	3708      	adds	r7, #8
 801871a:	46bd      	mov	sp, r7
 801871c:	bd80      	pop	{r7, pc}
 801871e:	bf00      	nop
 8018720:	24002bec 	.word	0x24002bec
 8018724:	24002718 	.word	0x24002718
 8018728:	24002bf8 	.word	0x24002bf8
 801872c:	24002c08 	.word	0x24002c08
 8018730:	24002bf4 	.word	0x24002bf4
 8018734:	2400271c 	.word	0x2400271c
 8018738:	e000ed04 	.word	0xe000ed04

0801873c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801873c:	b580      	push	{r7, lr}
 801873e:	b084      	sub	sp, #16
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018744:	2300      	movs	r3, #0
 8018746:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d017      	beq.n	801877e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801874e:	4b13      	ldr	r3, [pc, #76]	; (801879c <vTaskDelay+0x60>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d00a      	beq.n	801876c <vTaskDelay+0x30>
	__asm volatile
 8018756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801875a:	f383 8811 	msr	BASEPRI, r3
 801875e:	f3bf 8f6f 	isb	sy
 8018762:	f3bf 8f4f 	dsb	sy
 8018766:	60bb      	str	r3, [r7, #8]
}
 8018768:	bf00      	nop
 801876a:	e7fe      	b.n	801876a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801876c:	f000 f880 	bl	8018870 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018770:	2100      	movs	r1, #0
 8018772:	6878      	ldr	r0, [r7, #4]
 8018774:	f000 fdb6 	bl	80192e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018778:	f000 f888 	bl	801888c <xTaskResumeAll>
 801877c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d107      	bne.n	8018794 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018784:	4b06      	ldr	r3, [pc, #24]	; (80187a0 <vTaskDelay+0x64>)
 8018786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801878a:	601a      	str	r2, [r3, #0]
 801878c:	f3bf 8f4f 	dsb	sy
 8018790:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018794:	bf00      	nop
 8018796:	3710      	adds	r7, #16
 8018798:	46bd      	mov	sp, r7
 801879a:	bd80      	pop	{r7, pc}
 801879c:	24002c14 	.word	0x24002c14
 80187a0:	e000ed04 	.word	0xe000ed04

080187a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b08a      	sub	sp, #40	; 0x28
 80187a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80187aa:	2300      	movs	r3, #0
 80187ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80187ae:	2300      	movs	r3, #0
 80187b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80187b2:	463a      	mov	r2, r7
 80187b4:	1d39      	adds	r1, r7, #4
 80187b6:	f107 0308 	add.w	r3, r7, #8
 80187ba:	4618      	mov	r0, r3
 80187bc:	f7fe fddc 	bl	8017378 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80187c0:	6839      	ldr	r1, [r7, #0]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	68ba      	ldr	r2, [r7, #8]
 80187c6:	9202      	str	r2, [sp, #8]
 80187c8:	9301      	str	r3, [sp, #4]
 80187ca:	2300      	movs	r3, #0
 80187cc:	9300      	str	r3, [sp, #0]
 80187ce:	2300      	movs	r3, #0
 80187d0:	460a      	mov	r2, r1
 80187d2:	4921      	ldr	r1, [pc, #132]	; (8018858 <vTaskStartScheduler+0xb4>)
 80187d4:	4821      	ldr	r0, [pc, #132]	; (801885c <vTaskStartScheduler+0xb8>)
 80187d6:	f7ff fe0f 	bl	80183f8 <xTaskCreateStatic>
 80187da:	4603      	mov	r3, r0
 80187dc:	4a20      	ldr	r2, [pc, #128]	; (8018860 <vTaskStartScheduler+0xbc>)
 80187de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80187e0:	4b1f      	ldr	r3, [pc, #124]	; (8018860 <vTaskStartScheduler+0xbc>)
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d002      	beq.n	80187ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80187e8:	2301      	movs	r3, #1
 80187ea:	617b      	str	r3, [r7, #20]
 80187ec:	e001      	b.n	80187f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80187ee:	2300      	movs	r3, #0
 80187f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80187f2:	697b      	ldr	r3, [r7, #20]
 80187f4:	2b01      	cmp	r3, #1
 80187f6:	d102      	bne.n	80187fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80187f8:	f000 fdc8 	bl	801938c <xTimerCreateTimerTask>
 80187fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80187fe:	697b      	ldr	r3, [r7, #20]
 8018800:	2b01      	cmp	r3, #1
 8018802:	d116      	bne.n	8018832 <vTaskStartScheduler+0x8e>
	__asm volatile
 8018804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018808:	f383 8811 	msr	BASEPRI, r3
 801880c:	f3bf 8f6f 	isb	sy
 8018810:	f3bf 8f4f 	dsb	sy
 8018814:	613b      	str	r3, [r7, #16]
}
 8018816:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018818:	4b12      	ldr	r3, [pc, #72]	; (8018864 <vTaskStartScheduler+0xc0>)
 801881a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801881e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018820:	4b11      	ldr	r3, [pc, #68]	; (8018868 <vTaskStartScheduler+0xc4>)
 8018822:	2201      	movs	r2, #1
 8018824:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018826:	4b11      	ldr	r3, [pc, #68]	; (801886c <vTaskStartScheduler+0xc8>)
 8018828:	2200      	movs	r2, #0
 801882a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801882c:	f001 f9a8 	bl	8019b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018830:	e00e      	b.n	8018850 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018832:	697b      	ldr	r3, [r7, #20]
 8018834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018838:	d10a      	bne.n	8018850 <vTaskStartScheduler+0xac>
	__asm volatile
 801883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801883e:	f383 8811 	msr	BASEPRI, r3
 8018842:	f3bf 8f6f 	isb	sy
 8018846:	f3bf 8f4f 	dsb	sy
 801884a:	60fb      	str	r3, [r7, #12]
}
 801884c:	bf00      	nop
 801884e:	e7fe      	b.n	801884e <vTaskStartScheduler+0xaa>
}
 8018850:	bf00      	nop
 8018852:	3718      	adds	r7, #24
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}
 8018858:	0801afc0 	.word	0x0801afc0
 801885c:	08018ff1 	.word	0x08018ff1
 8018860:	24002c10 	.word	0x24002c10
 8018864:	24002c0c 	.word	0x24002c0c
 8018868:	24002bf8 	.word	0x24002bf8
 801886c:	24002bf0 	.word	0x24002bf0

08018870 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018870:	b480      	push	{r7}
 8018872:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018874:	4b04      	ldr	r3, [pc, #16]	; (8018888 <vTaskSuspendAll+0x18>)
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	3301      	adds	r3, #1
 801887a:	4a03      	ldr	r2, [pc, #12]	; (8018888 <vTaskSuspendAll+0x18>)
 801887c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801887e:	bf00      	nop
 8018880:	46bd      	mov	sp, r7
 8018882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018886:	4770      	bx	lr
 8018888:	24002c14 	.word	0x24002c14

0801888c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b084      	sub	sp, #16
 8018890:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018892:	2300      	movs	r3, #0
 8018894:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018896:	2300      	movs	r3, #0
 8018898:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801889a:	4b42      	ldr	r3, [pc, #264]	; (80189a4 <xTaskResumeAll+0x118>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d10a      	bne.n	80188b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80188a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188a6:	f383 8811 	msr	BASEPRI, r3
 80188aa:	f3bf 8f6f 	isb	sy
 80188ae:	f3bf 8f4f 	dsb	sy
 80188b2:	603b      	str	r3, [r7, #0]
}
 80188b4:	bf00      	nop
 80188b6:	e7fe      	b.n	80188b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80188b8:	f001 fa04 	bl	8019cc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80188bc:	4b39      	ldr	r3, [pc, #228]	; (80189a4 <xTaskResumeAll+0x118>)
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	3b01      	subs	r3, #1
 80188c2:	4a38      	ldr	r2, [pc, #224]	; (80189a4 <xTaskResumeAll+0x118>)
 80188c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80188c6:	4b37      	ldr	r3, [pc, #220]	; (80189a4 <xTaskResumeAll+0x118>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d162      	bne.n	8018994 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80188ce:	4b36      	ldr	r3, [pc, #216]	; (80189a8 <xTaskResumeAll+0x11c>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d05e      	beq.n	8018994 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80188d6:	e02f      	b.n	8018938 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188d8:	4b34      	ldr	r3, [pc, #208]	; (80189ac <xTaskResumeAll+0x120>)
 80188da:	68db      	ldr	r3, [r3, #12]
 80188dc:	68db      	ldr	r3, [r3, #12]
 80188de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	3318      	adds	r3, #24
 80188e4:	4618      	mov	r0, r3
 80188e6:	f7ff f871 	bl	80179cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	3304      	adds	r3, #4
 80188ee:	4618      	mov	r0, r3
 80188f0:	f7ff f86c 	bl	80179cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188f8:	4b2d      	ldr	r3, [pc, #180]	; (80189b0 <xTaskResumeAll+0x124>)
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	429a      	cmp	r2, r3
 80188fe:	d903      	bls.n	8018908 <xTaskResumeAll+0x7c>
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018904:	4a2a      	ldr	r2, [pc, #168]	; (80189b0 <xTaskResumeAll+0x124>)
 8018906:	6013      	str	r3, [r2, #0]
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801890c:	4613      	mov	r3, r2
 801890e:	009b      	lsls	r3, r3, #2
 8018910:	4413      	add	r3, r2
 8018912:	009b      	lsls	r3, r3, #2
 8018914:	4a27      	ldr	r2, [pc, #156]	; (80189b4 <xTaskResumeAll+0x128>)
 8018916:	441a      	add	r2, r3
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	3304      	adds	r3, #4
 801891c:	4619      	mov	r1, r3
 801891e:	4610      	mov	r0, r2
 8018920:	f7fe fff7 	bl	8017912 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018928:	4b23      	ldr	r3, [pc, #140]	; (80189b8 <xTaskResumeAll+0x12c>)
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801892e:	429a      	cmp	r2, r3
 8018930:	d302      	bcc.n	8018938 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018932:	4b22      	ldr	r3, [pc, #136]	; (80189bc <xTaskResumeAll+0x130>)
 8018934:	2201      	movs	r2, #1
 8018936:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018938:	4b1c      	ldr	r3, [pc, #112]	; (80189ac <xTaskResumeAll+0x120>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d1cb      	bne.n	80188d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d001      	beq.n	801894a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018946:	f000 fc09 	bl	801915c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801894a:	4b1d      	ldr	r3, [pc, #116]	; (80189c0 <xTaskResumeAll+0x134>)
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d010      	beq.n	8018978 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018956:	f000 f847 	bl	80189e8 <xTaskIncrementTick>
 801895a:	4603      	mov	r3, r0
 801895c:	2b00      	cmp	r3, #0
 801895e:	d002      	beq.n	8018966 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018960:	4b16      	ldr	r3, [pc, #88]	; (80189bc <xTaskResumeAll+0x130>)
 8018962:	2201      	movs	r2, #1
 8018964:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	3b01      	subs	r3, #1
 801896a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d1f1      	bne.n	8018956 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018972:	4b13      	ldr	r3, [pc, #76]	; (80189c0 <xTaskResumeAll+0x134>)
 8018974:	2200      	movs	r2, #0
 8018976:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018978:	4b10      	ldr	r3, [pc, #64]	; (80189bc <xTaskResumeAll+0x130>)
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d009      	beq.n	8018994 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018980:	2301      	movs	r3, #1
 8018982:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018984:	4b0f      	ldr	r3, [pc, #60]	; (80189c4 <xTaskResumeAll+0x138>)
 8018986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801898a:	601a      	str	r2, [r3, #0]
 801898c:	f3bf 8f4f 	dsb	sy
 8018990:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018994:	f001 f9c6 	bl	8019d24 <vPortExitCritical>

	return xAlreadyYielded;
 8018998:	68bb      	ldr	r3, [r7, #8]
}
 801899a:	4618      	mov	r0, r3
 801899c:	3710      	adds	r7, #16
 801899e:	46bd      	mov	sp, r7
 80189a0:	bd80      	pop	{r7, pc}
 80189a2:	bf00      	nop
 80189a4:	24002c14 	.word	0x24002c14
 80189a8:	24002bec 	.word	0x24002bec
 80189ac:	24002bac 	.word	0x24002bac
 80189b0:	24002bf4 	.word	0x24002bf4
 80189b4:	2400271c 	.word	0x2400271c
 80189b8:	24002718 	.word	0x24002718
 80189bc:	24002c00 	.word	0x24002c00
 80189c0:	24002bfc 	.word	0x24002bfc
 80189c4:	e000ed04 	.word	0xe000ed04

080189c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80189c8:	b480      	push	{r7}
 80189ca:	b083      	sub	sp, #12
 80189cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80189ce:	4b05      	ldr	r3, [pc, #20]	; (80189e4 <xTaskGetTickCount+0x1c>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80189d4:	687b      	ldr	r3, [r7, #4]
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	370c      	adds	r7, #12
 80189da:	46bd      	mov	sp, r7
 80189dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e0:	4770      	bx	lr
 80189e2:	bf00      	nop
 80189e4:	24002bf0 	.word	0x24002bf0

080189e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b086      	sub	sp, #24
 80189ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80189ee:	2300      	movs	r3, #0
 80189f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80189f2:	4b53      	ldr	r3, [pc, #332]	; (8018b40 <xTaskIncrementTick+0x158>)
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	f040 8095 	bne.w	8018b26 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80189fc:	4b51      	ldr	r3, [pc, #324]	; (8018b44 <xTaskIncrementTick+0x15c>)
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	3301      	adds	r3, #1
 8018a02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018a04:	4a4f      	ldr	r2, [pc, #316]	; (8018b44 <xTaskIncrementTick+0x15c>)
 8018a06:	693b      	ldr	r3, [r7, #16]
 8018a08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018a0a:	693b      	ldr	r3, [r7, #16]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d120      	bne.n	8018a52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018a10:	4b4d      	ldr	r3, [pc, #308]	; (8018b48 <xTaskIncrementTick+0x160>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d00a      	beq.n	8018a30 <xTaskIncrementTick+0x48>
	__asm volatile
 8018a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a1e:	f383 8811 	msr	BASEPRI, r3
 8018a22:	f3bf 8f6f 	isb	sy
 8018a26:	f3bf 8f4f 	dsb	sy
 8018a2a:	603b      	str	r3, [r7, #0]
}
 8018a2c:	bf00      	nop
 8018a2e:	e7fe      	b.n	8018a2e <xTaskIncrementTick+0x46>
 8018a30:	4b45      	ldr	r3, [pc, #276]	; (8018b48 <xTaskIncrementTick+0x160>)
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	60fb      	str	r3, [r7, #12]
 8018a36:	4b45      	ldr	r3, [pc, #276]	; (8018b4c <xTaskIncrementTick+0x164>)
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	4a43      	ldr	r2, [pc, #268]	; (8018b48 <xTaskIncrementTick+0x160>)
 8018a3c:	6013      	str	r3, [r2, #0]
 8018a3e:	4a43      	ldr	r2, [pc, #268]	; (8018b4c <xTaskIncrementTick+0x164>)
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	6013      	str	r3, [r2, #0]
 8018a44:	4b42      	ldr	r3, [pc, #264]	; (8018b50 <xTaskIncrementTick+0x168>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	3301      	adds	r3, #1
 8018a4a:	4a41      	ldr	r2, [pc, #260]	; (8018b50 <xTaskIncrementTick+0x168>)
 8018a4c:	6013      	str	r3, [r2, #0]
 8018a4e:	f000 fb85 	bl	801915c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018a52:	4b40      	ldr	r3, [pc, #256]	; (8018b54 <xTaskIncrementTick+0x16c>)
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	693a      	ldr	r2, [r7, #16]
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d349      	bcc.n	8018af0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018a5c:	4b3a      	ldr	r3, [pc, #232]	; (8018b48 <xTaskIncrementTick+0x160>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d104      	bne.n	8018a70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a66:	4b3b      	ldr	r3, [pc, #236]	; (8018b54 <xTaskIncrementTick+0x16c>)
 8018a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018a6c:	601a      	str	r2, [r3, #0]
					break;
 8018a6e:	e03f      	b.n	8018af0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a70:	4b35      	ldr	r3, [pc, #212]	; (8018b48 <xTaskIncrementTick+0x160>)
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	68db      	ldr	r3, [r3, #12]
 8018a76:	68db      	ldr	r3, [r3, #12]
 8018a78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018a7a:	68bb      	ldr	r3, [r7, #8]
 8018a7c:	685b      	ldr	r3, [r3, #4]
 8018a7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018a80:	693a      	ldr	r2, [r7, #16]
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d203      	bcs.n	8018a90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018a88:	4a32      	ldr	r2, [pc, #200]	; (8018b54 <xTaskIncrementTick+0x16c>)
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018a8e:	e02f      	b.n	8018af0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	3304      	adds	r3, #4
 8018a94:	4618      	mov	r0, r3
 8018a96:	f7fe ff99 	bl	80179cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018a9a:	68bb      	ldr	r3, [r7, #8]
 8018a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d004      	beq.n	8018aac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018aa2:	68bb      	ldr	r3, [r7, #8]
 8018aa4:	3318      	adds	r3, #24
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	f7fe ff90 	bl	80179cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018aac:	68bb      	ldr	r3, [r7, #8]
 8018aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ab0:	4b29      	ldr	r3, [pc, #164]	; (8018b58 <xTaskIncrementTick+0x170>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	429a      	cmp	r2, r3
 8018ab6:	d903      	bls.n	8018ac0 <xTaskIncrementTick+0xd8>
 8018ab8:	68bb      	ldr	r3, [r7, #8]
 8018aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018abc:	4a26      	ldr	r2, [pc, #152]	; (8018b58 <xTaskIncrementTick+0x170>)
 8018abe:	6013      	str	r3, [r2, #0]
 8018ac0:	68bb      	ldr	r3, [r7, #8]
 8018ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ac4:	4613      	mov	r3, r2
 8018ac6:	009b      	lsls	r3, r3, #2
 8018ac8:	4413      	add	r3, r2
 8018aca:	009b      	lsls	r3, r3, #2
 8018acc:	4a23      	ldr	r2, [pc, #140]	; (8018b5c <xTaskIncrementTick+0x174>)
 8018ace:	441a      	add	r2, r3
 8018ad0:	68bb      	ldr	r3, [r7, #8]
 8018ad2:	3304      	adds	r3, #4
 8018ad4:	4619      	mov	r1, r3
 8018ad6:	4610      	mov	r0, r2
 8018ad8:	f7fe ff1b 	bl	8017912 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018adc:	68bb      	ldr	r3, [r7, #8]
 8018ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ae0:	4b1f      	ldr	r3, [pc, #124]	; (8018b60 <xTaskIncrementTick+0x178>)
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	d3b8      	bcc.n	8018a5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018aea:	2301      	movs	r3, #1
 8018aec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018aee:	e7b5      	b.n	8018a5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018af0:	4b1b      	ldr	r3, [pc, #108]	; (8018b60 <xTaskIncrementTick+0x178>)
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018af6:	4919      	ldr	r1, [pc, #100]	; (8018b5c <xTaskIncrementTick+0x174>)
 8018af8:	4613      	mov	r3, r2
 8018afa:	009b      	lsls	r3, r3, #2
 8018afc:	4413      	add	r3, r2
 8018afe:	009b      	lsls	r3, r3, #2
 8018b00:	440b      	add	r3, r1
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	2b01      	cmp	r3, #1
 8018b06:	d901      	bls.n	8018b0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018b08:	2301      	movs	r3, #1
 8018b0a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018b0c:	4b15      	ldr	r3, [pc, #84]	; (8018b64 <xTaskIncrementTick+0x17c>)
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d101      	bne.n	8018b18 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018b14:	f7e9 fca6 	bl	8002464 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018b18:	4b13      	ldr	r3, [pc, #76]	; (8018b68 <xTaskIncrementTick+0x180>)
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d009      	beq.n	8018b34 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018b20:	2301      	movs	r3, #1
 8018b22:	617b      	str	r3, [r7, #20]
 8018b24:	e006      	b.n	8018b34 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018b26:	4b0f      	ldr	r3, [pc, #60]	; (8018b64 <xTaskIncrementTick+0x17c>)
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	3301      	adds	r3, #1
 8018b2c:	4a0d      	ldr	r2, [pc, #52]	; (8018b64 <xTaskIncrementTick+0x17c>)
 8018b2e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018b30:	f7e9 fc98 	bl	8002464 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018b34:	697b      	ldr	r3, [r7, #20]
}
 8018b36:	4618      	mov	r0, r3
 8018b38:	3718      	adds	r7, #24
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd80      	pop	{r7, pc}
 8018b3e:	bf00      	nop
 8018b40:	24002c14 	.word	0x24002c14
 8018b44:	24002bf0 	.word	0x24002bf0
 8018b48:	24002ba4 	.word	0x24002ba4
 8018b4c:	24002ba8 	.word	0x24002ba8
 8018b50:	24002c04 	.word	0x24002c04
 8018b54:	24002c0c 	.word	0x24002c0c
 8018b58:	24002bf4 	.word	0x24002bf4
 8018b5c:	2400271c 	.word	0x2400271c
 8018b60:	24002718 	.word	0x24002718
 8018b64:	24002bfc 	.word	0x24002bfc
 8018b68:	24002c00 	.word	0x24002c00

08018b6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	b084      	sub	sp, #16
 8018b70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018b72:	4b2f      	ldr	r3, [pc, #188]	; (8018c30 <vTaskSwitchContext+0xc4>)
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d003      	beq.n	8018b82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018b7a:	4b2e      	ldr	r3, [pc, #184]	; (8018c34 <vTaskSwitchContext+0xc8>)
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018b80:	e052      	b.n	8018c28 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8018b82:	4b2c      	ldr	r3, [pc, #176]	; (8018c34 <vTaskSwitchContext+0xc8>)
 8018b84:	2200      	movs	r2, #0
 8018b86:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018b88:	4b2b      	ldr	r3, [pc, #172]	; (8018c38 <vTaskSwitchContext+0xcc>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	681a      	ldr	r2, [r3, #0]
 8018b8e:	4b2a      	ldr	r3, [pc, #168]	; (8018c38 <vTaskSwitchContext+0xcc>)
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b94:	429a      	cmp	r2, r3
 8018b96:	d808      	bhi.n	8018baa <vTaskSwitchContext+0x3e>
 8018b98:	4b27      	ldr	r3, [pc, #156]	; (8018c38 <vTaskSwitchContext+0xcc>)
 8018b9a:	681a      	ldr	r2, [r3, #0]
 8018b9c:	4b26      	ldr	r3, [pc, #152]	; (8018c38 <vTaskSwitchContext+0xcc>)
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	3334      	adds	r3, #52	; 0x34
 8018ba2:	4619      	mov	r1, r3
 8018ba4:	4610      	mov	r0, r2
 8018ba6:	f7e9 fc6b 	bl	8002480 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018baa:	4b24      	ldr	r3, [pc, #144]	; (8018c3c <vTaskSwitchContext+0xd0>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	60fb      	str	r3, [r7, #12]
 8018bb0:	e010      	b.n	8018bd4 <vTaskSwitchContext+0x68>
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d10a      	bne.n	8018bce <vTaskSwitchContext+0x62>
	__asm volatile
 8018bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bbc:	f383 8811 	msr	BASEPRI, r3
 8018bc0:	f3bf 8f6f 	isb	sy
 8018bc4:	f3bf 8f4f 	dsb	sy
 8018bc8:	607b      	str	r3, [r7, #4]
}
 8018bca:	bf00      	nop
 8018bcc:	e7fe      	b.n	8018bcc <vTaskSwitchContext+0x60>
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	3b01      	subs	r3, #1
 8018bd2:	60fb      	str	r3, [r7, #12]
 8018bd4:	491a      	ldr	r1, [pc, #104]	; (8018c40 <vTaskSwitchContext+0xd4>)
 8018bd6:	68fa      	ldr	r2, [r7, #12]
 8018bd8:	4613      	mov	r3, r2
 8018bda:	009b      	lsls	r3, r3, #2
 8018bdc:	4413      	add	r3, r2
 8018bde:	009b      	lsls	r3, r3, #2
 8018be0:	440b      	add	r3, r1
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d0e4      	beq.n	8018bb2 <vTaskSwitchContext+0x46>
 8018be8:	68fa      	ldr	r2, [r7, #12]
 8018bea:	4613      	mov	r3, r2
 8018bec:	009b      	lsls	r3, r3, #2
 8018bee:	4413      	add	r3, r2
 8018bf0:	009b      	lsls	r3, r3, #2
 8018bf2:	4a13      	ldr	r2, [pc, #76]	; (8018c40 <vTaskSwitchContext+0xd4>)
 8018bf4:	4413      	add	r3, r2
 8018bf6:	60bb      	str	r3, [r7, #8]
 8018bf8:	68bb      	ldr	r3, [r7, #8]
 8018bfa:	685b      	ldr	r3, [r3, #4]
 8018bfc:	685a      	ldr	r2, [r3, #4]
 8018bfe:	68bb      	ldr	r3, [r7, #8]
 8018c00:	605a      	str	r2, [r3, #4]
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	685a      	ldr	r2, [r3, #4]
 8018c06:	68bb      	ldr	r3, [r7, #8]
 8018c08:	3308      	adds	r3, #8
 8018c0a:	429a      	cmp	r2, r3
 8018c0c:	d104      	bne.n	8018c18 <vTaskSwitchContext+0xac>
 8018c0e:	68bb      	ldr	r3, [r7, #8]
 8018c10:	685b      	ldr	r3, [r3, #4]
 8018c12:	685a      	ldr	r2, [r3, #4]
 8018c14:	68bb      	ldr	r3, [r7, #8]
 8018c16:	605a      	str	r2, [r3, #4]
 8018c18:	68bb      	ldr	r3, [r7, #8]
 8018c1a:	685b      	ldr	r3, [r3, #4]
 8018c1c:	68db      	ldr	r3, [r3, #12]
 8018c1e:	4a06      	ldr	r2, [pc, #24]	; (8018c38 <vTaskSwitchContext+0xcc>)
 8018c20:	6013      	str	r3, [r2, #0]
 8018c22:	4a06      	ldr	r2, [pc, #24]	; (8018c3c <vTaskSwitchContext+0xd0>)
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	6013      	str	r3, [r2, #0]
}
 8018c28:	bf00      	nop
 8018c2a:	3710      	adds	r7, #16
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	bd80      	pop	{r7, pc}
 8018c30:	24002c14 	.word	0x24002c14
 8018c34:	24002c00 	.word	0x24002c00
 8018c38:	24002718 	.word	0x24002718
 8018c3c:	24002bf4 	.word	0x24002bf4
 8018c40:	2400271c 	.word	0x2400271c

08018c44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b084      	sub	sp, #16
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
 8018c4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d10a      	bne.n	8018c6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c58:	f383 8811 	msr	BASEPRI, r3
 8018c5c:	f3bf 8f6f 	isb	sy
 8018c60:	f3bf 8f4f 	dsb	sy
 8018c64:	60fb      	str	r3, [r7, #12]
}
 8018c66:	bf00      	nop
 8018c68:	e7fe      	b.n	8018c68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018c6a:	4b07      	ldr	r3, [pc, #28]	; (8018c88 <vTaskPlaceOnEventList+0x44>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	3318      	adds	r3, #24
 8018c70:	4619      	mov	r1, r3
 8018c72:	6878      	ldr	r0, [r7, #4]
 8018c74:	f7fe fe71 	bl	801795a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018c78:	2101      	movs	r1, #1
 8018c7a:	6838      	ldr	r0, [r7, #0]
 8018c7c:	f000 fb32 	bl	80192e4 <prvAddCurrentTaskToDelayedList>
}
 8018c80:	bf00      	nop
 8018c82:	3710      	adds	r7, #16
 8018c84:	46bd      	mov	sp, r7
 8018c86:	bd80      	pop	{r7, pc}
 8018c88:	24002718 	.word	0x24002718

08018c8c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b086      	sub	sp, #24
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	60f8      	str	r0, [r7, #12]
 8018c94:	60b9      	str	r1, [r7, #8]
 8018c96:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d10a      	bne.n	8018cb4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8018c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ca2:	f383 8811 	msr	BASEPRI, r3
 8018ca6:	f3bf 8f6f 	isb	sy
 8018caa:	f3bf 8f4f 	dsb	sy
 8018cae:	617b      	str	r3, [r7, #20]
}
 8018cb0:	bf00      	nop
 8018cb2:	e7fe      	b.n	8018cb2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018cb4:	4b11      	ldr	r3, [pc, #68]	; (8018cfc <vTaskPlaceOnUnorderedEventList+0x70>)
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d10a      	bne.n	8018cd2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8018cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cc0:	f383 8811 	msr	BASEPRI, r3
 8018cc4:	f3bf 8f6f 	isb	sy
 8018cc8:	f3bf 8f4f 	dsb	sy
 8018ccc:	613b      	str	r3, [r7, #16]
}
 8018cce:	bf00      	nop
 8018cd0:	e7fe      	b.n	8018cd0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018cd2:	4b0b      	ldr	r3, [pc, #44]	; (8018d00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	68ba      	ldr	r2, [r7, #8]
 8018cd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018cdc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018cde:	4b08      	ldr	r3, [pc, #32]	; (8018d00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	3318      	adds	r3, #24
 8018ce4:	4619      	mov	r1, r3
 8018ce6:	68f8      	ldr	r0, [r7, #12]
 8018ce8:	f7fe fe13 	bl	8017912 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018cec:	2101      	movs	r1, #1
 8018cee:	6878      	ldr	r0, [r7, #4]
 8018cf0:	f000 faf8 	bl	80192e4 <prvAddCurrentTaskToDelayedList>
}
 8018cf4:	bf00      	nop
 8018cf6:	3718      	adds	r7, #24
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bd80      	pop	{r7, pc}
 8018cfc:	24002c14 	.word	0x24002c14
 8018d00:	24002718 	.word	0x24002718

08018d04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b086      	sub	sp, #24
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	60f8      	str	r0, [r7, #12]
 8018d0c:	60b9      	str	r1, [r7, #8]
 8018d0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d10a      	bne.n	8018d2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d1a:	f383 8811 	msr	BASEPRI, r3
 8018d1e:	f3bf 8f6f 	isb	sy
 8018d22:	f3bf 8f4f 	dsb	sy
 8018d26:	617b      	str	r3, [r7, #20]
}
 8018d28:	bf00      	nop
 8018d2a:	e7fe      	b.n	8018d2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018d2c:	4b0a      	ldr	r3, [pc, #40]	; (8018d58 <vTaskPlaceOnEventListRestricted+0x54>)
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	3318      	adds	r3, #24
 8018d32:	4619      	mov	r1, r3
 8018d34:	68f8      	ldr	r0, [r7, #12]
 8018d36:	f7fe fdec 	bl	8017912 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d002      	beq.n	8018d46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018d46:	6879      	ldr	r1, [r7, #4]
 8018d48:	68b8      	ldr	r0, [r7, #8]
 8018d4a:	f000 facb 	bl	80192e4 <prvAddCurrentTaskToDelayedList>
	}
 8018d4e:	bf00      	nop
 8018d50:	3718      	adds	r7, #24
 8018d52:	46bd      	mov	sp, r7
 8018d54:	bd80      	pop	{r7, pc}
 8018d56:	bf00      	nop
 8018d58:	24002718 	.word	0x24002718

08018d5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b086      	sub	sp, #24
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	68db      	ldr	r3, [r3, #12]
 8018d68:	68db      	ldr	r3, [r3, #12]
 8018d6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018d6c:	693b      	ldr	r3, [r7, #16]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d10a      	bne.n	8018d88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d76:	f383 8811 	msr	BASEPRI, r3
 8018d7a:	f3bf 8f6f 	isb	sy
 8018d7e:	f3bf 8f4f 	dsb	sy
 8018d82:	60fb      	str	r3, [r7, #12]
}
 8018d84:	bf00      	nop
 8018d86:	e7fe      	b.n	8018d86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018d88:	693b      	ldr	r3, [r7, #16]
 8018d8a:	3318      	adds	r3, #24
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f7fe fe1d 	bl	80179cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018d92:	4b1e      	ldr	r3, [pc, #120]	; (8018e0c <xTaskRemoveFromEventList+0xb0>)
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d11d      	bne.n	8018dd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018d9a:	693b      	ldr	r3, [r7, #16]
 8018d9c:	3304      	adds	r3, #4
 8018d9e:	4618      	mov	r0, r3
 8018da0:	f7fe fe14 	bl	80179cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018da8:	4b19      	ldr	r3, [pc, #100]	; (8018e10 <xTaskRemoveFromEventList+0xb4>)
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	429a      	cmp	r2, r3
 8018dae:	d903      	bls.n	8018db8 <xTaskRemoveFromEventList+0x5c>
 8018db0:	693b      	ldr	r3, [r7, #16]
 8018db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018db4:	4a16      	ldr	r2, [pc, #88]	; (8018e10 <xTaskRemoveFromEventList+0xb4>)
 8018db6:	6013      	str	r3, [r2, #0]
 8018db8:	693b      	ldr	r3, [r7, #16]
 8018dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018dbc:	4613      	mov	r3, r2
 8018dbe:	009b      	lsls	r3, r3, #2
 8018dc0:	4413      	add	r3, r2
 8018dc2:	009b      	lsls	r3, r3, #2
 8018dc4:	4a13      	ldr	r2, [pc, #76]	; (8018e14 <xTaskRemoveFromEventList+0xb8>)
 8018dc6:	441a      	add	r2, r3
 8018dc8:	693b      	ldr	r3, [r7, #16]
 8018dca:	3304      	adds	r3, #4
 8018dcc:	4619      	mov	r1, r3
 8018dce:	4610      	mov	r0, r2
 8018dd0:	f7fe fd9f 	bl	8017912 <vListInsertEnd>
 8018dd4:	e005      	b.n	8018de2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018dd6:	693b      	ldr	r3, [r7, #16]
 8018dd8:	3318      	adds	r3, #24
 8018dda:	4619      	mov	r1, r3
 8018ddc:	480e      	ldr	r0, [pc, #56]	; (8018e18 <xTaskRemoveFromEventList+0xbc>)
 8018dde:	f7fe fd98 	bl	8017912 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018de2:	693b      	ldr	r3, [r7, #16]
 8018de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018de6:	4b0d      	ldr	r3, [pc, #52]	; (8018e1c <xTaskRemoveFromEventList+0xc0>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dec:	429a      	cmp	r2, r3
 8018dee:	d905      	bls.n	8018dfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018df0:	2301      	movs	r3, #1
 8018df2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018df4:	4b0a      	ldr	r3, [pc, #40]	; (8018e20 <xTaskRemoveFromEventList+0xc4>)
 8018df6:	2201      	movs	r2, #1
 8018df8:	601a      	str	r2, [r3, #0]
 8018dfa:	e001      	b.n	8018e00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018dfc:	2300      	movs	r3, #0
 8018dfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018e00:	697b      	ldr	r3, [r7, #20]
}
 8018e02:	4618      	mov	r0, r3
 8018e04:	3718      	adds	r7, #24
 8018e06:	46bd      	mov	sp, r7
 8018e08:	bd80      	pop	{r7, pc}
 8018e0a:	bf00      	nop
 8018e0c:	24002c14 	.word	0x24002c14
 8018e10:	24002bf4 	.word	0x24002bf4
 8018e14:	2400271c 	.word	0x2400271c
 8018e18:	24002bac 	.word	0x24002bac
 8018e1c:	24002718 	.word	0x24002718
 8018e20:	24002c00 	.word	0x24002c00

08018e24 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b086      	sub	sp, #24
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
 8018e2c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018e2e:	4b29      	ldr	r3, [pc, #164]	; (8018ed4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d10a      	bne.n	8018e4c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e3a:	f383 8811 	msr	BASEPRI, r3
 8018e3e:	f3bf 8f6f 	isb	sy
 8018e42:	f3bf 8f4f 	dsb	sy
 8018e46:	613b      	str	r3, [r7, #16]
}
 8018e48:	bf00      	nop
 8018e4a:	e7fe      	b.n	8018e4a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018e4c:	683b      	ldr	r3, [r7, #0]
 8018e4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	68db      	ldr	r3, [r3, #12]
 8018e5a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d10a      	bne.n	8018e78 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e66:	f383 8811 	msr	BASEPRI, r3
 8018e6a:	f3bf 8f6f 	isb	sy
 8018e6e:	f3bf 8f4f 	dsb	sy
 8018e72:	60fb      	str	r3, [r7, #12]
}
 8018e74:	bf00      	nop
 8018e76:	e7fe      	b.n	8018e76 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f7fe fda7 	bl	80179cc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018e7e:	697b      	ldr	r3, [r7, #20]
 8018e80:	3304      	adds	r3, #4
 8018e82:	4618      	mov	r0, r3
 8018e84:	f7fe fda2 	bl	80179cc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018e88:	697b      	ldr	r3, [r7, #20]
 8018e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e8c:	4b12      	ldr	r3, [pc, #72]	; (8018ed8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	429a      	cmp	r2, r3
 8018e92:	d903      	bls.n	8018e9c <vTaskRemoveFromUnorderedEventList+0x78>
 8018e94:	697b      	ldr	r3, [r7, #20]
 8018e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e98:	4a0f      	ldr	r2, [pc, #60]	; (8018ed8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018e9a:	6013      	str	r3, [r2, #0]
 8018e9c:	697b      	ldr	r3, [r7, #20]
 8018e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ea0:	4613      	mov	r3, r2
 8018ea2:	009b      	lsls	r3, r3, #2
 8018ea4:	4413      	add	r3, r2
 8018ea6:	009b      	lsls	r3, r3, #2
 8018ea8:	4a0c      	ldr	r2, [pc, #48]	; (8018edc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018eaa:	441a      	add	r2, r3
 8018eac:	697b      	ldr	r3, [r7, #20]
 8018eae:	3304      	adds	r3, #4
 8018eb0:	4619      	mov	r1, r3
 8018eb2:	4610      	mov	r0, r2
 8018eb4:	f7fe fd2d 	bl	8017912 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018eb8:	697b      	ldr	r3, [r7, #20]
 8018eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ebc:	4b08      	ldr	r3, [pc, #32]	; (8018ee0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	d902      	bls.n	8018ecc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018ec6:	4b07      	ldr	r3, [pc, #28]	; (8018ee4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018ec8:	2201      	movs	r2, #1
 8018eca:	601a      	str	r2, [r3, #0]
	}
}
 8018ecc:	bf00      	nop
 8018ece:	3718      	adds	r7, #24
 8018ed0:	46bd      	mov	sp, r7
 8018ed2:	bd80      	pop	{r7, pc}
 8018ed4:	24002c14 	.word	0x24002c14
 8018ed8:	24002bf4 	.word	0x24002bf4
 8018edc:	2400271c 	.word	0x2400271c
 8018ee0:	24002718 	.word	0x24002718
 8018ee4:	24002c00 	.word	0x24002c00

08018ee8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018ee8:	b480      	push	{r7}
 8018eea:	b083      	sub	sp, #12
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018ef0:	4b06      	ldr	r3, [pc, #24]	; (8018f0c <vTaskInternalSetTimeOutState+0x24>)
 8018ef2:	681a      	ldr	r2, [r3, #0]
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018ef8:	4b05      	ldr	r3, [pc, #20]	; (8018f10 <vTaskInternalSetTimeOutState+0x28>)
 8018efa:	681a      	ldr	r2, [r3, #0]
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	605a      	str	r2, [r3, #4]
}
 8018f00:	bf00      	nop
 8018f02:	370c      	adds	r7, #12
 8018f04:	46bd      	mov	sp, r7
 8018f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f0a:	4770      	bx	lr
 8018f0c:	24002c04 	.word	0x24002c04
 8018f10:	24002bf0 	.word	0x24002bf0

08018f14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b088      	sub	sp, #32
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
 8018f1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d10a      	bne.n	8018f3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f28:	f383 8811 	msr	BASEPRI, r3
 8018f2c:	f3bf 8f6f 	isb	sy
 8018f30:	f3bf 8f4f 	dsb	sy
 8018f34:	613b      	str	r3, [r7, #16]
}
 8018f36:	bf00      	nop
 8018f38:	e7fe      	b.n	8018f38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018f3a:	683b      	ldr	r3, [r7, #0]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d10a      	bne.n	8018f56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f44:	f383 8811 	msr	BASEPRI, r3
 8018f48:	f3bf 8f6f 	isb	sy
 8018f4c:	f3bf 8f4f 	dsb	sy
 8018f50:	60fb      	str	r3, [r7, #12]
}
 8018f52:	bf00      	nop
 8018f54:	e7fe      	b.n	8018f54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018f56:	f000 feb5 	bl	8019cc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018f5a:	4b1d      	ldr	r3, [pc, #116]	; (8018fd0 <xTaskCheckForTimeOut+0xbc>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	685b      	ldr	r3, [r3, #4]
 8018f64:	69ba      	ldr	r2, [r7, #24]
 8018f66:	1ad3      	subs	r3, r2, r3
 8018f68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f72:	d102      	bne.n	8018f7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018f74:	2300      	movs	r3, #0
 8018f76:	61fb      	str	r3, [r7, #28]
 8018f78:	e023      	b.n	8018fc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681a      	ldr	r2, [r3, #0]
 8018f7e:	4b15      	ldr	r3, [pc, #84]	; (8018fd4 <xTaskCheckForTimeOut+0xc0>)
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	429a      	cmp	r2, r3
 8018f84:	d007      	beq.n	8018f96 <xTaskCheckForTimeOut+0x82>
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	685b      	ldr	r3, [r3, #4]
 8018f8a:	69ba      	ldr	r2, [r7, #24]
 8018f8c:	429a      	cmp	r2, r3
 8018f8e:	d302      	bcc.n	8018f96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018f90:	2301      	movs	r3, #1
 8018f92:	61fb      	str	r3, [r7, #28]
 8018f94:	e015      	b.n	8018fc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018f96:	683b      	ldr	r3, [r7, #0]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	697a      	ldr	r2, [r7, #20]
 8018f9c:	429a      	cmp	r2, r3
 8018f9e:	d20b      	bcs.n	8018fb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018fa0:	683b      	ldr	r3, [r7, #0]
 8018fa2:	681a      	ldr	r2, [r3, #0]
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	1ad2      	subs	r2, r2, r3
 8018fa8:	683b      	ldr	r3, [r7, #0]
 8018faa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018fac:	6878      	ldr	r0, [r7, #4]
 8018fae:	f7ff ff9b 	bl	8018ee8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	61fb      	str	r3, [r7, #28]
 8018fb6:	e004      	b.n	8018fc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	2200      	movs	r2, #0
 8018fbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018fbe:	2301      	movs	r3, #1
 8018fc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018fc2:	f000 feaf 	bl	8019d24 <vPortExitCritical>

	return xReturn;
 8018fc6:	69fb      	ldr	r3, [r7, #28]
}
 8018fc8:	4618      	mov	r0, r3
 8018fca:	3720      	adds	r7, #32
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}
 8018fd0:	24002bf0 	.word	0x24002bf0
 8018fd4:	24002c04 	.word	0x24002c04

08018fd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018fd8:	b480      	push	{r7}
 8018fda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018fdc:	4b03      	ldr	r3, [pc, #12]	; (8018fec <vTaskMissedYield+0x14>)
 8018fde:	2201      	movs	r2, #1
 8018fe0:	601a      	str	r2, [r3, #0]
}
 8018fe2:	bf00      	nop
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fea:	4770      	bx	lr
 8018fec:	24002c00 	.word	0x24002c00

08018ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b082      	sub	sp, #8
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018ff8:	f000 f852 	bl	80190a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018ffc:	4b06      	ldr	r3, [pc, #24]	; (8019018 <prvIdleTask+0x28>)
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	2b01      	cmp	r3, #1
 8019002:	d9f9      	bls.n	8018ff8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8019004:	4b05      	ldr	r3, [pc, #20]	; (801901c <prvIdleTask+0x2c>)
 8019006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801900a:	601a      	str	r2, [r3, #0]
 801900c:	f3bf 8f4f 	dsb	sy
 8019010:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019014:	e7f0      	b.n	8018ff8 <prvIdleTask+0x8>
 8019016:	bf00      	nop
 8019018:	2400271c 	.word	0x2400271c
 801901c:	e000ed04 	.word	0xe000ed04

08019020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b082      	sub	sp, #8
 8019024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019026:	2300      	movs	r3, #0
 8019028:	607b      	str	r3, [r7, #4]
 801902a:	e00c      	b.n	8019046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801902c:	687a      	ldr	r2, [r7, #4]
 801902e:	4613      	mov	r3, r2
 8019030:	009b      	lsls	r3, r3, #2
 8019032:	4413      	add	r3, r2
 8019034:	009b      	lsls	r3, r3, #2
 8019036:	4a12      	ldr	r2, [pc, #72]	; (8019080 <prvInitialiseTaskLists+0x60>)
 8019038:	4413      	add	r3, r2
 801903a:	4618      	mov	r0, r3
 801903c:	f7fe fc3c 	bl	80178b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	3301      	adds	r3, #1
 8019044:	607b      	str	r3, [r7, #4]
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	2b37      	cmp	r3, #55	; 0x37
 801904a:	d9ef      	bls.n	801902c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801904c:	480d      	ldr	r0, [pc, #52]	; (8019084 <prvInitialiseTaskLists+0x64>)
 801904e:	f7fe fc33 	bl	80178b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019052:	480d      	ldr	r0, [pc, #52]	; (8019088 <prvInitialiseTaskLists+0x68>)
 8019054:	f7fe fc30 	bl	80178b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019058:	480c      	ldr	r0, [pc, #48]	; (801908c <prvInitialiseTaskLists+0x6c>)
 801905a:	f7fe fc2d 	bl	80178b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801905e:	480c      	ldr	r0, [pc, #48]	; (8019090 <prvInitialiseTaskLists+0x70>)
 8019060:	f7fe fc2a 	bl	80178b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019064:	480b      	ldr	r0, [pc, #44]	; (8019094 <prvInitialiseTaskLists+0x74>)
 8019066:	f7fe fc27 	bl	80178b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801906a:	4b0b      	ldr	r3, [pc, #44]	; (8019098 <prvInitialiseTaskLists+0x78>)
 801906c:	4a05      	ldr	r2, [pc, #20]	; (8019084 <prvInitialiseTaskLists+0x64>)
 801906e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019070:	4b0a      	ldr	r3, [pc, #40]	; (801909c <prvInitialiseTaskLists+0x7c>)
 8019072:	4a05      	ldr	r2, [pc, #20]	; (8019088 <prvInitialiseTaskLists+0x68>)
 8019074:	601a      	str	r2, [r3, #0]
}
 8019076:	bf00      	nop
 8019078:	3708      	adds	r7, #8
 801907a:	46bd      	mov	sp, r7
 801907c:	bd80      	pop	{r7, pc}
 801907e:	bf00      	nop
 8019080:	2400271c 	.word	0x2400271c
 8019084:	24002b7c 	.word	0x24002b7c
 8019088:	24002b90 	.word	0x24002b90
 801908c:	24002bac 	.word	0x24002bac
 8019090:	24002bc0 	.word	0x24002bc0
 8019094:	24002bd8 	.word	0x24002bd8
 8019098:	24002ba4 	.word	0x24002ba4
 801909c:	24002ba8 	.word	0x24002ba8

080190a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80190a0:	b580      	push	{r7, lr}
 80190a2:	b082      	sub	sp, #8
 80190a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80190a6:	e019      	b.n	80190dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80190a8:	f000 fe0c 	bl	8019cc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190ac:	4b10      	ldr	r3, [pc, #64]	; (80190f0 <prvCheckTasksWaitingTermination+0x50>)
 80190ae:	68db      	ldr	r3, [r3, #12]
 80190b0:	68db      	ldr	r3, [r3, #12]
 80190b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	3304      	adds	r3, #4
 80190b8:	4618      	mov	r0, r3
 80190ba:	f7fe fc87 	bl	80179cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80190be:	4b0d      	ldr	r3, [pc, #52]	; (80190f4 <prvCheckTasksWaitingTermination+0x54>)
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	3b01      	subs	r3, #1
 80190c4:	4a0b      	ldr	r2, [pc, #44]	; (80190f4 <prvCheckTasksWaitingTermination+0x54>)
 80190c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80190c8:	4b0b      	ldr	r3, [pc, #44]	; (80190f8 <prvCheckTasksWaitingTermination+0x58>)
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	3b01      	subs	r3, #1
 80190ce:	4a0a      	ldr	r2, [pc, #40]	; (80190f8 <prvCheckTasksWaitingTermination+0x58>)
 80190d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80190d2:	f000 fe27 	bl	8019d24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80190d6:	6878      	ldr	r0, [r7, #4]
 80190d8:	f000 f810 	bl	80190fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80190dc:	4b06      	ldr	r3, [pc, #24]	; (80190f8 <prvCheckTasksWaitingTermination+0x58>)
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d1e1      	bne.n	80190a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80190e4:	bf00      	nop
 80190e6:	bf00      	nop
 80190e8:	3708      	adds	r7, #8
 80190ea:	46bd      	mov	sp, r7
 80190ec:	bd80      	pop	{r7, pc}
 80190ee:	bf00      	nop
 80190f0:	24002bc0 	.word	0x24002bc0
 80190f4:	24002bec 	.word	0x24002bec
 80190f8:	24002bd4 	.word	0x24002bd4

080190fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b084      	sub	sp, #16
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801910a:	2b00      	cmp	r3, #0
 801910c:	d108      	bne.n	8019120 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019112:	4618      	mov	r0, r3
 8019114:	f000 ffc4 	bl	801a0a0 <vPortFree>
				vPortFree( pxTCB );
 8019118:	6878      	ldr	r0, [r7, #4]
 801911a:	f000 ffc1 	bl	801a0a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801911e:	e018      	b.n	8019152 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019126:	2b01      	cmp	r3, #1
 8019128:	d103      	bne.n	8019132 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801912a:	6878      	ldr	r0, [r7, #4]
 801912c:	f000 ffb8 	bl	801a0a0 <vPortFree>
	}
 8019130:	e00f      	b.n	8019152 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019138:	2b02      	cmp	r3, #2
 801913a:	d00a      	beq.n	8019152 <prvDeleteTCB+0x56>
	__asm volatile
 801913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019140:	f383 8811 	msr	BASEPRI, r3
 8019144:	f3bf 8f6f 	isb	sy
 8019148:	f3bf 8f4f 	dsb	sy
 801914c:	60fb      	str	r3, [r7, #12]
}
 801914e:	bf00      	nop
 8019150:	e7fe      	b.n	8019150 <prvDeleteTCB+0x54>
	}
 8019152:	bf00      	nop
 8019154:	3710      	adds	r7, #16
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}
	...

0801915c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801915c:	b480      	push	{r7}
 801915e:	b083      	sub	sp, #12
 8019160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019162:	4b0c      	ldr	r3, [pc, #48]	; (8019194 <prvResetNextTaskUnblockTime+0x38>)
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	2b00      	cmp	r3, #0
 801916a:	d104      	bne.n	8019176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801916c:	4b0a      	ldr	r3, [pc, #40]	; (8019198 <prvResetNextTaskUnblockTime+0x3c>)
 801916e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019174:	e008      	b.n	8019188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019176:	4b07      	ldr	r3, [pc, #28]	; (8019194 <prvResetNextTaskUnblockTime+0x38>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	68db      	ldr	r3, [r3, #12]
 801917c:	68db      	ldr	r3, [r3, #12]
 801917e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	685b      	ldr	r3, [r3, #4]
 8019184:	4a04      	ldr	r2, [pc, #16]	; (8019198 <prvResetNextTaskUnblockTime+0x3c>)
 8019186:	6013      	str	r3, [r2, #0]
}
 8019188:	bf00      	nop
 801918a:	370c      	adds	r7, #12
 801918c:	46bd      	mov	sp, r7
 801918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019192:	4770      	bx	lr
 8019194:	24002ba4 	.word	0x24002ba4
 8019198:	24002c0c 	.word	0x24002c0c

0801919c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801919c:	b480      	push	{r7}
 801919e:	b083      	sub	sp, #12
 80191a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80191a2:	4b0b      	ldr	r3, [pc, #44]	; (80191d0 <xTaskGetSchedulerState+0x34>)
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d102      	bne.n	80191b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80191aa:	2301      	movs	r3, #1
 80191ac:	607b      	str	r3, [r7, #4]
 80191ae:	e008      	b.n	80191c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80191b0:	4b08      	ldr	r3, [pc, #32]	; (80191d4 <xTaskGetSchedulerState+0x38>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d102      	bne.n	80191be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80191b8:	2302      	movs	r3, #2
 80191ba:	607b      	str	r3, [r7, #4]
 80191bc:	e001      	b.n	80191c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80191be:	2300      	movs	r3, #0
 80191c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80191c2:	687b      	ldr	r3, [r7, #4]
	}
 80191c4:	4618      	mov	r0, r3
 80191c6:	370c      	adds	r7, #12
 80191c8:	46bd      	mov	sp, r7
 80191ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ce:	4770      	bx	lr
 80191d0:	24002bf8 	.word	0x24002bf8
 80191d4:	24002c14 	.word	0x24002c14

080191d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b086      	sub	sp, #24
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80191e4:	2300      	movs	r3, #0
 80191e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d056      	beq.n	801929c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80191ee:	4b2e      	ldr	r3, [pc, #184]	; (80192a8 <xTaskPriorityDisinherit+0xd0>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	693a      	ldr	r2, [r7, #16]
 80191f4:	429a      	cmp	r2, r3
 80191f6:	d00a      	beq.n	801920e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80191f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191fc:	f383 8811 	msr	BASEPRI, r3
 8019200:	f3bf 8f6f 	isb	sy
 8019204:	f3bf 8f4f 	dsb	sy
 8019208:	60fb      	str	r3, [r7, #12]
}
 801920a:	bf00      	nop
 801920c:	e7fe      	b.n	801920c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801920e:	693b      	ldr	r3, [r7, #16]
 8019210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019212:	2b00      	cmp	r3, #0
 8019214:	d10a      	bne.n	801922c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801921a:	f383 8811 	msr	BASEPRI, r3
 801921e:	f3bf 8f6f 	isb	sy
 8019222:	f3bf 8f4f 	dsb	sy
 8019226:	60bb      	str	r3, [r7, #8]
}
 8019228:	bf00      	nop
 801922a:	e7fe      	b.n	801922a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801922c:	693b      	ldr	r3, [r7, #16]
 801922e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019230:	1e5a      	subs	r2, r3, #1
 8019232:	693b      	ldr	r3, [r7, #16]
 8019234:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019236:	693b      	ldr	r3, [r7, #16]
 8019238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801923a:	693b      	ldr	r3, [r7, #16]
 801923c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801923e:	429a      	cmp	r2, r3
 8019240:	d02c      	beq.n	801929c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019242:	693b      	ldr	r3, [r7, #16]
 8019244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019246:	2b00      	cmp	r3, #0
 8019248:	d128      	bne.n	801929c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801924a:	693b      	ldr	r3, [r7, #16]
 801924c:	3304      	adds	r3, #4
 801924e:	4618      	mov	r0, r3
 8019250:	f7fe fbbc 	bl	80179cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019254:	693b      	ldr	r3, [r7, #16]
 8019256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019258:	693b      	ldr	r3, [r7, #16]
 801925a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801925c:	693b      	ldr	r3, [r7, #16]
 801925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019260:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019268:	693b      	ldr	r3, [r7, #16]
 801926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801926c:	4b0f      	ldr	r3, [pc, #60]	; (80192ac <xTaskPriorityDisinherit+0xd4>)
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	429a      	cmp	r2, r3
 8019272:	d903      	bls.n	801927c <xTaskPriorityDisinherit+0xa4>
 8019274:	693b      	ldr	r3, [r7, #16]
 8019276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019278:	4a0c      	ldr	r2, [pc, #48]	; (80192ac <xTaskPriorityDisinherit+0xd4>)
 801927a:	6013      	str	r3, [r2, #0]
 801927c:	693b      	ldr	r3, [r7, #16]
 801927e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019280:	4613      	mov	r3, r2
 8019282:	009b      	lsls	r3, r3, #2
 8019284:	4413      	add	r3, r2
 8019286:	009b      	lsls	r3, r3, #2
 8019288:	4a09      	ldr	r2, [pc, #36]	; (80192b0 <xTaskPriorityDisinherit+0xd8>)
 801928a:	441a      	add	r2, r3
 801928c:	693b      	ldr	r3, [r7, #16]
 801928e:	3304      	adds	r3, #4
 8019290:	4619      	mov	r1, r3
 8019292:	4610      	mov	r0, r2
 8019294:	f7fe fb3d 	bl	8017912 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019298:	2301      	movs	r3, #1
 801929a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801929c:	697b      	ldr	r3, [r7, #20]
	}
 801929e:	4618      	mov	r0, r3
 80192a0:	3718      	adds	r7, #24
 80192a2:	46bd      	mov	sp, r7
 80192a4:	bd80      	pop	{r7, pc}
 80192a6:	bf00      	nop
 80192a8:	24002718 	.word	0x24002718
 80192ac:	24002bf4 	.word	0x24002bf4
 80192b0:	2400271c 	.word	0x2400271c

080192b4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80192b4:	b480      	push	{r7}
 80192b6:	b083      	sub	sp, #12
 80192b8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80192ba:	4b09      	ldr	r3, [pc, #36]	; (80192e0 <uxTaskResetEventItemValue+0x2c>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	699b      	ldr	r3, [r3, #24]
 80192c0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80192c2:	4b07      	ldr	r3, [pc, #28]	; (80192e0 <uxTaskResetEventItemValue+0x2c>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192c8:	4b05      	ldr	r3, [pc, #20]	; (80192e0 <uxTaskResetEventItemValue+0x2c>)
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80192d0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80192d2:	687b      	ldr	r3, [r7, #4]
}
 80192d4:	4618      	mov	r0, r3
 80192d6:	370c      	adds	r7, #12
 80192d8:	46bd      	mov	sp, r7
 80192da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192de:	4770      	bx	lr
 80192e0:	24002718 	.word	0x24002718

080192e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b084      	sub	sp, #16
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	6078      	str	r0, [r7, #4]
 80192ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80192ee:	4b21      	ldr	r3, [pc, #132]	; (8019374 <prvAddCurrentTaskToDelayedList+0x90>)
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80192f4:	4b20      	ldr	r3, [pc, #128]	; (8019378 <prvAddCurrentTaskToDelayedList+0x94>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	3304      	adds	r3, #4
 80192fa:	4618      	mov	r0, r3
 80192fc:	f7fe fb66 	bl	80179cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019306:	d10a      	bne.n	801931e <prvAddCurrentTaskToDelayedList+0x3a>
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d007      	beq.n	801931e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801930e:	4b1a      	ldr	r3, [pc, #104]	; (8019378 <prvAddCurrentTaskToDelayedList+0x94>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	3304      	adds	r3, #4
 8019314:	4619      	mov	r1, r3
 8019316:	4819      	ldr	r0, [pc, #100]	; (801937c <prvAddCurrentTaskToDelayedList+0x98>)
 8019318:	f7fe fafb 	bl	8017912 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801931c:	e026      	b.n	801936c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801931e:	68fa      	ldr	r2, [r7, #12]
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	4413      	add	r3, r2
 8019324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019326:	4b14      	ldr	r3, [pc, #80]	; (8019378 <prvAddCurrentTaskToDelayedList+0x94>)
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	68ba      	ldr	r2, [r7, #8]
 801932c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801932e:	68ba      	ldr	r2, [r7, #8]
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	429a      	cmp	r2, r3
 8019334:	d209      	bcs.n	801934a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019336:	4b12      	ldr	r3, [pc, #72]	; (8019380 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019338:	681a      	ldr	r2, [r3, #0]
 801933a:	4b0f      	ldr	r3, [pc, #60]	; (8019378 <prvAddCurrentTaskToDelayedList+0x94>)
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	3304      	adds	r3, #4
 8019340:	4619      	mov	r1, r3
 8019342:	4610      	mov	r0, r2
 8019344:	f7fe fb09 	bl	801795a <vListInsert>
}
 8019348:	e010      	b.n	801936c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801934a:	4b0e      	ldr	r3, [pc, #56]	; (8019384 <prvAddCurrentTaskToDelayedList+0xa0>)
 801934c:	681a      	ldr	r2, [r3, #0]
 801934e:	4b0a      	ldr	r3, [pc, #40]	; (8019378 <prvAddCurrentTaskToDelayedList+0x94>)
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	3304      	adds	r3, #4
 8019354:	4619      	mov	r1, r3
 8019356:	4610      	mov	r0, r2
 8019358:	f7fe faff 	bl	801795a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801935c:	4b0a      	ldr	r3, [pc, #40]	; (8019388 <prvAddCurrentTaskToDelayedList+0xa4>)
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	68ba      	ldr	r2, [r7, #8]
 8019362:	429a      	cmp	r2, r3
 8019364:	d202      	bcs.n	801936c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019366:	4a08      	ldr	r2, [pc, #32]	; (8019388 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019368:	68bb      	ldr	r3, [r7, #8]
 801936a:	6013      	str	r3, [r2, #0]
}
 801936c:	bf00      	nop
 801936e:	3710      	adds	r7, #16
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}
 8019374:	24002bf0 	.word	0x24002bf0
 8019378:	24002718 	.word	0x24002718
 801937c:	24002bd8 	.word	0x24002bd8
 8019380:	24002ba8 	.word	0x24002ba8
 8019384:	24002ba4 	.word	0x24002ba4
 8019388:	24002c0c 	.word	0x24002c0c

0801938c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801938c:	b580      	push	{r7, lr}
 801938e:	b08a      	sub	sp, #40	; 0x28
 8019390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019392:	2300      	movs	r3, #0
 8019394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019396:	f000 fb07 	bl	80199a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801939a:	4b1c      	ldr	r3, [pc, #112]	; (801940c <xTimerCreateTimerTask+0x80>)
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d021      	beq.n	80193e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80193a2:	2300      	movs	r3, #0
 80193a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80193a6:	2300      	movs	r3, #0
 80193a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80193aa:	1d3a      	adds	r2, r7, #4
 80193ac:	f107 0108 	add.w	r1, r7, #8
 80193b0:	f107 030c 	add.w	r3, r7, #12
 80193b4:	4618      	mov	r0, r3
 80193b6:	f7fd fff9 	bl	80173ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80193ba:	6879      	ldr	r1, [r7, #4]
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	68fa      	ldr	r2, [r7, #12]
 80193c0:	9202      	str	r2, [sp, #8]
 80193c2:	9301      	str	r3, [sp, #4]
 80193c4:	2302      	movs	r3, #2
 80193c6:	9300      	str	r3, [sp, #0]
 80193c8:	2300      	movs	r3, #0
 80193ca:	460a      	mov	r2, r1
 80193cc:	4910      	ldr	r1, [pc, #64]	; (8019410 <xTimerCreateTimerTask+0x84>)
 80193ce:	4811      	ldr	r0, [pc, #68]	; (8019414 <xTimerCreateTimerTask+0x88>)
 80193d0:	f7ff f812 	bl	80183f8 <xTaskCreateStatic>
 80193d4:	4603      	mov	r3, r0
 80193d6:	4a10      	ldr	r2, [pc, #64]	; (8019418 <xTimerCreateTimerTask+0x8c>)
 80193d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80193da:	4b0f      	ldr	r3, [pc, #60]	; (8019418 <xTimerCreateTimerTask+0x8c>)
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d001      	beq.n	80193e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80193e2:	2301      	movs	r3, #1
 80193e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80193e6:	697b      	ldr	r3, [r7, #20]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d10a      	bne.n	8019402 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80193ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193f0:	f383 8811 	msr	BASEPRI, r3
 80193f4:	f3bf 8f6f 	isb	sy
 80193f8:	f3bf 8f4f 	dsb	sy
 80193fc:	613b      	str	r3, [r7, #16]
}
 80193fe:	bf00      	nop
 8019400:	e7fe      	b.n	8019400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019402:	697b      	ldr	r3, [r7, #20]
}
 8019404:	4618      	mov	r0, r3
 8019406:	3718      	adds	r7, #24
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}
 801940c:	24002c48 	.word	0x24002c48
 8019410:	0801afc8 	.word	0x0801afc8
 8019414:	08019551 	.word	0x08019551
 8019418:	24002c4c 	.word	0x24002c4c

0801941c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b08a      	sub	sp, #40	; 0x28
 8019420:	af00      	add	r7, sp, #0
 8019422:	60f8      	str	r0, [r7, #12]
 8019424:	60b9      	str	r1, [r7, #8]
 8019426:	607a      	str	r2, [r7, #4]
 8019428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801942a:	2300      	movs	r3, #0
 801942c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d10a      	bne.n	801944a <xTimerGenericCommand+0x2e>
	__asm volatile
 8019434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019438:	f383 8811 	msr	BASEPRI, r3
 801943c:	f3bf 8f6f 	isb	sy
 8019440:	f3bf 8f4f 	dsb	sy
 8019444:	623b      	str	r3, [r7, #32]
}
 8019446:	bf00      	nop
 8019448:	e7fe      	b.n	8019448 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801944a:	4b1a      	ldr	r3, [pc, #104]	; (80194b4 <xTimerGenericCommand+0x98>)
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d02a      	beq.n	80194a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019452:	68bb      	ldr	r3, [r7, #8]
 8019454:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801945e:	68bb      	ldr	r3, [r7, #8]
 8019460:	2b05      	cmp	r3, #5
 8019462:	dc18      	bgt.n	8019496 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019464:	f7ff fe9a 	bl	801919c <xTaskGetSchedulerState>
 8019468:	4603      	mov	r3, r0
 801946a:	2b02      	cmp	r3, #2
 801946c:	d109      	bne.n	8019482 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801946e:	4b11      	ldr	r3, [pc, #68]	; (80194b4 <xTimerGenericCommand+0x98>)
 8019470:	6818      	ldr	r0, [r3, #0]
 8019472:	f107 0110 	add.w	r1, r7, #16
 8019476:	2300      	movs	r3, #0
 8019478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801947a:	f7fe fbd5 	bl	8017c28 <xQueueGenericSend>
 801947e:	6278      	str	r0, [r7, #36]	; 0x24
 8019480:	e012      	b.n	80194a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019482:	4b0c      	ldr	r3, [pc, #48]	; (80194b4 <xTimerGenericCommand+0x98>)
 8019484:	6818      	ldr	r0, [r3, #0]
 8019486:	f107 0110 	add.w	r1, r7, #16
 801948a:	2300      	movs	r3, #0
 801948c:	2200      	movs	r2, #0
 801948e:	f7fe fbcb 	bl	8017c28 <xQueueGenericSend>
 8019492:	6278      	str	r0, [r7, #36]	; 0x24
 8019494:	e008      	b.n	80194a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019496:	4b07      	ldr	r3, [pc, #28]	; (80194b4 <xTimerGenericCommand+0x98>)
 8019498:	6818      	ldr	r0, [r3, #0]
 801949a:	f107 0110 	add.w	r1, r7, #16
 801949e:	2300      	movs	r3, #0
 80194a0:	683a      	ldr	r2, [r7, #0]
 80194a2:	f7fe fcbf 	bl	8017e24 <xQueueGenericSendFromISR>
 80194a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80194a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80194aa:	4618      	mov	r0, r3
 80194ac:	3728      	adds	r7, #40	; 0x28
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd80      	pop	{r7, pc}
 80194b2:	bf00      	nop
 80194b4:	24002c48 	.word	0x24002c48

080194b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b088      	sub	sp, #32
 80194bc:	af02      	add	r7, sp, #8
 80194be:	6078      	str	r0, [r7, #4]
 80194c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194c2:	4b22      	ldr	r3, [pc, #136]	; (801954c <prvProcessExpiredTimer+0x94>)
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	68db      	ldr	r3, [r3, #12]
 80194c8:	68db      	ldr	r3, [r3, #12]
 80194ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80194cc:	697b      	ldr	r3, [r7, #20]
 80194ce:	3304      	adds	r3, #4
 80194d0:	4618      	mov	r0, r3
 80194d2:	f7fe fa7b 	bl	80179cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80194d6:	697b      	ldr	r3, [r7, #20]
 80194d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194dc:	f003 0304 	and.w	r3, r3, #4
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d022      	beq.n	801952a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80194e4:	697b      	ldr	r3, [r7, #20]
 80194e6:	699a      	ldr	r2, [r3, #24]
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	18d1      	adds	r1, r2, r3
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	683a      	ldr	r2, [r7, #0]
 80194f0:	6978      	ldr	r0, [r7, #20]
 80194f2:	f000 f8d1 	bl	8019698 <prvInsertTimerInActiveList>
 80194f6:	4603      	mov	r3, r0
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d01f      	beq.n	801953c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80194fc:	2300      	movs	r3, #0
 80194fe:	9300      	str	r3, [sp, #0]
 8019500:	2300      	movs	r3, #0
 8019502:	687a      	ldr	r2, [r7, #4]
 8019504:	2100      	movs	r1, #0
 8019506:	6978      	ldr	r0, [r7, #20]
 8019508:	f7ff ff88 	bl	801941c <xTimerGenericCommand>
 801950c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801950e:	693b      	ldr	r3, [r7, #16]
 8019510:	2b00      	cmp	r3, #0
 8019512:	d113      	bne.n	801953c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019518:	f383 8811 	msr	BASEPRI, r3
 801951c:	f3bf 8f6f 	isb	sy
 8019520:	f3bf 8f4f 	dsb	sy
 8019524:	60fb      	str	r3, [r7, #12]
}
 8019526:	bf00      	nop
 8019528:	e7fe      	b.n	8019528 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801952a:	697b      	ldr	r3, [r7, #20]
 801952c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019530:	f023 0301 	bic.w	r3, r3, #1
 8019534:	b2da      	uxtb	r2, r3
 8019536:	697b      	ldr	r3, [r7, #20]
 8019538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801953c:	697b      	ldr	r3, [r7, #20]
 801953e:	6a1b      	ldr	r3, [r3, #32]
 8019540:	6978      	ldr	r0, [r7, #20]
 8019542:	4798      	blx	r3
}
 8019544:	bf00      	nop
 8019546:	3718      	adds	r7, #24
 8019548:	46bd      	mov	sp, r7
 801954a:	bd80      	pop	{r7, pc}
 801954c:	24002c40 	.word	0x24002c40

08019550 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019550:	b580      	push	{r7, lr}
 8019552:	b084      	sub	sp, #16
 8019554:	af00      	add	r7, sp, #0
 8019556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019558:	f107 0308 	add.w	r3, r7, #8
 801955c:	4618      	mov	r0, r3
 801955e:	f000 f857 	bl	8019610 <prvGetNextExpireTime>
 8019562:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019564:	68bb      	ldr	r3, [r7, #8]
 8019566:	4619      	mov	r1, r3
 8019568:	68f8      	ldr	r0, [r7, #12]
 801956a:	f000 f803 	bl	8019574 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801956e:	f000 f8d5 	bl	801971c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019572:	e7f1      	b.n	8019558 <prvTimerTask+0x8>

08019574 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019574:	b580      	push	{r7, lr}
 8019576:	b084      	sub	sp, #16
 8019578:	af00      	add	r7, sp, #0
 801957a:	6078      	str	r0, [r7, #4]
 801957c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801957e:	f7ff f977 	bl	8018870 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019582:	f107 0308 	add.w	r3, r7, #8
 8019586:	4618      	mov	r0, r3
 8019588:	f000 f866 	bl	8019658 <prvSampleTimeNow>
 801958c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801958e:	68bb      	ldr	r3, [r7, #8]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d130      	bne.n	80195f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d10a      	bne.n	80195b0 <prvProcessTimerOrBlockTask+0x3c>
 801959a:	687a      	ldr	r2, [r7, #4]
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	429a      	cmp	r2, r3
 80195a0:	d806      	bhi.n	80195b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80195a2:	f7ff f973 	bl	801888c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80195a6:	68f9      	ldr	r1, [r7, #12]
 80195a8:	6878      	ldr	r0, [r7, #4]
 80195aa:	f7ff ff85 	bl	80194b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80195ae:	e024      	b.n	80195fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80195b0:	683b      	ldr	r3, [r7, #0]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d008      	beq.n	80195c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80195b6:	4b13      	ldr	r3, [pc, #76]	; (8019604 <prvProcessTimerOrBlockTask+0x90>)
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d101      	bne.n	80195c4 <prvProcessTimerOrBlockTask+0x50>
 80195c0:	2301      	movs	r3, #1
 80195c2:	e000      	b.n	80195c6 <prvProcessTimerOrBlockTask+0x52>
 80195c4:	2300      	movs	r3, #0
 80195c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80195c8:	4b0f      	ldr	r3, [pc, #60]	; (8019608 <prvProcessTimerOrBlockTask+0x94>)
 80195ca:	6818      	ldr	r0, [r3, #0]
 80195cc:	687a      	ldr	r2, [r7, #4]
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	1ad3      	subs	r3, r2, r3
 80195d2:	683a      	ldr	r2, [r7, #0]
 80195d4:	4619      	mov	r1, r3
 80195d6:	f7fe fedb 	bl	8018390 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80195da:	f7ff f957 	bl	801888c <xTaskResumeAll>
 80195de:	4603      	mov	r3, r0
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d10a      	bne.n	80195fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80195e4:	4b09      	ldr	r3, [pc, #36]	; (801960c <prvProcessTimerOrBlockTask+0x98>)
 80195e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80195ea:	601a      	str	r2, [r3, #0]
 80195ec:	f3bf 8f4f 	dsb	sy
 80195f0:	f3bf 8f6f 	isb	sy
}
 80195f4:	e001      	b.n	80195fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80195f6:	f7ff f949 	bl	801888c <xTaskResumeAll>
}
 80195fa:	bf00      	nop
 80195fc:	3710      	adds	r7, #16
 80195fe:	46bd      	mov	sp, r7
 8019600:	bd80      	pop	{r7, pc}
 8019602:	bf00      	nop
 8019604:	24002c44 	.word	0x24002c44
 8019608:	24002c48 	.word	0x24002c48
 801960c:	e000ed04 	.word	0xe000ed04

08019610 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019610:	b480      	push	{r7}
 8019612:	b085      	sub	sp, #20
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019618:	4b0e      	ldr	r3, [pc, #56]	; (8019654 <prvGetNextExpireTime+0x44>)
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d101      	bne.n	8019626 <prvGetNextExpireTime+0x16>
 8019622:	2201      	movs	r2, #1
 8019624:	e000      	b.n	8019628 <prvGetNextExpireTime+0x18>
 8019626:	2200      	movs	r2, #0
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d105      	bne.n	8019640 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019634:	4b07      	ldr	r3, [pc, #28]	; (8019654 <prvGetNextExpireTime+0x44>)
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	68db      	ldr	r3, [r3, #12]
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	60fb      	str	r3, [r7, #12]
 801963e:	e001      	b.n	8019644 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019640:	2300      	movs	r3, #0
 8019642:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019644:	68fb      	ldr	r3, [r7, #12]
}
 8019646:	4618      	mov	r0, r3
 8019648:	3714      	adds	r7, #20
 801964a:	46bd      	mov	sp, r7
 801964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019650:	4770      	bx	lr
 8019652:	bf00      	nop
 8019654:	24002c40 	.word	0x24002c40

08019658 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b084      	sub	sp, #16
 801965c:	af00      	add	r7, sp, #0
 801965e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019660:	f7ff f9b2 	bl	80189c8 <xTaskGetTickCount>
 8019664:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019666:	4b0b      	ldr	r3, [pc, #44]	; (8019694 <prvSampleTimeNow+0x3c>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	68fa      	ldr	r2, [r7, #12]
 801966c:	429a      	cmp	r2, r3
 801966e:	d205      	bcs.n	801967c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019670:	f000 f936 	bl	80198e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	2201      	movs	r2, #1
 8019678:	601a      	str	r2, [r3, #0]
 801967a:	e002      	b.n	8019682 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	2200      	movs	r2, #0
 8019680:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019682:	4a04      	ldr	r2, [pc, #16]	; (8019694 <prvSampleTimeNow+0x3c>)
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019688:	68fb      	ldr	r3, [r7, #12]
}
 801968a:	4618      	mov	r0, r3
 801968c:	3710      	adds	r7, #16
 801968e:	46bd      	mov	sp, r7
 8019690:	bd80      	pop	{r7, pc}
 8019692:	bf00      	nop
 8019694:	24002c50 	.word	0x24002c50

08019698 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019698:	b580      	push	{r7, lr}
 801969a:	b086      	sub	sp, #24
 801969c:	af00      	add	r7, sp, #0
 801969e:	60f8      	str	r0, [r7, #12]
 80196a0:	60b9      	str	r1, [r7, #8]
 80196a2:	607a      	str	r2, [r7, #4]
 80196a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80196a6:	2300      	movs	r3, #0
 80196a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	68ba      	ldr	r2, [r7, #8]
 80196ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	68fa      	ldr	r2, [r7, #12]
 80196b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80196b6:	68ba      	ldr	r2, [r7, #8]
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	429a      	cmp	r2, r3
 80196bc:	d812      	bhi.n	80196e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196be:	687a      	ldr	r2, [r7, #4]
 80196c0:	683b      	ldr	r3, [r7, #0]
 80196c2:	1ad2      	subs	r2, r2, r3
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	699b      	ldr	r3, [r3, #24]
 80196c8:	429a      	cmp	r2, r3
 80196ca:	d302      	bcc.n	80196d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80196cc:	2301      	movs	r3, #1
 80196ce:	617b      	str	r3, [r7, #20]
 80196d0:	e01b      	b.n	801970a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80196d2:	4b10      	ldr	r3, [pc, #64]	; (8019714 <prvInsertTimerInActiveList+0x7c>)
 80196d4:	681a      	ldr	r2, [r3, #0]
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	3304      	adds	r3, #4
 80196da:	4619      	mov	r1, r3
 80196dc:	4610      	mov	r0, r2
 80196de:	f7fe f93c 	bl	801795a <vListInsert>
 80196e2:	e012      	b.n	801970a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80196e4:	687a      	ldr	r2, [r7, #4]
 80196e6:	683b      	ldr	r3, [r7, #0]
 80196e8:	429a      	cmp	r2, r3
 80196ea:	d206      	bcs.n	80196fa <prvInsertTimerInActiveList+0x62>
 80196ec:	68ba      	ldr	r2, [r7, #8]
 80196ee:	683b      	ldr	r3, [r7, #0]
 80196f0:	429a      	cmp	r2, r3
 80196f2:	d302      	bcc.n	80196fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80196f4:	2301      	movs	r3, #1
 80196f6:	617b      	str	r3, [r7, #20]
 80196f8:	e007      	b.n	801970a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80196fa:	4b07      	ldr	r3, [pc, #28]	; (8019718 <prvInsertTimerInActiveList+0x80>)
 80196fc:	681a      	ldr	r2, [r3, #0]
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	3304      	adds	r3, #4
 8019702:	4619      	mov	r1, r3
 8019704:	4610      	mov	r0, r2
 8019706:	f7fe f928 	bl	801795a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801970a:	697b      	ldr	r3, [r7, #20]
}
 801970c:	4618      	mov	r0, r3
 801970e:	3718      	adds	r7, #24
 8019710:	46bd      	mov	sp, r7
 8019712:	bd80      	pop	{r7, pc}
 8019714:	24002c44 	.word	0x24002c44
 8019718:	24002c40 	.word	0x24002c40

0801971c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b08e      	sub	sp, #56	; 0x38
 8019720:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019722:	e0ca      	b.n	80198ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	2b00      	cmp	r3, #0
 8019728:	da18      	bge.n	801975c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801972a:	1d3b      	adds	r3, r7, #4
 801972c:	3304      	adds	r3, #4
 801972e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019732:	2b00      	cmp	r3, #0
 8019734:	d10a      	bne.n	801974c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801973a:	f383 8811 	msr	BASEPRI, r3
 801973e:	f3bf 8f6f 	isb	sy
 8019742:	f3bf 8f4f 	dsb	sy
 8019746:	61fb      	str	r3, [r7, #28]
}
 8019748:	bf00      	nop
 801974a:	e7fe      	b.n	801974a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019752:	6850      	ldr	r0, [r2, #4]
 8019754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019756:	6892      	ldr	r2, [r2, #8]
 8019758:	4611      	mov	r1, r2
 801975a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	2b00      	cmp	r3, #0
 8019760:	f2c0 80aa 	blt.w	80198b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801976a:	695b      	ldr	r3, [r3, #20]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d004      	beq.n	801977a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019772:	3304      	adds	r3, #4
 8019774:	4618      	mov	r0, r3
 8019776:	f7fe f929 	bl	80179cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801977a:	463b      	mov	r3, r7
 801977c:	4618      	mov	r0, r3
 801977e:	f7ff ff6b 	bl	8019658 <prvSampleTimeNow>
 8019782:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2b09      	cmp	r3, #9
 8019788:	f200 8097 	bhi.w	80198ba <prvProcessReceivedCommands+0x19e>
 801978c:	a201      	add	r2, pc, #4	; (adr r2, 8019794 <prvProcessReceivedCommands+0x78>)
 801978e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019792:	bf00      	nop
 8019794:	080197bd 	.word	0x080197bd
 8019798:	080197bd 	.word	0x080197bd
 801979c:	080197bd 	.word	0x080197bd
 80197a0:	08019831 	.word	0x08019831
 80197a4:	08019845 	.word	0x08019845
 80197a8:	0801988f 	.word	0x0801988f
 80197ac:	080197bd 	.word	0x080197bd
 80197b0:	080197bd 	.word	0x080197bd
 80197b4:	08019831 	.word	0x08019831
 80197b8:	08019845 	.word	0x08019845
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80197bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197c2:	f043 0301 	orr.w	r3, r3, #1
 80197c6:	b2da      	uxtb	r2, r3
 80197c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80197ce:	68ba      	ldr	r2, [r7, #8]
 80197d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197d2:	699b      	ldr	r3, [r3, #24]
 80197d4:	18d1      	adds	r1, r2, r3
 80197d6:	68bb      	ldr	r3, [r7, #8]
 80197d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197dc:	f7ff ff5c 	bl	8019698 <prvInsertTimerInActiveList>
 80197e0:	4603      	mov	r3, r0
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d069      	beq.n	80198ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80197e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197e8:	6a1b      	ldr	r3, [r3, #32]
 80197ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80197ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197f4:	f003 0304 	and.w	r3, r3, #4
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d05e      	beq.n	80198ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80197fc:	68ba      	ldr	r2, [r7, #8]
 80197fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019800:	699b      	ldr	r3, [r3, #24]
 8019802:	441a      	add	r2, r3
 8019804:	2300      	movs	r3, #0
 8019806:	9300      	str	r3, [sp, #0]
 8019808:	2300      	movs	r3, #0
 801980a:	2100      	movs	r1, #0
 801980c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801980e:	f7ff fe05 	bl	801941c <xTimerGenericCommand>
 8019812:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019814:	6a3b      	ldr	r3, [r7, #32]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d14f      	bne.n	80198ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801981e:	f383 8811 	msr	BASEPRI, r3
 8019822:	f3bf 8f6f 	isb	sy
 8019826:	f3bf 8f4f 	dsb	sy
 801982a:	61bb      	str	r3, [r7, #24]
}
 801982c:	bf00      	nop
 801982e:	e7fe      	b.n	801982e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019836:	f023 0301 	bic.w	r3, r3, #1
 801983a:	b2da      	uxtb	r2, r3
 801983c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801983e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019842:	e03a      	b.n	80198ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801984a:	f043 0301 	orr.w	r3, r3, #1
 801984e:	b2da      	uxtb	r2, r3
 8019850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019856:	68ba      	ldr	r2, [r7, #8]
 8019858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801985a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801985e:	699b      	ldr	r3, [r3, #24]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d10a      	bne.n	801987a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019868:	f383 8811 	msr	BASEPRI, r3
 801986c:	f3bf 8f6f 	isb	sy
 8019870:	f3bf 8f4f 	dsb	sy
 8019874:	617b      	str	r3, [r7, #20]
}
 8019876:	bf00      	nop
 8019878:	e7fe      	b.n	8019878 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801987c:	699a      	ldr	r2, [r3, #24]
 801987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019880:	18d1      	adds	r1, r2, r3
 8019882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019888:	f7ff ff06 	bl	8019698 <prvInsertTimerInActiveList>
					break;
 801988c:	e015      	b.n	80198ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019894:	f003 0302 	and.w	r3, r3, #2
 8019898:	2b00      	cmp	r3, #0
 801989a:	d103      	bne.n	80198a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801989c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801989e:	f000 fbff 	bl	801a0a0 <vPortFree>
 80198a2:	e00a      	b.n	80198ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80198a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198aa:	f023 0301 	bic.w	r3, r3, #1
 80198ae:	b2da      	uxtb	r2, r3
 80198b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80198b6:	e000      	b.n	80198ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80198b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80198ba:	4b08      	ldr	r3, [pc, #32]	; (80198dc <prvProcessReceivedCommands+0x1c0>)
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	1d39      	adds	r1, r7, #4
 80198c0:	2200      	movs	r2, #0
 80198c2:	4618      	mov	r0, r3
 80198c4:	f7fe fb4a 	bl	8017f5c <xQueueReceive>
 80198c8:	4603      	mov	r3, r0
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	f47f af2a 	bne.w	8019724 <prvProcessReceivedCommands+0x8>
	}
}
 80198d0:	bf00      	nop
 80198d2:	bf00      	nop
 80198d4:	3730      	adds	r7, #48	; 0x30
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bd80      	pop	{r7, pc}
 80198da:	bf00      	nop
 80198dc:	24002c48 	.word	0x24002c48

080198e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80198e0:	b580      	push	{r7, lr}
 80198e2:	b088      	sub	sp, #32
 80198e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80198e6:	e048      	b.n	801997a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80198e8:	4b2d      	ldr	r3, [pc, #180]	; (80199a0 <prvSwitchTimerLists+0xc0>)
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	68db      	ldr	r3, [r3, #12]
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198f2:	4b2b      	ldr	r3, [pc, #172]	; (80199a0 <prvSwitchTimerLists+0xc0>)
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	68db      	ldr	r3, [r3, #12]
 80198f8:	68db      	ldr	r3, [r3, #12]
 80198fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	3304      	adds	r3, #4
 8019900:	4618      	mov	r0, r3
 8019902:	f7fe f863 	bl	80179cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019906:	68fb      	ldr	r3, [r7, #12]
 8019908:	6a1b      	ldr	r3, [r3, #32]
 801990a:	68f8      	ldr	r0, [r7, #12]
 801990c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019914:	f003 0304 	and.w	r3, r3, #4
 8019918:	2b00      	cmp	r3, #0
 801991a:	d02e      	beq.n	801997a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	699b      	ldr	r3, [r3, #24]
 8019920:	693a      	ldr	r2, [r7, #16]
 8019922:	4413      	add	r3, r2
 8019924:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019926:	68ba      	ldr	r2, [r7, #8]
 8019928:	693b      	ldr	r3, [r7, #16]
 801992a:	429a      	cmp	r2, r3
 801992c:	d90e      	bls.n	801994c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	68ba      	ldr	r2, [r7, #8]
 8019932:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	68fa      	ldr	r2, [r7, #12]
 8019938:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801993a:	4b19      	ldr	r3, [pc, #100]	; (80199a0 <prvSwitchTimerLists+0xc0>)
 801993c:	681a      	ldr	r2, [r3, #0]
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	3304      	adds	r3, #4
 8019942:	4619      	mov	r1, r3
 8019944:	4610      	mov	r0, r2
 8019946:	f7fe f808 	bl	801795a <vListInsert>
 801994a:	e016      	b.n	801997a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801994c:	2300      	movs	r3, #0
 801994e:	9300      	str	r3, [sp, #0]
 8019950:	2300      	movs	r3, #0
 8019952:	693a      	ldr	r2, [r7, #16]
 8019954:	2100      	movs	r1, #0
 8019956:	68f8      	ldr	r0, [r7, #12]
 8019958:	f7ff fd60 	bl	801941c <xTimerGenericCommand>
 801995c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d10a      	bne.n	801997a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019968:	f383 8811 	msr	BASEPRI, r3
 801996c:	f3bf 8f6f 	isb	sy
 8019970:	f3bf 8f4f 	dsb	sy
 8019974:	603b      	str	r3, [r7, #0]
}
 8019976:	bf00      	nop
 8019978:	e7fe      	b.n	8019978 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801997a:	4b09      	ldr	r3, [pc, #36]	; (80199a0 <prvSwitchTimerLists+0xc0>)
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d1b1      	bne.n	80198e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019984:	4b06      	ldr	r3, [pc, #24]	; (80199a0 <prvSwitchTimerLists+0xc0>)
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801998a:	4b06      	ldr	r3, [pc, #24]	; (80199a4 <prvSwitchTimerLists+0xc4>)
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	4a04      	ldr	r2, [pc, #16]	; (80199a0 <prvSwitchTimerLists+0xc0>)
 8019990:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019992:	4a04      	ldr	r2, [pc, #16]	; (80199a4 <prvSwitchTimerLists+0xc4>)
 8019994:	697b      	ldr	r3, [r7, #20]
 8019996:	6013      	str	r3, [r2, #0]
}
 8019998:	bf00      	nop
 801999a:	3718      	adds	r7, #24
 801999c:	46bd      	mov	sp, r7
 801999e:	bd80      	pop	{r7, pc}
 80199a0:	24002c40 	.word	0x24002c40
 80199a4:	24002c44 	.word	0x24002c44

080199a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b082      	sub	sp, #8
 80199ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80199ae:	f000 f989 	bl	8019cc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80199b2:	4b15      	ldr	r3, [pc, #84]	; (8019a08 <prvCheckForValidListAndQueue+0x60>)
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d120      	bne.n	80199fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80199ba:	4814      	ldr	r0, [pc, #80]	; (8019a0c <prvCheckForValidListAndQueue+0x64>)
 80199bc:	f7fd ff7c 	bl	80178b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80199c0:	4813      	ldr	r0, [pc, #76]	; (8019a10 <prvCheckForValidListAndQueue+0x68>)
 80199c2:	f7fd ff79 	bl	80178b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80199c6:	4b13      	ldr	r3, [pc, #76]	; (8019a14 <prvCheckForValidListAndQueue+0x6c>)
 80199c8:	4a10      	ldr	r2, [pc, #64]	; (8019a0c <prvCheckForValidListAndQueue+0x64>)
 80199ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80199cc:	4b12      	ldr	r3, [pc, #72]	; (8019a18 <prvCheckForValidListAndQueue+0x70>)
 80199ce:	4a10      	ldr	r2, [pc, #64]	; (8019a10 <prvCheckForValidListAndQueue+0x68>)
 80199d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80199d2:	2300      	movs	r3, #0
 80199d4:	9300      	str	r3, [sp, #0]
 80199d6:	4b11      	ldr	r3, [pc, #68]	; (8019a1c <prvCheckForValidListAndQueue+0x74>)
 80199d8:	4a11      	ldr	r2, [pc, #68]	; (8019a20 <prvCheckForValidListAndQueue+0x78>)
 80199da:	2110      	movs	r1, #16
 80199dc:	200a      	movs	r0, #10
 80199de:	f7fe f887 	bl	8017af0 <xQueueGenericCreateStatic>
 80199e2:	4603      	mov	r3, r0
 80199e4:	4a08      	ldr	r2, [pc, #32]	; (8019a08 <prvCheckForValidListAndQueue+0x60>)
 80199e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80199e8:	4b07      	ldr	r3, [pc, #28]	; (8019a08 <prvCheckForValidListAndQueue+0x60>)
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d005      	beq.n	80199fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80199f0:	4b05      	ldr	r3, [pc, #20]	; (8019a08 <prvCheckForValidListAndQueue+0x60>)
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	490b      	ldr	r1, [pc, #44]	; (8019a24 <prvCheckForValidListAndQueue+0x7c>)
 80199f6:	4618      	mov	r0, r3
 80199f8:	f7fe fca0 	bl	801833c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80199fc:	f000 f992 	bl	8019d24 <vPortExitCritical>
}
 8019a00:	bf00      	nop
 8019a02:	46bd      	mov	sp, r7
 8019a04:	bd80      	pop	{r7, pc}
 8019a06:	bf00      	nop
 8019a08:	24002c48 	.word	0x24002c48
 8019a0c:	24002c18 	.word	0x24002c18
 8019a10:	24002c2c 	.word	0x24002c2c
 8019a14:	24002c40 	.word	0x24002c40
 8019a18:	24002c44 	.word	0x24002c44
 8019a1c:	24002cf4 	.word	0x24002cf4
 8019a20:	24002c54 	.word	0x24002c54
 8019a24:	0801afd0 	.word	0x0801afd0

08019a28 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019a28:	b580      	push	{r7, lr}
 8019a2a:	b08a      	sub	sp, #40	; 0x28
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	60f8      	str	r0, [r7, #12]
 8019a30:	60b9      	str	r1, [r7, #8]
 8019a32:	607a      	str	r2, [r7, #4]
 8019a34:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019a36:	f06f 0301 	mvn.w	r3, #1
 8019a3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019a40:	68bb      	ldr	r3, [r7, #8]
 8019a42:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019a48:	4b06      	ldr	r3, [pc, #24]	; (8019a64 <xTimerPendFunctionCallFromISR+0x3c>)
 8019a4a:	6818      	ldr	r0, [r3, #0]
 8019a4c:	f107 0114 	add.w	r1, r7, #20
 8019a50:	2300      	movs	r3, #0
 8019a52:	683a      	ldr	r2, [r7, #0]
 8019a54:	f7fe f9e6 	bl	8017e24 <xQueueGenericSendFromISR>
 8019a58:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8019a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019a5c:	4618      	mov	r0, r3
 8019a5e:	3728      	adds	r7, #40	; 0x28
 8019a60:	46bd      	mov	sp, r7
 8019a62:	bd80      	pop	{r7, pc}
 8019a64:	24002c48 	.word	0x24002c48

08019a68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019a68:	b480      	push	{r7}
 8019a6a:	b085      	sub	sp, #20
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	60f8      	str	r0, [r7, #12]
 8019a70:	60b9      	str	r1, [r7, #8]
 8019a72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	3b04      	subs	r3, #4
 8019a78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	3b04      	subs	r3, #4
 8019a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	f023 0201 	bic.w	r2, r3, #1
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	3b04      	subs	r3, #4
 8019a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019a98:	4a0c      	ldr	r2, [pc, #48]	; (8019acc <pxPortInitialiseStack+0x64>)
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	3b14      	subs	r3, #20
 8019aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	3b04      	subs	r3, #4
 8019aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	f06f 0202 	mvn.w	r2, #2
 8019ab6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	3b20      	subs	r3, #32
 8019abc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019abe:	68fb      	ldr	r3, [r7, #12]
}
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	3714      	adds	r7, #20
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aca:	4770      	bx	lr
 8019acc:	08019ad1 	.word	0x08019ad1

08019ad0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019ad0:	b480      	push	{r7}
 8019ad2:	b085      	sub	sp, #20
 8019ad4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019ada:	4b12      	ldr	r3, [pc, #72]	; (8019b24 <prvTaskExitError+0x54>)
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019ae2:	d00a      	beq.n	8019afa <prvTaskExitError+0x2a>
	__asm volatile
 8019ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ae8:	f383 8811 	msr	BASEPRI, r3
 8019aec:	f3bf 8f6f 	isb	sy
 8019af0:	f3bf 8f4f 	dsb	sy
 8019af4:	60fb      	str	r3, [r7, #12]
}
 8019af6:	bf00      	nop
 8019af8:	e7fe      	b.n	8019af8 <prvTaskExitError+0x28>
	__asm volatile
 8019afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019afe:	f383 8811 	msr	BASEPRI, r3
 8019b02:	f3bf 8f6f 	isb	sy
 8019b06:	f3bf 8f4f 	dsb	sy
 8019b0a:	60bb      	str	r3, [r7, #8]
}
 8019b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019b0e:	bf00      	nop
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d0fc      	beq.n	8019b10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019b16:	bf00      	nop
 8019b18:	bf00      	nop
 8019b1a:	3714      	adds	r7, #20
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b22:	4770      	bx	lr
 8019b24:	240000d0 	.word	0x240000d0
	...

08019b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019b30:	4b07      	ldr	r3, [pc, #28]	; (8019b50 <pxCurrentTCBConst2>)
 8019b32:	6819      	ldr	r1, [r3, #0]
 8019b34:	6808      	ldr	r0, [r1, #0]
 8019b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b3a:	f380 8809 	msr	PSP, r0
 8019b3e:	f3bf 8f6f 	isb	sy
 8019b42:	f04f 0000 	mov.w	r0, #0
 8019b46:	f380 8811 	msr	BASEPRI, r0
 8019b4a:	4770      	bx	lr
 8019b4c:	f3af 8000 	nop.w

08019b50 <pxCurrentTCBConst2>:
 8019b50:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019b54:	bf00      	nop
 8019b56:	bf00      	nop

08019b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019b58:	4808      	ldr	r0, [pc, #32]	; (8019b7c <prvPortStartFirstTask+0x24>)
 8019b5a:	6800      	ldr	r0, [r0, #0]
 8019b5c:	6800      	ldr	r0, [r0, #0]
 8019b5e:	f380 8808 	msr	MSP, r0
 8019b62:	f04f 0000 	mov.w	r0, #0
 8019b66:	f380 8814 	msr	CONTROL, r0
 8019b6a:	b662      	cpsie	i
 8019b6c:	b661      	cpsie	f
 8019b6e:	f3bf 8f4f 	dsb	sy
 8019b72:	f3bf 8f6f 	isb	sy
 8019b76:	df00      	svc	0
 8019b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019b7a:	bf00      	nop
 8019b7c:	e000ed08 	.word	0xe000ed08

08019b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b086      	sub	sp, #24
 8019b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019b86:	4b46      	ldr	r3, [pc, #280]	; (8019ca0 <xPortStartScheduler+0x120>)
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	4a46      	ldr	r2, [pc, #280]	; (8019ca4 <xPortStartScheduler+0x124>)
 8019b8c:	4293      	cmp	r3, r2
 8019b8e:	d10a      	bne.n	8019ba6 <xPortStartScheduler+0x26>
	__asm volatile
 8019b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b94:	f383 8811 	msr	BASEPRI, r3
 8019b98:	f3bf 8f6f 	isb	sy
 8019b9c:	f3bf 8f4f 	dsb	sy
 8019ba0:	613b      	str	r3, [r7, #16]
}
 8019ba2:	bf00      	nop
 8019ba4:	e7fe      	b.n	8019ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019ba6:	4b3e      	ldr	r3, [pc, #248]	; (8019ca0 <xPortStartScheduler+0x120>)
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	4a3f      	ldr	r2, [pc, #252]	; (8019ca8 <xPortStartScheduler+0x128>)
 8019bac:	4293      	cmp	r3, r2
 8019bae:	d10a      	bne.n	8019bc6 <xPortStartScheduler+0x46>
	__asm volatile
 8019bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bb4:	f383 8811 	msr	BASEPRI, r3
 8019bb8:	f3bf 8f6f 	isb	sy
 8019bbc:	f3bf 8f4f 	dsb	sy
 8019bc0:	60fb      	str	r3, [r7, #12]
}
 8019bc2:	bf00      	nop
 8019bc4:	e7fe      	b.n	8019bc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019bc6:	4b39      	ldr	r3, [pc, #228]	; (8019cac <xPortStartScheduler+0x12c>)
 8019bc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019bca:	697b      	ldr	r3, [r7, #20]
 8019bcc:	781b      	ldrb	r3, [r3, #0]
 8019bce:	b2db      	uxtb	r3, r3
 8019bd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019bd2:	697b      	ldr	r3, [r7, #20]
 8019bd4:	22ff      	movs	r2, #255	; 0xff
 8019bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019bd8:	697b      	ldr	r3, [r7, #20]
 8019bda:	781b      	ldrb	r3, [r3, #0]
 8019bdc:	b2db      	uxtb	r3, r3
 8019bde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019be0:	78fb      	ldrb	r3, [r7, #3]
 8019be2:	b2db      	uxtb	r3, r3
 8019be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019be8:	b2da      	uxtb	r2, r3
 8019bea:	4b31      	ldr	r3, [pc, #196]	; (8019cb0 <xPortStartScheduler+0x130>)
 8019bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019bee:	4b31      	ldr	r3, [pc, #196]	; (8019cb4 <xPortStartScheduler+0x134>)
 8019bf0:	2207      	movs	r2, #7
 8019bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019bf4:	e009      	b.n	8019c0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019bf6:	4b2f      	ldr	r3, [pc, #188]	; (8019cb4 <xPortStartScheduler+0x134>)
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	3b01      	subs	r3, #1
 8019bfc:	4a2d      	ldr	r2, [pc, #180]	; (8019cb4 <xPortStartScheduler+0x134>)
 8019bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019c00:	78fb      	ldrb	r3, [r7, #3]
 8019c02:	b2db      	uxtb	r3, r3
 8019c04:	005b      	lsls	r3, r3, #1
 8019c06:	b2db      	uxtb	r3, r3
 8019c08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019c0a:	78fb      	ldrb	r3, [r7, #3]
 8019c0c:	b2db      	uxtb	r3, r3
 8019c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019c12:	2b80      	cmp	r3, #128	; 0x80
 8019c14:	d0ef      	beq.n	8019bf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019c16:	4b27      	ldr	r3, [pc, #156]	; (8019cb4 <xPortStartScheduler+0x134>)
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	f1c3 0307 	rsb	r3, r3, #7
 8019c1e:	2b04      	cmp	r3, #4
 8019c20:	d00a      	beq.n	8019c38 <xPortStartScheduler+0xb8>
	__asm volatile
 8019c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c26:	f383 8811 	msr	BASEPRI, r3
 8019c2a:	f3bf 8f6f 	isb	sy
 8019c2e:	f3bf 8f4f 	dsb	sy
 8019c32:	60bb      	str	r3, [r7, #8]
}
 8019c34:	bf00      	nop
 8019c36:	e7fe      	b.n	8019c36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019c38:	4b1e      	ldr	r3, [pc, #120]	; (8019cb4 <xPortStartScheduler+0x134>)
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	021b      	lsls	r3, r3, #8
 8019c3e:	4a1d      	ldr	r2, [pc, #116]	; (8019cb4 <xPortStartScheduler+0x134>)
 8019c40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019c42:	4b1c      	ldr	r3, [pc, #112]	; (8019cb4 <xPortStartScheduler+0x134>)
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8019c4a:	4a1a      	ldr	r2, [pc, #104]	; (8019cb4 <xPortStartScheduler+0x134>)
 8019c4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	b2da      	uxtb	r2, r3
 8019c52:	697b      	ldr	r3, [r7, #20]
 8019c54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019c56:	4b18      	ldr	r3, [pc, #96]	; (8019cb8 <xPortStartScheduler+0x138>)
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	4a17      	ldr	r2, [pc, #92]	; (8019cb8 <xPortStartScheduler+0x138>)
 8019c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019c62:	4b15      	ldr	r3, [pc, #84]	; (8019cb8 <xPortStartScheduler+0x138>)
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	4a14      	ldr	r2, [pc, #80]	; (8019cb8 <xPortStartScheduler+0x138>)
 8019c68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8019c6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019c6e:	f000 f8dd 	bl	8019e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019c72:	4b12      	ldr	r3, [pc, #72]	; (8019cbc <xPortStartScheduler+0x13c>)
 8019c74:	2200      	movs	r2, #0
 8019c76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019c78:	f000 f8fc 	bl	8019e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019c7c:	4b10      	ldr	r3, [pc, #64]	; (8019cc0 <xPortStartScheduler+0x140>)
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	4a0f      	ldr	r2, [pc, #60]	; (8019cc0 <xPortStartScheduler+0x140>)
 8019c82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019c86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019c88:	f7ff ff66 	bl	8019b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019c8c:	f7fe ff6e 	bl	8018b6c <vTaskSwitchContext>
	prvTaskExitError();
 8019c90:	f7ff ff1e 	bl	8019ad0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019c94:	2300      	movs	r3, #0
}
 8019c96:	4618      	mov	r0, r3
 8019c98:	3718      	adds	r7, #24
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}
 8019c9e:	bf00      	nop
 8019ca0:	e000ed00 	.word	0xe000ed00
 8019ca4:	410fc271 	.word	0x410fc271
 8019ca8:	410fc270 	.word	0x410fc270
 8019cac:	e000e400 	.word	0xe000e400
 8019cb0:	24002d44 	.word	0x24002d44
 8019cb4:	24002d48 	.word	0x24002d48
 8019cb8:	e000ed20 	.word	0xe000ed20
 8019cbc:	240000d0 	.word	0x240000d0
 8019cc0:	e000ef34 	.word	0xe000ef34

08019cc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019cc4:	b480      	push	{r7}
 8019cc6:	b083      	sub	sp, #12
 8019cc8:	af00      	add	r7, sp, #0
	__asm volatile
 8019cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cce:	f383 8811 	msr	BASEPRI, r3
 8019cd2:	f3bf 8f6f 	isb	sy
 8019cd6:	f3bf 8f4f 	dsb	sy
 8019cda:	607b      	str	r3, [r7, #4]
}
 8019cdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019cde:	4b0f      	ldr	r3, [pc, #60]	; (8019d1c <vPortEnterCritical+0x58>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	3301      	adds	r3, #1
 8019ce4:	4a0d      	ldr	r2, [pc, #52]	; (8019d1c <vPortEnterCritical+0x58>)
 8019ce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019ce8:	4b0c      	ldr	r3, [pc, #48]	; (8019d1c <vPortEnterCritical+0x58>)
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	2b01      	cmp	r3, #1
 8019cee:	d10f      	bne.n	8019d10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019cf0:	4b0b      	ldr	r3, [pc, #44]	; (8019d20 <vPortEnterCritical+0x5c>)
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	b2db      	uxtb	r3, r3
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d00a      	beq.n	8019d10 <vPortEnterCritical+0x4c>
	__asm volatile
 8019cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cfe:	f383 8811 	msr	BASEPRI, r3
 8019d02:	f3bf 8f6f 	isb	sy
 8019d06:	f3bf 8f4f 	dsb	sy
 8019d0a:	603b      	str	r3, [r7, #0]
}
 8019d0c:	bf00      	nop
 8019d0e:	e7fe      	b.n	8019d0e <vPortEnterCritical+0x4a>
	}
}
 8019d10:	bf00      	nop
 8019d12:	370c      	adds	r7, #12
 8019d14:	46bd      	mov	sp, r7
 8019d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d1a:	4770      	bx	lr
 8019d1c:	240000d0 	.word	0x240000d0
 8019d20:	e000ed04 	.word	0xe000ed04

08019d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019d24:	b480      	push	{r7}
 8019d26:	b083      	sub	sp, #12
 8019d28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019d2a:	4b12      	ldr	r3, [pc, #72]	; (8019d74 <vPortExitCritical+0x50>)
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d10a      	bne.n	8019d48 <vPortExitCritical+0x24>
	__asm volatile
 8019d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d36:	f383 8811 	msr	BASEPRI, r3
 8019d3a:	f3bf 8f6f 	isb	sy
 8019d3e:	f3bf 8f4f 	dsb	sy
 8019d42:	607b      	str	r3, [r7, #4]
}
 8019d44:	bf00      	nop
 8019d46:	e7fe      	b.n	8019d46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019d48:	4b0a      	ldr	r3, [pc, #40]	; (8019d74 <vPortExitCritical+0x50>)
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	3b01      	subs	r3, #1
 8019d4e:	4a09      	ldr	r2, [pc, #36]	; (8019d74 <vPortExitCritical+0x50>)
 8019d50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019d52:	4b08      	ldr	r3, [pc, #32]	; (8019d74 <vPortExitCritical+0x50>)
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d105      	bne.n	8019d66 <vPortExitCritical+0x42>
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019d5e:	683b      	ldr	r3, [r7, #0]
 8019d60:	f383 8811 	msr	BASEPRI, r3
}
 8019d64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019d66:	bf00      	nop
 8019d68:	370c      	adds	r7, #12
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d70:	4770      	bx	lr
 8019d72:	bf00      	nop
 8019d74:	240000d0 	.word	0x240000d0
	...

08019d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019d80:	f3ef 8009 	mrs	r0, PSP
 8019d84:	f3bf 8f6f 	isb	sy
 8019d88:	4b15      	ldr	r3, [pc, #84]	; (8019de0 <pxCurrentTCBConst>)
 8019d8a:	681a      	ldr	r2, [r3, #0]
 8019d8c:	f01e 0f10 	tst.w	lr, #16
 8019d90:	bf08      	it	eq
 8019d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d9a:	6010      	str	r0, [r2, #0]
 8019d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019da4:	f380 8811 	msr	BASEPRI, r0
 8019da8:	f3bf 8f4f 	dsb	sy
 8019dac:	f3bf 8f6f 	isb	sy
 8019db0:	f7fe fedc 	bl	8018b6c <vTaskSwitchContext>
 8019db4:	f04f 0000 	mov.w	r0, #0
 8019db8:	f380 8811 	msr	BASEPRI, r0
 8019dbc:	bc09      	pop	{r0, r3}
 8019dbe:	6819      	ldr	r1, [r3, #0]
 8019dc0:	6808      	ldr	r0, [r1, #0]
 8019dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dc6:	f01e 0f10 	tst.w	lr, #16
 8019dca:	bf08      	it	eq
 8019dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019dd0:	f380 8809 	msr	PSP, r0
 8019dd4:	f3bf 8f6f 	isb	sy
 8019dd8:	4770      	bx	lr
 8019dda:	bf00      	nop
 8019ddc:	f3af 8000 	nop.w

08019de0 <pxCurrentTCBConst>:
 8019de0:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019de4:	bf00      	nop
 8019de6:	bf00      	nop

08019de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b082      	sub	sp, #8
 8019dec:	af00      	add	r7, sp, #0
	__asm volatile
 8019dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019df2:	f383 8811 	msr	BASEPRI, r3
 8019df6:	f3bf 8f6f 	isb	sy
 8019dfa:	f3bf 8f4f 	dsb	sy
 8019dfe:	607b      	str	r3, [r7, #4]
}
 8019e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019e02:	f7fe fdf1 	bl	80189e8 <xTaskIncrementTick>
 8019e06:	4603      	mov	r3, r0
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d003      	beq.n	8019e14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019e0c:	4b06      	ldr	r3, [pc, #24]	; (8019e28 <xPortSysTickHandler+0x40>)
 8019e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e12:	601a      	str	r2, [r3, #0]
 8019e14:	2300      	movs	r3, #0
 8019e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019e18:	683b      	ldr	r3, [r7, #0]
 8019e1a:	f383 8811 	msr	BASEPRI, r3
}
 8019e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019e20:	bf00      	nop
 8019e22:	3708      	adds	r7, #8
 8019e24:	46bd      	mov	sp, r7
 8019e26:	bd80      	pop	{r7, pc}
 8019e28:	e000ed04 	.word	0xe000ed04

08019e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019e2c:	b480      	push	{r7}
 8019e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019e30:	4b0b      	ldr	r3, [pc, #44]	; (8019e60 <vPortSetupTimerInterrupt+0x34>)
 8019e32:	2200      	movs	r2, #0
 8019e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019e36:	4b0b      	ldr	r3, [pc, #44]	; (8019e64 <vPortSetupTimerInterrupt+0x38>)
 8019e38:	2200      	movs	r2, #0
 8019e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019e3c:	4b0a      	ldr	r3, [pc, #40]	; (8019e68 <vPortSetupTimerInterrupt+0x3c>)
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	4a0a      	ldr	r2, [pc, #40]	; (8019e6c <vPortSetupTimerInterrupt+0x40>)
 8019e42:	fba2 2303 	umull	r2, r3, r2, r3
 8019e46:	099b      	lsrs	r3, r3, #6
 8019e48:	4a09      	ldr	r2, [pc, #36]	; (8019e70 <vPortSetupTimerInterrupt+0x44>)
 8019e4a:	3b01      	subs	r3, #1
 8019e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019e4e:	4b04      	ldr	r3, [pc, #16]	; (8019e60 <vPortSetupTimerInterrupt+0x34>)
 8019e50:	2207      	movs	r2, #7
 8019e52:	601a      	str	r2, [r3, #0]
}
 8019e54:	bf00      	nop
 8019e56:	46bd      	mov	sp, r7
 8019e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e5c:	4770      	bx	lr
 8019e5e:	bf00      	nop
 8019e60:	e000e010 	.word	0xe000e010
 8019e64:	e000e018 	.word	0xe000e018
 8019e68:	240000c0 	.word	0x240000c0
 8019e6c:	10624dd3 	.word	0x10624dd3
 8019e70:	e000e014 	.word	0xe000e014

08019e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019e74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019e84 <vPortEnableVFP+0x10>
 8019e78:	6801      	ldr	r1, [r0, #0]
 8019e7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019e7e:	6001      	str	r1, [r0, #0]
 8019e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019e82:	bf00      	nop
 8019e84:	e000ed88 	.word	0xe000ed88

08019e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019e88:	b480      	push	{r7}
 8019e8a:	b085      	sub	sp, #20
 8019e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019e8e:	f3ef 8305 	mrs	r3, IPSR
 8019e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	2b0f      	cmp	r3, #15
 8019e98:	d914      	bls.n	8019ec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019e9a:	4a17      	ldr	r2, [pc, #92]	; (8019ef8 <vPortValidateInterruptPriority+0x70>)
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	4413      	add	r3, r2
 8019ea0:	781b      	ldrb	r3, [r3, #0]
 8019ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019ea4:	4b15      	ldr	r3, [pc, #84]	; (8019efc <vPortValidateInterruptPriority+0x74>)
 8019ea6:	781b      	ldrb	r3, [r3, #0]
 8019ea8:	7afa      	ldrb	r2, [r7, #11]
 8019eaa:	429a      	cmp	r2, r3
 8019eac:	d20a      	bcs.n	8019ec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019eb2:	f383 8811 	msr	BASEPRI, r3
 8019eb6:	f3bf 8f6f 	isb	sy
 8019eba:	f3bf 8f4f 	dsb	sy
 8019ebe:	607b      	str	r3, [r7, #4]
}
 8019ec0:	bf00      	nop
 8019ec2:	e7fe      	b.n	8019ec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019ec4:	4b0e      	ldr	r3, [pc, #56]	; (8019f00 <vPortValidateInterruptPriority+0x78>)
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019ecc:	4b0d      	ldr	r3, [pc, #52]	; (8019f04 <vPortValidateInterruptPriority+0x7c>)
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	429a      	cmp	r2, r3
 8019ed2:	d90a      	bls.n	8019eea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ed8:	f383 8811 	msr	BASEPRI, r3
 8019edc:	f3bf 8f6f 	isb	sy
 8019ee0:	f3bf 8f4f 	dsb	sy
 8019ee4:	603b      	str	r3, [r7, #0]
}
 8019ee6:	bf00      	nop
 8019ee8:	e7fe      	b.n	8019ee8 <vPortValidateInterruptPriority+0x60>
	}
 8019eea:	bf00      	nop
 8019eec:	3714      	adds	r7, #20
 8019eee:	46bd      	mov	sp, r7
 8019ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef4:	4770      	bx	lr
 8019ef6:	bf00      	nop
 8019ef8:	e000e3f0 	.word	0xe000e3f0
 8019efc:	24002d44 	.word	0x24002d44
 8019f00:	e000ed0c 	.word	0xe000ed0c
 8019f04:	24002d48 	.word	0x24002d48

08019f08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b08a      	sub	sp, #40	; 0x28
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019f10:	2300      	movs	r3, #0
 8019f12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019f14:	f7fe fcac 	bl	8018870 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019f18:	4b5b      	ldr	r3, [pc, #364]	; (801a088 <pvPortMalloc+0x180>)
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d101      	bne.n	8019f24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019f20:	f000 f920 	bl	801a164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019f24:	4b59      	ldr	r3, [pc, #356]	; (801a08c <pvPortMalloc+0x184>)
 8019f26:	681a      	ldr	r2, [r3, #0]
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	4013      	ands	r3, r2
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	f040 8093 	bne.w	801a058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d01d      	beq.n	8019f74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019f38:	2208      	movs	r2, #8
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	4413      	add	r3, r2
 8019f3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	f003 0307 	and.w	r3, r3, #7
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d014      	beq.n	8019f74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	f023 0307 	bic.w	r3, r3, #7
 8019f50:	3308      	adds	r3, #8
 8019f52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	f003 0307 	and.w	r3, r3, #7
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d00a      	beq.n	8019f74 <pvPortMalloc+0x6c>
	__asm volatile
 8019f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f62:	f383 8811 	msr	BASEPRI, r3
 8019f66:	f3bf 8f6f 	isb	sy
 8019f6a:	f3bf 8f4f 	dsb	sy
 8019f6e:	617b      	str	r3, [r7, #20]
}
 8019f70:	bf00      	nop
 8019f72:	e7fe      	b.n	8019f72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d06e      	beq.n	801a058 <pvPortMalloc+0x150>
 8019f7a:	4b45      	ldr	r3, [pc, #276]	; (801a090 <pvPortMalloc+0x188>)
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	687a      	ldr	r2, [r7, #4]
 8019f80:	429a      	cmp	r2, r3
 8019f82:	d869      	bhi.n	801a058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019f84:	4b43      	ldr	r3, [pc, #268]	; (801a094 <pvPortMalloc+0x18c>)
 8019f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019f88:	4b42      	ldr	r3, [pc, #264]	; (801a094 <pvPortMalloc+0x18c>)
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019f8e:	e004      	b.n	8019f9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f9c:	685b      	ldr	r3, [r3, #4]
 8019f9e:	687a      	ldr	r2, [r7, #4]
 8019fa0:	429a      	cmp	r2, r3
 8019fa2:	d903      	bls.n	8019fac <pvPortMalloc+0xa4>
 8019fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d1f1      	bne.n	8019f90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019fac:	4b36      	ldr	r3, [pc, #216]	; (801a088 <pvPortMalloc+0x180>)
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fb2:	429a      	cmp	r2, r3
 8019fb4:	d050      	beq.n	801a058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019fb6:	6a3b      	ldr	r3, [r7, #32]
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	2208      	movs	r2, #8
 8019fbc:	4413      	add	r3, r2
 8019fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fc2:	681a      	ldr	r2, [r3, #0]
 8019fc4:	6a3b      	ldr	r3, [r7, #32]
 8019fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fca:	685a      	ldr	r2, [r3, #4]
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	1ad2      	subs	r2, r2, r3
 8019fd0:	2308      	movs	r3, #8
 8019fd2:	005b      	lsls	r3, r3, #1
 8019fd4:	429a      	cmp	r2, r3
 8019fd6:	d91f      	bls.n	801a018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	4413      	add	r3, r2
 8019fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019fe0:	69bb      	ldr	r3, [r7, #24]
 8019fe2:	f003 0307 	and.w	r3, r3, #7
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d00a      	beq.n	801a000 <pvPortMalloc+0xf8>
	__asm volatile
 8019fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fee:	f383 8811 	msr	BASEPRI, r3
 8019ff2:	f3bf 8f6f 	isb	sy
 8019ff6:	f3bf 8f4f 	dsb	sy
 8019ffa:	613b      	str	r3, [r7, #16]
}
 8019ffc:	bf00      	nop
 8019ffe:	e7fe      	b.n	8019ffe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a002:	685a      	ldr	r2, [r3, #4]
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	1ad2      	subs	r2, r2, r3
 801a008:	69bb      	ldr	r3, [r7, #24]
 801a00a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a00e:	687a      	ldr	r2, [r7, #4]
 801a010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a012:	69b8      	ldr	r0, [r7, #24]
 801a014:	f000 f908 	bl	801a228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a018:	4b1d      	ldr	r3, [pc, #116]	; (801a090 <pvPortMalloc+0x188>)
 801a01a:	681a      	ldr	r2, [r3, #0]
 801a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a01e:	685b      	ldr	r3, [r3, #4]
 801a020:	1ad3      	subs	r3, r2, r3
 801a022:	4a1b      	ldr	r2, [pc, #108]	; (801a090 <pvPortMalloc+0x188>)
 801a024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a026:	4b1a      	ldr	r3, [pc, #104]	; (801a090 <pvPortMalloc+0x188>)
 801a028:	681a      	ldr	r2, [r3, #0]
 801a02a:	4b1b      	ldr	r3, [pc, #108]	; (801a098 <pvPortMalloc+0x190>)
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	429a      	cmp	r2, r3
 801a030:	d203      	bcs.n	801a03a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a032:	4b17      	ldr	r3, [pc, #92]	; (801a090 <pvPortMalloc+0x188>)
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	4a18      	ldr	r2, [pc, #96]	; (801a098 <pvPortMalloc+0x190>)
 801a038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a03c:	685a      	ldr	r2, [r3, #4]
 801a03e:	4b13      	ldr	r3, [pc, #76]	; (801a08c <pvPortMalloc+0x184>)
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	431a      	orrs	r2, r3
 801a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a04a:	2200      	movs	r2, #0
 801a04c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a04e:	4b13      	ldr	r3, [pc, #76]	; (801a09c <pvPortMalloc+0x194>)
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	3301      	adds	r3, #1
 801a054:	4a11      	ldr	r2, [pc, #68]	; (801a09c <pvPortMalloc+0x194>)
 801a056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a058:	f7fe fc18 	bl	801888c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a05c:	69fb      	ldr	r3, [r7, #28]
 801a05e:	f003 0307 	and.w	r3, r3, #7
 801a062:	2b00      	cmp	r3, #0
 801a064:	d00a      	beq.n	801a07c <pvPortMalloc+0x174>
	__asm volatile
 801a066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a06a:	f383 8811 	msr	BASEPRI, r3
 801a06e:	f3bf 8f6f 	isb	sy
 801a072:	f3bf 8f4f 	dsb	sy
 801a076:	60fb      	str	r3, [r7, #12]
}
 801a078:	bf00      	nop
 801a07a:	e7fe      	b.n	801a07a <pvPortMalloc+0x172>
	return pvReturn;
 801a07c:	69fb      	ldr	r3, [r7, #28]
}
 801a07e:	4618      	mov	r0, r3
 801a080:	3728      	adds	r7, #40	; 0x28
 801a082:	46bd      	mov	sp, r7
 801a084:	bd80      	pop	{r7, pc}
 801a086:	bf00      	nop
 801a088:	24006954 	.word	0x24006954
 801a08c:	24006968 	.word	0x24006968
 801a090:	24006958 	.word	0x24006958
 801a094:	2400694c 	.word	0x2400694c
 801a098:	2400695c 	.word	0x2400695c
 801a09c:	24006960 	.word	0x24006960

0801a0a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b086      	sub	sp, #24
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d04d      	beq.n	801a14e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a0b2:	2308      	movs	r3, #8
 801a0b4:	425b      	negs	r3, r3
 801a0b6:	697a      	ldr	r2, [r7, #20]
 801a0b8:	4413      	add	r3, r2
 801a0ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a0bc:	697b      	ldr	r3, [r7, #20]
 801a0be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a0c0:	693b      	ldr	r3, [r7, #16]
 801a0c2:	685a      	ldr	r2, [r3, #4]
 801a0c4:	4b24      	ldr	r3, [pc, #144]	; (801a158 <vPortFree+0xb8>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	4013      	ands	r3, r2
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d10a      	bne.n	801a0e4 <vPortFree+0x44>
	__asm volatile
 801a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0d2:	f383 8811 	msr	BASEPRI, r3
 801a0d6:	f3bf 8f6f 	isb	sy
 801a0da:	f3bf 8f4f 	dsb	sy
 801a0de:	60fb      	str	r3, [r7, #12]
}
 801a0e0:	bf00      	nop
 801a0e2:	e7fe      	b.n	801a0e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a0e4:	693b      	ldr	r3, [r7, #16]
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d00a      	beq.n	801a102 <vPortFree+0x62>
	__asm volatile
 801a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0f0:	f383 8811 	msr	BASEPRI, r3
 801a0f4:	f3bf 8f6f 	isb	sy
 801a0f8:	f3bf 8f4f 	dsb	sy
 801a0fc:	60bb      	str	r3, [r7, #8]
}
 801a0fe:	bf00      	nop
 801a100:	e7fe      	b.n	801a100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a102:	693b      	ldr	r3, [r7, #16]
 801a104:	685a      	ldr	r2, [r3, #4]
 801a106:	4b14      	ldr	r3, [pc, #80]	; (801a158 <vPortFree+0xb8>)
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	4013      	ands	r3, r2
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d01e      	beq.n	801a14e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a110:	693b      	ldr	r3, [r7, #16]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d11a      	bne.n	801a14e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a118:	693b      	ldr	r3, [r7, #16]
 801a11a:	685a      	ldr	r2, [r3, #4]
 801a11c:	4b0e      	ldr	r3, [pc, #56]	; (801a158 <vPortFree+0xb8>)
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	43db      	mvns	r3, r3
 801a122:	401a      	ands	r2, r3
 801a124:	693b      	ldr	r3, [r7, #16]
 801a126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a128:	f7fe fba2 	bl	8018870 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a12c:	693b      	ldr	r3, [r7, #16]
 801a12e:	685a      	ldr	r2, [r3, #4]
 801a130:	4b0a      	ldr	r3, [pc, #40]	; (801a15c <vPortFree+0xbc>)
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	4413      	add	r3, r2
 801a136:	4a09      	ldr	r2, [pc, #36]	; (801a15c <vPortFree+0xbc>)
 801a138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a13a:	6938      	ldr	r0, [r7, #16]
 801a13c:	f000 f874 	bl	801a228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a140:	4b07      	ldr	r3, [pc, #28]	; (801a160 <vPortFree+0xc0>)
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	3301      	adds	r3, #1
 801a146:	4a06      	ldr	r2, [pc, #24]	; (801a160 <vPortFree+0xc0>)
 801a148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a14a:	f7fe fb9f 	bl	801888c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a14e:	bf00      	nop
 801a150:	3718      	adds	r7, #24
 801a152:	46bd      	mov	sp, r7
 801a154:	bd80      	pop	{r7, pc}
 801a156:	bf00      	nop
 801a158:	24006968 	.word	0x24006968
 801a15c:	24006958 	.word	0x24006958
 801a160:	24006964 	.word	0x24006964

0801a164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a164:	b480      	push	{r7}
 801a166:	b085      	sub	sp, #20
 801a168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a16a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a16e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a170:	4b27      	ldr	r3, [pc, #156]	; (801a210 <prvHeapInit+0xac>)
 801a172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	f003 0307 	and.w	r3, r3, #7
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d00c      	beq.n	801a198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	3307      	adds	r3, #7
 801a182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	f023 0307 	bic.w	r3, r3, #7
 801a18a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a18c:	68ba      	ldr	r2, [r7, #8]
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	1ad3      	subs	r3, r2, r3
 801a192:	4a1f      	ldr	r2, [pc, #124]	; (801a210 <prvHeapInit+0xac>)
 801a194:	4413      	add	r3, r2
 801a196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a19c:	4a1d      	ldr	r2, [pc, #116]	; (801a214 <prvHeapInit+0xb0>)
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a1a2:	4b1c      	ldr	r3, [pc, #112]	; (801a214 <prvHeapInit+0xb0>)
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	68ba      	ldr	r2, [r7, #8]
 801a1ac:	4413      	add	r3, r2
 801a1ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a1b0:	2208      	movs	r2, #8
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	1a9b      	subs	r3, r3, r2
 801a1b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	f023 0307 	bic.w	r3, r3, #7
 801a1be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	4a15      	ldr	r2, [pc, #84]	; (801a218 <prvHeapInit+0xb4>)
 801a1c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a1c6:	4b14      	ldr	r3, [pc, #80]	; (801a218 <prvHeapInit+0xb4>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	2200      	movs	r2, #0
 801a1cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a1ce:	4b12      	ldr	r3, [pc, #72]	; (801a218 <prvHeapInit+0xb4>)
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	2200      	movs	r2, #0
 801a1d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a1da:	683b      	ldr	r3, [r7, #0]
 801a1dc:	68fa      	ldr	r2, [r7, #12]
 801a1de:	1ad2      	subs	r2, r2, r3
 801a1e0:	683b      	ldr	r3, [r7, #0]
 801a1e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a1e4:	4b0c      	ldr	r3, [pc, #48]	; (801a218 <prvHeapInit+0xb4>)
 801a1e6:	681a      	ldr	r2, [r3, #0]
 801a1e8:	683b      	ldr	r3, [r7, #0]
 801a1ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a1ec:	683b      	ldr	r3, [r7, #0]
 801a1ee:	685b      	ldr	r3, [r3, #4]
 801a1f0:	4a0a      	ldr	r2, [pc, #40]	; (801a21c <prvHeapInit+0xb8>)
 801a1f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	685b      	ldr	r3, [r3, #4]
 801a1f8:	4a09      	ldr	r2, [pc, #36]	; (801a220 <prvHeapInit+0xbc>)
 801a1fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a1fc:	4b09      	ldr	r3, [pc, #36]	; (801a224 <prvHeapInit+0xc0>)
 801a1fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a202:	601a      	str	r2, [r3, #0]
}
 801a204:	bf00      	nop
 801a206:	3714      	adds	r7, #20
 801a208:	46bd      	mov	sp, r7
 801a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a20e:	4770      	bx	lr
 801a210:	24002d4c 	.word	0x24002d4c
 801a214:	2400694c 	.word	0x2400694c
 801a218:	24006954 	.word	0x24006954
 801a21c:	2400695c 	.word	0x2400695c
 801a220:	24006958 	.word	0x24006958
 801a224:	24006968 	.word	0x24006968

0801a228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a228:	b480      	push	{r7}
 801a22a:	b085      	sub	sp, #20
 801a22c:	af00      	add	r7, sp, #0
 801a22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a230:	4b28      	ldr	r3, [pc, #160]	; (801a2d4 <prvInsertBlockIntoFreeList+0xac>)
 801a232:	60fb      	str	r3, [r7, #12]
 801a234:	e002      	b.n	801a23c <prvInsertBlockIntoFreeList+0x14>
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	60fb      	str	r3, [r7, #12]
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	687a      	ldr	r2, [r7, #4]
 801a242:	429a      	cmp	r2, r3
 801a244:	d8f7      	bhi.n	801a236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	685b      	ldr	r3, [r3, #4]
 801a24e:	68ba      	ldr	r2, [r7, #8]
 801a250:	4413      	add	r3, r2
 801a252:	687a      	ldr	r2, [r7, #4]
 801a254:	429a      	cmp	r2, r3
 801a256:	d108      	bne.n	801a26a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	685a      	ldr	r2, [r3, #4]
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	685b      	ldr	r3, [r3, #4]
 801a260:	441a      	add	r2, r3
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	685b      	ldr	r3, [r3, #4]
 801a272:	68ba      	ldr	r2, [r7, #8]
 801a274:	441a      	add	r2, r3
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	429a      	cmp	r2, r3
 801a27c:	d118      	bne.n	801a2b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	681a      	ldr	r2, [r3, #0]
 801a282:	4b15      	ldr	r3, [pc, #84]	; (801a2d8 <prvInsertBlockIntoFreeList+0xb0>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	429a      	cmp	r2, r3
 801a288:	d00d      	beq.n	801a2a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	685a      	ldr	r2, [r3, #4]
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	685b      	ldr	r3, [r3, #4]
 801a294:	441a      	add	r2, r3
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	681a      	ldr	r2, [r3, #0]
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	601a      	str	r2, [r3, #0]
 801a2a4:	e008      	b.n	801a2b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a2a6:	4b0c      	ldr	r3, [pc, #48]	; (801a2d8 <prvInsertBlockIntoFreeList+0xb0>)
 801a2a8:	681a      	ldr	r2, [r3, #0]
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	601a      	str	r2, [r3, #0]
 801a2ae:	e003      	b.n	801a2b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	681a      	ldr	r2, [r3, #0]
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a2b8:	68fa      	ldr	r2, [r7, #12]
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	429a      	cmp	r2, r3
 801a2be:	d002      	beq.n	801a2c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a2c0:	68fb      	ldr	r3, [r7, #12]
 801a2c2:	687a      	ldr	r2, [r7, #4]
 801a2c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a2c6:	bf00      	nop
 801a2c8:	3714      	adds	r7, #20
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d0:	4770      	bx	lr
 801a2d2:	bf00      	nop
 801a2d4:	2400694c 	.word	0x2400694c
 801a2d8:	24006954 	.word	0x24006954

0801a2dc <__errno>:
 801a2dc:	4b01      	ldr	r3, [pc, #4]	; (801a2e4 <__errno+0x8>)
 801a2de:	6818      	ldr	r0, [r3, #0]
 801a2e0:	4770      	bx	lr
 801a2e2:	bf00      	nop
 801a2e4:	240000d4 	.word	0x240000d4

0801a2e8 <__libc_init_array>:
 801a2e8:	b570      	push	{r4, r5, r6, lr}
 801a2ea:	4d0d      	ldr	r5, [pc, #52]	; (801a320 <__libc_init_array+0x38>)
 801a2ec:	4c0d      	ldr	r4, [pc, #52]	; (801a324 <__libc_init_array+0x3c>)
 801a2ee:	1b64      	subs	r4, r4, r5
 801a2f0:	10a4      	asrs	r4, r4, #2
 801a2f2:	2600      	movs	r6, #0
 801a2f4:	42a6      	cmp	r6, r4
 801a2f6:	d109      	bne.n	801a30c <__libc_init_array+0x24>
 801a2f8:	4d0b      	ldr	r5, [pc, #44]	; (801a328 <__libc_init_array+0x40>)
 801a2fa:	4c0c      	ldr	r4, [pc, #48]	; (801a32c <__libc_init_array+0x44>)
 801a2fc:	f000 fd2c 	bl	801ad58 <_init>
 801a300:	1b64      	subs	r4, r4, r5
 801a302:	10a4      	asrs	r4, r4, #2
 801a304:	2600      	movs	r6, #0
 801a306:	42a6      	cmp	r6, r4
 801a308:	d105      	bne.n	801a316 <__libc_init_array+0x2e>
 801a30a:	bd70      	pop	{r4, r5, r6, pc}
 801a30c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a310:	4798      	blx	r3
 801a312:	3601      	adds	r6, #1
 801a314:	e7ee      	b.n	801a2f4 <__libc_init_array+0xc>
 801a316:	f855 3b04 	ldr.w	r3, [r5], #4
 801a31a:	4798      	blx	r3
 801a31c:	3601      	adds	r6, #1
 801a31e:	e7f2      	b.n	801a306 <__libc_init_array+0x1e>
 801a320:	0801b210 	.word	0x0801b210
 801a324:	0801b210 	.word	0x0801b210
 801a328:	0801b210 	.word	0x0801b210
 801a32c:	0801b214 	.word	0x0801b214

0801a330 <memcpy>:
 801a330:	440a      	add	r2, r1
 801a332:	4291      	cmp	r1, r2
 801a334:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a338:	d100      	bne.n	801a33c <memcpy+0xc>
 801a33a:	4770      	bx	lr
 801a33c:	b510      	push	{r4, lr}
 801a33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a342:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a346:	4291      	cmp	r1, r2
 801a348:	d1f9      	bne.n	801a33e <memcpy+0xe>
 801a34a:	bd10      	pop	{r4, pc}

0801a34c <memset>:
 801a34c:	4402      	add	r2, r0
 801a34e:	4603      	mov	r3, r0
 801a350:	4293      	cmp	r3, r2
 801a352:	d100      	bne.n	801a356 <memset+0xa>
 801a354:	4770      	bx	lr
 801a356:	f803 1b01 	strb.w	r1, [r3], #1
 801a35a:	e7f9      	b.n	801a350 <memset+0x4>

0801a35c <_puts_r>:
 801a35c:	b570      	push	{r4, r5, r6, lr}
 801a35e:	460e      	mov	r6, r1
 801a360:	4605      	mov	r5, r0
 801a362:	b118      	cbz	r0, 801a36c <_puts_r+0x10>
 801a364:	6983      	ldr	r3, [r0, #24]
 801a366:	b90b      	cbnz	r3, 801a36c <_puts_r+0x10>
 801a368:	f000 fa48 	bl	801a7fc <__sinit>
 801a36c:	69ab      	ldr	r3, [r5, #24]
 801a36e:	68ac      	ldr	r4, [r5, #8]
 801a370:	b913      	cbnz	r3, 801a378 <_puts_r+0x1c>
 801a372:	4628      	mov	r0, r5
 801a374:	f000 fa42 	bl	801a7fc <__sinit>
 801a378:	4b2c      	ldr	r3, [pc, #176]	; (801a42c <_puts_r+0xd0>)
 801a37a:	429c      	cmp	r4, r3
 801a37c:	d120      	bne.n	801a3c0 <_puts_r+0x64>
 801a37e:	686c      	ldr	r4, [r5, #4]
 801a380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a382:	07db      	lsls	r3, r3, #31
 801a384:	d405      	bmi.n	801a392 <_puts_r+0x36>
 801a386:	89a3      	ldrh	r3, [r4, #12]
 801a388:	0598      	lsls	r0, r3, #22
 801a38a:	d402      	bmi.n	801a392 <_puts_r+0x36>
 801a38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a38e:	f000 fad3 	bl	801a938 <__retarget_lock_acquire_recursive>
 801a392:	89a3      	ldrh	r3, [r4, #12]
 801a394:	0719      	lsls	r1, r3, #28
 801a396:	d51d      	bpl.n	801a3d4 <_puts_r+0x78>
 801a398:	6923      	ldr	r3, [r4, #16]
 801a39a:	b1db      	cbz	r3, 801a3d4 <_puts_r+0x78>
 801a39c:	3e01      	subs	r6, #1
 801a39e:	68a3      	ldr	r3, [r4, #8]
 801a3a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a3a4:	3b01      	subs	r3, #1
 801a3a6:	60a3      	str	r3, [r4, #8]
 801a3a8:	bb39      	cbnz	r1, 801a3fa <_puts_r+0x9e>
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	da38      	bge.n	801a420 <_puts_r+0xc4>
 801a3ae:	4622      	mov	r2, r4
 801a3b0:	210a      	movs	r1, #10
 801a3b2:	4628      	mov	r0, r5
 801a3b4:	f000 f848 	bl	801a448 <__swbuf_r>
 801a3b8:	3001      	adds	r0, #1
 801a3ba:	d011      	beq.n	801a3e0 <_puts_r+0x84>
 801a3bc:	250a      	movs	r5, #10
 801a3be:	e011      	b.n	801a3e4 <_puts_r+0x88>
 801a3c0:	4b1b      	ldr	r3, [pc, #108]	; (801a430 <_puts_r+0xd4>)
 801a3c2:	429c      	cmp	r4, r3
 801a3c4:	d101      	bne.n	801a3ca <_puts_r+0x6e>
 801a3c6:	68ac      	ldr	r4, [r5, #8]
 801a3c8:	e7da      	b.n	801a380 <_puts_r+0x24>
 801a3ca:	4b1a      	ldr	r3, [pc, #104]	; (801a434 <_puts_r+0xd8>)
 801a3cc:	429c      	cmp	r4, r3
 801a3ce:	bf08      	it	eq
 801a3d0:	68ec      	ldreq	r4, [r5, #12]
 801a3d2:	e7d5      	b.n	801a380 <_puts_r+0x24>
 801a3d4:	4621      	mov	r1, r4
 801a3d6:	4628      	mov	r0, r5
 801a3d8:	f000 f888 	bl	801a4ec <__swsetup_r>
 801a3dc:	2800      	cmp	r0, #0
 801a3de:	d0dd      	beq.n	801a39c <_puts_r+0x40>
 801a3e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a3e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3e6:	07da      	lsls	r2, r3, #31
 801a3e8:	d405      	bmi.n	801a3f6 <_puts_r+0x9a>
 801a3ea:	89a3      	ldrh	r3, [r4, #12]
 801a3ec:	059b      	lsls	r3, r3, #22
 801a3ee:	d402      	bmi.n	801a3f6 <_puts_r+0x9a>
 801a3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3f2:	f000 faa2 	bl	801a93a <__retarget_lock_release_recursive>
 801a3f6:	4628      	mov	r0, r5
 801a3f8:	bd70      	pop	{r4, r5, r6, pc}
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	da04      	bge.n	801a408 <_puts_r+0xac>
 801a3fe:	69a2      	ldr	r2, [r4, #24]
 801a400:	429a      	cmp	r2, r3
 801a402:	dc06      	bgt.n	801a412 <_puts_r+0xb6>
 801a404:	290a      	cmp	r1, #10
 801a406:	d004      	beq.n	801a412 <_puts_r+0xb6>
 801a408:	6823      	ldr	r3, [r4, #0]
 801a40a:	1c5a      	adds	r2, r3, #1
 801a40c:	6022      	str	r2, [r4, #0]
 801a40e:	7019      	strb	r1, [r3, #0]
 801a410:	e7c5      	b.n	801a39e <_puts_r+0x42>
 801a412:	4622      	mov	r2, r4
 801a414:	4628      	mov	r0, r5
 801a416:	f000 f817 	bl	801a448 <__swbuf_r>
 801a41a:	3001      	adds	r0, #1
 801a41c:	d1bf      	bne.n	801a39e <_puts_r+0x42>
 801a41e:	e7df      	b.n	801a3e0 <_puts_r+0x84>
 801a420:	6823      	ldr	r3, [r4, #0]
 801a422:	250a      	movs	r5, #10
 801a424:	1c5a      	adds	r2, r3, #1
 801a426:	6022      	str	r2, [r4, #0]
 801a428:	701d      	strb	r5, [r3, #0]
 801a42a:	e7db      	b.n	801a3e4 <_puts_r+0x88>
 801a42c:	0801b1c8 	.word	0x0801b1c8
 801a430:	0801b1e8 	.word	0x0801b1e8
 801a434:	0801b1a8 	.word	0x0801b1a8

0801a438 <puts>:
 801a438:	4b02      	ldr	r3, [pc, #8]	; (801a444 <puts+0xc>)
 801a43a:	4601      	mov	r1, r0
 801a43c:	6818      	ldr	r0, [r3, #0]
 801a43e:	f7ff bf8d 	b.w	801a35c <_puts_r>
 801a442:	bf00      	nop
 801a444:	240000d4 	.word	0x240000d4

0801a448 <__swbuf_r>:
 801a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a44a:	460e      	mov	r6, r1
 801a44c:	4614      	mov	r4, r2
 801a44e:	4605      	mov	r5, r0
 801a450:	b118      	cbz	r0, 801a45a <__swbuf_r+0x12>
 801a452:	6983      	ldr	r3, [r0, #24]
 801a454:	b90b      	cbnz	r3, 801a45a <__swbuf_r+0x12>
 801a456:	f000 f9d1 	bl	801a7fc <__sinit>
 801a45a:	4b21      	ldr	r3, [pc, #132]	; (801a4e0 <__swbuf_r+0x98>)
 801a45c:	429c      	cmp	r4, r3
 801a45e:	d12b      	bne.n	801a4b8 <__swbuf_r+0x70>
 801a460:	686c      	ldr	r4, [r5, #4]
 801a462:	69a3      	ldr	r3, [r4, #24]
 801a464:	60a3      	str	r3, [r4, #8]
 801a466:	89a3      	ldrh	r3, [r4, #12]
 801a468:	071a      	lsls	r2, r3, #28
 801a46a:	d52f      	bpl.n	801a4cc <__swbuf_r+0x84>
 801a46c:	6923      	ldr	r3, [r4, #16]
 801a46e:	b36b      	cbz	r3, 801a4cc <__swbuf_r+0x84>
 801a470:	6923      	ldr	r3, [r4, #16]
 801a472:	6820      	ldr	r0, [r4, #0]
 801a474:	1ac0      	subs	r0, r0, r3
 801a476:	6963      	ldr	r3, [r4, #20]
 801a478:	b2f6      	uxtb	r6, r6
 801a47a:	4283      	cmp	r3, r0
 801a47c:	4637      	mov	r7, r6
 801a47e:	dc04      	bgt.n	801a48a <__swbuf_r+0x42>
 801a480:	4621      	mov	r1, r4
 801a482:	4628      	mov	r0, r5
 801a484:	f000 f926 	bl	801a6d4 <_fflush_r>
 801a488:	bb30      	cbnz	r0, 801a4d8 <__swbuf_r+0x90>
 801a48a:	68a3      	ldr	r3, [r4, #8]
 801a48c:	3b01      	subs	r3, #1
 801a48e:	60a3      	str	r3, [r4, #8]
 801a490:	6823      	ldr	r3, [r4, #0]
 801a492:	1c5a      	adds	r2, r3, #1
 801a494:	6022      	str	r2, [r4, #0]
 801a496:	701e      	strb	r6, [r3, #0]
 801a498:	6963      	ldr	r3, [r4, #20]
 801a49a:	3001      	adds	r0, #1
 801a49c:	4283      	cmp	r3, r0
 801a49e:	d004      	beq.n	801a4aa <__swbuf_r+0x62>
 801a4a0:	89a3      	ldrh	r3, [r4, #12]
 801a4a2:	07db      	lsls	r3, r3, #31
 801a4a4:	d506      	bpl.n	801a4b4 <__swbuf_r+0x6c>
 801a4a6:	2e0a      	cmp	r6, #10
 801a4a8:	d104      	bne.n	801a4b4 <__swbuf_r+0x6c>
 801a4aa:	4621      	mov	r1, r4
 801a4ac:	4628      	mov	r0, r5
 801a4ae:	f000 f911 	bl	801a6d4 <_fflush_r>
 801a4b2:	b988      	cbnz	r0, 801a4d8 <__swbuf_r+0x90>
 801a4b4:	4638      	mov	r0, r7
 801a4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4b8:	4b0a      	ldr	r3, [pc, #40]	; (801a4e4 <__swbuf_r+0x9c>)
 801a4ba:	429c      	cmp	r4, r3
 801a4bc:	d101      	bne.n	801a4c2 <__swbuf_r+0x7a>
 801a4be:	68ac      	ldr	r4, [r5, #8]
 801a4c0:	e7cf      	b.n	801a462 <__swbuf_r+0x1a>
 801a4c2:	4b09      	ldr	r3, [pc, #36]	; (801a4e8 <__swbuf_r+0xa0>)
 801a4c4:	429c      	cmp	r4, r3
 801a4c6:	bf08      	it	eq
 801a4c8:	68ec      	ldreq	r4, [r5, #12]
 801a4ca:	e7ca      	b.n	801a462 <__swbuf_r+0x1a>
 801a4cc:	4621      	mov	r1, r4
 801a4ce:	4628      	mov	r0, r5
 801a4d0:	f000 f80c 	bl	801a4ec <__swsetup_r>
 801a4d4:	2800      	cmp	r0, #0
 801a4d6:	d0cb      	beq.n	801a470 <__swbuf_r+0x28>
 801a4d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a4dc:	e7ea      	b.n	801a4b4 <__swbuf_r+0x6c>
 801a4de:	bf00      	nop
 801a4e0:	0801b1c8 	.word	0x0801b1c8
 801a4e4:	0801b1e8 	.word	0x0801b1e8
 801a4e8:	0801b1a8 	.word	0x0801b1a8

0801a4ec <__swsetup_r>:
 801a4ec:	4b32      	ldr	r3, [pc, #200]	; (801a5b8 <__swsetup_r+0xcc>)
 801a4ee:	b570      	push	{r4, r5, r6, lr}
 801a4f0:	681d      	ldr	r5, [r3, #0]
 801a4f2:	4606      	mov	r6, r0
 801a4f4:	460c      	mov	r4, r1
 801a4f6:	b125      	cbz	r5, 801a502 <__swsetup_r+0x16>
 801a4f8:	69ab      	ldr	r3, [r5, #24]
 801a4fa:	b913      	cbnz	r3, 801a502 <__swsetup_r+0x16>
 801a4fc:	4628      	mov	r0, r5
 801a4fe:	f000 f97d 	bl	801a7fc <__sinit>
 801a502:	4b2e      	ldr	r3, [pc, #184]	; (801a5bc <__swsetup_r+0xd0>)
 801a504:	429c      	cmp	r4, r3
 801a506:	d10f      	bne.n	801a528 <__swsetup_r+0x3c>
 801a508:	686c      	ldr	r4, [r5, #4]
 801a50a:	89a3      	ldrh	r3, [r4, #12]
 801a50c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a510:	0719      	lsls	r1, r3, #28
 801a512:	d42c      	bmi.n	801a56e <__swsetup_r+0x82>
 801a514:	06dd      	lsls	r5, r3, #27
 801a516:	d411      	bmi.n	801a53c <__swsetup_r+0x50>
 801a518:	2309      	movs	r3, #9
 801a51a:	6033      	str	r3, [r6, #0]
 801a51c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a520:	81a3      	strh	r3, [r4, #12]
 801a522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a526:	e03e      	b.n	801a5a6 <__swsetup_r+0xba>
 801a528:	4b25      	ldr	r3, [pc, #148]	; (801a5c0 <__swsetup_r+0xd4>)
 801a52a:	429c      	cmp	r4, r3
 801a52c:	d101      	bne.n	801a532 <__swsetup_r+0x46>
 801a52e:	68ac      	ldr	r4, [r5, #8]
 801a530:	e7eb      	b.n	801a50a <__swsetup_r+0x1e>
 801a532:	4b24      	ldr	r3, [pc, #144]	; (801a5c4 <__swsetup_r+0xd8>)
 801a534:	429c      	cmp	r4, r3
 801a536:	bf08      	it	eq
 801a538:	68ec      	ldreq	r4, [r5, #12]
 801a53a:	e7e6      	b.n	801a50a <__swsetup_r+0x1e>
 801a53c:	0758      	lsls	r0, r3, #29
 801a53e:	d512      	bpl.n	801a566 <__swsetup_r+0x7a>
 801a540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a542:	b141      	cbz	r1, 801a556 <__swsetup_r+0x6a>
 801a544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a548:	4299      	cmp	r1, r3
 801a54a:	d002      	beq.n	801a552 <__swsetup_r+0x66>
 801a54c:	4630      	mov	r0, r6
 801a54e:	f000 fa5b 	bl	801aa08 <_free_r>
 801a552:	2300      	movs	r3, #0
 801a554:	6363      	str	r3, [r4, #52]	; 0x34
 801a556:	89a3      	ldrh	r3, [r4, #12]
 801a558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a55c:	81a3      	strh	r3, [r4, #12]
 801a55e:	2300      	movs	r3, #0
 801a560:	6063      	str	r3, [r4, #4]
 801a562:	6923      	ldr	r3, [r4, #16]
 801a564:	6023      	str	r3, [r4, #0]
 801a566:	89a3      	ldrh	r3, [r4, #12]
 801a568:	f043 0308 	orr.w	r3, r3, #8
 801a56c:	81a3      	strh	r3, [r4, #12]
 801a56e:	6923      	ldr	r3, [r4, #16]
 801a570:	b94b      	cbnz	r3, 801a586 <__swsetup_r+0x9a>
 801a572:	89a3      	ldrh	r3, [r4, #12]
 801a574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a57c:	d003      	beq.n	801a586 <__swsetup_r+0x9a>
 801a57e:	4621      	mov	r1, r4
 801a580:	4630      	mov	r0, r6
 801a582:	f000 fa01 	bl	801a988 <__smakebuf_r>
 801a586:	89a0      	ldrh	r0, [r4, #12]
 801a588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a58c:	f010 0301 	ands.w	r3, r0, #1
 801a590:	d00a      	beq.n	801a5a8 <__swsetup_r+0xbc>
 801a592:	2300      	movs	r3, #0
 801a594:	60a3      	str	r3, [r4, #8]
 801a596:	6963      	ldr	r3, [r4, #20]
 801a598:	425b      	negs	r3, r3
 801a59a:	61a3      	str	r3, [r4, #24]
 801a59c:	6923      	ldr	r3, [r4, #16]
 801a59e:	b943      	cbnz	r3, 801a5b2 <__swsetup_r+0xc6>
 801a5a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a5a4:	d1ba      	bne.n	801a51c <__swsetup_r+0x30>
 801a5a6:	bd70      	pop	{r4, r5, r6, pc}
 801a5a8:	0781      	lsls	r1, r0, #30
 801a5aa:	bf58      	it	pl
 801a5ac:	6963      	ldrpl	r3, [r4, #20]
 801a5ae:	60a3      	str	r3, [r4, #8]
 801a5b0:	e7f4      	b.n	801a59c <__swsetup_r+0xb0>
 801a5b2:	2000      	movs	r0, #0
 801a5b4:	e7f7      	b.n	801a5a6 <__swsetup_r+0xba>
 801a5b6:	bf00      	nop
 801a5b8:	240000d4 	.word	0x240000d4
 801a5bc:	0801b1c8 	.word	0x0801b1c8
 801a5c0:	0801b1e8 	.word	0x0801b1e8
 801a5c4:	0801b1a8 	.word	0x0801b1a8

0801a5c8 <__sflush_r>:
 801a5c8:	898a      	ldrh	r2, [r1, #12]
 801a5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5ce:	4605      	mov	r5, r0
 801a5d0:	0710      	lsls	r0, r2, #28
 801a5d2:	460c      	mov	r4, r1
 801a5d4:	d458      	bmi.n	801a688 <__sflush_r+0xc0>
 801a5d6:	684b      	ldr	r3, [r1, #4]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	dc05      	bgt.n	801a5e8 <__sflush_r+0x20>
 801a5dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	dc02      	bgt.n	801a5e8 <__sflush_r+0x20>
 801a5e2:	2000      	movs	r0, #0
 801a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a5ea:	2e00      	cmp	r6, #0
 801a5ec:	d0f9      	beq.n	801a5e2 <__sflush_r+0x1a>
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a5f4:	682f      	ldr	r7, [r5, #0]
 801a5f6:	602b      	str	r3, [r5, #0]
 801a5f8:	d032      	beq.n	801a660 <__sflush_r+0x98>
 801a5fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a5fc:	89a3      	ldrh	r3, [r4, #12]
 801a5fe:	075a      	lsls	r2, r3, #29
 801a600:	d505      	bpl.n	801a60e <__sflush_r+0x46>
 801a602:	6863      	ldr	r3, [r4, #4]
 801a604:	1ac0      	subs	r0, r0, r3
 801a606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a608:	b10b      	cbz	r3, 801a60e <__sflush_r+0x46>
 801a60a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a60c:	1ac0      	subs	r0, r0, r3
 801a60e:	2300      	movs	r3, #0
 801a610:	4602      	mov	r2, r0
 801a612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a614:	6a21      	ldr	r1, [r4, #32]
 801a616:	4628      	mov	r0, r5
 801a618:	47b0      	blx	r6
 801a61a:	1c43      	adds	r3, r0, #1
 801a61c:	89a3      	ldrh	r3, [r4, #12]
 801a61e:	d106      	bne.n	801a62e <__sflush_r+0x66>
 801a620:	6829      	ldr	r1, [r5, #0]
 801a622:	291d      	cmp	r1, #29
 801a624:	d82c      	bhi.n	801a680 <__sflush_r+0xb8>
 801a626:	4a2a      	ldr	r2, [pc, #168]	; (801a6d0 <__sflush_r+0x108>)
 801a628:	40ca      	lsrs	r2, r1
 801a62a:	07d6      	lsls	r6, r2, #31
 801a62c:	d528      	bpl.n	801a680 <__sflush_r+0xb8>
 801a62e:	2200      	movs	r2, #0
 801a630:	6062      	str	r2, [r4, #4]
 801a632:	04d9      	lsls	r1, r3, #19
 801a634:	6922      	ldr	r2, [r4, #16]
 801a636:	6022      	str	r2, [r4, #0]
 801a638:	d504      	bpl.n	801a644 <__sflush_r+0x7c>
 801a63a:	1c42      	adds	r2, r0, #1
 801a63c:	d101      	bne.n	801a642 <__sflush_r+0x7a>
 801a63e:	682b      	ldr	r3, [r5, #0]
 801a640:	b903      	cbnz	r3, 801a644 <__sflush_r+0x7c>
 801a642:	6560      	str	r0, [r4, #84]	; 0x54
 801a644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a646:	602f      	str	r7, [r5, #0]
 801a648:	2900      	cmp	r1, #0
 801a64a:	d0ca      	beq.n	801a5e2 <__sflush_r+0x1a>
 801a64c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a650:	4299      	cmp	r1, r3
 801a652:	d002      	beq.n	801a65a <__sflush_r+0x92>
 801a654:	4628      	mov	r0, r5
 801a656:	f000 f9d7 	bl	801aa08 <_free_r>
 801a65a:	2000      	movs	r0, #0
 801a65c:	6360      	str	r0, [r4, #52]	; 0x34
 801a65e:	e7c1      	b.n	801a5e4 <__sflush_r+0x1c>
 801a660:	6a21      	ldr	r1, [r4, #32]
 801a662:	2301      	movs	r3, #1
 801a664:	4628      	mov	r0, r5
 801a666:	47b0      	blx	r6
 801a668:	1c41      	adds	r1, r0, #1
 801a66a:	d1c7      	bne.n	801a5fc <__sflush_r+0x34>
 801a66c:	682b      	ldr	r3, [r5, #0]
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d0c4      	beq.n	801a5fc <__sflush_r+0x34>
 801a672:	2b1d      	cmp	r3, #29
 801a674:	d001      	beq.n	801a67a <__sflush_r+0xb2>
 801a676:	2b16      	cmp	r3, #22
 801a678:	d101      	bne.n	801a67e <__sflush_r+0xb6>
 801a67a:	602f      	str	r7, [r5, #0]
 801a67c:	e7b1      	b.n	801a5e2 <__sflush_r+0x1a>
 801a67e:	89a3      	ldrh	r3, [r4, #12]
 801a680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a684:	81a3      	strh	r3, [r4, #12]
 801a686:	e7ad      	b.n	801a5e4 <__sflush_r+0x1c>
 801a688:	690f      	ldr	r7, [r1, #16]
 801a68a:	2f00      	cmp	r7, #0
 801a68c:	d0a9      	beq.n	801a5e2 <__sflush_r+0x1a>
 801a68e:	0793      	lsls	r3, r2, #30
 801a690:	680e      	ldr	r6, [r1, #0]
 801a692:	bf08      	it	eq
 801a694:	694b      	ldreq	r3, [r1, #20]
 801a696:	600f      	str	r7, [r1, #0]
 801a698:	bf18      	it	ne
 801a69a:	2300      	movne	r3, #0
 801a69c:	eba6 0807 	sub.w	r8, r6, r7
 801a6a0:	608b      	str	r3, [r1, #8]
 801a6a2:	f1b8 0f00 	cmp.w	r8, #0
 801a6a6:	dd9c      	ble.n	801a5e2 <__sflush_r+0x1a>
 801a6a8:	6a21      	ldr	r1, [r4, #32]
 801a6aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a6ac:	4643      	mov	r3, r8
 801a6ae:	463a      	mov	r2, r7
 801a6b0:	4628      	mov	r0, r5
 801a6b2:	47b0      	blx	r6
 801a6b4:	2800      	cmp	r0, #0
 801a6b6:	dc06      	bgt.n	801a6c6 <__sflush_r+0xfe>
 801a6b8:	89a3      	ldrh	r3, [r4, #12]
 801a6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a6be:	81a3      	strh	r3, [r4, #12]
 801a6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6c4:	e78e      	b.n	801a5e4 <__sflush_r+0x1c>
 801a6c6:	4407      	add	r7, r0
 801a6c8:	eba8 0800 	sub.w	r8, r8, r0
 801a6cc:	e7e9      	b.n	801a6a2 <__sflush_r+0xda>
 801a6ce:	bf00      	nop
 801a6d0:	20400001 	.word	0x20400001

0801a6d4 <_fflush_r>:
 801a6d4:	b538      	push	{r3, r4, r5, lr}
 801a6d6:	690b      	ldr	r3, [r1, #16]
 801a6d8:	4605      	mov	r5, r0
 801a6da:	460c      	mov	r4, r1
 801a6dc:	b913      	cbnz	r3, 801a6e4 <_fflush_r+0x10>
 801a6de:	2500      	movs	r5, #0
 801a6e0:	4628      	mov	r0, r5
 801a6e2:	bd38      	pop	{r3, r4, r5, pc}
 801a6e4:	b118      	cbz	r0, 801a6ee <_fflush_r+0x1a>
 801a6e6:	6983      	ldr	r3, [r0, #24]
 801a6e8:	b90b      	cbnz	r3, 801a6ee <_fflush_r+0x1a>
 801a6ea:	f000 f887 	bl	801a7fc <__sinit>
 801a6ee:	4b14      	ldr	r3, [pc, #80]	; (801a740 <_fflush_r+0x6c>)
 801a6f0:	429c      	cmp	r4, r3
 801a6f2:	d11b      	bne.n	801a72c <_fflush_r+0x58>
 801a6f4:	686c      	ldr	r4, [r5, #4]
 801a6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d0ef      	beq.n	801a6de <_fflush_r+0xa>
 801a6fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a700:	07d0      	lsls	r0, r2, #31
 801a702:	d404      	bmi.n	801a70e <_fflush_r+0x3a>
 801a704:	0599      	lsls	r1, r3, #22
 801a706:	d402      	bmi.n	801a70e <_fflush_r+0x3a>
 801a708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a70a:	f000 f915 	bl	801a938 <__retarget_lock_acquire_recursive>
 801a70e:	4628      	mov	r0, r5
 801a710:	4621      	mov	r1, r4
 801a712:	f7ff ff59 	bl	801a5c8 <__sflush_r>
 801a716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a718:	07da      	lsls	r2, r3, #31
 801a71a:	4605      	mov	r5, r0
 801a71c:	d4e0      	bmi.n	801a6e0 <_fflush_r+0xc>
 801a71e:	89a3      	ldrh	r3, [r4, #12]
 801a720:	059b      	lsls	r3, r3, #22
 801a722:	d4dd      	bmi.n	801a6e0 <_fflush_r+0xc>
 801a724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a726:	f000 f908 	bl	801a93a <__retarget_lock_release_recursive>
 801a72a:	e7d9      	b.n	801a6e0 <_fflush_r+0xc>
 801a72c:	4b05      	ldr	r3, [pc, #20]	; (801a744 <_fflush_r+0x70>)
 801a72e:	429c      	cmp	r4, r3
 801a730:	d101      	bne.n	801a736 <_fflush_r+0x62>
 801a732:	68ac      	ldr	r4, [r5, #8]
 801a734:	e7df      	b.n	801a6f6 <_fflush_r+0x22>
 801a736:	4b04      	ldr	r3, [pc, #16]	; (801a748 <_fflush_r+0x74>)
 801a738:	429c      	cmp	r4, r3
 801a73a:	bf08      	it	eq
 801a73c:	68ec      	ldreq	r4, [r5, #12]
 801a73e:	e7da      	b.n	801a6f6 <_fflush_r+0x22>
 801a740:	0801b1c8 	.word	0x0801b1c8
 801a744:	0801b1e8 	.word	0x0801b1e8
 801a748:	0801b1a8 	.word	0x0801b1a8

0801a74c <std>:
 801a74c:	2300      	movs	r3, #0
 801a74e:	b510      	push	{r4, lr}
 801a750:	4604      	mov	r4, r0
 801a752:	e9c0 3300 	strd	r3, r3, [r0]
 801a756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a75a:	6083      	str	r3, [r0, #8]
 801a75c:	8181      	strh	r1, [r0, #12]
 801a75e:	6643      	str	r3, [r0, #100]	; 0x64
 801a760:	81c2      	strh	r2, [r0, #14]
 801a762:	6183      	str	r3, [r0, #24]
 801a764:	4619      	mov	r1, r3
 801a766:	2208      	movs	r2, #8
 801a768:	305c      	adds	r0, #92	; 0x5c
 801a76a:	f7ff fdef 	bl	801a34c <memset>
 801a76e:	4b05      	ldr	r3, [pc, #20]	; (801a784 <std+0x38>)
 801a770:	6263      	str	r3, [r4, #36]	; 0x24
 801a772:	4b05      	ldr	r3, [pc, #20]	; (801a788 <std+0x3c>)
 801a774:	62a3      	str	r3, [r4, #40]	; 0x28
 801a776:	4b05      	ldr	r3, [pc, #20]	; (801a78c <std+0x40>)
 801a778:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a77a:	4b05      	ldr	r3, [pc, #20]	; (801a790 <std+0x44>)
 801a77c:	6224      	str	r4, [r4, #32]
 801a77e:	6323      	str	r3, [r4, #48]	; 0x30
 801a780:	bd10      	pop	{r4, pc}
 801a782:	bf00      	nop
 801a784:	0801abe9 	.word	0x0801abe9
 801a788:	0801ac0b 	.word	0x0801ac0b
 801a78c:	0801ac43 	.word	0x0801ac43
 801a790:	0801ac67 	.word	0x0801ac67

0801a794 <_cleanup_r>:
 801a794:	4901      	ldr	r1, [pc, #4]	; (801a79c <_cleanup_r+0x8>)
 801a796:	f000 b8af 	b.w	801a8f8 <_fwalk_reent>
 801a79a:	bf00      	nop
 801a79c:	0801a6d5 	.word	0x0801a6d5

0801a7a0 <__sfmoreglue>:
 801a7a0:	b570      	push	{r4, r5, r6, lr}
 801a7a2:	2268      	movs	r2, #104	; 0x68
 801a7a4:	1e4d      	subs	r5, r1, #1
 801a7a6:	4355      	muls	r5, r2
 801a7a8:	460e      	mov	r6, r1
 801a7aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a7ae:	f000 f997 	bl	801aae0 <_malloc_r>
 801a7b2:	4604      	mov	r4, r0
 801a7b4:	b140      	cbz	r0, 801a7c8 <__sfmoreglue+0x28>
 801a7b6:	2100      	movs	r1, #0
 801a7b8:	e9c0 1600 	strd	r1, r6, [r0]
 801a7bc:	300c      	adds	r0, #12
 801a7be:	60a0      	str	r0, [r4, #8]
 801a7c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a7c4:	f7ff fdc2 	bl	801a34c <memset>
 801a7c8:	4620      	mov	r0, r4
 801a7ca:	bd70      	pop	{r4, r5, r6, pc}

0801a7cc <__sfp_lock_acquire>:
 801a7cc:	4801      	ldr	r0, [pc, #4]	; (801a7d4 <__sfp_lock_acquire+0x8>)
 801a7ce:	f000 b8b3 	b.w	801a938 <__retarget_lock_acquire_recursive>
 801a7d2:	bf00      	nop
 801a7d4:	2400696d 	.word	0x2400696d

0801a7d8 <__sfp_lock_release>:
 801a7d8:	4801      	ldr	r0, [pc, #4]	; (801a7e0 <__sfp_lock_release+0x8>)
 801a7da:	f000 b8ae 	b.w	801a93a <__retarget_lock_release_recursive>
 801a7de:	bf00      	nop
 801a7e0:	2400696d 	.word	0x2400696d

0801a7e4 <__sinit_lock_acquire>:
 801a7e4:	4801      	ldr	r0, [pc, #4]	; (801a7ec <__sinit_lock_acquire+0x8>)
 801a7e6:	f000 b8a7 	b.w	801a938 <__retarget_lock_acquire_recursive>
 801a7ea:	bf00      	nop
 801a7ec:	2400696e 	.word	0x2400696e

0801a7f0 <__sinit_lock_release>:
 801a7f0:	4801      	ldr	r0, [pc, #4]	; (801a7f8 <__sinit_lock_release+0x8>)
 801a7f2:	f000 b8a2 	b.w	801a93a <__retarget_lock_release_recursive>
 801a7f6:	bf00      	nop
 801a7f8:	2400696e 	.word	0x2400696e

0801a7fc <__sinit>:
 801a7fc:	b510      	push	{r4, lr}
 801a7fe:	4604      	mov	r4, r0
 801a800:	f7ff fff0 	bl	801a7e4 <__sinit_lock_acquire>
 801a804:	69a3      	ldr	r3, [r4, #24]
 801a806:	b11b      	cbz	r3, 801a810 <__sinit+0x14>
 801a808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a80c:	f7ff bff0 	b.w	801a7f0 <__sinit_lock_release>
 801a810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a814:	6523      	str	r3, [r4, #80]	; 0x50
 801a816:	4b13      	ldr	r3, [pc, #76]	; (801a864 <__sinit+0x68>)
 801a818:	4a13      	ldr	r2, [pc, #76]	; (801a868 <__sinit+0x6c>)
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a81e:	42a3      	cmp	r3, r4
 801a820:	bf04      	itt	eq
 801a822:	2301      	moveq	r3, #1
 801a824:	61a3      	streq	r3, [r4, #24]
 801a826:	4620      	mov	r0, r4
 801a828:	f000 f820 	bl	801a86c <__sfp>
 801a82c:	6060      	str	r0, [r4, #4]
 801a82e:	4620      	mov	r0, r4
 801a830:	f000 f81c 	bl	801a86c <__sfp>
 801a834:	60a0      	str	r0, [r4, #8]
 801a836:	4620      	mov	r0, r4
 801a838:	f000 f818 	bl	801a86c <__sfp>
 801a83c:	2200      	movs	r2, #0
 801a83e:	60e0      	str	r0, [r4, #12]
 801a840:	2104      	movs	r1, #4
 801a842:	6860      	ldr	r0, [r4, #4]
 801a844:	f7ff ff82 	bl	801a74c <std>
 801a848:	68a0      	ldr	r0, [r4, #8]
 801a84a:	2201      	movs	r2, #1
 801a84c:	2109      	movs	r1, #9
 801a84e:	f7ff ff7d 	bl	801a74c <std>
 801a852:	68e0      	ldr	r0, [r4, #12]
 801a854:	2202      	movs	r2, #2
 801a856:	2112      	movs	r1, #18
 801a858:	f7ff ff78 	bl	801a74c <std>
 801a85c:	2301      	movs	r3, #1
 801a85e:	61a3      	str	r3, [r4, #24]
 801a860:	e7d2      	b.n	801a808 <__sinit+0xc>
 801a862:	bf00      	nop
 801a864:	0801b1a4 	.word	0x0801b1a4
 801a868:	0801a795 	.word	0x0801a795

0801a86c <__sfp>:
 801a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a86e:	4607      	mov	r7, r0
 801a870:	f7ff ffac 	bl	801a7cc <__sfp_lock_acquire>
 801a874:	4b1e      	ldr	r3, [pc, #120]	; (801a8f0 <__sfp+0x84>)
 801a876:	681e      	ldr	r6, [r3, #0]
 801a878:	69b3      	ldr	r3, [r6, #24]
 801a87a:	b913      	cbnz	r3, 801a882 <__sfp+0x16>
 801a87c:	4630      	mov	r0, r6
 801a87e:	f7ff ffbd 	bl	801a7fc <__sinit>
 801a882:	3648      	adds	r6, #72	; 0x48
 801a884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a888:	3b01      	subs	r3, #1
 801a88a:	d503      	bpl.n	801a894 <__sfp+0x28>
 801a88c:	6833      	ldr	r3, [r6, #0]
 801a88e:	b30b      	cbz	r3, 801a8d4 <__sfp+0x68>
 801a890:	6836      	ldr	r6, [r6, #0]
 801a892:	e7f7      	b.n	801a884 <__sfp+0x18>
 801a894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a898:	b9d5      	cbnz	r5, 801a8d0 <__sfp+0x64>
 801a89a:	4b16      	ldr	r3, [pc, #88]	; (801a8f4 <__sfp+0x88>)
 801a89c:	60e3      	str	r3, [r4, #12]
 801a89e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a8a2:	6665      	str	r5, [r4, #100]	; 0x64
 801a8a4:	f000 f847 	bl	801a936 <__retarget_lock_init_recursive>
 801a8a8:	f7ff ff96 	bl	801a7d8 <__sfp_lock_release>
 801a8ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a8b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a8b4:	6025      	str	r5, [r4, #0]
 801a8b6:	61a5      	str	r5, [r4, #24]
 801a8b8:	2208      	movs	r2, #8
 801a8ba:	4629      	mov	r1, r5
 801a8bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a8c0:	f7ff fd44 	bl	801a34c <memset>
 801a8c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a8c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a8cc:	4620      	mov	r0, r4
 801a8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8d0:	3468      	adds	r4, #104	; 0x68
 801a8d2:	e7d9      	b.n	801a888 <__sfp+0x1c>
 801a8d4:	2104      	movs	r1, #4
 801a8d6:	4638      	mov	r0, r7
 801a8d8:	f7ff ff62 	bl	801a7a0 <__sfmoreglue>
 801a8dc:	4604      	mov	r4, r0
 801a8de:	6030      	str	r0, [r6, #0]
 801a8e0:	2800      	cmp	r0, #0
 801a8e2:	d1d5      	bne.n	801a890 <__sfp+0x24>
 801a8e4:	f7ff ff78 	bl	801a7d8 <__sfp_lock_release>
 801a8e8:	230c      	movs	r3, #12
 801a8ea:	603b      	str	r3, [r7, #0]
 801a8ec:	e7ee      	b.n	801a8cc <__sfp+0x60>
 801a8ee:	bf00      	nop
 801a8f0:	0801b1a4 	.word	0x0801b1a4
 801a8f4:	ffff0001 	.word	0xffff0001

0801a8f8 <_fwalk_reent>:
 801a8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8fc:	4606      	mov	r6, r0
 801a8fe:	4688      	mov	r8, r1
 801a900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a904:	2700      	movs	r7, #0
 801a906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a90a:	f1b9 0901 	subs.w	r9, r9, #1
 801a90e:	d505      	bpl.n	801a91c <_fwalk_reent+0x24>
 801a910:	6824      	ldr	r4, [r4, #0]
 801a912:	2c00      	cmp	r4, #0
 801a914:	d1f7      	bne.n	801a906 <_fwalk_reent+0xe>
 801a916:	4638      	mov	r0, r7
 801a918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a91c:	89ab      	ldrh	r3, [r5, #12]
 801a91e:	2b01      	cmp	r3, #1
 801a920:	d907      	bls.n	801a932 <_fwalk_reent+0x3a>
 801a922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a926:	3301      	adds	r3, #1
 801a928:	d003      	beq.n	801a932 <_fwalk_reent+0x3a>
 801a92a:	4629      	mov	r1, r5
 801a92c:	4630      	mov	r0, r6
 801a92e:	47c0      	blx	r8
 801a930:	4307      	orrs	r7, r0
 801a932:	3568      	adds	r5, #104	; 0x68
 801a934:	e7e9      	b.n	801a90a <_fwalk_reent+0x12>

0801a936 <__retarget_lock_init_recursive>:
 801a936:	4770      	bx	lr

0801a938 <__retarget_lock_acquire_recursive>:
 801a938:	4770      	bx	lr

0801a93a <__retarget_lock_release_recursive>:
 801a93a:	4770      	bx	lr

0801a93c <__swhatbuf_r>:
 801a93c:	b570      	push	{r4, r5, r6, lr}
 801a93e:	460e      	mov	r6, r1
 801a940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a944:	2900      	cmp	r1, #0
 801a946:	b096      	sub	sp, #88	; 0x58
 801a948:	4614      	mov	r4, r2
 801a94a:	461d      	mov	r5, r3
 801a94c:	da08      	bge.n	801a960 <__swhatbuf_r+0x24>
 801a94e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a952:	2200      	movs	r2, #0
 801a954:	602a      	str	r2, [r5, #0]
 801a956:	061a      	lsls	r2, r3, #24
 801a958:	d410      	bmi.n	801a97c <__swhatbuf_r+0x40>
 801a95a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a95e:	e00e      	b.n	801a97e <__swhatbuf_r+0x42>
 801a960:	466a      	mov	r2, sp
 801a962:	f000 f9a7 	bl	801acb4 <_fstat_r>
 801a966:	2800      	cmp	r0, #0
 801a968:	dbf1      	blt.n	801a94e <__swhatbuf_r+0x12>
 801a96a:	9a01      	ldr	r2, [sp, #4]
 801a96c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a970:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a974:	425a      	negs	r2, r3
 801a976:	415a      	adcs	r2, r3
 801a978:	602a      	str	r2, [r5, #0]
 801a97a:	e7ee      	b.n	801a95a <__swhatbuf_r+0x1e>
 801a97c:	2340      	movs	r3, #64	; 0x40
 801a97e:	2000      	movs	r0, #0
 801a980:	6023      	str	r3, [r4, #0]
 801a982:	b016      	add	sp, #88	; 0x58
 801a984:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a988 <__smakebuf_r>:
 801a988:	898b      	ldrh	r3, [r1, #12]
 801a98a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a98c:	079d      	lsls	r5, r3, #30
 801a98e:	4606      	mov	r6, r0
 801a990:	460c      	mov	r4, r1
 801a992:	d507      	bpl.n	801a9a4 <__smakebuf_r+0x1c>
 801a994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a998:	6023      	str	r3, [r4, #0]
 801a99a:	6123      	str	r3, [r4, #16]
 801a99c:	2301      	movs	r3, #1
 801a99e:	6163      	str	r3, [r4, #20]
 801a9a0:	b002      	add	sp, #8
 801a9a2:	bd70      	pop	{r4, r5, r6, pc}
 801a9a4:	ab01      	add	r3, sp, #4
 801a9a6:	466a      	mov	r2, sp
 801a9a8:	f7ff ffc8 	bl	801a93c <__swhatbuf_r>
 801a9ac:	9900      	ldr	r1, [sp, #0]
 801a9ae:	4605      	mov	r5, r0
 801a9b0:	4630      	mov	r0, r6
 801a9b2:	f000 f895 	bl	801aae0 <_malloc_r>
 801a9b6:	b948      	cbnz	r0, 801a9cc <__smakebuf_r+0x44>
 801a9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a9bc:	059a      	lsls	r2, r3, #22
 801a9be:	d4ef      	bmi.n	801a9a0 <__smakebuf_r+0x18>
 801a9c0:	f023 0303 	bic.w	r3, r3, #3
 801a9c4:	f043 0302 	orr.w	r3, r3, #2
 801a9c8:	81a3      	strh	r3, [r4, #12]
 801a9ca:	e7e3      	b.n	801a994 <__smakebuf_r+0xc>
 801a9cc:	4b0d      	ldr	r3, [pc, #52]	; (801aa04 <__smakebuf_r+0x7c>)
 801a9ce:	62b3      	str	r3, [r6, #40]	; 0x28
 801a9d0:	89a3      	ldrh	r3, [r4, #12]
 801a9d2:	6020      	str	r0, [r4, #0]
 801a9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9d8:	81a3      	strh	r3, [r4, #12]
 801a9da:	9b00      	ldr	r3, [sp, #0]
 801a9dc:	6163      	str	r3, [r4, #20]
 801a9de:	9b01      	ldr	r3, [sp, #4]
 801a9e0:	6120      	str	r0, [r4, #16]
 801a9e2:	b15b      	cbz	r3, 801a9fc <__smakebuf_r+0x74>
 801a9e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a9e8:	4630      	mov	r0, r6
 801a9ea:	f000 f975 	bl	801acd8 <_isatty_r>
 801a9ee:	b128      	cbz	r0, 801a9fc <__smakebuf_r+0x74>
 801a9f0:	89a3      	ldrh	r3, [r4, #12]
 801a9f2:	f023 0303 	bic.w	r3, r3, #3
 801a9f6:	f043 0301 	orr.w	r3, r3, #1
 801a9fa:	81a3      	strh	r3, [r4, #12]
 801a9fc:	89a0      	ldrh	r0, [r4, #12]
 801a9fe:	4305      	orrs	r5, r0
 801aa00:	81a5      	strh	r5, [r4, #12]
 801aa02:	e7cd      	b.n	801a9a0 <__smakebuf_r+0x18>
 801aa04:	0801a795 	.word	0x0801a795

0801aa08 <_free_r>:
 801aa08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aa0a:	2900      	cmp	r1, #0
 801aa0c:	d044      	beq.n	801aa98 <_free_r+0x90>
 801aa0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aa12:	9001      	str	r0, [sp, #4]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	f1a1 0404 	sub.w	r4, r1, #4
 801aa1a:	bfb8      	it	lt
 801aa1c:	18e4      	addlt	r4, r4, r3
 801aa1e:	f000 f97d 	bl	801ad1c <__malloc_lock>
 801aa22:	4a1e      	ldr	r2, [pc, #120]	; (801aa9c <_free_r+0x94>)
 801aa24:	9801      	ldr	r0, [sp, #4]
 801aa26:	6813      	ldr	r3, [r2, #0]
 801aa28:	b933      	cbnz	r3, 801aa38 <_free_r+0x30>
 801aa2a:	6063      	str	r3, [r4, #4]
 801aa2c:	6014      	str	r4, [r2, #0]
 801aa2e:	b003      	add	sp, #12
 801aa30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa34:	f000 b978 	b.w	801ad28 <__malloc_unlock>
 801aa38:	42a3      	cmp	r3, r4
 801aa3a:	d908      	bls.n	801aa4e <_free_r+0x46>
 801aa3c:	6825      	ldr	r5, [r4, #0]
 801aa3e:	1961      	adds	r1, r4, r5
 801aa40:	428b      	cmp	r3, r1
 801aa42:	bf01      	itttt	eq
 801aa44:	6819      	ldreq	r1, [r3, #0]
 801aa46:	685b      	ldreq	r3, [r3, #4]
 801aa48:	1949      	addeq	r1, r1, r5
 801aa4a:	6021      	streq	r1, [r4, #0]
 801aa4c:	e7ed      	b.n	801aa2a <_free_r+0x22>
 801aa4e:	461a      	mov	r2, r3
 801aa50:	685b      	ldr	r3, [r3, #4]
 801aa52:	b10b      	cbz	r3, 801aa58 <_free_r+0x50>
 801aa54:	42a3      	cmp	r3, r4
 801aa56:	d9fa      	bls.n	801aa4e <_free_r+0x46>
 801aa58:	6811      	ldr	r1, [r2, #0]
 801aa5a:	1855      	adds	r5, r2, r1
 801aa5c:	42a5      	cmp	r5, r4
 801aa5e:	d10b      	bne.n	801aa78 <_free_r+0x70>
 801aa60:	6824      	ldr	r4, [r4, #0]
 801aa62:	4421      	add	r1, r4
 801aa64:	1854      	adds	r4, r2, r1
 801aa66:	42a3      	cmp	r3, r4
 801aa68:	6011      	str	r1, [r2, #0]
 801aa6a:	d1e0      	bne.n	801aa2e <_free_r+0x26>
 801aa6c:	681c      	ldr	r4, [r3, #0]
 801aa6e:	685b      	ldr	r3, [r3, #4]
 801aa70:	6053      	str	r3, [r2, #4]
 801aa72:	4421      	add	r1, r4
 801aa74:	6011      	str	r1, [r2, #0]
 801aa76:	e7da      	b.n	801aa2e <_free_r+0x26>
 801aa78:	d902      	bls.n	801aa80 <_free_r+0x78>
 801aa7a:	230c      	movs	r3, #12
 801aa7c:	6003      	str	r3, [r0, #0]
 801aa7e:	e7d6      	b.n	801aa2e <_free_r+0x26>
 801aa80:	6825      	ldr	r5, [r4, #0]
 801aa82:	1961      	adds	r1, r4, r5
 801aa84:	428b      	cmp	r3, r1
 801aa86:	bf04      	itt	eq
 801aa88:	6819      	ldreq	r1, [r3, #0]
 801aa8a:	685b      	ldreq	r3, [r3, #4]
 801aa8c:	6063      	str	r3, [r4, #4]
 801aa8e:	bf04      	itt	eq
 801aa90:	1949      	addeq	r1, r1, r5
 801aa92:	6021      	streq	r1, [r4, #0]
 801aa94:	6054      	str	r4, [r2, #4]
 801aa96:	e7ca      	b.n	801aa2e <_free_r+0x26>
 801aa98:	b003      	add	sp, #12
 801aa9a:	bd30      	pop	{r4, r5, pc}
 801aa9c:	24006970 	.word	0x24006970

0801aaa0 <sbrk_aligned>:
 801aaa0:	b570      	push	{r4, r5, r6, lr}
 801aaa2:	4e0e      	ldr	r6, [pc, #56]	; (801aadc <sbrk_aligned+0x3c>)
 801aaa4:	460c      	mov	r4, r1
 801aaa6:	6831      	ldr	r1, [r6, #0]
 801aaa8:	4605      	mov	r5, r0
 801aaaa:	b911      	cbnz	r1, 801aab2 <sbrk_aligned+0x12>
 801aaac:	f000 f88c 	bl	801abc8 <_sbrk_r>
 801aab0:	6030      	str	r0, [r6, #0]
 801aab2:	4621      	mov	r1, r4
 801aab4:	4628      	mov	r0, r5
 801aab6:	f000 f887 	bl	801abc8 <_sbrk_r>
 801aaba:	1c43      	adds	r3, r0, #1
 801aabc:	d00a      	beq.n	801aad4 <sbrk_aligned+0x34>
 801aabe:	1cc4      	adds	r4, r0, #3
 801aac0:	f024 0403 	bic.w	r4, r4, #3
 801aac4:	42a0      	cmp	r0, r4
 801aac6:	d007      	beq.n	801aad8 <sbrk_aligned+0x38>
 801aac8:	1a21      	subs	r1, r4, r0
 801aaca:	4628      	mov	r0, r5
 801aacc:	f000 f87c 	bl	801abc8 <_sbrk_r>
 801aad0:	3001      	adds	r0, #1
 801aad2:	d101      	bne.n	801aad8 <sbrk_aligned+0x38>
 801aad4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801aad8:	4620      	mov	r0, r4
 801aada:	bd70      	pop	{r4, r5, r6, pc}
 801aadc:	24006974 	.word	0x24006974

0801aae0 <_malloc_r>:
 801aae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aae4:	1ccd      	adds	r5, r1, #3
 801aae6:	f025 0503 	bic.w	r5, r5, #3
 801aaea:	3508      	adds	r5, #8
 801aaec:	2d0c      	cmp	r5, #12
 801aaee:	bf38      	it	cc
 801aaf0:	250c      	movcc	r5, #12
 801aaf2:	2d00      	cmp	r5, #0
 801aaf4:	4607      	mov	r7, r0
 801aaf6:	db01      	blt.n	801aafc <_malloc_r+0x1c>
 801aaf8:	42a9      	cmp	r1, r5
 801aafa:	d905      	bls.n	801ab08 <_malloc_r+0x28>
 801aafc:	230c      	movs	r3, #12
 801aafe:	603b      	str	r3, [r7, #0]
 801ab00:	2600      	movs	r6, #0
 801ab02:	4630      	mov	r0, r6
 801ab04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab08:	4e2e      	ldr	r6, [pc, #184]	; (801abc4 <_malloc_r+0xe4>)
 801ab0a:	f000 f907 	bl	801ad1c <__malloc_lock>
 801ab0e:	6833      	ldr	r3, [r6, #0]
 801ab10:	461c      	mov	r4, r3
 801ab12:	bb34      	cbnz	r4, 801ab62 <_malloc_r+0x82>
 801ab14:	4629      	mov	r1, r5
 801ab16:	4638      	mov	r0, r7
 801ab18:	f7ff ffc2 	bl	801aaa0 <sbrk_aligned>
 801ab1c:	1c43      	adds	r3, r0, #1
 801ab1e:	4604      	mov	r4, r0
 801ab20:	d14d      	bne.n	801abbe <_malloc_r+0xde>
 801ab22:	6834      	ldr	r4, [r6, #0]
 801ab24:	4626      	mov	r6, r4
 801ab26:	2e00      	cmp	r6, #0
 801ab28:	d140      	bne.n	801abac <_malloc_r+0xcc>
 801ab2a:	6823      	ldr	r3, [r4, #0]
 801ab2c:	4631      	mov	r1, r6
 801ab2e:	4638      	mov	r0, r7
 801ab30:	eb04 0803 	add.w	r8, r4, r3
 801ab34:	f000 f848 	bl	801abc8 <_sbrk_r>
 801ab38:	4580      	cmp	r8, r0
 801ab3a:	d13a      	bne.n	801abb2 <_malloc_r+0xd2>
 801ab3c:	6821      	ldr	r1, [r4, #0]
 801ab3e:	3503      	adds	r5, #3
 801ab40:	1a6d      	subs	r5, r5, r1
 801ab42:	f025 0503 	bic.w	r5, r5, #3
 801ab46:	3508      	adds	r5, #8
 801ab48:	2d0c      	cmp	r5, #12
 801ab4a:	bf38      	it	cc
 801ab4c:	250c      	movcc	r5, #12
 801ab4e:	4629      	mov	r1, r5
 801ab50:	4638      	mov	r0, r7
 801ab52:	f7ff ffa5 	bl	801aaa0 <sbrk_aligned>
 801ab56:	3001      	adds	r0, #1
 801ab58:	d02b      	beq.n	801abb2 <_malloc_r+0xd2>
 801ab5a:	6823      	ldr	r3, [r4, #0]
 801ab5c:	442b      	add	r3, r5
 801ab5e:	6023      	str	r3, [r4, #0]
 801ab60:	e00e      	b.n	801ab80 <_malloc_r+0xa0>
 801ab62:	6822      	ldr	r2, [r4, #0]
 801ab64:	1b52      	subs	r2, r2, r5
 801ab66:	d41e      	bmi.n	801aba6 <_malloc_r+0xc6>
 801ab68:	2a0b      	cmp	r2, #11
 801ab6a:	d916      	bls.n	801ab9a <_malloc_r+0xba>
 801ab6c:	1961      	adds	r1, r4, r5
 801ab6e:	42a3      	cmp	r3, r4
 801ab70:	6025      	str	r5, [r4, #0]
 801ab72:	bf18      	it	ne
 801ab74:	6059      	strne	r1, [r3, #4]
 801ab76:	6863      	ldr	r3, [r4, #4]
 801ab78:	bf08      	it	eq
 801ab7a:	6031      	streq	r1, [r6, #0]
 801ab7c:	5162      	str	r2, [r4, r5]
 801ab7e:	604b      	str	r3, [r1, #4]
 801ab80:	4638      	mov	r0, r7
 801ab82:	f104 060b 	add.w	r6, r4, #11
 801ab86:	f000 f8cf 	bl	801ad28 <__malloc_unlock>
 801ab8a:	f026 0607 	bic.w	r6, r6, #7
 801ab8e:	1d23      	adds	r3, r4, #4
 801ab90:	1af2      	subs	r2, r6, r3
 801ab92:	d0b6      	beq.n	801ab02 <_malloc_r+0x22>
 801ab94:	1b9b      	subs	r3, r3, r6
 801ab96:	50a3      	str	r3, [r4, r2]
 801ab98:	e7b3      	b.n	801ab02 <_malloc_r+0x22>
 801ab9a:	6862      	ldr	r2, [r4, #4]
 801ab9c:	42a3      	cmp	r3, r4
 801ab9e:	bf0c      	ite	eq
 801aba0:	6032      	streq	r2, [r6, #0]
 801aba2:	605a      	strne	r2, [r3, #4]
 801aba4:	e7ec      	b.n	801ab80 <_malloc_r+0xa0>
 801aba6:	4623      	mov	r3, r4
 801aba8:	6864      	ldr	r4, [r4, #4]
 801abaa:	e7b2      	b.n	801ab12 <_malloc_r+0x32>
 801abac:	4634      	mov	r4, r6
 801abae:	6876      	ldr	r6, [r6, #4]
 801abb0:	e7b9      	b.n	801ab26 <_malloc_r+0x46>
 801abb2:	230c      	movs	r3, #12
 801abb4:	603b      	str	r3, [r7, #0]
 801abb6:	4638      	mov	r0, r7
 801abb8:	f000 f8b6 	bl	801ad28 <__malloc_unlock>
 801abbc:	e7a1      	b.n	801ab02 <_malloc_r+0x22>
 801abbe:	6025      	str	r5, [r4, #0]
 801abc0:	e7de      	b.n	801ab80 <_malloc_r+0xa0>
 801abc2:	bf00      	nop
 801abc4:	24006970 	.word	0x24006970

0801abc8 <_sbrk_r>:
 801abc8:	b538      	push	{r3, r4, r5, lr}
 801abca:	4d06      	ldr	r5, [pc, #24]	; (801abe4 <_sbrk_r+0x1c>)
 801abcc:	2300      	movs	r3, #0
 801abce:	4604      	mov	r4, r0
 801abd0:	4608      	mov	r0, r1
 801abd2:	602b      	str	r3, [r5, #0]
 801abd4:	f7e9 ff2e 	bl	8004a34 <_sbrk>
 801abd8:	1c43      	adds	r3, r0, #1
 801abda:	d102      	bne.n	801abe2 <_sbrk_r+0x1a>
 801abdc:	682b      	ldr	r3, [r5, #0]
 801abde:	b103      	cbz	r3, 801abe2 <_sbrk_r+0x1a>
 801abe0:	6023      	str	r3, [r4, #0]
 801abe2:	bd38      	pop	{r3, r4, r5, pc}
 801abe4:	24006978 	.word	0x24006978

0801abe8 <__sread>:
 801abe8:	b510      	push	{r4, lr}
 801abea:	460c      	mov	r4, r1
 801abec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abf0:	f000 f8a0 	bl	801ad34 <_read_r>
 801abf4:	2800      	cmp	r0, #0
 801abf6:	bfab      	itete	ge
 801abf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801abfa:	89a3      	ldrhlt	r3, [r4, #12]
 801abfc:	181b      	addge	r3, r3, r0
 801abfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ac02:	bfac      	ite	ge
 801ac04:	6563      	strge	r3, [r4, #84]	; 0x54
 801ac06:	81a3      	strhlt	r3, [r4, #12]
 801ac08:	bd10      	pop	{r4, pc}

0801ac0a <__swrite>:
 801ac0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac0e:	461f      	mov	r7, r3
 801ac10:	898b      	ldrh	r3, [r1, #12]
 801ac12:	05db      	lsls	r3, r3, #23
 801ac14:	4605      	mov	r5, r0
 801ac16:	460c      	mov	r4, r1
 801ac18:	4616      	mov	r6, r2
 801ac1a:	d505      	bpl.n	801ac28 <__swrite+0x1e>
 801ac1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac20:	2302      	movs	r3, #2
 801ac22:	2200      	movs	r2, #0
 801ac24:	f000 f868 	bl	801acf8 <_lseek_r>
 801ac28:	89a3      	ldrh	r3, [r4, #12]
 801ac2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac32:	81a3      	strh	r3, [r4, #12]
 801ac34:	4632      	mov	r2, r6
 801ac36:	463b      	mov	r3, r7
 801ac38:	4628      	mov	r0, r5
 801ac3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac3e:	f000 b817 	b.w	801ac70 <_write_r>

0801ac42 <__sseek>:
 801ac42:	b510      	push	{r4, lr}
 801ac44:	460c      	mov	r4, r1
 801ac46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac4a:	f000 f855 	bl	801acf8 <_lseek_r>
 801ac4e:	1c43      	adds	r3, r0, #1
 801ac50:	89a3      	ldrh	r3, [r4, #12]
 801ac52:	bf15      	itete	ne
 801ac54:	6560      	strne	r0, [r4, #84]	; 0x54
 801ac56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ac5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ac5e:	81a3      	strheq	r3, [r4, #12]
 801ac60:	bf18      	it	ne
 801ac62:	81a3      	strhne	r3, [r4, #12]
 801ac64:	bd10      	pop	{r4, pc}

0801ac66 <__sclose>:
 801ac66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac6a:	f000 b813 	b.w	801ac94 <_close_r>
	...

0801ac70 <_write_r>:
 801ac70:	b538      	push	{r3, r4, r5, lr}
 801ac72:	4d07      	ldr	r5, [pc, #28]	; (801ac90 <_write_r+0x20>)
 801ac74:	4604      	mov	r4, r0
 801ac76:	4608      	mov	r0, r1
 801ac78:	4611      	mov	r1, r2
 801ac7a:	2200      	movs	r2, #0
 801ac7c:	602a      	str	r2, [r5, #0]
 801ac7e:	461a      	mov	r2, r3
 801ac80:	f7e9 fe87 	bl	8004992 <_write>
 801ac84:	1c43      	adds	r3, r0, #1
 801ac86:	d102      	bne.n	801ac8e <_write_r+0x1e>
 801ac88:	682b      	ldr	r3, [r5, #0]
 801ac8a:	b103      	cbz	r3, 801ac8e <_write_r+0x1e>
 801ac8c:	6023      	str	r3, [r4, #0]
 801ac8e:	bd38      	pop	{r3, r4, r5, pc}
 801ac90:	24006978 	.word	0x24006978

0801ac94 <_close_r>:
 801ac94:	b538      	push	{r3, r4, r5, lr}
 801ac96:	4d06      	ldr	r5, [pc, #24]	; (801acb0 <_close_r+0x1c>)
 801ac98:	2300      	movs	r3, #0
 801ac9a:	4604      	mov	r4, r0
 801ac9c:	4608      	mov	r0, r1
 801ac9e:	602b      	str	r3, [r5, #0]
 801aca0:	f7e9 fe93 	bl	80049ca <_close>
 801aca4:	1c43      	adds	r3, r0, #1
 801aca6:	d102      	bne.n	801acae <_close_r+0x1a>
 801aca8:	682b      	ldr	r3, [r5, #0]
 801acaa:	b103      	cbz	r3, 801acae <_close_r+0x1a>
 801acac:	6023      	str	r3, [r4, #0]
 801acae:	bd38      	pop	{r3, r4, r5, pc}
 801acb0:	24006978 	.word	0x24006978

0801acb4 <_fstat_r>:
 801acb4:	b538      	push	{r3, r4, r5, lr}
 801acb6:	4d07      	ldr	r5, [pc, #28]	; (801acd4 <_fstat_r+0x20>)
 801acb8:	2300      	movs	r3, #0
 801acba:	4604      	mov	r4, r0
 801acbc:	4608      	mov	r0, r1
 801acbe:	4611      	mov	r1, r2
 801acc0:	602b      	str	r3, [r5, #0]
 801acc2:	f7e9 fe8e 	bl	80049e2 <_fstat>
 801acc6:	1c43      	adds	r3, r0, #1
 801acc8:	d102      	bne.n	801acd0 <_fstat_r+0x1c>
 801acca:	682b      	ldr	r3, [r5, #0]
 801accc:	b103      	cbz	r3, 801acd0 <_fstat_r+0x1c>
 801acce:	6023      	str	r3, [r4, #0]
 801acd0:	bd38      	pop	{r3, r4, r5, pc}
 801acd2:	bf00      	nop
 801acd4:	24006978 	.word	0x24006978

0801acd8 <_isatty_r>:
 801acd8:	b538      	push	{r3, r4, r5, lr}
 801acda:	4d06      	ldr	r5, [pc, #24]	; (801acf4 <_isatty_r+0x1c>)
 801acdc:	2300      	movs	r3, #0
 801acde:	4604      	mov	r4, r0
 801ace0:	4608      	mov	r0, r1
 801ace2:	602b      	str	r3, [r5, #0]
 801ace4:	f7e9 fe8d 	bl	8004a02 <_isatty>
 801ace8:	1c43      	adds	r3, r0, #1
 801acea:	d102      	bne.n	801acf2 <_isatty_r+0x1a>
 801acec:	682b      	ldr	r3, [r5, #0]
 801acee:	b103      	cbz	r3, 801acf2 <_isatty_r+0x1a>
 801acf0:	6023      	str	r3, [r4, #0]
 801acf2:	bd38      	pop	{r3, r4, r5, pc}
 801acf4:	24006978 	.word	0x24006978

0801acf8 <_lseek_r>:
 801acf8:	b538      	push	{r3, r4, r5, lr}
 801acfa:	4d07      	ldr	r5, [pc, #28]	; (801ad18 <_lseek_r+0x20>)
 801acfc:	4604      	mov	r4, r0
 801acfe:	4608      	mov	r0, r1
 801ad00:	4611      	mov	r1, r2
 801ad02:	2200      	movs	r2, #0
 801ad04:	602a      	str	r2, [r5, #0]
 801ad06:	461a      	mov	r2, r3
 801ad08:	f7e9 fe86 	bl	8004a18 <_lseek>
 801ad0c:	1c43      	adds	r3, r0, #1
 801ad0e:	d102      	bne.n	801ad16 <_lseek_r+0x1e>
 801ad10:	682b      	ldr	r3, [r5, #0]
 801ad12:	b103      	cbz	r3, 801ad16 <_lseek_r+0x1e>
 801ad14:	6023      	str	r3, [r4, #0]
 801ad16:	bd38      	pop	{r3, r4, r5, pc}
 801ad18:	24006978 	.word	0x24006978

0801ad1c <__malloc_lock>:
 801ad1c:	4801      	ldr	r0, [pc, #4]	; (801ad24 <__malloc_lock+0x8>)
 801ad1e:	f7ff be0b 	b.w	801a938 <__retarget_lock_acquire_recursive>
 801ad22:	bf00      	nop
 801ad24:	2400696c 	.word	0x2400696c

0801ad28 <__malloc_unlock>:
 801ad28:	4801      	ldr	r0, [pc, #4]	; (801ad30 <__malloc_unlock+0x8>)
 801ad2a:	f7ff be06 	b.w	801a93a <__retarget_lock_release_recursive>
 801ad2e:	bf00      	nop
 801ad30:	2400696c 	.word	0x2400696c

0801ad34 <_read_r>:
 801ad34:	b538      	push	{r3, r4, r5, lr}
 801ad36:	4d07      	ldr	r5, [pc, #28]	; (801ad54 <_read_r+0x20>)
 801ad38:	4604      	mov	r4, r0
 801ad3a:	4608      	mov	r0, r1
 801ad3c:	4611      	mov	r1, r2
 801ad3e:	2200      	movs	r2, #0
 801ad40:	602a      	str	r2, [r5, #0]
 801ad42:	461a      	mov	r2, r3
 801ad44:	f7e9 fe08 	bl	8004958 <_read>
 801ad48:	1c43      	adds	r3, r0, #1
 801ad4a:	d102      	bne.n	801ad52 <_read_r+0x1e>
 801ad4c:	682b      	ldr	r3, [r5, #0]
 801ad4e:	b103      	cbz	r3, 801ad52 <_read_r+0x1e>
 801ad50:	6023      	str	r3, [r4, #0]
 801ad52:	bd38      	pop	{r3, r4, r5, pc}
 801ad54:	24006978 	.word	0x24006978

0801ad58 <_init>:
 801ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad5a:	bf00      	nop
 801ad5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad5e:	bc08      	pop	{r3}
 801ad60:	469e      	mov	lr, r3
 801ad62:	4770      	bx	lr

0801ad64 <_fini>:
 801ad64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad66:	bf00      	nop
 801ad68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad6a:	bc08      	pop	{r3}
 801ad6c:	469e      	mov	lr, r3
 801ad6e:	4770      	bx	lr
