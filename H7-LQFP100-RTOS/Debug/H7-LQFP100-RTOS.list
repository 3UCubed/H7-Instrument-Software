
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a730  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801a9d0  0801a9d0  0002a9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ae68  0801ae68  0002ae68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ae70  0801ae70  0002ae70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ae74  0801ae74  0002ae74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  0801ae78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000681c  24000120  0801af80  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400693c  0801af80  0003693c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004119b  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d73  00000000  00000000  000712d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ba8  00000000  00000000  00079048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002860  00000000  00000000  0007bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000467e3  00000000  00000000  0007e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000431bb  00000000  00000000  000c4c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196a5c  00000000  00000000  00107dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029e84a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bc8c  00000000  00000000  0029e89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a9b8 	.word	0x0801a9b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0801a9b8 	.word	0x0801a9b8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fb83 	bl	8005d74 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f926 	bl	80038c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fc9e 	bl	8006fc4 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f919 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fde1 	bl	800627c <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f900 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 fdd3 	bl	800627c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f8f2 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 fdc5 	bl	800627c <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f8e4 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 fdb7 	bl	800627c <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f8d6 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 fda8 	bl	800627c <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f8c7 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 fd99 	bl	800627c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f8b8 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 fd8a 	bl	800627c <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f8a9 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 fd7b 	bl	800627c <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f89a 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fd6c 	bl	800627c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f88b 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fd5d 	bl	800627c <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f87c 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 fd4e 	bl	800627c <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f86d 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400013c 	.word	0x2400013c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 fa6b 	bl	8005d74 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f80e 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fcd6 	bl	800627c <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f002 fff5 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fcc8 	bl	800627c <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f002 ffe7 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fcba 	bl	800627c <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f002 ffd9 	bl	80038c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fcac 	bl	800627c <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f002 ffcb 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001a0 	.word	0x240001a0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fa4e 	bl	800ae9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fa42 	bl	800ae9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fa36 	bl	800ae9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 f8e1 	bl	8007c3c <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 ff20 	bl	80038c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 ff24 	bl	800592c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 ff1e 	bl	800592c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 f881 	bl	8007c3c <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 fec0 	bl	80038c4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000204 	.word	0x24000204
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400027c 	.word	0x2400027c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 fa0d 	bl	8019fac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fc49 	bl	8007430 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fe8e 	bl	80038c4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fe64 	bl	8007890 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 fe79 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002f4 	.word	0x240002f4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a f921 	bl	800ae9c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f006 ffcc 	bl	8007c3c <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fe0b 	bl	80038c4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fb16 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fb2d 	bl	8007324 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000308 	.word	0x24000308
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 faed 	bl	80072f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fb04 	bl	8007324 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fae5 	bl	80072f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fafc 	bl	8007324 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fadd 	bl	80072f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 faf4 	bl	8007324 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fad5 	bl	80072f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 faec 	bl	8007324 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 facd 	bl	80072f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fae4 	bl	8007324 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fac5 	bl	80072f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fadc 	bl	8007324 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fabd 	bl	80072f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fad4 	bl	8007324 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fab5 	bl	80072f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 facc 	bl	8007324 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 f8ee 	bl	8019fac <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 fea4 	bl	800abb8 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fe49 	bl	800abb8 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 fc96 	bl	800a8e8 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	24000380 	.word	0x24000380
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fbea 	bl	800a8e8 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fcf6 	bl	800abb8 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fc93 	bl	800abb8 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fae0 	bl	800a8e8 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fbbe 	bl	800abb8 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b05      	cmp	r3, #5
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 f9c9 	bl	800a8e8 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fad6 	bl	800abb8 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	24000380 	.word	0x24000380
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fbda 	bl	8019fac <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 f9b1 	bl	800abb8 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f008 ffff 	bl	800a8e8 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f913 	bl	800abb8 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fa75 	bl	8019fac <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fa6c 	bl	8019fac <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 fecb 	bl	800a8e8 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f008 feb8 	bl	800a8e8 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 f9b7 	bl	8019fac <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 f9b0 	bl	8019fac <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f008 fe11 	bl	800a8e8 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f008 fe29 	bl	800aa0c <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 fed1 	bl	800abb8 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fd1d 	bl	800a8e8 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	24000380 	.word	0x24000380
 8001f2c:	52002000 	.word	0x52002000

08001f30 <__NVIC_SystemReset>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_SystemReset+0x28>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
    __NOP();
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <__NVIC_SystemReset+0x20>
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0004 	.word	0x05fa0004

08001f5c <handle_error>:
#include "eeprom.h"

uint16_t VirtAddVarTab[NB_OF_VAR] = { 0x5555, 0x6666, 0x7777, 0x8888, 0x9999, 0xAAAA };
uint16_t VarDataTab[NB_OF_VAR] = { 0, 0, 0, 0, 0, 0 };

void handle_error(ERROR_STRUCT error) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	80b8      	strh	r0, [r7, #4]

	switch (error.category) {
 8001f64:	793b      	ldrb	r3, [r7, #4]
 8001f66:	2b05      	cmp	r3, #5
 8001f68:	d847      	bhi.n	8001ffa <handle_error+0x9e>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <handle_error+0x14>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	08001fa7 	.word	0x08001fa7
 8001f78:	08001fb9 	.word	0x08001fb9
 8001f7c:	08001fcb 	.word	0x08001fcb
 8001f80:	08001fdb 	.word	0x08001fdb
 8001f84:	08001feb 	.word	0x08001feb
	case EC_power_supply_rail:
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f88:	4b20      	ldr	r3, [pc, #128]	; (800200c <handle_error+0xb0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f014 ff44 	bl	8016e1c <osEventFlagsSet>
		increment_error_counter(error.category);
 8001f94:	793b      	ldrb	r3, [r7, #4]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f847 	bl	800202a <increment_error_counter>
		send_error_packet(error);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8c1 	bl	8002124 <send_error_packet>
		NVIC_SystemReset();
 8001fa2:	f7ff ffc5 	bl	8001f30 <__NVIC_SystemReset>
		break;
	case EC_seu:
		increment_error_counter(error.category);
 8001fa6:	793b      	ldrb	r3, [r7, #4]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f83e 	bl	800202a <increment_error_counter>
		send_error_packet(error);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8b8 	bl	8002124 <send_error_packet>
		NVIC_SystemReset();
 8001fb4:	f7ff ffbc 	bl	8001f30 <__NVIC_SystemReset>
		break;
	case EC_peripheral:
		increment_error_counter(error.category);
 8001fb8:	793b      	ldrb	r3, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f835 	bl	800202a <increment_error_counter>
		send_error_packet(error);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8af 	bl	8002124 <send_error_packet>
		NVIC_SystemReset();
 8001fc6:	f7ff ffb3 	bl	8001f30 <__NVIC_SystemReset>
		break;
	case EC_brownout:
		increment_error_counter(error.category);
 8001fca:	793b      	ldrb	r3, [r7, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 f82c 	bl	800202a <increment_error_counter>
		send_error_packet(error);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8a6 	bl	8002124 <send_error_packet>
		break;
 8001fd8:	e013      	b.n	8002002 <handle_error+0xa6>
	case EC_software_reset:
		increment_error_counter(error.category);
 8001fda:	793b      	ldrb	r3, [r7, #4]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 f824 	bl	800202a <increment_error_counter>
		send_error_packet(error);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f89e 	bl	8002124 <send_error_packet>
		break;
 8001fe8:	e00b      	b.n	8002002 <handle_error+0xa6>
	case EC_watchdog:
		increment_error_counter(error.category);
 8001fea:	793b      	ldrb	r3, [r7, #4]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 f81c 	bl	800202a <increment_error_counter>
		send_error_packet(error);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f896 	bl	8002124 <send_error_packet>
		break;
 8001ff8:	e003      	b.n	8002002 <handle_error+0xa6>
	default:
		send_error_packet(error);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f892 	bl	8002124 <send_error_packet>
		break;
 8002000:	bf00      	nop
	}
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	24001a4c 	.word	0x24001a4c

08002010 <error_counter_init>:

void error_counter_init() {
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002014:	f008 fcfa 	bl	800aa0c <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8002018:	f7fe febe 	bl	8000d98 <EE_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <error_counter_init+0x16>
		Error_Handler();
 8002022:	f001 fc4f 	bl	80038c4 <Error_Handler>
	}
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <increment_error_counter>:

void increment_error_counter(ERROR_CATEGORY category) {
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
	uint16_t counter_value;
	counter_value = get_eeprom_error_counter(category);
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f810 	bl	800205c <get_eeprom_error_counter>
 800203c:	4603      	mov	r3, r0
 800203e:	81fb      	strh	r3, [r7, #14]
	counter_value++;
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	3301      	adds	r3, #1
 8002044:	81fb      	strh	r3, [r7, #14]
	set_eeprom_error_counter(category, counter_value);
 8002046:	89fa      	ldrh	r2, [r7, #14]
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f823 	bl	8002098 <set_eeprom_error_counter>

}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <get_eeprom_error_counter>:

uint16_t get_eeprom_error_counter(ERROR_CATEGORY category) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
	uint16_t retval = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	81fb      	strh	r3, [r7, #14]
	if ((EE_ReadVariable(VirtAddVarTab[category], &retval)) != HAL_OK) {
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4a09      	ldr	r2, [pc, #36]	; (8002094 <get_eeprom_error_counter+0x38>)
 800206e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002072:	f107 020e 	add.w	r2, r7, #14
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fb45 	bl	8001708 <EE_ReadVariable>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <get_eeprom_error_counter+0x2c>
		Error_Handler();
 8002084:	f001 fc1e 	bl	80038c4 <Error_Handler>
	}
	return retval;
 8002088:	89fb      	ldrh	r3, [r7, #14]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	24000000 	.word	0x24000000

08002098 <set_eeprom_error_counter>:

void set_eeprom_error_counter(ERROR_CATEGORY category,
		uint16_t new_counter_value) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	460a      	mov	r2, r1
 80020a2:	71fb      	strb	r3, [r7, #7]
 80020a4:	4613      	mov	r3, r2
 80020a6:	80bb      	strh	r3, [r7, #4]
	VarDataTab[category] = new_counter_value;
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	490c      	ldr	r1, [pc, #48]	; (80020dc <set_eeprom_error_counter+0x44>)
 80020ac:	88ba      	ldrh	r2, [r7, #4]
 80020ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	if ((EE_WriteVariable(VirtAddVarTab[category], VarDataTab[category]))
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <set_eeprom_error_counter+0x48>)
 80020b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <set_eeprom_error_counter+0x44>)
 80020be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020c2:	4619      	mov	r1, r3
 80020c4:	4610      	mov	r0, r2
 80020c6:	f7ff fb67 	bl	8001798 <EE_WriteVariable>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <set_eeprom_error_counter+0x3c>
			!= HAL_OK) {
		Error_Handler();
 80020d0:	f001 fbf8 	bl	80038c4 <Error_Handler>
	}
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	24000384 	.word	0x24000384
 80020e0:	24000000 	.word	0x24000000

080020e4 <reset_eeprom_error_counters>:

void reset_eeprom_error_counters() {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_VAR; i++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	e00f      	b.n	8002110 <reset_eeprom_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0x00)) != HAL_OK) {
 80020f0:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <reset_eeprom_error_counters+0x3c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fb4c 	bl	8001798 <EE_WriteVariable>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <reset_eeprom_error_counters+0x26>
			Error_Handler();
 8002106:	f001 fbdd 	bl	80038c4 <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3301      	adds	r3, #1
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b05      	cmp	r3, #5
 8002114:	ddec      	ble.n	80020f0 <reset_eeprom_error_counters+0xc>
		}
	}
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	24000000 	.word	0x24000000

08002124 <send_error_packet>:

void send_error_packet(ERROR_STRUCT error) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	80b8      	strh	r0, [r7, #4]
	uint8_t buffer[ERROR_PACKET_SIZE];

	buffer[0] = ERROR_PACKET_SYNC;
 800212c:	23dd      	movs	r3, #221	; 0xdd
 800212e:	733b      	strb	r3, [r7, #12]
	buffer[1] = ERROR_PACKET_SYNC;
 8002130:	23dd      	movs	r3, #221	; 0xdd
 8002132:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 8002134:	793b      	ldrb	r3, [r7, #4]
 8002136:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 8002138:	797b      	ldrb	r3, [r7, #5]
 800213a:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart1, buffer, ERROR_PACKET_SIZE, 100);
 800213c:	f107 010c 	add.w	r1, r7, #12
 8002140:	2364      	movs	r3, #100	; 0x64
 8002142:	2204      	movs	r2, #4
 8002144:	4804      	ldr	r0, [pc, #16]	; (8002158 <send_error_packet+0x34>)
 8002146:	f011 ff05 	bl	8013f54 <HAL_UART_Transmit>
	send_junk_packet();
 800214a:	f000 f807 	bl	800215c <send_junk_packet>
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	24001dfc 	.word	0x24001dfc

0800215c <send_junk_packet>:

void send_junk_packet() {
 800215c:	b580      	push	{r7, lr}
 800215e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8002162:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800216a:	e00d      	b.n	8002188 <send_junk_packet+0x2c>
		buffer[i] = 0xEE;
 800216c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002170:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 8002174:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002178:	4413      	add	r3, r2
 800217a:	22ee      	movs	r2, #238	; 0xee
 800217c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 800217e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002182:	3301      	adds	r3, #1
 8002184:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002188:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002190:	dbec      	blt.n	800216c <send_junk_packet+0x10>
	}
	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
 8002192:	1d39      	adds	r1, r7, #4
 8002194:	2364      	movs	r3, #100	; 0x64
 8002196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219a:	4804      	ldr	r0, [pc, #16]	; (80021ac <send_junk_packet+0x50>)
 800219c:	f011 feda 	bl	8013f54 <HAL_UART_Transmit>
}
 80021a0:	bf00      	nop
 80021a2:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	24001dfc 	.word	0x24001dfc

080021b0 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <vApplicationTickHook+0x18>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	4a03      	ldr	r2, [pc, #12]	; (80021c8 <vApplicationTickHook+0x18>)
 80021bc:	6013      	str	r3, [r2, #0]
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	24001a94 	.word	0x24001a94

080021cc <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80021e8:	4a24      	ldr	r2, [pc, #144]	; (800227c <MX_FREERTOS_Init+0x98>)
 80021ea:	2100      	movs	r1, #0
 80021ec:	4824      	ldr	r0, [pc, #144]	; (8002280 <MX_FREERTOS_Init+0x9c>)
 80021ee:	f014 fd09 	bl	8016c04 <osThreadNew>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <MX_FREERTOS_Init+0xa0>)
 80021f6:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80021f8:	4a23      	ldr	r2, [pc, #140]	; (8002288 <MX_FREERTOS_Init+0xa4>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	4823      	ldr	r0, [pc, #140]	; (800228c <MX_FREERTOS_Init+0xa8>)
 80021fe:	f014 fd01 	bl	8016c04 <osThreadNew>
 8002202:	4603      	mov	r3, r0
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <MX_FREERTOS_Init+0xac>)
 8002206:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002208:	4a22      	ldr	r2, [pc, #136]	; (8002294 <MX_FREERTOS_Init+0xb0>)
 800220a:	2100      	movs	r1, #0
 800220c:	4822      	ldr	r0, [pc, #136]	; (8002298 <MX_FREERTOS_Init+0xb4>)
 800220e:	f014 fcf9 	bl	8016c04 <osThreadNew>
 8002212:	4603      	mov	r3, r0
 8002214:	4a21      	ldr	r2, [pc, #132]	; (800229c <MX_FREERTOS_Init+0xb8>)
 8002216:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002218:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <MX_FREERTOS_Init+0xbc>)
 800221a:	2100      	movs	r1, #0
 800221c:	4821      	ldr	r0, [pc, #132]	; (80022a4 <MX_FREERTOS_Init+0xc0>)
 800221e:	f014 fcf1 	bl	8016c04 <osThreadNew>
 8002222:	4603      	mov	r3, r0
 8002224:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <MX_FREERTOS_Init+0xc4>)
 8002226:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002228:	4a20      	ldr	r2, [pc, #128]	; (80022ac <MX_FREERTOS_Init+0xc8>)
 800222a:	2100      	movs	r1, #0
 800222c:	4820      	ldr	r0, [pc, #128]	; (80022b0 <MX_FREERTOS_Init+0xcc>)
 800222e:	f014 fce9 	bl	8016c04 <osThreadNew>
 8002232:	4603      	mov	r3, r0
 8002234:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <MX_FREERTOS_Init+0xd0>)
 8002236:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <MX_FREERTOS_Init+0xd4>)
 800223a:	2100      	movs	r1, #0
 800223c:	481f      	ldr	r0, [pc, #124]	; (80022bc <MX_FREERTOS_Init+0xd8>)
 800223e:	f014 fce1 	bl	8016c04 <osThreadNew>
 8002242:	4603      	mov	r3, r0
 8002244:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <MX_FREERTOS_Init+0xdc>)
 8002246:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002248:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <MX_FREERTOS_Init+0xe0>)
 800224a:	2100      	movs	r1, #0
 800224c:	481e      	ldr	r0, [pc, #120]	; (80022c8 <MX_FREERTOS_Init+0xe4>)
 800224e:	f014 fcd9 	bl	8016c04 <osThreadNew>
 8002252:	4603      	mov	r3, r0
 8002254:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <MX_FREERTOS_Init+0xe8>)
 8002256:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <MX_FREERTOS_Init+0xec>)
 800225a:	2100      	movs	r1, #0
 800225c:	481d      	ldr	r0, [pc, #116]	; (80022d4 <MX_FREERTOS_Init+0xf0>)
 800225e:	f014 fcd1 	bl	8016c04 <osThreadNew>
 8002262:	4603      	mov	r3, r0
 8002264:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <MX_FREERTOS_Init+0xf4>)
 8002266:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002268:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <MX_FREERTOS_Init+0xf8>)
 800226a:	2100      	movs	r1, #0
 800226c:	481c      	ldr	r0, [pc, #112]	; (80022e0 <MX_FREERTOS_Init+0xfc>)
 800226e:	f014 fcc9 	bl	8016c04 <osThreadNew>
 8002272:	4603      	mov	r3, r0
 8002274:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <MX_FREERTOS_Init+0x100>)
 8002276:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	0801ac38 	.word	0x0801ac38
 8002280:	080022e9 	.word	0x080022e9
 8002284:	24000390 	.word	0x24000390
 8002288:	0801ac5c 	.word	0x0801ac5c
 800228c:	08002311 	.word	0x08002311
 8002290:	240005f0 	.word	0x240005f0
 8002294:	0801ac80 	.word	0x0801ac80
 8002298:	08002339 	.word	0x08002339
 800229c:	24000850 	.word	0x24000850
 80022a0:	0801aca4 	.word	0x0801aca4
 80022a4:	08002361 	.word	0x08002361
 80022a8:	24000ab0 	.word	0x24000ab0
 80022ac:	0801acc8 	.word	0x0801acc8
 80022b0:	080023d9 	.word	0x080023d9
 80022b4:	24000d10 	.word	0x24000d10
 80022b8:	0801acec 	.word	0x0801acec
 80022bc:	08002451 	.word	0x08002451
 80022c0:	24000f70 	.word	0x24000f70
 80022c4:	0801ad10 	.word	0x0801ad10
 80022c8:	08002481 	.word	0x08002481
 80022cc:	240011d0 	.word	0x240011d0
 80022d0:	0801ad34 	.word	0x0801ad34
 80022d4:	080024b1 	.word	0x080024b1
 80022d8:	24001430 	.word	0x24001430
 80022dc:	0801ad58 	.word	0x0801ad58
 80022e0:	08002581 	.word	0x08002581
 80022e4:	24001690 	.word	0x24001690

080022e8 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <PMT_init+0x24>)
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022f8:	2200      	movs	r2, #0
 80022fa:	2101      	movs	r1, #1
 80022fc:	f014 fe04 	bl	8016f08 <osEventFlagsWait>

		create_pmt_packet();
 8002300:	f001 faee 	bl	80038e0 <create_pmt_packet>

		osThreadYield();
 8002304:	f014 fd10 	bl	8016d28 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002308:	e7f2      	b.n	80022f0 <PMT_init+0x8>
 800230a:	bf00      	nop
 800230c:	24001a44 	.word	0x24001a44

08002310 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <ERPA_init+0x24>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002320:	2200      	movs	r2, #0
 8002322:	2102      	movs	r1, #2
 8002324:	f014 fdf0 	bl	8016f08 <osEventFlagsWait>

		create_erpa_packet();
 8002328:	f001 fb20 	bl	800396c <create_erpa_packet>

		osThreadYield();
 800232c:	f014 fcfc 	bl	8016d28 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002330:	e7f2      	b.n	8002318 <ERPA_init+0x8>
 8002332:	bf00      	nop
 8002334:	24001a44 	.word	0x24001a44

08002338 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HK_init+0x24>)
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002348:	2200      	movs	r2, #0
 800234a:	2104      	movs	r1, #4
 800234c:	f014 fddc 	bl	8016f08 <osEventFlagsWait>

		create_hk_packet();
 8002350:	f001 fb6a 	bl	8003a28 <create_hk_packet>

		osThreadYield();
 8002354:	f014 fce8 	bl	8016d28 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002358:	e7f2      	b.n	8002340 <HK_init+0x8>
 800235a:	bf00      	nop
 800235c:	24001a44 	.word	0x24001a44

08002360 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <AUTOINIT_init+0x70>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002370:	2200      	movs	r2, #0
 8002372:	2104      	movs	r1, #4
 8002374:	f014 fdc8 	bl	8016f08 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	e012      	b.n	80023a4 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800237e:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <AUTOINIT_init+0x74>)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <AUTOINIT_init+0x74>)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	889b      	ldrh	r3, [r3, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	4619      	mov	r1, r3
 8002394:	f008 ff4a 	bl	800b22c <HAL_GPIO_WritePin>
			osDelay(100);
 8002398:	2064      	movs	r0, #100	; 0x64
 800239a:	f014 fce5 	bl	8016d68 <osDelay>
		for (int i = 0; i < 7; i++) {
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3301      	adds	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	dde9      	ble.n	800237e <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80023aa:	2308      	movs	r3, #8
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	e008      	b.n	80023c2 <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 f8b2 	bl	8005520 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	3301      	adds	r3, #1
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b0d      	cmp	r3, #13
 80023c6:	ddf3      	ble.n	80023b0 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80023c8:	f014 fcae 	bl	8016d28 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80023cc:	e7cc      	b.n	8002368 <AUTOINIT_init+0x8>
 80023ce:	bf00      	nop
 80023d0:	24001a48 	.word	0x24001a48
 80023d4:	0801ad7c 	.word	0x0801ad7c

080023d8 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <AUTODEINIT_init+0x70>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023e8:	2200      	movs	r2, #0
 80023ea:	2108      	movs	r1, #8
 80023ec:	f014 fd8c 	bl	8016f08 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80023f0:	230d      	movs	r3, #13
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e008      	b.n	8002408 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 f88f 	bl	8005520 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3b01      	subs	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b07      	cmp	r3, #7
 800240c:	dcf3      	bgt.n	80023f6 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800240e:	2306      	movs	r3, #6
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	e012      	b.n	800243a <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002414:	4a0d      	ldr	r2, [pc, #52]	; (800244c <AUTODEINIT_init+0x74>)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800241c:	4a0b      	ldr	r2, [pc, #44]	; (800244c <AUTODEINIT_init+0x74>)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	889b      	ldrh	r3, [r3, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	4619      	mov	r1, r3
 800242a:	f008 feff 	bl	800b22c <HAL_GPIO_WritePin>
			osDelay(100);
 800242e:	2064      	movs	r0, #100	; 0x64
 8002430:	f014 fc9a 	bl	8016d68 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	3b01      	subs	r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	dae9      	bge.n	8002414 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8002440:	f014 fc72 	bl	8016d28 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002444:	e7cc      	b.n	80023e0 <AUTODEINIT_init+0x8>
 8002446:	bf00      	nop
 8002448:	24001a48 	.word	0x24001a48
 800244c:	0801ad7c 	.word	0x0801ad7c

08002450 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002458:	4b07      	ldr	r3, [pc, #28]	; (8002478 <Voltage_Monitor_init+0x28>)
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002460:	2200      	movs	r2, #0
 8002462:	2101      	movs	r1, #1
 8002464:	f014 fd50 	bl	8016f08 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <Voltage_Monitor_init+0x2c>)
 800246a:	f00b faac 	bl	800d9c6 <HAL_IWDG_Refresh>
	  set_rail_monitor();
 800246e:	f003 f877 	bl	8005560 <set_rail_monitor>
	  monitor_rails();
 8002472:	f003 f8f9 	bl	8005668 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002476:	e7ef      	b.n	8002458 <Voltage_Monitor_init+0x8>
 8002478:	24001a48 	.word	0x24001a48
 800247c:	24001a34 	.word	0x24001a34

08002480 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <STOP_init+0x2c>)
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002490:	2200      	movs	r2, #0
 8002492:	2102      	movs	r1, #2
 8002494:	f014 fd38 	bl	8016f08 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <STOP_init+0x2c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2102      	movs	r1, #2
 800249e:	4618      	mov	r0, r3
 80024a0:	f014 fd00 	bl	8016ea4 <osEventFlagsClear>

	  enter_stop();
 80024a4:	f001 f9ae 	bl	8003804 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80024a8:	e7ee      	b.n	8002488 <STOP_init+0x8>
 80024aa:	bf00      	nop
 80024ac:	24001a48 	.word	0x24001a48

080024b0 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <Science_init+0xb0>)
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024c0:	2200      	movs	r2, #0
 80024c2:	2101      	movs	r1, #1
 80024c4:	f014 fd20 	bl	8016f08 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e012      	b.n	80024f4 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80024ce:	4a25      	ldr	r2, [pc, #148]	; (8002564 <Science_init+0xb4>)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80024d6:	4a23      	ldr	r2, [pc, #140]	; (8002564 <Science_init+0xb4>)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	889b      	ldrh	r3, [r3, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4619      	mov	r1, r3
 80024e4:	f008 fea2 	bl	800b22c <HAL_GPIO_WritePin>
			osDelay(200);
 80024e8:	20c8      	movs	r0, #200	; 0xc8
 80024ea:	f014 fc3d 	bl	8016d68 <osDelay>
		for (int i = 0; i < 9; i++) {
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3301      	adds	r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	dde9      	ble.n	80024ce <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80024fa:	2308      	movs	r3, #8
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	e008      	b.n	8002512 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2101      	movs	r1, #1
 8002506:	4618      	mov	r0, r3
 8002508:	f003 f80a 	bl	8005520 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	3301      	adds	r3, #1
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b10      	cmp	r3, #16
 8002516:	ddf3      	ble.n	8002500 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8002518:	b672      	cpsid	i
}
 800251a:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 800251c:	2300      	movs	r3, #0
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2320      	movs	r3, #32
 8002522:	4a11      	ldr	r2, [pc, #68]	; (8002568 <Science_init+0xb8>)
 8002524:	2100      	movs	r1, #0
 8002526:	4811      	ldr	r0, [pc, #68]	; (800256c <Science_init+0xbc>)
 8002528:	f004 fffc 	bl	8007524 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <Science_init+0xc0>)
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <Science_init+0xc4>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <Science_init+0xc8>)
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800253e:	f001 fbc1 	bl	8003cc4 <reset_packet_sequence_numbers>
		TIM2->CCR4 = 312;
 8002542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002546:	f44f 729c 	mov.w	r2, #312	; 0x138
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 800254c:	2100      	movs	r1, #0
 800254e:	480b      	ldr	r0, [pc, #44]	; (800257c <Science_init+0xcc>)
 8002550:	f010 f976 	bl	8012840 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8002554:	b662      	cpsie	i
}
 8002556:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002558:	f014 fbe6 	bl	8016d28 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800255c:	e7ac      	b.n	80024b8 <Science_init+0x8>
 800255e:	bf00      	nop
 8002560:	24001a4c 	.word	0x24001a4c
 8002564:	0801ad7c 	.word	0x0801ad7c
 8002568:	2400000c 	.word	0x2400000c
 800256c:	240002f4 	.word	0x240002f4
 8002570:	24001a90 	.word	0x24001a90
 8002574:	24001a91 	.word	0x24001a91
 8002578:	24001a94 	.word	0x24001a94
 800257c:	24001d64 	.word	0x24001d64

08002580 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <Idle_init+0x94>)
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002590:	2200      	movs	r2, #0
 8002592:	2102      	movs	r1, #2
 8002594:	f014 fcb8 	bl	8016f08 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <Idle_init+0x98>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 800259e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025a2:	2200      	movs	r2, #0
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80025a6:	2100      	movs	r1, #0
 80025a8:	481c      	ldr	r0, [pc, #112]	; (800261c <Idle_init+0x9c>)
 80025aa:	f010 faa3 	bl	8012af4 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80025ae:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <Idle_init+0xa0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80025b4:	2100      	movs	r1, #0
 80025b6:	481b      	ldr	r0, [pc, #108]	; (8002624 <Idle_init+0xa4>)
 80025b8:	f005 f874 	bl	80076a4 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80025bc:	2310      	movs	r3, #16
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e008      	b.n	80025d4 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 ffa9 	bl	8005520 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b07      	cmp	r3, #7
 80025d8:	dcf3      	bgt.n	80025c2 <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80025da:	2308      	movs	r3, #8
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	e012      	b.n	8002606 <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <Idle_init+0xa8>)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80025e8:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <Idle_init+0xa8>)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	889b      	ldrh	r3, [r3, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	4619      	mov	r1, r3
 80025f6:	f008 fe19 	bl	800b22c <HAL_GPIO_WritePin>
			osDelay(200);
 80025fa:	20c8      	movs	r0, #200	; 0xc8
 80025fc:	f014 fbb4 	bl	8016d68 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3b01      	subs	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	dae9      	bge.n	80025e0 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 800260c:	f014 fb8c 	bl	8016d28 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002610:	e7ba      	b.n	8002588 <Idle_init+0x8>
 8002612:	bf00      	nop
 8002614:	24001a4c 	.word	0x24001a4c
 8002618:	24001a91 	.word	0x24001a91
 800261c:	24001d64 	.word	0x24001d64
 8002620:	24001a90 	.word	0x24001a90
 8002624:	240002f4 	.word	0x240002f4
 8002628:	0801ad7c 	.word	0x0801ad7c

0800262c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <MX_GPIO_Init+0xe8>)
 8002644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002648:	4a32      	ldr	r2, [pc, #200]	; (8002714 <MX_GPIO_Init+0xe8>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002652:	4b30      	ldr	r3, [pc, #192]	; (8002714 <MX_GPIO_Init+0xe8>)
 8002654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002660:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <MX_GPIO_Init+0xe8>)
 8002662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002666:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <MX_GPIO_Init+0xe8>)
 8002668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002670:	4b28      	ldr	r3, [pc, #160]	; (8002714 <MX_GPIO_Init+0xe8>)
 8002672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <MX_GPIO_Init+0xe8>)
 8002680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002684:	4a23      	ldr	r2, [pc, #140]	; (8002714 <MX_GPIO_Init+0xe8>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800268e:	4b21      	ldr	r3, [pc, #132]	; (8002714 <MX_GPIO_Init+0xe8>)
 8002690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <MX_GPIO_Init+0xe8>)
 800269e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a2:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <MX_GPIO_Init+0xe8>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <MX_GPIO_Init+0xe8>)
 80026ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80026ba:	2200      	movs	r2, #0
 80026bc:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80026c0:	4815      	ldr	r0, [pc, #84]	; (8002718 <MX_GPIO_Init+0xec>)
 80026c2:	f008 fdb3 	bl	800b22c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2164      	movs	r1, #100	; 0x64
 80026ca:	4814      	ldr	r0, [pc, #80]	; (800271c <MX_GPIO_Init+0xf0>)
 80026cc:	f008 fdae 	bl	800b22c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80026d0:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80026d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d6:	2301      	movs	r3, #1
 80026d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026da:	2302      	movs	r3, #2
 80026dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	480b      	ldr	r0, [pc, #44]	; (8002718 <MX_GPIO_Init+0xec>)
 80026ea:	f008 fbd7 	bl	800ae9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80026ee:	2364      	movs	r3, #100	; 0x64
 80026f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026f6:	2302      	movs	r3, #2
 80026f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	4805      	ldr	r0, [pc, #20]	; (800271c <MX_GPIO_Init+0xf0>)
 8002706:	f008 fbc9 	bl	800ae9c <HAL_GPIO_Init>

}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	; 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	58024400 	.word	0x58024400
 8002718:	58020800 	.word	0x58020800
 800271c:	58020400 	.word	0x58020400

08002720 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <MX_I2C1_Init+0x78>)
 8002726:	4a1d      	ldr	r2, [pc, #116]	; (800279c <MX_I2C1_Init+0x7c>)
 8002728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <MX_I2C1_Init+0x78>)
 800272c:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <MX_I2C1_Init+0x80>)
 800272e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <MX_I2C1_Init+0x78>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <MX_I2C1_Init+0x78>)
 8002738:	2201      	movs	r2, #1
 800273a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <MX_I2C1_Init+0x78>)
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <MX_I2C1_Init+0x78>)
 8002744:	2200      	movs	r2, #0
 8002746:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <MX_I2C1_Init+0x78>)
 800274a:	2200      	movs	r2, #0
 800274c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <MX_I2C1_Init+0x78>)
 8002750:	2200      	movs	r2, #0
 8002752:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_I2C1_Init+0x78>)
 8002756:	2200      	movs	r2, #0
 8002758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800275a:	480f      	ldr	r0, [pc, #60]	; (8002798 <MX_I2C1_Init+0x78>)
 800275c:	f008 fd80 	bl	800b260 <HAL_I2C_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002766:	f001 f8ad 	bl	80038c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800276a:	2100      	movs	r1, #0
 800276c:	480a      	ldr	r0, [pc, #40]	; (8002798 <MX_I2C1_Init+0x78>)
 800276e:	f00b f81f 	bl	800d7b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002778:	f001 f8a4 	bl	80038c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800277c:	2100      	movs	r1, #0
 800277e:	4806      	ldr	r0, [pc, #24]	; (8002798 <MX_I2C1_Init+0x78>)
 8002780:	f00b f861 	bl	800d846 <HAL_I2CEx_ConfigDigitalFilter>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800278a:	f001 f89b 	bl	80038c4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800278e:	2001      	movs	r0, #1
 8002790:	f00b f8a6 	bl	800d8e0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	240018f0 	.word	0x240018f0
 800279c:	40005400 	.word	0x40005400
 80027a0:	00100517 	.word	0x00100517

080027a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0ba      	sub	sp, #232	; 0xe8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	22c0      	movs	r2, #192	; 0xc0
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f017 fbf1 	bl	8019fac <memset>
  if(i2cHandle->Instance==I2C1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a5d      	ldr	r2, [pc, #372]	; (8002944 <HAL_I2C_MspInit+0x1a0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	f040 80b3 	bne.w	800293c <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027d6:	f04f 0208 	mov.w	r2, #8
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e8:	f107 0310 	add.w	r3, r7, #16
 80027ec:	4618      	mov	r0, r3
 80027ee:	f00c f999 	bl	800eb24 <HAL_RCCEx_PeriphCLKConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 80027f8:	f001 f864 	bl	80038c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fc:	4b52      	ldr	r3, [pc, #328]	; (8002948 <HAL_I2C_MspInit+0x1a4>)
 80027fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002802:	4a51      	ldr	r2, [pc, #324]	; (8002948 <HAL_I2C_MspInit+0x1a4>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800280c:	4b4e      	ldr	r3, [pc, #312]	; (8002948 <HAL_I2C_MspInit+0x1a4>)
 800280e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800281a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800281e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002822:	2312      	movs	r3, #18
 8002824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002834:	2304      	movs	r3, #4
 8002836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800283e:	4619      	mov	r1, r3
 8002840:	4842      	ldr	r0, [pc, #264]	; (800294c <HAL_I2C_MspInit+0x1a8>)
 8002842:	f008 fb2b 	bl	800ae9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002846:	4b40      	ldr	r3, [pc, #256]	; (8002948 <HAL_I2C_MspInit+0x1a4>)
 8002848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800284c:	4a3e      	ldr	r2, [pc, #248]	; (8002948 <HAL_I2C_MspInit+0x1a4>)
 800284e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002852:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002856:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <HAL_I2C_MspInit+0x1a4>)
 8002858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002864:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 8002866:	4a3b      	ldr	r2, [pc, #236]	; (8002954 <HAL_I2C_MspInit+0x1b0>)
 8002868:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 800286c:	2222      	movs	r2, #34	; 0x22
 800286e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002870:	4b37      	ldr	r3, [pc, #220]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 8002872:	2240      	movs	r2, #64	; 0x40
 8002874:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002876:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 8002878:	2200      	movs	r2, #0
 800287a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 800287e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002882:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 8002886:	2200      	movs	r2, #0
 8002888:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800288a:	4b31      	ldr	r3, [pc, #196]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002890:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002896:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 8002898:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800289c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289e:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80028a4:	482a      	ldr	r0, [pc, #168]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 80028a6:	f005 f9c9 	bl	8007c3c <HAL_DMA_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 80028b0:	f001 f808 	bl	80038c4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a26      	ldr	r2, [pc, #152]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
 80028ba:	4a25      	ldr	r2, [pc, #148]	; (8002950 <HAL_I2C_MspInit+0x1ac>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 80028c2:	4a26      	ldr	r2, [pc, #152]	; (800295c <HAL_I2C_MspInit+0x1b8>)
 80028c4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 80028c8:	2221      	movs	r2, #33	; 0x21
 80028ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d2:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 80028da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028de:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 80028f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028f8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028fa:	4b17      	ldr	r3, [pc, #92]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002900:	4815      	ldr	r0, [pc, #84]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 8002902:	f005 f99b 	bl	8007c3c <HAL_DMA_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 800290c:	f000 ffda 	bl	80038c4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a11      	ldr	r2, [pc, #68]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c
 8002916:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_I2C_MspInit+0x1b4>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	2105      	movs	r1, #5
 8002920:	201f      	movs	r0, #31
 8002922:	f004 fce5 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002926:	201f      	movs	r0, #31
 8002928:	f004 fcfc 	bl	8007324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800292c:	2200      	movs	r2, #0
 800292e:	2105      	movs	r1, #5
 8002930:	2020      	movs	r0, #32
 8002932:	f004 fcdd 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002936:	2020      	movs	r0, #32
 8002938:	f004 fcf4 	bl	8007324 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800293c:	bf00      	nop
 800293e:	37e8      	adds	r7, #232	; 0xe8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40005400 	.word	0x40005400
 8002948:	58024400 	.word	0x58024400
 800294c:	58020400 	.word	0x58020400
 8002950:	24001944 	.word	0x24001944
 8002954:	400200a0 	.word	0x400200a0
 8002958:	240019bc 	.word	0x240019bc
 800295c:	400200b8 	.word	0x400200b8

08002960 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MX_IWDG1_Init+0x34>)
 8002966:	4a0c      	ldr	r2, [pc, #48]	; (8002998 <MX_IWDG1_Init+0x38>)
 8002968:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <MX_IWDG1_Init+0x34>)
 800296c:	2204      	movs	r2, #4
 800296e:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 499;
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <MX_IWDG1_Init+0x34>)
 8002972:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002976:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 499;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_IWDG1_Init+0x34>)
 800297a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800297e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8002980:	4804      	ldr	r0, [pc, #16]	; (8002994 <MX_IWDG1_Init+0x34>)
 8002982:	f00a ffd1 	bl	800d928 <HAL_IWDG_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 800298c:	f000 ff9a 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	24001a34 	.word	0x24001a34
 8002998:	58004800 	.word	0x58004800

0800299c <__NVIC_SystemReset>:
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80029a0:	f3bf 8f4f 	dsb	sy
}
 80029a4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <__NVIC_SystemReset+0x24>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029ae:	4904      	ldr	r1, [pc, #16]	; (80029c0 <__NVIC_SystemReset+0x24>)
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <__NVIC_SystemReset+0x28>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80029b6:	f3bf 8f4f 	dsb	sy
}
 80029ba:	bf00      	nop
    __NOP();
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <__NVIC_SystemReset+0x20>
 80029c0:	e000ed00 	.word	0xe000ed00
 80029c4:	05fa0004 	.word	0x05fa0004

080029c8 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d106      	bne.n	80029e6 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2101      	movs	r1, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	f014 fa1c 	bl	8016e1c <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80029e4:	e032      	b.n	8002a4c <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d12b      	bne.n	8002a46 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 80029ee:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80029f8:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2102      	movs	r1, #2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f014 fa0c 	bl	8016e1c <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002a04:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d113      	bne.n	8002a36 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2101      	movs	r1, #1
 8002a14:	4618      	mov	r0, r3
 8002a16:	f014 fa01 	bl	8016e1c <osEventFlagsSet>
			if (HK_ENABLED){
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2104      	movs	r1, #4
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f014 f9f6 	bl	8016e1c <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002a42:	701a      	strb	r2, [r3, #0]
}
 8002a44:	e002      	b.n	8002a4c <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002a46:	480a      	ldr	r0, [pc, #40]	; (8002a70 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002a48:	f017 fb26 	bl	801a098 <puts>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	24001d64 	.word	0x24001d64
 8002a58:	24001a44 	.word	0x24001a44
 8002a5c:	24001db0 	.word	0x24001db0
 8002a60:	24001a91 	.word	0x24001a91
 8002a64:	24001a98 	.word	0x24001a98
 8002a68:	24001a48 	.word	0x24001a48
 8002a6c:	24001a90 	.word	0x24001a90
 8002a70:	0801aa48 	.word	0x0801aa48

08002a74 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	49f2      	ldr	r1, [pc, #968]	; (8002e48 <HAL_UART_RxCpltCallback+0x3d4>)
 8002a80:	48f2      	ldr	r0, [pc, #968]	; (8002e4c <HAL_UART_RxCpltCallback+0x3d8>)
 8002a82:	f011 fbbd 	bl	8014200 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002a86:	4bf0      	ldr	r3, [pc, #960]	; (8002e48 <HAL_UART_RxCpltCallback+0x3d4>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2be0      	cmp	r3, #224	; 0xe0
 8002a90:	f200 8424 	bhi.w	80032dc <HAL_UART_RxCpltCallback+0x868>
 8002a94:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <HAL_UART_RxCpltCallback+0x28>)
 8002a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	08002e35 	.word	0x08002e35
 8002aa0:	08002e79 	.word	0x08002e79
 8002aa4:	08002ee9 	.word	0x08002ee9
 8002aa8:	08002f23 	.word	0x08002f23
 8002aac:	08002f5b 	.word	0x08002f5b
 8002ab0:	08002f95 	.word	0x08002f95
 8002ab4:	08002fd1 	.word	0x08002fd1
 8002ab8:	0800300d 	.word	0x0800300d
 8002abc:	08003047 	.word	0x08003047
 8002ac0:	0800307b 	.word	0x0800307b
 8002ac4:	080030af 	.word	0x080030af
 8002ac8:	080030e1 	.word	0x080030e1
 8002acc:	0800310b 	.word	0x0800310b
 8002ad0:	080031e9 	.word	0x080031e9
 8002ad4:	08003251 	.word	0x08003251
 8002ad8:	08003279 	.word	0x08003279
 8002adc:	08002e21 	.word	0x08002e21
 8002ae0:	08002e5d 	.word	0x08002e5d
 8002ae4:	08002ecb 	.word	0x08002ecb
 8002ae8:	08002f07 	.word	0x08002f07
 8002aec:	08002f3f 	.word	0x08002f3f
 8002af0:	08002f77 	.word	0x08002f77
 8002af4:	08002fb3 	.word	0x08002fb3
 8002af8:	08002fef 	.word	0x08002fef
 8002afc:	0800302b 	.word	0x0800302b
 8002b00:	08003063 	.word	0x08003063
 8002b04:	0800308b 	.word	0x0800308b
 8002b08:	080030c5 	.word	0x080030c5
 8002b0c:	080030f1 	.word	0x080030f1
 8002b10:	08003119 	.word	0x08003119
 8002b14:	08003229 	.word	0x08003229
 8002b18:	080032dd 	.word	0x080032dd
 8002b1c:	080032dd 	.word	0x080032dd
 8002b20:	080032dd 	.word	0x080032dd
 8002b24:	080032dd 	.word	0x080032dd
 8002b28:	080032dd 	.word	0x080032dd
 8002b2c:	080032dd 	.word	0x080032dd
 8002b30:	080032dd 	.word	0x080032dd
 8002b34:	080032dd 	.word	0x080032dd
 8002b38:	080032dd 	.word	0x080032dd
 8002b3c:	080032dd 	.word	0x080032dd
 8002b40:	080032dd 	.word	0x080032dd
 8002b44:	080032dd 	.word	0x080032dd
 8002b48:	080032dd 	.word	0x080032dd
 8002b4c:	080032dd 	.word	0x080032dd
 8002b50:	080032dd 	.word	0x080032dd
 8002b54:	080032dd 	.word	0x080032dd
 8002b58:	080032dd 	.word	0x080032dd
 8002b5c:	080032dd 	.word	0x080032dd
 8002b60:	080032dd 	.word	0x080032dd
 8002b64:	080032dd 	.word	0x080032dd
 8002b68:	080032dd 	.word	0x080032dd
 8002b6c:	080032dd 	.word	0x080032dd
 8002b70:	080032dd 	.word	0x080032dd
 8002b74:	080032dd 	.word	0x080032dd
 8002b78:	080032dd 	.word	0x080032dd
 8002b7c:	080032dd 	.word	0x080032dd
 8002b80:	080032dd 	.word	0x080032dd
 8002b84:	080032dd 	.word	0x080032dd
 8002b88:	080032dd 	.word	0x080032dd
 8002b8c:	080032dd 	.word	0x080032dd
 8002b90:	080032dd 	.word	0x080032dd
 8002b94:	080032dd 	.word	0x080032dd
 8002b98:	080032dd 	.word	0x080032dd
 8002b9c:	080032dd 	.word	0x080032dd
 8002ba0:	080032dd 	.word	0x080032dd
 8002ba4:	080032dd 	.word	0x080032dd
 8002ba8:	080032dd 	.word	0x080032dd
 8002bac:	080032dd 	.word	0x080032dd
 8002bb0:	080032dd 	.word	0x080032dd
 8002bb4:	080032dd 	.word	0x080032dd
 8002bb8:	080032dd 	.word	0x080032dd
 8002bbc:	080032dd 	.word	0x080032dd
 8002bc0:	080032dd 	.word	0x080032dd
 8002bc4:	080032dd 	.word	0x080032dd
 8002bc8:	080032dd 	.word	0x080032dd
 8002bcc:	080032dd 	.word	0x080032dd
 8002bd0:	080032dd 	.word	0x080032dd
 8002bd4:	080032dd 	.word	0x080032dd
 8002bd8:	080032dd 	.word	0x080032dd
 8002bdc:	080032dd 	.word	0x080032dd
 8002be0:	080032dd 	.word	0x080032dd
 8002be4:	080032dd 	.word	0x080032dd
 8002be8:	080032dd 	.word	0x080032dd
 8002bec:	080032dd 	.word	0x080032dd
 8002bf0:	080032dd 	.word	0x080032dd
 8002bf4:	080032dd 	.word	0x080032dd
 8002bf8:	080032dd 	.word	0x080032dd
 8002bfc:	080032dd 	.word	0x080032dd
 8002c00:	080032dd 	.word	0x080032dd
 8002c04:	080032dd 	.word	0x080032dd
 8002c08:	080032dd 	.word	0x080032dd
 8002c0c:	080032dd 	.word	0x080032dd
 8002c10:	080032dd 	.word	0x080032dd
 8002c14:	080032dd 	.word	0x080032dd
 8002c18:	080032dd 	.word	0x080032dd
 8002c1c:	080032dd 	.word	0x080032dd
 8002c20:	080032dd 	.word	0x080032dd
 8002c24:	080032dd 	.word	0x080032dd
 8002c28:	080032dd 	.word	0x080032dd
 8002c2c:	080032dd 	.word	0x080032dd
 8002c30:	080032dd 	.word	0x080032dd
 8002c34:	080032dd 	.word	0x080032dd
 8002c38:	080032dd 	.word	0x080032dd
 8002c3c:	080032dd 	.word	0x080032dd
 8002c40:	080032dd 	.word	0x080032dd
 8002c44:	080032dd 	.word	0x080032dd
 8002c48:	080032dd 	.word	0x080032dd
 8002c4c:	080032dd 	.word	0x080032dd
 8002c50:	080032dd 	.word	0x080032dd
 8002c54:	080032dd 	.word	0x080032dd
 8002c58:	080032dd 	.word	0x080032dd
 8002c5c:	080032dd 	.word	0x080032dd
 8002c60:	080032dd 	.word	0x080032dd
 8002c64:	080032dd 	.word	0x080032dd
 8002c68:	080032dd 	.word	0x080032dd
 8002c6c:	080032dd 	.word	0x080032dd
 8002c70:	080032dd 	.word	0x080032dd
 8002c74:	080032dd 	.word	0x080032dd
 8002c78:	080032dd 	.word	0x080032dd
 8002c7c:	080032dd 	.word	0x080032dd
 8002c80:	080032dd 	.word	0x080032dd
 8002c84:	080032dd 	.word	0x080032dd
 8002c88:	080032dd 	.word	0x080032dd
 8002c8c:	080032dd 	.word	0x080032dd
 8002c90:	080032dd 	.word	0x080032dd
 8002c94:	080032dd 	.word	0x080032dd
 8002c98:	080032dd 	.word	0x080032dd
 8002c9c:	080032dd 	.word	0x080032dd
 8002ca0:	080032dd 	.word	0x080032dd
 8002ca4:	080032dd 	.word	0x080032dd
 8002ca8:	080032dd 	.word	0x080032dd
 8002cac:	080032dd 	.word	0x080032dd
 8002cb0:	080032dd 	.word	0x080032dd
 8002cb4:	080032dd 	.word	0x080032dd
 8002cb8:	080032dd 	.word	0x080032dd
 8002cbc:	080032dd 	.word	0x080032dd
 8002cc0:	080032dd 	.word	0x080032dd
 8002cc4:	080032dd 	.word	0x080032dd
 8002cc8:	080032dd 	.word	0x080032dd
 8002ccc:	080032dd 	.word	0x080032dd
 8002cd0:	080032dd 	.word	0x080032dd
 8002cd4:	080032dd 	.word	0x080032dd
 8002cd8:	080032dd 	.word	0x080032dd
 8002cdc:	080032dd 	.word	0x080032dd
 8002ce0:	080032dd 	.word	0x080032dd
 8002ce4:	080032dd 	.word	0x080032dd
 8002ce8:	080032dd 	.word	0x080032dd
 8002cec:	080032dd 	.word	0x080032dd
 8002cf0:	080032dd 	.word	0x080032dd
 8002cf4:	080032dd 	.word	0x080032dd
 8002cf8:	080032dd 	.word	0x080032dd
 8002cfc:	080032dd 	.word	0x080032dd
 8002d00:	080032dd 	.word	0x080032dd
 8002d04:	080032dd 	.word	0x080032dd
 8002d08:	080032dd 	.word	0x080032dd
 8002d0c:	080032dd 	.word	0x080032dd
 8002d10:	080032dd 	.word	0x080032dd
 8002d14:	080032dd 	.word	0x080032dd
 8002d18:	080032dd 	.word	0x080032dd
 8002d1c:	080032dd 	.word	0x080032dd
 8002d20:	080032dd 	.word	0x080032dd
 8002d24:	080032dd 	.word	0x080032dd
 8002d28:	080032dd 	.word	0x080032dd
 8002d2c:	080032dd 	.word	0x080032dd
 8002d30:	080032dd 	.word	0x080032dd
 8002d34:	080032dd 	.word	0x080032dd
 8002d38:	080032dd 	.word	0x080032dd
 8002d3c:	080032dd 	.word	0x080032dd
 8002d40:	080032dd 	.word	0x080032dd
 8002d44:	080032dd 	.word	0x080032dd
 8002d48:	080032dd 	.word	0x080032dd
 8002d4c:	080032dd 	.word	0x080032dd
 8002d50:	080032dd 	.word	0x080032dd
 8002d54:	080032dd 	.word	0x080032dd
 8002d58:	080032b5 	.word	0x080032b5
 8002d5c:	080032dd 	.word	0x080032dd
 8002d60:	080032dd 	.word	0x080032dd
 8002d64:	080032dd 	.word	0x080032dd
 8002d68:	080032dd 	.word	0x080032dd
 8002d6c:	080032dd 	.word	0x080032dd
 8002d70:	080032dd 	.word	0x080032dd
 8002d74:	080032dd 	.word	0x080032dd
 8002d78:	080032dd 	.word	0x080032dd
 8002d7c:	080032dd 	.word	0x080032dd
 8002d80:	080032dd 	.word	0x080032dd
 8002d84:	080032dd 	.word	0x080032dd
 8002d88:	080032dd 	.word	0x080032dd
 8002d8c:	080032dd 	.word	0x080032dd
 8002d90:	080032dd 	.word	0x080032dd
 8002d94:	080032dd 	.word	0x080032dd
 8002d98:	080032bb 	.word	0x080032bb
 8002d9c:	080032dd 	.word	0x080032dd
 8002da0:	080032dd 	.word	0x080032dd
 8002da4:	080032dd 	.word	0x080032dd
 8002da8:	080032dd 	.word	0x080032dd
 8002dac:	080032dd 	.word	0x080032dd
 8002db0:	080032dd 	.word	0x080032dd
 8002db4:	080032dd 	.word	0x080032dd
 8002db8:	080032dd 	.word	0x080032dd
 8002dbc:	080032dd 	.word	0x080032dd
 8002dc0:	080032dd 	.word	0x080032dd
 8002dc4:	080032dd 	.word	0x080032dd
 8002dc8:	080032dd 	.word	0x080032dd
 8002dcc:	080032dd 	.word	0x080032dd
 8002dd0:	080032dd 	.word	0x080032dd
 8002dd4:	080032dd 	.word	0x080032dd
 8002dd8:	080032c9 	.word	0x080032c9
 8002ddc:	080032a1 	.word	0x080032a1
 8002de0:	080032dd 	.word	0x080032dd
 8002de4:	080032dd 	.word	0x080032dd
 8002de8:	080032dd 	.word	0x080032dd
 8002dec:	080032dd 	.word	0x080032dd
 8002df0:	080032dd 	.word	0x080032dd
 8002df4:	080032dd 	.word	0x080032dd
 8002df8:	080032dd 	.word	0x080032dd
 8002dfc:	080032dd 	.word	0x080032dd
 8002e00:	080032dd 	.word	0x080032dd
 8002e04:	080032dd 	.word	0x080032dd
 8002e08:	080032dd 	.word	0x080032dd
 8002e0c:	080032dd 	.word	0x080032dd
 8002e10:	080032dd 	.word	0x080032dd
 8002e14:	080032dd 	.word	0x080032dd
 8002e18:	080032d7 	.word	0x080032d7
 8002e1c:	0800328d 	.word	0x0800328d
	case 0x10: {
		printf("SDN1 ON\n");
 8002e20:	480b      	ldr	r0, [pc, #44]	; (8002e50 <HAL_UART_RxCpltCallback+0x3dc>)
 8002e22:	f017 f939 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_UART_RxCpltCallback+0x3e0>)
 8002e28:	2104      	movs	r1, #4
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f008 f9fd 	bl	800b22c <HAL_GPIO_WritePin>
		break;
 8002e32:	e25e      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8002e34:	4808      	ldr	r0, [pc, #32]	; (8002e58 <HAL_UART_RxCpltCallback+0x3e4>)
 8002e36:	f017 f92f 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_UART_RxCpltCallback+0x3e0>)
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	2200      	movs	r2, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f008 f9f3 	bl	800b22c <HAL_GPIO_WritePin>
		break;
 8002e46:	e254      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
 8002e48:	24001a50 	.word	0x24001a50
 8002e4c:	24001dfc 	.word	0x24001dfc
 8002e50:	0801aa60 	.word	0x0801aa60
 8002e54:	58020400 	.word	0x58020400
 8002e58:	0801aa68 	.word	0x0801aa68
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8002e5c:	48bf      	ldr	r0, [pc, #764]	; (800315c <HAL_UART_RxCpltCallback+0x6e8>)
 8002e5e:	f017 f91b 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8002e62:	4bbf      	ldr	r3, [pc, #764]	; (8003160 <HAL_UART_RxCpltCallback+0x6ec>)
 8002e64:	2120      	movs	r1, #32
 8002e66:	2201      	movs	r2, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f008 f9df 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8002e6e:	2101      	movs	r1, #1
 8002e70:	2008      	movs	r0, #8
 8002e72:	f002 fb55 	bl	8005520 <set_rail_monitor_enable>
		break;
 8002e76:	e23c      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8002e78:	48ba      	ldr	r0, [pc, #744]	; (8003164 <HAL_UART_RxCpltCallback+0x6f0>)
 8002e7a:	f017 f90d 	bl	801a098 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8002e7e:	2308      	movs	r3, #8
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e00f      	b.n	8002ea4 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002e84:	4ab8      	ldr	r2, [pc, #736]	; (8003168 <HAL_UART_RxCpltCallback+0x6f4>)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e8c:	4ab6      	ldr	r2, [pc, #728]	; (8003168 <HAL_UART_RxCpltCallback+0x6f4>)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	889b      	ldrh	r3, [r3, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f008 f9c7 	bl	800b22c <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	dcec      	bgt.n	8002e84 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002eaa:	2310      	movs	r3, #16
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e008      	b.n	8002ec2 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 fb32 	bl	8005520 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b07      	cmp	r3, #7
 8002ec6:	dcf3      	bgt.n	8002eb0 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8002ec8:	e213      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8002eca:	48a8      	ldr	r0, [pc, #672]	; (800316c <HAL_UART_RxCpltCallback+0x6f8>)
 8002ecc:	f017 f8e4 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8002ed0:	4ba7      	ldr	r3, [pc, #668]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f008 f9a7 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8002ede:	2101      	movs	r1, #1
 8002ee0:	2009      	movs	r0, #9
 8002ee2:	f002 fb1d 	bl	8005520 <set_rail_monitor_enable>

		break;
 8002ee6:	e204      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8002ee8:	48a2      	ldr	r0, [pc, #648]	; (8003174 <HAL_UART_RxCpltCallback+0x700>)
 8002eea:	f017 f8d5 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8002eee:	4ba0      	ldr	r3, [pc, #640]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f008 f998 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8002efc:	2100      	movs	r1, #0
 8002efe:	2009      	movs	r0, #9
 8002f00:	f002 fb0e 	bl	8005520 <set_rail_monitor_enable>
		break;
 8002f04:	e1f5      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8002f06:	489c      	ldr	r0, [pc, #624]	; (8003178 <HAL_UART_RxCpltCallback+0x704>)
 8002f08:	f017 f8c6 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8002f0c:	4b98      	ldr	r3, [pc, #608]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	2201      	movs	r2, #1
 8002f12:	4618      	mov	r0, r3
 8002f14:	f008 f98a 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8002f18:	2101      	movs	r1, #1
 8002f1a:	200a      	movs	r0, #10
 8002f1c:	f002 fb00 	bl	8005520 <set_rail_monitor_enable>

		break;
 8002f20:	e1e7      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8002f22:	4896      	ldr	r0, [pc, #600]	; (800317c <HAL_UART_RxCpltCallback+0x708>)
 8002f24:	f017 f8b8 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8002f28:	4b91      	ldr	r3, [pc, #580]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f008 f97c 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8002f34:	2100      	movs	r1, #0
 8002f36:	200a      	movs	r0, #10
 8002f38:	f002 faf2 	bl	8005520 <set_rail_monitor_enable>
		break;
 8002f3c:	e1d9      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8002f3e:	4890      	ldr	r0, [pc, #576]	; (8003180 <HAL_UART_RxCpltCallback+0x70c>)
 8002f40:	f017 f8aa 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8002f44:	4b8a      	ldr	r3, [pc, #552]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f46:	2140      	movs	r1, #64	; 0x40
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f008 f96e 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8002f50:	2101      	movs	r1, #1
 8002f52:	200b      	movs	r0, #11
 8002f54:	f002 fae4 	bl	8005520 <set_rail_monitor_enable>

		break;
 8002f58:	e1cb      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8002f5a:	488a      	ldr	r0, [pc, #552]	; (8003184 <HAL_UART_RxCpltCallback+0x710>)
 8002f5c:	f017 f89c 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8002f60:	4b83      	ldr	r3, [pc, #524]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f62:	2140      	movs	r1, #64	; 0x40
 8002f64:	2200      	movs	r2, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f008 f960 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	200b      	movs	r0, #11
 8002f70:	f002 fad6 	bl	8005520 <set_rail_monitor_enable>
		break;
 8002f74:	e1bd      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8002f76:	4884      	ldr	r0, [pc, #528]	; (8003188 <HAL_UART_RxCpltCallback+0x714>)
 8002f78:	f017 f88e 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8002f7c:	4b7c      	ldr	r3, [pc, #496]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f82:	2201      	movs	r2, #1
 8002f84:	4618      	mov	r0, r3
 8002f86:	f008 f951 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	200c      	movs	r0, #12
 8002f8e:	f002 fac7 	bl	8005520 <set_rail_monitor_enable>

		break;
 8002f92:	e1ae      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8002f94:	487d      	ldr	r0, [pc, #500]	; (800318c <HAL_UART_RxCpltCallback+0x718>)
 8002f96:	f017 f87f 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8002f9a:	4b75      	ldr	r3, [pc, #468]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f008 f942 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8002fa8:	2100      	movs	r1, #0
 8002faa:	200c      	movs	r0, #12
 8002fac:	f002 fab8 	bl	8005520 <set_rail_monitor_enable>
		break;
 8002fb0:	e19f      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8002fb2:	4877      	ldr	r0, [pc, #476]	; (8003190 <HAL_UART_RxCpltCallback+0x71c>)
 8002fb4:	f017 f870 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8002fb8:	4b6d      	ldr	r3, [pc, #436]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f008 f933 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	200d      	movs	r0, #13
 8002fca:	f002 faa9 	bl	8005520 <set_rail_monitor_enable>

		break;
 8002fce:	e190      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8002fd0:	4870      	ldr	r0, [pc, #448]	; (8003194 <HAL_UART_RxCpltCallback+0x720>)
 8002fd2:	f017 f861 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8002fd6:	4b66      	ldr	r3, [pc, #408]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fdc:	2200      	movs	r2, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f008 f924 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	200d      	movs	r0, #13
 8002fe8:	f002 fa9a 	bl	8005520 <set_rail_monitor_enable>
		break;
 8002fec:	e181      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8002fee:	486a      	ldr	r0, [pc, #424]	; (8003198 <HAL_UART_RxCpltCallback+0x724>)
 8002ff0:	f017 f852 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8002ff4:	4b5e      	ldr	r3, [pc, #376]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8002ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f008 f915 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8003002:	2101      	movs	r1, #1
 8003004:	200f      	movs	r0, #15
 8003006:	f002 fa8b 	bl	8005520 <set_rail_monitor_enable>

		break;
 800300a:	e172      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 800300c:	4863      	ldr	r0, [pc, #396]	; (800319c <HAL_UART_RxCpltCallback+0x728>)
 800300e:	f017 f843 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8003012:	4b57      	ldr	r3, [pc, #348]	; (8003170 <HAL_UART_RxCpltCallback+0x6fc>)
 8003014:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003018:	2200      	movs	r2, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f008 f906 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8003020:	2100      	movs	r1, #0
 8003022:	200f      	movs	r0, #15
 8003024:	f002 fa7c 	bl	8005520 <set_rail_monitor_enable>
		break;
 8003028:	e163      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 800302a:	485d      	ldr	r0, [pc, #372]	; (80031a0 <HAL_UART_RxCpltCallback+0x72c>)
 800302c:	f017 f834 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8003030:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <HAL_UART_RxCpltCallback+0x6ec>)
 8003032:	2140      	movs	r1, #64	; 0x40
 8003034:	2201      	movs	r2, #1
 8003036:	4618      	mov	r0, r3
 8003038:	f008 f8f8 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 800303c:	2101      	movs	r1, #1
 800303e:	2010      	movs	r0, #16
 8003040:	f002 fa6e 	bl	8005520 <set_rail_monitor_enable>

		break;
 8003044:	e155      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8003046:	4857      	ldr	r0, [pc, #348]	; (80031a4 <HAL_UART_RxCpltCallback+0x730>)
 8003048:	f017 f826 	bl	801a098 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 800304c:	4b44      	ldr	r3, [pc, #272]	; (8003160 <HAL_UART_RxCpltCallback+0x6ec>)
 800304e:	2140      	movs	r1, #64	; 0x40
 8003050:	2200      	movs	r2, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f008 f8ea 	bl	800b22c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8003058:	2100      	movs	r1, #0
 800305a:	2010      	movs	r0, #16
 800305c:	f002 fa60 	bl	8005520 <set_rail_monitor_enable>
		break;
 8003060:	e147      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8003062:	4851      	ldr	r0, [pc, #324]	; (80031a8 <HAL_UART_RxCpltCallback+0x734>)
 8003064:	f017 f818 	bl	801a098 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8003068:	2300      	movs	r3, #0
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2320      	movs	r3, #32
 800306e:	4a4f      	ldr	r2, [pc, #316]	; (80031ac <HAL_UART_RxCpltCallback+0x738>)
 8003070:	2100      	movs	r1, #0
 8003072:	484f      	ldr	r0, [pc, #316]	; (80031b0 <HAL_UART_RxCpltCallback+0x73c>)
 8003074:	f004 fa56 	bl	8007524 <HAL_DAC_Start_DMA>
		break;
 8003078:	e13b      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 800307a:	484e      	ldr	r0, [pc, #312]	; (80031b4 <HAL_UART_RxCpltCallback+0x740>)
 800307c:	f017 f80c 	bl	801a098 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8003080:	2100      	movs	r1, #0
 8003082:	484b      	ldr	r0, [pc, #300]	; (80031b0 <HAL_UART_RxCpltCallback+0x73c>)
 8003084:	f004 fb0e 	bl	80076a4 <HAL_DAC_Stop_DMA>
		break;
 8003088:	e133      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 800308a:	484b      	ldr	r0, [pc, #300]	; (80031b8 <HAL_UART_RxCpltCallback+0x744>)
 800308c:	f017 f804 	bl	801a098 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8003090:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <HAL_UART_RxCpltCallback+0x748>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2102      	movs	r1, #2
 8003096:	4618      	mov	r0, r3
 8003098:	f013 fec0 	bl	8016e1c <osEventFlagsSet>
		TIM2->CCR4 = 312;
 800309c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030a0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 80030a6:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <HAL_UART_RxCpltCallback+0x74c>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]

		break;
 80030ac:	e121      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80030ae:	4845      	ldr	r0, [pc, #276]	; (80031c4 <HAL_UART_RxCpltCallback+0x750>)
 80030b0:	f016 fff2 	bl	801a098 <puts>
		ERPA_ENABLED = 0;
 80030b4:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <HAL_UART_RxCpltCallback+0x74c>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80030ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030be:	2200      	movs	r2, #0
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80030c2:	e116      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80030c4:	4840      	ldr	r0, [pc, #256]	; (80031c8 <HAL_UART_RxCpltCallback+0x754>)
 80030c6:	f016 ffe7 	bl	801a098 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80030ca:	2100      	movs	r1, #0
 80030cc:	483f      	ldr	r0, [pc, #252]	; (80031cc <HAL_UART_RxCpltCallback+0x758>)
 80030ce:	f00f fbb7 	bl	8012840 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80030d2:	4b3a      	ldr	r3, [pc, #232]	; (80031bc <HAL_UART_RxCpltCallback+0x748>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2101      	movs	r1, #1
 80030d8:	4618      	mov	r0, r3
 80030da:	f013 fe9f 	bl	8016e1c <osEventFlagsSet>
		break;
 80030de:	e108      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 80030e0:	483b      	ldr	r0, [pc, #236]	; (80031d0 <HAL_UART_RxCpltCallback+0x75c>)
 80030e2:	f016 ffd9 	bl	801a098 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80030e6:	2100      	movs	r1, #0
 80030e8:	4838      	ldr	r0, [pc, #224]	; (80031cc <HAL_UART_RxCpltCallback+0x758>)
 80030ea:	f00f fd03 	bl	8012af4 <HAL_TIM_OC_Stop_IT>
		break;
 80030ee:	e100      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1C: {
		printf("HK ON \n");
 80030f0:	4838      	ldr	r0, [pc, #224]	; (80031d4 <HAL_UART_RxCpltCallback+0x760>)
 80030f2:	f016 ffd1 	bl	801a098 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_UART_RxCpltCallback+0x748>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2104      	movs	r1, #4
 80030fc:	4618      	mov	r0, r3
 80030fe:	f013 fe8d 	bl	8016e1c <osEventFlagsSet>
		HK_ENABLED = 1;
 8003102:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <HAL_UART_RxCpltCallback+0x764>)
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
		break;
 8003108:	e0f3      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0C: {
		printf("HK OFF\n");
 800310a:	4834      	ldr	r0, [pc, #208]	; (80031dc <HAL_UART_RxCpltCallback+0x768>)
 800310c:	f016 ffc4 	bl	801a098 <puts>
		HK_ENABLED = 0;
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_UART_RxCpltCallback+0x764>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
		break;
 8003116:	e0ec      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1D: {
		printf("Step Up\n");
 8003118:	4831      	ldr	r0, [pc, #196]	; (80031e0 <HAL_UART_RxCpltCallback+0x76c>)
 800311a:	f016 ffbd 	bl	801a098 <puts>
		if (step < 14) {
 800311e:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_UART_RxCpltCallback+0x770>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b0d      	cmp	r3, #13
 8003126:	f200 80dd 	bhi.w	80032e4 <HAL_UART_RxCpltCallback+0x870>
			step += 2;
 800312a:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <HAL_UART_RxCpltCallback+0x770>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	3302      	adds	r3, #2
 8003132:	b2da      	uxtb	r2, r3
 8003134:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <HAL_UART_RxCpltCallback+0x770>)
 8003136:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003138:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_UART_RxCpltCallback+0x770>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <HAL_UART_RxCpltCallback+0x738>)
 8003142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	4819      	ldr	r0, [pc, #100]	; (80031b0 <HAL_UART_RxCpltCallback+0x73c>)
 800314c:	f004 fb4d 	bl	80077ea <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003150:	2100      	movs	r1, #0
 8003152:	4817      	ldr	r0, [pc, #92]	; (80031b0 <HAL_UART_RxCpltCallback+0x73c>)
 8003154:	f004 f98e 	bl	8007474 <HAL_DAC_Start>
		}
		break;
 8003158:	e0c4      	b.n	80032e4 <HAL_UART_RxCpltCallback+0x870>
 800315a:	bf00      	nop
 800315c:	0801aa74 	.word	0x0801aa74
 8003160:	58020400 	.word	0x58020400
 8003164:	0801aa80 	.word	0x0801aa80
 8003168:	0801ad7c 	.word	0x0801ad7c
 800316c:	0801aa8c 	.word	0x0801aa8c
 8003170:	58020800 	.word	0x58020800
 8003174:	0801aa98 	.word	0x0801aa98
 8003178:	0801aaa8 	.word	0x0801aaa8
 800317c:	0801aab4 	.word	0x0801aab4
 8003180:	0801aac0 	.word	0x0801aac0
 8003184:	0801aacc 	.word	0x0801aacc
 8003188:	0801aadc 	.word	0x0801aadc
 800318c:	0801aae8 	.word	0x0801aae8
 8003190:	0801aaf4 	.word	0x0801aaf4
 8003194:	0801ab00 	.word	0x0801ab00
 8003198:	0801ab0c 	.word	0x0801ab0c
 800319c:	0801ab1c 	.word	0x0801ab1c
 80031a0:	0801ab2c 	.word	0x0801ab2c
 80031a4:	0801ab38 	.word	0x0801ab38
 80031a8:	0801ab48 	.word	0x0801ab48
 80031ac:	2400000c 	.word	0x2400000c
 80031b0:	240002f4 	.word	0x240002f4
 80031b4:	0801ab58 	.word	0x0801ab58
 80031b8:	0801ab68 	.word	0x0801ab68
 80031bc:	24001a44 	.word	0x24001a44
 80031c0:	24001a91 	.word	0x24001a91
 80031c4:	0801ab70 	.word	0x0801ab70
 80031c8:	0801ab7c 	.word	0x0801ab7c
 80031cc:	24001d64 	.word	0x24001d64
 80031d0:	0801ab84 	.word	0x0801ab84
 80031d4:	0801ab8c 	.word	0x0801ab8c
 80031d8:	24001a90 	.word	0x24001a90
 80031dc:	0801ab94 	.word	0x0801ab94
 80031e0:	0801ab9c 	.word	0x0801ab9c
 80031e4:	24001a92 	.word	0x24001a92
	}
	case 0x0D: {
		printf("Step Down\n");
 80031e8:	4844      	ldr	r0, [pc, #272]	; (80032fc <HAL_UART_RxCpltCallback+0x888>)
 80031ea:	f016 ff55 	bl	801a098 <puts>
		if (step > 1) {
 80031ee:	4b44      	ldr	r3, [pc, #272]	; (8003300 <HAL_UART_RxCpltCallback+0x88c>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d977      	bls.n	80032e8 <HAL_UART_RxCpltCallback+0x874>
			step -= 2;
 80031f8:	4b41      	ldr	r3, [pc, #260]	; (8003300 <HAL_UART_RxCpltCallback+0x88c>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	3b02      	subs	r3, #2
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4b3f      	ldr	r3, [pc, #252]	; (8003300 <HAL_UART_RxCpltCallback+0x88c>)
 8003204:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003206:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <HAL_UART_RxCpltCallback+0x88c>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_UART_RxCpltCallback+0x890>)
 8003210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003214:	2200      	movs	r2, #0
 8003216:	2100      	movs	r1, #0
 8003218:	483b      	ldr	r0, [pc, #236]	; (8003308 <HAL_UART_RxCpltCallback+0x894>)
 800321a:	f004 fae6 	bl	80077ea <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800321e:	2100      	movs	r1, #0
 8003220:	4839      	ldr	r0, [pc, #228]	; (8003308 <HAL_UART_RxCpltCallback+0x894>)
 8003222:	f004 f927 	bl	8007474 <HAL_DAC_Start>
		}
		break;
 8003226:	e05f      	b.n	80032e8 <HAL_UART_RxCpltCallback+0x874>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8003228:	4838      	ldr	r0, [pc, #224]	; (800330c <HAL_UART_RxCpltCallback+0x898>)
 800322a:	f016 ff35 	bl	801a098 <puts>
		if (cadence <= 50000) {
 800322e:	4b38      	ldr	r3, [pc, #224]	; (8003310 <HAL_UART_RxCpltCallback+0x89c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003236:	4293      	cmp	r3, r2
 8003238:	d858      	bhi.n	80032ec <HAL_UART_RxCpltCallback+0x878>
			cadence *= 2;
 800323a:	4b35      	ldr	r3, [pc, #212]	; (8003310 <HAL_UART_RxCpltCallback+0x89c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4a33      	ldr	r2, [pc, #204]	; (8003310 <HAL_UART_RxCpltCallback+0x89c>)
 8003242:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003244:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_UART_RxCpltCallback+0x89c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800324e:	e04d      	b.n	80032ec <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8003250:	4830      	ldr	r0, [pc, #192]	; (8003314 <HAL_UART_RxCpltCallback+0x8a0>)
 8003252:	f016 ff21 	bl	801a098 <puts>
		if (cadence >= 6250) {
 8003256:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <HAL_UART_RxCpltCallback+0x89c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f641 0269 	movw	r2, #6249	; 0x1869
 800325e:	4293      	cmp	r3, r2
 8003260:	d946      	bls.n	80032f0 <HAL_UART_RxCpltCallback+0x87c>
			cadence /= 2;
 8003262:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_UART_RxCpltCallback+0x89c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	4a29      	ldr	r2, [pc, #164]	; (8003310 <HAL_UART_RxCpltCallback+0x89c>)
 800326a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800326c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_UART_RxCpltCallback+0x89c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003276:	e03b      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x87c>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8003278:	4827      	ldr	r0, [pc, #156]	; (8003318 <HAL_UART_RxCpltCallback+0x8a4>)
 800327a:	f016 ff0d 	bl	801a098 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 800327e:	4b27      	ldr	r3, [pc, #156]	; (800331c <HAL_UART_RxCpltCallback+0x8a8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2102      	movs	r1, #2
 8003284:	4618      	mov	r0, r3
 8003286:	f013 fdc9 	bl	8016e1c <osEventFlagsSet>
		break;
 800328a:	e032      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xE0: {
		printf("Auto Init\n");
 800328c:	4824      	ldr	r0, [pc, #144]	; (8003320 <HAL_UART_RxCpltCallback+0x8ac>)
 800328e:	f016 ff03 	bl	801a098 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_UART_RxCpltCallback+0x8a8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2104      	movs	r1, #4
 8003298:	4618      	mov	r0, r3
 800329a:	f013 fdbf 	bl	8016e1c <osEventFlagsSet>
		break;
 800329e:	e028      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80032a0:	4820      	ldr	r0, [pc, #128]	; (8003324 <HAL_UART_RxCpltCallback+0x8b0>)
 80032a2:	f016 fef9 	bl	801a098 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_UART_RxCpltCallback+0x8a8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2108      	movs	r1, #8
 80032ac:	4618      	mov	r0, r3
 80032ae:	f013 fdb5 	bl	8016e1c <osEventFlagsSet>
		break;
 80032b2:	e01e      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xAF: {
		sync();
 80032b4:	f000 fa0e 	bl	80036d4 <sync>
		break;
 80032b8:	e01b      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_UART_RxCpltCallback+0x8b4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f013 fdab 	bl	8016e1c <osEventFlagsSet>
		break;
 80032c6:	e014      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80032c8:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_UART_RxCpltCallback+0x8b4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2102      	movs	r1, #2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f013 fda4 	bl	8016e1c <osEventFlagsSet>
		break;
 80032d4:	e00d      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xDF: {
		reset_eeprom_error_counters();
 80032d6:	f7fe ff05 	bl	80020e4 <reset_eeprom_error_counters>
		break;
 80032da:	e00a      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
	}
	default: {
		printf("Unknown Command\n");
 80032dc:	4813      	ldr	r0, [pc, #76]	; (800332c <HAL_UART_RxCpltCallback+0x8b8>)
 80032de:	f016 fedb 	bl	801a098 <puts>
		break;
 80032e2:	e006      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
		break;
 80032e4:	bf00      	nop
 80032e6:	e004      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
		break;
 80032e8:	bf00      	nop
 80032ea:	e002      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
		break;
 80032ec:	bf00      	nop
 80032ee:	e000      	b.n	80032f2 <HAL_UART_RxCpltCallback+0x87e>
		break;
 80032f0:	bf00      	nop
	}
	}
}
 80032f2:	bf00      	nop
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	0801aba4 	.word	0x0801aba4
 8003300:	24001a92 	.word	0x24001a92
 8003304:	2400000c 	.word	0x2400000c
 8003308:	240002f4 	.word	0x240002f4
 800330c:	0801abb0 	.word	0x0801abb0
 8003310:	2400008c 	.word	0x2400008c
 8003314:	0801abbc 	.word	0x0801abbc
 8003318:	0801abc8 	.word	0x0801abc8
 800331c:	24001a48 	.word	0x24001a48
 8003320:	0801abd8 	.word	0x0801abd8
 8003324:	0801abe4 	.word	0x0801abe4
 8003328:	24001a4c 	.word	0x24001a4c
 800332c:	0801abf0 	.word	0x0801abf0

08003330 <get_reset_cause>:

void get_reset_cause()
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <get_reset_cause+0x78>)
 8003338:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800333c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <get_reset_cause+0x24>
    {
        error.category = EC_watchdog;
 8003344:	2305      	movs	r3, #5
 8003346:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003348:	2314      	movs	r3, #20
 800334a:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fe fe05 	bl	8001f5c <handle_error>
 8003352:	e01c      	b.n	800338e <get_reset_cause+0x5e>
    }
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <get_reset_cause+0x78>)
 8003356:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800335a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <get_reset_cause+0x42>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        error.category = EC_software_reset;
 8003362:	2304      	movs	r3, #4
 8003364:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003366:	2314      	movs	r3, #20
 8003368:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fe fdf6 	bl	8001f5c <handle_error>
 8003370:	e00d      	b.n	800338e <get_reset_cause+0x5e>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <get_reset_cause+0x78>)
 8003374:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <get_reset_cause+0x5e>
    {
        error.category = EC_brownout;
 8003380:	2303      	movs	r3, #3
 8003382:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003384:	2314      	movs	r3, #20
 8003386:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fe fde7 	bl	8001f5c <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <get_reset_cause+0x78>)
 8003390:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <get_reset_cause+0x78>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	58024400 	.word	0x58024400

080033ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80033b2:	f000 fa33 	bl	800381c <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <main+0x128>)
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d11b      	bne.n	80033fa <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 80033c2:	f3bf 8f4f 	dsb	sy
}
 80033c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033c8:	f3bf 8f6f 	isb	sy
}
 80033cc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80033ce:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <main+0x128>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80033d6:	f3bf 8f4f 	dsb	sy
}
 80033da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033dc:	f3bf 8f6f 	isb	sy
}
 80033e0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80033e2:	4b3c      	ldr	r3, [pc, #240]	; (80034d4 <main+0x128>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	4a3b      	ldr	r2, [pc, #236]	; (80034d4 <main+0x128>)
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80033ee:	f3bf 8f4f 	dsb	sy
}
 80033f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033f4:	f3bf 8f6f 	isb	sy
}
 80033f8:	e000      	b.n	80033fc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80033fa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80033fc:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <main+0x128>)
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d138      	bne.n	800347a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003408:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <main+0x128>)
 800340a:	2200      	movs	r2, #0
 800340c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003410:	f3bf 8f4f 	dsb	sy
}
 8003414:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003416:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <main+0x128>)
 8003418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800341c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	0b5b      	lsrs	r3, r3, #13
 8003422:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003426:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	08db      	lsrs	r3, r3, #3
 800342c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003430:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800343a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003440:	4924      	ldr	r1, [pc, #144]	; (80034d4 <main+0x128>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	1e5a      	subs	r2, r3, #1
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1ef      	bne.n	8003432 <main+0x86>
    } while(sets-- != 0U);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1e5a      	subs	r2, r3, #1
 8003456:	60ba      	str	r2, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e5      	bne.n	8003428 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800345c:	f3bf 8f4f 	dsb	sy
}
 8003460:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003462:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <main+0x128>)
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <main+0x128>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800346e:	f3bf 8f4f 	dsb	sy
}
 8003472:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003474:	f3bf 8f6f 	isb	sy
}
 8003478:	e000      	b.n	800347c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800347a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800347c:	f002 f9ee 	bl	800585c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003480:	f000 f82a 	bl	80034d8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003484:	f000 f8aa 	bl	80035dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003488:	f7ff f8d0 	bl	800262c <MX_GPIO_Init>
  MX_DMA_Init();
 800348c:	f7fd fc2c 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003490:	f001 fd7e 	bl	8004f90 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003494:	f7ff f944 	bl	8002720 <MX_I2C1_Init>
  MX_SPI2_Init();
 8003498:	f000 feb4 	bl	8004204 <MX_SPI2_Init>
  MX_TIM2_Init();
 800349c:	f001 fba0 	bl	8004be0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80034a0:	f001 faf0 	bl	8004a84 <MX_TIM1_Init>
  MX_ADC3_Init();
 80034a4:	f7fd f9c0 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80034a8:	f7fd f89c 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80034ac:	f7fd fb68 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80034b0:	f000 fe50 	bl	8004154 <MX_SPI1_Init>
  MX_RTC_Init();
 80034b4:	f000 fc1c 	bl	8003cf0 <MX_RTC_Init>
  MX_IWDG1_Init();
 80034b8:	f7ff fa52 	bl	8002960 <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */
  get_reset_cause();
 80034bc:	f7ff ff38 	bl	8003330 <get_reset_cause>
  system_setup();
 80034c0:	f000 f8bc 	bl	800363c <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80034c4:	f013 fb54 	bl	8016b70 <osKernelInitialize>
  MX_FREERTOS_Init();
 80034c8:	f7fe fe8c 	bl	80021e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80034cc:	f013 fb74 	bl	8016bb8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80034d0:	e7fe      	b.n	80034d0 <main+0x124>
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b09c      	sub	sp, #112	; 0x70
 80034dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e2:	224c      	movs	r2, #76	; 0x4c
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f016 fd60 	bl	8019fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	2220      	movs	r2, #32
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f016 fd5a 	bl	8019fac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80034f8:	2002      	movs	r0, #2
 80034fa:	f00a fab1 	bl	800da60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80034fe:	2300      	movs	r3, #0
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <SystemClock_Config+0xfc>)
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	4a33      	ldr	r2, [pc, #204]	; (80035d4 <SystemClock_Config+0xfc>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <SystemClock_Config+0xfc>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <SystemClock_Config+0x100>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003520:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <SystemClock_Config+0x100>)
 8003522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003526:	6193      	str	r3, [r2, #24]
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <SystemClock_Config+0x100>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003534:	bf00      	nop
 8003536:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <SystemClock_Config+0x100>)
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800353e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003542:	d1f8      	bne.n	8003536 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003544:	230b      	movs	r3, #11
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800354e:	2309      	movs	r3, #9
 8003550:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003552:	2340      	movs	r3, #64	; 0x40
 8003554:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003556:	2301      	movs	r3, #1
 8003558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800355a:	2302      	movs	r3, #2
 800355c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800355e:	2302      	movs	r3, #2
 8003560:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003562:	2304      	movs	r3, #4
 8003564:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8003566:	2318      	movs	r3, #24
 8003568:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800356a:	2302      	movs	r3, #2
 800356c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800356e:	2302      	movs	r3, #2
 8003570:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003572:	2302      	movs	r3, #2
 8003574:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003576:	2308      	movs	r3, #8
 8003578:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800357a:	2302      	movs	r3, #2
 800357c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003586:	4618      	mov	r0, r3
 8003588:	f00a faa4 	bl	800dad4 <HAL_RCC_OscConfig>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003592:	f000 f997 	bl	80038c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003596:	233f      	movs	r3, #63	; 0x3f
 8003598:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800359a:	2303      	movs	r3, #3
 800359c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80035aa:	2340      	movs	r3, #64	; 0x40
 80035ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80035b2:	2300      	movs	r3, #0
 80035b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	2101      	movs	r1, #1
 80035ba:	4618      	mov	r0, r3
 80035bc:	f00a fee4 	bl	800e388 <HAL_RCC_ClockConfig>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80035c6:	f000 f97d 	bl	80038c4 <Error_Handler>
  }
}
 80035ca:	bf00      	nop
 80035cc:	3770      	adds	r7, #112	; 0x70
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	58000400 	.word	0x58000400
 80035d8:	58024800 	.word	0x58024800

080035dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b0b0      	sub	sp, #192	; 0xc0
 80035e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e2:	463b      	mov	r3, r7
 80035e4:	22c0      	movs	r2, #192	; 0xc0
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f016 fcdf 	bl	8019fac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80035ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80035fa:	2304      	movs	r3, #4
 80035fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80035fe:	2318      	movs	r3, #24
 8003600:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003602:	2308      	movs	r3, #8
 8003604:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003606:	2302      	movs	r3, #2
 8003608:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800360a:	2302      	movs	r3, #2
 800360c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800360e:	2380      	movs	r3, #128	; 0x80
 8003610:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003612:	2320      	movs	r3, #32
 8003614:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003620:	463b      	mov	r3, r7
 8003622:	4618      	mov	r0, r3
 8003624:	f00b fa7e 	bl	800eb24 <HAL_RCCEx_PeriphCLKConfig>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800362e:	f000 f949 	bl	80038c4 <Error_Handler>
  }
}
 8003632:	bf00      	nop
 8003634:	37c0      	adds	r7, #192	; 0xc0
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
	// 3 -- Init rail monitor
	// 4 -- Start timer 3
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts
  	error_counter_init();
 8003640:	f7fe fce6 	bl	8002010 <error_counter_init>


	packet_event_flags = osEventFlagsNew(NULL);
 8003644:	2000      	movs	r0, #0
 8003646:	f013 fbaa 	bl	8016d9e <osEventFlagsNew>
 800364a:	4603      	mov	r3, r0
 800364c:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <system_setup+0x80>)
 800364e:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <system_setup+0x80>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d100      	bne.n	800365a <system_setup+0x1e>
        while (1);
 8003658:	e7fe      	b.n	8003658 <system_setup+0x1c>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800365a:	2000      	movs	r0, #0
 800365c:	f013 fb9f 	bl	8016d9e <osEventFlagsNew>
 8003660:	4603      	mov	r3, r0
 8003662:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <system_setup+0x84>)
 8003664:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <system_setup+0x84>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d100      	bne.n	8003670 <system_setup+0x34>
        while (1);
 800366e:	e7fe      	b.n	800366e <system_setup+0x32>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003670:	2000      	movs	r0, #0
 8003672:	f013 fb94 	bl	8016d9e <osEventFlagsNew>
 8003676:	4603      	mov	r3, r0
 8003678:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <system_setup+0x88>)
 800367a:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <system_setup+0x88>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d100      	bne.n	8003686 <system_setup+0x4a>
        while (1);
 8003684:	e7fe      	b.n	8003684 <system_setup+0x48>
    }

    TIM2->CCR4 = 0;
 8003686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800368a:	2200      	movs	r2, #0
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800368e:	210c      	movs	r1, #12
 8003690:	480d      	ldr	r0, [pc, #52]	; (80036c8 <system_setup+0x8c>)
 8003692:	f00f f8d5 	bl	8012840 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 8003696:	f001 fd85 	bl	80051a4 <voltage_monitor_init>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d100      	bne.n	80036a2 <system_setup+0x66>
		while (1);
 80036a0:	e7fe      	b.n	80036a0 <system_setup+0x64>
	}

	if (!init_adc_dma()) {
 80036a2:	f000 fbb7 	bl	8003e14 <init_adc_dma>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d100      	bne.n	80036ae <system_setup+0x72>
		while (1);
 80036ac:	e7fe      	b.n	80036ac <system_setup+0x70>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80036ae:	2201      	movs	r2, #1
 80036b0:	4906      	ldr	r1, [pc, #24]	; (80036cc <system_setup+0x90>)
 80036b2:	4807      	ldr	r0, [pc, #28]	; (80036d0 <system_setup+0x94>)
 80036b4:	f010 fda4 	bl	8014200 <HAL_UART_Receive_IT>

}
 80036b8:	bf00      	nop
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	24001a44 	.word	0x24001a44
 80036c0:	24001a48 	.word	0x24001a48
 80036c4:	24001a4c 	.word	0x24001a4c
 80036c8:	24001db0 	.word	0x24001db0
 80036cc:	24001a50 	.word	0x24001a50
 80036d0:	24001dfc 	.word	0x24001dfc

080036d4 <sync>:

void sync() {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
	send_ACK();
 80036da:	f000 f81f 	bl	800371c <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80036de:	480d      	ldr	r0, [pc, #52]	; (8003714 <sync+0x40>)
 80036e0:	f010 fdda 	bl	8014298 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80036e4:	2364      	movs	r3, #100	; 0x64
 80036e6:	2209      	movs	r2, #9
 80036e8:	490b      	ldr	r1, [pc, #44]	; (8003718 <sync+0x44>)
 80036ea:	480a      	ldr	r0, [pc, #40]	; (8003714 <sync+0x40>)
 80036ec:	f010 fcc0 	bl	8014070 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <sync+0x44>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2bff      	cmp	r3, #255	; 0xff
 80036fa:	d1f3      	bne.n	80036e4 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80036fc:	2201      	movs	r2, #1
 80036fe:	4906      	ldr	r1, [pc, #24]	; (8003718 <sync+0x44>)
 8003700:	4804      	ldr	r0, [pc, #16]	; (8003714 <sync+0x40>)
 8003702:	f010 fd7d 	bl	8014200 <HAL_UART_Receive_IT>

	send_ACK();
 8003706:	f000 f809 	bl	800371c <send_ACK>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	24001dfc 	.word	0x24001dfc
 8003718:	24001a50 	.word	0x24001a50

0800371c <send_ACK>:

void send_ACK() {
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <send_ACK+0x1c>)
 8003722:	22ff      	movs	r2, #255	; 0xff
 8003724:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8003726:	2364      	movs	r3, #100	; 0x64
 8003728:	2201      	movs	r2, #1
 800372a:	4903      	ldr	r1, [pc, #12]	; (8003738 <send_ACK+0x1c>)
 800372c:	4803      	ldr	r0, [pc, #12]	; (800373c <send_ACK+0x20>)
 800372e:	f010 fc11 	bl	8013f54 <HAL_UART_Transmit>
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	24001a9c 	.word	0x24001a9c
 800373c:	24001dfc 	.word	0x24001dfc

08003740 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003746:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <get_current_step+0xc0>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003752:	4293      	cmp	r3, r2
 8003754:	d04a      	beq.n	80037ec <get_current_step+0xac>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375c:	da48      	bge.n	80037f0 <get_current_step+0xb0>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003764:	4293      	cmp	r3, r2
 8003766:	d03f      	beq.n	80037e8 <get_current_step+0xa8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f640 628b 	movw	r2, #3723	; 0xe8b
 800376e:	4293      	cmp	r3, r2
 8003770:	dc3e      	bgt.n	80037f0 <get_current_step+0xb0>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003778:	4293      	cmp	r3, r2
 800377a:	d033      	beq.n	80037e4 <get_current_step+0xa4>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003782:	da35      	bge.n	80037f0 <get_current_step+0xb0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800378a:	4293      	cmp	r3, r2
 800378c:	d028      	beq.n	80037e0 <get_current_step+0xa0>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003794:	4293      	cmp	r3, r2
 8003796:	dc2b      	bgt.n	80037f0 <get_current_step+0xb0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f240 7245 	movw	r2, #1861	; 0x745
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01c      	beq.n	80037dc <get_current_step+0x9c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f240 7245 	movw	r2, #1861	; 0x745
 80037a8:	4293      	cmp	r3, r2
 80037aa:	dc21      	bgt.n	80037f0 <get_current_step+0xb0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d010      	beq.n	80037d8 <get_current_step+0x98>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80037bc:	4293      	cmp	r3, r2
 80037be:	dc17      	bgt.n	80037f0 <get_current_step+0xb0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d004      	beq.n	80037d0 <get_current_step+0x90>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80037cc:	d002      	beq.n	80037d4 <get_current_step+0x94>
 80037ce:	e00f      	b.n	80037f0 <get_current_step+0xb0>
	case 0:
		return 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e00e      	b.n	80037f2 <get_current_step+0xb2>
	case 620:
		return 1;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e00c      	b.n	80037f2 <get_current_step+0xb2>
	case 1241:
		return 2;
 80037d8:	2302      	movs	r3, #2
 80037da:	e00a      	b.n	80037f2 <get_current_step+0xb2>
	case 1861:
		return 3;
 80037dc:	2303      	movs	r3, #3
 80037de:	e008      	b.n	80037f2 <get_current_step+0xb2>
	case 2482:
		return 4;
 80037e0:	2304      	movs	r3, #4
 80037e2:	e006      	b.n	80037f2 <get_current_step+0xb2>
	case 3103:
		return 5;
 80037e4:	2305      	movs	r3, #5
 80037e6:	e004      	b.n	80037f2 <get_current_step+0xb2>
	case 3723:
		return 6;
 80037e8:	2306      	movs	r3, #6
 80037ea:	e002      	b.n	80037f2 <get_current_step+0xb2>
	case 4095:
		return 7;
 80037ec:	2307      	movs	r3, #7
 80037ee:	e000      	b.n	80037f2 <get_current_step+0xb2>
	default:
		return -1;
 80037f0:	23ff      	movs	r3, #255	; 0xff
	}
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40007400 	.word	0x40007400

08003804 <enter_stop>:

void enter_stop() {
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
	  send_ACK();
 8003808:	f7ff ff88 	bl	800371c <send_ACK>

	  vTaskSuspendAll();
 800380c:	f014 fe5e 	bl	80184cc <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003810:	2101      	movs	r1, #1
 8003812:	2001      	movs	r0, #1
 8003814:	f00a f8e8 	bl	800d9e8 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003818:	f7ff f8c0 	bl	800299c <__NVIC_SystemReset>

0800381c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003822:	463b      	mov	r3, r7
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800382e:	f003 fd87 	bl	8007340 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003832:	2301      	movs	r3, #1
 8003834:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003836:	2300      	movs	r3, #0
 8003838:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800383e:	231f      	movs	r3, #31
 8003840:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003842:	2387      	movs	r3, #135	; 0x87
 8003844:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003846:	2300      	movs	r3, #0
 8003848:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800384a:	2300      	movs	r3, #0
 800384c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800384e:	2301      	movs	r3, #1
 8003850:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003852:	2301      	movs	r3, #1
 8003854:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003856:	2300      	movs	r3, #0
 8003858:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800385e:	463b      	mov	r3, r7
 8003860:	4618      	mov	r0, r3
 8003862:	f003 fda5 	bl	80073b0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8003866:	2301      	movs	r3, #1
 8003868:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x081C0000;
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <MPU_Config+0x80>)
 800386c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800386e:	2311      	movs	r3, #17
 8003870:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8003872:	2300      	movs	r3, #0
 8003874:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8003876:	2301      	movs	r3, #1
 8003878:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800387a:	2303      	movs	r3, #3
 800387c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800387e:	2300      	movs	r3, #0
 8003880:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003886:	463b      	mov	r3, r7
 8003888:	4618      	mov	r0, r3
 800388a:	f003 fd91 	bl	80073b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800388e:	2004      	movs	r0, #4
 8003890:	f003 fd6e 	bl	8007370 <HAL_MPU_Enable>

}
 8003894:	bf00      	nop
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	081c0000 	.word	0x081c0000

080038a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80038b2:	f002 f80f 	bl	80058d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40001000 	.word	0x40001000

080038c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 80038ca:	2302      	movs	r3, #2
 80038cc:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 80038ce:	2314      	movs	r3, #20
 80038d0:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fe fb42 	bl	8001f5c <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80038e6:	bf00      	nop
 80038e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038ec:	481c      	ldr	r0, [pc, #112]	; (8003960 <create_pmt_packet+0x80>)
 80038ee:	f007 fc85 	bl	800b1fc <HAL_GPIO_ReadPin>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f7      	bne.n	80038e8 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 faa8 	bl	8004e50 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003900:	f107 0308 	add.w	r3, r7, #8
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fad9 	bl	8003ebc <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 800390a:	23bb      	movs	r3, #187	; 0xbb
 800390c:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 800390e:	23bb      	movs	r3, #187	; 0xbb
 8003910:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <create_pmt_packet+0x84>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	b29b      	uxth	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <create_pmt_packet+0x84>)
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003926:	7a3b      	ldrb	r3, [r7, #8]
 8003928:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 800392a:	7a7b      	ldrb	r3, [r7, #9]
 800392c:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 800392e:	793b      	ldrb	r3, [r7, #4]
 8003930:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003932:	797b      	ldrb	r3, [r7, #5]
 8003934:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003936:	79bb      	ldrb	r3, [r7, #6]
 8003938:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 800393e:	f107 010c 	add.w	r1, r7, #12
 8003942:	2364      	movs	r3, #100	; 0x64
 8003944:	220a      	movs	r2, #10
 8003946:	4808      	ldr	r0, [pc, #32]	; (8003968 <create_pmt_packet+0x88>)
 8003948:	f010 fb04 	bl	8013f54 <HAL_UART_Transmit>

	pmt_seq++;
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <create_pmt_packet+0x84>)
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <create_pmt_packet+0x84>)
 8003956:	801a      	strh	r2, [r3, #0]
}
 8003958:	bf00      	nop
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	58020000 	.word	0x58020000
 8003964:	24001a9e 	.word	0x24001a9e
 8003968:	24001dfc 	.word	0x24001dfc

0800396c <create_erpa_packet>:


void create_erpa_packet() {
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003972:	bf00      	nop
 8003974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003978:	4828      	ldr	r0, [pc, #160]	; (8003a1c <create_erpa_packet+0xb0>)
 800397a:	f007 fc3f 	bl	800b1fc <HAL_GPIO_ReadPin>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f7      	bne.n	8003974 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003984:	23ff      	movs	r3, #255	; 0xff
 8003986:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f001 fa60 	bl	8004e50 <get_uptime>
	sweep_step = get_current_step();
 8003990:	f7ff fed6 	bl	8003740 <get_current_step>
 8003994:	4603      	mov	r3, r0
 8003996:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003998:	f107 030c 	add.w	r3, r7, #12
 800399c:	4618      	mov	r0, r3
 800399e:	f000 faad 	bl	8003efc <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 80039a2:	f107 0308 	add.w	r3, r7, #8
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fac8 	bl	8003f3c <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80039ac:	23aa      	movs	r3, #170	; 0xaa
 80039ae:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 80039b0:	23aa      	movs	r3, #170	; 0xaa
 80039b2:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80039b4:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <create_erpa_packet+0xb4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80039be:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <create_erpa_packet+0xb4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <create_erpa_packet+0xb4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 80039d0:	7ffb      	ldrb	r3, [r7, #31]
 80039d2:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80039d4:	893b      	ldrh	r3, [r7, #8]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80039de:	893b      	ldrh	r3, [r7, #8]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80039e4:	7b3b      	ldrb	r3, [r7, #12]
 80039e6:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80039e8:	7b7b      	ldrb	r3, [r7, #13]
 80039ea:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 80039ec:	793b      	ldrb	r3, [r7, #4]
 80039ee:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 80039f0:	797b      	ldrb	r3, [r7, #5]
 80039f2:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 80039f4:	79bb      	ldrb	r3, [r7, #6]
 80039f6:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 80039fc:	f107 0110 	add.w	r1, r7, #16
 8003a00:	2364      	movs	r3, #100	; 0x64
 8003a02:	220e      	movs	r2, #14
 8003a04:	4807      	ldr	r0, [pc, #28]	; (8003a24 <create_erpa_packet+0xb8>)
 8003a06:	f010 faa5 	bl	8013f54 <HAL_UART_Transmit>

	erpa_seq++;
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <create_erpa_packet+0xb4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	4a03      	ldr	r2, [pc, #12]	; (8003a20 <create_erpa_packet+0xb4>)
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	58020400 	.word	0x58020400
 8003a20:	24001aa0 	.word	0x24001aa0
 8003a24:	24001dfc 	.word	0x24001dfc

08003a28 <create_hk_packet>:


void create_hk_packet() {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b094      	sub	sp, #80	; 0x50
 8003a2c:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 fa0d 	bl	8004e50 <get_uptime>
	get_timestamp(timestamp);
 8003a36:	f107 0308 	add.w	r3, r7, #8
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fa58 	bl	8004ef0 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8003a40:	f001 fdf0 	bl	8005624 <get_rail_monitor>
 8003a44:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003a46:	23cc      	movs	r3, #204	; 0xcc
 8003a48:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003a4a:	23cc      	movs	r3, #204	; 0xcc
 8003a4c:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003a4e:	4b9b      	ldr	r3, [pc, #620]	; (8003cbc <create_hk_packet+0x294>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003a5a:	4b98      	ldr	r3, [pc, #608]	; (8003cbc <create_hk_packet+0x294>)
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a64:	889b      	ldrh	r3, [r3, #4]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a70:	889b      	ldrh	r3, [r3, #4]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a78:	330a      	adds	r3, #10
 8003a7a:	889b      	ldrh	r3, [r3, #4]
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a86:	330a      	adds	r3, #10
 8003a88:	889b      	ldrh	r3, [r3, #4]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a90:	3314      	adds	r3, #20
 8003a92:	889b      	ldrh	r3, [r3, #4]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a9e:	3314      	adds	r3, #20
 8003aa0:	889b      	ldrh	r3, [r3, #4]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	331e      	adds	r3, #30
 8003aaa:	889b      	ldrh	r3, [r3, #4]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab6:	331e      	adds	r3, #30
 8003ab8:	889b      	ldrh	r3, [r3, #4]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac0:	3328      	adds	r3, #40	; 0x28
 8003ac2:	889b      	ldrh	r3, [r3, #4]
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad0:	3328      	adds	r3, #40	; 0x28
 8003ad2:	889b      	ldrh	r3, [r3, #4]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003adc:	3332      	adds	r3, #50	; 0x32
 8003ade:	889b      	ldrh	r3, [r3, #4]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aec:	3332      	adds	r3, #50	; 0x32
 8003aee:	889b      	ldrh	r3, [r3, #4]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af8:	333c      	adds	r3, #60	; 0x3c
 8003afa:	889b      	ldrh	r3, [r3, #4]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b08:	333c      	adds	r3, #60	; 0x3c
 8003b0a:	889b      	ldrh	r3, [r3, #4]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b14:	3346      	adds	r3, #70	; 0x46
 8003b16:	889b      	ldrh	r3, [r3, #4]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b24:	3346      	adds	r3, #70	; 0x46
 8003b26:	889b      	ldrh	r3, [r3, #4]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b30:	3350      	adds	r3, #80	; 0x50
 8003b32:	889b      	ldrh	r3, [r3, #4]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b40:	3350      	adds	r3, #80	; 0x50
 8003b42:	889b      	ldrh	r3, [r3, #4]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4c:	335a      	adds	r3, #90	; 0x5a
 8003b4e:	889b      	ldrh	r3, [r3, #4]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	335a      	adds	r3, #90	; 0x5a
 8003b5e:	889b      	ldrh	r3, [r3, #4]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b68:	3364      	adds	r3, #100	; 0x64
 8003b6a:	889b      	ldrh	r3, [r3, #4]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b78:	3364      	adds	r3, #100	; 0x64
 8003b7a:	889b      	ldrh	r3, [r3, #4]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b84:	336e      	adds	r3, #110	; 0x6e
 8003b86:	889b      	ldrh	r3, [r3, #4]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b94:	336e      	adds	r3, #110	; 0x6e
 8003b96:	889b      	ldrh	r3, [r3, #4]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba0:	3378      	adds	r3, #120	; 0x78
 8003ba2:	889b      	ldrh	r3, [r3, #4]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb0:	3378      	adds	r3, #120	; 0x78
 8003bb2:	889b      	ldrh	r3, [r3, #4]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bbc:	3382      	adds	r3, #130	; 0x82
 8003bbe:	889b      	ldrh	r3, [r3, #4]
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bcc:	3382      	adds	r3, #130	; 0x82
 8003bce:	889b      	ldrh	r3, [r3, #4]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd8:	338c      	adds	r3, #140	; 0x8c
 8003bda:	889b      	ldrh	r3, [r3, #4]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be8:	338c      	adds	r3, #140	; 0x8c
 8003bea:	889b      	ldrh	r3, [r3, #4]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf4:	3396      	adds	r3, #150	; 0x96
 8003bf6:	889b      	ldrh	r3, [r3, #4]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c04:	3396      	adds	r3, #150	; 0x96
 8003c06:	889b      	ldrh	r3, [r3, #4]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c10:	33a0      	adds	r3, #160	; 0xa0
 8003c12:	889b      	ldrh	r3, [r3, #4]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c20:	33a0      	adds	r3, #160	; 0xa0
 8003c22:	889b      	ldrh	r3, [r3, #4]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c2c:	33aa      	adds	r3, #170	; 0xaa
 8003c2e:	889b      	ldrh	r3, [r3, #4]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3c:	33aa      	adds	r3, #170	; 0xaa
 8003c3e:	889b      	ldrh	r3, [r3, #4]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8003c46:	7a3b      	ldrb	r3, [r7, #8]
 8003c48:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8003c4c:	7a7b      	ldrb	r3, [r7, #9]
 8003c4e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8003c52:	7abb      	ldrb	r3, [r7, #10]
 8003c54:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8003c58:	7afb      	ldrb	r3, [r7, #11]
 8003c5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8003c5e:	7b3b      	ldrb	r3, [r7, #12]
 8003c60:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8003c64:	7b7b      	ldrb	r3, [r7, #13]
 8003c66:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003c6a:	7bbb      	ldrb	r3, [r7, #14]
 8003c6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8003c76:	7c3b      	ldrb	r3, [r7, #16]
 8003c78:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003c7c:	7c7b      	ldrb	r3, [r7, #17]
 8003c7e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8003c82:	793b      	ldrb	r3, [r7, #4]
 8003c84:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003c88:	797b      	ldrb	r3, [r7, #5]
 8003c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003c8e:	79bb      	ldrb	r3, [r7, #6]
 8003c90:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003c9a:	f107 0114 	add.w	r1, r7, #20
 8003c9e:	2364      	movs	r3, #100	; 0x64
 8003ca0:	2236      	movs	r2, #54	; 0x36
 8003ca2:	4807      	ldr	r0, [pc, #28]	; (8003cc0 <create_hk_packet+0x298>)
 8003ca4:	f010 f956 	bl	8013f54 <HAL_UART_Transmit>

	hk_seq++;
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <create_hk_packet+0x294>)
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	4b02      	ldr	r3, [pc, #8]	; (8003cbc <create_hk_packet+0x294>)
 8003cb2:	801a      	strh	r2, [r3, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	3750      	adds	r7, #80	; 0x50
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	24001aa4 	.word	0x24001aa4
 8003cc0:	24001dfc 	.word	0x24001dfc

08003cc4 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <reset_packet_sequence_numbers+0x20>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <reset_packet_sequence_numbers+0x24>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <reset_packet_sequence_numbers+0x28>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	801a      	strh	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	24001a9e 	.word	0x24001a9e
 8003ce8:	24001aa0 	.word	0x24001aa0
 8003cec:	24001aa4 	.word	0x24001aa4

08003cf0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003d04:	2300      	movs	r3, #0
 8003d06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d08:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d0a:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <MX_RTC_Init+0xb8>)
 8003d0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d0e:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003d14:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d16:	2263      	movs	r2, #99	; 0x63
 8003d18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003d20:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d28:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d3a:	481a      	ldr	r0, [pc, #104]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d3c:	f00d fbf0 	bl	8011520 <HAL_RTC_Init>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003d46:	f7ff fdbd 	bl	80038c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	2201      	movs	r2, #1
 8003d62:	4619      	mov	r1, r3
 8003d64:	480f      	ldr	r0, [pc, #60]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d66:	f00d fc5d 	bl	8011624 <HAL_RTC_SetTime>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003d70:	f7ff fda8 	bl	80038c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003d74:	2301      	movs	r3, #1
 8003d76:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003d84:	463b      	mov	r3, r7
 8003d86:	2201      	movs	r2, #1
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4806      	ldr	r0, [pc, #24]	; (8003da4 <MX_RTC_Init+0xb4>)
 8003d8c:	f00d fd44 	bl	8011818 <HAL_RTC_SetDate>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003d96:	f7ff fd95 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	24001aa8 	.word	0x24001aa8
 8003da8:	58004000 	.word	0x58004000

08003dac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b0b2      	sub	sp, #200	; 0xc8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003db4:	f107 0308 	add.w	r3, r7, #8
 8003db8:	22c0      	movs	r2, #192	; 0xc0
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f016 f8f5 	bl	8019fac <memset>
  if(rtcHandle->Instance==RTC)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a10      	ldr	r2, [pc, #64]	; (8003e08 <HAL_RTC_MspInit+0x5c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d118      	bne.n	8003dfe <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003dcc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_RTC_MspInit+0x60>)
 8003dda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dde:	f107 0308 	add.w	r3, r7, #8
 8003de2:	4618      	mov	r0, r3
 8003de4:	f00a fe9e 	bl	800eb24 <HAL_RCCEx_PeriphCLKConfig>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003dee:	f7ff fd69 	bl	80038c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RTC_MspInit+0x64>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a06      	ldr	r2, [pc, #24]	; (8003e10 <HAL_RTC_MspInit+0x64>)
 8003df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003dfe:	bf00      	nop
 8003e00:	37c8      	adds	r7, #200	; 0xc8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	58004000 	.word	0x58004000
 8003e0c:	00019300 	.word	0x00019300
 8003e10:	58024400 	.word	0x58024400

08003e14 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003e1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e26:	481f      	ldr	r0, [pc, #124]	; (8003ea4 <init_adc_dma+0x90>)
 8003e28:	f003 f868 	bl	8006efc <HAL_ADCEx_Calibration_Start>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003e32:	f7ff fd47 	bl	80038c4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003e36:	220b      	movs	r2, #11
 8003e38:	491b      	ldr	r1, [pc, #108]	; (8003ea8 <init_adc_dma+0x94>)
 8003e3a:	481a      	ldr	r0, [pc, #104]	; (8003ea4 <init_adc_dma+0x90>)
 8003e3c:	f002 f93c 	bl	80060b8 <HAL_ADC_Start_DMA>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003e46:	f7ff fd3d 	bl	80038c4 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003e4a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003e4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e52:	4816      	ldr	r0, [pc, #88]	; (8003eac <init_adc_dma+0x98>)
 8003e54:	f003 f852 	bl	8006efc <HAL_ADCEx_Calibration_Start>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003e5e:	f7ff fd31 	bl	80038c4 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003e62:	2204      	movs	r2, #4
 8003e64:	4912      	ldr	r1, [pc, #72]	; (8003eb0 <init_adc_dma+0x9c>)
 8003e66:	4811      	ldr	r0, [pc, #68]	; (8003eac <init_adc_dma+0x98>)
 8003e68:	f002 f926 	bl	80060b8 <HAL_ADC_Start_DMA>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003e72:	f7ff fd27 	bl	80038c4 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <init_adc_dma+0xa0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <init_adc_dma+0xa0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e84:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <init_adc_dma+0xa4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <init_adc_dma+0xa4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e94:	601a      	str	r2, [r3, #0]


	status = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	71fb      	strb	r3, [r7, #7]

	return status;
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	2400013c 	.word	0x2400013c
 8003ea8:	24001ae0 	.word	0x24001ae0
 8003eac:	240001a0 	.word	0x240001a0
 8003eb0:	24001b00 	.word	0x24001b00
 8003eb4:	24001b9c 	.word	0x24001b9c
 8003eb8:	24001b14 	.word	0x24001b14

08003ebc <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	490b      	ldr	r1, [pc, #44]	; (8003ef4 <sample_pmt_spi+0x38>)
 8003ec8:	480b      	ldr	r0, [pc, #44]	; (8003ef8 <sample_pmt_spi+0x3c>)
 8003eca:	f00d ff6f 	bl	8011dac <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003ece:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <sample_pmt_spi+0x38>)
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <sample_pmt_spi+0x38>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	7bba      	ldrb	r2, [r7, #14]
 8003eea:	701a      	strb	r2, [r3, #0]
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	24001b0c 	.word	0x24001b0c
 8003ef8:	24001b14 	.word	0x24001b14

08003efc <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8003f04:	2201      	movs	r2, #1
 8003f06:	490b      	ldr	r1, [pc, #44]	; (8003f34 <sample_erpa_spi+0x38>)
 8003f08:	480b      	ldr	r0, [pc, #44]	; (8003f38 <sample_erpa_spi+0x3c>)
 8003f0a:	f00d ff4f 	bl	8011dac <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <sample_erpa_spi+0x38>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <sample_erpa_spi+0x38>)
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3301      	adds	r3, #1
 8003f28:	7bba      	ldrb	r2, [r7, #14]
 8003f2a:	701a      	strb	r2, [r3, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	24001b08 	.word	0x24001b08
 8003f38:	24001b9c 	.word	0x24001b9c

08003f3c <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <sample_erpa_adc+0x20>)
 8003f46:	885b      	ldrh	r3, [r3, #2]
 8003f48:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	89fa      	ldrh	r2, [r7, #14]
 8003f4e:	801a      	strh	r2, [r3, #0]
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	24001ae0 	.word	0x24001ae0

08003f60 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8003f68:	2390      	movs	r3, #144	; 0x90
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f8a2 	bl	80040b4 <poll_i2c_sensor>
 8003f70:	4603      	mov	r3, r0
 8003f72:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8003f74:	2394      	movs	r3, #148	; 0x94
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f89c 	bl	80040b4 <poll_i2c_sensor>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8003f80:	2392      	movs	r3, #146	; 0x92
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f896 	bl	80040b4 <poll_i2c_sensor>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8003f8c:	2396      	movs	r3, #150	; 0x96
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f890 	bl	80040b4 <poll_i2c_sensor>
 8003f94:	4603      	mov	r3, r0
 8003f96:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	89fa      	ldrh	r2, [r7, #14]
 8003f9c:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	89ba      	ldrh	r2, [r7, #12]
 8003fa4:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	897a      	ldrh	r2, [r7, #10]
 8003fac:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3306      	adds	r3, #6
 8003fb2:	893a      	ldrh	r2, [r7, #8]
 8003fb4:	801a      	strh	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8003fc0:	b480      	push	{r7}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <sample_hk_adc1+0xa0>)
 8003fca:	8a9b      	ldrh	r3, [r3, #20]
 8003fcc:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <sample_hk_adc1+0xa0>)
 8003fd0:	8a1b      	ldrh	r3, [r3, #16]
 8003fd2:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8003fd4:	4b22      	ldr	r3, [pc, #136]	; (8004060 <sample_hk_adc1+0xa0>)
 8003fd6:	899b      	ldrh	r3, [r3, #12]
 8003fd8:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8003fda:	4b21      	ldr	r3, [pc, #132]	; (8004060 <sample_hk_adc1+0xa0>)
 8003fdc:	8a5b      	ldrh	r3, [r3, #18]
 8003fde:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <sample_hk_adc1+0xa0>)
 8003fe2:	889b      	ldrh	r3, [r3, #4]
 8003fe4:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8003fe6:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <sample_hk_adc1+0xa0>)
 8003fe8:	88db      	ldrh	r3, [r3, #6]
 8003fea:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8003fec:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <sample_hk_adc1+0xa0>)
 8003fee:	89db      	ldrh	r3, [r3, #14]
 8003ff0:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <sample_hk_adc1+0xa0>)
 8003ff4:	891b      	ldrh	r3, [r3, #8]
 8003ff6:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <sample_hk_adc1+0xa0>)
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8003ffe:	4b18      	ldr	r3, [pc, #96]	; (8004060 <sample_hk_adc1+0xa0>)
 8004000:	895b      	ldrh	r3, [r3, #10]
 8004002:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8bfa      	ldrh	r2, [r7, #30]
 8004008:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3302      	adds	r3, #2
 800400e:	8bba      	ldrh	r2, [r7, #28]
 8004010:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	8b7a      	ldrh	r2, [r7, #26]
 8004018:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3306      	adds	r3, #6
 800401e:	8b3a      	ldrh	r2, [r7, #24]
 8004020:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3308      	adds	r3, #8
 8004026:	8afa      	ldrh	r2, [r7, #22]
 8004028:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	330a      	adds	r3, #10
 800402e:	8aba      	ldrh	r2, [r7, #20]
 8004030:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	330c      	adds	r3, #12
 8004036:	8a7a      	ldrh	r2, [r7, #18]
 8004038:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	330e      	adds	r3, #14
 800403e:	8a3a      	ldrh	r2, [r7, #16]
 8004040:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3310      	adds	r3, #16
 8004046:	89fa      	ldrh	r2, [r7, #14]
 8004048:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3312      	adds	r3, #18
 800404e:	89ba      	ldrh	r2, [r7, #12]
 8004050:	801a      	strh	r2, [r3, #0]
}
 8004052:	bf00      	nop
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	24001ae0 	.word	0x24001ae0

08004064 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <sample_hk_adc3+0x4c>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8004072:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <sample_hk_adc3+0x4c>)
 8004074:	885b      	ldrh	r3, [r3, #2]
 8004076:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <sample_hk_adc3+0x4c>)
 800407a:	889b      	ldrh	r3, [r3, #4]
 800407c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800407e:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <sample_hk_adc3+0x4c>)
 8004080:	88db      	ldrh	r3, [r3, #6]
 8004082:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	89fa      	ldrh	r2, [r7, #14]
 8004088:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3302      	adds	r3, #2
 800408e:	89ba      	ldrh	r2, [r7, #12]
 8004090:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3304      	adds	r3, #4
 8004096:	897a      	ldrh	r2, [r7, #10]
 8004098:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3306      	adds	r3, #6
 800409e:	893a      	ldrh	r2, [r7, #8]
 80040a0:	801a      	strh	r2, [r3, #0]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	24001b00 	.word	0x24001b00

080040b4 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 80040be:	2200      	movs	r2, #0
 80040c0:	4b20      	ldr	r3, [pc, #128]	; (8004144 <poll_i2c_sensor+0x90>)
 80040c2:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	b299      	uxth	r1, r3
 80040c8:	2301      	movs	r3, #1
 80040ca:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <poll_i2c_sensor+0x90>)
 80040cc:	481e      	ldr	r0, [pc, #120]	; (8004148 <poll_i2c_sensor+0x94>)
 80040ce:	f007 f963 	bl	800b398 <HAL_I2C_Master_Transmit_DMA>
 80040d2:	4603      	mov	r3, r0
 80040d4:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80040d6:	7b7b      	ldrb	r3, [r7, #13]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 80040dc:	481b      	ldr	r0, [pc, #108]	; (800414c <poll_i2c_sensor+0x98>)
 80040de:	f015 ffdb 	bl	801a098 <puts>
 80040e2:	e028      	b.n	8004136 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80040e4:	bf00      	nop
 80040e6:	4818      	ldr	r0, [pc, #96]	; (8004148 <poll_i2c_sensor+0x94>)
 80040e8:	f007 fc3d 	bl	800b966 <HAL_I2C_GetState>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d1f9      	bne.n	80040e6 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	b299      	uxth	r1, r3
 80040f6:	2302      	movs	r3, #2
 80040f8:	4a12      	ldr	r2, [pc, #72]	; (8004144 <poll_i2c_sensor+0x90>)
 80040fa:	4813      	ldr	r0, [pc, #76]	; (8004148 <poll_i2c_sensor+0x94>)
 80040fc:	f007 fa60 	bl	800b5c0 <HAL_I2C_Master_Receive_DMA>
 8004100:	4603      	mov	r3, r0
 8004102:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8004104:	7b7b      	ldrb	r3, [r7, #13]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 800410a:	4811      	ldr	r0, [pc, #68]	; (8004150 <poll_i2c_sensor+0x9c>)
 800410c:	f015 ffc4 	bl	801a098 <puts>
 8004110:	e011      	b.n	8004136 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004112:	bf00      	nop
 8004114:	480c      	ldr	r0, [pc, #48]	; (8004148 <poll_i2c_sensor+0x94>)
 8004116:	f007 fc26 	bl	800b966 <HAL_I2C_GetState>
 800411a:	4603      	mov	r3, r0
 800411c:	2b20      	cmp	r3, #32
 800411e:	d1f9      	bne.n	8004114 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <poll_i2c_sensor+0x90>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8004128:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800412c:	4a05      	ldr	r2, [pc, #20]	; (8004144 <poll_i2c_sensor+0x90>)
 800412e:	7852      	ldrb	r2, [r2, #1]
 8004130:	4313      	orrs	r3, r2
 8004132:	10db      	asrs	r3, r3, #3
 8004134:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8004136:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	24001b10 	.word	0x24001b10
 8004148:	240018f0 	.word	0x240018f0
 800414c:	0801ac00 	.word	0x0801ac00
 8004150:	0801ac10 	.word	0x0801ac10

08004154 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <MX_SPI1_Init+0xa8>)
 800415a:	4a29      	ldr	r2, [pc, #164]	; (8004200 <MX_SPI1_Init+0xac>)
 800415c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800415e:	4b27      	ldr	r3, [pc, #156]	; (80041fc <MX_SPI1_Init+0xa8>)
 8004160:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004164:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004166:	4b25      	ldr	r3, [pc, #148]	; (80041fc <MX_SPI1_Init+0xa8>)
 8004168:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800416c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <MX_SPI1_Init+0xa8>)
 8004170:	220f      	movs	r2, #15
 8004172:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004174:	4b21      	ldr	r3, [pc, #132]	; (80041fc <MX_SPI1_Init+0xa8>)
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800417a:	4b20      	ldr	r3, [pc, #128]	; (80041fc <MX_SPI1_Init+0xa8>)
 800417c:	2200      	movs	r2, #0
 800417e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004180:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <MX_SPI1_Init+0xa8>)
 8004182:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004186:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004188:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <MX_SPI1_Init+0xa8>)
 800418a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800418e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004190:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <MX_SPI1_Init+0xa8>)
 8004192:	2200      	movs	r2, #0
 8004194:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004196:	4b19      	ldr	r3, [pc, #100]	; (80041fc <MX_SPI1_Init+0xa8>)
 8004198:	2200      	movs	r2, #0
 800419a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800419c:	4b17      	ldr	r3, [pc, #92]	; (80041fc <MX_SPI1_Init+0xa8>)
 800419e:	2200      	movs	r2, #0
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80041a8:	4b14      	ldr	r3, [pc, #80]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041ae:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041be:	2200      	movs	r2, #0
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041dc:	2200      	movs	r2, #0
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041e6:	4805      	ldr	r0, [pc, #20]	; (80041fc <MX_SPI1_Init+0xa8>)
 80041e8:	f00d fcbc 	bl	8011b64 <HAL_SPI_Init>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80041f2:	f7ff fb67 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	24001b14 	.word	0x24001b14
 8004200:	40013000 	.word	0x40013000

08004204 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004208:	4b28      	ldr	r3, [pc, #160]	; (80042ac <MX_SPI2_Init+0xa8>)
 800420a:	4a29      	ldr	r2, [pc, #164]	; (80042b0 <MX_SPI2_Init+0xac>)
 800420c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800420e:	4b27      	ldr	r3, [pc, #156]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004210:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004214:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004216:	4b25      	ldr	r3, [pc, #148]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004218:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800421c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800421e:	4b23      	ldr	r3, [pc, #140]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004220:	220f      	movs	r2, #15
 8004222:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004224:	4b21      	ldr	r3, [pc, #132]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800422a:	4b20      	ldr	r3, [pc, #128]	; (80042ac <MX_SPI2_Init+0xa8>)
 800422c:	2200      	movs	r2, #0
 800422e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004230:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004232:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004236:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004238:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <MX_SPI2_Init+0xa8>)
 800423a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800423e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004242:	2200      	movs	r2, #0
 8004244:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004246:	4b19      	ldr	r3, [pc, #100]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004248:	2200      	movs	r2, #0
 800424a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800424c:	4b17      	ldr	r3, [pc, #92]	; (80042ac <MX_SPI2_Init+0xa8>)
 800424e:	2200      	movs	r2, #0
 8004250:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004254:	2200      	movs	r2, #0
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <MX_SPI2_Init+0xa8>)
 800425a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800425e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004262:	2200      	movs	r2, #0
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004268:	2200      	movs	r2, #0
 800426a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <MX_SPI2_Init+0xa8>)
 800426e:	2200      	movs	r2, #0
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004272:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004274:	2200      	movs	r2, #0
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <MX_SPI2_Init+0xa8>)
 800427a:	2200      	movs	r2, #0
 800427c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004280:	2200      	movs	r2, #0
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004286:	2200      	movs	r2, #0
 8004288:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800428a:	4b08      	ldr	r3, [pc, #32]	; (80042ac <MX_SPI2_Init+0xa8>)
 800428c:	2200      	movs	r2, #0
 800428e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004292:	2200      	movs	r2, #0
 8004294:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004296:	4805      	ldr	r0, [pc, #20]	; (80042ac <MX_SPI2_Init+0xa8>)
 8004298:	f00d fc64 	bl	8011b64 <HAL_SPI_Init>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80042a2:	f7ff fb0f 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	24001b9c 	.word	0x24001b9c
 80042b0:	40003800 	.word	0x40003800

080042b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b0bc      	sub	sp, #240	; 0xf0
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042cc:	f107 0318 	add.w	r3, r7, #24
 80042d0:	22c0      	movs	r2, #192	; 0xc0
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f015 fe69 	bl	8019fac <memset>
  if(spiHandle->Instance==SPI1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a83      	ldr	r2, [pc, #524]	; (80044ec <HAL_SPI_MspInit+0x238>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d17c      	bne.n	80043de <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80042e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042f4:	f107 0318 	add.w	r3, r7, #24
 80042f8:	4618      	mov	r0, r3
 80042fa:	f00a fc13 	bl	800eb24 <HAL_RCCEx_PeriphCLKConfig>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004304:	f7ff fade 	bl	80038c4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004308:	4b79      	ldr	r3, [pc, #484]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 800430a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800430e:	4a78      	ldr	r2, [pc, #480]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 8004310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004314:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004318:	4b75      	ldr	r3, [pc, #468]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 800431a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800431e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004326:	4b72      	ldr	r3, [pc, #456]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 8004328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800432c:	4a70      	ldr	r2, [pc, #448]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004336:	4b6e      	ldr	r3, [pc, #440]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 8004338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004344:	2318      	movs	r3, #24
 8004346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434a:	2302      	movs	r3, #2
 800434c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004356:	2300      	movs	r3, #0
 8004358:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800435c:	2305      	movs	r3, #5
 800435e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004362:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004366:	4619      	mov	r1, r3
 8004368:	4862      	ldr	r0, [pc, #392]	; (80044f4 <HAL_SPI_MspInit+0x240>)
 800436a:	f006 fd97 	bl	800ae9c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800436e:	4b62      	ldr	r3, [pc, #392]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 8004370:	4a62      	ldr	r2, [pc, #392]	; (80044fc <HAL_SPI_MspInit+0x248>)
 8004372:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004374:	4b60      	ldr	r3, [pc, #384]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 8004376:	2225      	movs	r2, #37	; 0x25
 8004378:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800437a:	4b5f      	ldr	r3, [pc, #380]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 800437c:	2200      	movs	r2, #0
 800437e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004380:	4b5d      	ldr	r3, [pc, #372]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 8004382:	2200      	movs	r2, #0
 8004384:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004386:	4b5c      	ldr	r3, [pc, #368]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 8004388:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800438c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800438e:	4b5a      	ldr	r3, [pc, #360]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 8004390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004394:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004396:	4b58      	ldr	r3, [pc, #352]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 8004398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800439c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800439e:	4b56      	ldr	r3, [pc, #344]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043a4:	4b54      	ldr	r3, [pc, #336]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043aa:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80043b0:	4851      	ldr	r0, [pc, #324]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 80043b2:	f003 fc43 	bl	8007c3c <HAL_DMA_Init>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80043bc:	f7ff fa82 	bl	80038c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a4d      	ldr	r2, [pc, #308]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 80043c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80043c6:	4a4c      	ldr	r2, [pc, #304]	; (80044f8 <HAL_SPI_MspInit+0x244>)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80043cc:	2200      	movs	r2, #0
 80043ce:	2105      	movs	r1, #5
 80043d0:	2023      	movs	r0, #35	; 0x23
 80043d2:	f002 ff8d 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80043d6:	2023      	movs	r0, #35	; 0x23
 80043d8:	f002 ffa4 	bl	8007324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80043dc:	e081      	b.n	80044e2 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a47      	ldr	r2, [pc, #284]	; (8004500 <HAL_SPI_MspInit+0x24c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d17c      	bne.n	80044e2 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80043e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043f8:	f107 0318 	add.w	r3, r7, #24
 80043fc:	4618      	mov	r0, r3
 80043fe:	f00a fb91 	bl	800eb24 <HAL_RCCEx_PeriphCLKConfig>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8004408:	f7ff fa5c 	bl	80038c4 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800440c:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 800440e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004412:	4a37      	ldr	r2, [pc, #220]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 8004414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004418:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800441c:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 800441e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800442a:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 800442c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004430:	4a2f      	ldr	r2, [pc, #188]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 8004432:	f043 0302 	orr.w	r3, r3, #2
 8004436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800443a:	4b2d      	ldr	r3, [pc, #180]	; (80044f0 <HAL_SPI_MspInit+0x23c>)
 800443c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004448:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800444c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004450:	2302      	movs	r3, #2
 8004452:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004456:	2300      	movs	r3, #0
 8004458:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445c:	2300      	movs	r3, #0
 800445e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004462:	2305      	movs	r3, #5
 8004464:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004468:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800446c:	4619      	mov	r1, r3
 800446e:	4821      	ldr	r0, [pc, #132]	; (80044f4 <HAL_SPI_MspInit+0x240>)
 8004470:	f006 fd14 	bl	800ae9c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004474:	4b23      	ldr	r3, [pc, #140]	; (8004504 <HAL_SPI_MspInit+0x250>)
 8004476:	4a24      	ldr	r2, [pc, #144]	; (8004508 <HAL_SPI_MspInit+0x254>)
 8004478:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800447a:	4b22      	ldr	r3, [pc, #136]	; (8004504 <HAL_SPI_MspInit+0x250>)
 800447c:	2227      	movs	r2, #39	; 0x27
 800447e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004480:	4b20      	ldr	r3, [pc, #128]	; (8004504 <HAL_SPI_MspInit+0x250>)
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004486:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <HAL_SPI_MspInit+0x250>)
 8004488:	2200      	movs	r2, #0
 800448a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800448c:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <HAL_SPI_MspInit+0x250>)
 800448e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004492:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <HAL_SPI_MspInit+0x250>)
 8004496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800449a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <HAL_SPI_MspInit+0x250>)
 800449e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044a2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80044a4:	4b17      	ldr	r3, [pc, #92]	; (8004504 <HAL_SPI_MspInit+0x250>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044aa:	4b16      	ldr	r3, [pc, #88]	; (8004504 <HAL_SPI_MspInit+0x250>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044b0:	4b14      	ldr	r3, [pc, #80]	; (8004504 <HAL_SPI_MspInit+0x250>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80044b6:	4813      	ldr	r0, [pc, #76]	; (8004504 <HAL_SPI_MspInit+0x250>)
 80044b8:	f003 fbc0 	bl	8007c3c <HAL_DMA_Init>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 80044c2:	f7ff f9ff 	bl	80038c4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <HAL_SPI_MspInit+0x250>)
 80044ca:	67da      	str	r2, [r3, #124]	; 0x7c
 80044cc:	4a0d      	ldr	r2, [pc, #52]	; (8004504 <HAL_SPI_MspInit+0x250>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80044d2:	2200      	movs	r2, #0
 80044d4:	2105      	movs	r1, #5
 80044d6:	2024      	movs	r0, #36	; 0x24
 80044d8:	f002 ff0a 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80044dc:	2024      	movs	r0, #36	; 0x24
 80044de:	f002 ff21 	bl	8007324 <HAL_NVIC_EnableIRQ>
}
 80044e2:	bf00      	nop
 80044e4:	37f0      	adds	r7, #240	; 0xf0
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40013000 	.word	0x40013000
 80044f0:	58024400 	.word	0x58024400
 80044f4:	58020400 	.word	0x58020400
 80044f8:	24001c24 	.word	0x24001c24
 80044fc:	40020070 	.word	0x40020070
 8004500:	40003800 	.word	0x40003800
 8004504:	24001c9c 	.word	0x24001c9c
 8004508:	40020058 	.word	0x40020058

0800450c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <HAL_MspInit+0x38>)
 8004514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004518:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <HAL_MspInit+0x38>)
 800451a:	f043 0302 	orr.w	r3, r3, #2
 800451e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004522:	4b08      	ldr	r3, [pc, #32]	; (8004544 <HAL_MspInit+0x38>)
 8004524:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004530:	2200      	movs	r2, #0
 8004532:	210f      	movs	r1, #15
 8004534:	f06f 0001 	mvn.w	r0, #1
 8004538:	f002 feda 	bl	80072f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	58024400 	.word	0x58024400

08004548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b090      	sub	sp, #64	; 0x40
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d827      	bhi.n	80045a6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004556:	2200      	movs	r2, #0
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	2036      	movs	r0, #54	; 0x36
 800455c:	f002 fec8 	bl	80072f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004560:	2036      	movs	r0, #54	; 0x36
 8004562:	f002 fedf 	bl	8007324 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004566:	4a29      	ldr	r2, [pc, #164]	; (800460c <HAL_InitTick+0xc4>)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800456c:	4b28      	ldr	r3, [pc, #160]	; (8004610 <HAL_InitTick+0xc8>)
 800456e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004572:	4a27      	ldr	r2, [pc, #156]	; (8004610 <HAL_InitTick+0xc8>)
 8004574:	f043 0310 	orr.w	r3, r3, #16
 8004578:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800457c:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_InitTick+0xc8>)
 800457e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800458a:	f107 0210 	add.w	r2, r7, #16
 800458e:	f107 0314 	add.w	r3, r7, #20
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f00a fa83 	bl	800eaa0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <HAL_InitTick+0x6a>
 80045a4:	e001      	b.n	80045aa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e02b      	b.n	8004602 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80045aa:	f00a fa4d 	bl	800ea48 <HAL_RCC_GetPCLK1Freq>
 80045ae:	63f8      	str	r0, [r7, #60]	; 0x3c
 80045b0:	e004      	b.n	80045bc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80045b2:	f00a fa49 	bl	800ea48 <HAL_RCC_GetPCLK1Freq>
 80045b6:	4603      	mov	r3, r0
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80045bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <HAL_InitTick+0xcc>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	0c9b      	lsrs	r3, r3, #18
 80045c6:	3b01      	subs	r3, #1
 80045c8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80045ca:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_InitTick+0xd0>)
 80045cc:	4a13      	ldr	r2, [pc, #76]	; (800461c <HAL_InitTick+0xd4>)
 80045ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_InitTick+0xd0>)
 80045d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80045d8:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <HAL_InitTick+0xd0>)
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <HAL_InitTick+0xd0>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <HAL_InitTick+0xd0>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80045ea:	480b      	ldr	r0, [pc, #44]	; (8004618 <HAL_InitTick+0xd0>)
 80045ec:	f00e f859 	bl	80126a2 <HAL_TIM_Base_Init>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d104      	bne.n	8004600 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80045f6:	4808      	ldr	r0, [pc, #32]	; (8004618 <HAL_InitTick+0xd0>)
 80045f8:	f00e f8aa 	bl	8012750 <HAL_TIM_Base_Start_IT>
 80045fc:	4603      	mov	r3, r0
 80045fe:	e000      	b.n	8004602 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
}
 8004602:	4618      	mov	r0, r3
 8004604:	3740      	adds	r7, #64	; 0x40
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	24000098 	.word	0x24000098
 8004610:	58024400 	.word	0x58024400
 8004614:	431bde83 	.word	0x431bde83
 8004618:	24001d14 	.word	0x24001d14
 800461c:	40001000 	.word	0x40001000

08004620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004624:	e7fe      	b.n	8004624 <NMI_Handler+0x4>

08004626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800462a:	e7fe      	b.n	800462a <HardFault_Handler+0x4>

0800462c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004630:	e7fe      	b.n	8004630 <MemManage_Handler+0x4>

08004632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004632:	b480      	push	{r7}
 8004634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004636:	e7fe      	b.n	8004636 <BusFault_Handler+0x4>

08004638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800463c:	e7fe      	b.n	800463c <UsageFault_Handler+0x4>

0800463e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004650:	4802      	ldr	r0, [pc, #8]	; (800465c <DMA1_Stream0_IRQHandler+0x10>)
 8004652:	f004 fe1d 	bl	8009290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	24000204 	.word	0x24000204

08004660 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004664:	4802      	ldr	r0, [pc, #8]	; (8004670 <DMA1_Stream1_IRQHandler+0x10>)
 8004666:	f004 fe13 	bl	8009290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	2400027c 	.word	0x2400027c

08004674 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004678:	4802      	ldr	r0, [pc, #8]	; (8004684 <DMA1_Stream2_IRQHandler+0x10>)
 800467a:	f004 fe09 	bl	8009290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	24001e90 	.word	0x24001e90

08004688 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800468c:	4802      	ldr	r0, [pc, #8]	; (8004698 <DMA1_Stream3_IRQHandler+0x10>)
 800468e:	f004 fdff 	bl	8009290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	24001c9c 	.word	0x24001c9c

0800469c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80046a0:	4802      	ldr	r0, [pc, #8]	; (80046ac <DMA1_Stream4_IRQHandler+0x10>)
 80046a2:	f004 fdf5 	bl	8009290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	24001c24 	.word	0x24001c24

080046b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80046b4:	4802      	ldr	r0, [pc, #8]	; (80046c0 <DMA1_Stream5_IRQHandler+0x10>)
 80046b6:	f004 fdeb 	bl	8009290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	24000308 	.word	0x24000308

080046c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80046c8:	4802      	ldr	r0, [pc, #8]	; (80046d4 <DMA1_Stream6_IRQHandler+0x10>)
 80046ca:	f004 fde1 	bl	8009290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	24001944 	.word	0x24001944

080046d8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046dc:	4802      	ldr	r0, [pc, #8]	; (80046e8 <TIM1_BRK_IRQHandler+0x10>)
 80046de:	f00e fb4e 	bl	8012d7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	24001d64 	.word	0x24001d64

080046ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046f0:	4802      	ldr	r0, [pc, #8]	; (80046fc <TIM1_UP_IRQHandler+0x10>)
 80046f2:	f00e fb44 	bl	8012d7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	24001d64 	.word	0x24001d64

08004700 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004704:	4802      	ldr	r0, [pc, #8]	; (8004710 <TIM1_TRG_COM_IRQHandler+0x10>)
 8004706:	f00e fb3a 	bl	8012d7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	24001d64 	.word	0x24001d64

08004714 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004718:	4802      	ldr	r0, [pc, #8]	; (8004724 <TIM1_CC_IRQHandler+0x10>)
 800471a:	f00e fb30 	bl	8012d7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	24001d64 	.word	0x24001d64

08004728 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800472c:	4802      	ldr	r0, [pc, #8]	; (8004738 <TIM2_IRQHandler+0x10>)
 800472e:	f00e fb26 	bl	8012d7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	24001db0 	.word	0x24001db0

0800473c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004740:	4802      	ldr	r0, [pc, #8]	; (800474c <I2C1_EV_IRQHandler+0x10>)
 8004742:	f007 f82d 	bl	800b7a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	240018f0 	.word	0x240018f0

08004750 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004754:	4802      	ldr	r0, [pc, #8]	; (8004760 <I2C1_ER_IRQHandler+0x10>)
 8004756:	f007 f83d 	bl	800b7d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	240018f0 	.word	0x240018f0

08004764 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004768:	4802      	ldr	r0, [pc, #8]	; (8004774 <SPI1_IRQHandler+0x10>)
 800476a:	f00d fc67 	bl	801203c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	24001b14 	.word	0x24001b14

08004778 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <SPI2_IRQHandler+0x10>)
 800477e:	f00d fc5d 	bl	801203c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	24001b9c 	.word	0x24001b9c

0800478c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <USART1_IRQHandler+0x10>)
 8004792:	f00f fe37 	bl	8014404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	24001dfc 	.word	0x24001dfc

080047a0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <DMA1_Stream7_IRQHandler+0x10>)
 80047a6:	f004 fd73 	bl	8009290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	240019bc 	.word	0x240019bc

080047b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <TIM6_DAC_IRQHandler+0x20>)
 80047ba:	791b      	ldrb	r3, [r3, #4]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80047c2:	4804      	ldr	r0, [pc, #16]	; (80047d4 <TIM6_DAC_IRQHandler+0x20>)
 80047c4:	f002 ffbb 	bl	800773e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80047c8:	4803      	ldr	r0, [pc, #12]	; (80047d8 <TIM6_DAC_IRQHandler+0x24>)
 80047ca:	f00e fad8 	bl	8012d7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	240002f4 	.word	0x240002f4
 80047d8:	24001d14 	.word	0x24001d14

080047dc <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80047e6:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <ITM_SendChar+0x48>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a0e      	ldr	r2, [pc, #56]	; (8004824 <ITM_SendChar+0x48>)
 80047ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047f0:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <ITM_SendChar+0x4c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a0c      	ldr	r2, [pc, #48]	; (8004828 <ITM_SendChar+0x4c>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80047fe:	bf00      	nop
 8004800:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f8      	beq.n	8004800 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800480e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	6013      	str	r3, [r2, #0]
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	e000edfc 	.word	0xe000edfc
 8004828:	e0000e00 	.word	0xe0000e00

0800482c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e00a      	b.n	8004854 <_read+0x28>
		*ptr++ = __io_getchar();
 800483e:	f3af 8000 	nop.w
 8004842:	4601      	mov	r1, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	60ba      	str	r2, [r7, #8]
 800484a:	b2ca      	uxtb	r2, r1
 800484c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	3301      	adds	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	dbf0      	blt.n	800483e <_read+0x12>
	}

	return len;
 800485c:	687b      	ldr	r3, [r7, #4]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004866:	b580      	push	{r7, lr}
 8004868:	b086      	sub	sp, #24
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e009      	b.n	800488c <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	60ba      	str	r2, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff ffab 	bl	80047dc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	3301      	adds	r3, #1
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	dbf1      	blt.n	8004878 <_write+0x12>
	}
	return len;
 8004894:	687b      	ldr	r3, [r7, #4]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <_close>:

int _close(int file) {
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80048a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <_fstat>:

int _fstat(int file, struct stat *st) {
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048c6:	605a      	str	r2, [r3, #4]
	return 0;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <_isatty>:

int _isatty(int file) {
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80048de:	2301      	movs	r3, #1
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004910:	4a14      	ldr	r2, [pc, #80]	; (8004964 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800491c:	4b13      	ldr	r3, [pc, #76]	; (800496c <_sbrk+0x64>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d102      	bne.n	800492a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004924:	4b11      	ldr	r3, [pc, #68]	; (800496c <_sbrk+0x64>)
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <_sbrk+0x68>)
 8004928:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800492a:	4b10      	ldr	r3, [pc, #64]	; (800496c <_sbrk+0x64>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4413      	add	r3, r2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	429a      	cmp	r2, r3
 8004936:	d207      	bcs.n	8004948 <_sbrk+0x40>
		errno = ENOMEM;
 8004938:	f015 fb00 	bl	8019f3c <__errno>
 800493c:	4603      	mov	r3, r0
 800493e:	220c      	movs	r2, #12
 8004940:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004946:	e009      	b.n	800495c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004948:	4b08      	ldr	r3, [pc, #32]	; (800496c <_sbrk+0x64>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800494e:	4b07      	ldr	r3, [pc, #28]	; (800496c <_sbrk+0x64>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	4a05      	ldr	r2, [pc, #20]	; (800496c <_sbrk+0x64>)
 8004958:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800495a:	68fb      	ldr	r3, [r7, #12]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	24080000 	.word	0x24080000
 8004968:	00000400 	.word	0x00000400
 800496c:	24001d60 	.word	0x24001d60
 8004970:	24006940 	.word	0x24006940

08004974 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004978:	4b37      	ldr	r3, [pc, #220]	; (8004a58 <SystemInit+0xe4>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	4a36      	ldr	r2, [pc, #216]	; (8004a58 <SystemInit+0xe4>)
 8004980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004988:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <SystemInit+0xe8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	2b06      	cmp	r3, #6
 8004992:	d807      	bhi.n	80049a4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004994:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <SystemInit+0xe8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 030f 	bic.w	r3, r3, #15
 800499c:	4a2f      	ldr	r2, [pc, #188]	; (8004a5c <SystemInit+0xe8>)
 800499e:	f043 0307 	orr.w	r3, r3, #7
 80049a2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80049a4:	4b2e      	ldr	r3, [pc, #184]	; (8004a60 <SystemInit+0xec>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2d      	ldr	r2, [pc, #180]	; (8004a60 <SystemInit+0xec>)
 80049aa:	f043 0301 	orr.w	r3, r3, #1
 80049ae:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80049b0:	4b2b      	ldr	r3, [pc, #172]	; (8004a60 <SystemInit+0xec>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80049b6:	4b2a      	ldr	r3, [pc, #168]	; (8004a60 <SystemInit+0xec>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4929      	ldr	r1, [pc, #164]	; (8004a60 <SystemInit+0xec>)
 80049bc:	4b29      	ldr	r3, [pc, #164]	; (8004a64 <SystemInit+0xf0>)
 80049be:	4013      	ands	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80049c2:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <SystemInit+0xe8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80049ce:	4b23      	ldr	r3, [pc, #140]	; (8004a5c <SystemInit+0xe8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 030f 	bic.w	r3, r3, #15
 80049d6:	4a21      	ldr	r2, [pc, #132]	; (8004a5c <SystemInit+0xe8>)
 80049d8:	f043 0307 	orr.w	r3, r3, #7
 80049dc:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80049de:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <SystemInit+0xec>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80049e4:	4b1e      	ldr	r3, [pc, #120]	; (8004a60 <SystemInit+0xec>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80049ea:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <SystemInit+0xec>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <SystemInit+0xec>)
 80049f2:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <SystemInit+0xf4>)
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80049f6:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <SystemInit+0xec>)
 80049f8:	4a1c      	ldr	r2, [pc, #112]	; (8004a6c <SystemInit+0xf8>)
 80049fa:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80049fc:	4b18      	ldr	r3, [pc, #96]	; (8004a60 <SystemInit+0xec>)
 80049fe:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <SystemInit+0xfc>)
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004a02:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <SystemInit+0xec>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004a08:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <SystemInit+0xec>)
 8004a0a:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <SystemInit+0xfc>)
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004a0e:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <SystemInit+0xec>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004a14:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <SystemInit+0xec>)
 8004a16:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <SystemInit+0xfc>)
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004a1a:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <SystemInit+0xec>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004a20:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <SystemInit+0xec>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <SystemInit+0xec>)
 8004a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a2a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <SystemInit+0xec>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <SystemInit+0x100>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <SystemInit+0x104>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3e:	d202      	bcs.n	8004a46 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004a40:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <SystemInit+0x108>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004a46:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <SystemInit+0x10c>)
 8004a48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004a4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004a4e:	bf00      	nop
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	e000ed00 	.word	0xe000ed00
 8004a5c:	52002000 	.word	0x52002000
 8004a60:	58024400 	.word	0x58024400
 8004a64:	eaf6ed7f 	.word	0xeaf6ed7f
 8004a68:	02020200 	.word	0x02020200
 8004a6c:	01ff0000 	.word	0x01ff0000
 8004a70:	01010280 	.word	0x01010280
 8004a74:	5c001000 	.word	0x5c001000
 8004a78:	ffff0000 	.word	0xffff0000
 8004a7c:	51008108 	.word	0x51008108
 8004a80:	52004000 	.word	0x52004000

08004a84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b09a      	sub	sp, #104	; 0x68
 8004a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	609a      	str	r2, [r3, #8]
 8004a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	609a      	str	r2, [r3, #8]
 8004ab0:	60da      	str	r2, [r3, #12]
 8004ab2:	611a      	str	r2, [r3, #16]
 8004ab4:	615a      	str	r2, [r3, #20]
 8004ab6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ab8:	1d3b      	adds	r3, r7, #4
 8004aba:	222c      	movs	r2, #44	; 0x2c
 8004abc:	2100      	movs	r1, #0
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f015 fa74 	bl	8019fac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ac4:	4b44      	ldr	r3, [pc, #272]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004ac6:	4a45      	ldr	r2, [pc, #276]	; (8004bdc <MX_TIM1_Init+0x158>)
 8004ac8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004aca:	4b43      	ldr	r3, [pc, #268]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004acc:	224a      	movs	r2, #74	; 0x4a
 8004ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ad0:	4b41      	ldr	r3, [pc, #260]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004ad6:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004ad8:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004adc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ade:	4b3e      	ldr	r3, [pc, #248]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ae4:	4b3c      	ldr	r3, [pc, #240]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004aea:	4b3b      	ldr	r3, [pc, #236]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004af0:	4839      	ldr	r0, [pc, #228]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004af2:	f00d fdd6 	bl	80126a2 <HAL_TIM_Base_Init>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004afc:	f7fe fee2 	bl	80038c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b04:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004b06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4832      	ldr	r0, [pc, #200]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004b0e:	f00e fb51 	bl	80131b4 <HAL_TIM_ConfigClockSource>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004b18:	f7fe fed4 	bl	80038c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004b1c:	482e      	ldr	r0, [pc, #184]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004b1e:	f00e f8cd 	bl	8012cbc <HAL_TIM_PWM_Init>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004b28:	f7fe fecc 	bl	80038c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004b30:	2300      	movs	r3, #0
 8004b32:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4826      	ldr	r0, [pc, #152]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004b40:	f00f f88e 	bl	8013c60 <HAL_TIMEx_MasterConfigSynchronization>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004b4a:	f7fe febb 	bl	80038c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b4e:	2360      	movs	r3, #96	; 0x60
 8004b50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004b52:	f240 13df 	movw	r3, #479	; 0x1df
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b60:	2300      	movs	r3, #0
 8004b62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b64:	2300      	movs	r3, #0
 8004b66:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b70:	2200      	movs	r2, #0
 8004b72:	4619      	mov	r1, r3
 8004b74:	4818      	ldr	r0, [pc, #96]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004b76:	f00e fa09 	bl	8012f8c <HAL_TIM_PWM_ConfigChannel>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004b80:	f7fe fea0 	bl	80038c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4807      	ldr	r0, [pc, #28]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004bba:	f00f f8df 	bl	8013d7c <HAL_TIMEx_ConfigBreakDeadTime>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004bc4:	f7fe fe7e 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004bc8:	4803      	ldr	r0, [pc, #12]	; (8004bd8 <MX_TIM1_Init+0x154>)
 8004bca:	f000 f8dd 	bl	8004d88 <HAL_TIM_MspPostInit>

}
 8004bce:	bf00      	nop
 8004bd0:	3768      	adds	r7, #104	; 0x68
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	24001d64 	.word	0x24001d64
 8004bdc:	40010000 	.word	0x40010000

08004be0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08e      	sub	sp, #56	; 0x38
 8004be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	609a      	str	r2, [r3, #8]
 8004bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bf4:	f107 031c 	add.w	r3, r7, #28
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c00:	463b      	mov	r3, r7
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	605a      	str	r2, [r3, #4]
 8004c08:	609a      	str	r2, [r3, #8]
 8004c0a:	60da      	str	r2, [r3, #12]
 8004c0c:	611a      	str	r2, [r3, #16]
 8004c0e:	615a      	str	r2, [r3, #20]
 8004c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c12:	4b2d      	ldr	r3, [pc, #180]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004c1a:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004c1c:	224a      	movs	r2, #74	; 0x4a
 8004c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c20:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004c26:	4b28      	ldr	r3, [pc, #160]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004c28:	f640 4234 	movw	r2, #3124	; 0xc34
 8004c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c2e:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c34:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004c36:	2280      	movs	r2, #128	; 0x80
 8004c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c3a:	4823      	ldr	r0, [pc, #140]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004c3c:	f00d fd31 	bl	80126a2 <HAL_TIM_Base_Init>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004c46:	f7fe fe3d 	bl	80038c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c54:	4619      	mov	r1, r3
 8004c56:	481c      	ldr	r0, [pc, #112]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004c58:	f00e faac 	bl	80131b4 <HAL_TIM_ConfigClockSource>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004c62:	f7fe fe2f 	bl	80038c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004c66:	4818      	ldr	r0, [pc, #96]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004c68:	f00e f828 	bl	8012cbc <HAL_TIM_PWM_Init>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004c72:	f7fe fe27 	bl	80038c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004c76:	2320      	movs	r3, #32
 8004c78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c7e:	f107 031c 	add.w	r3, r7, #28
 8004c82:	4619      	mov	r1, r3
 8004c84:	4810      	ldr	r0, [pc, #64]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004c86:	f00e ffeb 	bl	8013c60 <HAL_TIMEx_MasterConfigSynchronization>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004c90:	f7fe fe18 	bl	80038c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c94:	2360      	movs	r3, #96	; 0x60
 8004c96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ca4:	463b      	mov	r3, r7
 8004ca6:	220c      	movs	r2, #12
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4807      	ldr	r0, [pc, #28]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004cac:	f00e f96e 	bl	8012f8c <HAL_TIM_PWM_ConfigChannel>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004cb6:	f7fe fe05 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004cba:	4803      	ldr	r0, [pc, #12]	; (8004cc8 <MX_TIM2_Init+0xe8>)
 8004cbc:	f000 f864 	bl	8004d88 <HAL_TIM_MspPostInit>

}
 8004cc0:	bf00      	nop
 8004cc2:	3738      	adds	r7, #56	; 0x38
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	24001db0 	.word	0x24001db0

08004ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a29      	ldr	r2, [pc, #164]	; (8004d80 <HAL_TIM_Base_MspInit+0xb4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d12f      	bne.n	8004d3e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004cde:	4b29      	ldr	r3, [pc, #164]	; (8004d84 <HAL_TIM_Base_MspInit+0xb8>)
 8004ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ce4:	4a27      	ldr	r2, [pc, #156]	; (8004d84 <HAL_TIM_Base_MspInit+0xb8>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004cee:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <HAL_TIM_Base_MspInit+0xb8>)
 8004cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2105      	movs	r1, #5
 8004d00:	2018      	movs	r0, #24
 8004d02:	f002 faf5 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004d06:	2018      	movs	r0, #24
 8004d08:	f002 fb0c 	bl	8007324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2105      	movs	r1, #5
 8004d10:	2019      	movs	r0, #25
 8004d12:	f002 faed 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004d16:	2019      	movs	r0, #25
 8004d18:	f002 fb04 	bl	8007324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2105      	movs	r1, #5
 8004d20:	201a      	movs	r0, #26
 8004d22:	f002 fae5 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004d26:	201a      	movs	r0, #26
 8004d28:	f002 fafc 	bl	8007324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2105      	movs	r1, #5
 8004d30:	201b      	movs	r0, #27
 8004d32:	f002 fadd 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004d36:	201b      	movs	r0, #27
 8004d38:	f002 faf4 	bl	8007324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004d3c:	e01b      	b.n	8004d76 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d46:	d116      	bne.n	8004d76 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d48:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <HAL_TIM_Base_MspInit+0xb8>)
 8004d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d4e:	4a0d      	ldr	r2, [pc, #52]	; (8004d84 <HAL_TIM_Base_MspInit+0xb8>)
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <HAL_TIM_Base_MspInit+0xb8>)
 8004d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2105      	movs	r1, #5
 8004d6a:	201c      	movs	r0, #28
 8004d6c:	f002 fac0 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004d70:	201c      	movs	r0, #28
 8004d72:	f002 fad7 	bl	8007324 <HAL_NVIC_EnableIRQ>
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40010000 	.word	0x40010000
 8004d84:	58024400 	.word	0x58024400

08004d88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d90:	f107 0314 	add.w	r3, r7, #20
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <HAL_TIM_MspPostInit+0xb8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d120      	bne.n	8004dec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004daa:	4b26      	ldr	r3, [pc, #152]	; (8004e44 <HAL_TIM_MspPostInit+0xbc>)
 8004dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004db0:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <HAL_TIM_MspPostInit+0xbc>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004dba:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <HAL_TIM_MspPostInit+0xbc>)
 8004dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dce:	2302      	movs	r3, #2
 8004dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dde:	f107 0314 	add.w	r3, r7, #20
 8004de2:	4619      	mov	r1, r3
 8004de4:	4818      	ldr	r0, [pc, #96]	; (8004e48 <HAL_TIM_MspPostInit+0xc0>)
 8004de6:	f006 f859 	bl	800ae9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004dea:	e024      	b.n	8004e36 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d11f      	bne.n	8004e36 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <HAL_TIM_MspPostInit+0xbc>)
 8004df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dfc:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <HAL_TIM_MspPostInit+0xbc>)
 8004dfe:	f043 0302 	orr.w	r3, r3, #2
 8004e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e06:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <HAL_TIM_MspPostInit+0xbc>)
 8004e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e22:	2300      	movs	r3, #0
 8004e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e26:	2301      	movs	r3, #1
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e2a:	f107 0314 	add.w	r3, r7, #20
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4806      	ldr	r0, [pc, #24]	; (8004e4c <HAL_TIM_MspPostInit+0xc4>)
 8004e32:	f006 f833 	bl	800ae9c <HAL_GPIO_Init>
}
 8004e36:	bf00      	nop
 8004e38:	3728      	adds	r7, #40	; 0x28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	58024400 	.word	0x58024400
 8004e48:	58020000 	.word	0x58020000
 8004e4c:	58020400 	.word	0x58020400

08004e50 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004e5c:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <get_uptime+0x94>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004e62:	4b21      	ldr	r3, [pc, #132]	; (8004ee8 <get_uptime+0x98>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004e68:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <get_uptime+0x94>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d005      	beq.n	8004e7e <get_uptime+0x2e>
		ms = uptime_millis;
 8004e72:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <get_uptime+0x94>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004e78:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <get_uptime+0x98>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e84:	fb03 f202 	mul.w	r2, r3, r2
 8004e88:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <get_uptime+0x98>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	4917      	ldr	r1, [pc, #92]	; (8004eec <get_uptime+0x9c>)
 8004e90:	fba1 1303 	umull	r1, r3, r1, r3
 8004e94:	099b      	lsrs	r3, r3, #6
 8004e96:	68f9      	ldr	r1, [r7, #12]
 8004e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <get_uptime+0x5a>
		uptime = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	0e1b      	lsrs	r3, r3, #24
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	0c1a      	lsrs	r2, r3, #16
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	0a1a      	lsrs	r2, r3, #8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3303      	adds	r3, #3
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	24001a94 	.word	0x24001a94
 8004ee8:	e000e010 	.word	0xe000e010
 8004eec:	10624dd3 	.word	0x10624dd3

08004ef0 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004ef8:	f107 0310 	add.w	r3, r7, #16
 8004efc:	2200      	movs	r2, #0
 8004efe:	4619      	mov	r1, r3
 8004f00:	4821      	ldr	r0, [pc, #132]	; (8004f88 <get_timestamp+0x98>)
 8004f02:	f00c fc2d 	bl	8011760 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8004f06:	f107 030c 	add.w	r3, r7, #12
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	481e      	ldr	r0, [pc, #120]	; (8004f88 <get_timestamp+0x98>)
 8004f10:	f00c fd0a 	bl	8011928 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2264      	movs	r2, #100	; 0x64
 8004f18:	fb03 f202 	mul.w	r2, r3, r2
 8004f1c:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <get_timestamp+0x9c>)
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	7b7a      	ldrb	r2, [r7, #13]
 8004f2e:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3302      	adds	r3, #2
 8004f34:	7bba      	ldrb	r2, [r7, #14]
 8004f36:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3303      	adds	r3, #3
 8004f3c:	7c3a      	ldrb	r2, [r7, #16]
 8004f3e:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	7c7a      	ldrb	r2, [r7, #17]
 8004f46:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3305      	adds	r3, #5
 8004f4c:	7cba      	ldrb	r2, [r7, #18]
 8004f4e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	0e1a      	lsrs	r2, r3, #24
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3306      	adds	r3, #6
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	0c1a      	lsrs	r2, r3, #16
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3307      	adds	r3, #7
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	0a1a      	lsrs	r2, r3, #8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3309      	adds	r3, #9
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	3728      	adds	r7, #40	; 0x28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	24001aa8 	.word	0x24001aa8
 8004f8c:	000f4240 	.word	0x000f4240

08004f90 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f94:	4b30      	ldr	r3, [pc, #192]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004f96:	4a31      	ldr	r2, [pc, #196]	; (800505c <MX_USART1_UART_Init+0xcc>)
 8004f98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8004f9a:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004f9c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004fa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fa2:	4b2d      	ldr	r3, [pc, #180]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004fa8:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004fae:	4b2a      	ldr	r3, [pc, #168]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fb4:	4b28      	ldr	r3, [pc, #160]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004fb6:	220c      	movs	r2, #12
 8004fb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fba:	4b27      	ldr	r3, [pc, #156]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fcc:	4b22      	ldr	r3, [pc, #136]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fd2:	4b21      	ldr	r3, [pc, #132]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fd8:	481f      	ldr	r0, [pc, #124]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004fda:	f00e ff6b 	bl	8013eb4 <HAL_UART_Init>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004fe4:	f7fe fc6e 	bl	80038c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fe8:	2100      	movs	r1, #0
 8004fea:	481b      	ldr	r0, [pc, #108]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004fec:	f011 fcb1 	bl	8016952 <HAL_UARTEx_SetTxFifoThreshold>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004ff6:	f7fe fc65 	bl	80038c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	4816      	ldr	r0, [pc, #88]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8004ffe:	f011 fce6 	bl	80169ce <HAL_UARTEx_SetRxFifoThreshold>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005008:	f7fe fc5c 	bl	80038c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800500c:	4812      	ldr	r0, [pc, #72]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 800500e:	f011 fc67 	bl	80168e0 <HAL_UARTEx_DisableFifoMode>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005018:	f7fe fc54 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 800501c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005020:	480d      	ldr	r0, [pc, #52]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8005022:	f011 fcd4 	bl	80169ce <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8005026:	480c      	ldr	r0, [pc, #48]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8005028:	f011 fc1f 	bl	801686a <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 800502c:	480a      	ldr	r0, [pc, #40]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 800502e:	f011 fbe9 	bl	8016804 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005040:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	4b03      	ldr	r3, [pc, #12]	; (8005058 <MX_USART1_UART_Init+0xc8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005050:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	24001dfc 	.word	0x24001dfc
 800505c:	40011000 	.word	0x40011000

08005060 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b0ba      	sub	sp, #232	; 0xe8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005068:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	605a      	str	r2, [r3, #4]
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005078:	f107 0310 	add.w	r3, r7, #16
 800507c:	22c0      	movs	r2, #192	; 0xc0
 800507e:	2100      	movs	r1, #0
 8005080:	4618      	mov	r0, r3
 8005082:	f014 ff93 	bl	8019fac <memset>
  if(uartHandle->Instance==USART1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a41      	ldr	r2, [pc, #260]	; (8005190 <HAL_UART_MspInit+0x130>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d17b      	bne.n	8005188 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005090:	f04f 0201 	mov.w	r2, #1
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 800509c:	2318      	movs	r3, #24
 800509e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050a2:	f107 0310 	add.w	r3, r7, #16
 80050a6:	4618      	mov	r0, r3
 80050a8:	f009 fd3c 	bl	800eb24 <HAL_RCCEx_PeriphCLKConfig>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80050b2:	f7fe fc07 	bl	80038c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050b6:	4b37      	ldr	r3, [pc, #220]	; (8005194 <HAL_UART_MspInit+0x134>)
 80050b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050bc:	4a35      	ldr	r2, [pc, #212]	; (8005194 <HAL_UART_MspInit+0x134>)
 80050be:	f043 0310 	orr.w	r3, r3, #16
 80050c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050c6:	4b33      	ldr	r3, [pc, #204]	; (8005194 <HAL_UART_MspInit+0x134>)
 80050c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d4:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <HAL_UART_MspInit+0x134>)
 80050d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050da:	4a2e      	ldr	r2, [pc, #184]	; (8005194 <HAL_UART_MspInit+0x134>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050e4:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <HAL_UART_MspInit+0x134>)
 80050e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80050f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80050f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fa:	2302      	movs	r3, #2
 80050fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005100:	2300      	movs	r3, #0
 8005102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005106:	2300      	movs	r3, #0
 8005108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800510c:	2307      	movs	r3, #7
 800510e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005112:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005116:	4619      	mov	r1, r3
 8005118:	481f      	ldr	r0, [pc, #124]	; (8005198 <HAL_UART_MspInit+0x138>)
 800511a:	f005 febf 	bl	800ae9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800511e:	4b1f      	ldr	r3, [pc, #124]	; (800519c <HAL_UART_MspInit+0x13c>)
 8005120:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <HAL_UART_MspInit+0x140>)
 8005122:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005124:	4b1d      	ldr	r3, [pc, #116]	; (800519c <HAL_UART_MspInit+0x13c>)
 8005126:	222a      	movs	r2, #42	; 0x2a
 8005128:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800512a:	4b1c      	ldr	r3, [pc, #112]	; (800519c <HAL_UART_MspInit+0x13c>)
 800512c:	2240      	movs	r2, #64	; 0x40
 800512e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005130:	4b1a      	ldr	r3, [pc, #104]	; (800519c <HAL_UART_MspInit+0x13c>)
 8005132:	2200      	movs	r2, #0
 8005134:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005136:	4b19      	ldr	r3, [pc, #100]	; (800519c <HAL_UART_MspInit+0x13c>)
 8005138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800513c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <HAL_UART_MspInit+0x13c>)
 8005140:	2200      	movs	r2, #0
 8005142:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005144:	4b15      	ldr	r3, [pc, #84]	; (800519c <HAL_UART_MspInit+0x13c>)
 8005146:	2200      	movs	r2, #0
 8005148:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <HAL_UART_MspInit+0x13c>)
 800514c:	2200      	movs	r2, #0
 800514e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005150:	4b12      	ldr	r3, [pc, #72]	; (800519c <HAL_UART_MspInit+0x13c>)
 8005152:	2200      	movs	r2, #0
 8005154:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <HAL_UART_MspInit+0x13c>)
 8005158:	2200      	movs	r2, #0
 800515a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800515c:	480f      	ldr	r0, [pc, #60]	; (800519c <HAL_UART_MspInit+0x13c>)
 800515e:	f002 fd6d 	bl	8007c3c <HAL_DMA_Init>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005168:	f7fe fbac 	bl	80038c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0b      	ldr	r2, [pc, #44]	; (800519c <HAL_UART_MspInit+0x13c>)
 8005170:	67da      	str	r2, [r3, #124]	; 0x7c
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <HAL_UART_MspInit+0x13c>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005178:	2200      	movs	r2, #0
 800517a:	2105      	movs	r1, #5
 800517c:	2025      	movs	r0, #37	; 0x25
 800517e:	f002 f8b7 	bl	80072f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005182:	2025      	movs	r0, #37	; 0x25
 8005184:	f002 f8ce 	bl	8007324 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005188:	bf00      	nop
 800518a:	37e8      	adds	r7, #232	; 0xe8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40011000 	.word	0x40011000
 8005194:	58024400 	.word	0x58024400
 8005198:	58020000 	.word	0x58020000
 800519c:	24001e90 	.word	0x24001e90
 80051a0:	40020040 	.word	0x40020040

080051a4 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 80051ae:	4bc2      	ldr	r3, [pc, #776]	; (80054b8 <voltage_monitor_init+0x314>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 80051b4:	4bc0      	ldr	r3, [pc, #768]	; (80054b8 <voltage_monitor_init+0x314>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80051ba:	4bbf      	ldr	r3, [pc, #764]	; (80054b8 <voltage_monitor_init+0x314>)
 80051bc:	2201      	movs	r2, #1
 80051be:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80051c0:	4bbd      	ldr	r3, [pc, #756]	; (80054b8 <voltage_monitor_init+0x314>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 80051c6:	4bbc      	ldr	r3, [pc, #752]	; (80054b8 <voltage_monitor_init+0x314>)
 80051c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80051cc:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 80051ce:	4bba      	ldr	r3, [pc, #744]	; (80054b8 <voltage_monitor_init+0x314>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80051d4:	4bb8      	ldr	r3, [pc, #736]	; (80054b8 <voltage_monitor_init+0x314>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80051da:	4bb7      	ldr	r3, [pc, #732]	; (80054b8 <voltage_monitor_init+0x314>)
 80051dc:	2200      	movs	r2, #0
 80051de:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80051e0:	4bb5      	ldr	r3, [pc, #724]	; (80054b8 <voltage_monitor_init+0x314>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 80051e6:	4bb4      	ldr	r3, [pc, #720]	; (80054b8 <voltage_monitor_init+0x314>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80051ec:	4bb2      	ldr	r3, [pc, #712]	; (80054b8 <voltage_monitor_init+0x314>)
 80051ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80051f2:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80051f4:	4bb0      	ldr	r3, [pc, #704]	; (80054b8 <voltage_monitor_init+0x314>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80051fa:	4baf      	ldr	r3, [pc, #700]	; (80054b8 <voltage_monitor_init+0x314>)
 80051fc:	2202      	movs	r2, #2
 80051fe:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005200:	4bad      	ldr	r3, [pc, #692]	; (80054b8 <voltage_monitor_init+0x314>)
 8005202:	2200      	movs	r2, #0
 8005204:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8005206:	4bac      	ldr	r3, [pc, #688]	; (80054b8 <voltage_monitor_init+0x314>)
 8005208:	2201      	movs	r2, #1
 800520a:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 800520c:	4baa      	ldr	r3, [pc, #680]	; (80054b8 <voltage_monitor_init+0x314>)
 800520e:	2200      	movs	r2, #0
 8005210:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005212:	4ba9      	ldr	r3, [pc, #676]	; (80054b8 <voltage_monitor_init+0x314>)
 8005214:	f242 7210 	movw	r2, #10000	; 0x2710
 8005218:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 800521a:	4ba7      	ldr	r3, [pc, #668]	; (80054b8 <voltage_monitor_init+0x314>)
 800521c:	2200      	movs	r2, #0
 800521e:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005220:	4ba5      	ldr	r3, [pc, #660]	; (80054b8 <voltage_monitor_init+0x314>)
 8005222:	2203      	movs	r2, #3
 8005224:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8005226:	4ba4      	ldr	r3, [pc, #656]	; (80054b8 <voltage_monitor_init+0x314>)
 8005228:	2200      	movs	r2, #0
 800522a:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 800522c:	4ba2      	ldr	r3, [pc, #648]	; (80054b8 <voltage_monitor_init+0x314>)
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8005234:	4ba0      	ldr	r3, [pc, #640]	; (80054b8 <voltage_monitor_init+0x314>)
 8005236:	2200      	movs	r2, #0
 8005238:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 800523a:	4b9f      	ldr	r3, [pc, #636]	; (80054b8 <voltage_monitor_init+0x314>)
 800523c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005240:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8005242:	4b9d      	ldr	r3, [pc, #628]	; (80054b8 <voltage_monitor_init+0x314>)
 8005244:	2200      	movs	r2, #0
 8005246:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8005248:	4b9b      	ldr	r3, [pc, #620]	; (80054b8 <voltage_monitor_init+0x314>)
 800524a:	2204      	movs	r2, #4
 800524c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005250:	4b99      	ldr	r3, [pc, #612]	; (80054b8 <voltage_monitor_init+0x314>)
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8005258:	4b97      	ldr	r3, [pc, #604]	; (80054b8 <voltage_monitor_init+0x314>)
 800525a:	2201      	movs	r2, #1
 800525c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005260:	4b95      	ldr	r3, [pc, #596]	; (80054b8 <voltage_monitor_init+0x314>)
 8005262:	2200      	movs	r2, #0
 8005264:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005266:	4b94      	ldr	r3, [pc, #592]	; (80054b8 <voltage_monitor_init+0x314>)
 8005268:	f242 7210 	movw	r2, #10000	; 0x2710
 800526c:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 800526e:	4b92      	ldr	r3, [pc, #584]	; (80054b8 <voltage_monitor_init+0x314>)
 8005270:	2200      	movs	r2, #0
 8005272:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8005274:	4b90      	ldr	r3, [pc, #576]	; (80054b8 <voltage_monitor_init+0x314>)
 8005276:	2205      	movs	r2, #5
 8005278:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 800527c:	4b8e      	ldr	r3, [pc, #568]	; (80054b8 <voltage_monitor_init+0x314>)
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8005284:	4b8c      	ldr	r3, [pc, #560]	; (80054b8 <voltage_monitor_init+0x314>)
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 800528c:	4b8a      	ldr	r3, [pc, #552]	; (80054b8 <voltage_monitor_init+0x314>)
 800528e:	2200      	movs	r2, #0
 8005290:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005292:	4b89      	ldr	r3, [pc, #548]	; (80054b8 <voltage_monitor_init+0x314>)
 8005294:	f242 7210 	movw	r2, #10000	; 0x2710
 8005298:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 800529a:	4b87      	ldr	r3, [pc, #540]	; (80054b8 <voltage_monitor_init+0x314>)
 800529c:	2200      	movs	r2, #0
 800529e:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80052a0:	4b85      	ldr	r3, [pc, #532]	; (80054b8 <voltage_monitor_init+0x314>)
 80052a2:	2206      	movs	r2, #6
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 80052a8:	4b83      	ldr	r3, [pc, #524]	; (80054b8 <voltage_monitor_init+0x314>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 80052b0:	4b81      	ldr	r3, [pc, #516]	; (80054b8 <voltage_monitor_init+0x314>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80052b8:	4b7f      	ldr	r3, [pc, #508]	; (80054b8 <voltage_monitor_init+0x314>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80052c0:	4b7d      	ldr	r3, [pc, #500]	; (80054b8 <voltage_monitor_init+0x314>)
 80052c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80052c6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80052ca:	4b7b      	ldr	r3, [pc, #492]	; (80054b8 <voltage_monitor_init+0x314>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80052d2:	4b79      	ldr	r3, [pc, #484]	; (80054b8 <voltage_monitor_init+0x314>)
 80052d4:	2207      	movs	r2, #7
 80052d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80052da:	4b77      	ldr	r3, [pc, #476]	; (80054b8 <voltage_monitor_init+0x314>)
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 80052e2:	4b75      	ldr	r3, [pc, #468]	; (80054b8 <voltage_monitor_init+0x314>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80052ea:	4b73      	ldr	r3, [pc, #460]	; (80054b8 <voltage_monitor_init+0x314>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80052f2:	4b71      	ldr	r3, [pc, #452]	; (80054b8 <voltage_monitor_init+0x314>)
 80052f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80052f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80052fc:	4b6e      	ldr	r3, [pc, #440]	; (80054b8 <voltage_monitor_init+0x314>)
 80052fe:	2200      	movs	r2, #0
 8005300:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8005304:	4b6c      	ldr	r3, [pc, #432]	; (80054b8 <voltage_monitor_init+0x314>)
 8005306:	2208      	movs	r2, #8
 8005308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 800530c:	4b6a      	ldr	r3, [pc, #424]	; (80054b8 <voltage_monitor_init+0x314>)
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8005314:	4b68      	ldr	r3, [pc, #416]	; (80054b8 <voltage_monitor_init+0x314>)
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 800531c:	4b66      	ldr	r3, [pc, #408]	; (80054b8 <voltage_monitor_init+0x314>)
 800531e:	2200      	movs	r2, #0
 8005320:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8005324:	4b64      	ldr	r3, [pc, #400]	; (80054b8 <voltage_monitor_init+0x314>)
 8005326:	f640 42b9 	movw	r2, #3257	; 0xcb9
 800532a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 800532e:	4b62      	ldr	r3, [pc, #392]	; (80054b8 <voltage_monitor_init+0x314>)
 8005330:	f640 3283 	movw	r2, #2947	; 0xb83
 8005334:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8005338:	4b5f      	ldr	r3, [pc, #380]	; (80054b8 <voltage_monitor_init+0x314>)
 800533a:	2209      	movs	r2, #9
 800533c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005340:	4b5d      	ldr	r3, [pc, #372]	; (80054b8 <voltage_monitor_init+0x314>)
 8005342:	2200      	movs	r2, #0
 8005344:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8005348:	4b5b      	ldr	r3, [pc, #364]	; (80054b8 <voltage_monitor_init+0x314>)
 800534a:	2200      	movs	r2, #0
 800534c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005350:	4b59      	ldr	r3, [pc, #356]	; (80054b8 <voltage_monitor_init+0x314>)
 8005352:	2200      	movs	r2, #0
 8005354:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8005358:	4b57      	ldr	r3, [pc, #348]	; (80054b8 <voltage_monitor_init+0x314>)
 800535a:	f640 7245 	movw	r2, #3909	; 0xf45
 800535e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005362:	4b55      	ldr	r3, [pc, #340]	; (80054b8 <voltage_monitor_init+0x314>)
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800536a:	4b53      	ldr	r3, [pc, #332]	; (80054b8 <voltage_monitor_init+0x314>)
 800536c:	220a      	movs	r2, #10
 800536e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005372:	4b51      	ldr	r3, [pc, #324]	; (80054b8 <voltage_monitor_init+0x314>)
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 800537a:	4b4f      	ldr	r3, [pc, #316]	; (80054b8 <voltage_monitor_init+0x314>)
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8005382:	4b4d      	ldr	r3, [pc, #308]	; (80054b8 <voltage_monitor_init+0x314>)
 8005384:	2200      	movs	r2, #0
 8005386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 800538a:	4b4b      	ldr	r3, [pc, #300]	; (80054b8 <voltage_monitor_init+0x314>)
 800538c:	f640 7245 	movw	r2, #3909	; 0xf45
 8005390:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8005394:	4b48      	ldr	r3, [pc, #288]	; (80054b8 <voltage_monitor_init+0x314>)
 8005396:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800539a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 800539e:	4b46      	ldr	r3, [pc, #280]	; (80054b8 <voltage_monitor_init+0x314>)
 80053a0:	220b      	movs	r2, #11
 80053a2:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 80053a6:	4b44      	ldr	r3, [pc, #272]	; (80054b8 <voltage_monitor_init+0x314>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 80053ae:	4b42      	ldr	r3, [pc, #264]	; (80054b8 <voltage_monitor_init+0x314>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 80053b6:	4b40      	ldr	r3, [pc, #256]	; (80054b8 <voltage_monitor_init+0x314>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80053be:	4b3e      	ldr	r3, [pc, #248]	; (80054b8 <voltage_monitor_init+0x314>)
 80053c0:	f640 72fb 	movw	r2, #4091	; 0xffb
 80053c4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80053c8:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <voltage_monitor_init+0x314>)
 80053ca:	f640 6276 	movw	r2, #3702	; 0xe76
 80053ce:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80053d2:	4b39      	ldr	r3, [pc, #228]	; (80054b8 <voltage_monitor_init+0x314>)
 80053d4:	220c      	movs	r2, #12
 80053d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80053da:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <voltage_monitor_init+0x314>)
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80053e2:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <voltage_monitor_init+0x314>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 80053ea:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <voltage_monitor_init+0x314>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 80053f2:	4b31      	ldr	r3, [pc, #196]	; (80054b8 <voltage_monitor_init+0x314>)
 80053f4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80053f8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80053fc:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <voltage_monitor_init+0x314>)
 80053fe:	2200      	movs	r2, #0
 8005400:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8005404:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <voltage_monitor_init+0x314>)
 8005406:	220d      	movs	r2, #13
 8005408:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 800540c:	4b2a      	ldr	r3, [pc, #168]	; (80054b8 <voltage_monitor_init+0x314>)
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8005414:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <voltage_monitor_init+0x314>)
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 800541c:	4b26      	ldr	r3, [pc, #152]	; (80054b8 <voltage_monitor_init+0x314>)
 800541e:	2200      	movs	r2, #0
 8005420:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <voltage_monitor_init+0x314>)
 8005426:	f640 7238 	movw	r2, #3896	; 0xf38
 800542a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 800542e:	4b22      	ldr	r3, [pc, #136]	; (80054b8 <voltage_monitor_init+0x314>)
 8005430:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8005434:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8005438:	4b1f      	ldr	r3, [pc, #124]	; (80054b8 <voltage_monitor_init+0x314>)
 800543a:	220e      	movs	r2, #14
 800543c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <voltage_monitor_init+0x314>)
 8005442:	2200      	movs	r2, #0
 8005444:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005448:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <voltage_monitor_init+0x314>)
 800544a:	2200      	movs	r2, #0
 800544c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005450:	4b19      	ldr	r3, [pc, #100]	; (80054b8 <voltage_monitor_init+0x314>)
 8005452:	2200      	movs	r2, #0
 8005454:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8005458:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <voltage_monitor_init+0x314>)
 800545a:	f640 7245 	movw	r2, #3909	; 0xf45
 800545e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005462:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <voltage_monitor_init+0x314>)
 8005464:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005468:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 800546c:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <voltage_monitor_init+0x314>)
 800546e:	220f      	movs	r2, #15
 8005470:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005474:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <voltage_monitor_init+0x314>)
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <voltage_monitor_init+0x314>)
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <voltage_monitor_init+0x314>)
 8005486:	2200      	movs	r2, #0
 8005488:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <voltage_monitor_init+0x314>)
 800548e:	f241 0264 	movw	r2, #4196	; 0x1064
 8005492:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <voltage_monitor_init+0x314>)
 8005498:	2200      	movs	r2, #0
 800549a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <voltage_monitor_init+0x314>)
 80054a0:	2210      	movs	r2, #16
 80054a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 80054a6:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <voltage_monitor_init+0x314>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80054ae:	4b02      	ldr	r3, [pc, #8]	; (80054b8 <voltage_monitor_init+0x314>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80054b6:	e001      	b.n	80054bc <voltage_monitor_init+0x318>
 80054b8:	24001f08 	.word	0x24001f08
	rail_monitor[RAIL_n800v].data = 0;
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <voltage_monitor_init+0x378>)
 80054be:	2200      	movs	r2, #0
 80054c0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80054c4:	4b15      	ldr	r3, [pc, #84]	; (800551c <voltage_monitor_init+0x378>)
 80054c6:	f640 5208 	movw	r2, #3336	; 0xd08
 80054ca:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <voltage_monitor_init+0x378>)
 80054d0:	f640 32ca 	movw	r2, #3018	; 0xbca
 80054d4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80054d8:	4b10      	ldr	r3, [pc, #64]	; (800551c <voltage_monitor_init+0x378>)
 80054da:	2211      	movs	r2, #17
 80054dc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 80054e0:	4b0e      	ldr	r3, [pc, #56]	; (800551c <voltage_monitor_init+0x378>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <voltage_monitor_init+0x378>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <voltage_monitor_init+0x378>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80054f8:	4b08      	ldr	r3, [pc, #32]	; (800551c <voltage_monitor_init+0x378>)
 80054fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80054fe:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <voltage_monitor_init+0x378>)
 8005504:	2200      	movs	r2, #0
 8005506:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 800550a:	2301      	movs	r3, #1
 800550c:	71fb      	strb	r3, [r7, #7]

	return status;
 800550e:	79fb      	ldrb	r3, [r7, #7]
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	24001f08 	.word	0x24001f08

08005520 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	460a      	mov	r2, r1
 800552a:	71fb      	strb	r3, [r7, #7]
 800552c:	4613      	mov	r3, r2
 800552e:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005534:	79fa      	ldrb	r2, [r7, #7]
 8005536:	4909      	ldr	r1, [pc, #36]	; (800555c <set_rail_monitor_enable+0x3c>)
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	440b      	add	r3, r1
 8005542:	3302      	adds	r3, #2
 8005544:	79ba      	ldrb	r2, [r7, #6]
 8005546:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]

	return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	24001f08 	.word	0x24001f08

08005560 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 800556c:	463b      	mov	r3, r7
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fcf6 	bl	8003f60 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005574:	f107 0310 	add.w	r3, r7, #16
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe fd21 	bl	8003fc0 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 800557e:	f107 0308 	add.w	r3, r7, #8
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe fd6e 	bl	8004064 <sample_hk_adc3>
 8005588:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 800558a:	4b25      	ldr	r3, [pc, #148]	; (8005620 <set_rail_monitor+0xc0>)
 800558c:	809a      	strh	r2, [r3, #4]
 800558e:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005590:	4b23      	ldr	r3, [pc, #140]	; (8005620 <set_rail_monitor+0xc0>)
 8005592:	81da      	strh	r2, [r3, #14]
 8005594:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <set_rail_monitor+0xc0>)
 8005598:	831a      	strh	r2, [r3, #24]
 800559a:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 800559c:	4b20      	ldr	r3, [pc, #128]	; (8005620 <set_rail_monitor+0xc0>)
 800559e:	845a      	strh	r2, [r3, #34]	; 0x22
 80055a0:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 80055a2:	4b1f      	ldr	r3, [pc, #124]	; (8005620 <set_rail_monitor+0xc0>)
 80055a4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80055a6:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <set_rail_monitor+0xc0>)
 80055aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80055ac:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 80055ae:	4b1c      	ldr	r3, [pc, #112]	; (8005620 <set_rail_monitor+0xc0>)
 80055b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80055b4:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <set_rail_monitor+0xc0>)
 80055b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80055bc:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 80055be:	4b18      	ldr	r3, [pc, #96]	; (8005620 <set_rail_monitor+0xc0>)
 80055c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80055c4:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 80055c6:	4b16      	ldr	r3, [pc, #88]	; (8005620 <set_rail_monitor+0xc0>)
 80055c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80055cc:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 80055ce:	4b14      	ldr	r3, [pc, #80]	; (8005620 <set_rail_monitor+0xc0>)
 80055d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80055d4:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <set_rail_monitor+0xc0>)
 80055d8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80055dc:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 80055de:	4b10      	ldr	r3, [pc, #64]	; (8005620 <set_rail_monitor+0xc0>)
 80055e0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80055e4:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <set_rail_monitor+0xc0>)
 80055e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80055ec:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 80055ee:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <set_rail_monitor+0xc0>)
 80055f0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80055f4:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 80055f6:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <set_rail_monitor+0xc0>)
 80055f8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80055fc:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 80055fe:	4b08      	ldr	r3, [pc, #32]	; (8005620 <set_rail_monitor+0xc0>)
 8005600:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005604:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <set_rail_monitor+0xc0>)
 8005608:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005616:	4618      	mov	r0, r3
 8005618:	3728      	adds	r7, #40	; 0x28
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	24001f08 	.word	0x24001f08

08005624 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005628:	4b02      	ldr	r3, [pc, #8]	; (8005634 <get_rail_monitor+0x10>)
}
 800562a:	4618      	mov	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	24001f08 	.word	0x24001f08

08005638 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8005646:	89fb      	ldrh	r3, [r7, #14]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	db05      	blt.n	800565a <in_range+0x22>
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	429a      	cmp	r2, r3
 8005654:	dc01      	bgt.n	800565a <in_range+0x22>
		return 1;
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <in_range+0x24>
	}
	return 0;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <monitor_rails>:


void monitor_rails() {
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800566e:	2300      	movs	r3, #0
 8005670:	607b      	str	r3, [r7, #4]
 8005672:	e062      	b.n	800573a <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8005674:	4935      	ldr	r1, [pc, #212]	; (800574c <monitor_rails+0xe4>)
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	440b      	add	r3, r1
 8005682:	3302      	adds	r3, #2
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d054      	beq.n	8005734 <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 800568a:	4930      	ldr	r1, [pc, #192]	; (800574c <monitor_rails+0xe4>)
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	440b      	add	r3, r1
 8005698:	3304      	adds	r3, #4
 800569a:	8818      	ldrh	r0, [r3, #0]
 800569c:	492b      	ldr	r1, [pc, #172]	; (800574c <monitor_rails+0xe4>)
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	440b      	add	r3, r1
 80056aa:	3308      	adds	r3, #8
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	461c      	mov	r4, r3
 80056b0:	4926      	ldr	r1, [pc, #152]	; (800574c <monitor_rails+0xe4>)
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	440b      	add	r3, r1
 80056be:	3306      	adds	r3, #6
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	4621      	mov	r1, r4
 80056c6:	f7ff ffb7 	bl	8005638 <in_range>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d131      	bne.n	8005734 <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 80056d0:	491e      	ldr	r1, [pc, #120]	; (800574c <monitor_rails+0xe4>)
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	440b      	add	r3, r1
 80056de:	3301      	adds	r3, #1
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	3301      	adds	r3, #1
 80056e4:	b2d8      	uxtb	r0, r3
 80056e6:	4919      	ldr	r1, [pc, #100]	; (800574c <monitor_rails+0xe4>)
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	440b      	add	r3, r1
 80056f4:	3301      	adds	r3, #1
 80056f6:	4602      	mov	r2, r0
 80056f8:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 80056fa:	4914      	ldr	r1, [pc, #80]	; (800574c <monitor_rails+0xe4>)
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	440b      	add	r3, r1
 8005708:	3301      	adds	r3, #1
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b03      	cmp	r3, #3
 800570e:	d111      	bne.n	8005734 <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005710:	490e      	ldr	r1, [pc, #56]	; (800574c <monitor_rails+0xe4>)
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	440b      	add	r3, r1
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f815 	bl	8005750 <get_rail_name_error_detail>
 8005726:	4603      	mov	r3, r0
 8005728:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 800572a:	2300      	movs	r3, #0
 800572c:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 800572e:	6838      	ldr	r0, [r7, #0]
 8005730:	f7fc fc14 	bl	8001f5c <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3301      	adds	r3, #1
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b11      	cmp	r3, #17
 800573e:	dd99      	ble.n	8005674 <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	bd90      	pop	{r4, r7, pc}
 800574a:	bf00      	nop
 800574c:	24001f08 	.word	0x24001f08

08005750 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	2b11      	cmp	r3, #17
 800575e:	d84b      	bhi.n	80057f8 <get_rail_name_error_detail+0xa8>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <get_rail_name_error_detail+0x18>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	080057b1 	.word	0x080057b1
 800576c:	080057b5 	.word	0x080057b5
 8005770:	080057b9 	.word	0x080057b9
 8005774:	080057bd 	.word	0x080057bd
 8005778:	080057c1 	.word	0x080057c1
 800577c:	080057c5 	.word	0x080057c5
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057cd 	.word	0x080057cd
 8005788:	080057d1 	.word	0x080057d1
 800578c:	080057d5 	.word	0x080057d5
 8005790:	080057d9 	.word	0x080057d9
 8005794:	080057dd 	.word	0x080057dd
 8005798:	080057e1 	.word	0x080057e1
 800579c:	080057e5 	.word	0x080057e5
 80057a0:	080057e9 	.word	0x080057e9
 80057a4:	080057ed 	.word	0x080057ed
 80057a8:	080057f1 	.word	0x080057f1
 80057ac:	080057f5 	.word	0x080057f5
	case RAIL_vsense:
		return ED_vsense;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e022      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e020      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 80057b8:	2302      	movs	r3, #2
 80057ba:	e01e      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 80057bc:	2303      	movs	r3, #3
 80057be:	e01c      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 80057c0:	2304      	movs	r3, #4
 80057c2:	e01a      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 80057c4:	2305      	movs	r3, #5
 80057c6:	e018      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 80057c8:	2306      	movs	r3, #6
 80057ca:	e016      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 80057cc:	2307      	movs	r3, #7
 80057ce:	e014      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 80057d0:	2308      	movs	r3, #8
 80057d2:	e012      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 80057d4:	2309      	movs	r3, #9
 80057d6:	e010      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 80057d8:	230a      	movs	r3, #10
 80057da:	e00e      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 80057dc:	230b      	movs	r3, #11
 80057de:	e00c      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 80057e0:	230c      	movs	r3, #12
 80057e2:	e00a      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 80057e4:	230d      	movs	r3, #13
 80057e6:	e008      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 80057e8:	230e      	movs	r3, #14
 80057ea:	e006      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 80057ec:	230f      	movs	r3, #15
 80057ee:	e004      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 80057f0:	2310      	movs	r3, #16
 80057f2:	e002      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 80057f4:	2311      	movs	r3, #17
 80057f6:	e000      	b.n	80057fa <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 80057f8:	2314      	movs	r3, #20
	}
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop

08005808 <Reset_Handler>:
 8005808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005840 <LoopFillZerobss+0xe>
 800580c:	f7ff f8b2 	bl	8004974 <SystemInit>
 8005810:	480c      	ldr	r0, [pc, #48]	; (8005844 <LoopFillZerobss+0x12>)
 8005812:	490d      	ldr	r1, [pc, #52]	; (8005848 <LoopFillZerobss+0x16>)
 8005814:	4a0d      	ldr	r2, [pc, #52]	; (800584c <LoopFillZerobss+0x1a>)
 8005816:	2300      	movs	r3, #0
 8005818:	e002      	b.n	8005820 <LoopCopyDataInit>

0800581a <CopyDataInit>:
 800581a:	58d4      	ldr	r4, [r2, r3]
 800581c:	50c4      	str	r4, [r0, r3]
 800581e:	3304      	adds	r3, #4

08005820 <LoopCopyDataInit>:
 8005820:	18c4      	adds	r4, r0, r3
 8005822:	428c      	cmp	r4, r1
 8005824:	d3f9      	bcc.n	800581a <CopyDataInit>
 8005826:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <LoopFillZerobss+0x1e>)
 8005828:	4c0a      	ldr	r4, [pc, #40]	; (8005854 <LoopFillZerobss+0x22>)
 800582a:	2300      	movs	r3, #0
 800582c:	e001      	b.n	8005832 <LoopFillZerobss>

0800582e <FillZerobss>:
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	3204      	adds	r2, #4

08005832 <LoopFillZerobss>:
 8005832:	42a2      	cmp	r2, r4
 8005834:	d3fb      	bcc.n	800582e <FillZerobss>
 8005836:	f014 fb87 	bl	8019f48 <__libc_init_array>
 800583a:	f7fd fdb7 	bl	80033ac <main>
 800583e:	4770      	bx	lr
 8005840:	24080000 	.word	0x24080000
 8005844:	24000000 	.word	0x24000000
 8005848:	24000108 	.word	0x24000108
 800584c:	0801ae78 	.word	0x0801ae78
 8005850:	24000120 	.word	0x24000120
 8005854:	2400693c 	.word	0x2400693c

08005858 <ADC3_IRQHandler>:
 8005858:	e7fe      	b.n	8005858 <ADC3_IRQHandler>
	...

0800585c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005862:	2003      	movs	r0, #3
 8005864:	f001 fd39 	bl	80072da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005868:	f008 ff44 	bl	800e6f4 <HAL_RCC_GetSysClockFreq>
 800586c:	4602      	mov	r2, r0
 800586e:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <HAL_Init+0x68>)
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	0a1b      	lsrs	r3, r3, #8
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	4913      	ldr	r1, [pc, #76]	; (80058c8 <HAL_Init+0x6c>)
 800587a:	5ccb      	ldrb	r3, [r1, r3]
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	fa22 f303 	lsr.w	r3, r2, r3
 8005884:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005886:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <HAL_Init+0x68>)
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	4a0e      	ldr	r2, [pc, #56]	; (80058c8 <HAL_Init+0x6c>)
 8005890:	5cd3      	ldrb	r3, [r2, r3]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
 800589c:	4a0b      	ldr	r2, [pc, #44]	; (80058cc <HAL_Init+0x70>)
 800589e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058a0:	4a0b      	ldr	r2, [pc, #44]	; (80058d0 <HAL_Init+0x74>)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058a6:	2005      	movs	r0, #5
 80058a8:	f7fe fe4e 	bl	8004548 <HAL_InitTick>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e002      	b.n	80058bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80058b6:	f7fe fe29 	bl	800450c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	58024400 	.word	0x58024400
 80058c8:	0801adc4 	.word	0x0801adc4
 80058cc:	24000094 	.word	0x24000094
 80058d0:	24000090 	.word	0x24000090

080058d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <HAL_IncTick+0x20>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <HAL_IncTick+0x24>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4413      	add	r3, r2
 80058e4:	4a04      	ldr	r2, [pc, #16]	; (80058f8 <HAL_IncTick+0x24>)
 80058e6:	6013      	str	r3, [r2, #0]
}
 80058e8:	bf00      	nop
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	2400009c 	.word	0x2400009c
 80058f8:	24001fbc 	.word	0x24001fbc

080058fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return uwTick;
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <HAL_GetTick+0x14>)
 8005902:	681b      	ldr	r3, [r3, #0]
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	24001fbc 	.word	0x24001fbc

08005914 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005918:	4b03      	ldr	r3, [pc, #12]	; (8005928 <HAL_GetREVID+0x14>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	0c1b      	lsrs	r3, r3, #16
}
 800591e:	4618      	mov	r0, r3
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	5c001000 	.word	0x5c001000

0800592c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005936:	4b07      	ldr	r3, [pc, #28]	; (8005954 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	43db      	mvns	r3, r3
 800593e:	401a      	ands	r2, r3
 8005940:	4904      	ldr	r1, [pc, #16]	; (8005954 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	4313      	orrs	r3, r2
 8005946:	604b      	str	r3, [r1, #4]
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	58000400 	.word	0x58000400

08005958 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	609a      	str	r2, [r3, #8]
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	609a      	str	r2, [r3, #8]
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3360      	adds	r3, #96	; 0x60
 80059d2:	461a      	mov	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	430b      	orrs	r3, r1
 80059ee:	431a      	orrs	r2, r3
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	611a      	str	r2, [r3, #16]
}
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b087      	sub	sp, #28
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3360      	adds	r3, #96	; 0x60
 8005a42:	461a      	mov	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	601a      	str	r2, [r3, #0]
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b087      	sub	sp, #28
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3330      	adds	r3, #48	; 0x30
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	f003 030c 	and.w	r3, r3, #12
 8005aaa:	4413      	add	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	211f      	movs	r1, #31
 8005aba:	fa01 f303 	lsl.w	r3, r1, r3
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	401a      	ands	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	0e9b      	lsrs	r3, r3, #26
 8005ac6:	f003 011f 	and.w	r1, r3, #31
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005ada:	bf00      	nop
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f023 0203 	bic.w	r2, r3, #3
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3314      	adds	r3, #20
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	0e5b      	lsrs	r3, r3, #25
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	4413      	add	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	0d1b      	lsrs	r3, r3, #20
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	2107      	movs	r1, #7
 8005b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	401a      	ands	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	0d1b      	lsrs	r3, r3, #20
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b50:	431a      	orrs	r2, r3
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	401a      	ands	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f003 0318 	and.w	r3, r3, #24
 8005b86:	4908      	ldr	r1, [pc, #32]	; (8005ba8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005b88:	40d9      	lsrs	r1, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	400b      	ands	r3, r1
 8005b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	000fffff 	.word	0x000fffff

08005bac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 031f 	and.w	r3, r3, #31
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6093      	str	r3, [r2, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	5fffffc0 	.word	0x5fffffc0

08005bec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c00:	d101      	bne.n	8005c06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <LL_ADC_EnableInternalRegulator+0x24>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	6fffffc0 	.word	0x6fffffc0

08005c3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c50:	d101      	bne.n	8005c56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <LL_ADC_Enable+0x24>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	f043 0201 	orr.w	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	7fffffc0 	.word	0x7fffffc0

08005c8c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <LL_ADC_Disable+0x24>)
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	f043 0202 	orr.w	r2, r3, #2
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	7fffffc0 	.word	0x7fffffc0

08005cb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <LL_ADC_IsEnabled+0x18>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <LL_ADC_IsEnabled+0x1a>
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d101      	bne.n	8005cf2 <LL_ADC_IsDisableOngoing+0x18>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <LL_ADC_IsDisableOngoing+0x1a>
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <LL_ADC_REG_StartConversion+0x24>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	f043 0204 	orr.w	r2, r3, #4
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	7fffffc0 	.word	0x7fffffc0

08005d28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d101      	bne.n	8005d40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d101      	bne.n	8005d66 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b089      	sub	sp, #36	; 0x24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e18f      	b.n	80060ae <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7fa fdd5 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff ff19 	bl	8005bec <LL_ADC_IsDeepPowerDownEnabled>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff feff 	bl	8005bc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff ff34 	bl	8005c3c <LL_ADC_IsInternalRegulatorEnabled>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d114      	bne.n	8005e04 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff ff18 	bl	8005c14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005de4:	4b87      	ldr	r3, [pc, #540]	; (8006004 <HAL_ADC_Init+0x290>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	099b      	lsrs	r3, r3, #6
 8005dea:	4a87      	ldr	r2, [pc, #540]	; (8006008 <HAL_ADC_Init+0x294>)
 8005dec:	fba2 2303 	umull	r2, r3, r2, r3
 8005df0:	099b      	lsrs	r3, r3, #6
 8005df2:	3301      	adds	r3, #1
 8005df4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005df6:	e002      	b.n	8005dfe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f9      	bne.n	8005df8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff ff17 	bl	8005c3c <LL_ADC_IsInternalRegulatorEnabled>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10d      	bne.n	8005e30 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e18:	f043 0210 	orr.w	r2, r3, #16
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e24:	f043 0201 	orr.w	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff ff77 	bl	8005d28 <LL_ADC_REG_IsConversionOngoing>
 8005e3a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 8129 	bne.w	800609c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 8125 	bne.w	800609c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005e5a:	f043 0202 	orr.w	r2, r3, #2
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff ff24 	bl	8005cb4 <LL_ADC_IsEnabled>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d136      	bne.n	8005ee0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a65      	ldr	r2, [pc, #404]	; (800600c <HAL_ADC_Init+0x298>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_ADC_Init+0x112>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a63      	ldr	r2, [pc, #396]	; (8006010 <HAL_ADC_Init+0x29c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10e      	bne.n	8005ea4 <HAL_ADC_Init+0x130>
 8005e86:	4861      	ldr	r0, [pc, #388]	; (800600c <HAL_ADC_Init+0x298>)
 8005e88:	f7ff ff14 	bl	8005cb4 <LL_ADC_IsEnabled>
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	4860      	ldr	r0, [pc, #384]	; (8006010 <HAL_ADC_Init+0x29c>)
 8005e90:	f7ff ff10 	bl	8005cb4 <LL_ADC_IsEnabled>
 8005e94:	4603      	mov	r3, r0
 8005e96:	4323      	orrs	r3, r4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bf0c      	ite	eq
 8005e9c:	2301      	moveq	r3, #1
 8005e9e:	2300      	movne	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	e008      	b.n	8005eb6 <HAL_ADC_Init+0x142>
 8005ea4:	485b      	ldr	r0, [pc, #364]	; (8006014 <HAL_ADC_Init+0x2a0>)
 8005ea6:	f7ff ff05 	bl	8005cb4 <LL_ADC_IsEnabled>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bf0c      	ite	eq
 8005eb0:	2301      	moveq	r3, #1
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d012      	beq.n	8005ee0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a53      	ldr	r2, [pc, #332]	; (800600c <HAL_ADC_Init+0x298>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_ADC_Init+0x15a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a51      	ldr	r2, [pc, #324]	; (8006010 <HAL_ADC_Init+0x29c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d101      	bne.n	8005ed2 <HAL_ADC_Init+0x15e>
 8005ece:	4a52      	ldr	r2, [pc, #328]	; (8006018 <HAL_ADC_Init+0x2a4>)
 8005ed0:	e000      	b.n	8005ed4 <HAL_ADC_Init+0x160>
 8005ed2:	4a52      	ldr	r2, [pc, #328]	; (800601c <HAL_ADC_Init+0x2a8>)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f7ff fd3c 	bl	8005958 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005ee0:	f7ff fd18 	bl	8005914 <HAL_GetREVID>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d914      	bls.n	8005f18 <HAL_ADC_Init+0x1a4>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d110      	bne.n	8005f18 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	7d5b      	ldrb	r3, [r3, #21]
 8005efa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f00:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005f06:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7f1b      	ldrb	r3, [r3, #28]
 8005f0c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005f0e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f10:	f043 030c 	orr.w	r3, r3, #12
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e00d      	b.n	8005f34 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	7d5b      	ldrb	r3, [r3, #21]
 8005f1c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f22:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005f28:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	7f1b      	ldrb	r3, [r3, #28]
 8005f2e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	7f1b      	ldrb	r3, [r3, #28]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d106      	bne.n	8005f4a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	045b      	lsls	r3, r3, #17
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <HAL_ADC_Init+0x2ac>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	430b      	orrs	r3, r1
 8005f78:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fed2 	bl	8005d28 <LL_ADC_REG_IsConversionOngoing>
 8005f84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fedf 	bl	8005d4e <LL_ADC_INJ_IsConversionOngoing>
 8005f90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d15f      	bne.n	8006058 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d15c      	bne.n	8006058 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7d1b      	ldrb	r3, [r3, #20]
 8005fa2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	4b1c      	ldr	r3, [pc, #112]	; (8006024 <HAL_ADC_Init+0x2b0>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	69b9      	ldr	r1, [r7, #24]
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d130      	bne.n	800602c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <HAL_ADC_Init+0x2b4>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fde:	3a01      	subs	r2, #1
 8005fe0:	0411      	lsls	r1, r2, #16
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005fe6:	4311      	orrs	r1, r2
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005fec:	4311      	orrs	r1, r2
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	611a      	str	r2, [r3, #16]
 8006000:	e01c      	b.n	800603c <HAL_ADC_Init+0x2c8>
 8006002:	bf00      	nop
 8006004:	24000090 	.word	0x24000090
 8006008:	053e2d63 	.word	0x053e2d63
 800600c:	40022000 	.word	0x40022000
 8006010:	40022100 	.word	0x40022100
 8006014:	58026000 	.word	0x58026000
 8006018:	40022300 	.word	0x40022300
 800601c:	58026300 	.word	0x58026300
 8006020:	fff0c003 	.word	0xfff0c003
 8006024:	ffffbffc 	.word	0xffffbffc
 8006028:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fdec 	bl	8006c30 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d10c      	bne.n	800607a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	f023 010f 	bic.w	r1, r3, #15
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	1e5a      	subs	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
 8006078:	e007      	b.n	800608a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 020f 	bic.w	r2, r2, #15
 8006088:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	f043 0201 	orr.w	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	655a      	str	r2, [r3, #84]	; 0x54
 800609a:	e007      	b.n	80060ac <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a0:	f043 0210 	orr.w	r2, r3, #16
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80060ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3724      	adds	r7, #36	; 0x24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd90      	pop	{r4, r7, pc}
 80060b6:	bf00      	nop

080060b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a55      	ldr	r2, [pc, #340]	; (8006220 <HAL_ADC_Start_DMA+0x168>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_ADC_Start_DMA+0x20>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a54      	ldr	r2, [pc, #336]	; (8006224 <HAL_ADC_Start_DMA+0x16c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d101      	bne.n	80060dc <HAL_ADC_Start_DMA+0x24>
 80060d8:	4b53      	ldr	r3, [pc, #332]	; (8006228 <HAL_ADC_Start_DMA+0x170>)
 80060da:	e000      	b.n	80060de <HAL_ADC_Start_DMA+0x26>
 80060dc:	4b53      	ldr	r3, [pc, #332]	; (800622c <HAL_ADC_Start_DMA+0x174>)
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff fd64 	bl	8005bac <LL_ADC_GetMultimode>
 80060e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fe1c 	bl	8005d28 <LL_ADC_REG_IsConversionOngoing>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f040 808c 	bne.w	8006210 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_ADC_Start_DMA+0x4e>
 8006102:	2302      	movs	r3, #2
 8006104:	e087      	b.n	8006216 <HAL_ADC_Start_DMA+0x15e>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d005      	beq.n	8006120 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b05      	cmp	r3, #5
 8006118:	d002      	beq.n	8006120 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b09      	cmp	r3, #9
 800611e:	d170      	bne.n	8006202 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 fc07 	bl	8006934 <ADC_Enable>
 8006126:	4603      	mov	r3, r0
 8006128:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800612a:	7dfb      	ldrb	r3, [r7, #23]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d163      	bne.n	80061f8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006134:	4b3e      	ldr	r3, [pc, #248]	; (8006230 <HAL_ADC_Start_DMA+0x178>)
 8006136:	4013      	ands	r3, r2
 8006138:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a37      	ldr	r2, [pc, #220]	; (8006224 <HAL_ADC_Start_DMA+0x16c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d002      	beq.n	8006150 <HAL_ADC_Start_DMA+0x98>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	e000      	b.n	8006152 <HAL_ADC_Start_DMA+0x9a>
 8006150:	4b33      	ldr	r3, [pc, #204]	; (8006220 <HAL_ADC_Start_DMA+0x168>)
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	4293      	cmp	r3, r2
 8006158:	d002      	beq.n	8006160 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d105      	bne.n	800616c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006164:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d006      	beq.n	8006186 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617c:	f023 0206 	bic.w	r2, r3, #6
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	659a      	str	r2, [r3, #88]	; 0x58
 8006184:	e002      	b.n	800618c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006190:	4a28      	ldr	r2, [pc, #160]	; (8006234 <HAL_ADC_Start_DMA+0x17c>)
 8006192:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006198:	4a27      	ldr	r2, [pc, #156]	; (8006238 <HAL_ADC_Start_DMA+0x180>)
 800619a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a0:	4a26      	ldr	r2, [pc, #152]	; (800623c <HAL_ADC_Start_DMA+0x184>)
 80061a2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	221c      	movs	r2, #28
 80061aa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0210 	orr.w	r2, r2, #16
 80061c2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	4619      	mov	r1, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	f7ff fc89 	bl	8005ae6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3340      	adds	r3, #64	; 0x40
 80061de:	4619      	mov	r1, r3
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f002 f886 	bl	80082f4 <HAL_DMA_Start_IT>
 80061e8:	4603      	mov	r3, r0
 80061ea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fd85 	bl	8005d00 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80061f6:	e00d      	b.n	8006214 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8006200:	e008      	b.n	8006214 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800620e:	e001      	b.n	8006214 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006210:	2302      	movs	r3, #2
 8006212:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40022000 	.word	0x40022000
 8006224:	40022100 	.word	0x40022100
 8006228:	40022300 	.word	0x40022300
 800622c:	58026300 	.word	0x58026300
 8006230:	fffff0fe 	.word	0xfffff0fe
 8006234:	08006b07 	.word	0x08006b07
 8006238:	08006bdf 	.word	0x08006bdf
 800623c:	08006bfb 	.word	0x08006bfb

08006240 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800627c:	b590      	push	{r4, r7, lr}
 800627e:	b0a1      	sub	sp, #132	; 0x84
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	4a65      	ldr	r2, [pc, #404]	; (800642c <HAL_ADC_ConfigChannel+0x1b0>)
 8006296:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_ADC_ConfigChannel+0x2a>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e32e      	b.n	8006904 <HAL_ADC_ConfigChannel+0x688>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff fd38 	bl	8005d28 <LL_ADC_REG_IsConversionOngoing>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 8313 	bne.w	80068e6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	db2c      	blt.n	8006322 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d108      	bne.n	80062e6 <HAL_ADC_ConfigChannel+0x6a>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	0e9b      	lsrs	r3, r3, #26
 80062da:	f003 031f 	and.w	r3, r3, #31
 80062de:	2201      	movs	r2, #1
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	e016      	b.n	8006314 <HAL_ADC_ConfigChannel+0x98>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ee:	fa93 f3a3 	rbit	r3, r3
 80062f2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80062f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80062f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80062fe:	2320      	movs	r3, #32
 8006300:	e003      	b.n	800630a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8006302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006304:	fab3 f383 	clz	r3, r3
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2201      	movs	r2, #1
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	69d1      	ldr	r1, [r2, #28]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	430b      	orrs	r3, r1
 8006320:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6859      	ldr	r1, [r3, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	f7ff fbad 	bl	8005a8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fcf5 	bl	8005d28 <LL_ADC_REG_IsConversionOngoing>
 800633e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fd02 	bl	8005d4e <LL_ADC_INJ_IsConversionOngoing>
 800634a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800634c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 80b8 	bne.w	80064c4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 80b4 	bne.w	80064c4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	6819      	ldr	r1, [r3, #0]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	461a      	mov	r2, r3
 800636a:	f7ff fbcf 	bl	8005b0c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800636e:	4b30      	ldr	r3, [pc, #192]	; (8006430 <HAL_ADC_ConfigChannel+0x1b4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800637a:	d10b      	bne.n	8006394 <HAL_ADC_ConfigChannel+0x118>
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	695a      	ldr	r2, [r3, #20]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	089b      	lsrs	r3, r3, #2
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	e01d      	b.n	80063d0 <HAL_ADC_ConfigChannel+0x154>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10b      	bne.n	80063ba <HAL_ADC_ConfigChannel+0x13e>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695a      	ldr	r2, [r3, #20]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	089b      	lsrs	r3, r3, #2
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	e00a      	b.n	80063d0 <HAL_ADC_ConfigChannel+0x154>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695a      	ldr	r2, [r3, #20]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	089b      	lsrs	r3, r3, #2
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d02c      	beq.n	8006434 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6919      	ldr	r1, [r3, #16]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e8:	f7ff faea 	bl	80059c0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	6919      	ldr	r1, [r3, #16]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	7e5b      	ldrb	r3, [r3, #25]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d102      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x186>
 80063fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006400:	e000      	b.n	8006404 <HAL_ADC_ConfigChannel+0x188>
 8006402:	2300      	movs	r3, #0
 8006404:	461a      	mov	r2, r3
 8006406:	f7ff fb14 	bl	8005a32 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6919      	ldr	r1, [r3, #16]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	7e1b      	ldrb	r3, [r3, #24]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d102      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x1a4>
 800641a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800641e:	e000      	b.n	8006422 <HAL_ADC_ConfigChannel+0x1a6>
 8006420:	2300      	movs	r3, #0
 8006422:	461a      	mov	r2, r3
 8006424:	f7ff faec 	bl	8005a00 <LL_ADC_SetDataRightShift>
 8006428:	e04c      	b.n	80064c4 <HAL_ADC_ConfigChannel+0x248>
 800642a:	bf00      	nop
 800642c:	47ff0000 	.word	0x47ff0000
 8006430:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	069b      	lsls	r3, r3, #26
 8006444:	429a      	cmp	r2, r3
 8006446:	d107      	bne.n	8006458 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006456:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800645e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	069b      	lsls	r3, r3, #26
 8006468:	429a      	cmp	r2, r3
 800646a:	d107      	bne.n	800647c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800647a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006482:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	069b      	lsls	r3, r3, #26
 800648c:	429a      	cmp	r2, r3
 800648e:	d107      	bne.n	80064a0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800649e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	069b      	lsls	r3, r3, #26
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d107      	bne.n	80064c4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff fbf3 	bl	8005cb4 <LL_ADC_IsEnabled>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f040 8211 	bne.w	80068f8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6819      	ldr	r1, [r3, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f7ff fb3e 	bl	8005b64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4aa1      	ldr	r2, [pc, #644]	; (8006774 <HAL_ADC_ConfigChannel+0x4f8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	f040 812e 	bne.w	8006750 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10b      	bne.n	800651c <HAL_ADC_ConfigChannel+0x2a0>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	0e9b      	lsrs	r3, r3, #26
 800650a:	3301      	adds	r3, #1
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2b09      	cmp	r3, #9
 8006512:	bf94      	ite	ls
 8006514:	2301      	movls	r3, #1
 8006516:	2300      	movhi	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	e019      	b.n	8006550 <HAL_ADC_ConfigChannel+0x2d4>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006524:	fa93 f3a3 	rbit	r3, r3
 8006528:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800652a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800652c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800652e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006534:	2320      	movs	r3, #32
 8006536:	e003      	b.n	8006540 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800653a:	fab3 f383 	clz	r3, r3
 800653e:	b2db      	uxtb	r3, r3
 8006540:	3301      	adds	r3, #1
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	2b09      	cmp	r3, #9
 8006548:	bf94      	ite	ls
 800654a:	2301      	movls	r3, #1
 800654c:	2300      	movhi	r3, #0
 800654e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006550:	2b00      	cmp	r3, #0
 8006552:	d079      	beq.n	8006648 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800655c:	2b00      	cmp	r3, #0
 800655e:	d107      	bne.n	8006570 <HAL_ADC_ConfigChannel+0x2f4>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	0e9b      	lsrs	r3, r3, #26
 8006566:	3301      	adds	r3, #1
 8006568:	069b      	lsls	r3, r3, #26
 800656a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800656e:	e015      	b.n	800659c <HAL_ADC_ConfigChannel+0x320>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006578:	fa93 f3a3 	rbit	r3, r3
 800657c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800657e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006580:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006588:	2320      	movs	r3, #32
 800658a:	e003      	b.n	8006594 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800658c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800658e:	fab3 f383 	clz	r3, r3
 8006592:	b2db      	uxtb	r3, r3
 8006594:	3301      	adds	r3, #1
 8006596:	069b      	lsls	r3, r3, #26
 8006598:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <HAL_ADC_ConfigChannel+0x340>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	0e9b      	lsrs	r3, r3, #26
 80065ae:	3301      	adds	r3, #1
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2101      	movs	r1, #1
 80065b6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ba:	e017      	b.n	80065ec <HAL_ADC_ConfigChannel+0x370>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c4:	fa93 f3a3 	rbit	r3, r3
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80065ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80065ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80065d4:	2320      	movs	r3, #32
 80065d6:	e003      	b.n	80065e0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80065d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065da:	fab3 f383 	clz	r3, r3
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	3301      	adds	r3, #1
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2101      	movs	r1, #1
 80065e8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ec:	ea42 0103 	orr.w	r1, r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <HAL_ADC_ConfigChannel+0x396>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	0e9b      	lsrs	r3, r3, #26
 8006602:	3301      	adds	r3, #1
 8006604:	f003 021f 	and.w	r2, r3, #31
 8006608:	4613      	mov	r3, r2
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	4413      	add	r3, r2
 800660e:	051b      	lsls	r3, r3, #20
 8006610:	e018      	b.n	8006644 <HAL_ADC_ConfigChannel+0x3c8>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	fa93 f3a3 	rbit	r3, r3
 800661e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800662a:	2320      	movs	r3, #32
 800662c:	e003      	b.n	8006636 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800662e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006630:	fab3 f383 	clz	r3, r3
 8006634:	b2db      	uxtb	r3, r3
 8006636:	3301      	adds	r3, #1
 8006638:	f003 021f 	and.w	r2, r3, #31
 800663c:	4613      	mov	r3, r2
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	4413      	add	r3, r2
 8006642:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006644:	430b      	orrs	r3, r1
 8006646:	e07e      	b.n	8006746 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006650:	2b00      	cmp	r3, #0
 8006652:	d107      	bne.n	8006664 <HAL_ADC_ConfigChannel+0x3e8>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	0e9b      	lsrs	r3, r3, #26
 800665a:	3301      	adds	r3, #1
 800665c:	069b      	lsls	r3, r3, #26
 800665e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006662:	e015      	b.n	8006690 <HAL_ADC_ConfigChannel+0x414>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	fa93 f3a3 	rbit	r3, r3
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800667c:	2320      	movs	r3, #32
 800667e:	e003      	b.n	8006688 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	fab3 f383 	clz	r3, r3
 8006686:	b2db      	uxtb	r3, r3
 8006688:	3301      	adds	r3, #1
 800668a:	069b      	lsls	r3, r3, #26
 800668c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006698:	2b00      	cmp	r3, #0
 800669a:	d109      	bne.n	80066b0 <HAL_ADC_ConfigChannel+0x434>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	0e9b      	lsrs	r3, r3, #26
 80066a2:	3301      	adds	r3, #1
 80066a4:	f003 031f 	and.w	r3, r3, #31
 80066a8:	2101      	movs	r1, #1
 80066aa:	fa01 f303 	lsl.w	r3, r1, r3
 80066ae:	e017      	b.n	80066e0 <HAL_ADC_ConfigChannel+0x464>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	fa93 f3a3 	rbit	r3, r3
 80066bc:	61bb      	str	r3, [r7, #24]
  return result;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80066c8:	2320      	movs	r3, #32
 80066ca:	e003      	b.n	80066d4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	fab3 f383 	clz	r3, r3
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	3301      	adds	r3, #1
 80066d6:	f003 031f 	and.w	r3, r3, #31
 80066da:	2101      	movs	r1, #1
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	ea42 0103 	orr.w	r1, r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10d      	bne.n	800670c <HAL_ADC_ConfigChannel+0x490>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	0e9b      	lsrs	r3, r3, #26
 80066f6:	3301      	adds	r3, #1
 80066f8:	f003 021f 	and.w	r2, r3, #31
 80066fc:	4613      	mov	r3, r2
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	4413      	add	r3, r2
 8006702:	3b1e      	subs	r3, #30
 8006704:	051b      	lsls	r3, r3, #20
 8006706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800670a:	e01b      	b.n	8006744 <HAL_ADC_ConfigChannel+0x4c8>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	fa93 f3a3 	rbit	r3, r3
 8006718:	60fb      	str	r3, [r7, #12]
  return result;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006724:	2320      	movs	r3, #32
 8006726:	e003      	b.n	8006730 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	fab3 f383 	clz	r3, r3
 800672e:	b2db      	uxtb	r3, r3
 8006730:	3301      	adds	r3, #1
 8006732:	f003 021f 	and.w	r2, r3, #31
 8006736:	4613      	mov	r3, r2
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	4413      	add	r3, r2
 800673c:	3b1e      	subs	r3, #30
 800673e:	051b      	lsls	r3, r3, #20
 8006740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006744:	430b      	orrs	r3, r1
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	6892      	ldr	r2, [r2, #8]
 800674a:	4619      	mov	r1, r3
 800674c:	f7ff f9de 	bl	8005b0c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	f280 80cf 	bge.w	80068f8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a06      	ldr	r2, [pc, #24]	; (8006778 <HAL_ADC_ConfigChannel+0x4fc>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_ADC_ConfigChannel+0x4f2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a04      	ldr	r2, [pc, #16]	; (800677c <HAL_ADC_ConfigChannel+0x500>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d10a      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x508>
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <HAL_ADC_ConfigChannel+0x504>)
 8006770:	e009      	b.n	8006786 <HAL_ADC_ConfigChannel+0x50a>
 8006772:	bf00      	nop
 8006774:	47ff0000 	.word	0x47ff0000
 8006778:	40022000 	.word	0x40022000
 800677c:	40022100 	.word	0x40022100
 8006780:	40022300 	.word	0x40022300
 8006784:	4b61      	ldr	r3, [pc, #388]	; (800690c <HAL_ADC_ConfigChannel+0x690>)
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff f90c 	bl	80059a4 <LL_ADC_GetCommonPathInternalCh>
 800678c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a5f      	ldr	r2, [pc, #380]	; (8006910 <HAL_ADC_ConfigChannel+0x694>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <HAL_ADC_ConfigChannel+0x526>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a5d      	ldr	r2, [pc, #372]	; (8006914 <HAL_ADC_ConfigChannel+0x698>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d10e      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x544>
 80067a2:	485b      	ldr	r0, [pc, #364]	; (8006910 <HAL_ADC_ConfigChannel+0x694>)
 80067a4:	f7ff fa86 	bl	8005cb4 <LL_ADC_IsEnabled>
 80067a8:	4604      	mov	r4, r0
 80067aa:	485a      	ldr	r0, [pc, #360]	; (8006914 <HAL_ADC_ConfigChannel+0x698>)
 80067ac:	f7ff fa82 	bl	8005cb4 <LL_ADC_IsEnabled>
 80067b0:	4603      	mov	r3, r0
 80067b2:	4323      	orrs	r3, r4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bf0c      	ite	eq
 80067b8:	2301      	moveq	r3, #1
 80067ba:	2300      	movne	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	e008      	b.n	80067d2 <HAL_ADC_ConfigChannel+0x556>
 80067c0:	4855      	ldr	r0, [pc, #340]	; (8006918 <HAL_ADC_ConfigChannel+0x69c>)
 80067c2:	f7ff fa77 	bl	8005cb4 <LL_ADC_IsEnabled>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bf0c      	ite	eq
 80067cc:	2301      	moveq	r3, #1
 80067ce:	2300      	movne	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d07d      	beq.n	80068d2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a50      	ldr	r2, [pc, #320]	; (800691c <HAL_ADC_ConfigChannel+0x6a0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d130      	bne.n	8006842 <HAL_ADC_ConfigChannel+0x5c6>
 80067e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d12b      	bne.n	8006842 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a4a      	ldr	r2, [pc, #296]	; (8006918 <HAL_ADC_ConfigChannel+0x69c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	f040 8081 	bne.w	80068f8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a45      	ldr	r2, [pc, #276]	; (8006910 <HAL_ADC_ConfigChannel+0x694>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d004      	beq.n	800680a <HAL_ADC_ConfigChannel+0x58e>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a43      	ldr	r2, [pc, #268]	; (8006914 <HAL_ADC_ConfigChannel+0x698>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d101      	bne.n	800680e <HAL_ADC_ConfigChannel+0x592>
 800680a:	4a45      	ldr	r2, [pc, #276]	; (8006920 <HAL_ADC_ConfigChannel+0x6a4>)
 800680c:	e000      	b.n	8006810 <HAL_ADC_ConfigChannel+0x594>
 800680e:	4a3f      	ldr	r2, [pc, #252]	; (800690c <HAL_ADC_ConfigChannel+0x690>)
 8006810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006812:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f7ff f8b0 	bl	800597e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800681e:	4b41      	ldr	r3, [pc, #260]	; (8006924 <HAL_ADC_ConfigChannel+0x6a8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	099b      	lsrs	r3, r3, #6
 8006824:	4a40      	ldr	r2, [pc, #256]	; (8006928 <HAL_ADC_ConfigChannel+0x6ac>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	099b      	lsrs	r3, r3, #6
 800682c:	3301      	adds	r3, #1
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006832:	e002      	b.n	800683a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	3b01      	subs	r3, #1
 8006838:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f9      	bne.n	8006834 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006840:	e05a      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a39      	ldr	r2, [pc, #228]	; (800692c <HAL_ADC_ConfigChannel+0x6b0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d11e      	bne.n	800688a <HAL_ADC_ConfigChannel+0x60e>
 800684c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d119      	bne.n	800688a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a2f      	ldr	r2, [pc, #188]	; (8006918 <HAL_ADC_ConfigChannel+0x69c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d14b      	bne.n	80068f8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <HAL_ADC_ConfigChannel+0x694>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <HAL_ADC_ConfigChannel+0x5f8>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a29      	ldr	r2, [pc, #164]	; (8006914 <HAL_ADC_ConfigChannel+0x698>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d101      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x5fc>
 8006874:	4a2a      	ldr	r2, [pc, #168]	; (8006920 <HAL_ADC_ConfigChannel+0x6a4>)
 8006876:	e000      	b.n	800687a <HAL_ADC_ConfigChannel+0x5fe>
 8006878:	4a24      	ldr	r2, [pc, #144]	; (800690c <HAL_ADC_ConfigChannel+0x690>)
 800687a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f7ff f87b 	bl	800597e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006888:	e036      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a28      	ldr	r2, [pc, #160]	; (8006930 <HAL_ADC_ConfigChannel+0x6b4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d131      	bne.n	80068f8 <HAL_ADC_ConfigChannel+0x67c>
 8006894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d12c      	bne.n	80068f8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1d      	ldr	r2, [pc, #116]	; (8006918 <HAL_ADC_ConfigChannel+0x69c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d127      	bne.n	80068f8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a18      	ldr	r2, [pc, #96]	; (8006910 <HAL_ADC_ConfigChannel+0x694>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_ADC_ConfigChannel+0x640>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a17      	ldr	r2, [pc, #92]	; (8006914 <HAL_ADC_ConfigChannel+0x698>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d101      	bne.n	80068c0 <HAL_ADC_ConfigChannel+0x644>
 80068bc:	4a18      	ldr	r2, [pc, #96]	; (8006920 <HAL_ADC_ConfigChannel+0x6a4>)
 80068be:	e000      	b.n	80068c2 <HAL_ADC_ConfigChannel+0x646>
 80068c0:	4a12      	ldr	r2, [pc, #72]	; (800690c <HAL_ADC_ConfigChannel+0x690>)
 80068c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f7ff f857 	bl	800597e <LL_ADC_SetCommonPathInternalCh>
 80068d0:	e012      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d6:	f043 0220 	orr.w	r2, r3, #32
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80068e4:	e008      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ea:	f043 0220 	orr.w	r2, r3, #32
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006900:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006904:	4618      	mov	r0, r3
 8006906:	3784      	adds	r7, #132	; 0x84
 8006908:	46bd      	mov	sp, r7
 800690a:	bd90      	pop	{r4, r7, pc}
 800690c:	58026300 	.word	0x58026300
 8006910:	40022000 	.word	0x40022000
 8006914:	40022100 	.word	0x40022100
 8006918:	58026000 	.word	0x58026000
 800691c:	cb840000 	.word	0xcb840000
 8006920:	40022300 	.word	0x40022300
 8006924:	24000090 	.word	0x24000090
 8006928:	053e2d63 	.word	0x053e2d63
 800692c:	c7520000 	.word	0xc7520000
 8006930:	cfb80000 	.word	0xcfb80000

08006934 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff f9b7 	bl	8005cb4 <LL_ADC_IsEnabled>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d16e      	bne.n	8006a2a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	4b38      	ldr	r3, [pc, #224]	; (8006a34 <ADC_Enable+0x100>)
 8006954:	4013      	ands	r3, r2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00d      	beq.n	8006976 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	f043 0210 	orr.w	r2, r3, #16
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696a:	f043 0201 	orr.w	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e05a      	b.n	8006a2c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff f972 	bl	8005c64 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006980:	f7fe ffbc 	bl	80058fc <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a2b      	ldr	r2, [pc, #172]	; (8006a38 <ADC_Enable+0x104>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <ADC_Enable+0x66>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a29      	ldr	r2, [pc, #164]	; (8006a3c <ADC_Enable+0x108>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d101      	bne.n	800699e <ADC_Enable+0x6a>
 800699a:	4b29      	ldr	r3, [pc, #164]	; (8006a40 <ADC_Enable+0x10c>)
 800699c:	e000      	b.n	80069a0 <ADC_Enable+0x6c>
 800699e:	4b29      	ldr	r3, [pc, #164]	; (8006a44 <ADC_Enable+0x110>)
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff f903 	bl	8005bac <LL_ADC_GetMultimode>
 80069a6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a23      	ldr	r2, [pc, #140]	; (8006a3c <ADC_Enable+0x108>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d002      	beq.n	80069b8 <ADC_Enable+0x84>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	e000      	b.n	80069ba <ADC_Enable+0x86>
 80069b8:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <ADC_Enable+0x104>)
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	4293      	cmp	r3, r2
 80069c0:	d02c      	beq.n	8006a1c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d130      	bne.n	8006a2a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069c8:	e028      	b.n	8006a1c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff f970 	bl	8005cb4 <LL_ADC_IsEnabled>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d104      	bne.n	80069e4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff f940 	bl	8005c64 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069e4:	f7fe ff8a 	bl	80058fc <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d914      	bls.n	8006a1c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d00d      	beq.n	8006a1c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a04:	f043 0210 	orr.w	r2, r3, #16
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a10:	f043 0201 	orr.w	r2, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e007      	b.n	8006a2c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d1cf      	bne.n	80069ca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	8000003f 	.word	0x8000003f
 8006a38:	40022000 	.word	0x40022000
 8006a3c:	40022100 	.word	0x40022100
 8006a40:	40022300 	.word	0x40022300
 8006a44:	58026300 	.word	0x58026300

08006a48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff f940 	bl	8005cda <LL_ADC_IsDisableOngoing>
 8006a5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff f927 	bl	8005cb4 <LL_ADC_IsEnabled>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d047      	beq.n	8006afc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d144      	bne.n	8006afc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f003 030d 	and.w	r3, r3, #13
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10c      	bne.n	8006a9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff f901 	bl	8005c8c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2203      	movs	r2, #3
 8006a90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a92:	f7fe ff33 	bl	80058fc <HAL_GetTick>
 8006a96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a98:	e029      	b.n	8006aee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	f043 0210 	orr.w	r2, r3, #16
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	f043 0201 	orr.w	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e023      	b.n	8006afe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006ab6:	f7fe ff21 	bl	80058fc <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d914      	bls.n	8006aee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00d      	beq.n	8006aee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	f043 0210 	orr.w	r2, r3, #16
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae2:	f043 0201 	orr.w	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e007      	b.n	8006afe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1dc      	bne.n	8006ab6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d14b      	bne.n	8006bb8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d021      	beq.n	8006b7e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe ff92 	bl	8005a68 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d032      	beq.n	8006bb0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d12b      	bne.n	8006bb0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d11f      	bne.n	8006bb0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b74:	f043 0201 	orr.w	r2, r3, #1
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	655a      	str	r2, [r3, #84]	; 0x54
 8006b7c:	e018      	b.n	8006bb0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d111      	bne.n	8006bb0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	f043 0201 	orr.w	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f7ff fb45 	bl	8006240 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006bb6:	e00e      	b.n	8006bd6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbc:	f003 0310 	and.w	r3, r3, #16
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff fb4f 	bl	8006268 <HAL_ADC_ErrorCallback>
}
 8006bca:	e004      	b.n	8006bd6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
}
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fb31 	bl	8006254 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c18:	f043 0204 	orr.w	r2, r3, #4
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fb21 	bl	8006268 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a7a      	ldr	r2, [pc, #488]	; (8006e28 <ADC_ConfigureBoostMode+0x1f8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <ADC_ConfigureBoostMode+0x1c>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a79      	ldr	r2, [pc, #484]	; (8006e2c <ADC_ConfigureBoostMode+0x1fc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d109      	bne.n	8006c60 <ADC_ConfigureBoostMode+0x30>
 8006c4c:	4b78      	ldr	r3, [pc, #480]	; (8006e30 <ADC_ConfigureBoostMode+0x200>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bf14      	ite	ne
 8006c58:	2301      	movne	r3, #1
 8006c5a:	2300      	moveq	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	e008      	b.n	8006c72 <ADC_ConfigureBoostMode+0x42>
 8006c60:	4b74      	ldr	r3, [pc, #464]	; (8006e34 <ADC_ConfigureBoostMode+0x204>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bf14      	ite	ne
 8006c6c:	2301      	movne	r3, #1
 8006c6e:	2300      	moveq	r3, #0
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d01c      	beq.n	8006cb0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006c76:	f007 feb7 	bl	800e9e8 <HAL_RCC_GetHCLKFreq>
 8006c7a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c84:	d010      	beq.n	8006ca8 <ADC_ConfigureBoostMode+0x78>
 8006c86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c8a:	d873      	bhi.n	8006d74 <ADC_ConfigureBoostMode+0x144>
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c90:	d002      	beq.n	8006c98 <ADC_ConfigureBoostMode+0x68>
 8006c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c96:	d16d      	bne.n	8006d74 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	0c1b      	lsrs	r3, r3, #16
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca4:	60fb      	str	r3, [r7, #12]
        break;
 8006ca6:	e068      	b.n	8006d7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	089b      	lsrs	r3, r3, #2
 8006cac:	60fb      	str	r3, [r7, #12]
        break;
 8006cae:	e064      	b.n	8006d7a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006cb0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006cb4:	f04f 0100 	mov.w	r1, #0
 8006cb8:	f009 f93e 	bl	800ff38 <HAL_RCCEx_GetPeriphCLKFreq>
 8006cbc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006cc6:	d051      	beq.n	8006d6c <ADC_ConfigureBoostMode+0x13c>
 8006cc8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006ccc:	d854      	bhi.n	8006d78 <ADC_ConfigureBoostMode+0x148>
 8006cce:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006cd2:	d047      	beq.n	8006d64 <ADC_ConfigureBoostMode+0x134>
 8006cd4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006cd8:	d84e      	bhi.n	8006d78 <ADC_ConfigureBoostMode+0x148>
 8006cda:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006cde:	d03d      	beq.n	8006d5c <ADC_ConfigureBoostMode+0x12c>
 8006ce0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006ce4:	d848      	bhi.n	8006d78 <ADC_ConfigureBoostMode+0x148>
 8006ce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cea:	d033      	beq.n	8006d54 <ADC_ConfigureBoostMode+0x124>
 8006cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cf0:	d842      	bhi.n	8006d78 <ADC_ConfigureBoostMode+0x148>
 8006cf2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006cf6:	d029      	beq.n	8006d4c <ADC_ConfigureBoostMode+0x11c>
 8006cf8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006cfc:	d83c      	bhi.n	8006d78 <ADC_ConfigureBoostMode+0x148>
 8006cfe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006d02:	d01a      	beq.n	8006d3a <ADC_ConfigureBoostMode+0x10a>
 8006d04:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006d08:	d836      	bhi.n	8006d78 <ADC_ConfigureBoostMode+0x148>
 8006d0a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006d0e:	d014      	beq.n	8006d3a <ADC_ConfigureBoostMode+0x10a>
 8006d10:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006d14:	d830      	bhi.n	8006d78 <ADC_ConfigureBoostMode+0x148>
 8006d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d1a:	d00e      	beq.n	8006d3a <ADC_ConfigureBoostMode+0x10a>
 8006d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d20:	d82a      	bhi.n	8006d78 <ADC_ConfigureBoostMode+0x148>
 8006d22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006d26:	d008      	beq.n	8006d3a <ADC_ConfigureBoostMode+0x10a>
 8006d28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006d2c:	d824      	bhi.n	8006d78 <ADC_ConfigureBoostMode+0x148>
 8006d2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d32:	d002      	beq.n	8006d3a <ADC_ConfigureBoostMode+0x10a>
 8006d34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d38:	d11e      	bne.n	8006d78 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	0c9b      	lsrs	r3, r3, #18
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	60fb      	str	r3, [r7, #12]
        break;
 8006d4a:	e016      	b.n	8006d7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	091b      	lsrs	r3, r3, #4
 8006d50:	60fb      	str	r3, [r7, #12]
        break;
 8006d52:	e012      	b.n	8006d7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	60fb      	str	r3, [r7, #12]
        break;
 8006d5a:	e00e      	b.n	8006d7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	099b      	lsrs	r3, r3, #6
 8006d60:	60fb      	str	r3, [r7, #12]
        break;
 8006d62:	e00a      	b.n	8006d7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	09db      	lsrs	r3, r3, #7
 8006d68:	60fb      	str	r3, [r7, #12]
        break;
 8006d6a:	e006      	b.n	8006d7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	60fb      	str	r3, [r7, #12]
        break;
 8006d72:	e002      	b.n	8006d7a <ADC_ConfigureBoostMode+0x14a>
        break;
 8006d74:	bf00      	nop
 8006d76:	e000      	b.n	8006d7a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006d78:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006d7a:	f7fe fdcb 	bl	8005914 <HAL_GetREVID>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d815      	bhi.n	8006db4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4a2b      	ldr	r2, [pc, #172]	; (8006e38 <ADC_ConfigureBoostMode+0x208>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d908      	bls.n	8006da2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d9e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006da0:	e03e      	b.n	8006e20 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006db0:	609a      	str	r2, [r3, #8]
}
 8006db2:	e035      	b.n	8006e20 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	085b      	lsrs	r3, r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4a1f      	ldr	r2, [pc, #124]	; (8006e3c <ADC_ConfigureBoostMode+0x20c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d808      	bhi.n	8006dd4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006dd0:	609a      	str	r2, [r3, #8]
}
 8006dd2:	e025      	b.n	8006e20 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4a1a      	ldr	r2, [pc, #104]	; (8006e40 <ADC_ConfigureBoostMode+0x210>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d80a      	bhi.n	8006df2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dee:	609a      	str	r2, [r3, #8]
}
 8006df0:	e016      	b.n	8006e20 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4a13      	ldr	r2, [pc, #76]	; (8006e44 <ADC_ConfigureBoostMode+0x214>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d80a      	bhi.n	8006e10 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e0c:	609a      	str	r2, [r3, #8]
}
 8006e0e:	e007      	b.n	8006e20 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40022000 	.word	0x40022000
 8006e2c:	40022100 	.word	0x40022100
 8006e30:	40022300 	.word	0x40022300
 8006e34:	58026300 	.word	0x58026300
 8006e38:	01312d00 	.word	0x01312d00
 8006e3c:	005f5e10 	.word	0x005f5e10
 8006e40:	00bebc20 	.word	0x00bebc20
 8006e44:	017d7840 	.word	0x017d7840

08006e48 <LL_ADC_IsEnabled>:
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <LL_ADC_IsEnabled+0x18>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <LL_ADC_IsEnabled+0x1a>
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
	...

08006e70 <LL_ADC_StartCalibration>:
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <LL_ADC_StartCalibration+0x38>)
 8006e82:	4013      	ands	r3, r2
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006e90:	430a      	orrs	r2, r1
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	609a      	str	r2, [r3, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	3ffeffc0 	.word	0x3ffeffc0

08006eac <LL_ADC_IsCalibrationOnGoing>:
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ec0:	d101      	bne.n	8006ec6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <LL_ADC_REG_IsConversionOngoing>:
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d101      	bne.n	8006eec <LL_ADC_REG_IsConversionOngoing+0x18>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_ADCEx_Calibration_Start+0x1e>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e04c      	b.n	8006fb4 <HAL_ADCEx_Calibration_Start+0xb8>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f7ff fd90 	bl	8006a48 <ADC_Disable>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d135      	bne.n	8006f9e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f36:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <HAL_ADCEx_Calibration_Start+0xc0>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	f043 0202 	orr.w	r2, r3, #2
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff ff90 	bl	8006e70 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006f50:	e014      	b.n	8006f7c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	3301      	adds	r3, #1
 8006f56:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	4a19      	ldr	r2, [pc, #100]	; (8006fc0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d30d      	bcc.n	8006f7c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f64:	f023 0312 	bic.w	r3, r3, #18
 8006f68:	f043 0210 	orr.w	r2, r3, #16
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e01b      	b.n	8006fb4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff ff93 	bl	8006eac <LL_ADC_IsCalibrationOnGoing>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e2      	bne.n	8006f52 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f90:	f023 0303 	bic.w	r3, r3, #3
 8006f94:	f043 0201 	orr.w	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	655a      	str	r2, [r3, #84]	; 0x54
 8006f9c:	e005      	b.n	8006faa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa2:	f043 0210 	orr.w	r2, r3, #16
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	ffffeefd 	.word	0xffffeefd
 8006fc0:	25c3f800 	.word	0x25c3f800

08006fc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006fc4:	b590      	push	{r4, r7, lr}
 8006fc6:	b09f      	sub	sp, #124	; 0x7c
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e0be      	b.n	8007160 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006fea:	2300      	movs	r3, #0
 8006fec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a5c      	ldr	r2, [pc, #368]	; (8007168 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d102      	bne.n	8007002 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006ffc:	4b5b      	ldr	r3, [pc, #364]	; (800716c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006ffe:	60bb      	str	r3, [r7, #8]
 8007000:	e001      	b.n	8007006 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007002:	2300      	movs	r3, #0
 8007004:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10b      	bne.n	8007024 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007010:	f043 0220 	orr.w	r2, r3, #32
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e09d      	b.n	8007160 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff ff54 	bl	8006ed4 <LL_ADC_REG_IsConversionOngoing>
 800702c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff ff4e 	bl	8006ed4 <LL_ADC_REG_IsConversionOngoing>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d17f      	bne.n	800713e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800703e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007040:	2b00      	cmp	r3, #0
 8007042:	d17c      	bne.n	800713e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a47      	ldr	r2, [pc, #284]	; (8007168 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d004      	beq.n	8007058 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a46      	ldr	r2, [pc, #280]	; (800716c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d101      	bne.n	800705c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007058:	4b45      	ldr	r3, [pc, #276]	; (8007170 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800705a:	e000      	b.n	800705e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800705c:	4b45      	ldr	r3, [pc, #276]	; (8007174 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800705e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d039      	beq.n	80070dc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	431a      	orrs	r2, r3
 8007076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007078:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a3a      	ldr	r2, [pc, #232]	; (8007168 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d004      	beq.n	800708e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a38      	ldr	r2, [pc, #224]	; (800716c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d10e      	bne.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800708e:	4836      	ldr	r0, [pc, #216]	; (8007168 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007090:	f7ff feda 	bl	8006e48 <LL_ADC_IsEnabled>
 8007094:	4604      	mov	r4, r0
 8007096:	4835      	ldr	r0, [pc, #212]	; (800716c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007098:	f7ff fed6 	bl	8006e48 <LL_ADC_IsEnabled>
 800709c:	4603      	mov	r3, r0
 800709e:	4323      	orrs	r3, r4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	bf0c      	ite	eq
 80070a4:	2301      	moveq	r3, #1
 80070a6:	2300      	movne	r3, #0
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	e008      	b.n	80070be <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80070ac:	4832      	ldr	r0, [pc, #200]	; (8007178 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80070ae:	f7ff fecb 	bl	8006e48 <LL_ADC_IsEnabled>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bf0c      	ite	eq
 80070b8:	2301      	moveq	r3, #1
 80070ba:	2300      	movne	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d047      	beq.n	8007152 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80070c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	4b2d      	ldr	r3, [pc, #180]	; (800717c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	6811      	ldr	r1, [r2, #0]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	6892      	ldr	r2, [r2, #8]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	431a      	orrs	r2, r3
 80070d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070da:	e03a      	b.n	8007152 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80070dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1e      	ldr	r2, [pc, #120]	; (8007168 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d004      	beq.n	80070fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a1d      	ldr	r2, [pc, #116]	; (800716c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d10e      	bne.n	800711a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80070fc:	481a      	ldr	r0, [pc, #104]	; (8007168 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80070fe:	f7ff fea3 	bl	8006e48 <LL_ADC_IsEnabled>
 8007102:	4604      	mov	r4, r0
 8007104:	4819      	ldr	r0, [pc, #100]	; (800716c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007106:	f7ff fe9f 	bl	8006e48 <LL_ADC_IsEnabled>
 800710a:	4603      	mov	r3, r0
 800710c:	4323      	orrs	r3, r4
 800710e:	2b00      	cmp	r3, #0
 8007110:	bf0c      	ite	eq
 8007112:	2301      	moveq	r3, #1
 8007114:	2300      	movne	r3, #0
 8007116:	b2db      	uxtb	r3, r3
 8007118:	e008      	b.n	800712c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800711a:	4817      	ldr	r0, [pc, #92]	; (8007178 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800711c:	f7ff fe94 	bl	8006e48 <LL_ADC_IsEnabled>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	bf0c      	ite	eq
 8007126:	2301      	moveq	r3, #1
 8007128:	2300      	movne	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d010      	beq.n	8007152 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	4b11      	ldr	r3, [pc, #68]	; (800717c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007136:	4013      	ands	r3, r2
 8007138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800713a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800713c:	e009      	b.n	8007152 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	f043 0220 	orr.w	r2, r3, #32
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007150:	e000      	b.n	8007154 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007152:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800715c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007160:	4618      	mov	r0, r3
 8007162:	377c      	adds	r7, #124	; 0x7c
 8007164:	46bd      	mov	sp, r7
 8007166:	bd90      	pop	{r4, r7, pc}
 8007168:	40022000 	.word	0x40022000
 800716c:	40022100 	.word	0x40022100
 8007170:	40022300 	.word	0x40022300
 8007174:	58026300 	.word	0x58026300
 8007178:	58026000 	.word	0x58026000
 800717c:	fffff0e0 	.word	0xfffff0e0

08007180 <__NVIC_SetPriorityGrouping>:
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <__NVIC_SetPriorityGrouping+0x40>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800719c:	4013      	ands	r3, r2
 800719e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80071a8:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <__NVIC_SetPriorityGrouping+0x44>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071ae:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <__NVIC_SetPriorityGrouping+0x40>)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	60d3      	str	r3, [r2, #12]
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	e000ed00 	.word	0xe000ed00
 80071c4:	05fa0000 	.word	0x05fa0000

080071c8 <__NVIC_GetPriorityGrouping>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071cc:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <__NVIC_GetPriorityGrouping+0x18>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	0a1b      	lsrs	r3, r3, #8
 80071d2:	f003 0307 	and.w	r3, r3, #7
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	e000ed00 	.word	0xe000ed00

080071e4 <__NVIC_EnableIRQ>:
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	db0b      	blt.n	800720e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071f6:	88fb      	ldrh	r3, [r7, #6]
 80071f8:	f003 021f 	and.w	r2, r3, #31
 80071fc:	4907      	ldr	r1, [pc, #28]	; (800721c <__NVIC_EnableIRQ+0x38>)
 80071fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007202:	095b      	lsrs	r3, r3, #5
 8007204:	2001      	movs	r0, #1
 8007206:	fa00 f202 	lsl.w	r2, r0, r2
 800720a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	e000e100 	.word	0xe000e100

08007220 <__NVIC_SetPriority>:
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	6039      	str	r1, [r7, #0]
 800722a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800722c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007230:	2b00      	cmp	r3, #0
 8007232:	db0a      	blt.n	800724a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	b2da      	uxtb	r2, r3
 8007238:	490c      	ldr	r1, [pc, #48]	; (800726c <__NVIC_SetPriority+0x4c>)
 800723a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800723e:	0112      	lsls	r2, r2, #4
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	440b      	add	r3, r1
 8007244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007248:	e00a      	b.n	8007260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	b2da      	uxtb	r2, r3
 800724e:	4908      	ldr	r1, [pc, #32]	; (8007270 <__NVIC_SetPriority+0x50>)
 8007250:	88fb      	ldrh	r3, [r7, #6]
 8007252:	f003 030f 	and.w	r3, r3, #15
 8007256:	3b04      	subs	r3, #4
 8007258:	0112      	lsls	r2, r2, #4
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	440b      	add	r3, r1
 800725e:	761a      	strb	r2, [r3, #24]
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	e000e100 	.word	0xe000e100
 8007270:	e000ed00 	.word	0xe000ed00

08007274 <NVIC_EncodePriority>:
{
 8007274:	b480      	push	{r7}
 8007276:	b089      	sub	sp, #36	; 0x24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f1c3 0307 	rsb	r3, r3, #7
 800728e:	2b04      	cmp	r3, #4
 8007290:	bf28      	it	cs
 8007292:	2304      	movcs	r3, #4
 8007294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	3304      	adds	r3, #4
 800729a:	2b06      	cmp	r3, #6
 800729c:	d902      	bls.n	80072a4 <NVIC_EncodePriority+0x30>
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	3b03      	subs	r3, #3
 80072a2:	e000      	b.n	80072a6 <NVIC_EncodePriority+0x32>
 80072a4:	2300      	movs	r3, #0
 80072a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	fa02 f303 	lsl.w	r3, r2, r3
 80072b2:	43da      	mvns	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	401a      	ands	r2, r3
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	fa01 f303 	lsl.w	r3, r1, r3
 80072c6:	43d9      	mvns	r1, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072cc:	4313      	orrs	r3, r2
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3724      	adds	r7, #36	; 0x24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff ff4c 	bl	8007180 <__NVIC_SetPriorityGrouping>
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072fe:	f7ff ff63 	bl	80071c8 <__NVIC_GetPriorityGrouping>
 8007302:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	6978      	ldr	r0, [r7, #20]
 800730a:	f7ff ffb3 	bl	8007274 <NVIC_EncodePriority>
 800730e:	4602      	mov	r2, r0
 8007310:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007314:	4611      	mov	r1, r2
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff ff82 	bl	8007220 <__NVIC_SetPriority>
}
 800731c:	bf00      	nop
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800732e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff ff56 	bl	80071e4 <__NVIC_EnableIRQ>
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007344:	f3bf 8f5f 	dmb	sy
}
 8007348:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <HAL_MPU_Disable+0x28>)
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	4a06      	ldr	r2, [pc, #24]	; (8007368 <HAL_MPU_Disable+0x28>)
 8007350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007354:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <HAL_MPU_Disable+0x2c>)
 8007358:	2200      	movs	r2, #0
 800735a:	605a      	str	r2, [r3, #4]
}
 800735c:	bf00      	nop
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	e000ed00 	.word	0xe000ed00
 800736c:	e000ed90 	.word	0xe000ed90

08007370 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007378:	4a0b      	ldr	r2, [pc, #44]	; (80073a8 <HAL_MPU_Enable+0x38>)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007382:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <HAL_MPU_Enable+0x3c>)
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	4a09      	ldr	r2, [pc, #36]	; (80073ac <HAL_MPU_Enable+0x3c>)
 8007388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800738c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800738e:	f3bf 8f4f 	dsb	sy
}
 8007392:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007394:	f3bf 8f6f 	isb	sy
}
 8007398:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	e000ed90 	.word	0xe000ed90
 80073ac:	e000ed00 	.word	0xe000ed00

080073b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	785a      	ldrb	r2, [r3, #1]
 80073bc:	4b1b      	ldr	r3, [pc, #108]	; (800742c <HAL_MPU_ConfigRegion+0x7c>)
 80073be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80073c0:	4b1a      	ldr	r3, [pc, #104]	; (800742c <HAL_MPU_ConfigRegion+0x7c>)
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	4a19      	ldr	r2, [pc, #100]	; (800742c <HAL_MPU_ConfigRegion+0x7c>)
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80073cc:	4a17      	ldr	r2, [pc, #92]	; (800742c <HAL_MPU_ConfigRegion+0x7c>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	7b1b      	ldrb	r3, [r3, #12]
 80073d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7adb      	ldrb	r3, [r3, #11]
 80073de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80073e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	7a9b      	ldrb	r3, [r3, #10]
 80073e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80073e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	7b5b      	ldrb	r3, [r3, #13]
 80073ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80073f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	7b9b      	ldrb	r3, [r3, #14]
 80073f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80073f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	7bdb      	ldrb	r3, [r3, #15]
 80073fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007400:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	7a5b      	ldrb	r3, [r3, #9]
 8007406:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007408:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7a1b      	ldrb	r3, [r3, #8]
 800740e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007410:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	7812      	ldrb	r2, [r2, #0]
 8007416:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007418:	4a04      	ldr	r2, [pc, #16]	; (800742c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800741a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800741c:	6113      	str	r3, [r2, #16]
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	e000ed90 	.word	0xe000ed90

08007430 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e014      	b.n	800746c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	791b      	ldrb	r3, [r3, #4]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d105      	bne.n	8007458 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7f9 fbc6 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e046      	b.n	8007516 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	795b      	ldrb	r3, [r3, #5]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_DAC_Start+0x20>
 8007490:	2302      	movs	r3, #2
 8007492:	e040      	b.n	8007516 <HAL_DAC_Start+0xa2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6819      	ldr	r1, [r3, #0]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	2201      	movs	r2, #1
 80074ae:	409a      	lsls	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10f      	bne.n	80074de <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d11d      	bne.n	8007508 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	605a      	str	r2, [r3, #4]
 80074dc:	e014      	b.n	8007508 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	2102      	movs	r1, #2
 80074f0:	fa01 f303 	lsl.w	r3, r1, r3
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d107      	bne.n	8007508 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0202 	orr.w	r2, r2, #2
 8007506:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e0a2      	b.n	8007682 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	795b      	ldrb	r3, [r3, #5]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_DAC_Start_DMA+0x24>
 8007544:	2302      	movs	r3, #2
 8007546:	e09c      	b.n	8007682 <HAL_DAC_Start_DMA+0x15e>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2201      	movs	r2, #1
 800754c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2202      	movs	r2, #2
 8007552:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d129      	bne.n	80075ae <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	4a4b      	ldr	r2, [pc, #300]	; (800768c <HAL_DAC_Start_DMA+0x168>)
 8007560:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	4a4a      	ldr	r2, [pc, #296]	; (8007690 <HAL_DAC_Start_DMA+0x16c>)
 8007568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	4a49      	ldr	r2, [pc, #292]	; (8007694 <HAL_DAC_Start_DMA+0x170>)
 8007570:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007580:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_DAC_Start_DMA+0x6c>
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	2b04      	cmp	r3, #4
 800758c:	d005      	beq.n	800759a <HAL_DAC_Start_DMA+0x76>
 800758e:	e009      	b.n	80075a4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	613b      	str	r3, [r7, #16]
        break;
 8007598:	e033      	b.n	8007602 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	613b      	str	r3, [r7, #16]
        break;
 80075a2:	e02e      	b.n	8007602 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3310      	adds	r3, #16
 80075aa:	613b      	str	r3, [r7, #16]
        break;
 80075ac:	e029      	b.n	8007602 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	4a39      	ldr	r2, [pc, #228]	; (8007698 <HAL_DAC_Start_DMA+0x174>)
 80075b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	4a38      	ldr	r2, [pc, #224]	; (800769c <HAL_DAC_Start_DMA+0x178>)
 80075bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	4a37      	ldr	r2, [pc, #220]	; (80076a0 <HAL_DAC_Start_DMA+0x17c>)
 80075c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80075d4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <HAL_DAC_Start_DMA+0xc0>
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d005      	beq.n	80075ee <HAL_DAC_Start_DMA+0xca>
 80075e2:	e009      	b.n	80075f8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3314      	adds	r3, #20
 80075ea:	613b      	str	r3, [r7, #16]
        break;
 80075ec:	e009      	b.n	8007602 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3318      	adds	r3, #24
 80075f4:	613b      	str	r3, [r7, #16]
        break;
 80075f6:	e004      	b.n	8007602 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	331c      	adds	r3, #28
 80075fe:	613b      	str	r3, [r7, #16]
        break;
 8007600:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d111      	bne.n	800762c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007616:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6898      	ldr	r0, [r3, #8]
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	f000 fe67 	bl	80082f4 <HAL_DMA_Start_IT>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]
 800762a:	e010      	b.n	800764e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800763a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	68d8      	ldr	r0, [r3, #12]
 8007640:	6879      	ldr	r1, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	f000 fe55 	bl	80082f4 <HAL_DMA_Start_IT>
 800764a:	4603      	mov	r3, r0
 800764c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007654:	7dfb      	ldrb	r3, [r7, #23]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10c      	bne.n	8007674 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2201      	movs	r2, #1
 8007668:	409a      	lsls	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	e005      	b.n	8007680 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f043 0204 	orr.w	r2, r3, #4
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3718      	adds	r7, #24
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	08007b15 	.word	0x08007b15
 8007690:	08007b37 	.word	0x08007b37
 8007694:	08007b53 	.word	0x08007b53
 8007698:	08007bd1 	.word	0x08007bd1
 800769c:	08007bf3 	.word	0x08007bf3
 80076a0:	08007c0f 	.word	0x08007c0f

080076a4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e03e      	b.n	8007736 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6819      	ldr	r1, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	43da      	mvns	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	400a      	ands	r2, r1
 80076d4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6819      	ldr	r1, [r3, #0]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	f003 0310 	and.w	r3, r3, #16
 80076e2:	2201      	movs	r2, #1
 80076e4:	fa02 f303 	lsl.w	r3, r2, r3
 80076e8:	43da      	mvns	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	400a      	ands	r2, r1
 80076f0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10d      	bne.n	8007714 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 f863 	bl	80087c8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e00c      	b.n	800772e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	4618      	mov	r0, r3
 800771a:	f001 f855 	bl	80087c8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800772c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007754:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01d      	beq.n	800779c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d018      	beq.n	800779c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2204      	movs	r2, #4
 800776e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f043 0201 	orr.w	r2, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007784:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007794:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f86f 	bl	800787a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d01d      	beq.n	80077e2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d018      	beq.n	80077e2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2204      	movs	r2, #4
 80077b4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f043 0202 	orr.w	r2, r3, #2
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80077ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80077da:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f9ed 	bl	8007bbc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80077e2:	bf00      	nop
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b087      	sub	sp, #28
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e015      	b.n	8007832 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d105      	bne.n	800781e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4413      	add	r3, r2
 8007818:	3308      	adds	r3, #8
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e004      	b.n	8007828 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4413      	add	r3, r2
 8007824:	3314      	adds	r3, #20
 8007826:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	461a      	mov	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
	...

08007890 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	; 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <HAL_DAC_ConfigChannel+0x1e>
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e12a      	b.n	8007b08 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	795b      	ldrb	r3, [r3, #5]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <HAL_DAC_ConfigChannel+0x2e>
 80078ba:	2302      	movs	r3, #2
 80078bc:	e124      	b.n	8007b08 <HAL_DAC_ConfigChannel+0x278>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2202      	movs	r2, #2
 80078c8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d17a      	bne.n	80079c8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80078d2:	f7fe f813 	bl	80058fc <HAL_GetTick>
 80078d6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d13d      	bne.n	800795a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80078de:	e018      	b.n	8007912 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80078e0:	f7fe f80c 	bl	80058fc <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d911      	bls.n	8007912 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078f4:	4b86      	ldr	r3, [pc, #536]	; (8007b10 <HAL_DAC_ConfigChannel+0x280>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f043 0208 	orr.w	r2, r3, #8
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2203      	movs	r2, #3
 800790c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e0fa      	b.n	8007b08 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007918:	4b7d      	ldr	r3, [pc, #500]	; (8007b10 <HAL_DAC_ConfigChannel+0x280>)
 800791a:	4013      	ands	r3, r2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1df      	bne.n	80078e0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	6992      	ldr	r2, [r2, #24]
 8007928:	641a      	str	r2, [r3, #64]	; 0x40
 800792a:	e020      	b.n	800796e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800792c:	f7fd ffe6 	bl	80058fc <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b01      	cmp	r3, #1
 8007938:	d90f      	bls.n	800795a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007940:	2b00      	cmp	r3, #0
 8007942:	da0a      	bge.n	800795a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	f043 0208 	orr.w	r2, r3, #8
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2203      	movs	r2, #3
 8007954:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e0d6      	b.n	8007b08 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	2b00      	cmp	r3, #0
 8007962:	dbe3      	blt.n	800792c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	6992      	ldr	r2, [r2, #24]
 800796c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f003 0310 	and.w	r3, r3, #16
 800797a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800797e:	fa01 f303 	lsl.w	r3, r1, r3
 8007982:	43db      	mvns	r3, r3
 8007984:	ea02 0103 	and.w	r1, r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	69da      	ldr	r2, [r3, #28]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f003 0310 	and.w	r3, r3, #16
 8007992:	409a      	lsls	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	21ff      	movs	r1, #255	; 0xff
 80079aa:	fa01 f303 	lsl.w	r3, r1, r3
 80079ae:	43db      	mvns	r3, r3
 80079b0:	ea02 0103 	and.w	r1, r2, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	6a1a      	ldr	r2, [r3, #32]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f003 0310 	and.w	r3, r3, #16
 80079be:	409a      	lsls	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d11d      	bne.n	8007a0c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f003 0310 	and.w	r3, r3, #16
 80079de:	221f      	movs	r2, #31
 80079e0:	fa02 f303 	lsl.w	r3, r2, r3
 80079e4:	43db      	mvns	r3, r3
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	4013      	ands	r3, r2
 80079ea:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	fa02 f303 	lsl.w	r3, r2, r3
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a12:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f003 0310 	and.w	r3, r3, #16
 8007a1a:	2207      	movs	r2, #7
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	43db      	mvns	r3, r3
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	4013      	ands	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d102      	bne.n	8007a36 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
 8007a34:	e00f      	b.n	8007a56 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d102      	bne.n	8007a44 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
 8007a42:	e008      	b.n	8007a56 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a50:	e001      	b.n	8007a56 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6819      	ldr	r1, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f003 0310 	and.w	r3, r3, #16
 8007a8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a90:	fa02 f303 	lsl.w	r3, r2, r3
 8007a94:	43da      	mvns	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	400a      	ands	r2, r1
 8007a9c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	43db      	mvns	r3, r3
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	4013      	ands	r3, r2
 8007aba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f003 0310 	and.w	r3, r3, #16
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6819      	ldr	r1, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	22c0      	movs	r2, #192	; 0xc0
 8007aea:	fa02 f303 	lsl.w	r3, r2, r3
 8007aee:	43da      	mvns	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	400a      	ands	r2, r1
 8007af6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2201      	movs	r2, #1
 8007afc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3728      	adds	r7, #40	; 0x28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20008000 	.word	0x20008000

08007b14 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7ff fe8b 	bl	800783e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	711a      	strb	r2, [r3, #4]
}
 8007b2e:	bf00      	nop
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f7ff fe84 	bl	8007852 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	f043 0204 	orr.w	r2, r3, #4
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f7ff fe7a 	bl	8007866 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2201      	movs	r2, #1
 8007b76:	711a      	strb	r2, [r3, #4]
}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7ff ffce 	bl	8007b80 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2201      	movs	r2, #1
 8007be8:	711a      	strb	r2, [r3, #4]
}
 8007bea:	bf00      	nop
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f7ff ffc7 	bl	8007b94 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007c06:	bf00      	nop
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	f043 0204 	orr.w	r2, r3, #4
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff ffbd 	bl	8007ba8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	711a      	strb	r2, [r3, #4]
}
 8007c34:	bf00      	nop
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007c44:	f7fd fe5a 	bl	80058fc <HAL_GetTick>
 8007c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e316      	b.n	8008282 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a66      	ldr	r2, [pc, #408]	; (8007df4 <HAL_DMA_Init+0x1b8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d04a      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a65      	ldr	r2, [pc, #404]	; (8007df8 <HAL_DMA_Init+0x1bc>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d045      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a63      	ldr	r2, [pc, #396]	; (8007dfc <HAL_DMA_Init+0x1c0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d040      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a62      	ldr	r2, [pc, #392]	; (8007e00 <HAL_DMA_Init+0x1c4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d03b      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a60      	ldr	r2, [pc, #384]	; (8007e04 <HAL_DMA_Init+0x1c8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d036      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a5f      	ldr	r2, [pc, #380]	; (8007e08 <HAL_DMA_Init+0x1cc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d031      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a5d      	ldr	r2, [pc, #372]	; (8007e0c <HAL_DMA_Init+0x1d0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d02c      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a5c      	ldr	r2, [pc, #368]	; (8007e10 <HAL_DMA_Init+0x1d4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d027      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a5a      	ldr	r2, [pc, #360]	; (8007e14 <HAL_DMA_Init+0x1d8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d022      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a59      	ldr	r2, [pc, #356]	; (8007e18 <HAL_DMA_Init+0x1dc>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d01d      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a57      	ldr	r2, [pc, #348]	; (8007e1c <HAL_DMA_Init+0x1e0>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d018      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a56      	ldr	r2, [pc, #344]	; (8007e20 <HAL_DMA_Init+0x1e4>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d013      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a54      	ldr	r2, [pc, #336]	; (8007e24 <HAL_DMA_Init+0x1e8>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00e      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a53      	ldr	r2, [pc, #332]	; (8007e28 <HAL_DMA_Init+0x1ec>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d009      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a51      	ldr	r2, [pc, #324]	; (8007e2c <HAL_DMA_Init+0x1f0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d004      	beq.n	8007cf4 <HAL_DMA_Init+0xb8>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a50      	ldr	r2, [pc, #320]	; (8007e30 <HAL_DMA_Init+0x1f4>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d101      	bne.n	8007cf8 <HAL_DMA_Init+0xbc>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e000      	b.n	8007cfa <HAL_DMA_Init+0xbe>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 813b 	beq.w	8007f76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a37      	ldr	r2, [pc, #220]	; (8007df4 <HAL_DMA_Init+0x1b8>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d04a      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a36      	ldr	r2, [pc, #216]	; (8007df8 <HAL_DMA_Init+0x1bc>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d045      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a34      	ldr	r2, [pc, #208]	; (8007dfc <HAL_DMA_Init+0x1c0>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d040      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a33      	ldr	r2, [pc, #204]	; (8007e00 <HAL_DMA_Init+0x1c4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d03b      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a31      	ldr	r2, [pc, #196]	; (8007e04 <HAL_DMA_Init+0x1c8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d036      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a30      	ldr	r2, [pc, #192]	; (8007e08 <HAL_DMA_Init+0x1cc>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d031      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a2e      	ldr	r2, [pc, #184]	; (8007e0c <HAL_DMA_Init+0x1d0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d02c      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a2d      	ldr	r2, [pc, #180]	; (8007e10 <HAL_DMA_Init+0x1d4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d027      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a2b      	ldr	r2, [pc, #172]	; (8007e14 <HAL_DMA_Init+0x1d8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d022      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a2a      	ldr	r2, [pc, #168]	; (8007e18 <HAL_DMA_Init+0x1dc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d01d      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a28      	ldr	r2, [pc, #160]	; (8007e1c <HAL_DMA_Init+0x1e0>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d018      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a27      	ldr	r2, [pc, #156]	; (8007e20 <HAL_DMA_Init+0x1e4>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d013      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a25      	ldr	r2, [pc, #148]	; (8007e24 <HAL_DMA_Init+0x1e8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00e      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a24      	ldr	r2, [pc, #144]	; (8007e28 <HAL_DMA_Init+0x1ec>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d009      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a22      	ldr	r2, [pc, #136]	; (8007e2c <HAL_DMA_Init+0x1f0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d004      	beq.n	8007db0 <HAL_DMA_Init+0x174>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a21      	ldr	r2, [pc, #132]	; (8007e30 <HAL_DMA_Init+0x1f4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d108      	bne.n	8007dc2 <HAL_DMA_Init+0x186>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0201 	bic.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	e007      	b.n	8007dd2 <HAL_DMA_Init+0x196>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0201 	bic.w	r2, r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007dd2:	e02f      	b.n	8007e34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007dd4:	f7fd fd92 	bl	80058fc <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b05      	cmp	r3, #5
 8007de0:	d928      	bls.n	8007e34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2203      	movs	r2, #3
 8007dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e246      	b.n	8008282 <HAL_DMA_Init+0x646>
 8007df4:	40020010 	.word	0x40020010
 8007df8:	40020028 	.word	0x40020028
 8007dfc:	40020040 	.word	0x40020040
 8007e00:	40020058 	.word	0x40020058
 8007e04:	40020070 	.word	0x40020070
 8007e08:	40020088 	.word	0x40020088
 8007e0c:	400200a0 	.word	0x400200a0
 8007e10:	400200b8 	.word	0x400200b8
 8007e14:	40020410 	.word	0x40020410
 8007e18:	40020428 	.word	0x40020428
 8007e1c:	40020440 	.word	0x40020440
 8007e20:	40020458 	.word	0x40020458
 8007e24:	40020470 	.word	0x40020470
 8007e28:	40020488 	.word	0x40020488
 8007e2c:	400204a0 	.word	0x400204a0
 8007e30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1c8      	bne.n	8007dd4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4b83      	ldr	r3, [pc, #524]	; (800805c <HAL_DMA_Init+0x420>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007e5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d107      	bne.n	8007e98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	4313      	orrs	r3, r2
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007e98:	4b71      	ldr	r3, [pc, #452]	; (8008060 <HAL_DMA_Init+0x424>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	4b71      	ldr	r3, [pc, #452]	; (8008064 <HAL_DMA_Init+0x428>)
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea4:	d328      	bcc.n	8007ef8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2b28      	cmp	r3, #40	; 0x28
 8007eac:	d903      	bls.n	8007eb6 <HAL_DMA_Init+0x27a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8007eb4:	d917      	bls.n	8007ee6 <HAL_DMA_Init+0x2aa>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b3e      	cmp	r3, #62	; 0x3e
 8007ebc:	d903      	bls.n	8007ec6 <HAL_DMA_Init+0x28a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b42      	cmp	r3, #66	; 0x42
 8007ec4:	d90f      	bls.n	8007ee6 <HAL_DMA_Init+0x2aa>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b46      	cmp	r3, #70	; 0x46
 8007ecc:	d903      	bls.n	8007ed6 <HAL_DMA_Init+0x29a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b48      	cmp	r3, #72	; 0x48
 8007ed4:	d907      	bls.n	8007ee6 <HAL_DMA_Init+0x2aa>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b4e      	cmp	r3, #78	; 0x4e
 8007edc:	d905      	bls.n	8007eea <HAL_DMA_Init+0x2ae>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	2b52      	cmp	r3, #82	; 0x52
 8007ee4:	d801      	bhi.n	8007eea <HAL_DMA_Init+0x2ae>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e000      	b.n	8007eec <HAL_DMA_Init+0x2b0>
 8007eea:	2300      	movs	r3, #0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ef6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f023 0307 	bic.w	r3, r3, #7
 8007f0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d117      	bne.n	8007f52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00e      	beq.n	8007f52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f002 fb4d 	bl	800a5d4 <DMA_CheckFifoParam>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2240      	movs	r2, #64	; 0x40
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e197      	b.n	8008282 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f002 fa88 	bl	800a470 <DMA_CalcBaseAndBitshift>
 8007f60:	4603      	mov	r3, r0
 8007f62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f68:	f003 031f 	and.w	r3, r3, #31
 8007f6c:	223f      	movs	r2, #63	; 0x3f
 8007f6e:	409a      	lsls	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	609a      	str	r2, [r3, #8]
 8007f74:	e0cd      	b.n	8008112 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a3b      	ldr	r2, [pc, #236]	; (8008068 <HAL_DMA_Init+0x42c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d022      	beq.n	8007fc6 <HAL_DMA_Init+0x38a>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a39      	ldr	r2, [pc, #228]	; (800806c <HAL_DMA_Init+0x430>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d01d      	beq.n	8007fc6 <HAL_DMA_Init+0x38a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a38      	ldr	r2, [pc, #224]	; (8008070 <HAL_DMA_Init+0x434>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d018      	beq.n	8007fc6 <HAL_DMA_Init+0x38a>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a36      	ldr	r2, [pc, #216]	; (8008074 <HAL_DMA_Init+0x438>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d013      	beq.n	8007fc6 <HAL_DMA_Init+0x38a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a35      	ldr	r2, [pc, #212]	; (8008078 <HAL_DMA_Init+0x43c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00e      	beq.n	8007fc6 <HAL_DMA_Init+0x38a>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a33      	ldr	r2, [pc, #204]	; (800807c <HAL_DMA_Init+0x440>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d009      	beq.n	8007fc6 <HAL_DMA_Init+0x38a>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a32      	ldr	r2, [pc, #200]	; (8008080 <HAL_DMA_Init+0x444>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d004      	beq.n	8007fc6 <HAL_DMA_Init+0x38a>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a30      	ldr	r2, [pc, #192]	; (8008084 <HAL_DMA_Init+0x448>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d101      	bne.n	8007fca <HAL_DMA_Init+0x38e>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e000      	b.n	8007fcc <HAL_DMA_Init+0x390>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8097 	beq.w	8008100 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a24      	ldr	r2, [pc, #144]	; (8008068 <HAL_DMA_Init+0x42c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d021      	beq.n	8008020 <HAL_DMA_Init+0x3e4>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a22      	ldr	r2, [pc, #136]	; (800806c <HAL_DMA_Init+0x430>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d01c      	beq.n	8008020 <HAL_DMA_Init+0x3e4>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a21      	ldr	r2, [pc, #132]	; (8008070 <HAL_DMA_Init+0x434>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d017      	beq.n	8008020 <HAL_DMA_Init+0x3e4>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a1f      	ldr	r2, [pc, #124]	; (8008074 <HAL_DMA_Init+0x438>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d012      	beq.n	8008020 <HAL_DMA_Init+0x3e4>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a1e      	ldr	r2, [pc, #120]	; (8008078 <HAL_DMA_Init+0x43c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d00d      	beq.n	8008020 <HAL_DMA_Init+0x3e4>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a1c      	ldr	r2, [pc, #112]	; (800807c <HAL_DMA_Init+0x440>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d008      	beq.n	8008020 <HAL_DMA_Init+0x3e4>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a1b      	ldr	r2, [pc, #108]	; (8008080 <HAL_DMA_Init+0x444>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d003      	beq.n	8008020 <HAL_DMA_Init+0x3e4>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a19      	ldr	r2, [pc, #100]	; (8008084 <HAL_DMA_Init+0x448>)
 800801e:	4293      	cmp	r3, r2
 8008020:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4b12      	ldr	r3, [pc, #72]	; (8008088 <HAL_DMA_Init+0x44c>)
 800803e:	4013      	ands	r3, r2
 8008040:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	d020      	beq.n	800808c <HAL_DMA_Init+0x450>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2b80      	cmp	r3, #128	; 0x80
 8008050:	d102      	bne.n	8008058 <HAL_DMA_Init+0x41c>
 8008052:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008056:	e01a      	b.n	800808e <HAL_DMA_Init+0x452>
 8008058:	2300      	movs	r3, #0
 800805a:	e018      	b.n	800808e <HAL_DMA_Init+0x452>
 800805c:	fe10803f 	.word	0xfe10803f
 8008060:	5c001000 	.word	0x5c001000
 8008064:	ffff0000 	.word	0xffff0000
 8008068:	58025408 	.word	0x58025408
 800806c:	5802541c 	.word	0x5802541c
 8008070:	58025430 	.word	0x58025430
 8008074:	58025444 	.word	0x58025444
 8008078:	58025458 	.word	0x58025458
 800807c:	5802546c 	.word	0x5802546c
 8008080:	58025480 	.word	0x58025480
 8008084:	58025494 	.word	0x58025494
 8008088:	fffe000f 	.word	0xfffe000f
 800808c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	68d2      	ldr	r2, [r2, #12]
 8008092:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008094:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800809c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80080a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80080ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80080b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80080bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	461a      	mov	r2, r3
 80080d2:	4b6e      	ldr	r3, [pc, #440]	; (800828c <HAL_DMA_Init+0x650>)
 80080d4:	4413      	add	r3, r2
 80080d6:	4a6e      	ldr	r2, [pc, #440]	; (8008290 <HAL_DMA_Init+0x654>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	091b      	lsrs	r3, r3, #4
 80080de:	009a      	lsls	r2, r3, #2
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f002 f9c3 	bl	800a470 <DMA_CalcBaseAndBitshift>
 80080ea:	4603      	mov	r3, r0
 80080ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f2:	f003 031f 	and.w	r3, r3, #31
 80080f6:	2201      	movs	r2, #1
 80080f8:	409a      	lsls	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	605a      	str	r2, [r3, #4]
 80080fe:	e008      	b.n	8008112 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2240      	movs	r2, #64	; 0x40
 8008104:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2203      	movs	r2, #3
 800810a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e0b7      	b.n	8008282 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a5f      	ldr	r2, [pc, #380]	; (8008294 <HAL_DMA_Init+0x658>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d072      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a5d      	ldr	r2, [pc, #372]	; (8008298 <HAL_DMA_Init+0x65c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d06d      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a5c      	ldr	r2, [pc, #368]	; (800829c <HAL_DMA_Init+0x660>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d068      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a5a      	ldr	r2, [pc, #360]	; (80082a0 <HAL_DMA_Init+0x664>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d063      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a59      	ldr	r2, [pc, #356]	; (80082a4 <HAL_DMA_Init+0x668>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d05e      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a57      	ldr	r2, [pc, #348]	; (80082a8 <HAL_DMA_Init+0x66c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d059      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a56      	ldr	r2, [pc, #344]	; (80082ac <HAL_DMA_Init+0x670>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d054      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a54      	ldr	r2, [pc, #336]	; (80082b0 <HAL_DMA_Init+0x674>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d04f      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a53      	ldr	r2, [pc, #332]	; (80082b4 <HAL_DMA_Init+0x678>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d04a      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a51      	ldr	r2, [pc, #324]	; (80082b8 <HAL_DMA_Init+0x67c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d045      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a50      	ldr	r2, [pc, #320]	; (80082bc <HAL_DMA_Init+0x680>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d040      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a4e      	ldr	r2, [pc, #312]	; (80082c0 <HAL_DMA_Init+0x684>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d03b      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a4d      	ldr	r2, [pc, #308]	; (80082c4 <HAL_DMA_Init+0x688>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d036      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a4b      	ldr	r2, [pc, #300]	; (80082c8 <HAL_DMA_Init+0x68c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d031      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a4a      	ldr	r2, [pc, #296]	; (80082cc <HAL_DMA_Init+0x690>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d02c      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a48      	ldr	r2, [pc, #288]	; (80082d0 <HAL_DMA_Init+0x694>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d027      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a47      	ldr	r2, [pc, #284]	; (80082d4 <HAL_DMA_Init+0x698>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d022      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a45      	ldr	r2, [pc, #276]	; (80082d8 <HAL_DMA_Init+0x69c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d01d      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a44      	ldr	r2, [pc, #272]	; (80082dc <HAL_DMA_Init+0x6a0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d018      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a42      	ldr	r2, [pc, #264]	; (80082e0 <HAL_DMA_Init+0x6a4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d013      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a41      	ldr	r2, [pc, #260]	; (80082e4 <HAL_DMA_Init+0x6a8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00e      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a3f      	ldr	r2, [pc, #252]	; (80082e8 <HAL_DMA_Init+0x6ac>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d009      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a3e      	ldr	r2, [pc, #248]	; (80082ec <HAL_DMA_Init+0x6b0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d004      	beq.n	8008202 <HAL_DMA_Init+0x5c6>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a3c      	ldr	r2, [pc, #240]	; (80082f0 <HAL_DMA_Init+0x6b4>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d101      	bne.n	8008206 <HAL_DMA_Init+0x5ca>
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <HAL_DMA_Init+0x5cc>
 8008206:	2300      	movs	r3, #0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d032      	beq.n	8008272 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f002 fa5d 	bl	800a6cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2b80      	cmp	r3, #128	; 0x80
 8008218:	d102      	bne.n	8008220 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008228:	b2d2      	uxtb	r2, r2
 800822a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008234:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d010      	beq.n	8008260 <HAL_DMA_Init+0x624>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2b08      	cmp	r3, #8
 8008244:	d80c      	bhi.n	8008260 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f002 fada 	bl	800a800 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	e008      	b.n	8008272 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	a7fdabf8 	.word	0xa7fdabf8
 8008290:	cccccccd 	.word	0xcccccccd
 8008294:	40020010 	.word	0x40020010
 8008298:	40020028 	.word	0x40020028
 800829c:	40020040 	.word	0x40020040
 80082a0:	40020058 	.word	0x40020058
 80082a4:	40020070 	.word	0x40020070
 80082a8:	40020088 	.word	0x40020088
 80082ac:	400200a0 	.word	0x400200a0
 80082b0:	400200b8 	.word	0x400200b8
 80082b4:	40020410 	.word	0x40020410
 80082b8:	40020428 	.word	0x40020428
 80082bc:	40020440 	.word	0x40020440
 80082c0:	40020458 	.word	0x40020458
 80082c4:	40020470 	.word	0x40020470
 80082c8:	40020488 	.word	0x40020488
 80082cc:	400204a0 	.word	0x400204a0
 80082d0:	400204b8 	.word	0x400204b8
 80082d4:	58025408 	.word	0x58025408
 80082d8:	5802541c 	.word	0x5802541c
 80082dc:	58025430 	.word	0x58025430
 80082e0:	58025444 	.word	0x58025444
 80082e4:	58025458 	.word	0x58025458
 80082e8:	5802546c 	.word	0x5802546c
 80082ec:	58025480 	.word	0x58025480
 80082f0:	58025494 	.word	0x58025494

080082f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e226      	b.n	800875e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008316:	2b01      	cmp	r3, #1
 8008318:	d101      	bne.n	800831e <HAL_DMA_Start_IT+0x2a>
 800831a:	2302      	movs	r3, #2
 800831c:	e21f      	b.n	800875e <HAL_DMA_Start_IT+0x46a>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b01      	cmp	r3, #1
 8008330:	f040 820a 	bne.w	8008748 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a68      	ldr	r2, [pc, #416]	; (80084e8 <HAL_DMA_Start_IT+0x1f4>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d04a      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a66      	ldr	r2, [pc, #408]	; (80084ec <HAL_DMA_Start_IT+0x1f8>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d045      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a65      	ldr	r2, [pc, #404]	; (80084f0 <HAL_DMA_Start_IT+0x1fc>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d040      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a63      	ldr	r2, [pc, #396]	; (80084f4 <HAL_DMA_Start_IT+0x200>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d03b      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a62      	ldr	r2, [pc, #392]	; (80084f8 <HAL_DMA_Start_IT+0x204>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d036      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a60      	ldr	r2, [pc, #384]	; (80084fc <HAL_DMA_Start_IT+0x208>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d031      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a5f      	ldr	r2, [pc, #380]	; (8008500 <HAL_DMA_Start_IT+0x20c>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d02c      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a5d      	ldr	r2, [pc, #372]	; (8008504 <HAL_DMA_Start_IT+0x210>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d027      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a5c      	ldr	r2, [pc, #368]	; (8008508 <HAL_DMA_Start_IT+0x214>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d022      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a5a      	ldr	r2, [pc, #360]	; (800850c <HAL_DMA_Start_IT+0x218>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d01d      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a59      	ldr	r2, [pc, #356]	; (8008510 <HAL_DMA_Start_IT+0x21c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d018      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a57      	ldr	r2, [pc, #348]	; (8008514 <HAL_DMA_Start_IT+0x220>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d013      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a56      	ldr	r2, [pc, #344]	; (8008518 <HAL_DMA_Start_IT+0x224>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00e      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a54      	ldr	r2, [pc, #336]	; (800851c <HAL_DMA_Start_IT+0x228>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d009      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a53      	ldr	r2, [pc, #332]	; (8008520 <HAL_DMA_Start_IT+0x22c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d004      	beq.n	80083e2 <HAL_DMA_Start_IT+0xee>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a51      	ldr	r2, [pc, #324]	; (8008524 <HAL_DMA_Start_IT+0x230>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d108      	bne.n	80083f4 <HAL_DMA_Start_IT+0x100>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0201 	bic.w	r2, r2, #1
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	e007      	b.n	8008404 <HAL_DMA_Start_IT+0x110>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0201 	bic.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	68b9      	ldr	r1, [r7, #8]
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f001 fe84 	bl	800a118 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a34      	ldr	r2, [pc, #208]	; (80084e8 <HAL_DMA_Start_IT+0x1f4>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d04a      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a33      	ldr	r2, [pc, #204]	; (80084ec <HAL_DMA_Start_IT+0x1f8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d045      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a31      	ldr	r2, [pc, #196]	; (80084f0 <HAL_DMA_Start_IT+0x1fc>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d040      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a30      	ldr	r2, [pc, #192]	; (80084f4 <HAL_DMA_Start_IT+0x200>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d03b      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a2e      	ldr	r2, [pc, #184]	; (80084f8 <HAL_DMA_Start_IT+0x204>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d036      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a2d      	ldr	r2, [pc, #180]	; (80084fc <HAL_DMA_Start_IT+0x208>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d031      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a2b      	ldr	r2, [pc, #172]	; (8008500 <HAL_DMA_Start_IT+0x20c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d02c      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a2a      	ldr	r2, [pc, #168]	; (8008504 <HAL_DMA_Start_IT+0x210>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d027      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a28      	ldr	r2, [pc, #160]	; (8008508 <HAL_DMA_Start_IT+0x214>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d022      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a27      	ldr	r2, [pc, #156]	; (800850c <HAL_DMA_Start_IT+0x218>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d01d      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a25      	ldr	r2, [pc, #148]	; (8008510 <HAL_DMA_Start_IT+0x21c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d018      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a24      	ldr	r2, [pc, #144]	; (8008514 <HAL_DMA_Start_IT+0x220>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d013      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a22      	ldr	r2, [pc, #136]	; (8008518 <HAL_DMA_Start_IT+0x224>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d00e      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a21      	ldr	r2, [pc, #132]	; (800851c <HAL_DMA_Start_IT+0x228>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d009      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a1f      	ldr	r2, [pc, #124]	; (8008520 <HAL_DMA_Start_IT+0x22c>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d004      	beq.n	80084b0 <HAL_DMA_Start_IT+0x1bc>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a1e      	ldr	r2, [pc, #120]	; (8008524 <HAL_DMA_Start_IT+0x230>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d101      	bne.n	80084b4 <HAL_DMA_Start_IT+0x1c0>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e000      	b.n	80084b6 <HAL_DMA_Start_IT+0x1c2>
 80084b4:	2300      	movs	r3, #0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d036      	beq.n	8008528 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f023 021e 	bic.w	r2, r3, #30
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f042 0216 	orr.w	r2, r2, #22
 80084cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d03e      	beq.n	8008554 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0208 	orr.w	r2, r2, #8
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	e035      	b.n	8008554 <HAL_DMA_Start_IT+0x260>
 80084e8:	40020010 	.word	0x40020010
 80084ec:	40020028 	.word	0x40020028
 80084f0:	40020040 	.word	0x40020040
 80084f4:	40020058 	.word	0x40020058
 80084f8:	40020070 	.word	0x40020070
 80084fc:	40020088 	.word	0x40020088
 8008500:	400200a0 	.word	0x400200a0
 8008504:	400200b8 	.word	0x400200b8
 8008508:	40020410 	.word	0x40020410
 800850c:	40020428 	.word	0x40020428
 8008510:	40020440 	.word	0x40020440
 8008514:	40020458 	.word	0x40020458
 8008518:	40020470 	.word	0x40020470
 800851c:	40020488 	.word	0x40020488
 8008520:	400204a0 	.word	0x400204a0
 8008524:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f023 020e 	bic.w	r2, r3, #14
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 020a 	orr.w	r2, r2, #10
 800853a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d007      	beq.n	8008554 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0204 	orr.w	r2, r2, #4
 8008552:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a83      	ldr	r2, [pc, #524]	; (8008768 <HAL_DMA_Start_IT+0x474>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d072      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a82      	ldr	r2, [pc, #520]	; (800876c <HAL_DMA_Start_IT+0x478>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d06d      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a80      	ldr	r2, [pc, #512]	; (8008770 <HAL_DMA_Start_IT+0x47c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d068      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a7f      	ldr	r2, [pc, #508]	; (8008774 <HAL_DMA_Start_IT+0x480>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d063      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a7d      	ldr	r2, [pc, #500]	; (8008778 <HAL_DMA_Start_IT+0x484>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d05e      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a7c      	ldr	r2, [pc, #496]	; (800877c <HAL_DMA_Start_IT+0x488>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d059      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a7a      	ldr	r2, [pc, #488]	; (8008780 <HAL_DMA_Start_IT+0x48c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d054      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a79      	ldr	r2, [pc, #484]	; (8008784 <HAL_DMA_Start_IT+0x490>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d04f      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a77      	ldr	r2, [pc, #476]	; (8008788 <HAL_DMA_Start_IT+0x494>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d04a      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a76      	ldr	r2, [pc, #472]	; (800878c <HAL_DMA_Start_IT+0x498>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d045      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a74      	ldr	r2, [pc, #464]	; (8008790 <HAL_DMA_Start_IT+0x49c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d040      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a73      	ldr	r2, [pc, #460]	; (8008794 <HAL_DMA_Start_IT+0x4a0>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d03b      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a71      	ldr	r2, [pc, #452]	; (8008798 <HAL_DMA_Start_IT+0x4a4>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d036      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a70      	ldr	r2, [pc, #448]	; (800879c <HAL_DMA_Start_IT+0x4a8>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d031      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a6e      	ldr	r2, [pc, #440]	; (80087a0 <HAL_DMA_Start_IT+0x4ac>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d02c      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a6d      	ldr	r2, [pc, #436]	; (80087a4 <HAL_DMA_Start_IT+0x4b0>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d027      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a6b      	ldr	r2, [pc, #428]	; (80087a8 <HAL_DMA_Start_IT+0x4b4>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d022      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a6a      	ldr	r2, [pc, #424]	; (80087ac <HAL_DMA_Start_IT+0x4b8>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d01d      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a68      	ldr	r2, [pc, #416]	; (80087b0 <HAL_DMA_Start_IT+0x4bc>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d018      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a67      	ldr	r2, [pc, #412]	; (80087b4 <HAL_DMA_Start_IT+0x4c0>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d013      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a65      	ldr	r2, [pc, #404]	; (80087b8 <HAL_DMA_Start_IT+0x4c4>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d00e      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a64      	ldr	r2, [pc, #400]	; (80087bc <HAL_DMA_Start_IT+0x4c8>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d009      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a62      	ldr	r2, [pc, #392]	; (80087c0 <HAL_DMA_Start_IT+0x4cc>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d004      	beq.n	8008644 <HAL_DMA_Start_IT+0x350>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a61      	ldr	r2, [pc, #388]	; (80087c4 <HAL_DMA_Start_IT+0x4d0>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d101      	bne.n	8008648 <HAL_DMA_Start_IT+0x354>
 8008644:	2301      	movs	r3, #1
 8008646:	e000      	b.n	800864a <HAL_DMA_Start_IT+0x356>
 8008648:	2300      	movs	r3, #0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d01a      	beq.n	8008684 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d007      	beq.n	800866c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800866a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d007      	beq.n	8008684 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800867e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008682:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a37      	ldr	r2, [pc, #220]	; (8008768 <HAL_DMA_Start_IT+0x474>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d04a      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a36      	ldr	r2, [pc, #216]	; (800876c <HAL_DMA_Start_IT+0x478>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d045      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a34      	ldr	r2, [pc, #208]	; (8008770 <HAL_DMA_Start_IT+0x47c>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d040      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a33      	ldr	r2, [pc, #204]	; (8008774 <HAL_DMA_Start_IT+0x480>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d03b      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a31      	ldr	r2, [pc, #196]	; (8008778 <HAL_DMA_Start_IT+0x484>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d036      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a30      	ldr	r2, [pc, #192]	; (800877c <HAL_DMA_Start_IT+0x488>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d031      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a2e      	ldr	r2, [pc, #184]	; (8008780 <HAL_DMA_Start_IT+0x48c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d02c      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a2d      	ldr	r2, [pc, #180]	; (8008784 <HAL_DMA_Start_IT+0x490>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d027      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a2b      	ldr	r2, [pc, #172]	; (8008788 <HAL_DMA_Start_IT+0x494>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d022      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a2a      	ldr	r2, [pc, #168]	; (800878c <HAL_DMA_Start_IT+0x498>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d01d      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a28      	ldr	r2, [pc, #160]	; (8008790 <HAL_DMA_Start_IT+0x49c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d018      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a27      	ldr	r2, [pc, #156]	; (8008794 <HAL_DMA_Start_IT+0x4a0>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d013      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a25      	ldr	r2, [pc, #148]	; (8008798 <HAL_DMA_Start_IT+0x4a4>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d00e      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a24      	ldr	r2, [pc, #144]	; (800879c <HAL_DMA_Start_IT+0x4a8>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d009      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a22      	ldr	r2, [pc, #136]	; (80087a0 <HAL_DMA_Start_IT+0x4ac>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d004      	beq.n	8008724 <HAL_DMA_Start_IT+0x430>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a21      	ldr	r2, [pc, #132]	; (80087a4 <HAL_DMA_Start_IT+0x4b0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d108      	bne.n	8008736 <HAL_DMA_Start_IT+0x442>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0201 	orr.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	e012      	b.n	800875c <HAL_DMA_Start_IT+0x468>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0201 	orr.w	r2, r2, #1
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	e009      	b.n	800875c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800874e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	40020010 	.word	0x40020010
 800876c:	40020028 	.word	0x40020028
 8008770:	40020040 	.word	0x40020040
 8008774:	40020058 	.word	0x40020058
 8008778:	40020070 	.word	0x40020070
 800877c:	40020088 	.word	0x40020088
 8008780:	400200a0 	.word	0x400200a0
 8008784:	400200b8 	.word	0x400200b8
 8008788:	40020410 	.word	0x40020410
 800878c:	40020428 	.word	0x40020428
 8008790:	40020440 	.word	0x40020440
 8008794:	40020458 	.word	0x40020458
 8008798:	40020470 	.word	0x40020470
 800879c:	40020488 	.word	0x40020488
 80087a0:	400204a0 	.word	0x400204a0
 80087a4:	400204b8 	.word	0x400204b8
 80087a8:	58025408 	.word	0x58025408
 80087ac:	5802541c 	.word	0x5802541c
 80087b0:	58025430 	.word	0x58025430
 80087b4:	58025444 	.word	0x58025444
 80087b8:	58025458 	.word	0x58025458
 80087bc:	5802546c 	.word	0x5802546c
 80087c0:	58025480 	.word	0x58025480
 80087c4:	58025494 	.word	0x58025494

080087c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80087d0:	f7fd f894 	bl	80058fc <HAL_GetTick>
 80087d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e2dc      	b.n	8008d9a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d008      	beq.n	80087fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2280      	movs	r2, #128	; 0x80
 80087f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e2cd      	b.n	8008d9a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a76      	ldr	r2, [pc, #472]	; (80089dc <HAL_DMA_Abort+0x214>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d04a      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a74      	ldr	r2, [pc, #464]	; (80089e0 <HAL_DMA_Abort+0x218>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d045      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a73      	ldr	r2, [pc, #460]	; (80089e4 <HAL_DMA_Abort+0x21c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d040      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a71      	ldr	r2, [pc, #452]	; (80089e8 <HAL_DMA_Abort+0x220>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d03b      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a70      	ldr	r2, [pc, #448]	; (80089ec <HAL_DMA_Abort+0x224>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d036      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a6e      	ldr	r2, [pc, #440]	; (80089f0 <HAL_DMA_Abort+0x228>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d031      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a6d      	ldr	r2, [pc, #436]	; (80089f4 <HAL_DMA_Abort+0x22c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d02c      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a6b      	ldr	r2, [pc, #428]	; (80089f8 <HAL_DMA_Abort+0x230>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d027      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a6a      	ldr	r2, [pc, #424]	; (80089fc <HAL_DMA_Abort+0x234>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d022      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a68      	ldr	r2, [pc, #416]	; (8008a00 <HAL_DMA_Abort+0x238>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d01d      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a67      	ldr	r2, [pc, #412]	; (8008a04 <HAL_DMA_Abort+0x23c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d018      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a65      	ldr	r2, [pc, #404]	; (8008a08 <HAL_DMA_Abort+0x240>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d013      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a64      	ldr	r2, [pc, #400]	; (8008a0c <HAL_DMA_Abort+0x244>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d00e      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a62      	ldr	r2, [pc, #392]	; (8008a10 <HAL_DMA_Abort+0x248>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d009      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a61      	ldr	r2, [pc, #388]	; (8008a14 <HAL_DMA_Abort+0x24c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d004      	beq.n	800889e <HAL_DMA_Abort+0xd6>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a5f      	ldr	r2, [pc, #380]	; (8008a18 <HAL_DMA_Abort+0x250>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d101      	bne.n	80088a2 <HAL_DMA_Abort+0xda>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <HAL_DMA_Abort+0xdc>
 80088a2:	2300      	movs	r3, #0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d013      	beq.n	80088d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 021e 	bic.w	r2, r2, #30
 80088b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	695a      	ldr	r2, [r3, #20]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	617b      	str	r3, [r7, #20]
 80088ce:	e00a      	b.n	80088e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 020e 	bic.w	r2, r2, #14
 80088de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a3c      	ldr	r2, [pc, #240]	; (80089dc <HAL_DMA_Abort+0x214>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d072      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a3a      	ldr	r2, [pc, #232]	; (80089e0 <HAL_DMA_Abort+0x218>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d06d      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a39      	ldr	r2, [pc, #228]	; (80089e4 <HAL_DMA_Abort+0x21c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d068      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a37      	ldr	r2, [pc, #220]	; (80089e8 <HAL_DMA_Abort+0x220>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d063      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a36      	ldr	r2, [pc, #216]	; (80089ec <HAL_DMA_Abort+0x224>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d05e      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a34      	ldr	r2, [pc, #208]	; (80089f0 <HAL_DMA_Abort+0x228>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d059      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a33      	ldr	r2, [pc, #204]	; (80089f4 <HAL_DMA_Abort+0x22c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d054      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a31      	ldr	r2, [pc, #196]	; (80089f8 <HAL_DMA_Abort+0x230>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d04f      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a30      	ldr	r2, [pc, #192]	; (80089fc <HAL_DMA_Abort+0x234>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d04a      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a2e      	ldr	r2, [pc, #184]	; (8008a00 <HAL_DMA_Abort+0x238>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d045      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a2d      	ldr	r2, [pc, #180]	; (8008a04 <HAL_DMA_Abort+0x23c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d040      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a2b      	ldr	r2, [pc, #172]	; (8008a08 <HAL_DMA_Abort+0x240>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d03b      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a2a      	ldr	r2, [pc, #168]	; (8008a0c <HAL_DMA_Abort+0x244>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d036      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a28      	ldr	r2, [pc, #160]	; (8008a10 <HAL_DMA_Abort+0x248>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d031      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a27      	ldr	r2, [pc, #156]	; (8008a14 <HAL_DMA_Abort+0x24c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d02c      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <HAL_DMA_Abort+0x250>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d027      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a24      	ldr	r2, [pc, #144]	; (8008a1c <HAL_DMA_Abort+0x254>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d022      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <HAL_DMA_Abort+0x258>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d01d      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a21      	ldr	r2, [pc, #132]	; (8008a24 <HAL_DMA_Abort+0x25c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d018      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <HAL_DMA_Abort+0x260>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d013      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a1e      	ldr	r2, [pc, #120]	; (8008a2c <HAL_DMA_Abort+0x264>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00e      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a1c      	ldr	r2, [pc, #112]	; (8008a30 <HAL_DMA_Abort+0x268>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d009      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a1b      	ldr	r2, [pc, #108]	; (8008a34 <HAL_DMA_Abort+0x26c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d004      	beq.n	80089d6 <HAL_DMA_Abort+0x20e>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a19      	ldr	r2, [pc, #100]	; (8008a38 <HAL_DMA_Abort+0x270>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d132      	bne.n	8008a3c <HAL_DMA_Abort+0x274>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e031      	b.n	8008a3e <HAL_DMA_Abort+0x276>
 80089da:	bf00      	nop
 80089dc:	40020010 	.word	0x40020010
 80089e0:	40020028 	.word	0x40020028
 80089e4:	40020040 	.word	0x40020040
 80089e8:	40020058 	.word	0x40020058
 80089ec:	40020070 	.word	0x40020070
 80089f0:	40020088 	.word	0x40020088
 80089f4:	400200a0 	.word	0x400200a0
 80089f8:	400200b8 	.word	0x400200b8
 80089fc:	40020410 	.word	0x40020410
 8008a00:	40020428 	.word	0x40020428
 8008a04:	40020440 	.word	0x40020440
 8008a08:	40020458 	.word	0x40020458
 8008a0c:	40020470 	.word	0x40020470
 8008a10:	40020488 	.word	0x40020488
 8008a14:	400204a0 	.word	0x400204a0
 8008a18:	400204b8 	.word	0x400204b8
 8008a1c:	58025408 	.word	0x58025408
 8008a20:	5802541c 	.word	0x5802541c
 8008a24:	58025430 	.word	0x58025430
 8008a28:	58025444 	.word	0x58025444
 8008a2c:	58025458 	.word	0x58025458
 8008a30:	5802546c 	.word	0x5802546c
 8008a34:	58025480 	.word	0x58025480
 8008a38:	58025494 	.word	0x58025494
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d007      	beq.n	8008a52 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a50:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a6d      	ldr	r2, [pc, #436]	; (8008c0c <HAL_DMA_Abort+0x444>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d04a      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a6b      	ldr	r2, [pc, #428]	; (8008c10 <HAL_DMA_Abort+0x448>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d045      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a6a      	ldr	r2, [pc, #424]	; (8008c14 <HAL_DMA_Abort+0x44c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d040      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a68      	ldr	r2, [pc, #416]	; (8008c18 <HAL_DMA_Abort+0x450>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d03b      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a67      	ldr	r2, [pc, #412]	; (8008c1c <HAL_DMA_Abort+0x454>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d036      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a65      	ldr	r2, [pc, #404]	; (8008c20 <HAL_DMA_Abort+0x458>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d031      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a64      	ldr	r2, [pc, #400]	; (8008c24 <HAL_DMA_Abort+0x45c>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d02c      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a62      	ldr	r2, [pc, #392]	; (8008c28 <HAL_DMA_Abort+0x460>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d027      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a61      	ldr	r2, [pc, #388]	; (8008c2c <HAL_DMA_Abort+0x464>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d022      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a5f      	ldr	r2, [pc, #380]	; (8008c30 <HAL_DMA_Abort+0x468>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d01d      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a5e      	ldr	r2, [pc, #376]	; (8008c34 <HAL_DMA_Abort+0x46c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d018      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a5c      	ldr	r2, [pc, #368]	; (8008c38 <HAL_DMA_Abort+0x470>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d013      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a5b      	ldr	r2, [pc, #364]	; (8008c3c <HAL_DMA_Abort+0x474>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00e      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a59      	ldr	r2, [pc, #356]	; (8008c40 <HAL_DMA_Abort+0x478>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d009      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a58      	ldr	r2, [pc, #352]	; (8008c44 <HAL_DMA_Abort+0x47c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d004      	beq.n	8008af2 <HAL_DMA_Abort+0x32a>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a56      	ldr	r2, [pc, #344]	; (8008c48 <HAL_DMA_Abort+0x480>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d108      	bne.n	8008b04 <HAL_DMA_Abort+0x33c>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0201 	bic.w	r2, r2, #1
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	e007      	b.n	8008b14 <HAL_DMA_Abort+0x34c>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0201 	bic.w	r2, r2, #1
 8008b12:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008b14:	e013      	b.n	8008b3e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008b16:	f7fc fef1 	bl	80058fc <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b05      	cmp	r3, #5
 8008b22:	d90c      	bls.n	8008b3e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2203      	movs	r2, #3
 8008b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e12d      	b.n	8008d9a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e5      	bne.n	8008b16 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a2f      	ldr	r2, [pc, #188]	; (8008c0c <HAL_DMA_Abort+0x444>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d04a      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a2d      	ldr	r2, [pc, #180]	; (8008c10 <HAL_DMA_Abort+0x448>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d045      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a2c      	ldr	r2, [pc, #176]	; (8008c14 <HAL_DMA_Abort+0x44c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d040      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a2a      	ldr	r2, [pc, #168]	; (8008c18 <HAL_DMA_Abort+0x450>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d03b      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a29      	ldr	r2, [pc, #164]	; (8008c1c <HAL_DMA_Abort+0x454>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d036      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a27      	ldr	r2, [pc, #156]	; (8008c20 <HAL_DMA_Abort+0x458>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d031      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a26      	ldr	r2, [pc, #152]	; (8008c24 <HAL_DMA_Abort+0x45c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d02c      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a24      	ldr	r2, [pc, #144]	; (8008c28 <HAL_DMA_Abort+0x460>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d027      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a23      	ldr	r2, [pc, #140]	; (8008c2c <HAL_DMA_Abort+0x464>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d022      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a21      	ldr	r2, [pc, #132]	; (8008c30 <HAL_DMA_Abort+0x468>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d01d      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a20      	ldr	r2, [pc, #128]	; (8008c34 <HAL_DMA_Abort+0x46c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d018      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a1e      	ldr	r2, [pc, #120]	; (8008c38 <HAL_DMA_Abort+0x470>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d013      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a1d      	ldr	r2, [pc, #116]	; (8008c3c <HAL_DMA_Abort+0x474>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00e      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a1b      	ldr	r2, [pc, #108]	; (8008c40 <HAL_DMA_Abort+0x478>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d009      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a1a      	ldr	r2, [pc, #104]	; (8008c44 <HAL_DMA_Abort+0x47c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d004      	beq.n	8008bea <HAL_DMA_Abort+0x422>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <HAL_DMA_Abort+0x480>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d101      	bne.n	8008bee <HAL_DMA_Abort+0x426>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <HAL_DMA_Abort+0x428>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d02b      	beq.n	8008c4c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bfe:	f003 031f 	and.w	r3, r3, #31
 8008c02:	223f      	movs	r2, #63	; 0x3f
 8008c04:	409a      	lsls	r2, r3
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	609a      	str	r2, [r3, #8]
 8008c0a:	e02a      	b.n	8008c62 <HAL_DMA_Abort+0x49a>
 8008c0c:	40020010 	.word	0x40020010
 8008c10:	40020028 	.word	0x40020028
 8008c14:	40020040 	.word	0x40020040
 8008c18:	40020058 	.word	0x40020058
 8008c1c:	40020070 	.word	0x40020070
 8008c20:	40020088 	.word	0x40020088
 8008c24:	400200a0 	.word	0x400200a0
 8008c28:	400200b8 	.word	0x400200b8
 8008c2c:	40020410 	.word	0x40020410
 8008c30:	40020428 	.word	0x40020428
 8008c34:	40020440 	.word	0x40020440
 8008c38:	40020458 	.word	0x40020458
 8008c3c:	40020470 	.word	0x40020470
 8008c40:	40020488 	.word	0x40020488
 8008c44:	400204a0 	.word	0x400204a0
 8008c48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c50:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c56:	f003 031f 	and.w	r3, r3, #31
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	409a      	lsls	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a4f      	ldr	r2, [pc, #316]	; (8008da4 <HAL_DMA_Abort+0x5dc>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d072      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a4d      	ldr	r2, [pc, #308]	; (8008da8 <HAL_DMA_Abort+0x5e0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d06d      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a4c      	ldr	r2, [pc, #304]	; (8008dac <HAL_DMA_Abort+0x5e4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d068      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a4a      	ldr	r2, [pc, #296]	; (8008db0 <HAL_DMA_Abort+0x5e8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d063      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a49      	ldr	r2, [pc, #292]	; (8008db4 <HAL_DMA_Abort+0x5ec>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d05e      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a47      	ldr	r2, [pc, #284]	; (8008db8 <HAL_DMA_Abort+0x5f0>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d059      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a46      	ldr	r2, [pc, #280]	; (8008dbc <HAL_DMA_Abort+0x5f4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d054      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a44      	ldr	r2, [pc, #272]	; (8008dc0 <HAL_DMA_Abort+0x5f8>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d04f      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a43      	ldr	r2, [pc, #268]	; (8008dc4 <HAL_DMA_Abort+0x5fc>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d04a      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a41      	ldr	r2, [pc, #260]	; (8008dc8 <HAL_DMA_Abort+0x600>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d045      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a40      	ldr	r2, [pc, #256]	; (8008dcc <HAL_DMA_Abort+0x604>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d040      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a3e      	ldr	r2, [pc, #248]	; (8008dd0 <HAL_DMA_Abort+0x608>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d03b      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a3d      	ldr	r2, [pc, #244]	; (8008dd4 <HAL_DMA_Abort+0x60c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d036      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a3b      	ldr	r2, [pc, #236]	; (8008dd8 <HAL_DMA_Abort+0x610>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d031      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a3a      	ldr	r2, [pc, #232]	; (8008ddc <HAL_DMA_Abort+0x614>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d02c      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a38      	ldr	r2, [pc, #224]	; (8008de0 <HAL_DMA_Abort+0x618>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d027      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a37      	ldr	r2, [pc, #220]	; (8008de4 <HAL_DMA_Abort+0x61c>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d022      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a35      	ldr	r2, [pc, #212]	; (8008de8 <HAL_DMA_Abort+0x620>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d01d      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a34      	ldr	r2, [pc, #208]	; (8008dec <HAL_DMA_Abort+0x624>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d018      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a32      	ldr	r2, [pc, #200]	; (8008df0 <HAL_DMA_Abort+0x628>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d013      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a31      	ldr	r2, [pc, #196]	; (8008df4 <HAL_DMA_Abort+0x62c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d00e      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a2f      	ldr	r2, [pc, #188]	; (8008df8 <HAL_DMA_Abort+0x630>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d009      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a2e      	ldr	r2, [pc, #184]	; (8008dfc <HAL_DMA_Abort+0x634>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d004      	beq.n	8008d52 <HAL_DMA_Abort+0x58a>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a2c      	ldr	r2, [pc, #176]	; (8008e00 <HAL_DMA_Abort+0x638>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d101      	bne.n	8008d56 <HAL_DMA_Abort+0x58e>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <HAL_DMA_Abort+0x590>
 8008d56:	2300      	movs	r3, #0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d015      	beq.n	8008d88 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008d64:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00c      	beq.n	8008d88 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d7c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008d86:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	40020010 	.word	0x40020010
 8008da8:	40020028 	.word	0x40020028
 8008dac:	40020040 	.word	0x40020040
 8008db0:	40020058 	.word	0x40020058
 8008db4:	40020070 	.word	0x40020070
 8008db8:	40020088 	.word	0x40020088
 8008dbc:	400200a0 	.word	0x400200a0
 8008dc0:	400200b8 	.word	0x400200b8
 8008dc4:	40020410 	.word	0x40020410
 8008dc8:	40020428 	.word	0x40020428
 8008dcc:	40020440 	.word	0x40020440
 8008dd0:	40020458 	.word	0x40020458
 8008dd4:	40020470 	.word	0x40020470
 8008dd8:	40020488 	.word	0x40020488
 8008ddc:	400204a0 	.word	0x400204a0
 8008de0:	400204b8 	.word	0x400204b8
 8008de4:	58025408 	.word	0x58025408
 8008de8:	5802541c 	.word	0x5802541c
 8008dec:	58025430 	.word	0x58025430
 8008df0:	58025444 	.word	0x58025444
 8008df4:	58025458 	.word	0x58025458
 8008df8:	5802546c 	.word	0x5802546c
 8008dfc:	58025480 	.word	0x58025480
 8008e00:	58025494 	.word	0x58025494

08008e04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e237      	b.n	8009286 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d004      	beq.n	8008e2c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2280      	movs	r2, #128	; 0x80
 8008e26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e22c      	b.n	8009286 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a5c      	ldr	r2, [pc, #368]	; (8008fa4 <HAL_DMA_Abort_IT+0x1a0>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d04a      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a5b      	ldr	r2, [pc, #364]	; (8008fa8 <HAL_DMA_Abort_IT+0x1a4>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d045      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a59      	ldr	r2, [pc, #356]	; (8008fac <HAL_DMA_Abort_IT+0x1a8>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d040      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a58      	ldr	r2, [pc, #352]	; (8008fb0 <HAL_DMA_Abort_IT+0x1ac>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d03b      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a56      	ldr	r2, [pc, #344]	; (8008fb4 <HAL_DMA_Abort_IT+0x1b0>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d036      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a55      	ldr	r2, [pc, #340]	; (8008fb8 <HAL_DMA_Abort_IT+0x1b4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d031      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a53      	ldr	r2, [pc, #332]	; (8008fbc <HAL_DMA_Abort_IT+0x1b8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d02c      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a52      	ldr	r2, [pc, #328]	; (8008fc0 <HAL_DMA_Abort_IT+0x1bc>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d027      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a50      	ldr	r2, [pc, #320]	; (8008fc4 <HAL_DMA_Abort_IT+0x1c0>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d022      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a4f      	ldr	r2, [pc, #316]	; (8008fc8 <HAL_DMA_Abort_IT+0x1c4>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d01d      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a4d      	ldr	r2, [pc, #308]	; (8008fcc <HAL_DMA_Abort_IT+0x1c8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d018      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a4c      	ldr	r2, [pc, #304]	; (8008fd0 <HAL_DMA_Abort_IT+0x1cc>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d013      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a4a      	ldr	r2, [pc, #296]	; (8008fd4 <HAL_DMA_Abort_IT+0x1d0>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d00e      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a49      	ldr	r2, [pc, #292]	; (8008fd8 <HAL_DMA_Abort_IT+0x1d4>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d009      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a47      	ldr	r2, [pc, #284]	; (8008fdc <HAL_DMA_Abort_IT+0x1d8>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d004      	beq.n	8008ecc <HAL_DMA_Abort_IT+0xc8>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a46      	ldr	r2, [pc, #280]	; (8008fe0 <HAL_DMA_Abort_IT+0x1dc>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d101      	bne.n	8008ed0 <HAL_DMA_Abort_IT+0xcc>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e000      	b.n	8008ed2 <HAL_DMA_Abort_IT+0xce>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 8086 	beq.w	8008fe4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2204      	movs	r2, #4
 8008edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a2f      	ldr	r2, [pc, #188]	; (8008fa4 <HAL_DMA_Abort_IT+0x1a0>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d04a      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a2e      	ldr	r2, [pc, #184]	; (8008fa8 <HAL_DMA_Abort_IT+0x1a4>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d045      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a2c      	ldr	r2, [pc, #176]	; (8008fac <HAL_DMA_Abort_IT+0x1a8>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d040      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a2b      	ldr	r2, [pc, #172]	; (8008fb0 <HAL_DMA_Abort_IT+0x1ac>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d03b      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a29      	ldr	r2, [pc, #164]	; (8008fb4 <HAL_DMA_Abort_IT+0x1b0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d036      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a28      	ldr	r2, [pc, #160]	; (8008fb8 <HAL_DMA_Abort_IT+0x1b4>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d031      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a26      	ldr	r2, [pc, #152]	; (8008fbc <HAL_DMA_Abort_IT+0x1b8>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d02c      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a25      	ldr	r2, [pc, #148]	; (8008fc0 <HAL_DMA_Abort_IT+0x1bc>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d027      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a23      	ldr	r2, [pc, #140]	; (8008fc4 <HAL_DMA_Abort_IT+0x1c0>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d022      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a22      	ldr	r2, [pc, #136]	; (8008fc8 <HAL_DMA_Abort_IT+0x1c4>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d01d      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a20      	ldr	r2, [pc, #128]	; (8008fcc <HAL_DMA_Abort_IT+0x1c8>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d018      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a1f      	ldr	r2, [pc, #124]	; (8008fd0 <HAL_DMA_Abort_IT+0x1cc>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d013      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a1d      	ldr	r2, [pc, #116]	; (8008fd4 <HAL_DMA_Abort_IT+0x1d0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00e      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a1c      	ldr	r2, [pc, #112]	; (8008fd8 <HAL_DMA_Abort_IT+0x1d4>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d009      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1a      	ldr	r2, [pc, #104]	; (8008fdc <HAL_DMA_Abort_IT+0x1d8>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d004      	beq.n	8008f80 <HAL_DMA_Abort_IT+0x17c>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a19      	ldr	r2, [pc, #100]	; (8008fe0 <HAL_DMA_Abort_IT+0x1dc>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d108      	bne.n	8008f92 <HAL_DMA_Abort_IT+0x18e>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0201 	bic.w	r2, r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	e178      	b.n	8009284 <HAL_DMA_Abort_IT+0x480>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0201 	bic.w	r2, r2, #1
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	e16f      	b.n	8009284 <HAL_DMA_Abort_IT+0x480>
 8008fa4:	40020010 	.word	0x40020010
 8008fa8:	40020028 	.word	0x40020028
 8008fac:	40020040 	.word	0x40020040
 8008fb0:	40020058 	.word	0x40020058
 8008fb4:	40020070 	.word	0x40020070
 8008fb8:	40020088 	.word	0x40020088
 8008fbc:	400200a0 	.word	0x400200a0
 8008fc0:	400200b8 	.word	0x400200b8
 8008fc4:	40020410 	.word	0x40020410
 8008fc8:	40020428 	.word	0x40020428
 8008fcc:	40020440 	.word	0x40020440
 8008fd0:	40020458 	.word	0x40020458
 8008fd4:	40020470 	.word	0x40020470
 8008fd8:	40020488 	.word	0x40020488
 8008fdc:	400204a0 	.word	0x400204a0
 8008fe0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 020e 	bic.w	r2, r2, #14
 8008ff2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a6c      	ldr	r2, [pc, #432]	; (80091ac <HAL_DMA_Abort_IT+0x3a8>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d04a      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a6b      	ldr	r2, [pc, #428]	; (80091b0 <HAL_DMA_Abort_IT+0x3ac>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d045      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a69      	ldr	r2, [pc, #420]	; (80091b4 <HAL_DMA_Abort_IT+0x3b0>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d040      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a68      	ldr	r2, [pc, #416]	; (80091b8 <HAL_DMA_Abort_IT+0x3b4>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d03b      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a66      	ldr	r2, [pc, #408]	; (80091bc <HAL_DMA_Abort_IT+0x3b8>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d036      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a65      	ldr	r2, [pc, #404]	; (80091c0 <HAL_DMA_Abort_IT+0x3bc>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d031      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a63      	ldr	r2, [pc, #396]	; (80091c4 <HAL_DMA_Abort_IT+0x3c0>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d02c      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a62      	ldr	r2, [pc, #392]	; (80091c8 <HAL_DMA_Abort_IT+0x3c4>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d027      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a60      	ldr	r2, [pc, #384]	; (80091cc <HAL_DMA_Abort_IT+0x3c8>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d022      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a5f      	ldr	r2, [pc, #380]	; (80091d0 <HAL_DMA_Abort_IT+0x3cc>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d01d      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a5d      	ldr	r2, [pc, #372]	; (80091d4 <HAL_DMA_Abort_IT+0x3d0>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d018      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a5c      	ldr	r2, [pc, #368]	; (80091d8 <HAL_DMA_Abort_IT+0x3d4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d013      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a5a      	ldr	r2, [pc, #360]	; (80091dc <HAL_DMA_Abort_IT+0x3d8>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00e      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a59      	ldr	r2, [pc, #356]	; (80091e0 <HAL_DMA_Abort_IT+0x3dc>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d009      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a57      	ldr	r2, [pc, #348]	; (80091e4 <HAL_DMA_Abort_IT+0x3e0>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d004      	beq.n	8009094 <HAL_DMA_Abort_IT+0x290>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a56      	ldr	r2, [pc, #344]	; (80091e8 <HAL_DMA_Abort_IT+0x3e4>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d108      	bne.n	80090a6 <HAL_DMA_Abort_IT+0x2a2>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 0201 	bic.w	r2, r2, #1
 80090a2:	601a      	str	r2, [r3, #0]
 80090a4:	e007      	b.n	80090b6 <HAL_DMA_Abort_IT+0x2b2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0201 	bic.w	r2, r2, #1
 80090b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a3c      	ldr	r2, [pc, #240]	; (80091ac <HAL_DMA_Abort_IT+0x3a8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d072      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a3a      	ldr	r2, [pc, #232]	; (80091b0 <HAL_DMA_Abort_IT+0x3ac>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d06d      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a39      	ldr	r2, [pc, #228]	; (80091b4 <HAL_DMA_Abort_IT+0x3b0>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d068      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a37      	ldr	r2, [pc, #220]	; (80091b8 <HAL_DMA_Abort_IT+0x3b4>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d063      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a36      	ldr	r2, [pc, #216]	; (80091bc <HAL_DMA_Abort_IT+0x3b8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d05e      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a34      	ldr	r2, [pc, #208]	; (80091c0 <HAL_DMA_Abort_IT+0x3bc>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d059      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a33      	ldr	r2, [pc, #204]	; (80091c4 <HAL_DMA_Abort_IT+0x3c0>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d054      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a31      	ldr	r2, [pc, #196]	; (80091c8 <HAL_DMA_Abort_IT+0x3c4>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d04f      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a30      	ldr	r2, [pc, #192]	; (80091cc <HAL_DMA_Abort_IT+0x3c8>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d04a      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a2e      	ldr	r2, [pc, #184]	; (80091d0 <HAL_DMA_Abort_IT+0x3cc>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d045      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a2d      	ldr	r2, [pc, #180]	; (80091d4 <HAL_DMA_Abort_IT+0x3d0>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d040      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a2b      	ldr	r2, [pc, #172]	; (80091d8 <HAL_DMA_Abort_IT+0x3d4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d03b      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a2a      	ldr	r2, [pc, #168]	; (80091dc <HAL_DMA_Abort_IT+0x3d8>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d036      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a28      	ldr	r2, [pc, #160]	; (80091e0 <HAL_DMA_Abort_IT+0x3dc>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d031      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a27      	ldr	r2, [pc, #156]	; (80091e4 <HAL_DMA_Abort_IT+0x3e0>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d02c      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a25      	ldr	r2, [pc, #148]	; (80091e8 <HAL_DMA_Abort_IT+0x3e4>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d027      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a24      	ldr	r2, [pc, #144]	; (80091ec <HAL_DMA_Abort_IT+0x3e8>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d022      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a22      	ldr	r2, [pc, #136]	; (80091f0 <HAL_DMA_Abort_IT+0x3ec>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d01d      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a21      	ldr	r2, [pc, #132]	; (80091f4 <HAL_DMA_Abort_IT+0x3f0>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d018      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1f      	ldr	r2, [pc, #124]	; (80091f8 <HAL_DMA_Abort_IT+0x3f4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d013      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a1e      	ldr	r2, [pc, #120]	; (80091fc <HAL_DMA_Abort_IT+0x3f8>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d00e      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a1c      	ldr	r2, [pc, #112]	; (8009200 <HAL_DMA_Abort_IT+0x3fc>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d009      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a1b      	ldr	r2, [pc, #108]	; (8009204 <HAL_DMA_Abort_IT+0x400>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d004      	beq.n	80091a6 <HAL_DMA_Abort_IT+0x3a2>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a19      	ldr	r2, [pc, #100]	; (8009208 <HAL_DMA_Abort_IT+0x404>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d132      	bne.n	800920c <HAL_DMA_Abort_IT+0x408>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e031      	b.n	800920e <HAL_DMA_Abort_IT+0x40a>
 80091aa:	bf00      	nop
 80091ac:	40020010 	.word	0x40020010
 80091b0:	40020028 	.word	0x40020028
 80091b4:	40020040 	.word	0x40020040
 80091b8:	40020058 	.word	0x40020058
 80091bc:	40020070 	.word	0x40020070
 80091c0:	40020088 	.word	0x40020088
 80091c4:	400200a0 	.word	0x400200a0
 80091c8:	400200b8 	.word	0x400200b8
 80091cc:	40020410 	.word	0x40020410
 80091d0:	40020428 	.word	0x40020428
 80091d4:	40020440 	.word	0x40020440
 80091d8:	40020458 	.word	0x40020458
 80091dc:	40020470 	.word	0x40020470
 80091e0:	40020488 	.word	0x40020488
 80091e4:	400204a0 	.word	0x400204a0
 80091e8:	400204b8 	.word	0x400204b8
 80091ec:	58025408 	.word	0x58025408
 80091f0:	5802541c 	.word	0x5802541c
 80091f4:	58025430 	.word	0x58025430
 80091f8:	58025444 	.word	0x58025444
 80091fc:	58025458 	.word	0x58025458
 8009200:	5802546c 	.word	0x5802546c
 8009204:	58025480 	.word	0x58025480
 8009208:	58025494 	.word	0x58025494
 800920c:	2300      	movs	r3, #0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d028      	beq.n	8009264 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800921c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009220:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009226:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800922c:	f003 031f 	and.w	r3, r3, #31
 8009230:	2201      	movs	r2, #1
 8009232:	409a      	lsls	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009240:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00c      	beq.n	8009264 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009258:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009262:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop

08009290 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b08a      	sub	sp, #40	; 0x28
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800929c:	4b67      	ldr	r3, [pc, #412]	; (800943c <HAL_DMA_IRQHandler+0x1ac>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a67      	ldr	r2, [pc, #412]	; (8009440 <HAL_DMA_IRQHandler+0x1b0>)
 80092a2:	fba2 2303 	umull	r2, r3, r2, r3
 80092a6:	0a9b      	lsrs	r3, r3, #10
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a5f      	ldr	r2, [pc, #380]	; (8009444 <HAL_DMA_IRQHandler+0x1b4>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d04a      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a5d      	ldr	r2, [pc, #372]	; (8009448 <HAL_DMA_IRQHandler+0x1b8>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d045      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a5c      	ldr	r2, [pc, #368]	; (800944c <HAL_DMA_IRQHandler+0x1bc>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d040      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a5a      	ldr	r2, [pc, #360]	; (8009450 <HAL_DMA_IRQHandler+0x1c0>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d03b      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a59      	ldr	r2, [pc, #356]	; (8009454 <HAL_DMA_IRQHandler+0x1c4>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d036      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a57      	ldr	r2, [pc, #348]	; (8009458 <HAL_DMA_IRQHandler+0x1c8>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d031      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a56      	ldr	r2, [pc, #344]	; (800945c <HAL_DMA_IRQHandler+0x1cc>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d02c      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a54      	ldr	r2, [pc, #336]	; (8009460 <HAL_DMA_IRQHandler+0x1d0>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d027      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a53      	ldr	r2, [pc, #332]	; (8009464 <HAL_DMA_IRQHandler+0x1d4>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d022      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a51      	ldr	r2, [pc, #324]	; (8009468 <HAL_DMA_IRQHandler+0x1d8>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d01d      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a50      	ldr	r2, [pc, #320]	; (800946c <HAL_DMA_IRQHandler+0x1dc>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d018      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a4e      	ldr	r2, [pc, #312]	; (8009470 <HAL_DMA_IRQHandler+0x1e0>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d013      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a4d      	ldr	r2, [pc, #308]	; (8009474 <HAL_DMA_IRQHandler+0x1e4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d00e      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a4b      	ldr	r2, [pc, #300]	; (8009478 <HAL_DMA_IRQHandler+0x1e8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d009      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a4a      	ldr	r2, [pc, #296]	; (800947c <HAL_DMA_IRQHandler+0x1ec>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d004      	beq.n	8009362 <HAL_DMA_IRQHandler+0xd2>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a48      	ldr	r2, [pc, #288]	; (8009480 <HAL_DMA_IRQHandler+0x1f0>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d101      	bne.n	8009366 <HAL_DMA_IRQHandler+0xd6>
 8009362:	2301      	movs	r3, #1
 8009364:	e000      	b.n	8009368 <HAL_DMA_IRQHandler+0xd8>
 8009366:	2300      	movs	r3, #0
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 842b 	beq.w	8009bc4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009372:	f003 031f 	and.w	r3, r3, #31
 8009376:	2208      	movs	r2, #8
 8009378:	409a      	lsls	r2, r3
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	4013      	ands	r3, r2
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 80a2 	beq.w	80094c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a2e      	ldr	r2, [pc, #184]	; (8009444 <HAL_DMA_IRQHandler+0x1b4>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d04a      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a2d      	ldr	r2, [pc, #180]	; (8009448 <HAL_DMA_IRQHandler+0x1b8>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d045      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a2b      	ldr	r2, [pc, #172]	; (800944c <HAL_DMA_IRQHandler+0x1bc>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d040      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a2a      	ldr	r2, [pc, #168]	; (8009450 <HAL_DMA_IRQHandler+0x1c0>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d03b      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a28      	ldr	r2, [pc, #160]	; (8009454 <HAL_DMA_IRQHandler+0x1c4>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d036      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a27      	ldr	r2, [pc, #156]	; (8009458 <HAL_DMA_IRQHandler+0x1c8>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d031      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a25      	ldr	r2, [pc, #148]	; (800945c <HAL_DMA_IRQHandler+0x1cc>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d02c      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a24      	ldr	r2, [pc, #144]	; (8009460 <HAL_DMA_IRQHandler+0x1d0>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d027      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a22      	ldr	r2, [pc, #136]	; (8009464 <HAL_DMA_IRQHandler+0x1d4>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d022      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a21      	ldr	r2, [pc, #132]	; (8009468 <HAL_DMA_IRQHandler+0x1d8>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d01d      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a1f      	ldr	r2, [pc, #124]	; (800946c <HAL_DMA_IRQHandler+0x1dc>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d018      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a1e      	ldr	r2, [pc, #120]	; (8009470 <HAL_DMA_IRQHandler+0x1e0>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d013      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a1c      	ldr	r2, [pc, #112]	; (8009474 <HAL_DMA_IRQHandler+0x1e4>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d00e      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a1b      	ldr	r2, [pc, #108]	; (8009478 <HAL_DMA_IRQHandler+0x1e8>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d009      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a19      	ldr	r2, [pc, #100]	; (800947c <HAL_DMA_IRQHandler+0x1ec>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d004      	beq.n	8009424 <HAL_DMA_IRQHandler+0x194>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a18      	ldr	r2, [pc, #96]	; (8009480 <HAL_DMA_IRQHandler+0x1f0>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d12f      	bne.n	8009484 <HAL_DMA_IRQHandler+0x1f4>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0304 	and.w	r3, r3, #4
 800942e:	2b00      	cmp	r3, #0
 8009430:	bf14      	ite	ne
 8009432:	2301      	movne	r3, #1
 8009434:	2300      	moveq	r3, #0
 8009436:	b2db      	uxtb	r3, r3
 8009438:	e02e      	b.n	8009498 <HAL_DMA_IRQHandler+0x208>
 800943a:	bf00      	nop
 800943c:	24000090 	.word	0x24000090
 8009440:	1b4e81b5 	.word	0x1b4e81b5
 8009444:	40020010 	.word	0x40020010
 8009448:	40020028 	.word	0x40020028
 800944c:	40020040 	.word	0x40020040
 8009450:	40020058 	.word	0x40020058
 8009454:	40020070 	.word	0x40020070
 8009458:	40020088 	.word	0x40020088
 800945c:	400200a0 	.word	0x400200a0
 8009460:	400200b8 	.word	0x400200b8
 8009464:	40020410 	.word	0x40020410
 8009468:	40020428 	.word	0x40020428
 800946c:	40020440 	.word	0x40020440
 8009470:	40020458 	.word	0x40020458
 8009474:	40020470 	.word	0x40020470
 8009478:	40020488 	.word	0x40020488
 800947c:	400204a0 	.word	0x400204a0
 8009480:	400204b8 	.word	0x400204b8
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0308 	and.w	r3, r3, #8
 800948e:	2b00      	cmp	r3, #0
 8009490:	bf14      	ite	ne
 8009492:	2301      	movne	r3, #1
 8009494:	2300      	moveq	r3, #0
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d015      	beq.n	80094c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0204 	bic.w	r2, r2, #4
 80094aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b0:	f003 031f 	and.w	r3, r3, #31
 80094b4:	2208      	movs	r2, #8
 80094b6:	409a      	lsls	r2, r3
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c0:	f043 0201 	orr.w	r2, r3, #1
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094cc:	f003 031f 	and.w	r3, r3, #31
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	fa22 f303 	lsr.w	r3, r2, r3
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d06e      	beq.n	80095bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a69      	ldr	r2, [pc, #420]	; (8009688 <HAL_DMA_IRQHandler+0x3f8>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d04a      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a67      	ldr	r2, [pc, #412]	; (800968c <HAL_DMA_IRQHandler+0x3fc>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d045      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a66      	ldr	r2, [pc, #408]	; (8009690 <HAL_DMA_IRQHandler+0x400>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d040      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a64      	ldr	r2, [pc, #400]	; (8009694 <HAL_DMA_IRQHandler+0x404>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d03b      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a63      	ldr	r2, [pc, #396]	; (8009698 <HAL_DMA_IRQHandler+0x408>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d036      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a61      	ldr	r2, [pc, #388]	; (800969c <HAL_DMA_IRQHandler+0x40c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d031      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a60      	ldr	r2, [pc, #384]	; (80096a0 <HAL_DMA_IRQHandler+0x410>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d02c      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a5e      	ldr	r2, [pc, #376]	; (80096a4 <HAL_DMA_IRQHandler+0x414>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d027      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a5d      	ldr	r2, [pc, #372]	; (80096a8 <HAL_DMA_IRQHandler+0x418>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d022      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a5b      	ldr	r2, [pc, #364]	; (80096ac <HAL_DMA_IRQHandler+0x41c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d01d      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a5a      	ldr	r2, [pc, #360]	; (80096b0 <HAL_DMA_IRQHandler+0x420>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d018      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a58      	ldr	r2, [pc, #352]	; (80096b4 <HAL_DMA_IRQHandler+0x424>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d013      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a57      	ldr	r2, [pc, #348]	; (80096b8 <HAL_DMA_IRQHandler+0x428>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00e      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a55      	ldr	r2, [pc, #340]	; (80096bc <HAL_DMA_IRQHandler+0x42c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d009      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a54      	ldr	r2, [pc, #336]	; (80096c0 <HAL_DMA_IRQHandler+0x430>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d004      	beq.n	800957e <HAL_DMA_IRQHandler+0x2ee>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a52      	ldr	r2, [pc, #328]	; (80096c4 <HAL_DMA_IRQHandler+0x434>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d10a      	bne.n	8009594 <HAL_DMA_IRQHandler+0x304>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009588:	2b00      	cmp	r3, #0
 800958a:	bf14      	ite	ne
 800958c:	2301      	movne	r3, #1
 800958e:	2300      	moveq	r3, #0
 8009590:	b2db      	uxtb	r3, r3
 8009592:	e003      	b.n	800959c <HAL_DMA_IRQHandler+0x30c>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2300      	movs	r3, #0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00d      	beq.n	80095bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a4:	f003 031f 	and.w	r3, r3, #31
 80095a8:	2201      	movs	r2, #1
 80095aa:	409a      	lsls	r2, r3
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b4:	f043 0202 	orr.w	r2, r3, #2
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095c0:	f003 031f 	and.w	r3, r3, #31
 80095c4:	2204      	movs	r2, #4
 80095c6:	409a      	lsls	r2, r3
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	4013      	ands	r3, r2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 808f 	beq.w	80096f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a2c      	ldr	r2, [pc, #176]	; (8009688 <HAL_DMA_IRQHandler+0x3f8>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d04a      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a2a      	ldr	r2, [pc, #168]	; (800968c <HAL_DMA_IRQHandler+0x3fc>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d045      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a29      	ldr	r2, [pc, #164]	; (8009690 <HAL_DMA_IRQHandler+0x400>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d040      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a27      	ldr	r2, [pc, #156]	; (8009694 <HAL_DMA_IRQHandler+0x404>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d03b      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a26      	ldr	r2, [pc, #152]	; (8009698 <HAL_DMA_IRQHandler+0x408>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d036      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a24      	ldr	r2, [pc, #144]	; (800969c <HAL_DMA_IRQHandler+0x40c>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d031      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a23      	ldr	r2, [pc, #140]	; (80096a0 <HAL_DMA_IRQHandler+0x410>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d02c      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a21      	ldr	r2, [pc, #132]	; (80096a4 <HAL_DMA_IRQHandler+0x414>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d027      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a20      	ldr	r2, [pc, #128]	; (80096a8 <HAL_DMA_IRQHandler+0x418>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d022      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a1e      	ldr	r2, [pc, #120]	; (80096ac <HAL_DMA_IRQHandler+0x41c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d01d      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a1d      	ldr	r2, [pc, #116]	; (80096b0 <HAL_DMA_IRQHandler+0x420>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d018      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1b      	ldr	r2, [pc, #108]	; (80096b4 <HAL_DMA_IRQHandler+0x424>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d013      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a1a      	ldr	r2, [pc, #104]	; (80096b8 <HAL_DMA_IRQHandler+0x428>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d00e      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a18      	ldr	r2, [pc, #96]	; (80096bc <HAL_DMA_IRQHandler+0x42c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d009      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a17      	ldr	r2, [pc, #92]	; (80096c0 <HAL_DMA_IRQHandler+0x430>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d004      	beq.n	8009672 <HAL_DMA_IRQHandler+0x3e2>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a15      	ldr	r2, [pc, #84]	; (80096c4 <HAL_DMA_IRQHandler+0x434>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d12a      	bne.n	80096c8 <HAL_DMA_IRQHandler+0x438>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	bf14      	ite	ne
 8009680:	2301      	movne	r3, #1
 8009682:	2300      	moveq	r3, #0
 8009684:	b2db      	uxtb	r3, r3
 8009686:	e023      	b.n	80096d0 <HAL_DMA_IRQHandler+0x440>
 8009688:	40020010 	.word	0x40020010
 800968c:	40020028 	.word	0x40020028
 8009690:	40020040 	.word	0x40020040
 8009694:	40020058 	.word	0x40020058
 8009698:	40020070 	.word	0x40020070
 800969c:	40020088 	.word	0x40020088
 80096a0:	400200a0 	.word	0x400200a0
 80096a4:	400200b8 	.word	0x400200b8
 80096a8:	40020410 	.word	0x40020410
 80096ac:	40020428 	.word	0x40020428
 80096b0:	40020440 	.word	0x40020440
 80096b4:	40020458 	.word	0x40020458
 80096b8:	40020470 	.word	0x40020470
 80096bc:	40020488 	.word	0x40020488
 80096c0:	400204a0 	.word	0x400204a0
 80096c4:	400204b8 	.word	0x400204b8
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2300      	movs	r3, #0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00d      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	2204      	movs	r2, #4
 80096de:	409a      	lsls	r2, r3
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e8:	f043 0204 	orr.w	r2, r3, #4
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096f4:	f003 031f 	and.w	r3, r3, #31
 80096f8:	2210      	movs	r2, #16
 80096fa:	409a      	lsls	r2, r3
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	4013      	ands	r3, r2
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 80a6 	beq.w	8009852 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a85      	ldr	r2, [pc, #532]	; (8009920 <HAL_DMA_IRQHandler+0x690>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d04a      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a83      	ldr	r2, [pc, #524]	; (8009924 <HAL_DMA_IRQHandler+0x694>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d045      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a82      	ldr	r2, [pc, #520]	; (8009928 <HAL_DMA_IRQHandler+0x698>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d040      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a80      	ldr	r2, [pc, #512]	; (800992c <HAL_DMA_IRQHandler+0x69c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d03b      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a7f      	ldr	r2, [pc, #508]	; (8009930 <HAL_DMA_IRQHandler+0x6a0>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d036      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a7d      	ldr	r2, [pc, #500]	; (8009934 <HAL_DMA_IRQHandler+0x6a4>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d031      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a7c      	ldr	r2, [pc, #496]	; (8009938 <HAL_DMA_IRQHandler+0x6a8>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d02c      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a7a      	ldr	r2, [pc, #488]	; (800993c <HAL_DMA_IRQHandler+0x6ac>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d027      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a79      	ldr	r2, [pc, #484]	; (8009940 <HAL_DMA_IRQHandler+0x6b0>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d022      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a77      	ldr	r2, [pc, #476]	; (8009944 <HAL_DMA_IRQHandler+0x6b4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d01d      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a76      	ldr	r2, [pc, #472]	; (8009948 <HAL_DMA_IRQHandler+0x6b8>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d018      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a74      	ldr	r2, [pc, #464]	; (800994c <HAL_DMA_IRQHandler+0x6bc>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d013      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a73      	ldr	r2, [pc, #460]	; (8009950 <HAL_DMA_IRQHandler+0x6c0>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d00e      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a71      	ldr	r2, [pc, #452]	; (8009954 <HAL_DMA_IRQHandler+0x6c4>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d009      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a70      	ldr	r2, [pc, #448]	; (8009958 <HAL_DMA_IRQHandler+0x6c8>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d004      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x516>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a6e      	ldr	r2, [pc, #440]	; (800995c <HAL_DMA_IRQHandler+0x6cc>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d10a      	bne.n	80097bc <HAL_DMA_IRQHandler+0x52c>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0308 	and.w	r3, r3, #8
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bf14      	ite	ne
 80097b4:	2301      	movne	r3, #1
 80097b6:	2300      	moveq	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	e009      	b.n	80097d0 <HAL_DMA_IRQHandler+0x540>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0304 	and.w	r3, r3, #4
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	bf14      	ite	ne
 80097ca:	2301      	movne	r3, #1
 80097cc:	2300      	moveq	r3, #0
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d03e      	beq.n	8009852 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097d8:	f003 031f 	and.w	r3, r3, #31
 80097dc:	2210      	movs	r2, #16
 80097de:	409a      	lsls	r2, r3
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d018      	beq.n	8009824 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d108      	bne.n	8009812 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009804:	2b00      	cmp	r3, #0
 8009806:	d024      	beq.n	8009852 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
 8009810:	e01f      	b.n	8009852 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009816:	2b00      	cmp	r3, #0
 8009818:	d01b      	beq.n	8009852 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
 8009822:	e016      	b.n	8009852 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800982e:	2b00      	cmp	r3, #0
 8009830:	d107      	bne.n	8009842 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f022 0208 	bic.w	r2, r2, #8
 8009840:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009856:	f003 031f 	and.w	r3, r3, #31
 800985a:	2220      	movs	r2, #32
 800985c:	409a      	lsls	r2, r3
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	4013      	ands	r3, r2
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 8110 	beq.w	8009a88 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a2c      	ldr	r2, [pc, #176]	; (8009920 <HAL_DMA_IRQHandler+0x690>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d04a      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a2b      	ldr	r2, [pc, #172]	; (8009924 <HAL_DMA_IRQHandler+0x694>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d045      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a29      	ldr	r2, [pc, #164]	; (8009928 <HAL_DMA_IRQHandler+0x698>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d040      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a28      	ldr	r2, [pc, #160]	; (800992c <HAL_DMA_IRQHandler+0x69c>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d03b      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a26      	ldr	r2, [pc, #152]	; (8009930 <HAL_DMA_IRQHandler+0x6a0>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d036      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a25      	ldr	r2, [pc, #148]	; (8009934 <HAL_DMA_IRQHandler+0x6a4>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d031      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a23      	ldr	r2, [pc, #140]	; (8009938 <HAL_DMA_IRQHandler+0x6a8>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d02c      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a22      	ldr	r2, [pc, #136]	; (800993c <HAL_DMA_IRQHandler+0x6ac>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d027      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a20      	ldr	r2, [pc, #128]	; (8009940 <HAL_DMA_IRQHandler+0x6b0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d022      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a1f      	ldr	r2, [pc, #124]	; (8009944 <HAL_DMA_IRQHandler+0x6b4>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d01d      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a1d      	ldr	r2, [pc, #116]	; (8009948 <HAL_DMA_IRQHandler+0x6b8>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d018      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a1c      	ldr	r2, [pc, #112]	; (800994c <HAL_DMA_IRQHandler+0x6bc>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d013      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a1a      	ldr	r2, [pc, #104]	; (8009950 <HAL_DMA_IRQHandler+0x6c0>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00e      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a19      	ldr	r2, [pc, #100]	; (8009954 <HAL_DMA_IRQHandler+0x6c4>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d009      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a17      	ldr	r2, [pc, #92]	; (8009958 <HAL_DMA_IRQHandler+0x6c8>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d004      	beq.n	8009908 <HAL_DMA_IRQHandler+0x678>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a16      	ldr	r2, [pc, #88]	; (800995c <HAL_DMA_IRQHandler+0x6cc>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d12b      	bne.n	8009960 <HAL_DMA_IRQHandler+0x6d0>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0310 	and.w	r3, r3, #16
 8009912:	2b00      	cmp	r3, #0
 8009914:	bf14      	ite	ne
 8009916:	2301      	movne	r3, #1
 8009918:	2300      	moveq	r3, #0
 800991a:	b2db      	uxtb	r3, r3
 800991c:	e02a      	b.n	8009974 <HAL_DMA_IRQHandler+0x6e4>
 800991e:	bf00      	nop
 8009920:	40020010 	.word	0x40020010
 8009924:	40020028 	.word	0x40020028
 8009928:	40020040 	.word	0x40020040
 800992c:	40020058 	.word	0x40020058
 8009930:	40020070 	.word	0x40020070
 8009934:	40020088 	.word	0x40020088
 8009938:	400200a0 	.word	0x400200a0
 800993c:	400200b8 	.word	0x400200b8
 8009940:	40020410 	.word	0x40020410
 8009944:	40020428 	.word	0x40020428
 8009948:	40020440 	.word	0x40020440
 800994c:	40020458 	.word	0x40020458
 8009950:	40020470 	.word	0x40020470
 8009954:	40020488 	.word	0x40020488
 8009958:	400204a0 	.word	0x400204a0
 800995c:	400204b8 	.word	0x400204b8
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 0302 	and.w	r3, r3, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	bf14      	ite	ne
 800996e:	2301      	movne	r3, #1
 8009970:	2300      	moveq	r3, #0
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 8087 	beq.w	8009a88 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800997e:	f003 031f 	and.w	r3, r3, #31
 8009982:	2220      	movs	r2, #32
 8009984:	409a      	lsls	r2, r3
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b04      	cmp	r3, #4
 8009994:	d139      	bne.n	8009a0a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f022 0216 	bic.w	r2, r2, #22
 80099a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	695a      	ldr	r2, [r3, #20]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d103      	bne.n	80099c6 <HAL_DMA_IRQHandler+0x736>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d007      	beq.n	80099d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f022 0208 	bic.w	r2, r2, #8
 80099d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099da:	f003 031f 	and.w	r3, r3, #31
 80099de:	223f      	movs	r2, #63	; 0x3f
 80099e0:	409a      	lsls	r2, r3
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 834a 	beq.w	800a094 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3
          }
          return;
 8009a08:	e344      	b.n	800a094 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d018      	beq.n	8009a4a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d108      	bne.n	8009a38 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d02c      	beq.n	8009a88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
 8009a36:	e027      	b.n	8009a88 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d023      	beq.n	8009a88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	4798      	blx	r3
 8009a48:	e01e      	b.n	8009a88 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10f      	bne.n	8009a78 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 0210 	bic.w	r2, r2, #16
 8009a66:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 8306 	beq.w	800a09e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8088 	beq.w	8009bb0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2204      	movs	r2, #4
 8009aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a7a      	ldr	r2, [pc, #488]	; (8009c98 <HAL_DMA_IRQHandler+0xa08>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d04a      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a79      	ldr	r2, [pc, #484]	; (8009c9c <HAL_DMA_IRQHandler+0xa0c>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d045      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a77      	ldr	r2, [pc, #476]	; (8009ca0 <HAL_DMA_IRQHandler+0xa10>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d040      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a76      	ldr	r2, [pc, #472]	; (8009ca4 <HAL_DMA_IRQHandler+0xa14>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d03b      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a74      	ldr	r2, [pc, #464]	; (8009ca8 <HAL_DMA_IRQHandler+0xa18>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d036      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a73      	ldr	r2, [pc, #460]	; (8009cac <HAL_DMA_IRQHandler+0xa1c>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d031      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a71      	ldr	r2, [pc, #452]	; (8009cb0 <HAL_DMA_IRQHandler+0xa20>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d02c      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a70      	ldr	r2, [pc, #448]	; (8009cb4 <HAL_DMA_IRQHandler+0xa24>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d027      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a6e      	ldr	r2, [pc, #440]	; (8009cb8 <HAL_DMA_IRQHandler+0xa28>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d022      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a6d      	ldr	r2, [pc, #436]	; (8009cbc <HAL_DMA_IRQHandler+0xa2c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d01d      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a6b      	ldr	r2, [pc, #428]	; (8009cc0 <HAL_DMA_IRQHandler+0xa30>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d018      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a6a      	ldr	r2, [pc, #424]	; (8009cc4 <HAL_DMA_IRQHandler+0xa34>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d013      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a68      	ldr	r2, [pc, #416]	; (8009cc8 <HAL_DMA_IRQHandler+0xa38>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d00e      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a67      	ldr	r2, [pc, #412]	; (8009ccc <HAL_DMA_IRQHandler+0xa3c>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d009      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a65      	ldr	r2, [pc, #404]	; (8009cd0 <HAL_DMA_IRQHandler+0xa40>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d004      	beq.n	8009b48 <HAL_DMA_IRQHandler+0x8b8>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a64      	ldr	r2, [pc, #400]	; (8009cd4 <HAL_DMA_IRQHandler+0xa44>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d108      	bne.n	8009b5a <HAL_DMA_IRQHandler+0x8ca>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f022 0201 	bic.w	r2, r2, #1
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	e007      	b.n	8009b6a <HAL_DMA_IRQHandler+0x8da>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 0201 	bic.w	r2, r2, #1
 8009b68:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d307      	bcc.n	8009b86 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1f2      	bne.n	8009b6a <HAL_DMA_IRQHandler+0x8da>
 8009b84:	e000      	b.n	8009b88 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009b86:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d004      	beq.n	8009ba0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2203      	movs	r2, #3
 8009b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009b9e:	e003      	b.n	8009ba8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 8272 	beq.w	800a09e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	4798      	blx	r3
 8009bc2:	e26c      	b.n	800a09e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a43      	ldr	r2, [pc, #268]	; (8009cd8 <HAL_DMA_IRQHandler+0xa48>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d022      	beq.n	8009c14 <HAL_DMA_IRQHandler+0x984>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a42      	ldr	r2, [pc, #264]	; (8009cdc <HAL_DMA_IRQHandler+0xa4c>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d01d      	beq.n	8009c14 <HAL_DMA_IRQHandler+0x984>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a40      	ldr	r2, [pc, #256]	; (8009ce0 <HAL_DMA_IRQHandler+0xa50>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d018      	beq.n	8009c14 <HAL_DMA_IRQHandler+0x984>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a3f      	ldr	r2, [pc, #252]	; (8009ce4 <HAL_DMA_IRQHandler+0xa54>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d013      	beq.n	8009c14 <HAL_DMA_IRQHandler+0x984>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a3d      	ldr	r2, [pc, #244]	; (8009ce8 <HAL_DMA_IRQHandler+0xa58>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d00e      	beq.n	8009c14 <HAL_DMA_IRQHandler+0x984>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a3c      	ldr	r2, [pc, #240]	; (8009cec <HAL_DMA_IRQHandler+0xa5c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d009      	beq.n	8009c14 <HAL_DMA_IRQHandler+0x984>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a3a      	ldr	r2, [pc, #232]	; (8009cf0 <HAL_DMA_IRQHandler+0xa60>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d004      	beq.n	8009c14 <HAL_DMA_IRQHandler+0x984>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a39      	ldr	r2, [pc, #228]	; (8009cf4 <HAL_DMA_IRQHandler+0xa64>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d101      	bne.n	8009c18 <HAL_DMA_IRQHandler+0x988>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e000      	b.n	8009c1a <HAL_DMA_IRQHandler+0x98a>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f000 823f 	beq.w	800a09e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c2c:	f003 031f 	and.w	r3, r3, #31
 8009c30:	2204      	movs	r2, #4
 8009c32:	409a      	lsls	r2, r3
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	4013      	ands	r3, r2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 80cd 	beq.w	8009dd8 <HAL_DMA_IRQHandler+0xb48>
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	f003 0304 	and.w	r3, r3, #4
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 80c7 	beq.w	8009dd8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c4e:	f003 031f 	and.w	r3, r3, #31
 8009c52:	2204      	movs	r2, #4
 8009c54:	409a      	lsls	r2, r3
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d049      	beq.n	8009cf8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d109      	bne.n	8009c82 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 8210 	beq.w	800a098 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c80:	e20a      	b.n	800a098 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 8206 	beq.w	800a098 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009c94:	e200      	b.n	800a098 <HAL_DMA_IRQHandler+0xe08>
 8009c96:	bf00      	nop
 8009c98:	40020010 	.word	0x40020010
 8009c9c:	40020028 	.word	0x40020028
 8009ca0:	40020040 	.word	0x40020040
 8009ca4:	40020058 	.word	0x40020058
 8009ca8:	40020070 	.word	0x40020070
 8009cac:	40020088 	.word	0x40020088
 8009cb0:	400200a0 	.word	0x400200a0
 8009cb4:	400200b8 	.word	0x400200b8
 8009cb8:	40020410 	.word	0x40020410
 8009cbc:	40020428 	.word	0x40020428
 8009cc0:	40020440 	.word	0x40020440
 8009cc4:	40020458 	.word	0x40020458
 8009cc8:	40020470 	.word	0x40020470
 8009ccc:	40020488 	.word	0x40020488
 8009cd0:	400204a0 	.word	0x400204a0
 8009cd4:	400204b8 	.word	0x400204b8
 8009cd8:	58025408 	.word	0x58025408
 8009cdc:	5802541c 	.word	0x5802541c
 8009ce0:	58025430 	.word	0x58025430
 8009ce4:	58025444 	.word	0x58025444
 8009ce8:	58025458 	.word	0x58025458
 8009cec:	5802546c 	.word	0x5802546c
 8009cf0:	58025480 	.word	0x58025480
 8009cf4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d160      	bne.n	8009dc4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a7f      	ldr	r2, [pc, #508]	; (8009f04 <HAL_DMA_IRQHandler+0xc74>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d04a      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a7d      	ldr	r2, [pc, #500]	; (8009f08 <HAL_DMA_IRQHandler+0xc78>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d045      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a7c      	ldr	r2, [pc, #496]	; (8009f0c <HAL_DMA_IRQHandler+0xc7c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d040      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a7a      	ldr	r2, [pc, #488]	; (8009f10 <HAL_DMA_IRQHandler+0xc80>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d03b      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a79      	ldr	r2, [pc, #484]	; (8009f14 <HAL_DMA_IRQHandler+0xc84>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d036      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a77      	ldr	r2, [pc, #476]	; (8009f18 <HAL_DMA_IRQHandler+0xc88>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d031      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a76      	ldr	r2, [pc, #472]	; (8009f1c <HAL_DMA_IRQHandler+0xc8c>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d02c      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a74      	ldr	r2, [pc, #464]	; (8009f20 <HAL_DMA_IRQHandler+0xc90>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d027      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a73      	ldr	r2, [pc, #460]	; (8009f24 <HAL_DMA_IRQHandler+0xc94>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d022      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a71      	ldr	r2, [pc, #452]	; (8009f28 <HAL_DMA_IRQHandler+0xc98>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d01d      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a70      	ldr	r2, [pc, #448]	; (8009f2c <HAL_DMA_IRQHandler+0xc9c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d018      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a6e      	ldr	r2, [pc, #440]	; (8009f30 <HAL_DMA_IRQHandler+0xca0>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d013      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a6d      	ldr	r2, [pc, #436]	; (8009f34 <HAL_DMA_IRQHandler+0xca4>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00e      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a6b      	ldr	r2, [pc, #428]	; (8009f38 <HAL_DMA_IRQHandler+0xca8>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d009      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a6a      	ldr	r2, [pc, #424]	; (8009f3c <HAL_DMA_IRQHandler+0xcac>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <HAL_DMA_IRQHandler+0xb12>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a68      	ldr	r2, [pc, #416]	; (8009f40 <HAL_DMA_IRQHandler+0xcb0>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d108      	bne.n	8009db4 <HAL_DMA_IRQHandler+0xb24>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f022 0208 	bic.w	r2, r2, #8
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	e007      	b.n	8009dc4 <HAL_DMA_IRQHandler+0xb34>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0204 	bic.w	r2, r2, #4
 8009dc2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 8165 	beq.w	800a098 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009dd6:	e15f      	b.n	800a098 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ddc:	f003 031f 	and.w	r3, r3, #31
 8009de0:	2202      	movs	r2, #2
 8009de2:	409a      	lsls	r2, r3
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	4013      	ands	r3, r2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80c5 	beq.w	8009f78 <HAL_DMA_IRQHandler+0xce8>
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 80bf 	beq.w	8009f78 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dfe:	f003 031f 	and.w	r3, r3, #31
 8009e02:	2202      	movs	r2, #2
 8009e04:	409a      	lsls	r2, r3
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d018      	beq.n	8009e46 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d109      	bne.n	8009e32 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 813a 	beq.w	800a09c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e30:	e134      	b.n	800a09c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f000 8130 	beq.w	800a09c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e44:	e12a      	b.n	800a09c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f003 0320 	and.w	r3, r3, #32
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f040 8089 	bne.w	8009f64 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a2b      	ldr	r2, [pc, #172]	; (8009f04 <HAL_DMA_IRQHandler+0xc74>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d04a      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a29      	ldr	r2, [pc, #164]	; (8009f08 <HAL_DMA_IRQHandler+0xc78>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d045      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a28      	ldr	r2, [pc, #160]	; (8009f0c <HAL_DMA_IRQHandler+0xc7c>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d040      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a26      	ldr	r2, [pc, #152]	; (8009f10 <HAL_DMA_IRQHandler+0xc80>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d03b      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a25      	ldr	r2, [pc, #148]	; (8009f14 <HAL_DMA_IRQHandler+0xc84>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d036      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a23      	ldr	r2, [pc, #140]	; (8009f18 <HAL_DMA_IRQHandler+0xc88>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d031      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a22      	ldr	r2, [pc, #136]	; (8009f1c <HAL_DMA_IRQHandler+0xc8c>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d02c      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a20      	ldr	r2, [pc, #128]	; (8009f20 <HAL_DMA_IRQHandler+0xc90>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d027      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a1f      	ldr	r2, [pc, #124]	; (8009f24 <HAL_DMA_IRQHandler+0xc94>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d022      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a1d      	ldr	r2, [pc, #116]	; (8009f28 <HAL_DMA_IRQHandler+0xc98>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d01d      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a1c      	ldr	r2, [pc, #112]	; (8009f2c <HAL_DMA_IRQHandler+0xc9c>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d018      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a1a      	ldr	r2, [pc, #104]	; (8009f30 <HAL_DMA_IRQHandler+0xca0>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d013      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a19      	ldr	r2, [pc, #100]	; (8009f34 <HAL_DMA_IRQHandler+0xca4>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d00e      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a17      	ldr	r2, [pc, #92]	; (8009f38 <HAL_DMA_IRQHandler+0xca8>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d009      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a16      	ldr	r2, [pc, #88]	; (8009f3c <HAL_DMA_IRQHandler+0xcac>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d004      	beq.n	8009ef2 <HAL_DMA_IRQHandler+0xc62>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a14      	ldr	r2, [pc, #80]	; (8009f40 <HAL_DMA_IRQHandler+0xcb0>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d128      	bne.n	8009f44 <HAL_DMA_IRQHandler+0xcb4>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f022 0214 	bic.w	r2, r2, #20
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	e027      	b.n	8009f54 <HAL_DMA_IRQHandler+0xcc4>
 8009f04:	40020010 	.word	0x40020010
 8009f08:	40020028 	.word	0x40020028
 8009f0c:	40020040 	.word	0x40020040
 8009f10:	40020058 	.word	0x40020058
 8009f14:	40020070 	.word	0x40020070
 8009f18:	40020088 	.word	0x40020088
 8009f1c:	400200a0 	.word	0x400200a0
 8009f20:	400200b8 	.word	0x400200b8
 8009f24:	40020410 	.word	0x40020410
 8009f28:	40020428 	.word	0x40020428
 8009f2c:	40020440 	.word	0x40020440
 8009f30:	40020458 	.word	0x40020458
 8009f34:	40020470 	.word	0x40020470
 8009f38:	40020488 	.word	0x40020488
 8009f3c:	400204a0 	.word	0x400204a0
 8009f40:	400204b8 	.word	0x400204b8
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f022 020a 	bic.w	r2, r2, #10
 8009f52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 8097 	beq.w	800a09c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f76:	e091      	b.n	800a09c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f7c:	f003 031f 	and.w	r3, r3, #31
 8009f80:	2208      	movs	r2, #8
 8009f82:	409a      	lsls	r2, r3
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	4013      	ands	r3, r2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 8088 	beq.w	800a09e <HAL_DMA_IRQHandler+0xe0e>
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f003 0308 	and.w	r3, r3, #8
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 8082 	beq.w	800a09e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a41      	ldr	r2, [pc, #260]	; (800a0a4 <HAL_DMA_IRQHandler+0xe14>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d04a      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a3f      	ldr	r2, [pc, #252]	; (800a0a8 <HAL_DMA_IRQHandler+0xe18>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d045      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a3e      	ldr	r2, [pc, #248]	; (800a0ac <HAL_DMA_IRQHandler+0xe1c>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d040      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a3c      	ldr	r2, [pc, #240]	; (800a0b0 <HAL_DMA_IRQHandler+0xe20>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d03b      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a3b      	ldr	r2, [pc, #236]	; (800a0b4 <HAL_DMA_IRQHandler+0xe24>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d036      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a39      	ldr	r2, [pc, #228]	; (800a0b8 <HAL_DMA_IRQHandler+0xe28>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d031      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a38      	ldr	r2, [pc, #224]	; (800a0bc <HAL_DMA_IRQHandler+0xe2c>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d02c      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a36      	ldr	r2, [pc, #216]	; (800a0c0 <HAL_DMA_IRQHandler+0xe30>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d027      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a35      	ldr	r2, [pc, #212]	; (800a0c4 <HAL_DMA_IRQHandler+0xe34>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d022      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a33      	ldr	r2, [pc, #204]	; (800a0c8 <HAL_DMA_IRQHandler+0xe38>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d01d      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a32      	ldr	r2, [pc, #200]	; (800a0cc <HAL_DMA_IRQHandler+0xe3c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d018      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a30      	ldr	r2, [pc, #192]	; (800a0d0 <HAL_DMA_IRQHandler+0xe40>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d013      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a2f      	ldr	r2, [pc, #188]	; (800a0d4 <HAL_DMA_IRQHandler+0xe44>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d00e      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a2d      	ldr	r2, [pc, #180]	; (800a0d8 <HAL_DMA_IRQHandler+0xe48>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d009      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a2c      	ldr	r2, [pc, #176]	; (800a0dc <HAL_DMA_IRQHandler+0xe4c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d004      	beq.n	800a03a <HAL_DMA_IRQHandler+0xdaa>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a2a      	ldr	r2, [pc, #168]	; (800a0e0 <HAL_DMA_IRQHandler+0xe50>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d108      	bne.n	800a04c <HAL_DMA_IRQHandler+0xdbc>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 021c 	bic.w	r2, r2, #28
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	e007      	b.n	800a05c <HAL_DMA_IRQHandler+0xdcc>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 020e 	bic.w	r2, r2, #14
 800a05a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a060:	f003 031f 	and.w	r3, r3, #31
 800a064:	2201      	movs	r2, #1
 800a066:	409a      	lsls	r2, r3
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d009      	beq.n	800a09e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	4798      	blx	r3
 800a092:	e004      	b.n	800a09e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a094:	bf00      	nop
 800a096:	e002      	b.n	800a09e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a098:	bf00      	nop
 800a09a:	e000      	b.n	800a09e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a09c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a09e:	3728      	adds	r7, #40	; 0x28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	40020010 	.word	0x40020010
 800a0a8:	40020028 	.word	0x40020028
 800a0ac:	40020040 	.word	0x40020040
 800a0b0:	40020058 	.word	0x40020058
 800a0b4:	40020070 	.word	0x40020070
 800a0b8:	40020088 	.word	0x40020088
 800a0bc:	400200a0 	.word	0x400200a0
 800a0c0:	400200b8 	.word	0x400200b8
 800a0c4:	40020410 	.word	0x40020410
 800a0c8:	40020428 	.word	0x40020428
 800a0cc:	40020440 	.word	0x40020440
 800a0d0:	40020458 	.word	0x40020458
 800a0d4:	40020470 	.word	0x40020470
 800a0d8:	40020488 	.word	0x40020488
 800a0dc:	400204a0 	.word	0x400204a0
 800a0e0:	400204b8 	.word	0x400204b8

0800a0e4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a0f2:	b2db      	uxtb	r3, r3
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a130:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a7f      	ldr	r2, [pc, #508]	; (800a334 <DMA_SetConfig+0x21c>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d072      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a7d      	ldr	r2, [pc, #500]	; (800a338 <DMA_SetConfig+0x220>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d06d      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a7c      	ldr	r2, [pc, #496]	; (800a33c <DMA_SetConfig+0x224>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d068      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a7a      	ldr	r2, [pc, #488]	; (800a340 <DMA_SetConfig+0x228>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d063      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a79      	ldr	r2, [pc, #484]	; (800a344 <DMA_SetConfig+0x22c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d05e      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a77      	ldr	r2, [pc, #476]	; (800a348 <DMA_SetConfig+0x230>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d059      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a76      	ldr	r2, [pc, #472]	; (800a34c <DMA_SetConfig+0x234>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d054      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a74      	ldr	r2, [pc, #464]	; (800a350 <DMA_SetConfig+0x238>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d04f      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a73      	ldr	r2, [pc, #460]	; (800a354 <DMA_SetConfig+0x23c>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d04a      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a71      	ldr	r2, [pc, #452]	; (800a358 <DMA_SetConfig+0x240>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d045      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a70      	ldr	r2, [pc, #448]	; (800a35c <DMA_SetConfig+0x244>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d040      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a6e      	ldr	r2, [pc, #440]	; (800a360 <DMA_SetConfig+0x248>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d03b      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a6d      	ldr	r2, [pc, #436]	; (800a364 <DMA_SetConfig+0x24c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d036      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a6b      	ldr	r2, [pc, #428]	; (800a368 <DMA_SetConfig+0x250>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d031      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a6a      	ldr	r2, [pc, #424]	; (800a36c <DMA_SetConfig+0x254>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d02c      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a68      	ldr	r2, [pc, #416]	; (800a370 <DMA_SetConfig+0x258>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d027      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a67      	ldr	r2, [pc, #412]	; (800a374 <DMA_SetConfig+0x25c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d022      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a65      	ldr	r2, [pc, #404]	; (800a378 <DMA_SetConfig+0x260>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d01d      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a64      	ldr	r2, [pc, #400]	; (800a37c <DMA_SetConfig+0x264>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d018      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a62      	ldr	r2, [pc, #392]	; (800a380 <DMA_SetConfig+0x268>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d013      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a61      	ldr	r2, [pc, #388]	; (800a384 <DMA_SetConfig+0x26c>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d00e      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a5f      	ldr	r2, [pc, #380]	; (800a388 <DMA_SetConfig+0x270>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d009      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a5e      	ldr	r2, [pc, #376]	; (800a38c <DMA_SetConfig+0x274>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d004      	beq.n	800a222 <DMA_SetConfig+0x10a>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a5c      	ldr	r2, [pc, #368]	; (800a390 <DMA_SetConfig+0x278>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d101      	bne.n	800a226 <DMA_SetConfig+0x10e>
 800a222:	2301      	movs	r3, #1
 800a224:	e000      	b.n	800a228 <DMA_SetConfig+0x110>
 800a226:	2300      	movs	r3, #0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00d      	beq.n	800a248 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a234:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d004      	beq.n	800a248 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a246:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a39      	ldr	r2, [pc, #228]	; (800a334 <DMA_SetConfig+0x21c>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d04a      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a38      	ldr	r2, [pc, #224]	; (800a338 <DMA_SetConfig+0x220>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d045      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a36      	ldr	r2, [pc, #216]	; (800a33c <DMA_SetConfig+0x224>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d040      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a35      	ldr	r2, [pc, #212]	; (800a340 <DMA_SetConfig+0x228>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d03b      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a33      	ldr	r2, [pc, #204]	; (800a344 <DMA_SetConfig+0x22c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d036      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a32      	ldr	r2, [pc, #200]	; (800a348 <DMA_SetConfig+0x230>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d031      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a30      	ldr	r2, [pc, #192]	; (800a34c <DMA_SetConfig+0x234>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d02c      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a2f      	ldr	r2, [pc, #188]	; (800a350 <DMA_SetConfig+0x238>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d027      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a2d      	ldr	r2, [pc, #180]	; (800a354 <DMA_SetConfig+0x23c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d022      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a2c      	ldr	r2, [pc, #176]	; (800a358 <DMA_SetConfig+0x240>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d01d      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a2a      	ldr	r2, [pc, #168]	; (800a35c <DMA_SetConfig+0x244>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d018      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a29      	ldr	r2, [pc, #164]	; (800a360 <DMA_SetConfig+0x248>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d013      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a27      	ldr	r2, [pc, #156]	; (800a364 <DMA_SetConfig+0x24c>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d00e      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a26      	ldr	r2, [pc, #152]	; (800a368 <DMA_SetConfig+0x250>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d009      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a24      	ldr	r2, [pc, #144]	; (800a36c <DMA_SetConfig+0x254>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d004      	beq.n	800a2e8 <DMA_SetConfig+0x1d0>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a23      	ldr	r2, [pc, #140]	; (800a370 <DMA_SetConfig+0x258>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d101      	bne.n	800a2ec <DMA_SetConfig+0x1d4>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e000      	b.n	800a2ee <DMA_SetConfig+0x1d6>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d059      	beq.n	800a3a6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2f6:	f003 031f 	and.w	r3, r3, #31
 800a2fa:	223f      	movs	r2, #63	; 0x3f
 800a2fc:	409a      	lsls	r2, r3
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a310:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	2b40      	cmp	r3, #64	; 0x40
 800a320:	d138      	bne.n	800a394 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a332:	e086      	b.n	800a442 <DMA_SetConfig+0x32a>
 800a334:	40020010 	.word	0x40020010
 800a338:	40020028 	.word	0x40020028
 800a33c:	40020040 	.word	0x40020040
 800a340:	40020058 	.word	0x40020058
 800a344:	40020070 	.word	0x40020070
 800a348:	40020088 	.word	0x40020088
 800a34c:	400200a0 	.word	0x400200a0
 800a350:	400200b8 	.word	0x400200b8
 800a354:	40020410 	.word	0x40020410
 800a358:	40020428 	.word	0x40020428
 800a35c:	40020440 	.word	0x40020440
 800a360:	40020458 	.word	0x40020458
 800a364:	40020470 	.word	0x40020470
 800a368:	40020488 	.word	0x40020488
 800a36c:	400204a0 	.word	0x400204a0
 800a370:	400204b8 	.word	0x400204b8
 800a374:	58025408 	.word	0x58025408
 800a378:	5802541c 	.word	0x5802541c
 800a37c:	58025430 	.word	0x58025430
 800a380:	58025444 	.word	0x58025444
 800a384:	58025458 	.word	0x58025458
 800a388:	5802546c 	.word	0x5802546c
 800a38c:	58025480 	.word	0x58025480
 800a390:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	60da      	str	r2, [r3, #12]
}
 800a3a4:	e04d      	b.n	800a442 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a29      	ldr	r2, [pc, #164]	; (800a450 <DMA_SetConfig+0x338>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d022      	beq.n	800a3f6 <DMA_SetConfig+0x2de>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a27      	ldr	r2, [pc, #156]	; (800a454 <DMA_SetConfig+0x33c>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d01d      	beq.n	800a3f6 <DMA_SetConfig+0x2de>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a26      	ldr	r2, [pc, #152]	; (800a458 <DMA_SetConfig+0x340>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d018      	beq.n	800a3f6 <DMA_SetConfig+0x2de>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a24      	ldr	r2, [pc, #144]	; (800a45c <DMA_SetConfig+0x344>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d013      	beq.n	800a3f6 <DMA_SetConfig+0x2de>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a23      	ldr	r2, [pc, #140]	; (800a460 <DMA_SetConfig+0x348>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d00e      	beq.n	800a3f6 <DMA_SetConfig+0x2de>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a21      	ldr	r2, [pc, #132]	; (800a464 <DMA_SetConfig+0x34c>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d009      	beq.n	800a3f6 <DMA_SetConfig+0x2de>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a20      	ldr	r2, [pc, #128]	; (800a468 <DMA_SetConfig+0x350>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d004      	beq.n	800a3f6 <DMA_SetConfig+0x2de>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a1e      	ldr	r2, [pc, #120]	; (800a46c <DMA_SetConfig+0x354>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d101      	bne.n	800a3fa <DMA_SetConfig+0x2e2>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e000      	b.n	800a3fc <DMA_SetConfig+0x2e4>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d020      	beq.n	800a442 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a404:	f003 031f 	and.w	r3, r3, #31
 800a408:	2201      	movs	r2, #1
 800a40a:	409a      	lsls	r2, r3
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	2b40      	cmp	r3, #64	; 0x40
 800a41e:	d108      	bne.n	800a432 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	60da      	str	r2, [r3, #12]
}
 800a430:	e007      	b.n	800a442 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	60da      	str	r2, [r3, #12]
}
 800a442:	bf00      	nop
 800a444:	371c      	adds	r7, #28
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	58025408 	.word	0x58025408
 800a454:	5802541c 	.word	0x5802541c
 800a458:	58025430 	.word	0x58025430
 800a45c:	58025444 	.word	0x58025444
 800a460:	58025458 	.word	0x58025458
 800a464:	5802546c 	.word	0x5802546c
 800a468:	58025480 	.word	0x58025480
 800a46c:	58025494 	.word	0x58025494

0800a470 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a42      	ldr	r2, [pc, #264]	; (800a588 <DMA_CalcBaseAndBitshift+0x118>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d04a      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a41      	ldr	r2, [pc, #260]	; (800a58c <DMA_CalcBaseAndBitshift+0x11c>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d045      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a3f      	ldr	r2, [pc, #252]	; (800a590 <DMA_CalcBaseAndBitshift+0x120>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d040      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a3e      	ldr	r2, [pc, #248]	; (800a594 <DMA_CalcBaseAndBitshift+0x124>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d03b      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a3c      	ldr	r2, [pc, #240]	; (800a598 <DMA_CalcBaseAndBitshift+0x128>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d036      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a3b      	ldr	r2, [pc, #236]	; (800a59c <DMA_CalcBaseAndBitshift+0x12c>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d031      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a39      	ldr	r2, [pc, #228]	; (800a5a0 <DMA_CalcBaseAndBitshift+0x130>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d02c      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a38      	ldr	r2, [pc, #224]	; (800a5a4 <DMA_CalcBaseAndBitshift+0x134>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d027      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a36      	ldr	r2, [pc, #216]	; (800a5a8 <DMA_CalcBaseAndBitshift+0x138>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d022      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a35      	ldr	r2, [pc, #212]	; (800a5ac <DMA_CalcBaseAndBitshift+0x13c>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d01d      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a33      	ldr	r2, [pc, #204]	; (800a5b0 <DMA_CalcBaseAndBitshift+0x140>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d018      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a32      	ldr	r2, [pc, #200]	; (800a5b4 <DMA_CalcBaseAndBitshift+0x144>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d013      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a30      	ldr	r2, [pc, #192]	; (800a5b8 <DMA_CalcBaseAndBitshift+0x148>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d00e      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a2f      	ldr	r2, [pc, #188]	; (800a5bc <DMA_CalcBaseAndBitshift+0x14c>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d009      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a2d      	ldr	r2, [pc, #180]	; (800a5c0 <DMA_CalcBaseAndBitshift+0x150>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d004      	beq.n	800a518 <DMA_CalcBaseAndBitshift+0xa8>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a2c      	ldr	r2, [pc, #176]	; (800a5c4 <DMA_CalcBaseAndBitshift+0x154>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d101      	bne.n	800a51c <DMA_CalcBaseAndBitshift+0xac>
 800a518:	2301      	movs	r3, #1
 800a51a:	e000      	b.n	800a51e <DMA_CalcBaseAndBitshift+0xae>
 800a51c:	2300      	movs	r3, #0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d024      	beq.n	800a56c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	b2db      	uxtb	r3, r3
 800a528:	3b10      	subs	r3, #16
 800a52a:	4a27      	ldr	r2, [pc, #156]	; (800a5c8 <DMA_CalcBaseAndBitshift+0x158>)
 800a52c:	fba2 2303 	umull	r2, r3, r2, r3
 800a530:	091b      	lsrs	r3, r3, #4
 800a532:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	4a24      	ldr	r2, [pc, #144]	; (800a5cc <DMA_CalcBaseAndBitshift+0x15c>)
 800a53c:	5cd3      	ldrb	r3, [r2, r3]
 800a53e:	461a      	mov	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b03      	cmp	r3, #3
 800a548:	d908      	bls.n	800a55c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	4b1f      	ldr	r3, [pc, #124]	; (800a5d0 <DMA_CalcBaseAndBitshift+0x160>)
 800a552:	4013      	ands	r3, r2
 800a554:	1d1a      	adds	r2, r3, #4
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	659a      	str	r2, [r3, #88]	; 0x58
 800a55a:	e00d      	b.n	800a578 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	4b1b      	ldr	r3, [pc, #108]	; (800a5d0 <DMA_CalcBaseAndBitshift+0x160>)
 800a564:	4013      	ands	r3, r2
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	6593      	str	r3, [r2, #88]	; 0x58
 800a56a:	e005      	b.n	800a578 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	40020010 	.word	0x40020010
 800a58c:	40020028 	.word	0x40020028
 800a590:	40020040 	.word	0x40020040
 800a594:	40020058 	.word	0x40020058
 800a598:	40020070 	.word	0x40020070
 800a59c:	40020088 	.word	0x40020088
 800a5a0:	400200a0 	.word	0x400200a0
 800a5a4:	400200b8 	.word	0x400200b8
 800a5a8:	40020410 	.word	0x40020410
 800a5ac:	40020428 	.word	0x40020428
 800a5b0:	40020440 	.word	0x40020440
 800a5b4:	40020458 	.word	0x40020458
 800a5b8:	40020470 	.word	0x40020470
 800a5bc:	40020488 	.word	0x40020488
 800a5c0:	400204a0 	.word	0x400204a0
 800a5c4:	400204b8 	.word	0x400204b8
 800a5c8:	aaaaaaab 	.word	0xaaaaaaab
 800a5cc:	0801add4 	.word	0x0801add4
 800a5d0:	fffffc00 	.word	0xfffffc00

0800a5d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d120      	bne.n	800a62a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	d858      	bhi.n	800a6a2 <DMA_CheckFifoParam+0xce>
 800a5f0:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <DMA_CheckFifoParam+0x24>)
 800a5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f6:	bf00      	nop
 800a5f8:	0800a609 	.word	0x0800a609
 800a5fc:	0800a61b 	.word	0x0800a61b
 800a600:	0800a609 	.word	0x0800a609
 800a604:	0800a6a3 	.word	0x0800a6a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d048      	beq.n	800a6a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a618:	e045      	b.n	800a6a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a622:	d142      	bne.n	800a6aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a628:	e03f      	b.n	800a6aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a632:	d123      	bne.n	800a67c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d838      	bhi.n	800a6ae <DMA_CheckFifoParam+0xda>
 800a63c:	a201      	add	r2, pc, #4	; (adr r2, 800a644 <DMA_CheckFifoParam+0x70>)
 800a63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a642:	bf00      	nop
 800a644:	0800a655 	.word	0x0800a655
 800a648:	0800a65b 	.word	0x0800a65b
 800a64c:	0800a655 	.word	0x0800a655
 800a650:	0800a66d 	.word	0x0800a66d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	73fb      	strb	r3, [r7, #15]
        break;
 800a658:	e030      	b.n	800a6bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d025      	beq.n	800a6b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a66a:	e022      	b.n	800a6b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a674:	d11f      	bne.n	800a6b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a67a:	e01c      	b.n	800a6b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a680:	2b02      	cmp	r3, #2
 800a682:	d902      	bls.n	800a68a <DMA_CheckFifoParam+0xb6>
 800a684:	2b03      	cmp	r3, #3
 800a686:	d003      	beq.n	800a690 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a688:	e018      	b.n	800a6bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	73fb      	strb	r3, [r7, #15]
        break;
 800a68e:	e015      	b.n	800a6bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00e      	beq.n	800a6ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	73fb      	strb	r3, [r7, #15]
    break;
 800a6a0:	e00b      	b.n	800a6ba <DMA_CheckFifoParam+0xe6>
        break;
 800a6a2:	bf00      	nop
 800a6a4:	e00a      	b.n	800a6bc <DMA_CheckFifoParam+0xe8>
        break;
 800a6a6:	bf00      	nop
 800a6a8:	e008      	b.n	800a6bc <DMA_CheckFifoParam+0xe8>
        break;
 800a6aa:	bf00      	nop
 800a6ac:	e006      	b.n	800a6bc <DMA_CheckFifoParam+0xe8>
        break;
 800a6ae:	bf00      	nop
 800a6b0:	e004      	b.n	800a6bc <DMA_CheckFifoParam+0xe8>
        break;
 800a6b2:	bf00      	nop
 800a6b4:	e002      	b.n	800a6bc <DMA_CheckFifoParam+0xe8>
        break;
 800a6b6:	bf00      	nop
 800a6b8:	e000      	b.n	800a6bc <DMA_CheckFifoParam+0xe8>
    break;
 800a6ba:	bf00      	nop
    }
  }

  return status;
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop

0800a6cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a38      	ldr	r2, [pc, #224]	; (800a7c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d022      	beq.n	800a72a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a36      	ldr	r2, [pc, #216]	; (800a7c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d01d      	beq.n	800a72a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a35      	ldr	r2, [pc, #212]	; (800a7c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d018      	beq.n	800a72a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a33      	ldr	r2, [pc, #204]	; (800a7cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d013      	beq.n	800a72a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a32      	ldr	r2, [pc, #200]	; (800a7d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d00e      	beq.n	800a72a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a30      	ldr	r2, [pc, #192]	; (800a7d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d009      	beq.n	800a72a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a2f      	ldr	r2, [pc, #188]	; (800a7d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d004      	beq.n	800a72a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a2d      	ldr	r2, [pc, #180]	; (800a7dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d101      	bne.n	800a72e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e000      	b.n	800a730 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a72e:	2300      	movs	r3, #0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d01a      	beq.n	800a76a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	3b08      	subs	r3, #8
 800a73c:	4a28      	ldr	r2, [pc, #160]	; (800a7e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a73e:	fba2 2303 	umull	r2, r3, r2, r3
 800a742:	091b      	lsrs	r3, r3, #4
 800a744:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	4b26      	ldr	r3, [pc, #152]	; (800a7e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a74a:	4413      	add	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	461a      	mov	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a24      	ldr	r2, [pc, #144]	; (800a7e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a758:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f003 031f 	and.w	r3, r3, #31
 800a760:	2201      	movs	r2, #1
 800a762:	409a      	lsls	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a768:	e024      	b.n	800a7b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	3b10      	subs	r3, #16
 800a772:	4a1e      	ldr	r2, [pc, #120]	; (800a7ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a774:	fba2 2303 	umull	r2, r3, r2, r3
 800a778:	091b      	lsrs	r3, r3, #4
 800a77a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	4a1c      	ldr	r2, [pc, #112]	; (800a7f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d806      	bhi.n	800a792 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4a1b      	ldr	r2, [pc, #108]	; (800a7f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d902      	bls.n	800a792 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	3308      	adds	r3, #8
 800a790:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	4b18      	ldr	r3, [pc, #96]	; (800a7f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a796:	4413      	add	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	461a      	mov	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a16      	ldr	r2, [pc, #88]	; (800a7fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a7a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f003 031f 	and.w	r3, r3, #31
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	409a      	lsls	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a7b4:	bf00      	nop
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	58025408 	.word	0x58025408
 800a7c4:	5802541c 	.word	0x5802541c
 800a7c8:	58025430 	.word	0x58025430
 800a7cc:	58025444 	.word	0x58025444
 800a7d0:	58025458 	.word	0x58025458
 800a7d4:	5802546c 	.word	0x5802546c
 800a7d8:	58025480 	.word	0x58025480
 800a7dc:	58025494 	.word	0x58025494
 800a7e0:	cccccccd 	.word	0xcccccccd
 800a7e4:	16009600 	.word	0x16009600
 800a7e8:	58025880 	.word	0x58025880
 800a7ec:	aaaaaaab 	.word	0xaaaaaaab
 800a7f0:	400204b8 	.word	0x400204b8
 800a7f4:	4002040f 	.word	0x4002040f
 800a7f8:	10008200 	.word	0x10008200
 800a7fc:	40020880 	.word	0x40020880

0800a800 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d04a      	beq.n	800a8ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d847      	bhi.n	800a8ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a25      	ldr	r2, [pc, #148]	; (800a8b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d022      	beq.n	800a86c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a24      	ldr	r2, [pc, #144]	; (800a8bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d01d      	beq.n	800a86c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a22      	ldr	r2, [pc, #136]	; (800a8c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d018      	beq.n	800a86c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a21      	ldr	r2, [pc, #132]	; (800a8c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d013      	beq.n	800a86c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a1f      	ldr	r2, [pc, #124]	; (800a8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d00e      	beq.n	800a86c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a1e      	ldr	r2, [pc, #120]	; (800a8cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d009      	beq.n	800a86c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a1c      	ldr	r2, [pc, #112]	; (800a8d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d004      	beq.n	800a86c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a1b      	ldr	r2, [pc, #108]	; (800a8d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d101      	bne.n	800a870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a86c:	2301      	movs	r3, #1
 800a86e:	e000      	b.n	800a872 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a870:	2300      	movs	r3, #0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00a      	beq.n	800a88c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	4b17      	ldr	r3, [pc, #92]	; (800a8d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a87a:	4413      	add	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	461a      	mov	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a15      	ldr	r2, [pc, #84]	; (800a8dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a888:	671a      	str	r2, [r3, #112]	; 0x70
 800a88a:	e009      	b.n	800a8a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	4b14      	ldr	r3, [pc, #80]	; (800a8e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a890:	4413      	add	r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	461a      	mov	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a11      	ldr	r2, [pc, #68]	; (800a8e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a89e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	409a      	lsls	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a8ac:	bf00      	nop
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	58025408 	.word	0x58025408
 800a8bc:	5802541c 	.word	0x5802541c
 800a8c0:	58025430 	.word	0x58025430
 800a8c4:	58025444 	.word	0x58025444
 800a8c8:	58025458 	.word	0x58025458
 800a8cc:	5802546c 	.word	0x5802546c
 800a8d0:	58025480 	.word	0x58025480
 800a8d4:	58025494 	.word	0x58025494
 800a8d8:	1600963f 	.word	0x1600963f
 800a8dc:	58025940 	.word	0x58025940
 800a8e0:	1000823f 	.word	0x1000823f
 800a8e4:	40020940 	.word	0x40020940

0800a8e8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08a      	sub	sp, #40	; 0x28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a8fc:	2308      	movs	r3, #8
 800a8fe:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a900:	4b40      	ldr	r3, [pc, #256]	; (800aa04 <HAL_FLASH_Program+0x11c>)
 800a902:	7d1b      	ldrb	r3, [r3, #20]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_FLASH_Program+0x24>
 800a908:	2302      	movs	r3, #2
 800a90a:	e076      	b.n	800a9fa <HAL_FLASH_Program+0x112>
 800a90c:	4b3d      	ldr	r3, [pc, #244]	; (800aa04 <HAL_FLASH_Program+0x11c>)
 800a90e:	2201      	movs	r2, #1
 800a910:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a918:	d306      	bcc.n	800a928 <HAL_FLASH_Program+0x40>
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a920:	d202      	bcs.n	800a928 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a922:	2301      	movs	r3, #1
 800a924:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800a926:	e00c      	b.n	800a942 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800a92e:	d306      	bcc.n	800a93e <HAL_FLASH_Program+0x56>
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800a936:	d202      	bcs.n	800a93e <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800a938:	2302      	movs	r3, #2
 800a93a:	61bb      	str	r3, [r7, #24]
 800a93c:	e001      	b.n	800a942 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e05b      	b.n	800a9fa <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a942:	4b30      	ldr	r3, [pc, #192]	; (800aa04 <HAL_FLASH_Program+0x11c>)
 800a944:	2200      	movs	r2, #0
 800a946:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a948:	69b9      	ldr	r1, [r7, #24]
 800a94a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a94e:	f000 f897 	bl	800aa80 <FLASH_WaitForLastOperation>
 800a952:	4603      	mov	r3, r0
 800a954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800a958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d147      	bne.n	800a9f0 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d106      	bne.n	800a974 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a966:	4b28      	ldr	r3, [pc, #160]	; (800aa08 <HAL_FLASH_Program+0x120>)
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	4a27      	ldr	r2, [pc, #156]	; (800aa08 <HAL_FLASH_Program+0x120>)
 800a96c:	f043 0302 	orr.w	r3, r3, #2
 800a970:	60d3      	str	r3, [r2, #12]
 800a972:	e007      	b.n	800a984 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800a974:	4b24      	ldr	r3, [pc, #144]	; (800aa08 <HAL_FLASH_Program+0x120>)
 800a976:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a97a:	4a23      	ldr	r2, [pc, #140]	; (800aa08 <HAL_FLASH_Program+0x120>)
 800a97c:	f043 0302 	orr.w	r3, r3, #2
 800a980:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800a984:	f3bf 8f6f 	isb	sy
}
 800a988:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a98a:	f3bf 8f4f 	dsb	sy
}
 800a98e:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	3304      	adds	r3, #4
 800a99c:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	3304      	adds	r3, #4
 800a9a2:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1ef      	bne.n	800a990 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800a9b0:	f3bf 8f6f 	isb	sy
}
 800a9b4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a9b6:	f3bf 8f4f 	dsb	sy
}
 800a9ba:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a9bc:	69b9      	ldr	r1, [r7, #24]
 800a9be:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a9c2:	f000 f85d 	bl	800aa80 <FLASH_WaitForLastOperation>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d106      	bne.n	800a9e0 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	; (800aa08 <HAL_FLASH_Program+0x120>)
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	4a0c      	ldr	r2, [pc, #48]	; (800aa08 <HAL_FLASH_Program+0x120>)
 800a9d8:	f023 0302 	bic.w	r3, r3, #2
 800a9dc:	60d3      	str	r3, [r2, #12]
 800a9de:	e007      	b.n	800a9f0 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800a9e0:	4b09      	ldr	r3, [pc, #36]	; (800aa08 <HAL_FLASH_Program+0x120>)
 800a9e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a9e6:	4a08      	ldr	r2, [pc, #32]	; (800aa08 <HAL_FLASH_Program+0x120>)
 800a9e8:	f023 0302 	bic.w	r3, r3, #2
 800a9ec:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a9f0:	4b04      	ldr	r3, [pc, #16]	; (800aa04 <HAL_FLASH_Program+0x11c>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	751a      	strb	r2, [r3, #20]

  return status;
 800a9f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3728      	adds	r7, #40	; 0x28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	24001fc0 	.word	0x24001fc0
 800aa08:	52002000 	.word	0x52002000

0800aa0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800aa10:	4b18      	ldr	r3, [pc, #96]	; (800aa74 <HAL_FLASH_Unlock+0x68>)
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00d      	beq.n	800aa38 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800aa1c:	4b15      	ldr	r3, [pc, #84]	; (800aa74 <HAL_FLASH_Unlock+0x68>)
 800aa1e:	4a16      	ldr	r2, [pc, #88]	; (800aa78 <HAL_FLASH_Unlock+0x6c>)
 800aa20:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800aa22:	4b14      	ldr	r3, [pc, #80]	; (800aa74 <HAL_FLASH_Unlock+0x68>)
 800aa24:	4a15      	ldr	r2, [pc, #84]	; (800aa7c <HAL_FLASH_Unlock+0x70>)
 800aa26:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800aa28:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <HAL_FLASH_Unlock+0x68>)
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	e018      	b.n	800aa6a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800aa38:	4b0e      	ldr	r3, [pc, #56]	; (800aa74 <HAL_FLASH_Unlock+0x68>)
 800aa3a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d010      	beq.n	800aa68 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800aa46:	4b0b      	ldr	r3, [pc, #44]	; (800aa74 <HAL_FLASH_Unlock+0x68>)
 800aa48:	4a0b      	ldr	r2, [pc, #44]	; (800aa78 <HAL_FLASH_Unlock+0x6c>)
 800aa4a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800aa4e:	4b09      	ldr	r3, [pc, #36]	; (800aa74 <HAL_FLASH_Unlock+0x68>)
 800aa50:	4a0a      	ldr	r2, [pc, #40]	; (800aa7c <HAL_FLASH_Unlock+0x70>)
 800aa52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800aa56:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <HAL_FLASH_Unlock+0x68>)
 800aa58:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	e000      	b.n	800aa6a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	52002000 	.word	0x52002000
 800aa78:	45670123 	.word	0x45670123
 800aa7c:	cdef89ab 	.word	0xcdef89ab

0800aa80 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800aa8a:	2304      	movs	r3, #4
 800aa8c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800aa92:	f7fa ff33 	bl	80058fc <HAL_GetTick>
 800aa96:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d113      	bne.n	800aac6 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800aa9e:	4b41      	ldr	r3, [pc, #260]	; (800aba4 <FLASH_WaitForLastOperation+0x124>)
 800aaa0:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aaa2:	e010      	b.n	800aac6 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaaa:	d00c      	beq.n	800aac6 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aaac:	f7fa ff26 	bl	80058fc <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d302      	bcc.n	800aac2 <FLASH_WaitForLastOperation+0x42>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800aac2:	2303      	movs	r3, #3
 800aac4:	e06a      	b.n	800ab9c <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4b37      	ldr	r3, [pc, #220]	; (800aba8 <FLASH_WaitForLastOperation+0x128>)
 800aaca:	4013      	ands	r3, r2
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d10a      	bne.n	800aae8 <FLASH_WaitForLastOperation+0x68>
 800aad2:	4b36      	ldr	r3, [pc, #216]	; (800abac <FLASH_WaitForLastOperation+0x12c>)
 800aad4:	691a      	ldr	r2, [r3, #16]
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	4013      	ands	r3, r2
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	429a      	cmp	r2, r3
 800aade:	bf0c      	ite	eq
 800aae0:	2301      	moveq	r3, #1
 800aae2:	2300      	movne	r3, #0
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	e00c      	b.n	800ab02 <FLASH_WaitForLastOperation+0x82>
 800aae8:	4b30      	ldr	r3, [pc, #192]	; (800abac <FLASH_WaitForLastOperation+0x12c>)
 800aaea:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800aaee:	43da      	mvns	r2, r3
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bf0c      	ite	eq
 800aafc:	2301      	moveq	r3, #1
 800aafe:	2300      	movne	r3, #0
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1ce      	bne.n	800aaa4 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d105      	bne.n	800ab18 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800ab0c:	4b27      	ldr	r3, [pc, #156]	; (800abac <FLASH_WaitForLastOperation+0x12c>)
 800ab0e:	691a      	ldr	r2, [r3, #16]
 800ab10:	4b27      	ldr	r3, [pc, #156]	; (800abb0 <FLASH_WaitForLastOperation+0x130>)
 800ab12:	4013      	ands	r3, r2
 800ab14:	613b      	str	r3, [r7, #16]
 800ab16:	e007      	b.n	800ab28 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800ab18:	4b24      	ldr	r3, [pc, #144]	; (800abac <FLASH_WaitForLastOperation+0x12c>)
 800ab1a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800ab1e:	4b24      	ldr	r3, [pc, #144]	; (800abb0 <FLASH_WaitForLastOperation+0x130>)
 800ab20:	4013      	ands	r3, r2
 800ab22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab26:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d017      	beq.n	800ab62 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800ab32:	4b20      	ldr	r3, [pc, #128]	; (800abb4 <FLASH_WaitForLastOperation+0x134>)
 800ab34:	699a      	ldr	r2, [r3, #24]
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	4a1e      	ldr	r2, [pc, #120]	; (800abb4 <FLASH_WaitForLastOperation+0x134>)
 800ab3c:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	4b19      	ldr	r3, [pc, #100]	; (800aba8 <FLASH_WaitForLastOperation+0x128>)
 800ab42:	4013      	ands	r3, r2
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d103      	bne.n	800ab52 <FLASH_WaitForLastOperation+0xd2>
 800ab4a:	4a18      	ldr	r2, [pc, #96]	; (800abac <FLASH_WaitForLastOperation+0x12c>)
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	6153      	str	r3, [r2, #20]
 800ab50:	e005      	b.n	800ab5e <FLASH_WaitForLastOperation+0xde>
 800ab52:	4a16      	ldr	r2, [pc, #88]	; (800abac <FLASH_WaitForLastOperation+0x12c>)
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab5a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e01c      	b.n	800ab9c <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d10b      	bne.n	800ab80 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800ab68:	4b10      	ldr	r3, [pc, #64]	; (800abac <FLASH_WaitForLastOperation+0x12c>)
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab74:	d111      	bne.n	800ab9a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800ab76:	4b0d      	ldr	r3, [pc, #52]	; (800abac <FLASH_WaitForLastOperation+0x12c>)
 800ab78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ab7c:	615a      	str	r2, [r3, #20]
 800ab7e:	e00c      	b.n	800ab9a <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800ab80:	4b0a      	ldr	r3, [pc, #40]	; (800abac <FLASH_WaitForLastOperation+0x12c>)
 800ab82:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800ab86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab8e:	d104      	bne.n	800ab9a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800ab90:	4b06      	ldr	r3, [pc, #24]	; (800abac <FLASH_WaitForLastOperation+0x12c>)
 800ab92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ab96:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	80000004 	.word	0x80000004
 800aba8:	1fef000f 	.word	0x1fef000f
 800abac:	52002000 	.word	0x52002000
 800abb0:	17ee0000 	.word	0x17ee0000
 800abb4:	24001fc0 	.word	0x24001fc0

0800abb8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800abc6:	4b5e      	ldr	r3, [pc, #376]	; (800ad40 <HAL_FLASHEx_Erase+0x188>)
 800abc8:	7d1b      	ldrb	r3, [r3, #20]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d101      	bne.n	800abd2 <HAL_FLASHEx_Erase+0x1a>
 800abce:	2302      	movs	r3, #2
 800abd0:	e0b2      	b.n	800ad38 <HAL_FLASHEx_Erase+0x180>
 800abd2:	4b5b      	ldr	r3, [pc, #364]	; (800ad40 <HAL_FLASHEx_Erase+0x188>)
 800abd4:	2201      	movs	r2, #1
 800abd6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800abd8:	4b59      	ldr	r3, [pc, #356]	; (800ad40 <HAL_FLASHEx_Erase+0x188>)
 800abda:	2200      	movs	r2, #0
 800abdc:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d009      	beq.n	800abfe <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800abea:	2101      	movs	r1, #1
 800abec:	f24c 3050 	movw	r0, #50000	; 0xc350
 800abf0:	f7ff ff46 	bl	800aa80 <FLASH_WaitForLastOperation>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d009      	beq.n	800ac1e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800ac0a:	2102      	movs	r1, #2
 800ac0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac10:	f7ff ff36 	bl	800aa80 <FLASH_WaitForLastOperation>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f040 8085 	bne.w	800ad30 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d136      	bne.n	800ac9c <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691a      	ldr	r2, [r3, #16]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	4619      	mov	r1, r3
 800ac38:	4610      	mov	r0, r2
 800ac3a:	f000 f887 	bl	800ad4c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00f      	beq.n	800ac6a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ac4a:	2101      	movs	r1, #1
 800ac4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac50:	f7ff ff16 	bl	800aa80 <FLASH_WaitForLastOperation>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800ac5e:	4b39      	ldr	r3, [pc, #228]	; (800ad44 <HAL_FLASHEx_Erase+0x18c>)
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	4a38      	ldr	r2, [pc, #224]	; (800ad44 <HAL_FLASHEx_Erase+0x18c>)
 800ac64:	f023 0308 	bic.w	r3, r3, #8
 800ac68:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	f003 0302 	and.w	r3, r3, #2
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d05c      	beq.n	800ad30 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800ac76:	2102      	movs	r1, #2
 800ac78:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac7c:	f7ff ff00 	bl	800aa80 <FLASH_WaitForLastOperation>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800ac8a:	4b2e      	ldr	r3, [pc, #184]	; (800ad44 <HAL_FLASHEx_Erase+0x18c>)
 800ac8c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ac90:	4a2c      	ldr	r2, [pc, #176]	; (800ad44 <HAL_FLASHEx_Erase+0x18c>)
 800ac92:	f023 0308 	bic.w	r3, r3, #8
 800ac96:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800ac9a:	e049      	b.n	800ad30 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aca2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	60bb      	str	r3, [r7, #8]
 800acaa:	e039      	b.n	800ad20 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6859      	ldr	r1, [r3, #4]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	461a      	mov	r2, r3
 800acb6:	68b8      	ldr	r0, [r7, #8]
 800acb8:	f000 f8b2 	bl	800ae20 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00c      	beq.n	800ace2 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800acc8:	2101      	movs	r1, #1
 800acca:	f24c 3050 	movw	r0, #50000	; 0xc350
 800acce:	f7ff fed7 	bl	800aa80 <FLASH_WaitForLastOperation>
 800acd2:	4603      	mov	r3, r0
 800acd4:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800acd6:	4b1b      	ldr	r3, [pc, #108]	; (800ad44 <HAL_FLASHEx_Erase+0x18c>)
 800acd8:	68da      	ldr	r2, [r3, #12]
 800acda:	491a      	ldr	r1, [pc, #104]	; (800ad44 <HAL_FLASHEx_Erase+0x18c>)
 800acdc:	4b1a      	ldr	r3, [pc, #104]	; (800ad48 <HAL_FLASHEx_Erase+0x190>)
 800acde:	4013      	ands	r3, r2
 800ace0:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00e      	beq.n	800ad0c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800acee:	2102      	movs	r1, #2
 800acf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800acf4:	f7ff fec4 	bl	800aa80 <FLASH_WaitForLastOperation>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800acfc:	4b11      	ldr	r3, [pc, #68]	; (800ad44 <HAL_FLASHEx_Erase+0x18c>)
 800acfe:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ad02:	4910      	ldr	r1, [pc, #64]	; (800ad44 <HAL_FLASHEx_Erase+0x18c>)
 800ad04:	4b10      	ldr	r3, [pc, #64]	; (800ad48 <HAL_FLASHEx_Erase+0x190>)
 800ad06:	4013      	ands	r3, r2
 800ad08:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	601a      	str	r2, [r3, #0]
          break;
 800ad18:	e00a      	b.n	800ad30 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	60bb      	str	r3, [r7, #8]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68da      	ldr	r2, [r3, #12]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	4413      	add	r3, r2
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d3bd      	bcc.n	800acac <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ad30:	4b03      	ldr	r3, [pc, #12]	; (800ad40 <HAL_FLASHEx_Erase+0x188>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	751a      	strb	r2, [r3, #20]

  return status;
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	24001fc0 	.word	0x24001fc0
 800ad44:	52002000 	.word	0x52002000
 800ad48:	fffff8fb 	.word	0xfffff8fb

0800ad4c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	f003 0303 	and.w	r3, r3, #3
 800ad5c:	2b03      	cmp	r3, #3
 800ad5e:	d122      	bne.n	800ada6 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ad60:	4b2e      	ldr	r3, [pc, #184]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	4a2d      	ldr	r2, [pc, #180]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ad66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ad6a:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ad6c:	4b2b      	ldr	r3, [pc, #172]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ad6e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ad72:	4a2a      	ldr	r2, [pc, #168]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ad74:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ad78:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800ad7c:	4b27      	ldr	r3, [pc, #156]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ad7e:	68da      	ldr	r2, [r3, #12]
 800ad80:	4926      	ldr	r1, [pc, #152]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800ad88:	4b24      	ldr	r3, [pc, #144]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ad8a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ad8e:	4923      	ldr	r1, [pc, #140]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800ad98:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	4a1f      	ldr	r2, [pc, #124]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ad9e:	f043 0310 	orr.w	r3, r3, #16
 800ada2:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800ada4:	e033      	b.n	800ae0e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	2b00      	cmp	r3, #0
 800adae:	d011      	beq.n	800add4 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800adb0:	4b1a      	ldr	r3, [pc, #104]	; (800ae1c <FLASH_MassErase+0xd0>)
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	4a19      	ldr	r2, [pc, #100]	; (800ae1c <FLASH_MassErase+0xd0>)
 800adb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800adba:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800adbc:	4b17      	ldr	r3, [pc, #92]	; (800ae1c <FLASH_MassErase+0xd0>)
 800adbe:	68da      	ldr	r2, [r3, #12]
 800adc0:	4916      	ldr	r1, [pc, #88]	; (800ae1c <FLASH_MassErase+0xd0>)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800adc8:	4b14      	ldr	r3, [pc, #80]	; (800ae1c <FLASH_MassErase+0xd0>)
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	4a13      	ldr	r2, [pc, #76]	; (800ae1c <FLASH_MassErase+0xd0>)
 800adce:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800add2:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d017      	beq.n	800ae0e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800adde:	4b0f      	ldr	r3, [pc, #60]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ade0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ade4:	4a0d      	ldr	r2, [pc, #52]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ade6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800adea:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800adee:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <FLASH_MassErase+0xd0>)
 800adf0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800adf4:	4909      	ldr	r1, [pc, #36]	; (800ae1c <FLASH_MassErase+0xd0>)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800adfe:	4b07      	ldr	r3, [pc, #28]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ae00:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae04:	4a05      	ldr	r2, [pc, #20]	; (800ae1c <FLASH_MassErase+0xd0>)
 800ae06:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800ae0a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800ae0e:	bf00      	nop
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	52002000 	.word	0x52002000

0800ae20 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d010      	beq.n	800ae58 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ae36:	4b18      	ldr	r3, [pc, #96]	; (800ae98 <FLASH_Erase_Sector+0x78>)
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	4a17      	ldr	r2, [pc, #92]	; (800ae98 <FLASH_Erase_Sector+0x78>)
 800ae3c:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ae40:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ae42:	4b15      	ldr	r3, [pc, #84]	; (800ae98 <FLASH_Erase_Sector+0x78>)
 800ae44:	68da      	ldr	r2, [r3, #12]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	0219      	lsls	r1, r3, #8
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	430b      	orrs	r3, r1
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	4a11      	ldr	r2, [pc, #68]	; (800ae98 <FLASH_Erase_Sector+0x78>)
 800ae52:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ae56:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d014      	beq.n	800ae8c <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800ae62:	4b0d      	ldr	r3, [pc, #52]	; (800ae98 <FLASH_Erase_Sector+0x78>)
 800ae64:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae68:	4a0b      	ldr	r2, [pc, #44]	; (800ae98 <FLASH_Erase_Sector+0x78>)
 800ae6a:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800ae6e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800ae72:	4b09      	ldr	r3, [pc, #36]	; (800ae98 <FLASH_Erase_Sector+0x78>)
 800ae74:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	0219      	lsls	r1, r3, #8
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	430b      	orrs	r3, r1
 800ae80:	4313      	orrs	r3, r2
 800ae82:	4a05      	ldr	r2, [pc, #20]	; (800ae98 <FLASH_Erase_Sector+0x78>)
 800ae84:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800ae88:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800ae8c:	bf00      	nop
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	52002000 	.word	0x52002000

0800ae9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b089      	sub	sp, #36	; 0x24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800aea6:	2300      	movs	r3, #0
 800aea8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800aeaa:	4b89      	ldr	r3, [pc, #548]	; (800b0d0 <HAL_GPIO_Init+0x234>)
 800aeac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aeae:	e194      	b.n	800b1da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	fa01 f303 	lsl.w	r3, r1, r3
 800aebc:	4013      	ands	r3, r2
 800aebe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 8186 	beq.w	800b1d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f003 0303 	and.w	r3, r3, #3
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d005      	beq.n	800aee0 <HAL_GPIO_Init+0x44>
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	f003 0303 	and.w	r3, r3, #3
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d130      	bne.n	800af42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	2203      	movs	r2, #3
 800aeec:	fa02 f303 	lsl.w	r3, r2, r3
 800aef0:	43db      	mvns	r3, r3
 800aef2:	69ba      	ldr	r2, [r7, #24]
 800aef4:	4013      	ands	r3, r2
 800aef6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	fa02 f303 	lsl.w	r3, r2, r3
 800af04:	69ba      	ldr	r2, [r7, #24]
 800af06:	4313      	orrs	r3, r2
 800af08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	69ba      	ldr	r2, [r7, #24]
 800af0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800af16:	2201      	movs	r2, #1
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	fa02 f303 	lsl.w	r3, r2, r3
 800af1e:	43db      	mvns	r3, r3
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	4013      	ands	r3, r2
 800af24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	091b      	lsrs	r3, r3, #4
 800af2c:	f003 0201 	and.w	r2, r3, #1
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	fa02 f303 	lsl.w	r3, r2, r3
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	4313      	orrs	r3, r2
 800af3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	69ba      	ldr	r2, [r7, #24]
 800af40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f003 0303 	and.w	r3, r3, #3
 800af4a:	2b03      	cmp	r3, #3
 800af4c:	d017      	beq.n	800af7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	2203      	movs	r2, #3
 800af5a:	fa02 f303 	lsl.w	r3, r2, r3
 800af5e:	43db      	mvns	r3, r3
 800af60:	69ba      	ldr	r2, [r7, #24]
 800af62:	4013      	ands	r3, r2
 800af64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	689a      	ldr	r2, [r3, #8]
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	fa02 f303 	lsl.w	r3, r2, r3
 800af72:	69ba      	ldr	r2, [r7, #24]
 800af74:	4313      	orrs	r3, r2
 800af76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	69ba      	ldr	r2, [r7, #24]
 800af7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	f003 0303 	and.w	r3, r3, #3
 800af86:	2b02      	cmp	r3, #2
 800af88:	d123      	bne.n	800afd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	08da      	lsrs	r2, r3, #3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3208      	adds	r2, #8
 800af92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	f003 0307 	and.w	r3, r3, #7
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	220f      	movs	r2, #15
 800afa2:	fa02 f303 	lsl.w	r3, r2, r3
 800afa6:	43db      	mvns	r3, r3
 800afa8:	69ba      	ldr	r2, [r7, #24]
 800afaa:	4013      	ands	r3, r2
 800afac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	691a      	ldr	r2, [r3, #16]
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	f003 0307 	and.w	r3, r3, #7
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	fa02 f303 	lsl.w	r3, r2, r3
 800afbe:	69ba      	ldr	r2, [r7, #24]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	08da      	lsrs	r2, r3, #3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	3208      	adds	r2, #8
 800afcc:	69b9      	ldr	r1, [r7, #24]
 800afce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	005b      	lsls	r3, r3, #1
 800afdc:	2203      	movs	r2, #3
 800afde:	fa02 f303 	lsl.w	r3, r2, r3
 800afe2:	43db      	mvns	r3, r3
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	4013      	ands	r3, r2
 800afe8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f003 0203 	and.w	r2, r3, #3
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	fa02 f303 	lsl.w	r3, r2, r3
 800affa:	69ba      	ldr	r2, [r7, #24]
 800affc:	4313      	orrs	r3, r2
 800affe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	69ba      	ldr	r2, [r7, #24]
 800b004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 80e0 	beq.w	800b1d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b014:	4b2f      	ldr	r3, [pc, #188]	; (800b0d4 <HAL_GPIO_Init+0x238>)
 800b016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b01a:	4a2e      	ldr	r2, [pc, #184]	; (800b0d4 <HAL_GPIO_Init+0x238>)
 800b01c:	f043 0302 	orr.w	r3, r3, #2
 800b020:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b024:	4b2b      	ldr	r3, [pc, #172]	; (800b0d4 <HAL_GPIO_Init+0x238>)
 800b026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b02a:	f003 0302 	and.w	r3, r3, #2
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b032:	4a29      	ldr	r2, [pc, #164]	; (800b0d8 <HAL_GPIO_Init+0x23c>)
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	089b      	lsrs	r3, r3, #2
 800b038:	3302      	adds	r3, #2
 800b03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b03e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	f003 0303 	and.w	r3, r3, #3
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	220f      	movs	r2, #15
 800b04a:	fa02 f303 	lsl.w	r3, r2, r3
 800b04e:	43db      	mvns	r3, r3
 800b050:	69ba      	ldr	r2, [r7, #24]
 800b052:	4013      	ands	r3, r2
 800b054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a20      	ldr	r2, [pc, #128]	; (800b0dc <HAL_GPIO_Init+0x240>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d052      	beq.n	800b104 <HAL_GPIO_Init+0x268>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a1f      	ldr	r2, [pc, #124]	; (800b0e0 <HAL_GPIO_Init+0x244>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d031      	beq.n	800b0ca <HAL_GPIO_Init+0x22e>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a1e      	ldr	r2, [pc, #120]	; (800b0e4 <HAL_GPIO_Init+0x248>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d02b      	beq.n	800b0c6 <HAL_GPIO_Init+0x22a>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a1d      	ldr	r2, [pc, #116]	; (800b0e8 <HAL_GPIO_Init+0x24c>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d025      	beq.n	800b0c2 <HAL_GPIO_Init+0x226>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a1c      	ldr	r2, [pc, #112]	; (800b0ec <HAL_GPIO_Init+0x250>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d01f      	beq.n	800b0be <HAL_GPIO_Init+0x222>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a1b      	ldr	r2, [pc, #108]	; (800b0f0 <HAL_GPIO_Init+0x254>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d019      	beq.n	800b0ba <HAL_GPIO_Init+0x21e>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a1a      	ldr	r2, [pc, #104]	; (800b0f4 <HAL_GPIO_Init+0x258>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d013      	beq.n	800b0b6 <HAL_GPIO_Init+0x21a>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a19      	ldr	r2, [pc, #100]	; (800b0f8 <HAL_GPIO_Init+0x25c>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d00d      	beq.n	800b0b2 <HAL_GPIO_Init+0x216>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a18      	ldr	r2, [pc, #96]	; (800b0fc <HAL_GPIO_Init+0x260>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d007      	beq.n	800b0ae <HAL_GPIO_Init+0x212>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a17      	ldr	r2, [pc, #92]	; (800b100 <HAL_GPIO_Init+0x264>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d101      	bne.n	800b0aa <HAL_GPIO_Init+0x20e>
 800b0a6:	2309      	movs	r3, #9
 800b0a8:	e02d      	b.n	800b106 <HAL_GPIO_Init+0x26a>
 800b0aa:	230a      	movs	r3, #10
 800b0ac:	e02b      	b.n	800b106 <HAL_GPIO_Init+0x26a>
 800b0ae:	2308      	movs	r3, #8
 800b0b0:	e029      	b.n	800b106 <HAL_GPIO_Init+0x26a>
 800b0b2:	2307      	movs	r3, #7
 800b0b4:	e027      	b.n	800b106 <HAL_GPIO_Init+0x26a>
 800b0b6:	2306      	movs	r3, #6
 800b0b8:	e025      	b.n	800b106 <HAL_GPIO_Init+0x26a>
 800b0ba:	2305      	movs	r3, #5
 800b0bc:	e023      	b.n	800b106 <HAL_GPIO_Init+0x26a>
 800b0be:	2304      	movs	r3, #4
 800b0c0:	e021      	b.n	800b106 <HAL_GPIO_Init+0x26a>
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e01f      	b.n	800b106 <HAL_GPIO_Init+0x26a>
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e01d      	b.n	800b106 <HAL_GPIO_Init+0x26a>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e01b      	b.n	800b106 <HAL_GPIO_Init+0x26a>
 800b0ce:	bf00      	nop
 800b0d0:	58000080 	.word	0x58000080
 800b0d4:	58024400 	.word	0x58024400
 800b0d8:	58000400 	.word	0x58000400
 800b0dc:	58020000 	.word	0x58020000
 800b0e0:	58020400 	.word	0x58020400
 800b0e4:	58020800 	.word	0x58020800
 800b0e8:	58020c00 	.word	0x58020c00
 800b0ec:	58021000 	.word	0x58021000
 800b0f0:	58021400 	.word	0x58021400
 800b0f4:	58021800 	.word	0x58021800
 800b0f8:	58021c00 	.word	0x58021c00
 800b0fc:	58022000 	.word	0x58022000
 800b100:	58022400 	.word	0x58022400
 800b104:	2300      	movs	r3, #0
 800b106:	69fa      	ldr	r2, [r7, #28]
 800b108:	f002 0203 	and.w	r2, r2, #3
 800b10c:	0092      	lsls	r2, r2, #2
 800b10e:	4093      	lsls	r3, r2
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	4313      	orrs	r3, r2
 800b114:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b116:	4938      	ldr	r1, [pc, #224]	; (800b1f8 <HAL_GPIO_Init+0x35c>)
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	089b      	lsrs	r3, r3, #2
 800b11c:	3302      	adds	r3, #2
 800b11e:	69ba      	ldr	r2, [r7, #24]
 800b120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	43db      	mvns	r3, r3
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	4013      	ands	r3, r2
 800b134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d003      	beq.n	800b14a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	4313      	orrs	r3, r2
 800b148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b14a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	43db      	mvns	r3, r3
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	4013      	ands	r3, r2
 800b162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d003      	beq.n	800b178 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	4313      	orrs	r3, r2
 800b176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	43db      	mvns	r3, r3
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	4013      	ands	r3, r2
 800b18e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d003      	beq.n	800b1a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b19c:	69ba      	ldr	r2, [r7, #24]
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	43db      	mvns	r3, r3
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d003      	beq.n	800b1ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f47f ae63 	bne.w	800aeb0 <HAL_GPIO_Init+0x14>
  }
}
 800b1ea:	bf00      	nop
 800b1ec:	bf00      	nop
 800b1ee:	3724      	adds	r7, #36	; 0x24
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	58000400 	.word	0x58000400

0800b1fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	691a      	ldr	r2, [r3, #16]
 800b20c:	887b      	ldrh	r3, [r7, #2]
 800b20e:	4013      	ands	r3, r2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b214:	2301      	movs	r3, #1
 800b216:	73fb      	strb	r3, [r7, #15]
 800b218:	e001      	b.n	800b21e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b21a:	2300      	movs	r3, #0
 800b21c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3714      	adds	r7, #20
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	807b      	strh	r3, [r7, #2]
 800b238:	4613      	mov	r3, r2
 800b23a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b23c:	787b      	ldrb	r3, [r7, #1]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b242:	887a      	ldrh	r2, [r7, #2]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b248:	e003      	b.n	800b252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b24a:	887b      	ldrh	r3, [r7, #2]
 800b24c:	041a      	lsls	r2, r3, #16
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	619a      	str	r2, [r3, #24]
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
	...

0800b260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e08b      	b.n	800b38a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d106      	bne.n	800b28c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7f7 fa8c 	bl	80027a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2224      	movs	r2, #36	; 0x24
 800b290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f022 0201 	bic.w	r2, r2, #1
 800b2a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b2b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	689a      	ldr	r2, [r3, #8]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d107      	bne.n	800b2da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2d6:	609a      	str	r2, [r3, #8]
 800b2d8:	e006      	b.n	800b2e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b2e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d108      	bne.n	800b302 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	685a      	ldr	r2, [r3, #4]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2fe:	605a      	str	r2, [r3, #4]
 800b300:	e007      	b.n	800b312 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b310:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	6859      	ldr	r1, [r3, #4]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	4b1d      	ldr	r3, [pc, #116]	; (800b394 <HAL_I2C_Init+0x134>)
 800b31e:	430b      	orrs	r3, r1
 800b320:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68da      	ldr	r2, [r3, #12]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b330:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	691a      	ldr	r2, [r3, #16]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	699b      	ldr	r3, [r3, #24]
 800b342:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	69d9      	ldr	r1, [r3, #28]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a1a      	ldr	r2, [r3, #32]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	430a      	orrs	r2, r1
 800b35a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f042 0201 	orr.w	r2, r2, #1
 800b36a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2220      	movs	r2, #32
 800b376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	02008000 	.word	0x02008000

0800b398 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b08a      	sub	sp, #40	; 0x28
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	607a      	str	r2, [r7, #4]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	817b      	strh	r3, [r7, #10]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b20      	cmp	r3, #32
 800b3ba:	f040 80ef 	bne.w	800b59c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3cc:	d101      	bne.n	800b3d2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	e0e5      	b.n	800b59e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d101      	bne.n	800b3e0 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b3dc:	2302      	movs	r3, #2
 800b3de:	e0de      	b.n	800b59e <HAL_I2C_Master_Transmit_DMA+0x206>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2221      	movs	r2, #33	; 0x21
 800b3ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2210      	movs	r2, #16
 800b3f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	893a      	ldrh	r2, [r7, #8]
 800b408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4a66      	ldr	r2, [pc, #408]	; (800b5a8 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b40e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	4a66      	ldr	r2, [pc, #408]	; (800b5ac <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b414:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	2bff      	cmp	r3, #255	; 0xff
 800b41e:	d906      	bls.n	800b42e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	22ff      	movs	r2, #255	; 0xff
 800b424:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b426:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b42a:	61fb      	str	r3, [r7, #28]
 800b42c:	e007      	b.n	800b43e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b432:	b29a      	uxth	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b438:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b43c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b442:	2b00      	cmp	r3, #0
 800b444:	d01a      	beq.n	800b47c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b44a:	781a      	ldrb	r2, [r3, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b456:	1c5a      	adds	r2, r3, #1
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b460:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b466:	b29b      	uxth	r3, r3
 800b468:	3b01      	subs	r3, #1
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b474:	3b01      	subs	r3, #1
 800b476:	b29a      	uxth	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b480:	2b00      	cmp	r3, #0
 800b482:	d074      	beq.n	800b56e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d022      	beq.n	800b4d2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b490:	4a47      	ldr	r2, [pc, #284]	; (800b5b0 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b492:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b498:	4a46      	ldr	r2, [pc, #280]	; (800b5b4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b49a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b4bc:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b4c2:	f7fc ff17 	bl	80082f4 <HAL_DMA_Start_IT>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d13a      	bne.n	800b546 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b4d0:	e013      	b.n	800b4fa <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2220      	movs	r2, #32
 800b4d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e051      	b.n	800b59e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	3301      	adds	r3, #1
 800b502:	b2da      	uxtb	r2, r3
 800b504:	8979      	ldrh	r1, [r7, #10]
 800b506:	4b2c      	ldr	r3, [pc, #176]	; (800b5b8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f002 f83b 	bl	800d588 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b516:	b29a      	uxth	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b51c:	1ad3      	subs	r3, r2, r3
 800b51e:	b29a      	uxth	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b52c:	2110      	movs	r1, #16
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f002 f85c 	bl	800d5ec <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	e028      	b.n	800b598 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2220      	movs	r2, #32
 800b54a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b55a:	f043 0210 	orr.w	r2, r3, #16
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	e017      	b.n	800b59e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	4a12      	ldr	r2, [pc, #72]	; (800b5bc <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b572:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	b2da      	uxtb	r2, r3
 800b578:	8979      	ldrh	r1, [r7, #10]
 800b57a:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f002 f800 	bl	800d588 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b590:	2101      	movs	r1, #1
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f002 f82a 	bl	800d5ec <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	e000      	b.n	800b59e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b59c:	2302      	movs	r3, #2
  }
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3720      	adds	r7, #32
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	ffff0000 	.word	0xffff0000
 800b5ac:	0800bdf3 	.word	0x0800bdf3
 800b5b0:	0800d1ab 	.word	0x0800d1ab
 800b5b4:	0800d2d9 	.word	0x0800d2d9
 800b5b8:	80002000 	.word	0x80002000
 800b5bc:	0800b983 	.word	0x0800b983

0800b5c0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af02      	add	r7, sp, #8
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	607a      	str	r2, [r7, #4]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	817b      	strh	r3, [r7, #10]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b20      	cmp	r3, #32
 800b5de:	f040 80cd 	bne.w	800b77c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f0:	d101      	bne.n	800b5f6 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	e0c3      	b.n	800b77e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d101      	bne.n	800b604 <HAL_I2C_Master_Receive_DMA+0x44>
 800b600:	2302      	movs	r3, #2
 800b602:	e0bc      	b.n	800b77e <HAL_I2C_Master_Receive_DMA+0x1be>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2222      	movs	r2, #34	; 0x22
 800b610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2210      	movs	r2, #16
 800b618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	893a      	ldrh	r2, [r7, #8]
 800b62c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	4a55      	ldr	r2, [pc, #340]	; (800b788 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800b632:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4a55      	ldr	r2, [pc, #340]	; (800b78c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800b638:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b63e:	b29b      	uxth	r3, r3
 800b640:	2bff      	cmp	r3, #255	; 0xff
 800b642:	d906      	bls.n	800b652 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	22ff      	movs	r2, #255	; 0xff
 800b648:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b64a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b64e:	617b      	str	r3, [r7, #20]
 800b650:	e007      	b.n	800b662 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b656:	b29a      	uxth	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b65c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b660:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b666:	2b00      	cmp	r3, #0
 800b668:	d070      	beq.n	800b74c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d020      	beq.n	800b6b4 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b676:	4a46      	ldr	r2, [pc, #280]	; (800b790 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800b678:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b67e:	4a45      	ldr	r2, [pc, #276]	; (800b794 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800b680:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b686:	2200      	movs	r2, #0
 800b688:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b68e:	2200      	movs	r2, #0
 800b690:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3324      	adds	r3, #36	; 0x24
 800b69c:	4619      	mov	r1, r3
 800b69e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b6a4:	f7fc fe26 	bl	80082f4 <HAL_DMA_Start_IT>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b6ac:	7cfb      	ldrb	r3, [r7, #19]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d138      	bne.n	800b724 <HAL_I2C_Master_Receive_DMA+0x164>
 800b6b2:	e013      	b.n	800b6dc <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	e050      	b.n	800b77e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	8979      	ldrh	r1, [r7, #10]
 800b6e4:	4b2c      	ldr	r3, [pc, #176]	; (800b798 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f001 ff4c 	bl	800d588 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b70a:	2110      	movs	r1, #16
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f001 ff6d 	bl	800d5ec <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b720:	601a      	str	r2, [r3, #0]
 800b722:	e029      	b.n	800b778 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2220      	movs	r2, #32
 800b728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b738:	f043 0210 	orr.w	r2, r3, #16
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	e018      	b.n	800b77e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	4a13      	ldr	r2, [pc, #76]	; (800b79c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800b750:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b756:	b2da      	uxtb	r2, r3
 800b758:	8979      	ldrh	r1, [r7, #10]
 800b75a:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f001 ff10 	bl	800d588 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b770:	2102      	movs	r1, #2
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f001 ff3a 	bl	800d5ec <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	e000      	b.n	800b77e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800b77c:	2302      	movs	r3, #2
  }
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3718      	adds	r7, #24
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	ffff0000 	.word	0xffff0000
 800b78c:	0800bdf3 	.word	0x0800bdf3
 800b790:	0800d241 	.word	0x0800d241
 800b794:	0800d2d9 	.word	0x0800d2d9
 800b798:	80002400 	.word	0x80002400
 800b79c:	0800b983 	.word	0x0800b983

0800b7a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d005      	beq.n	800b7cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	68f9      	ldr	r1, [r7, #12]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	4798      	blx	r3
  }
}
 800b7cc:	bf00      	nop
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	0a1b      	lsrs	r3, r3, #8
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d010      	beq.n	800b81a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	09db      	lsrs	r3, r3, #7
 800b7fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00a      	beq.n	800b81a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b808:	f043 0201 	orr.w	r2, r3, #1
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b818:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	0a9b      	lsrs	r3, r3, #10
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	d010      	beq.n	800b848 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	09db      	lsrs	r3, r3, #7
 800b82a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00a      	beq.n	800b848 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b836:	f043 0208 	orr.w	r2, r3, #8
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b846:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	0a5b      	lsrs	r3, r3, #9
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d010      	beq.n	800b876 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	09db      	lsrs	r3, r3, #7
 800b858:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00a      	beq.n	800b876 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b864:	f043 0202 	orr.w	r2, r3, #2
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b874:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f003 030b 	and.w	r3, r3, #11
 800b882:	2b00      	cmp	r3, #0
 800b884:	d003      	beq.n	800b88e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b886:	68f9      	ldr	r1, [r7, #12]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f001 fb53 	bl	800cf34 <I2C_ITError>
  }
}
 800b88e:	bf00      	nop
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b896:	b480      	push	{r7}
 800b898:	b083      	sub	sp, #12
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b89e:	bf00      	nop
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b083      	sub	sp, #12
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b8b2:	bf00      	nop
 800b8b4:	370c      	adds	r7, #12
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b083      	sub	sp, #12
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b8c6:	bf00      	nop
 800b8c8:	370c      	adds	r7, #12
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b8da:	bf00      	nop
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	70fb      	strb	r3, [r7, #3]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b8f6:	bf00      	nop
 800b8f8:	370c      	adds	r7, #12
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b902:	b480      	push	{r7}
 800b904:	b083      	sub	sp, #12
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b90a:	bf00      	nop
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b916:	b480      	push	{r7}
 800b918:	b083      	sub	sp, #12
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b91e:	bf00      	nop
 800b920:	370c      	adds	r7, #12
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b083      	sub	sp, #12
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b932:	bf00      	nop
 800b934:	370c      	adds	r7, #12
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr

0800b93e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b93e:	b480      	push	{r7}
 800b940:	b083      	sub	sp, #12
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b946:	bf00      	nop
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b952:	b480      	push	{r7}
 800b954:	b083      	sub	sp, #12
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b95a:	bf00      	nop
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b966:	b480      	push	{r7}
 800b968:	b083      	sub	sp, #12
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b974:	b2db      	uxtb	r3, r3
}
 800b976:	4618      	mov	r0, r3
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b088      	sub	sp, #32
 800b986:	af02      	add	r7, sp, #8
 800b988:	60f8      	str	r0, [r7, #12]
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d101      	bne.n	800b9a0 <I2C_Master_ISR_IT+0x1e>
 800b99c:	2302      	movs	r3, #2
 800b99e:	e120      	b.n	800bbe2 <I2C_Master_ISR_IT+0x260>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	091b      	lsrs	r3, r3, #4
 800b9ac:	f003 0301 	and.w	r3, r3, #1
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d013      	beq.n	800b9dc <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	091b      	lsrs	r3, r3, #4
 800b9b8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00d      	beq.n	800b9dc <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2210      	movs	r2, #16
 800b9c6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9cc:	f043 0204 	orr.w	r2, r3, #4
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f001 fbc4 	bl	800d162 <I2C_Flush_TXDR>
 800b9da:	e0ed      	b.n	800bbb8 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	089b      	lsrs	r3, r3, #2
 800b9e0:	f003 0301 	and.w	r3, r3, #1
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d023      	beq.n	800ba30 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	089b      	lsrs	r3, r3, #2
 800b9ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d01d      	beq.n	800ba30 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	f023 0304 	bic.w	r3, r3, #4
 800b9fa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba06:	b2d2      	uxtb	r2, r2
 800ba08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0e:	1c5a      	adds	r2, r3, #1
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	3b01      	subs	r3, #1
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba2e:	e0c3      	b.n	800bbb8 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	099b      	lsrs	r3, r3, #6
 800ba34:	f003 0301 	and.w	r3, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d12a      	bne.n	800ba92 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	085b      	lsrs	r3, r3, #1
 800ba40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d024      	beq.n	800ba92 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	085b      	lsrs	r3, r3, #1
 800ba4c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d01e      	beq.n	800ba92 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 80ac 	beq.w	800bbb8 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba64:	781a      	ldrb	r2, [r3, #0]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800ba90:	e092      	b.n	800bbb8 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	09db      	lsrs	r3, r3, #7
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d05d      	beq.n	800bb5a <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	099b      	lsrs	r3, r3, #6
 800baa2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d057      	beq.n	800bb5a <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baae:	b29b      	uxth	r3, r3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d040      	beq.n	800bb36 <I2C_Master_ISR_IT+0x1b4>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d13c      	bne.n	800bb36 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bac8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bace:	b29b      	uxth	r3, r3
 800bad0:	2bff      	cmp	r3, #255	; 0xff
 800bad2:	d90e      	bls.n	800baf2 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	22ff      	movs	r2, #255	; 0xff
 800bad8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	8a79      	ldrh	r1, [r7, #18]
 800bae2:	2300      	movs	r3, #0
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f001 fd4c 	bl	800d588 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800baf0:	e032      	b.n	800bb58 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb04:	d00b      	beq.n	800bb1e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb10:	8a79      	ldrh	r1, [r7, #18]
 800bb12:	2000      	movs	r0, #0
 800bb14:	9000      	str	r0, [sp, #0]
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f001 fd36 	bl	800d588 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb1c:	e01c      	b.n	800bb58 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	8a79      	ldrh	r1, [r7, #18]
 800bb26:	2300      	movs	r3, #0
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f001 fd2a 	bl	800d588 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb34:	e010      	b.n	800bb58 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb44:	d003      	beq.n	800bb4e <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 fdde 	bl	800c708 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb4c:	e034      	b.n	800bbb8 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bb4e:	2140      	movs	r1, #64	; 0x40
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f001 f9ef 	bl	800cf34 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb56:	e02f      	b.n	800bbb8 <I2C_Master_ISR_IT+0x236>
 800bb58:	e02e      	b.n	800bbb8 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	099b      	lsrs	r3, r3, #6
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d028      	beq.n	800bbb8 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	099b      	lsrs	r3, r3, #6
 800bb6a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d022      	beq.n	800bbb8 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d119      	bne.n	800bbb0 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb8a:	d015      	beq.n	800bbb8 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb94:	d108      	bne.n	800bba8 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bba4:	605a      	str	r2, [r3, #4]
 800bba6:	e007      	b.n	800bbb8 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f000 fdad 	bl	800c708 <I2C_ITMasterSeqCplt>
 800bbae:	e003      	b.n	800bbb8 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bbb0:	2140      	movs	r1, #64	; 0x40
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f001 f9be 	bl	800cf34 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	095b      	lsrs	r3, r3, #5
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d009      	beq.n	800bbd8 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	095b      	lsrs	r3, r3, #5
 800bbc8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d003      	beq.n	800bbd8 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bbd0:	6979      	ldr	r1, [r7, #20]
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f000 fe34 	bl	800c840 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b086      	sub	sp, #24
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	60f8      	str	r0, [r7, #12]
 800bbf2:	60b9      	str	r1, [r7, #8]
 800bbf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d101      	bne.n	800bc0e <I2C_Slave_ISR_IT+0x24>
 800bc0a:	2302      	movs	r3, #2
 800bc0c:	e0ed      	b.n	800bdea <I2C_Slave_ISR_IT+0x200>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2201      	movs	r2, #1
 800bc12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	095b      	lsrs	r3, r3, #5
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00a      	beq.n	800bc38 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	095b      	lsrs	r3, r3, #5
 800bc26:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d004      	beq.n	800bc38 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bc2e:	6939      	ldr	r1, [r7, #16]
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f000 fecf 	bl	800c9d4 <I2C_ITSlaveCplt>
 800bc36:	e0d3      	b.n	800bde0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	091b      	lsrs	r3, r3, #4
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d04d      	beq.n	800bce0 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	091b      	lsrs	r3, r3, #4
 800bc48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d047      	beq.n	800bce0 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d128      	bne.n	800bcac <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	2b28      	cmp	r3, #40	; 0x28
 800bc64:	d108      	bne.n	800bc78 <I2C_Slave_ISR_IT+0x8e>
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc6c:	d104      	bne.n	800bc78 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bc6e:	6939      	ldr	r1, [r7, #16]
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f001 f909 	bl	800ce88 <I2C_ITListenCplt>
 800bc76:	e032      	b.n	800bcde <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b29      	cmp	r3, #41	; 0x29
 800bc82:	d10e      	bne.n	800bca2 <I2C_Slave_ISR_IT+0xb8>
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc8a:	d00a      	beq.n	800bca2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2210      	movs	r2, #16
 800bc92:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f001 fa64 	bl	800d162 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f000 fd71 	bl	800c782 <I2C_ITSlaveSeqCplt>
 800bca0:	e01d      	b.n	800bcde <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2210      	movs	r2, #16
 800bca8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bcaa:	e096      	b.n	800bdda <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2210      	movs	r2, #16
 800bcb2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcb8:	f043 0204 	orr.w	r2, r3, #4
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d004      	beq.n	800bcd0 <I2C_Slave_ISR_IT+0xe6>
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bccc:	f040 8085 	bne.w	800bdda <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f001 f92c 	bl	800cf34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bcdc:	e07d      	b.n	800bdda <I2C_Slave_ISR_IT+0x1f0>
 800bcde:	e07c      	b.n	800bdda <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	089b      	lsrs	r3, r3, #2
 800bce4:	f003 0301 	and.w	r3, r3, #1
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d030      	beq.n	800bd4e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	089b      	lsrs	r3, r3, #2
 800bcf0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d02a      	beq.n	800bd4e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d018      	beq.n	800bd34 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0c:	b2d2      	uxtb	r2, r2
 800bd0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d14f      	bne.n	800bdde <I2C_Slave_ISR_IT+0x1f4>
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd44:	d04b      	beq.n	800bdde <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f000 fd1b 	bl	800c782 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bd4c:	e047      	b.n	800bdde <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	08db      	lsrs	r3, r3, #3
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00a      	beq.n	800bd70 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	08db      	lsrs	r3, r3, #3
 800bd5e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d004      	beq.n	800bd70 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bd66:	6939      	ldr	r1, [r7, #16]
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f000 fc49 	bl	800c600 <I2C_ITAddrCplt>
 800bd6e:	e037      	b.n	800bde0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	085b      	lsrs	r3, r3, #1
 800bd74:	f003 0301 	and.w	r3, r3, #1
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d031      	beq.n	800bde0 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	085b      	lsrs	r3, r3, #1
 800bd80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d02b      	beq.n	800bde0 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d018      	beq.n	800bdc4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd96:	781a      	ldrb	r2, [r3, #0]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	851a      	strh	r2, [r3, #40]	; 0x28
 800bdc2:	e00d      	b.n	800bde0 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bdca:	d002      	beq.n	800bdd2 <I2C_Slave_ISR_IT+0x1e8>
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d106      	bne.n	800bde0 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f000 fcd5 	bl	800c782 <I2C_ITSlaveSeqCplt>
 800bdd8:	e002      	b.n	800bde0 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800bdda:	bf00      	nop
 800bddc:	e000      	b.n	800bde0 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800bdde:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3718      	adds	r7, #24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b088      	sub	sp, #32
 800bdf6:	af02      	add	r7, sp, #8
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	60b9      	str	r1, [r7, #8]
 800bdfc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be04:	2b01      	cmp	r3, #1
 800be06:	d101      	bne.n	800be0c <I2C_Master_ISR_DMA+0x1a>
 800be08:	2302      	movs	r3, #2
 800be0a:	e0e1      	b.n	800bfd0 <I2C_Master_ISR_DMA+0x1de>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	091b      	lsrs	r3, r3, #4
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d017      	beq.n	800be50 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	091b      	lsrs	r3, r3, #4
 800be24:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d011      	beq.n	800be50 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2210      	movs	r2, #16
 800be32:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be38:	f043 0204 	orr.w	r2, r3, #4
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800be40:	2120      	movs	r1, #32
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f001 fbd2 	bl	800d5ec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f001 f98a 	bl	800d162 <I2C_Flush_TXDR>
 800be4e:	e0ba      	b.n	800bfc6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	09db      	lsrs	r3, r3, #7
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d072      	beq.n	800bf42 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	099b      	lsrs	r3, r3, #6
 800be60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800be64:	2b00      	cmp	r3, #0
 800be66:	d06c      	beq.n	800bf42 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be76:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d04e      	beq.n	800bf20 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be8e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be94:	b29b      	uxth	r3, r3
 800be96:	2bff      	cmp	r3, #255	; 0xff
 800be98:	d906      	bls.n	800bea8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	22ff      	movs	r2, #255	; 0xff
 800be9e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800bea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bea4:	617b      	str	r3, [r7, #20]
 800bea6:	e010      	b.n	800beca <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beac:	b29a      	uxth	r2, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800beba:	d003      	beq.n	800bec4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	617b      	str	r3, [r7, #20]
 800bec2:	e002      	b.n	800beca <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800bec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bec8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bece:	b2da      	uxtb	r2, r3
 800bed0:	8a79      	ldrh	r1, [r7, #18]
 800bed2:	2300      	movs	r3, #0
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f001 fb55 	bl	800d588 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	b29a      	uxth	r2, r3
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b22      	cmp	r3, #34	; 0x22
 800befa:	d108      	bne.n	800bf0e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf0a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bf0c:	e05b      	b.n	800bfc6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf1c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800bf1e:	e052      	b.n	800bfc6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf2e:	d003      	beq.n	800bf38 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f000 fbe9 	bl	800c708 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800bf36:	e046      	b.n	800bfc6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf38:	2140      	movs	r1, #64	; 0x40
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f000 fffa 	bl	800cf34 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800bf40:	e041      	b.n	800bfc6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	099b      	lsrs	r3, r3, #6
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d029      	beq.n	800bfa2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	099b      	lsrs	r3, r3, #6
 800bf52:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d023      	beq.n	800bfa2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d119      	bne.n	800bf98 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf72:	d027      	beq.n	800bfc4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bf7c:	d108      	bne.n	800bf90 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf8c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800bf8e:	e019      	b.n	800bfc4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f000 fbb9 	bl	800c708 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800bf96:	e015      	b.n	800bfc4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bf98:	2140      	movs	r1, #64	; 0x40
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f000 ffca 	bl	800cf34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bfa0:	e010      	b.n	800bfc4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	095b      	lsrs	r3, r3, #5
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00b      	beq.n	800bfc6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	095b      	lsrs	r3, r3, #5
 800bfb2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d005      	beq.n	800bfc6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800bfba:	68b9      	ldr	r1, [r7, #8]
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f000 fc3f 	bl	800c840 <I2C_ITMasterCplt>
 800bfc2:	e000      	b.n	800bfc6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800bfc4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3718      	adds	r7, #24
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b088      	sub	sp, #32
 800bfdc:	af02      	add	r7, sp, #8
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800bfe4:	4b92      	ldr	r3, [pc, #584]	; (800c230 <I2C_Mem_ISR_DMA+0x258>)
 800bfe6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d101      	bne.n	800bff6 <I2C_Mem_ISR_DMA+0x1e>
 800bff2:	2302      	movs	r3, #2
 800bff4:	e118      	b.n	800c228 <I2C_Mem_ISR_DMA+0x250>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2201      	movs	r2, #1
 800bffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	091b      	lsrs	r3, r3, #4
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d017      	beq.n	800c03a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	091b      	lsrs	r3, r3, #4
 800c00e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c012:	2b00      	cmp	r3, #0
 800c014:	d011      	beq.n	800c03a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2210      	movs	r2, #16
 800c01c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c022:	f043 0204 	orr.w	r2, r3, #4
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c02a:	2120      	movs	r1, #32
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	f001 fadd 	bl	800d5ec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f001 f895 	bl	800d162 <I2C_Flush_TXDR>
 800c038:	e0f1      	b.n	800c21e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	085b      	lsrs	r3, r3, #1
 800c03e:	f003 0301 	and.w	r3, r3, #1
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00f      	beq.n	800c066 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	085b      	lsrs	r3, r3, #1
 800c04a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d009      	beq.n	800c066 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c05a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c062:	651a      	str	r2, [r3, #80]	; 0x50
 800c064:	e0db      	b.n	800c21e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	09db      	lsrs	r3, r3, #7
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d060      	beq.n	800c134 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	099b      	lsrs	r3, r3, #6
 800c076:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d05a      	beq.n	800c134 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c07e:	2101      	movs	r1, #1
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f001 fb37 	bl	800d6f4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c086:	2110      	movs	r1, #16
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f001 faaf 	bl	800d5ec <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c092:	b29b      	uxth	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d048      	beq.n	800c12a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	2bff      	cmp	r3, #255	; 0xff
 800c0a0:	d910      	bls.n	800c0c4 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	22ff      	movs	r2, #255	; 0xff
 800c0a6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ac:	b299      	uxth	r1, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f001 fa63 	bl	800d588 <I2C_TransferConfig>
 800c0c2:	e011      	b.n	800c0e8 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0d2:	b299      	uxth	r1, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9300      	str	r3, [sp, #0]
 800c0de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f001 fa50 	bl	800d588 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b22      	cmp	r3, #34	; 0x22
 800c104:	d108      	bne.n	800c118 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c114:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c116:	e082      	b.n	800c21e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c126:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c128:	e079      	b.n	800c21e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c12a:	2140      	movs	r1, #64	; 0x40
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f000 ff01 	bl	800cf34 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c132:	e074      	b.n	800c21e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	099b      	lsrs	r3, r3, #6
 800c138:	f003 0301 	and.w	r3, r3, #1
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d05e      	beq.n	800c1fe <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	099b      	lsrs	r3, r3, #6
 800c144:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d058      	beq.n	800c1fe <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c14c:	2101      	movs	r1, #1
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f001 fad0 	bl	800d6f4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c154:	2110      	movs	r1, #16
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f001 fa48 	bl	800d5ec <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b22      	cmp	r3, #34	; 0x22
 800c166:	d101      	bne.n	800c16c <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c168:	4b32      	ldr	r3, [pc, #200]	; (800c234 <I2C_Mem_ISR_DMA+0x25c>)
 800c16a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c170:	b29b      	uxth	r3, r3
 800c172:	2bff      	cmp	r3, #255	; 0xff
 800c174:	d910      	bls.n	800c198 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	22ff      	movs	r2, #255	; 0xff
 800c17a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c180:	b299      	uxth	r1, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c186:	b2da      	uxtb	r2, r3
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f001 f9f9 	bl	800d588 <I2C_TransferConfig>
 800c196:	e011      	b.n	800c1bc <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a6:	b299      	uxth	r1, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1ac:	b2da      	uxtb	r2, r3
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f001 f9e6 	bl	800d588 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b22      	cmp	r3, #34	; 0x22
 800c1d8:	d108      	bne.n	800c1ec <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c1e8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c1ea:	e018      	b.n	800c21e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1fa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c1fc:	e00f      	b.n	800c21e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	095b      	lsrs	r3, r3, #5
 800c202:	f003 0301 	and.w	r3, r3, #1
 800c206:	2b00      	cmp	r3, #0
 800c208:	d009      	beq.n	800c21e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	095b      	lsrs	r3, r3, #5
 800c20e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c212:	2b00      	cmp	r3, #0
 800c214:	d003      	beq.n	800c21e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f000 fb11 	bl	800c840 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c226:	2300      	movs	r3, #0
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	80002000 	.word	0x80002000
 800c234:	80002400 	.word	0x80002400

0800c238 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b088      	sub	sp, #32
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c248:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c24a:	2300      	movs	r3, #0
 800c24c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c254:	2b01      	cmp	r3, #1
 800c256:	d101      	bne.n	800c25c <I2C_Slave_ISR_DMA+0x24>
 800c258:	2302      	movs	r3, #2
 800c25a:	e1cc      	b.n	800c5f6 <I2C_Slave_ISR_DMA+0x3be>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2201      	movs	r2, #1
 800c260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	095b      	lsrs	r3, r3, #5
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00a      	beq.n	800c286 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	095b      	lsrs	r3, r3, #5
 800c274:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d004      	beq.n	800c286 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c27c:	68b9      	ldr	r1, [r7, #8]
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f000 fba8 	bl	800c9d4 <I2C_ITSlaveCplt>
 800c284:	e1b2      	b.n	800c5ec <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	091b      	lsrs	r3, r3, #4
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f000 819c 	beq.w	800c5cc <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	091b      	lsrs	r3, r3, #4
 800c298:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f000 8195 	beq.w	800c5cc <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	0b9b      	lsrs	r3, r3, #14
 800c2a6:	f003 0301 	and.w	r3, r3, #1
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d106      	bne.n	800c2bc <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	0bdb      	lsrs	r3, r3, #15
 800c2b2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f000 8181 	beq.w	800c5be <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d07c      	beq.n	800c3be <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	0bdb      	lsrs	r3, r3, #15
 800c2c8:	f003 0301 	and.w	r3, r3, #1
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d076      	beq.n	800c3be <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a75      	ldr	r2, [pc, #468]	; (800c4ac <I2C_Slave_ISR_DMA+0x274>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d059      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a73      	ldr	r2, [pc, #460]	; (800c4b0 <I2C_Slave_ISR_DMA+0x278>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d053      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a71      	ldr	r2, [pc, #452]	; (800c4b4 <I2C_Slave_ISR_DMA+0x27c>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d04d      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a6f      	ldr	r2, [pc, #444]	; (800c4b8 <I2C_Slave_ISR_DMA+0x280>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d047      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a6d      	ldr	r2, [pc, #436]	; (800c4bc <I2C_Slave_ISR_DMA+0x284>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d041      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a6b      	ldr	r2, [pc, #428]	; (800c4c0 <I2C_Slave_ISR_DMA+0x288>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d03b      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a69      	ldr	r2, [pc, #420]	; (800c4c4 <I2C_Slave_ISR_DMA+0x28c>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d035      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a67      	ldr	r2, [pc, #412]	; (800c4c8 <I2C_Slave_ISR_DMA+0x290>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d02f      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a65      	ldr	r2, [pc, #404]	; (800c4cc <I2C_Slave_ISR_DMA+0x294>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d029      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a63      	ldr	r2, [pc, #396]	; (800c4d0 <I2C_Slave_ISR_DMA+0x298>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d023      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a61      	ldr	r2, [pc, #388]	; (800c4d4 <I2C_Slave_ISR_DMA+0x29c>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d01d      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a5f      	ldr	r2, [pc, #380]	; (800c4d8 <I2C_Slave_ISR_DMA+0x2a0>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d017      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a5d      	ldr	r2, [pc, #372]	; (800c4dc <I2C_Slave_ISR_DMA+0x2a4>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d011      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a5b      	ldr	r2, [pc, #364]	; (800c4e0 <I2C_Slave_ISR_DMA+0x2a8>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d00b      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a59      	ldr	r2, [pc, #356]	; (800c4e4 <I2C_Slave_ISR_DMA+0x2ac>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d005      	beq.n	800c390 <I2C_Slave_ISR_DMA+0x158>
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a57      	ldr	r2, [pc, #348]	; (800c4e8 <I2C_Slave_ISR_DMA+0x2b0>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d109      	bne.n	800c3a4 <I2C_Slave_ISR_DMA+0x16c>
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	bf0c      	ite	eq
 800c39c:	2301      	moveq	r3, #1
 800c39e:	2300      	movne	r3, #0
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	e008      	b.n	800c3b6 <I2C_Slave_ISR_DMA+0x17e>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	bf0c      	ite	eq
 800c3b0:	2301      	moveq	r3, #1
 800c3b2:	2300      	movne	r3, #0
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d001      	beq.n	800c3be <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 809f 	beq.w	800c506 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	0b9b      	lsrs	r3, r3, #14
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 8098 	beq.w	800c506 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a33      	ldr	r2, [pc, #204]	; (800c4ac <I2C_Slave_ISR_DMA+0x274>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d059      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a31      	ldr	r2, [pc, #196]	; (800c4b0 <I2C_Slave_ISR_DMA+0x278>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d053      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a2f      	ldr	r2, [pc, #188]	; (800c4b4 <I2C_Slave_ISR_DMA+0x27c>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d04d      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a2d      	ldr	r2, [pc, #180]	; (800c4b8 <I2C_Slave_ISR_DMA+0x280>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d047      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a2b      	ldr	r2, [pc, #172]	; (800c4bc <I2C_Slave_ISR_DMA+0x284>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d041      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a29      	ldr	r2, [pc, #164]	; (800c4c0 <I2C_Slave_ISR_DMA+0x288>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d03b      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a27      	ldr	r2, [pc, #156]	; (800c4c4 <I2C_Slave_ISR_DMA+0x28c>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d035      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a25      	ldr	r2, [pc, #148]	; (800c4c8 <I2C_Slave_ISR_DMA+0x290>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d02f      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a23      	ldr	r2, [pc, #140]	; (800c4cc <I2C_Slave_ISR_DMA+0x294>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d029      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a21      	ldr	r2, [pc, #132]	; (800c4d0 <I2C_Slave_ISR_DMA+0x298>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d023      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a1f      	ldr	r2, [pc, #124]	; (800c4d4 <I2C_Slave_ISR_DMA+0x29c>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d01d      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a1d      	ldr	r2, [pc, #116]	; (800c4d8 <I2C_Slave_ISR_DMA+0x2a0>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d017      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a1b      	ldr	r2, [pc, #108]	; (800c4dc <I2C_Slave_ISR_DMA+0x2a4>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d011      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a19      	ldr	r2, [pc, #100]	; (800c4e0 <I2C_Slave_ISR_DMA+0x2a8>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d00b      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a17      	ldr	r2, [pc, #92]	; (800c4e4 <I2C_Slave_ISR_DMA+0x2ac>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d005      	beq.n	800c496 <I2C_Slave_ISR_DMA+0x25e>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a15      	ldr	r2, [pc, #84]	; (800c4e8 <I2C_Slave_ISR_DMA+0x2b0>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d12a      	bne.n	800c4ec <I2C_Slave_ISR_DMA+0x2b4>
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	bf0c      	ite	eq
 800c4a2:	2301      	moveq	r3, #1
 800c4a4:	2300      	movne	r3, #0
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	e029      	b.n	800c4fe <I2C_Slave_ISR_DMA+0x2c6>
 800c4aa:	bf00      	nop
 800c4ac:	40020010 	.word	0x40020010
 800c4b0:	40020028 	.word	0x40020028
 800c4b4:	40020040 	.word	0x40020040
 800c4b8:	40020058 	.word	0x40020058
 800c4bc:	40020070 	.word	0x40020070
 800c4c0:	40020088 	.word	0x40020088
 800c4c4:	400200a0 	.word	0x400200a0
 800c4c8:	400200b8 	.word	0x400200b8
 800c4cc:	40020410 	.word	0x40020410
 800c4d0:	40020428 	.word	0x40020428
 800c4d4:	40020440 	.word	0x40020440
 800c4d8:	40020458 	.word	0x40020458
 800c4dc:	40020470 	.word	0x40020470
 800c4e0:	40020488 	.word	0x40020488
 800c4e4:	400204a0 	.word	0x400204a0
 800c4e8:	400204b8 	.word	0x400204b8
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bf0c      	ite	eq
 800c4f8:	2301      	moveq	r3, #1
 800c4fa:	2300      	movne	r3, #0
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d001      	beq.n	800c506 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c502:	2301      	movs	r3, #1
 800c504:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d128      	bne.n	800c55e <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b28      	cmp	r3, #40	; 0x28
 800c516:	d108      	bne.n	800c52a <I2C_Slave_ISR_DMA+0x2f2>
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c51e:	d104      	bne.n	800c52a <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c520:	68b9      	ldr	r1, [r7, #8]
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	f000 fcb0 	bl	800ce88 <I2C_ITListenCplt>
 800c528:	e048      	b.n	800c5bc <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b29      	cmp	r3, #41	; 0x29
 800c534:	d10e      	bne.n	800c554 <I2C_Slave_ISR_DMA+0x31c>
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c53c:	d00a      	beq.n	800c554 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2210      	movs	r2, #16
 800c544:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f000 fe0b 	bl	800d162 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f000 f918 	bl	800c782 <I2C_ITSlaveSeqCplt>
 800c552:	e033      	b.n	800c5bc <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2210      	movs	r2, #16
 800c55a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c55c:	e034      	b.n	800c5c8 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2210      	movs	r2, #16
 800c564:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c56a:	f043 0204 	orr.w	r2, r3, #4
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c578:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d003      	beq.n	800c588 <I2C_Slave_ISR_DMA+0x350>
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c586:	d11f      	bne.n	800c5c8 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c588:	7dfb      	ldrb	r3, [r7, #23]
 800c58a:	2b21      	cmp	r3, #33	; 0x21
 800c58c:	d002      	beq.n	800c594 <I2C_Slave_ISR_DMA+0x35c>
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	2b29      	cmp	r3, #41	; 0x29
 800c592:	d103      	bne.n	800c59c <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2221      	movs	r2, #33	; 0x21
 800c598:	631a      	str	r2, [r3, #48]	; 0x30
 800c59a:	e008      	b.n	800c5ae <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
 800c59e:	2b22      	cmp	r3, #34	; 0x22
 800c5a0:	d002      	beq.n	800c5a8 <I2C_Slave_ISR_DMA+0x370>
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c5a6:	d102      	bne.n	800c5ae <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2222      	movs	r2, #34	; 0x22
 800c5ac:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f000 fcbd 	bl	800cf34 <I2C_ITError>
      if (treatdmanack == 1U)
 800c5ba:	e005      	b.n	800c5c8 <I2C_Slave_ISR_DMA+0x390>
 800c5bc:	e004      	b.n	800c5c8 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2210      	movs	r2, #16
 800c5c4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c5c6:	e011      	b.n	800c5ec <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c5c8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c5ca:	e00f      	b.n	800c5ec <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	08db      	lsrs	r3, r3, #3
 800c5d0:	f003 0301 	and.w	r3, r3, #1
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d009      	beq.n	800c5ec <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	08db      	lsrs	r3, r3, #3
 800c5dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d003      	beq.n	800c5ec <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c5e4:	68b9      	ldr	r1, [r7, #8]
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	f000 f80a 	bl	800c600 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3720      	adds	r7, #32
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop

0800c600 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c610:	b2db      	uxtb	r3, r3
 800c612:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c616:	2b28      	cmp	r3, #40	; 0x28
 800c618:	d16a      	bne.n	800c6f0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	699b      	ldr	r3, [r3, #24]
 800c620:	0c1b      	lsrs	r3, r3, #16
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f003 0301 	and.w	r3, r3, #1
 800c628:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	0c1b      	lsrs	r3, r3, #16
 800c632:	b29b      	uxth	r3, r3
 800c634:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c638:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	b29b      	uxth	r3, r3
 800c642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c646:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c654:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d138      	bne.n	800c6d0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c65e:	897b      	ldrh	r3, [r7, #10]
 800c660:	09db      	lsrs	r3, r3, #7
 800c662:	b29a      	uxth	r2, r3
 800c664:	89bb      	ldrh	r3, [r7, #12]
 800c666:	4053      	eors	r3, r2
 800c668:	b29b      	uxth	r3, r3
 800c66a:	f003 0306 	and.w	r3, r3, #6
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d11c      	bne.n	800c6ac <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c672:	897b      	ldrh	r3, [r7, #10]
 800c674:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c67a:	1c5a      	adds	r2, r3, #1
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c684:	2b02      	cmp	r3, #2
 800c686:	d13b      	bne.n	800c700 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2208      	movs	r2, #8
 800c694:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c69e:	89ba      	ldrh	r2, [r7, #12]
 800c6a0:	7bfb      	ldrb	r3, [r7, #15]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7ff f91e 	bl	800b8e6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c6aa:	e029      	b.n	800c700 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c6ac:	893b      	ldrh	r3, [r7, #8]
 800c6ae:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f001 f81d 	bl	800d6f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6c2:	89ba      	ldrh	r2, [r7, #12]
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff f90c 	bl	800b8e6 <HAL_I2C_AddrCallback>
}
 800c6ce:	e017      	b.n	800c700 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f001 f80d 	bl	800d6f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6e2:	89ba      	ldrh	r2, [r7, #12]
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f7ff f8fc 	bl	800b8e6 <HAL_I2C_AddrCallback>
}
 800c6ee:	e007      	b.n	800c700 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2208      	movs	r2, #8
 800c6f6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c700:	bf00      	nop
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b21      	cmp	r3, #33	; 0x21
 800c722:	d115      	bne.n	800c750 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2220      	movs	r2, #32
 800c728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2211      	movs	r2, #17
 800c730:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c738:	2101      	movs	r1, #1
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 ffda 	bl	800d6f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7ff f8a4 	bl	800b896 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c74e:	e014      	b.n	800c77a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2220      	movs	r2, #32
 800c754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2212      	movs	r2, #18
 800c75c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c764:	2102      	movs	r1, #2
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 ffc4 	bl	800d6f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7ff f898 	bl	800b8aa <HAL_I2C_MasterRxCpltCallback>
}
 800c77a:	bf00      	nop
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b084      	sub	sp, #16
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	0b9b      	lsrs	r3, r3, #14
 800c79e:	f003 0301 	and.w	r3, r3, #1
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d008      	beq.n	800c7b8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	e00d      	b.n	800c7d4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	0bdb      	lsrs	r3, r3, #15
 800c7bc:	f003 0301 	and.w	r3, r3, #1
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d007      	beq.n	800c7d4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c7d2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	2b29      	cmp	r3, #41	; 0x29
 800c7de:	d112      	bne.n	800c806 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2228      	movs	r2, #40	; 0x28
 800c7e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2221      	movs	r2, #33	; 0x21
 800c7ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c7ee:	2101      	movs	r1, #1
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 ff7f 	bl	800d6f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff f85d 	bl	800b8be <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c804:	e017      	b.n	800c836 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	2b2a      	cmp	r3, #42	; 0x2a
 800c810:	d111      	bne.n	800c836 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2228      	movs	r2, #40	; 0x28
 800c816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2222      	movs	r2, #34	; 0x22
 800c81e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c820:	2102      	movs	r1, #2
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 ff66 	bl	800d6f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7ff f84e 	bl	800b8d2 <HAL_I2C_SlaveRxCpltCallback>
}
 800c836:	bf00      	nop
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
	...

0800c840 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2220      	movs	r2, #32
 800c854:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	2b21      	cmp	r3, #33	; 0x21
 800c860:	d107      	bne.n	800c872 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c862:	2101      	movs	r1, #1
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 ff45 	bl	800d6f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2211      	movs	r2, #17
 800c86e:	631a      	str	r2, [r3, #48]	; 0x30
 800c870:	e00c      	b.n	800c88c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b22      	cmp	r3, #34	; 0x22
 800c87c:	d106      	bne.n	800c88c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c87e:	2102      	movs	r1, #2
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 ff37 	bl	800d6f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2212      	movs	r2, #18
 800c88a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6859      	ldr	r1, [r3, #4]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	4b4d      	ldr	r3, [pc, #308]	; (800c9cc <I2C_ITMasterCplt+0x18c>)
 800c898:	400b      	ands	r3, r1
 800c89a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4a4a      	ldr	r2, [pc, #296]	; (800c9d0 <I2C_ITMasterCplt+0x190>)
 800c8a6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	091b      	lsrs	r3, r3, #4
 800c8ac:	f003 0301 	and.w	r3, r3, #1
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d009      	beq.n	800c8c8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	2210      	movs	r2, #16
 800c8ba:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8c0:	f043 0204 	orr.w	r2, r3, #4
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b60      	cmp	r3, #96	; 0x60
 800c8d2:	d10b      	bne.n	800c8ec <I2C_ITMasterCplt+0xac>
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	089b      	lsrs	r3, r3, #2
 800c8d8:	f003 0301 	and.w	r3, r3, #1
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d005      	beq.n	800c8ec <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fc38 	bl	800d162 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8f6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b60      	cmp	r3, #96	; 0x60
 800c902:	d002      	beq.n	800c90a <I2C_ITMasterCplt+0xca>
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d006      	beq.n	800c918 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c90e:	4619      	mov	r1, r3
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 fb0f 	bl	800cf34 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c916:	e054      	b.n	800c9c2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b21      	cmp	r3, #33	; 0x21
 800c922:	d124      	bne.n	800c96e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2220      	movs	r2, #32
 800c928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2b40      	cmp	r3, #64	; 0x40
 800c93c:	d10b      	bne.n	800c956 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7fe ffe1 	bl	800b916 <HAL_I2C_MemTxCpltCallback>
}
 800c954:	e035      	b.n	800c9c2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7fe ff95 	bl	800b896 <HAL_I2C_MasterTxCpltCallback>
}
 800c96c:	e029      	b.n	800c9c2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c974:	b2db      	uxtb	r3, r3
 800c976:	2b22      	cmp	r3, #34	; 0x22
 800c978:	d123      	bne.n	800c9c2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2220      	movs	r2, #32
 800c97e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b40      	cmp	r3, #64	; 0x40
 800c992:	d10b      	bne.n	800c9ac <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7fe ffc0 	bl	800b92a <HAL_I2C_MemRxCpltCallback>
}
 800c9aa:	e00a      	b.n	800c9c2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7fe ff74 	bl	800b8aa <HAL_I2C_MasterRxCpltCallback>
}
 800c9c2:	bf00      	nop
 800c9c4:	3718      	adds	r7, #24
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	fe00e800 	.word	0xfe00e800
 800c9d0:	ffff0000 	.word	0xffff0000

0800c9d4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ee:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9f6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2220      	movs	r2, #32
 800c9fe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ca00:	7afb      	ldrb	r3, [r7, #11]
 800ca02:	2b21      	cmp	r3, #33	; 0x21
 800ca04:	d002      	beq.n	800ca0c <I2C_ITSlaveCplt+0x38>
 800ca06:	7afb      	ldrb	r3, [r7, #11]
 800ca08:	2b29      	cmp	r3, #41	; 0x29
 800ca0a:	d108      	bne.n	800ca1e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ca0c:	f248 0101 	movw	r1, #32769	; 0x8001
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fe6f 	bl	800d6f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2221      	movs	r2, #33	; 0x21
 800ca1a:	631a      	str	r2, [r3, #48]	; 0x30
 800ca1c:	e019      	b.n	800ca52 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ca1e:	7afb      	ldrb	r3, [r7, #11]
 800ca20:	2b22      	cmp	r3, #34	; 0x22
 800ca22:	d002      	beq.n	800ca2a <I2C_ITSlaveCplt+0x56>
 800ca24:	7afb      	ldrb	r3, [r7, #11]
 800ca26:	2b2a      	cmp	r3, #42	; 0x2a
 800ca28:	d108      	bne.n	800ca3c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ca2a:	f248 0102 	movw	r1, #32770	; 0x8002
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fe60 	bl	800d6f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2222      	movs	r2, #34	; 0x22
 800ca38:	631a      	str	r2, [r3, #48]	; 0x30
 800ca3a:	e00a      	b.n	800ca52 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800ca3c:	7afb      	ldrb	r3, [r7, #11]
 800ca3e:	2b28      	cmp	r3, #40	; 0x28
 800ca40:	d107      	bne.n	800ca52 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800ca42:	f248 0103 	movw	r1, #32771	; 0x8003
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fe54 	bl	800d6f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca60:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	6859      	ldr	r1, [r3, #4]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	4b80      	ldr	r3, [pc, #512]	; (800cc70 <I2C_ITSlaveCplt+0x29c>)
 800ca6e:	400b      	ands	r3, r1
 800ca70:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fb75 	bl	800d162 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	0b9b      	lsrs	r3, r3, #14
 800ca7c:	f003 0301 	and.w	r3, r3, #1
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d07a      	beq.n	800cb7a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ca92:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f000 8112 	beq.w	800ccc2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a73      	ldr	r2, [pc, #460]	; (800cc74 <I2C_ITSlaveCplt+0x2a0>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d059      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a71      	ldr	r2, [pc, #452]	; (800cc78 <I2C_ITSlaveCplt+0x2a4>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d053      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a6f      	ldr	r2, [pc, #444]	; (800cc7c <I2C_ITSlaveCplt+0x2a8>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d04d      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a6d      	ldr	r2, [pc, #436]	; (800cc80 <I2C_ITSlaveCplt+0x2ac>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d047      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a6b      	ldr	r2, [pc, #428]	; (800cc84 <I2C_ITSlaveCplt+0x2b0>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d041      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a69      	ldr	r2, [pc, #420]	; (800cc88 <I2C_ITSlaveCplt+0x2b4>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d03b      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a67      	ldr	r2, [pc, #412]	; (800cc8c <I2C_ITSlaveCplt+0x2b8>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d035      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a65      	ldr	r2, [pc, #404]	; (800cc90 <I2C_ITSlaveCplt+0x2bc>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d02f      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a63      	ldr	r2, [pc, #396]	; (800cc94 <I2C_ITSlaveCplt+0x2c0>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d029      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a61      	ldr	r2, [pc, #388]	; (800cc98 <I2C_ITSlaveCplt+0x2c4>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d023      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a5f      	ldr	r2, [pc, #380]	; (800cc9c <I2C_ITSlaveCplt+0x2c8>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d01d      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a5d      	ldr	r2, [pc, #372]	; (800cca0 <I2C_ITSlaveCplt+0x2cc>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d017      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a5b      	ldr	r2, [pc, #364]	; (800cca4 <I2C_ITSlaveCplt+0x2d0>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d011      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a59      	ldr	r2, [pc, #356]	; (800cca8 <I2C_ITSlaveCplt+0x2d4>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d00b      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a57      	ldr	r2, [pc, #348]	; (800ccac <I2C_ITSlaveCplt+0x2d8>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d005      	beq.n	800cb5e <I2C_ITSlaveCplt+0x18a>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a55      	ldr	r2, [pc, #340]	; (800ccb0 <I2C_ITSlaveCplt+0x2dc>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d105      	bne.n	800cb6a <I2C_ITSlaveCplt+0x196>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	e004      	b.n	800cb74 <I2C_ITSlaveCplt+0x1a0>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	8553      	strh	r3, [r2, #42]	; 0x2a
 800cb78:	e0a3      	b.n	800ccc2 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	0bdb      	lsrs	r3, r3, #15
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f000 809d 	beq.w	800ccc2 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb96:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 8090 	beq.w	800ccc2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a32      	ldr	r2, [pc, #200]	; (800cc74 <I2C_ITSlaveCplt+0x2a0>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d059      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a30      	ldr	r2, [pc, #192]	; (800cc78 <I2C_ITSlaveCplt+0x2a4>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d053      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a2e      	ldr	r2, [pc, #184]	; (800cc7c <I2C_ITSlaveCplt+0x2a8>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d04d      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a2c      	ldr	r2, [pc, #176]	; (800cc80 <I2C_ITSlaveCplt+0x2ac>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d047      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a2a      	ldr	r2, [pc, #168]	; (800cc84 <I2C_ITSlaveCplt+0x2b0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d041      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a28      	ldr	r2, [pc, #160]	; (800cc88 <I2C_ITSlaveCplt+0x2b4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d03b      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a26      	ldr	r2, [pc, #152]	; (800cc8c <I2C_ITSlaveCplt+0x2b8>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d035      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a24      	ldr	r2, [pc, #144]	; (800cc90 <I2C_ITSlaveCplt+0x2bc>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d02f      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a22      	ldr	r2, [pc, #136]	; (800cc94 <I2C_ITSlaveCplt+0x2c0>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d029      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a20      	ldr	r2, [pc, #128]	; (800cc98 <I2C_ITSlaveCplt+0x2c4>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d023      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a1e      	ldr	r2, [pc, #120]	; (800cc9c <I2C_ITSlaveCplt+0x2c8>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d01d      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a1c      	ldr	r2, [pc, #112]	; (800cca0 <I2C_ITSlaveCplt+0x2cc>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d017      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a1a      	ldr	r2, [pc, #104]	; (800cca4 <I2C_ITSlaveCplt+0x2d0>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d011      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a18      	ldr	r2, [pc, #96]	; (800cca8 <I2C_ITSlaveCplt+0x2d4>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d00b      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a16      	ldr	r2, [pc, #88]	; (800ccac <I2C_ITSlaveCplt+0x2d8>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d005      	beq.n	800cc62 <I2C_ITSlaveCplt+0x28e>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a14      	ldr	r2, [pc, #80]	; (800ccb0 <I2C_ITSlaveCplt+0x2dc>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d128      	bne.n	800ccb4 <I2C_ITSlaveCplt+0x2e0>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	e027      	b.n	800ccbe <I2C_ITSlaveCplt+0x2ea>
 800cc6e:	bf00      	nop
 800cc70:	fe00e800 	.word	0xfe00e800
 800cc74:	40020010 	.word	0x40020010
 800cc78:	40020028 	.word	0x40020028
 800cc7c:	40020040 	.word	0x40020040
 800cc80:	40020058 	.word	0x40020058
 800cc84:	40020070 	.word	0x40020070
 800cc88:	40020088 	.word	0x40020088
 800cc8c:	400200a0 	.word	0x400200a0
 800cc90:	400200b8 	.word	0x400200b8
 800cc94:	40020410 	.word	0x40020410
 800cc98:	40020428 	.word	0x40020428
 800cc9c:	40020440 	.word	0x40020440
 800cca0:	40020458 	.word	0x40020458
 800cca4:	40020470 	.word	0x40020470
 800cca8:	40020488 	.word	0x40020488
 800ccac:	400204a0 	.word	0x400204a0
 800ccb0:	400204b8 	.word	0x400204b8
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	089b      	lsrs	r3, r3, #2
 800ccc6:	f003 0301 	and.w	r3, r3, #1
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d020      	beq.n	800cd10 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	f023 0304 	bic.w	r3, r3, #4
 800ccd4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce0:	b2d2      	uxtb	r2, r2
 800cce2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce8:	1c5a      	adds	r2, r3, #1
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00c      	beq.n	800cd10 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d005      	beq.n	800cd26 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd1e:	f043 0204 	orr.w	r2, r3, #4
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	091b      	lsrs	r3, r3, #4
 800cd2a:	f003 0301 	and.w	r3, r3, #1
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d04a      	beq.n	800cdc8 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	091b      	lsrs	r3, r3, #4
 800cd36:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d044      	beq.n	800cdc8 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d128      	bne.n	800cd9a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	2b28      	cmp	r3, #40	; 0x28
 800cd52:	d108      	bne.n	800cd66 <I2C_ITSlaveCplt+0x392>
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd5a:	d104      	bne.n	800cd66 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800cd5c:	6979      	ldr	r1, [r7, #20]
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f892 	bl	800ce88 <I2C_ITListenCplt>
 800cd64:	e030      	b.n	800cdc8 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	2b29      	cmp	r3, #41	; 0x29
 800cd70:	d10e      	bne.n	800cd90 <I2C_ITSlaveCplt+0x3bc>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cd78:	d00a      	beq.n	800cd90 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2210      	movs	r2, #16
 800cd80:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 f9ed 	bl	800d162 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7ff fcfa 	bl	800c782 <I2C_ITSlaveSeqCplt>
 800cd8e:	e01b      	b.n	800cdc8 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2210      	movs	r2, #16
 800cd96:	61da      	str	r2, [r3, #28]
 800cd98:	e016      	b.n	800cdc8 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2210      	movs	r2, #16
 800cda0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda6:	f043 0204 	orr.w	r2, r3, #4
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d003      	beq.n	800cdbc <I2C_ITSlaveCplt+0x3e8>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cdba:	d105      	bne.n	800cdc8 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f8b6 	bl	800cf34 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d010      	beq.n	800ce00 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cde2:	4619      	mov	r1, r3
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 f8a5 	bl	800cf34 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	2b28      	cmp	r3, #40	; 0x28
 800cdf4:	d141      	bne.n	800ce7a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cdf6:	6979      	ldr	r1, [r7, #20]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 f845 	bl	800ce88 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cdfe:	e03c      	b.n	800ce7a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce08:	d014      	beq.n	800ce34 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff fcb9 	bl	800c782 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a1c      	ldr	r2, [pc, #112]	; (800ce84 <I2C_ITSlaveCplt+0x4b0>)
 800ce14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2220      	movs	r2, #32
 800ce1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f7fe fd68 	bl	800b902 <HAL_I2C_ListenCpltCallback>
}
 800ce32:	e022      	b.n	800ce7a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	2b22      	cmp	r3, #34	; 0x22
 800ce3e:	d10e      	bne.n	800ce5e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2220      	movs	r2, #32
 800ce44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f7fe fd3b 	bl	800b8d2 <HAL_I2C_SlaveRxCpltCallback>
}
 800ce5c:	e00d      	b.n	800ce7a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2220      	movs	r2, #32
 800ce62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7fe fd22 	bl	800b8be <HAL_I2C_SlaveTxCpltCallback>
}
 800ce7a:	bf00      	nop
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	ffff0000 	.word	0xffff0000

0800ce88 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a26      	ldr	r2, [pc, #152]	; (800cf30 <I2C_ITListenCplt+0xa8>)
 800ce96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2220      	movs	r2, #32
 800cea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	089b      	lsrs	r3, r3, #2
 800ceb8:	f003 0301 	and.w	r3, r3, #1
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d022      	beq.n	800cf06 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceca:	b2d2      	uxtb	r2, r2
 800cecc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d012      	beq.n	800cf06 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cee4:	3b01      	subs	r3, #1
 800cee6:	b29a      	uxth	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	3b01      	subs	r3, #1
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cefe:	f043 0204 	orr.w	r2, r3, #4
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cf06:	f248 0103 	movw	r1, #32771	; 0x8003
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fbf2 	bl	800d6f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2210      	movs	r2, #16
 800cf16:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7fe fcee 	bl	800b902 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cf26:	bf00      	nop
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	ffff0000 	.word	0xffff0000

0800cf34 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf44:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a6d      	ldr	r2, [pc, #436]	; (800d108 <I2C_ITError+0x1d4>)
 800cf52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	431a      	orrs	r2, r3
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
 800cf68:	2b28      	cmp	r3, #40	; 0x28
 800cf6a:	d005      	beq.n	800cf78 <I2C_ITError+0x44>
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	2b29      	cmp	r3, #41	; 0x29
 800cf70:	d002      	beq.n	800cf78 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
 800cf74:	2b2a      	cmp	r3, #42	; 0x2a
 800cf76:	d10b      	bne.n	800cf90 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cf78:	2103      	movs	r1, #3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fbba 	bl	800d6f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2228      	movs	r2, #40	; 0x28
 800cf84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a60      	ldr	r2, [pc, #384]	; (800d10c <I2C_ITError+0x1d8>)
 800cf8c:	635a      	str	r2, [r3, #52]	; 0x34
 800cf8e:	e030      	b.n	800cff2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cf90:	f248 0103 	movw	r1, #32771	; 0x8003
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 fbad 	bl	800d6f4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 f8e1 	bl	800d162 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	2b60      	cmp	r3, #96	; 0x60
 800cfaa:	d01f      	beq.n	800cfec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2220      	movs	r2, #32
 800cfb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	699b      	ldr	r3, [r3, #24]
 800cfba:	f003 0320 	and.w	r3, r3, #32
 800cfbe:	2b20      	cmp	r3, #32
 800cfc0:	d114      	bne.n	800cfec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	699b      	ldr	r3, [r3, #24]
 800cfc8:	f003 0310 	and.w	r3, r3, #16
 800cfcc:	2b10      	cmp	r3, #16
 800cfce:	d109      	bne.n	800cfe4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2210      	movs	r2, #16
 800cfd6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfdc:	f043 0204 	orr.w	r2, r3, #4
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2220      	movs	r2, #32
 800cfea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d039      	beq.n	800d074 <I2C_ITError+0x140>
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	2b11      	cmp	r3, #17
 800d004:	d002      	beq.n	800d00c <I2C_ITError+0xd8>
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	2b21      	cmp	r3, #33	; 0x21
 800d00a:	d133      	bne.n	800d074 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d01a:	d107      	bne.n	800d02c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d02a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d030:	4618      	mov	r0, r3
 800d032:	f7fd f857 	bl	800a0e4 <HAL_DMA_GetState>
 800d036:	4603      	mov	r3, r0
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d017      	beq.n	800d06c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d040:	4a33      	ldr	r2, [pc, #204]	; (800d110 <I2C_ITError+0x1dc>)
 800d042:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d050:	4618      	mov	r0, r3
 800d052:	f7fb fed7 	bl	8008e04 <HAL_DMA_Abort_IT>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d04d      	beq.n	800d0f8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d066:	4610      	mov	r0, r2
 800d068:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d06a:	e045      	b.n	800d0f8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 f851 	bl	800d114 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d072:	e041      	b.n	800d0f8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d039      	beq.n	800d0f0 <I2C_ITError+0x1bc>
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	2b12      	cmp	r3, #18
 800d080:	d002      	beq.n	800d088 <I2C_ITError+0x154>
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	2b22      	cmp	r3, #34	; 0x22
 800d086:	d133      	bne.n	800d0f0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d096:	d107      	bne.n	800d0a8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d0a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fd f819 	bl	800a0e4 <HAL_DMA_GetState>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d017      	beq.n	800d0e8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0bc:	4a14      	ldr	r2, [pc, #80]	; (800d110 <I2C_ITError+0x1dc>)
 800d0be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7fb fe99 	bl	8008e04 <HAL_DMA_Abort_IT>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d011      	beq.n	800d0fc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0e6:	e009      	b.n	800d0fc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 f813 	bl	800d114 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0ee:	e005      	b.n	800d0fc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 f80f 	bl	800d114 <I2C_TreatErrorCallback>
  }
}
 800d0f6:	e002      	b.n	800d0fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d0f8:	bf00      	nop
 800d0fa:	e000      	b.n	800d0fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d0fc:	bf00      	nop
}
 800d0fe:	bf00      	nop
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	ffff0000 	.word	0xffff0000
 800d10c:	0800bbeb 	.word	0x0800bbeb
 800d110:	0800d54d 	.word	0x0800d54d

0800d114 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d122:	b2db      	uxtb	r3, r3
 800d124:	2b60      	cmp	r3, #96	; 0x60
 800d126:	d10e      	bne.n	800d146 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2220      	movs	r2, #32
 800d12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7fe fc07 	bl	800b952 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d144:	e009      	b.n	800d15a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2200      	movs	r2, #0
 800d14a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f7fe fbf2 	bl	800b93e <HAL_I2C_ErrorCallback>
}
 800d15a:	bf00      	nop
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d162:	b480      	push	{r7}
 800d164:	b083      	sub	sp, #12
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	699b      	ldr	r3, [r3, #24]
 800d170:	f003 0302 	and.w	r3, r3, #2
 800d174:	2b02      	cmp	r3, #2
 800d176:	d103      	bne.n	800d180 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2200      	movs	r2, #0
 800d17e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	f003 0301 	and.w	r3, r3, #1
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d007      	beq.n	800d19e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	699a      	ldr	r2, [r3, #24]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f042 0201 	orr.w	r2, r2, #1
 800d19c:	619a      	str	r2, [r3, #24]
  }
}
 800d19e:	bf00      	nop
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b084      	sub	sp, #16
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d1c6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d104      	bne.n	800d1dc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d1d2:	2120      	movs	r1, #32
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f000 fa09 	bl	800d5ec <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d1da:	e02d      	b.n	800d238 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d1e4:	441a      	add	r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	2bff      	cmp	r3, #255	; 0xff
 800d1f2:	d903      	bls.n	800d1fc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	22ff      	movs	r2, #255	; 0xff
 800d1f8:	851a      	strh	r2, [r3, #40]	; 0x28
 800d1fa:	e004      	b.n	800d206 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d200:	b29a      	uxth	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20e:	4619      	mov	r1, r3
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3328      	adds	r3, #40	; 0x28
 800d216:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d21c:	f7fb f86a 	bl	80082f4 <HAL_DMA_Start_IT>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d004      	beq.n	800d230 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d226:	2110      	movs	r1, #16
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f7ff fe83 	bl	800cf34 <I2C_ITError>
}
 800d22e:	e003      	b.n	800d238 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d230:	2140      	movs	r1, #64	; 0x40
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	f000 f9da 	bl	800d5ec <I2C_Enable_IRQ>
}
 800d238:	bf00      	nop
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d24c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d25c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d262:	b29b      	uxth	r3, r3
 800d264:	2b00      	cmp	r3, #0
 800d266:	d104      	bne.n	800d272 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d268:	2120      	movs	r1, #32
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	f000 f9be 	bl	800d5ec <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d270:	e02d      	b.n	800d2ce <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d276:	68fa      	ldr	r2, [r7, #12]
 800d278:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d27a:	441a      	add	r2, r3
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d284:	b29b      	uxth	r3, r3
 800d286:	2bff      	cmp	r3, #255	; 0xff
 800d288:	d903      	bls.n	800d292 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	22ff      	movs	r2, #255	; 0xff
 800d28e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d290:	e004      	b.n	800d29c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d296:	b29a      	uxth	r2, r3
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3324      	adds	r3, #36	; 0x24
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ac:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d2b2:	f7fb f81f 	bl	80082f4 <HAL_DMA_Start_IT>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d004      	beq.n	800d2c6 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d2bc:	2110      	movs	r1, #16
 800d2be:	68f8      	ldr	r0, [r7, #12]
 800d2c0:	f7ff fe38 	bl	800cf34 <I2C_ITError>
}
 800d2c4:	e003      	b.n	800d2ce <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d2c6:	2140      	movs	r1, #64	; 0x40
 800d2c8:	68f8      	ldr	r0, [r7, #12]
 800d2ca:	f000 f98f 	bl	800d5ec <I2C_Enable_IRQ>
}
 800d2ce:	bf00      	nop
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
	...

0800d2d8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d076      	beq.n	800d3e0 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a71      	ldr	r2, [pc, #452]	; (800d4c0 <I2C_DMAError+0x1e8>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d059      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a6f      	ldr	r2, [pc, #444]	; (800d4c4 <I2C_DMAError+0x1ec>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d053      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a6d      	ldr	r2, [pc, #436]	; (800d4c8 <I2C_DMAError+0x1f0>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d04d      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4a6b      	ldr	r2, [pc, #428]	; (800d4cc <I2C_DMAError+0x1f4>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d047      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a69      	ldr	r2, [pc, #420]	; (800d4d0 <I2C_DMAError+0x1f8>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d041      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a67      	ldr	r2, [pc, #412]	; (800d4d4 <I2C_DMAError+0x1fc>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d03b      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a65      	ldr	r2, [pc, #404]	; (800d4d8 <I2C_DMAError+0x200>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d035      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a63      	ldr	r2, [pc, #396]	; (800d4dc <I2C_DMAError+0x204>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d02f      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a61      	ldr	r2, [pc, #388]	; (800d4e0 <I2C_DMAError+0x208>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d029      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a5f      	ldr	r2, [pc, #380]	; (800d4e4 <I2C_DMAError+0x20c>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d023      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a5d      	ldr	r2, [pc, #372]	; (800d4e8 <I2C_DMAError+0x210>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d01d      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a5b      	ldr	r2, [pc, #364]	; (800d4ec <I2C_DMAError+0x214>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d017      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a59      	ldr	r2, [pc, #356]	; (800d4f0 <I2C_DMAError+0x218>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d011      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a57      	ldr	r2, [pc, #348]	; (800d4f4 <I2C_DMAError+0x21c>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d00b      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a55      	ldr	r2, [pc, #340]	; (800d4f8 <I2C_DMAError+0x220>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d005      	beq.n	800d3b2 <I2C_DMAError+0xda>
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a53      	ldr	r2, [pc, #332]	; (800d4fc <I2C_DMAError+0x224>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d109      	bne.n	800d3c6 <I2C_DMAError+0xee>
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	bf0c      	ite	eq
 800d3be:	2301      	moveq	r3, #1
 800d3c0:	2300      	movne	r3, #0
 800d3c2:	b2db      	uxtb	r3, r3
 800d3c4:	e008      	b.n	800d3d8 <I2C_DMAError+0x100>
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	bf0c      	ite	eq
 800d3d2:	2301      	moveq	r3, #1
 800d3d4:	2300      	movne	r3, #0
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f000 8098 	beq.w	800d51a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a33      	ldr	r2, [pc, #204]	; (800d4c0 <I2C_DMAError+0x1e8>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d059      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a31      	ldr	r2, [pc, #196]	; (800d4c4 <I2C_DMAError+0x1ec>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d053      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a2f      	ldr	r2, [pc, #188]	; (800d4c8 <I2C_DMAError+0x1f0>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d04d      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a2d      	ldr	r2, [pc, #180]	; (800d4cc <I2C_DMAError+0x1f4>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d047      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a2b      	ldr	r2, [pc, #172]	; (800d4d0 <I2C_DMAError+0x1f8>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d041      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a29      	ldr	r2, [pc, #164]	; (800d4d4 <I2C_DMAError+0x1fc>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d03b      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a27      	ldr	r2, [pc, #156]	; (800d4d8 <I2C_DMAError+0x200>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d035      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a25      	ldr	r2, [pc, #148]	; (800d4dc <I2C_DMAError+0x204>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d02f      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a23      	ldr	r2, [pc, #140]	; (800d4e0 <I2C_DMAError+0x208>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d029      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a21      	ldr	r2, [pc, #132]	; (800d4e4 <I2C_DMAError+0x20c>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d023      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a1f      	ldr	r2, [pc, #124]	; (800d4e8 <I2C_DMAError+0x210>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d01d      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a1d      	ldr	r2, [pc, #116]	; (800d4ec <I2C_DMAError+0x214>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d017      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a1b      	ldr	r2, [pc, #108]	; (800d4f0 <I2C_DMAError+0x218>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d011      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a19      	ldr	r2, [pc, #100]	; (800d4f4 <I2C_DMAError+0x21c>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d00b      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a17      	ldr	r2, [pc, #92]	; (800d4f8 <I2C_DMAError+0x220>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d005      	beq.n	800d4aa <I2C_DMAError+0x1d2>
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a15      	ldr	r2, [pc, #84]	; (800d4fc <I2C_DMAError+0x224>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d12a      	bne.n	800d500 <I2C_DMAError+0x228>
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	bf0c      	ite	eq
 800d4b6:	2301      	moveq	r3, #1
 800d4b8:	2300      	movne	r3, #0
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	e029      	b.n	800d512 <I2C_DMAError+0x23a>
 800d4be:	bf00      	nop
 800d4c0:	40020010 	.word	0x40020010
 800d4c4:	40020028 	.word	0x40020028
 800d4c8:	40020040 	.word	0x40020040
 800d4cc:	40020058 	.word	0x40020058
 800d4d0:	40020070 	.word	0x40020070
 800d4d4:	40020088 	.word	0x40020088
 800d4d8:	400200a0 	.word	0x400200a0
 800d4dc:	400200b8 	.word	0x400200b8
 800d4e0:	40020410 	.word	0x40020410
 800d4e4:	40020428 	.word	0x40020428
 800d4e8:	40020440 	.word	0x40020440
 800d4ec:	40020458 	.word	0x40020458
 800d4f0:	40020470 	.word	0x40020470
 800d4f4:	40020488 	.word	0x40020488
 800d4f8:	400204a0 	.word	0x400204a0
 800d4fc:	400204b8 	.word	0x400204b8
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	bf0c      	ite	eq
 800d50c:	2301      	moveq	r3, #1
 800d50e:	2300      	movne	r3, #0
 800d510:	b2db      	uxtb	r3, r3
 800d512:	2b00      	cmp	r3, #0
 800d514:	d001      	beq.n	800d51a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d516:	2301      	movs	r3, #1
 800d518:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7fc fdf0 	bl	800a100 <HAL_DMA_GetError>
 800d520:	4603      	mov	r3, r0
 800d522:	2b02      	cmp	r3, #2
 800d524:	d00e      	beq.n	800d544 <I2C_DMAError+0x26c>
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00b      	beq.n	800d544 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	685a      	ldr	r2, [r3, #4]
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d53a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d53c:	2110      	movs	r1, #16
 800d53e:	68b8      	ldr	r0, [r7, #8]
 800d540:	f7ff fcf8 	bl	800cf34 <I2C_ITError>
  }
}
 800d544:	bf00      	nop
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d558:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d003      	beq.n	800d56a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d566:	2200      	movs	r2, #0
 800d568:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d003      	beq.n	800d57a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d576:	2200      	movs	r2, #0
 800d578:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f7ff fdca 	bl	800d114 <I2C_TreatErrorCallback>
}
 800d580:	bf00      	nop
 800d582:	3710      	adds	r7, #16
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d588:	b480      	push	{r7}
 800d58a:	b087      	sub	sp, #28
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	607b      	str	r3, [r7, #4]
 800d592:	460b      	mov	r3, r1
 800d594:	817b      	strh	r3, [r7, #10]
 800d596:	4613      	mov	r3, r2
 800d598:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d59a:	897b      	ldrh	r3, [r7, #10]
 800d59c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d5a0:	7a7b      	ldrb	r3, [r7, #9]
 800d5a2:	041b      	lsls	r3, r3, #16
 800d5a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d5a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	685a      	ldr	r2, [r3, #4]
 800d5be:	6a3b      	ldr	r3, [r7, #32]
 800d5c0:	0d5b      	lsrs	r3, r3, #21
 800d5c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d5c6:	4b08      	ldr	r3, [pc, #32]	; (800d5e8 <I2C_TransferConfig+0x60>)
 800d5c8:	430b      	orrs	r3, r1
 800d5ca:	43db      	mvns	r3, r3
 800d5cc:	ea02 0103 	and.w	r1, r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	697a      	ldr	r2, [r7, #20]
 800d5d6:	430a      	orrs	r2, r1
 800d5d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d5da:	bf00      	nop
 800d5dc:	371c      	adds	r7, #28
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop
 800d5e8:	03ff63ff 	.word	0x03ff63ff

0800d5ec <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d600:	4a39      	ldr	r2, [pc, #228]	; (800d6e8 <I2C_Enable_IRQ+0xfc>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d032      	beq.n	800d66c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d60a:	4a38      	ldr	r2, [pc, #224]	; (800d6ec <I2C_Enable_IRQ+0x100>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d02d      	beq.n	800d66c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d614:	4a36      	ldr	r2, [pc, #216]	; (800d6f0 <I2C_Enable_IRQ+0x104>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d028      	beq.n	800d66c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d61a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	da03      	bge.n	800d62a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d628:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d62a:	887b      	ldrh	r3, [r7, #2]
 800d62c:	f003 0301 	and.w	r3, r3, #1
 800d630:	2b00      	cmp	r3, #0
 800d632:	d003      	beq.n	800d63c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d63a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d63c:	887b      	ldrh	r3, [r7, #2]
 800d63e:	f003 0302 	and.w	r3, r3, #2
 800d642:	2b00      	cmp	r3, #0
 800d644:	d003      	beq.n	800d64e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d64c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d64e:	887b      	ldrh	r3, [r7, #2]
 800d650:	2b10      	cmp	r3, #16
 800d652:	d103      	bne.n	800d65c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d65a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d65c:	887b      	ldrh	r3, [r7, #2]
 800d65e:	2b20      	cmp	r3, #32
 800d660:	d133      	bne.n	800d6ca <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f043 0320 	orr.w	r3, r3, #32
 800d668:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d66a:	e02e      	b.n	800d6ca <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d66c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d670:	2b00      	cmp	r3, #0
 800d672:	da03      	bge.n	800d67c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d67a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d67c:	887b      	ldrh	r3, [r7, #2]
 800d67e:	f003 0301 	and.w	r3, r3, #1
 800d682:	2b00      	cmp	r3, #0
 800d684:	d003      	beq.n	800d68e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d68c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d68e:	887b      	ldrh	r3, [r7, #2]
 800d690:	f003 0302 	and.w	r3, r3, #2
 800d694:	2b00      	cmp	r3, #0
 800d696:	d003      	beq.n	800d6a0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d69e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d6a0:	887b      	ldrh	r3, [r7, #2]
 800d6a2:	2b10      	cmp	r3, #16
 800d6a4:	d103      	bne.n	800d6ae <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d6ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d6ae:	887b      	ldrh	r3, [r7, #2]
 800d6b0:	2b20      	cmp	r3, #32
 800d6b2:	d103      	bne.n	800d6bc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d6ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d6bc:	887b      	ldrh	r3, [r7, #2]
 800d6be:	2b40      	cmp	r3, #64	; 0x40
 800d6c0:	d103      	bne.n	800d6ca <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6c8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	6819      	ldr	r1, [r3, #0]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	430a      	orrs	r2, r1
 800d6d8:	601a      	str	r2, [r3, #0]
}
 800d6da:	bf00      	nop
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	0800bdf3 	.word	0x0800bdf3
 800d6ec:	0800c239 	.word	0x0800c239
 800d6f0:	0800bfd9 	.word	0x0800bfd9

0800d6f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d700:	2300      	movs	r3, #0
 800d702:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d704:	887b      	ldrh	r3, [r7, #2]
 800d706:	f003 0301 	and.w	r3, r3, #1
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00f      	beq.n	800d72e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d714:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d722:	2b28      	cmp	r3, #40	; 0x28
 800d724:	d003      	beq.n	800d72e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d72c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d72e:	887b      	ldrh	r3, [r7, #2]
 800d730:	f003 0302 	and.w	r3, r3, #2
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00f      	beq.n	800d758 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d73e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d746:	b2db      	uxtb	r3, r3
 800d748:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d74c:	2b28      	cmp	r3, #40	; 0x28
 800d74e:	d003      	beq.n	800d758 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d756:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d758:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	da03      	bge.n	800d768 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d766:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d768:	887b      	ldrh	r3, [r7, #2]
 800d76a:	2b10      	cmp	r3, #16
 800d76c:	d103      	bne.n	800d776 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d774:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d776:	887b      	ldrh	r3, [r7, #2]
 800d778:	2b20      	cmp	r3, #32
 800d77a:	d103      	bne.n	800d784 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f043 0320 	orr.w	r3, r3, #32
 800d782:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d784:	887b      	ldrh	r3, [r7, #2]
 800d786:	2b40      	cmp	r3, #64	; 0x40
 800d788:	d103      	bne.n	800d792 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d790:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	6819      	ldr	r1, [r3, #0]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	43da      	mvns	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	400a      	ands	r2, r1
 800d7a2:	601a      	str	r2, [r3, #0]
}
 800d7a4:	bf00      	nop
 800d7a6:	3714      	adds	r7, #20
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	2b20      	cmp	r3, #32
 800d7c4:	d138      	bne.n	800d838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d101      	bne.n	800d7d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d7d0:	2302      	movs	r3, #2
 800d7d2:	e032      	b.n	800d83a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2224      	movs	r2, #36	; 0x24
 800d7e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f022 0201 	bic.w	r2, r2, #1
 800d7f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	6819      	ldr	r1, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	683a      	ldr	r2, [r7, #0]
 800d810:	430a      	orrs	r2, r1
 800d812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f042 0201 	orr.w	r2, r2, #1
 800d822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2220      	movs	r2, #32
 800d828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	e000      	b.n	800d83a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d838:	2302      	movs	r3, #2
  }
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	370c      	adds	r7, #12
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr

0800d846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d846:	b480      	push	{r7}
 800d848:	b085      	sub	sp, #20
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d856:	b2db      	uxtb	r3, r3
 800d858:	2b20      	cmp	r3, #32
 800d85a:	d139      	bne.n	800d8d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d862:	2b01      	cmp	r3, #1
 800d864:	d101      	bne.n	800d86a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d866:	2302      	movs	r3, #2
 800d868:	e033      	b.n	800d8d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2224      	movs	r2, #36	; 0x24
 800d876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f022 0201 	bic.w	r2, r2, #1
 800d888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	021b      	lsls	r3, r3, #8
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f042 0201 	orr.w	r2, r2, #1
 800d8ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2220      	movs	r2, #32
 800d8c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	e000      	b.n	800d8d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d8d0:	2302      	movs	r3, #2
  }
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3714      	adds	r7, #20
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr
	...

0800d8e0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d8e8:	4b0d      	ldr	r3, [pc, #52]	; (800d920 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d8ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8ee:	4a0c      	ldr	r2, [pc, #48]	; (800d920 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d8f0:	f043 0302 	orr.w	r3, r3, #2
 800d8f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d8f8:	4b09      	ldr	r3, [pc, #36]	; (800d920 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d8fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d8fe:	f003 0302 	and.w	r3, r3, #2
 800d902:	60fb      	str	r3, [r7, #12]
 800d904:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800d906:	4b07      	ldr	r3, [pc, #28]	; (800d924 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d908:	685a      	ldr	r2, [r3, #4]
 800d90a:	4906      	ldr	r1, [pc, #24]	; (800d924 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4313      	orrs	r3, r2
 800d910:	604b      	str	r3, [r1, #4]
}
 800d912:	bf00      	nop
 800d914:	3714      	adds	r7, #20
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	58024400 	.word	0x58024400
 800d924:	58000400 	.word	0x58000400

0800d928 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d101      	bne.n	800d93a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800d936:	2301      	movs	r3, #1
 800d938:	e041      	b.n	800d9be <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800d942:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f245 5255 	movw	r2, #21845	; 0x5555
 800d94c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	6852      	ldr	r2, [r2, #4]
 800d956:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	6892      	ldr	r2, [r2, #8]
 800d960:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800d962:	f7f7 ffcb 	bl	80058fc <HAL_GetTick>
 800d966:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d968:	e00f      	b.n	800d98a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800d96a:	f7f7 ffc7 	bl	80058fc <HAL_GetTick>
 800d96e:	4602      	mov	r2, r0
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	2b31      	cmp	r3, #49	; 0x31
 800d976:	d908      	bls.n	800d98a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	f003 0307 	and.w	r3, r3, #7
 800d982:	2b00      	cmp	r3, #0
 800d984:	d001      	beq.n	800d98a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800d986:	2303      	movs	r3, #3
 800d988:	e019      	b.n	800d9be <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	f003 0307 	and.w	r3, r3, #7
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1e8      	bne.n	800d96a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	691a      	ldr	r2, [r3, #16]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d005      	beq.n	800d9b2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	68d2      	ldr	r2, [r2, #12]
 800d9ae:	611a      	str	r2, [r3, #16]
 800d9b0:	e004      	b.n	800d9bc <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d9ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d9bc:	2300      	movs	r3, #0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800d9c6:	b480      	push	{r7}
 800d9c8:	b083      	sub	sp, #12
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d9d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
	...

0800d9e8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800d9f4:	4b18      	ldr	r3, [pc, #96]	; (800da58 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f023 0201 	bic.w	r2, r3, #1
 800d9fc:	4916      	ldr	r1, [pc, #88]	; (800da58 <HAL_PWR_EnterSTOPMode+0x70>)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	4313      	orrs	r3, r2
 800da02:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800da04:	4b14      	ldr	r3, [pc, #80]	; (800da58 <HAL_PWR_EnterSTOPMode+0x70>)
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	4a13      	ldr	r2, [pc, #76]	; (800da58 <HAL_PWR_EnterSTOPMode+0x70>)
 800da0a:	f023 0305 	bic.w	r3, r3, #5
 800da0e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800da10:	4b11      	ldr	r3, [pc, #68]	; (800da58 <HAL_PWR_EnterSTOPMode+0x70>)
 800da12:	691b      	ldr	r3, [r3, #16]
 800da14:	4a10      	ldr	r2, [pc, #64]	; (800da58 <HAL_PWR_EnterSTOPMode+0x70>)
 800da16:	f023 0302 	bic.w	r3, r3, #2
 800da1a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800da1c:	4b0f      	ldr	r3, [pc, #60]	; (800da5c <HAL_PWR_EnterSTOPMode+0x74>)
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	4a0e      	ldr	r2, [pc, #56]	; (800da5c <HAL_PWR_EnterSTOPMode+0x74>)
 800da22:	f043 0304 	orr.w	r3, r3, #4
 800da26:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800da28:	f3bf 8f4f 	dsb	sy
}
 800da2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800da2e:	f3bf 8f6f 	isb	sy
}
 800da32:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800da34:	78fb      	ldrb	r3, [r7, #3]
 800da36:	2b01      	cmp	r3, #1
 800da38:	d101      	bne.n	800da3e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800da3a:	bf30      	wfi
 800da3c:	e000      	b.n	800da40 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800da3e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800da40:	4b06      	ldr	r3, [pc, #24]	; (800da5c <HAL_PWR_EnterSTOPMode+0x74>)
 800da42:	691b      	ldr	r3, [r3, #16]
 800da44:	4a05      	ldr	r2, [pc, #20]	; (800da5c <HAL_PWR_EnterSTOPMode+0x74>)
 800da46:	f023 0304 	bic.w	r3, r3, #4
 800da4a:	6113      	str	r3, [r2, #16]
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	58024800 	.word	0x58024800
 800da5c:	e000ed00 	.word	0xe000ed00

0800da60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800da68:	4b19      	ldr	r3, [pc, #100]	; (800dad0 <HAL_PWREx_ConfigSupply+0x70>)
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	f003 0304 	and.w	r3, r3, #4
 800da70:	2b04      	cmp	r3, #4
 800da72:	d00a      	beq.n	800da8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800da74:	4b16      	ldr	r3, [pc, #88]	; (800dad0 <HAL_PWREx_ConfigSupply+0x70>)
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	f003 0307 	and.w	r3, r3, #7
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d001      	beq.n	800da86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800da82:	2301      	movs	r3, #1
 800da84:	e01f      	b.n	800dac6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800da86:	2300      	movs	r3, #0
 800da88:	e01d      	b.n	800dac6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800da8a:	4b11      	ldr	r3, [pc, #68]	; (800dad0 <HAL_PWREx_ConfigSupply+0x70>)
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	f023 0207 	bic.w	r2, r3, #7
 800da92:	490f      	ldr	r1, [pc, #60]	; (800dad0 <HAL_PWREx_ConfigSupply+0x70>)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4313      	orrs	r3, r2
 800da98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800da9a:	f7f7 ff2f 	bl	80058fc <HAL_GetTick>
 800da9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800daa0:	e009      	b.n	800dab6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800daa2:	f7f7 ff2b 	bl	80058fc <HAL_GetTick>
 800daa6:	4602      	mov	r2, r0
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dab0:	d901      	bls.n	800dab6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800dab2:	2301      	movs	r3, #1
 800dab4:	e007      	b.n	800dac6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dab6:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <HAL_PWREx_ConfigSupply+0x70>)
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dabe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dac2:	d1ee      	bne.n	800daa2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	58024800 	.word	0x58024800

0800dad4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b08c      	sub	sp, #48	; 0x30
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d102      	bne.n	800dae8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	f000 bc48 	b.w	800e378 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f003 0301 	and.w	r3, r3, #1
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f000 8088 	beq.w	800dc06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800daf6:	4b99      	ldr	r3, [pc, #612]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800daf8:	691b      	ldr	r3, [r3, #16]
 800dafa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dafe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800db00:	4b96      	ldr	r3, [pc, #600]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db04:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800db06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db08:	2b10      	cmp	r3, #16
 800db0a:	d007      	beq.n	800db1c <HAL_RCC_OscConfig+0x48>
 800db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0e:	2b18      	cmp	r3, #24
 800db10:	d111      	bne.n	800db36 <HAL_RCC_OscConfig+0x62>
 800db12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db14:	f003 0303 	and.w	r3, r3, #3
 800db18:	2b02      	cmp	r3, #2
 800db1a:	d10c      	bne.n	800db36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db1c:	4b8f      	ldr	r3, [pc, #572]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db24:	2b00      	cmp	r3, #0
 800db26:	d06d      	beq.n	800dc04 <HAL_RCC_OscConfig+0x130>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d169      	bne.n	800dc04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800db30:	2301      	movs	r3, #1
 800db32:	f000 bc21 	b.w	800e378 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db3e:	d106      	bne.n	800db4e <HAL_RCC_OscConfig+0x7a>
 800db40:	4b86      	ldr	r3, [pc, #536]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a85      	ldr	r2, [pc, #532]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db4a:	6013      	str	r3, [r2, #0]
 800db4c:	e02e      	b.n	800dbac <HAL_RCC_OscConfig+0xd8>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10c      	bne.n	800db70 <HAL_RCC_OscConfig+0x9c>
 800db56:	4b81      	ldr	r3, [pc, #516]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a80      	ldr	r2, [pc, #512]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	4b7e      	ldr	r3, [pc, #504]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a7d      	ldr	r2, [pc, #500]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db6c:	6013      	str	r3, [r2, #0]
 800db6e:	e01d      	b.n	800dbac <HAL_RCC_OscConfig+0xd8>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800db78:	d10c      	bne.n	800db94 <HAL_RCC_OscConfig+0xc0>
 800db7a:	4b78      	ldr	r3, [pc, #480]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a77      	ldr	r2, [pc, #476]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	4b75      	ldr	r3, [pc, #468]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a74      	ldr	r2, [pc, #464]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db90:	6013      	str	r3, [r2, #0]
 800db92:	e00b      	b.n	800dbac <HAL_RCC_OscConfig+0xd8>
 800db94:	4b71      	ldr	r3, [pc, #452]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a70      	ldr	r2, [pc, #448]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800db9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db9e:	6013      	str	r3, [r2, #0]
 800dba0:	4b6e      	ldr	r3, [pc, #440]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a6d      	ldr	r2, [pc, #436]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dbaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d013      	beq.n	800dbdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbb4:	f7f7 fea2 	bl	80058fc <HAL_GetTick>
 800dbb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dbba:	e008      	b.n	800dbce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dbbc:	f7f7 fe9e 	bl	80058fc <HAL_GetTick>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc4:	1ad3      	subs	r3, r2, r3
 800dbc6:	2b64      	cmp	r3, #100	; 0x64
 800dbc8:	d901      	bls.n	800dbce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dbca:	2303      	movs	r3, #3
 800dbcc:	e3d4      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dbce:	4b63      	ldr	r3, [pc, #396]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d0f0      	beq.n	800dbbc <HAL_RCC_OscConfig+0xe8>
 800dbda:	e014      	b.n	800dc06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbdc:	f7f7 fe8e 	bl	80058fc <HAL_GetTick>
 800dbe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dbe2:	e008      	b.n	800dbf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dbe4:	f7f7 fe8a 	bl	80058fc <HAL_GetTick>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbec:	1ad3      	subs	r3, r2, r3
 800dbee:	2b64      	cmp	r3, #100	; 0x64
 800dbf0:	d901      	bls.n	800dbf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800dbf2:	2303      	movs	r3, #3
 800dbf4:	e3c0      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dbf6:	4b59      	ldr	r3, [pc, #356]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d1f0      	bne.n	800dbe4 <HAL_RCC_OscConfig+0x110>
 800dc02:	e000      	b.n	800dc06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f003 0302 	and.w	r3, r3, #2
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f000 80ca 	beq.w	800dda8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dc14:	4b51      	ldr	r3, [pc, #324]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dc1e:	4b4f      	ldr	r3, [pc, #316]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dc24:	6a3b      	ldr	r3, [r7, #32]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d007      	beq.n	800dc3a <HAL_RCC_OscConfig+0x166>
 800dc2a:	6a3b      	ldr	r3, [r7, #32]
 800dc2c:	2b18      	cmp	r3, #24
 800dc2e:	d156      	bne.n	800dcde <HAL_RCC_OscConfig+0x20a>
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	f003 0303 	and.w	r3, r3, #3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d151      	bne.n	800dcde <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dc3a:	4b48      	ldr	r3, [pc, #288]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f003 0304 	and.w	r3, r3, #4
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d005      	beq.n	800dc52 <HAL_RCC_OscConfig+0x17e>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d101      	bne.n	800dc52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e392      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dc52:	4b42      	ldr	r3, [pc, #264]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f023 0219 	bic.w	r2, r3, #25
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	493f      	ldr	r1, [pc, #252]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dc60:	4313      	orrs	r3, r2
 800dc62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc64:	f7f7 fe4a 	bl	80058fc <HAL_GetTick>
 800dc68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dc6a:	e008      	b.n	800dc7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc6c:	f7f7 fe46 	bl	80058fc <HAL_GetTick>
 800dc70:	4602      	mov	r2, r0
 800dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d901      	bls.n	800dc7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	e37c      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dc7e:	4b37      	ldr	r3, [pc, #220]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f003 0304 	and.w	r3, r3, #4
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0f0      	beq.n	800dc6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc8a:	f7f7 fe43 	bl	8005914 <HAL_GetREVID>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	f241 0203 	movw	r2, #4099	; 0x1003
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d817      	bhi.n	800dcc8 <HAL_RCC_OscConfig+0x1f4>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	2b40      	cmp	r3, #64	; 0x40
 800dc9e:	d108      	bne.n	800dcb2 <HAL_RCC_OscConfig+0x1de>
 800dca0:	4b2e      	ldr	r3, [pc, #184]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dca8:	4a2c      	ldr	r2, [pc, #176]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dcaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dcae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dcb0:	e07a      	b.n	800dda8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcb2:	4b2a      	ldr	r3, [pc, #168]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	031b      	lsls	r3, r3, #12
 800dcc0:	4926      	ldr	r1, [pc, #152]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dcc6:	e06f      	b.n	800dda8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcc8:	4b24      	ldr	r3, [pc, #144]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	691b      	ldr	r3, [r3, #16]
 800dcd4:	061b      	lsls	r3, r3, #24
 800dcd6:	4921      	ldr	r1, [pc, #132]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dcdc:	e064      	b.n	800dda8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d047      	beq.n	800dd76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dce6:	4b1d      	ldr	r3, [pc, #116]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f023 0219 	bic.w	r2, r3, #25
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	491a      	ldr	r1, [pc, #104]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcf8:	f7f7 fe00 	bl	80058fc <HAL_GetTick>
 800dcfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dcfe:	e008      	b.n	800dd12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd00:	f7f7 fdfc 	bl	80058fc <HAL_GetTick>
 800dd04:	4602      	mov	r2, r0
 800dd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	2b02      	cmp	r3, #2
 800dd0c:	d901      	bls.n	800dd12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800dd0e:	2303      	movs	r3, #3
 800dd10:	e332      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dd12:	4b12      	ldr	r3, [pc, #72]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 0304 	and.w	r3, r3, #4
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0f0      	beq.n	800dd00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd1e:	f7f7 fdf9 	bl	8005914 <HAL_GetREVID>
 800dd22:	4603      	mov	r3, r0
 800dd24:	f241 0203 	movw	r2, #4099	; 0x1003
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d819      	bhi.n	800dd60 <HAL_RCC_OscConfig+0x28c>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	2b40      	cmp	r3, #64	; 0x40
 800dd32:	d108      	bne.n	800dd46 <HAL_RCC_OscConfig+0x272>
 800dd34:	4b09      	ldr	r3, [pc, #36]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dd3c:	4a07      	ldr	r2, [pc, #28]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dd3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd42:	6053      	str	r3, [r2, #4]
 800dd44:	e030      	b.n	800dda8 <HAL_RCC_OscConfig+0x2d4>
 800dd46:	4b05      	ldr	r3, [pc, #20]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	031b      	lsls	r3, r3, #12
 800dd54:	4901      	ldr	r1, [pc, #4]	; (800dd5c <HAL_RCC_OscConfig+0x288>)
 800dd56:	4313      	orrs	r3, r2
 800dd58:	604b      	str	r3, [r1, #4]
 800dd5a:	e025      	b.n	800dda8 <HAL_RCC_OscConfig+0x2d4>
 800dd5c:	58024400 	.word	0x58024400
 800dd60:	4b9a      	ldr	r3, [pc, #616]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	061b      	lsls	r3, r3, #24
 800dd6e:	4997      	ldr	r1, [pc, #604]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800dd70:	4313      	orrs	r3, r2
 800dd72:	604b      	str	r3, [r1, #4]
 800dd74:	e018      	b.n	800dda8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dd76:	4b95      	ldr	r3, [pc, #596]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a94      	ldr	r2, [pc, #592]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800dd7c:	f023 0301 	bic.w	r3, r3, #1
 800dd80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd82:	f7f7 fdbb 	bl	80058fc <HAL_GetTick>
 800dd86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dd88:	e008      	b.n	800dd9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd8a:	f7f7 fdb7 	bl	80058fc <HAL_GetTick>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd92:	1ad3      	subs	r3, r2, r3
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	d901      	bls.n	800dd9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800dd98:	2303      	movs	r3, #3
 800dd9a:	e2ed      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dd9c:	4b8b      	ldr	r3, [pc, #556]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f003 0304 	and.w	r3, r3, #4
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1f0      	bne.n	800dd8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 0310 	and.w	r3, r3, #16
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f000 80a9 	beq.w	800df08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ddb6:	4b85      	ldr	r3, [pc, #532]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ddbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ddc0:	4b82      	ldr	r3, [pc, #520]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800ddc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ddc6:	69bb      	ldr	r3, [r7, #24]
 800ddc8:	2b08      	cmp	r3, #8
 800ddca:	d007      	beq.n	800dddc <HAL_RCC_OscConfig+0x308>
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	2b18      	cmp	r3, #24
 800ddd0:	d13a      	bne.n	800de48 <HAL_RCC_OscConfig+0x374>
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	f003 0303 	and.w	r3, r3, #3
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d135      	bne.n	800de48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dddc:	4b7b      	ldr	r3, [pc, #492]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d005      	beq.n	800ddf4 <HAL_RCC_OscConfig+0x320>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	69db      	ldr	r3, [r3, #28]
 800ddec:	2b80      	cmp	r3, #128	; 0x80
 800ddee:	d001      	beq.n	800ddf4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e2c1      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ddf4:	f7f7 fd8e 	bl	8005914 <HAL_GetREVID>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	f241 0203 	movw	r2, #4099	; 0x1003
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d817      	bhi.n	800de32 <HAL_RCC_OscConfig+0x35e>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	2b20      	cmp	r3, #32
 800de08:	d108      	bne.n	800de1c <HAL_RCC_OscConfig+0x348>
 800de0a:	4b70      	ldr	r3, [pc, #448]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800de12:	4a6e      	ldr	r2, [pc, #440]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800de14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de18:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de1a:	e075      	b.n	800df08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de1c:	4b6b      	ldr	r3, [pc, #428]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6a1b      	ldr	r3, [r3, #32]
 800de28:	069b      	lsls	r3, r3, #26
 800de2a:	4968      	ldr	r1, [pc, #416]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800de2c:	4313      	orrs	r3, r2
 800de2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de30:	e06a      	b.n	800df08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de32:	4b66      	ldr	r3, [pc, #408]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a1b      	ldr	r3, [r3, #32]
 800de3e:	061b      	lsls	r3, r3, #24
 800de40:	4962      	ldr	r1, [pc, #392]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800de42:	4313      	orrs	r3, r2
 800de44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de46:	e05f      	b.n	800df08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	69db      	ldr	r3, [r3, #28]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d042      	beq.n	800ded6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800de50:	4b5e      	ldr	r3, [pc, #376]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a5d      	ldr	r2, [pc, #372]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800de56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de5c:	f7f7 fd4e 	bl	80058fc <HAL_GetTick>
 800de60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800de62:	e008      	b.n	800de76 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800de64:	f7f7 fd4a 	bl	80058fc <HAL_GetTick>
 800de68:	4602      	mov	r2, r0
 800de6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6c:	1ad3      	subs	r3, r2, r3
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d901      	bls.n	800de76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800de72:	2303      	movs	r3, #3
 800de74:	e280      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800de76:	4b55      	ldr	r3, [pc, #340]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d0f0      	beq.n	800de64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de82:	f7f7 fd47 	bl	8005914 <HAL_GetREVID>
 800de86:	4603      	mov	r3, r0
 800de88:	f241 0203 	movw	r2, #4099	; 0x1003
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d817      	bhi.n	800dec0 <HAL_RCC_OscConfig+0x3ec>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6a1b      	ldr	r3, [r3, #32]
 800de94:	2b20      	cmp	r3, #32
 800de96:	d108      	bne.n	800deaa <HAL_RCC_OscConfig+0x3d6>
 800de98:	4b4c      	ldr	r3, [pc, #304]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dea0:	4a4a      	ldr	r2, [pc, #296]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800dea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dea6:	6053      	str	r3, [r2, #4]
 800dea8:	e02e      	b.n	800df08 <HAL_RCC_OscConfig+0x434>
 800deaa:	4b48      	ldr	r3, [pc, #288]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a1b      	ldr	r3, [r3, #32]
 800deb6:	069b      	lsls	r3, r3, #26
 800deb8:	4944      	ldr	r1, [pc, #272]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800deba:	4313      	orrs	r3, r2
 800debc:	604b      	str	r3, [r1, #4]
 800debe:	e023      	b.n	800df08 <HAL_RCC_OscConfig+0x434>
 800dec0:	4b42      	ldr	r3, [pc, #264]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a1b      	ldr	r3, [r3, #32]
 800decc:	061b      	lsls	r3, r3, #24
 800dece:	493f      	ldr	r1, [pc, #252]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800ded0:	4313      	orrs	r3, r2
 800ded2:	60cb      	str	r3, [r1, #12]
 800ded4:	e018      	b.n	800df08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ded6:	4b3d      	ldr	r3, [pc, #244]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a3c      	ldr	r2, [pc, #240]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800dedc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dee2:	f7f7 fd0b 	bl	80058fc <HAL_GetTick>
 800dee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dee8:	e008      	b.n	800defc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800deea:	f7f7 fd07 	bl	80058fc <HAL_GetTick>
 800deee:	4602      	mov	r2, r0
 800def0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def2:	1ad3      	subs	r3, r2, r3
 800def4:	2b02      	cmp	r3, #2
 800def6:	d901      	bls.n	800defc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800def8:	2303      	movs	r3, #3
 800defa:	e23d      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800defc:	4b33      	ldr	r3, [pc, #204]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1f0      	bne.n	800deea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f003 0308 	and.w	r3, r3, #8
 800df10:	2b00      	cmp	r3, #0
 800df12:	d036      	beq.n	800df82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d019      	beq.n	800df50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800df1c:	4b2b      	ldr	r3, [pc, #172]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800df1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df20:	4a2a      	ldr	r2, [pc, #168]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800df22:	f043 0301 	orr.w	r3, r3, #1
 800df26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df28:	f7f7 fce8 	bl	80058fc <HAL_GetTick>
 800df2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800df2e:	e008      	b.n	800df42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df30:	f7f7 fce4 	bl	80058fc <HAL_GetTick>
 800df34:	4602      	mov	r2, r0
 800df36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df38:	1ad3      	subs	r3, r2, r3
 800df3a:	2b02      	cmp	r3, #2
 800df3c:	d901      	bls.n	800df42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800df3e:	2303      	movs	r3, #3
 800df40:	e21a      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800df42:	4b22      	ldr	r3, [pc, #136]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800df44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df46:	f003 0302 	and.w	r3, r3, #2
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d0f0      	beq.n	800df30 <HAL_RCC_OscConfig+0x45c>
 800df4e:	e018      	b.n	800df82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800df50:	4b1e      	ldr	r3, [pc, #120]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800df52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df54:	4a1d      	ldr	r2, [pc, #116]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800df56:	f023 0301 	bic.w	r3, r3, #1
 800df5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df5c:	f7f7 fcce 	bl	80058fc <HAL_GetTick>
 800df60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800df62:	e008      	b.n	800df76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df64:	f7f7 fcca 	bl	80058fc <HAL_GetTick>
 800df68:	4602      	mov	r2, r0
 800df6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	2b02      	cmp	r3, #2
 800df70:	d901      	bls.n	800df76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800df72:	2303      	movs	r3, #3
 800df74:	e200      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800df76:	4b15      	ldr	r3, [pc, #84]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800df78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df7a:	f003 0302 	and.w	r3, r3, #2
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d1f0      	bne.n	800df64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 0320 	and.w	r3, r3, #32
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d039      	beq.n	800e002 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d01c      	beq.n	800dfd0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800df96:	4b0d      	ldr	r3, [pc, #52]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a0c      	ldr	r2, [pc, #48]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800df9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dfa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dfa2:	f7f7 fcab 	bl	80058fc <HAL_GetTick>
 800dfa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dfa8:	e008      	b.n	800dfbc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dfaa:	f7f7 fca7 	bl	80058fc <HAL_GetTick>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb2:	1ad3      	subs	r3, r2, r3
 800dfb4:	2b02      	cmp	r3, #2
 800dfb6:	d901      	bls.n	800dfbc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800dfb8:	2303      	movs	r3, #3
 800dfba:	e1dd      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800dfbc:	4b03      	ldr	r3, [pc, #12]	; (800dfcc <HAL_RCC_OscConfig+0x4f8>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d0f0      	beq.n	800dfaa <HAL_RCC_OscConfig+0x4d6>
 800dfc8:	e01b      	b.n	800e002 <HAL_RCC_OscConfig+0x52e>
 800dfca:	bf00      	nop
 800dfcc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dfd0:	4b9b      	ldr	r3, [pc, #620]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a9a      	ldr	r2, [pc, #616]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800dfd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dfda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800dfdc:	f7f7 fc8e 	bl	80058fc <HAL_GetTick>
 800dfe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dfe2:	e008      	b.n	800dff6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dfe4:	f7f7 fc8a 	bl	80058fc <HAL_GetTick>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d901      	bls.n	800dff6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800dff2:	2303      	movs	r3, #3
 800dff4:	e1c0      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800dff6:	4b92      	ldr	r3, [pc, #584]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d1f0      	bne.n	800dfe4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f003 0304 	and.w	r3, r3, #4
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	f000 8081 	beq.w	800e112 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e010:	4b8c      	ldr	r3, [pc, #560]	; (800e244 <HAL_RCC_OscConfig+0x770>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a8b      	ldr	r2, [pc, #556]	; (800e244 <HAL_RCC_OscConfig+0x770>)
 800e016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e01a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e01c:	f7f7 fc6e 	bl	80058fc <HAL_GetTick>
 800e020:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e022:	e008      	b.n	800e036 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e024:	f7f7 fc6a 	bl	80058fc <HAL_GetTick>
 800e028:	4602      	mov	r2, r0
 800e02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	2b64      	cmp	r3, #100	; 0x64
 800e030:	d901      	bls.n	800e036 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e032:	2303      	movs	r3, #3
 800e034:	e1a0      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e036:	4b83      	ldr	r3, [pc, #524]	; (800e244 <HAL_RCC_OscConfig+0x770>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d0f0      	beq.n	800e024 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	689b      	ldr	r3, [r3, #8]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d106      	bne.n	800e058 <HAL_RCC_OscConfig+0x584>
 800e04a:	4b7d      	ldr	r3, [pc, #500]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e04e:	4a7c      	ldr	r2, [pc, #496]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e050:	f043 0301 	orr.w	r3, r3, #1
 800e054:	6713      	str	r3, [r2, #112]	; 0x70
 800e056:	e02d      	b.n	800e0b4 <HAL_RCC_OscConfig+0x5e0>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10c      	bne.n	800e07a <HAL_RCC_OscConfig+0x5a6>
 800e060:	4b77      	ldr	r3, [pc, #476]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e064:	4a76      	ldr	r2, [pc, #472]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e066:	f023 0301 	bic.w	r3, r3, #1
 800e06a:	6713      	str	r3, [r2, #112]	; 0x70
 800e06c:	4b74      	ldr	r3, [pc, #464]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e06e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e070:	4a73      	ldr	r2, [pc, #460]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e072:	f023 0304 	bic.w	r3, r3, #4
 800e076:	6713      	str	r3, [r2, #112]	; 0x70
 800e078:	e01c      	b.n	800e0b4 <HAL_RCC_OscConfig+0x5e0>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	2b05      	cmp	r3, #5
 800e080:	d10c      	bne.n	800e09c <HAL_RCC_OscConfig+0x5c8>
 800e082:	4b6f      	ldr	r3, [pc, #444]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e086:	4a6e      	ldr	r2, [pc, #440]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e088:	f043 0304 	orr.w	r3, r3, #4
 800e08c:	6713      	str	r3, [r2, #112]	; 0x70
 800e08e:	4b6c      	ldr	r3, [pc, #432]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e092:	4a6b      	ldr	r2, [pc, #428]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e094:	f043 0301 	orr.w	r3, r3, #1
 800e098:	6713      	str	r3, [r2, #112]	; 0x70
 800e09a:	e00b      	b.n	800e0b4 <HAL_RCC_OscConfig+0x5e0>
 800e09c:	4b68      	ldr	r3, [pc, #416]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0a0:	4a67      	ldr	r2, [pc, #412]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e0a2:	f023 0301 	bic.w	r3, r3, #1
 800e0a6:	6713      	str	r3, [r2, #112]	; 0x70
 800e0a8:	4b65      	ldr	r3, [pc, #404]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ac:	4a64      	ldr	r2, [pc, #400]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e0ae:	f023 0304 	bic.w	r3, r3, #4
 800e0b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	689b      	ldr	r3, [r3, #8]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d015      	beq.n	800e0e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0bc:	f7f7 fc1e 	bl	80058fc <HAL_GetTick>
 800e0c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e0c2:	e00a      	b.n	800e0da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0c4:	f7f7 fc1a 	bl	80058fc <HAL_GetTick>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0cc:	1ad3      	subs	r3, r2, r3
 800e0ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d901      	bls.n	800e0da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	e14e      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e0da:	4b59      	ldr	r3, [pc, #356]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0de:	f003 0302 	and.w	r3, r3, #2
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d0ee      	beq.n	800e0c4 <HAL_RCC_OscConfig+0x5f0>
 800e0e6:	e014      	b.n	800e112 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0e8:	f7f7 fc08 	bl	80058fc <HAL_GetTick>
 800e0ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e0ee:	e00a      	b.n	800e106 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0f0:	f7f7 fc04 	bl	80058fc <HAL_GetTick>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f8:	1ad3      	subs	r3, r2, r3
 800e0fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d901      	bls.n	800e106 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e102:	2303      	movs	r3, #3
 800e104:	e138      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e106:	4b4e      	ldr	r3, [pc, #312]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e10a:	f003 0302 	and.w	r3, r3, #2
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d1ee      	bne.n	800e0f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e116:	2b00      	cmp	r3, #0
 800e118:	f000 812d 	beq.w	800e376 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e11c:	4b48      	ldr	r3, [pc, #288]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e124:	2b18      	cmp	r3, #24
 800e126:	f000 80bd 	beq.w	800e2a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12e:	2b02      	cmp	r3, #2
 800e130:	f040 809e 	bne.w	800e270 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e134:	4b42      	ldr	r3, [pc, #264]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a41      	ldr	r2, [pc, #260]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e13a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e13e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e140:	f7f7 fbdc 	bl	80058fc <HAL_GetTick>
 800e144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e146:	e008      	b.n	800e15a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e148:	f7f7 fbd8 	bl	80058fc <HAL_GetTick>
 800e14c:	4602      	mov	r2, r0
 800e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	2b02      	cmp	r3, #2
 800e154:	d901      	bls.n	800e15a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e156:	2303      	movs	r3, #3
 800e158:	e10e      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e15a:	4b39      	ldr	r3, [pc, #228]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1f0      	bne.n	800e148 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e166:	4b36      	ldr	r3, [pc, #216]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e16a:	4b37      	ldr	r3, [pc, #220]	; (800e248 <HAL_RCC_OscConfig+0x774>)
 800e16c:	4013      	ands	r3, r2
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e176:	0112      	lsls	r2, r2, #4
 800e178:	430a      	orrs	r2, r1
 800e17a:	4931      	ldr	r1, [pc, #196]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e17c:	4313      	orrs	r3, r2
 800e17e:	628b      	str	r3, [r1, #40]	; 0x28
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e184:	3b01      	subs	r3, #1
 800e186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18e:	3b01      	subs	r3, #1
 800e190:	025b      	lsls	r3, r3, #9
 800e192:	b29b      	uxth	r3, r3
 800e194:	431a      	orrs	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e19a:	3b01      	subs	r3, #1
 800e19c:	041b      	lsls	r3, r3, #16
 800e19e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e1a2:	431a      	orrs	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1a8:	3b01      	subs	r3, #1
 800e1aa:	061b      	lsls	r3, r3, #24
 800e1ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e1b0:	4923      	ldr	r1, [pc, #140]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e1b6:	4b22      	ldr	r3, [pc, #136]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ba:	4a21      	ldr	r2, [pc, #132]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e1bc:	f023 0301 	bic.w	r3, r3, #1
 800e1c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e1c2:	4b1f      	ldr	r3, [pc, #124]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e1c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1c6:	4b21      	ldr	r3, [pc, #132]	; (800e24c <HAL_RCC_OscConfig+0x778>)
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e1ce:	00d2      	lsls	r2, r2, #3
 800e1d0:	491b      	ldr	r1, [pc, #108]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e1d6:	4b1a      	ldr	r3, [pc, #104]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1da:	f023 020c 	bic.w	r2, r3, #12
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1e2:	4917      	ldr	r1, [pc, #92]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e1e8:	4b15      	ldr	r3, [pc, #84]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ec:	f023 0202 	bic.w	r2, r3, #2
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f4:	4912      	ldr	r1, [pc, #72]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e1fa:	4b11      	ldr	r3, [pc, #68]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fe:	4a10      	ldr	r2, [pc, #64]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e204:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e206:	4b0e      	ldr	r3, [pc, #56]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20a:	4a0d      	ldr	r2, [pc, #52]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e20c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e210:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e212:	4b0b      	ldr	r3, [pc, #44]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e216:	4a0a      	ldr	r2, [pc, #40]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e21c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e21e:	4b08      	ldr	r3, [pc, #32]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e222:	4a07      	ldr	r2, [pc, #28]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e224:	f043 0301 	orr.w	r3, r3, #1
 800e228:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e22a:	4b05      	ldr	r3, [pc, #20]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4a04      	ldr	r2, [pc, #16]	; (800e240 <HAL_RCC_OscConfig+0x76c>)
 800e230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e236:	f7f7 fb61 	bl	80058fc <HAL_GetTick>
 800e23a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e23c:	e011      	b.n	800e262 <HAL_RCC_OscConfig+0x78e>
 800e23e:	bf00      	nop
 800e240:	58024400 	.word	0x58024400
 800e244:	58024800 	.word	0x58024800
 800e248:	fffffc0c 	.word	0xfffffc0c
 800e24c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e250:	f7f7 fb54 	bl	80058fc <HAL_GetTick>
 800e254:	4602      	mov	r2, r0
 800e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	2b02      	cmp	r3, #2
 800e25c:	d901      	bls.n	800e262 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e25e:	2303      	movs	r3, #3
 800e260:	e08a      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e262:	4b47      	ldr	r3, [pc, #284]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d0f0      	beq.n	800e250 <HAL_RCC_OscConfig+0x77c>
 800e26e:	e082      	b.n	800e376 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e270:	4b43      	ldr	r3, [pc, #268]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a42      	ldr	r2, [pc, #264]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e27a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e27c:	f7f7 fb3e 	bl	80058fc <HAL_GetTick>
 800e280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e282:	e008      	b.n	800e296 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e284:	f7f7 fb3a 	bl	80058fc <HAL_GetTick>
 800e288:	4602      	mov	r2, r0
 800e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	2b02      	cmp	r3, #2
 800e290:	d901      	bls.n	800e296 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e292:	2303      	movs	r3, #3
 800e294:	e070      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e296:	4b3a      	ldr	r3, [pc, #232]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d1f0      	bne.n	800e284 <HAL_RCC_OscConfig+0x7b0>
 800e2a2:	e068      	b.n	800e376 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e2a4:	4b36      	ldr	r3, [pc, #216]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e2aa:	4b35      	ldr	r3, [pc, #212]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d031      	beq.n	800e31c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	f003 0203 	and.w	r2, r3, #3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d12a      	bne.n	800e31c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	091b      	lsrs	r3, r3, #4
 800e2ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d122      	bne.n	800e31c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d11a      	bne.n	800e31c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	0a5b      	lsrs	r3, r3, #9
 800e2ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d111      	bne.n	800e31c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	0c1b      	lsrs	r3, r3, #16
 800e2fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e304:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e306:	429a      	cmp	r2, r3
 800e308:	d108      	bne.n	800e31c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	0e1b      	lsrs	r3, r3, #24
 800e30e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e316:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e318:	429a      	cmp	r2, r3
 800e31a:	d001      	beq.n	800e320 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e31c:	2301      	movs	r3, #1
 800e31e:	e02b      	b.n	800e378 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e320:	4b17      	ldr	r3, [pc, #92]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e324:	08db      	lsrs	r3, r3, #3
 800e326:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e32a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	429a      	cmp	r2, r3
 800e334:	d01f      	beq.n	800e376 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e336:	4b12      	ldr	r3, [pc, #72]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33a:	4a11      	ldr	r2, [pc, #68]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e33c:	f023 0301 	bic.w	r3, r3, #1
 800e340:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e342:	f7f7 fadb 	bl	80058fc <HAL_GetTick>
 800e346:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e348:	bf00      	nop
 800e34a:	f7f7 fad7 	bl	80058fc <HAL_GetTick>
 800e34e:	4602      	mov	r2, r0
 800e350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e352:	4293      	cmp	r3, r2
 800e354:	d0f9      	beq.n	800e34a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e356:	4b0a      	ldr	r3, [pc, #40]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e35a:	4b0a      	ldr	r3, [pc, #40]	; (800e384 <HAL_RCC_OscConfig+0x8b0>)
 800e35c:	4013      	ands	r3, r2
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e362:	00d2      	lsls	r2, r2, #3
 800e364:	4906      	ldr	r1, [pc, #24]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e366:	4313      	orrs	r3, r2
 800e368:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e36a:	4b05      	ldr	r3, [pc, #20]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e36e:	4a04      	ldr	r2, [pc, #16]	; (800e380 <HAL_RCC_OscConfig+0x8ac>)
 800e370:	f043 0301 	orr.w	r3, r3, #1
 800e374:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3730      	adds	r7, #48	; 0x30
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	58024400 	.word	0x58024400
 800e384:	ffff0007 	.word	0xffff0007

0800e388 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e398:	2301      	movs	r3, #1
 800e39a:	e19c      	b.n	800e6d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e39c:	4b8a      	ldr	r3, [pc, #552]	; (800e5c8 <HAL_RCC_ClockConfig+0x240>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f003 030f 	and.w	r3, r3, #15
 800e3a4:	683a      	ldr	r2, [r7, #0]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d910      	bls.n	800e3cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e3aa:	4b87      	ldr	r3, [pc, #540]	; (800e5c8 <HAL_RCC_ClockConfig+0x240>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f023 020f 	bic.w	r2, r3, #15
 800e3b2:	4985      	ldr	r1, [pc, #532]	; (800e5c8 <HAL_RCC_ClockConfig+0x240>)
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e3ba:	4b83      	ldr	r3, [pc, #524]	; (800e5c8 <HAL_RCC_ClockConfig+0x240>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f003 030f 	and.w	r3, r3, #15
 800e3c2:	683a      	ldr	r2, [r7, #0]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d001      	beq.n	800e3cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	e184      	b.n	800e6d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f003 0304 	and.w	r3, r3, #4
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d010      	beq.n	800e3fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	691a      	ldr	r2, [r3, #16]
 800e3dc:	4b7b      	ldr	r3, [pc, #492]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e3de:	699b      	ldr	r3, [r3, #24]
 800e3e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d908      	bls.n	800e3fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e3e8:	4b78      	ldr	r3, [pc, #480]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e3ea:	699b      	ldr	r3, [r3, #24]
 800e3ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	4975      	ldr	r1, [pc, #468]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f003 0308 	and.w	r3, r3, #8
 800e402:	2b00      	cmp	r3, #0
 800e404:	d010      	beq.n	800e428 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	695a      	ldr	r2, [r3, #20]
 800e40a:	4b70      	ldr	r3, [pc, #448]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e40c:	69db      	ldr	r3, [r3, #28]
 800e40e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e412:	429a      	cmp	r2, r3
 800e414:	d908      	bls.n	800e428 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e416:	4b6d      	ldr	r3, [pc, #436]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e418:	69db      	ldr	r3, [r3, #28]
 800e41a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	695b      	ldr	r3, [r3, #20]
 800e422:	496a      	ldr	r1, [pc, #424]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e424:	4313      	orrs	r3, r2
 800e426:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f003 0310 	and.w	r3, r3, #16
 800e430:	2b00      	cmp	r3, #0
 800e432:	d010      	beq.n	800e456 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	699a      	ldr	r2, [r3, #24]
 800e438:	4b64      	ldr	r3, [pc, #400]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e43a:	69db      	ldr	r3, [r3, #28]
 800e43c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e440:	429a      	cmp	r2, r3
 800e442:	d908      	bls.n	800e456 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e444:	4b61      	ldr	r3, [pc, #388]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e446:	69db      	ldr	r3, [r3, #28]
 800e448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	699b      	ldr	r3, [r3, #24]
 800e450:	495e      	ldr	r1, [pc, #376]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e452:	4313      	orrs	r3, r2
 800e454:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f003 0320 	and.w	r3, r3, #32
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d010      	beq.n	800e484 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	69da      	ldr	r2, [r3, #28]
 800e466:	4b59      	ldr	r3, [pc, #356]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e468:	6a1b      	ldr	r3, [r3, #32]
 800e46a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e46e:	429a      	cmp	r2, r3
 800e470:	d908      	bls.n	800e484 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e472:	4b56      	ldr	r3, [pc, #344]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e474:	6a1b      	ldr	r3, [r3, #32]
 800e476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	69db      	ldr	r3, [r3, #28]
 800e47e:	4953      	ldr	r1, [pc, #332]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e480:	4313      	orrs	r3, r2
 800e482:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f003 0302 	and.w	r3, r3, #2
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d010      	beq.n	800e4b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	68da      	ldr	r2, [r3, #12]
 800e494:	4b4d      	ldr	r3, [pc, #308]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e496:	699b      	ldr	r3, [r3, #24]
 800e498:	f003 030f 	and.w	r3, r3, #15
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d908      	bls.n	800e4b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e4a0:	4b4a      	ldr	r3, [pc, #296]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	f023 020f 	bic.w	r2, r3, #15
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	4947      	ldr	r1, [pc, #284]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d055      	beq.n	800e56a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e4be:	4b43      	ldr	r3, [pc, #268]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e4c0:	699b      	ldr	r3, [r3, #24]
 800e4c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	4940      	ldr	r1, [pc, #256]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d107      	bne.n	800e4e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e4d8:	4b3c      	ldr	r3, [pc, #240]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d121      	bne.n	800e528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e0f6      	b.n	800e6d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	2b03      	cmp	r3, #3
 800e4ee:	d107      	bne.n	800e500 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e4f0:	4b36      	ldr	r3, [pc, #216]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d115      	bne.n	800e528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e0ea      	b.n	800e6d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	2b01      	cmp	r3, #1
 800e506:	d107      	bne.n	800e518 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e508:	4b30      	ldr	r3, [pc, #192]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e510:	2b00      	cmp	r3, #0
 800e512:	d109      	bne.n	800e528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e514:	2301      	movs	r3, #1
 800e516:	e0de      	b.n	800e6d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e518:	4b2c      	ldr	r3, [pc, #176]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f003 0304 	and.w	r3, r3, #4
 800e520:	2b00      	cmp	r3, #0
 800e522:	d101      	bne.n	800e528 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e524:	2301      	movs	r3, #1
 800e526:	e0d6      	b.n	800e6d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e528:	4b28      	ldr	r3, [pc, #160]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e52a:	691b      	ldr	r3, [r3, #16]
 800e52c:	f023 0207 	bic.w	r2, r3, #7
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	4925      	ldr	r1, [pc, #148]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e536:	4313      	orrs	r3, r2
 800e538:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e53a:	f7f7 f9df 	bl	80058fc <HAL_GetTick>
 800e53e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e540:	e00a      	b.n	800e558 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e542:	f7f7 f9db 	bl	80058fc <HAL_GetTick>
 800e546:	4602      	mov	r2, r0
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e550:	4293      	cmp	r3, r2
 800e552:	d901      	bls.n	800e558 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e554:	2303      	movs	r3, #3
 800e556:	e0be      	b.n	800e6d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e558:	4b1c      	ldr	r3, [pc, #112]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e55a:	691b      	ldr	r3, [r3, #16]
 800e55c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	00db      	lsls	r3, r3, #3
 800e566:	429a      	cmp	r2, r3
 800e568:	d1eb      	bne.n	800e542 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f003 0302 	and.w	r3, r3, #2
 800e572:	2b00      	cmp	r3, #0
 800e574:	d010      	beq.n	800e598 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	68da      	ldr	r2, [r3, #12]
 800e57a:	4b14      	ldr	r3, [pc, #80]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e57c:	699b      	ldr	r3, [r3, #24]
 800e57e:	f003 030f 	and.w	r3, r3, #15
 800e582:	429a      	cmp	r2, r3
 800e584:	d208      	bcs.n	800e598 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e586:	4b11      	ldr	r3, [pc, #68]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	f023 020f 	bic.w	r2, r3, #15
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	490e      	ldr	r1, [pc, #56]	; (800e5cc <HAL_RCC_ClockConfig+0x244>)
 800e594:	4313      	orrs	r3, r2
 800e596:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e598:	4b0b      	ldr	r3, [pc, #44]	; (800e5c8 <HAL_RCC_ClockConfig+0x240>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f003 030f 	and.w	r3, r3, #15
 800e5a0:	683a      	ldr	r2, [r7, #0]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d214      	bcs.n	800e5d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e5a6:	4b08      	ldr	r3, [pc, #32]	; (800e5c8 <HAL_RCC_ClockConfig+0x240>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f023 020f 	bic.w	r2, r3, #15
 800e5ae:	4906      	ldr	r1, [pc, #24]	; (800e5c8 <HAL_RCC_ClockConfig+0x240>)
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e5b6:	4b04      	ldr	r3, [pc, #16]	; (800e5c8 <HAL_RCC_ClockConfig+0x240>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f003 030f 	and.w	r3, r3, #15
 800e5be:	683a      	ldr	r2, [r7, #0]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d005      	beq.n	800e5d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e086      	b.n	800e6d6 <HAL_RCC_ClockConfig+0x34e>
 800e5c8:	52002000 	.word	0x52002000
 800e5cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f003 0304 	and.w	r3, r3, #4
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d010      	beq.n	800e5fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	691a      	ldr	r2, [r3, #16]
 800e5e0:	4b3f      	ldr	r3, [pc, #252]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e5e2:	699b      	ldr	r3, [r3, #24]
 800e5e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d208      	bcs.n	800e5fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e5ec:	4b3c      	ldr	r3, [pc, #240]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	4939      	ldr	r1, [pc, #228]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f003 0308 	and.w	r3, r3, #8
 800e606:	2b00      	cmp	r3, #0
 800e608:	d010      	beq.n	800e62c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	695a      	ldr	r2, [r3, #20]
 800e60e:	4b34      	ldr	r3, [pc, #208]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e610:	69db      	ldr	r3, [r3, #28]
 800e612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e616:	429a      	cmp	r2, r3
 800e618:	d208      	bcs.n	800e62c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e61a:	4b31      	ldr	r3, [pc, #196]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e61c:	69db      	ldr	r3, [r3, #28]
 800e61e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	695b      	ldr	r3, [r3, #20]
 800e626:	492e      	ldr	r1, [pc, #184]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e628:	4313      	orrs	r3, r2
 800e62a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f003 0310 	and.w	r3, r3, #16
 800e634:	2b00      	cmp	r3, #0
 800e636:	d010      	beq.n	800e65a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	699a      	ldr	r2, [r3, #24]
 800e63c:	4b28      	ldr	r3, [pc, #160]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e63e:	69db      	ldr	r3, [r3, #28]
 800e640:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e644:	429a      	cmp	r2, r3
 800e646:	d208      	bcs.n	800e65a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e648:	4b25      	ldr	r3, [pc, #148]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e64a:	69db      	ldr	r3, [r3, #28]
 800e64c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	699b      	ldr	r3, [r3, #24]
 800e654:	4922      	ldr	r1, [pc, #136]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e656:	4313      	orrs	r3, r2
 800e658:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f003 0320 	and.w	r3, r3, #32
 800e662:	2b00      	cmp	r3, #0
 800e664:	d010      	beq.n	800e688 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	69da      	ldr	r2, [r3, #28]
 800e66a:	4b1d      	ldr	r3, [pc, #116]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e66c:	6a1b      	ldr	r3, [r3, #32]
 800e66e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e672:	429a      	cmp	r2, r3
 800e674:	d208      	bcs.n	800e688 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e676:	4b1a      	ldr	r3, [pc, #104]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e678:	6a1b      	ldr	r3, [r3, #32]
 800e67a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	69db      	ldr	r3, [r3, #28]
 800e682:	4917      	ldr	r1, [pc, #92]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e684:	4313      	orrs	r3, r2
 800e686:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e688:	f000 f834 	bl	800e6f4 <HAL_RCC_GetSysClockFreq>
 800e68c:	4602      	mov	r2, r0
 800e68e:	4b14      	ldr	r3, [pc, #80]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	0a1b      	lsrs	r3, r3, #8
 800e694:	f003 030f 	and.w	r3, r3, #15
 800e698:	4912      	ldr	r1, [pc, #72]	; (800e6e4 <HAL_RCC_ClockConfig+0x35c>)
 800e69a:	5ccb      	ldrb	r3, [r1, r3]
 800e69c:	f003 031f 	and.w	r3, r3, #31
 800e6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800e6a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e6a6:	4b0e      	ldr	r3, [pc, #56]	; (800e6e0 <HAL_RCC_ClockConfig+0x358>)
 800e6a8:	699b      	ldr	r3, [r3, #24]
 800e6aa:	f003 030f 	and.w	r3, r3, #15
 800e6ae:	4a0d      	ldr	r2, [pc, #52]	; (800e6e4 <HAL_RCC_ClockConfig+0x35c>)
 800e6b0:	5cd3      	ldrb	r3, [r2, r3]
 800e6b2:	f003 031f 	and.w	r3, r3, #31
 800e6b6:	693a      	ldr	r2, [r7, #16]
 800e6b8:	fa22 f303 	lsr.w	r3, r2, r3
 800e6bc:	4a0a      	ldr	r2, [pc, #40]	; (800e6e8 <HAL_RCC_ClockConfig+0x360>)
 800e6be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e6c0:	4a0a      	ldr	r2, [pc, #40]	; (800e6ec <HAL_RCC_ClockConfig+0x364>)
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e6c6:	4b0a      	ldr	r3, [pc, #40]	; (800e6f0 <HAL_RCC_ClockConfig+0x368>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7f5 ff3c 	bl	8004548 <HAL_InitTick>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3718      	adds	r7, #24
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	58024400 	.word	0x58024400
 800e6e4:	0801adc4 	.word	0x0801adc4
 800e6e8:	24000094 	.word	0x24000094
 800e6ec:	24000090 	.word	0x24000090
 800e6f0:	24000098 	.word	0x24000098

0800e6f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b089      	sub	sp, #36	; 0x24
 800e6f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e6fa:	4bb3      	ldr	r3, [pc, #716]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e702:	2b18      	cmp	r3, #24
 800e704:	f200 8155 	bhi.w	800e9b2 <HAL_RCC_GetSysClockFreq+0x2be>
 800e708:	a201      	add	r2, pc, #4	; (adr r2, 800e710 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e70e:	bf00      	nop
 800e710:	0800e775 	.word	0x0800e775
 800e714:	0800e9b3 	.word	0x0800e9b3
 800e718:	0800e9b3 	.word	0x0800e9b3
 800e71c:	0800e9b3 	.word	0x0800e9b3
 800e720:	0800e9b3 	.word	0x0800e9b3
 800e724:	0800e9b3 	.word	0x0800e9b3
 800e728:	0800e9b3 	.word	0x0800e9b3
 800e72c:	0800e9b3 	.word	0x0800e9b3
 800e730:	0800e79b 	.word	0x0800e79b
 800e734:	0800e9b3 	.word	0x0800e9b3
 800e738:	0800e9b3 	.word	0x0800e9b3
 800e73c:	0800e9b3 	.word	0x0800e9b3
 800e740:	0800e9b3 	.word	0x0800e9b3
 800e744:	0800e9b3 	.word	0x0800e9b3
 800e748:	0800e9b3 	.word	0x0800e9b3
 800e74c:	0800e9b3 	.word	0x0800e9b3
 800e750:	0800e7a1 	.word	0x0800e7a1
 800e754:	0800e9b3 	.word	0x0800e9b3
 800e758:	0800e9b3 	.word	0x0800e9b3
 800e75c:	0800e9b3 	.word	0x0800e9b3
 800e760:	0800e9b3 	.word	0x0800e9b3
 800e764:	0800e9b3 	.word	0x0800e9b3
 800e768:	0800e9b3 	.word	0x0800e9b3
 800e76c:	0800e9b3 	.word	0x0800e9b3
 800e770:	0800e7a7 	.word	0x0800e7a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e774:	4b94      	ldr	r3, [pc, #592]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f003 0320 	and.w	r3, r3, #32
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d009      	beq.n	800e794 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e780:	4b91      	ldr	r3, [pc, #580]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	08db      	lsrs	r3, r3, #3
 800e786:	f003 0303 	and.w	r3, r3, #3
 800e78a:	4a90      	ldr	r2, [pc, #576]	; (800e9cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e78c:	fa22 f303 	lsr.w	r3, r2, r3
 800e790:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e792:	e111      	b.n	800e9b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e794:	4b8d      	ldr	r3, [pc, #564]	; (800e9cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e796:	61bb      	str	r3, [r7, #24]
      break;
 800e798:	e10e      	b.n	800e9b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e79a:	4b8d      	ldr	r3, [pc, #564]	; (800e9d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e79c:	61bb      	str	r3, [r7, #24]
      break;
 800e79e:	e10b      	b.n	800e9b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e7a0:	4b8c      	ldr	r3, [pc, #560]	; (800e9d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e7a2:	61bb      	str	r3, [r7, #24]
      break;
 800e7a4:	e108      	b.n	800e9b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e7a6:	4b88      	ldr	r3, [pc, #544]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7aa:	f003 0303 	and.w	r3, r3, #3
 800e7ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e7b0:	4b85      	ldr	r3, [pc, #532]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b4:	091b      	lsrs	r3, r3, #4
 800e7b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e7bc:	4b82      	ldr	r3, [pc, #520]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e7c6:	4b80      	ldr	r3, [pc, #512]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ca:	08db      	lsrs	r3, r3, #3
 800e7cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7d0:	68fa      	ldr	r2, [r7, #12]
 800e7d2:	fb02 f303 	mul.w	r3, r2, r3
 800e7d6:	ee07 3a90 	vmov	s15, r3
 800e7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f000 80e1 	beq.w	800e9ac <HAL_RCC_GetSysClockFreq+0x2b8>
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	f000 8083 	beq.w	800e8f8 <HAL_RCC_GetSysClockFreq+0x204>
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2b02      	cmp	r3, #2
 800e7f6:	f200 80a1 	bhi.w	800e93c <HAL_RCC_GetSysClockFreq+0x248>
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d003      	beq.n	800e808 <HAL_RCC_GetSysClockFreq+0x114>
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	2b01      	cmp	r3, #1
 800e804:	d056      	beq.n	800e8b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e806:	e099      	b.n	800e93c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e808:	4b6f      	ldr	r3, [pc, #444]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f003 0320 	and.w	r3, r3, #32
 800e810:	2b00      	cmp	r3, #0
 800e812:	d02d      	beq.n	800e870 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e814:	4b6c      	ldr	r3, [pc, #432]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	08db      	lsrs	r3, r3, #3
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	4a6b      	ldr	r2, [pc, #428]	; (800e9cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e820:	fa22 f303 	lsr.w	r3, r2, r3
 800e824:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	ee07 3a90 	vmov	s15, r3
 800e82c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	ee07 3a90 	vmov	s15, r3
 800e836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e83e:	4b62      	ldr	r3, [pc, #392]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e846:	ee07 3a90 	vmov	s15, r3
 800e84a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e84e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e852:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e9d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e85a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e85e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e86a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e86e:	e087      	b.n	800e980 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	ee07 3a90 	vmov	s15, r3
 800e876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e87a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e9dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800e87e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e882:	4b51      	ldr	r3, [pc, #324]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e88a:	ee07 3a90 	vmov	s15, r3
 800e88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e892:	ed97 6a02 	vldr	s12, [r7, #8]
 800e896:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e9d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e89a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e89e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e8b2:	e065      	b.n	800e980 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	ee07 3a90 	vmov	s15, r3
 800e8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8be:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e9e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e8c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8c6:	4b40      	ldr	r3, [pc, #256]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ce:	ee07 3a90 	vmov	s15, r3
 800e8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e9d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e8de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e8f6:	e043      	b.n	800e980 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	ee07 3a90 	vmov	s15, r3
 800e8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e902:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e9e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e90a:	4b2f      	ldr	r3, [pc, #188]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e912:	ee07 3a90 	vmov	s15, r3
 800e916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e91a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e91e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e9d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e92a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e92e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e932:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e936:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e93a:	e021      	b.n	800e980 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	ee07 3a90 	vmov	s15, r3
 800e942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e946:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e9e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e94e:	4b1e      	ldr	r3, [pc, #120]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e956:	ee07 3a90 	vmov	s15, r3
 800e95a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e95e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e962:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e9d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e96a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e96e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e97a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e97e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e980:	4b11      	ldr	r3, [pc, #68]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e984:	0a5b      	lsrs	r3, r3, #9
 800e986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e98a:	3301      	adds	r3, #1
 800e98c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	ee07 3a90 	vmov	s15, r3
 800e994:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e998:	edd7 6a07 	vldr	s13, [r7, #28]
 800e99c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9a4:	ee17 3a90 	vmov	r3, s15
 800e9a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e9aa:	e005      	b.n	800e9b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	61bb      	str	r3, [r7, #24]
      break;
 800e9b0:	e002      	b.n	800e9b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e9b2:	4b07      	ldr	r3, [pc, #28]	; (800e9d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e9b4:	61bb      	str	r3, [r7, #24]
      break;
 800e9b6:	bf00      	nop
  }

  return sysclockfreq;
 800e9b8:	69bb      	ldr	r3, [r7, #24]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3724      	adds	r7, #36	; 0x24
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	58024400 	.word	0x58024400
 800e9cc:	03d09000 	.word	0x03d09000
 800e9d0:	003d0900 	.word	0x003d0900
 800e9d4:	017d7840 	.word	0x017d7840
 800e9d8:	46000000 	.word	0x46000000
 800e9dc:	4c742400 	.word	0x4c742400
 800e9e0:	4a742400 	.word	0x4a742400
 800e9e4:	4bbebc20 	.word	0x4bbebc20

0800e9e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e9ee:	f7ff fe81 	bl	800e6f4 <HAL_RCC_GetSysClockFreq>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	4b10      	ldr	r3, [pc, #64]	; (800ea38 <HAL_RCC_GetHCLKFreq+0x50>)
 800e9f6:	699b      	ldr	r3, [r3, #24]
 800e9f8:	0a1b      	lsrs	r3, r3, #8
 800e9fa:	f003 030f 	and.w	r3, r3, #15
 800e9fe:	490f      	ldr	r1, [pc, #60]	; (800ea3c <HAL_RCC_GetHCLKFreq+0x54>)
 800ea00:	5ccb      	ldrb	r3, [r1, r3]
 800ea02:	f003 031f 	and.w	r3, r3, #31
 800ea06:	fa22 f303 	lsr.w	r3, r2, r3
 800ea0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ea0c:	4b0a      	ldr	r3, [pc, #40]	; (800ea38 <HAL_RCC_GetHCLKFreq+0x50>)
 800ea0e:	699b      	ldr	r3, [r3, #24]
 800ea10:	f003 030f 	and.w	r3, r3, #15
 800ea14:	4a09      	ldr	r2, [pc, #36]	; (800ea3c <HAL_RCC_GetHCLKFreq+0x54>)
 800ea16:	5cd3      	ldrb	r3, [r2, r3]
 800ea18:	f003 031f 	and.w	r3, r3, #31
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ea22:	4a07      	ldr	r2, [pc, #28]	; (800ea40 <HAL_RCC_GetHCLKFreq+0x58>)
 800ea24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ea26:	4a07      	ldr	r2, [pc, #28]	; (800ea44 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ea2c:	4b04      	ldr	r3, [pc, #16]	; (800ea40 <HAL_RCC_GetHCLKFreq+0x58>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3708      	adds	r7, #8
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	58024400 	.word	0x58024400
 800ea3c:	0801adc4 	.word	0x0801adc4
 800ea40:	24000094 	.word	0x24000094
 800ea44:	24000090 	.word	0x24000090

0800ea48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ea4c:	f7ff ffcc 	bl	800e9e8 <HAL_RCC_GetHCLKFreq>
 800ea50:	4602      	mov	r2, r0
 800ea52:	4b06      	ldr	r3, [pc, #24]	; (800ea6c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ea54:	69db      	ldr	r3, [r3, #28]
 800ea56:	091b      	lsrs	r3, r3, #4
 800ea58:	f003 0307 	and.w	r3, r3, #7
 800ea5c:	4904      	ldr	r1, [pc, #16]	; (800ea70 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ea5e:	5ccb      	ldrb	r3, [r1, r3]
 800ea60:	f003 031f 	and.w	r3, r3, #31
 800ea64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	58024400 	.word	0x58024400
 800ea70:	0801adc4 	.word	0x0801adc4

0800ea74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ea78:	f7ff ffb6 	bl	800e9e8 <HAL_RCC_GetHCLKFreq>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	4b06      	ldr	r3, [pc, #24]	; (800ea98 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ea80:	69db      	ldr	r3, [r3, #28]
 800ea82:	0a1b      	lsrs	r3, r3, #8
 800ea84:	f003 0307 	and.w	r3, r3, #7
 800ea88:	4904      	ldr	r1, [pc, #16]	; (800ea9c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ea8a:	5ccb      	ldrb	r3, [r1, r3]
 800ea8c:	f003 031f 	and.w	r3, r3, #31
 800ea90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	58024400 	.word	0x58024400
 800ea9c:	0801adc4 	.word	0x0801adc4

0800eaa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	223f      	movs	r2, #63	; 0x3f
 800eaae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800eab0:	4b1a      	ldr	r3, [pc, #104]	; (800eb1c <HAL_RCC_GetClockConfig+0x7c>)
 800eab2:	691b      	ldr	r3, [r3, #16]
 800eab4:	f003 0207 	and.w	r2, r3, #7
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800eabc:	4b17      	ldr	r3, [pc, #92]	; (800eb1c <HAL_RCC_GetClockConfig+0x7c>)
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800eac8:	4b14      	ldr	r3, [pc, #80]	; (800eb1c <HAL_RCC_GetClockConfig+0x7c>)
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	f003 020f 	and.w	r2, r3, #15
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ead4:	4b11      	ldr	r3, [pc, #68]	; (800eb1c <HAL_RCC_GetClockConfig+0x7c>)
 800ead6:	699b      	ldr	r3, [r3, #24]
 800ead8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800eae0:	4b0e      	ldr	r3, [pc, #56]	; (800eb1c <HAL_RCC_GetClockConfig+0x7c>)
 800eae2:	69db      	ldr	r3, [r3, #28]
 800eae4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800eaec:	4b0b      	ldr	r3, [pc, #44]	; (800eb1c <HAL_RCC_GetClockConfig+0x7c>)
 800eaee:	69db      	ldr	r3, [r3, #28]
 800eaf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800eaf8:	4b08      	ldr	r3, [pc, #32]	; (800eb1c <HAL_RCC_GetClockConfig+0x7c>)
 800eafa:	6a1b      	ldr	r3, [r3, #32]
 800eafc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800eb04:	4b06      	ldr	r3, [pc, #24]	; (800eb20 <HAL_RCC_GetClockConfig+0x80>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f003 020f 	and.w	r2, r3, #15
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	601a      	str	r2, [r3, #0]
}
 800eb10:	bf00      	nop
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr
 800eb1c:	58024400 	.word	0x58024400
 800eb20:	52002000 	.word	0x52002000

0800eb24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800eb24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb28:	b0ca      	sub	sp, #296	; 0x128
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800eb30:	2300      	movs	r3, #0
 800eb32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800eb36:	2300      	movs	r3, #0
 800eb38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800eb3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb44:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800eb48:	2500      	movs	r5, #0
 800eb4a:	ea54 0305 	orrs.w	r3, r4, r5
 800eb4e:	d049      	beq.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800eb50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eb5a:	d02f      	beq.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800eb5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eb60:	d828      	bhi.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800eb62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb66:	d01a      	beq.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800eb68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb6c:	d822      	bhi.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d003      	beq.n	800eb7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800eb72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb76:	d007      	beq.n	800eb88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800eb78:	e01c      	b.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb7a:	4bb8      	ldr	r3, [pc, #736]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7e:	4ab7      	ldr	r2, [pc, #732]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eb86:	e01a      	b.n	800ebbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb8c:	3308      	adds	r3, #8
 800eb8e:	2102      	movs	r1, #2
 800eb90:	4618      	mov	r0, r3
 800eb92:	f002 fb61 	bl	8011258 <RCCEx_PLL2_Config>
 800eb96:	4603      	mov	r3, r0
 800eb98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eb9c:	e00f      	b.n	800ebbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eba2:	3328      	adds	r3, #40	; 0x28
 800eba4:	2102      	movs	r1, #2
 800eba6:	4618      	mov	r0, r3
 800eba8:	f002 fc08 	bl	80113bc <RCCEx_PLL3_Config>
 800ebac:	4603      	mov	r3, r0
 800ebae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ebb2:	e004      	b.n	800ebbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ebba:	e000      	b.n	800ebbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ebbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10a      	bne.n	800ebdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ebc6:	4ba5      	ldr	r3, [pc, #660]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ebce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebd4:	4aa1      	ldr	r2, [pc, #644]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebd6:	430b      	orrs	r3, r1
 800ebd8:	6513      	str	r3, [r2, #80]	; 0x50
 800ebda:	e003      	b.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebe0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ebe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ebf0:	f04f 0900 	mov.w	r9, #0
 800ebf4:	ea58 0309 	orrs.w	r3, r8, r9
 800ebf8:	d047      	beq.n	800ec8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ebfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec00:	2b04      	cmp	r3, #4
 800ec02:	d82a      	bhi.n	800ec5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ec04:	a201      	add	r2, pc, #4	; (adr r2, 800ec0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ec06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec0a:	bf00      	nop
 800ec0c:	0800ec21 	.word	0x0800ec21
 800ec10:	0800ec2f 	.word	0x0800ec2f
 800ec14:	0800ec45 	.word	0x0800ec45
 800ec18:	0800ec63 	.word	0x0800ec63
 800ec1c:	0800ec63 	.word	0x0800ec63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec20:	4b8e      	ldr	r3, [pc, #568]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec24:	4a8d      	ldr	r2, [pc, #564]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec2c:	e01a      	b.n	800ec64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec32:	3308      	adds	r3, #8
 800ec34:	2100      	movs	r1, #0
 800ec36:	4618      	mov	r0, r3
 800ec38:	f002 fb0e 	bl	8011258 <RCCEx_PLL2_Config>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec42:	e00f      	b.n	800ec64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec48:	3328      	adds	r3, #40	; 0x28
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f002 fbb5 	bl	80113bc <RCCEx_PLL3_Config>
 800ec52:	4603      	mov	r3, r0
 800ec54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec58:	e004      	b.n	800ec64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec60:	e000      	b.n	800ec64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ec62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d10a      	bne.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ec6c:	4b7b      	ldr	r3, [pc, #492]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec70:	f023 0107 	bic.w	r1, r3, #7
 800ec74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec7a:	4a78      	ldr	r2, [pc, #480]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec7c:	430b      	orrs	r3, r1
 800ec7e:	6513      	str	r3, [r2, #80]	; 0x50
 800ec80:	e003      	b.n	800ec8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ec8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec92:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ec96:	f04f 0b00 	mov.w	fp, #0
 800ec9a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ec9e:	d04c      	beq.n	800ed3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800eca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecaa:	d030      	beq.n	800ed0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ecac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecb0:	d829      	bhi.n	800ed06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ecb2:	2bc0      	cmp	r3, #192	; 0xc0
 800ecb4:	d02d      	beq.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ecb6:	2bc0      	cmp	r3, #192	; 0xc0
 800ecb8:	d825      	bhi.n	800ed06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ecba:	2b80      	cmp	r3, #128	; 0x80
 800ecbc:	d018      	beq.n	800ecf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ecbe:	2b80      	cmp	r3, #128	; 0x80
 800ecc0:	d821      	bhi.n	800ed06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d002      	beq.n	800eccc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ecc6:	2b40      	cmp	r3, #64	; 0x40
 800ecc8:	d007      	beq.n	800ecda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ecca:	e01c      	b.n	800ed06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eccc:	4b63      	ldr	r3, [pc, #396]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd0:	4a62      	ldr	r2, [pc, #392]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ecd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ecd8:	e01c      	b.n	800ed14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ecda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecde:	3308      	adds	r3, #8
 800ece0:	2100      	movs	r1, #0
 800ece2:	4618      	mov	r0, r3
 800ece4:	f002 fab8 	bl	8011258 <RCCEx_PLL2_Config>
 800ece8:	4603      	mov	r3, r0
 800ecea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ecee:	e011      	b.n	800ed14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ecf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecf4:	3328      	adds	r3, #40	; 0x28
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f002 fb5f 	bl	80113bc <RCCEx_PLL3_Config>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ed04:	e006      	b.n	800ed14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed06:	2301      	movs	r3, #1
 800ed08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ed0c:	e002      	b.n	800ed14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ed0e:	bf00      	nop
 800ed10:	e000      	b.n	800ed14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ed12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10a      	bne.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ed1c:	4b4f      	ldr	r3, [pc, #316]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed20:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ed24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed2a:	4a4c      	ldr	r2, [pc, #304]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed2c:	430b      	orrs	r3, r1
 800ed2e:	6513      	str	r3, [r2, #80]	; 0x50
 800ed30:	e003      	b.n	800ed3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ed3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed42:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ed46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ed50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ed54:	460b      	mov	r3, r1
 800ed56:	4313      	orrs	r3, r2
 800ed58:	d053      	beq.n	800ee02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ed5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ed62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed66:	d035      	beq.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ed68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed6c:	d82e      	bhi.n	800edcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ed6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ed72:	d031      	beq.n	800edd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ed74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ed78:	d828      	bhi.n	800edcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ed7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed7e:	d01a      	beq.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ed80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed84:	d822      	bhi.n	800edcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d003      	beq.n	800ed92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ed8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed8e:	d007      	beq.n	800eda0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ed90:	e01c      	b.n	800edcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed92:	4b32      	ldr	r3, [pc, #200]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed96:	4a31      	ldr	r2, [pc, #196]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ed9e:	e01c      	b.n	800edda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eda4:	3308      	adds	r3, #8
 800eda6:	2100      	movs	r1, #0
 800eda8:	4618      	mov	r0, r3
 800edaa:	f002 fa55 	bl	8011258 <RCCEx_PLL2_Config>
 800edae:	4603      	mov	r3, r0
 800edb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800edb4:	e011      	b.n	800edda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800edb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edba:	3328      	adds	r3, #40	; 0x28
 800edbc:	2100      	movs	r1, #0
 800edbe:	4618      	mov	r0, r3
 800edc0:	f002 fafc 	bl	80113bc <RCCEx_PLL3_Config>
 800edc4:	4603      	mov	r3, r0
 800edc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800edca:	e006      	b.n	800edda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800edcc:	2301      	movs	r3, #1
 800edce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800edd2:	e002      	b.n	800edda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800edd4:	bf00      	nop
 800edd6:	e000      	b.n	800edda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800edd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10b      	bne.n	800edfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ede2:	4b1e      	ldr	r3, [pc, #120]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ede4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ede6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800edea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800edf2:	4a1a      	ldr	r2, [pc, #104]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800edf4:	430b      	orrs	r3, r1
 800edf6:	6593      	str	r3, [r2, #88]	; 0x58
 800edf8:	e003      	b.n	800ee02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ee02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ee0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ee12:	2300      	movs	r3, #0
 800ee14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ee18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	d056      	beq.n	800eed0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ee22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ee2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee2e:	d038      	beq.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ee30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee34:	d831      	bhi.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ee36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ee3a:	d034      	beq.n	800eea6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ee3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ee40:	d82b      	bhi.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ee42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee46:	d01d      	beq.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ee48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee4c:	d825      	bhi.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d006      	beq.n	800ee60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ee52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ee56:	d00a      	beq.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ee58:	e01f      	b.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ee5a:	bf00      	nop
 800ee5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee60:	4ba2      	ldr	r3, [pc, #648]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee64:	4aa1      	ldr	r2, [pc, #644]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee6c:	e01c      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee72:	3308      	adds	r3, #8
 800ee74:	2100      	movs	r1, #0
 800ee76:	4618      	mov	r0, r3
 800ee78:	f002 f9ee 	bl	8011258 <RCCEx_PLL2_Config>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ee82:	e011      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee88:	3328      	adds	r3, #40	; 0x28
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f002 fa95 	bl	80113bc <RCCEx_PLL3_Config>
 800ee92:	4603      	mov	r3, r0
 800ee94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee98:	e006      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eea0:	e002      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800eea2:	bf00      	nop
 800eea4:	e000      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800eea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10b      	bne.n	800eec8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800eeb0:	4b8e      	ldr	r3, [pc, #568]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eeb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eeb4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800eeb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eebc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eec0:	4a8a      	ldr	r2, [pc, #552]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eec2:	430b      	orrs	r3, r1
 800eec4:	6593      	str	r3, [r2, #88]	; 0x58
 800eec6:	e003      	b.n	800eed0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800eed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800eedc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800eee0:	2300      	movs	r3, #0
 800eee2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800eee6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800eeea:	460b      	mov	r3, r1
 800eeec:	4313      	orrs	r3, r2
 800eeee:	d03a      	beq.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800eef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eef6:	2b30      	cmp	r3, #48	; 0x30
 800eef8:	d01f      	beq.n	800ef3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800eefa:	2b30      	cmp	r3, #48	; 0x30
 800eefc:	d819      	bhi.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800eefe:	2b20      	cmp	r3, #32
 800ef00:	d00c      	beq.n	800ef1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ef02:	2b20      	cmp	r3, #32
 800ef04:	d815      	bhi.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d019      	beq.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ef0a:	2b10      	cmp	r3, #16
 800ef0c:	d111      	bne.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef0e:	4b77      	ldr	r3, [pc, #476]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef12:	4a76      	ldr	r2, [pc, #472]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ef1a:	e011      	b.n	800ef40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ef1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef20:	3308      	adds	r3, #8
 800ef22:	2102      	movs	r1, #2
 800ef24:	4618      	mov	r0, r3
 800ef26:	f002 f997 	bl	8011258 <RCCEx_PLL2_Config>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ef30:	e006      	b.n	800ef40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ef32:	2301      	movs	r3, #1
 800ef34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef38:	e002      	b.n	800ef40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ef3a:	bf00      	nop
 800ef3c:	e000      	b.n	800ef40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ef3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d10a      	bne.n	800ef5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ef48:	4b68      	ldr	r3, [pc, #416]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef4c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ef50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef56:	4a65      	ldr	r2, [pc, #404]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef58:	430b      	orrs	r3, r1
 800ef5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ef5c:	e003      	b.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ef66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ef72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ef76:	2300      	movs	r3, #0
 800ef78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ef7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ef80:	460b      	mov	r3, r1
 800ef82:	4313      	orrs	r3, r2
 800ef84:	d051      	beq.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ef86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef90:	d035      	beq.n	800effe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ef92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef96:	d82e      	bhi.n	800eff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ef98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ef9c:	d031      	beq.n	800f002 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ef9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efa2:	d828      	bhi.n	800eff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800efa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efa8:	d01a      	beq.n	800efe0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800efaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efae:	d822      	bhi.n	800eff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d003      	beq.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800efb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efb8:	d007      	beq.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800efba:	e01c      	b.n	800eff6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efbc:	4b4b      	ldr	r3, [pc, #300]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc0:	4a4a      	ldr	r2, [pc, #296]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800efc8:	e01c      	b.n	800f004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800efca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efce:	3308      	adds	r3, #8
 800efd0:	2100      	movs	r1, #0
 800efd2:	4618      	mov	r0, r3
 800efd4:	f002 f940 	bl	8011258 <RCCEx_PLL2_Config>
 800efd8:	4603      	mov	r3, r0
 800efda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800efde:	e011      	b.n	800f004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800efe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efe4:	3328      	adds	r3, #40	; 0x28
 800efe6:	2100      	movs	r1, #0
 800efe8:	4618      	mov	r0, r3
 800efea:	f002 f9e7 	bl	80113bc <RCCEx_PLL3_Config>
 800efee:	4603      	mov	r3, r0
 800eff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800eff4:	e006      	b.n	800f004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eff6:	2301      	movs	r3, #1
 800eff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800effc:	e002      	b.n	800f004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800effe:	bf00      	nop
 800f000:	e000      	b.n	800f004 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f002:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d10a      	bne.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f00c:	4b37      	ldr	r3, [pc, #220]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f00e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f010:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f01a:	4a34      	ldr	r2, [pc, #208]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f01c:	430b      	orrs	r3, r1
 800f01e:	6513      	str	r3, [r2, #80]	; 0x50
 800f020:	e003      	b.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f026:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f032:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f03a:	2300      	movs	r3, #0
 800f03c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f040:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f044:	460b      	mov	r3, r1
 800f046:	4313      	orrs	r3, r2
 800f048:	d056      	beq.n	800f0f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f04e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f054:	d033      	beq.n	800f0be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f05a:	d82c      	bhi.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f05c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f060:	d02f      	beq.n	800f0c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f062:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f066:	d826      	bhi.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f068:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f06c:	d02b      	beq.n	800f0c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f06e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f072:	d820      	bhi.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f078:	d012      	beq.n	800f0a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f07a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f07e:	d81a      	bhi.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f080:	2b00      	cmp	r3, #0
 800f082:	d022      	beq.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f088:	d115      	bne.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f08e:	3308      	adds	r3, #8
 800f090:	2101      	movs	r1, #1
 800f092:	4618      	mov	r0, r3
 800f094:	f002 f8e0 	bl	8011258 <RCCEx_PLL2_Config>
 800f098:	4603      	mov	r3, r0
 800f09a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f09e:	e015      	b.n	800f0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0a4:	3328      	adds	r3, #40	; 0x28
 800f0a6:	2101      	movs	r1, #1
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f002 f987 	bl	80113bc <RCCEx_PLL3_Config>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f0b4:	e00a      	b.n	800f0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f0bc:	e006      	b.n	800f0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f0be:	bf00      	nop
 800f0c0:	e004      	b.n	800f0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f0c2:	bf00      	nop
 800f0c4:	e002      	b.n	800f0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f0c6:	bf00      	nop
 800f0c8:	e000      	b.n	800f0cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f0ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d10d      	bne.n	800f0f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f0d4:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0e2:	4a02      	ldr	r2, [pc, #8]	; (800f0ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f0e4:	430b      	orrs	r3, r1
 800f0e6:	6513      	str	r3, [r2, #80]	; 0x50
 800f0e8:	e006      	b.n	800f0f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f0ea:	bf00      	nop
 800f0ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f100:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f108:	2300      	movs	r3, #0
 800f10a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f10e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f112:	460b      	mov	r3, r1
 800f114:	4313      	orrs	r3, r2
 800f116:	d055      	beq.n	800f1c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f11c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f124:	d033      	beq.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f12a:	d82c      	bhi.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f12c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f130:	d02f      	beq.n	800f192 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f136:	d826      	bhi.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f138:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f13c:	d02b      	beq.n	800f196 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f13e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f142:	d820      	bhi.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f148:	d012      	beq.n	800f170 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f14a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f14e:	d81a      	bhi.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f150:	2b00      	cmp	r3, #0
 800f152:	d022      	beq.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f158:	d115      	bne.n	800f186 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f15e:	3308      	adds	r3, #8
 800f160:	2101      	movs	r1, #1
 800f162:	4618      	mov	r0, r3
 800f164:	f002 f878 	bl	8011258 <RCCEx_PLL2_Config>
 800f168:	4603      	mov	r3, r0
 800f16a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f16e:	e015      	b.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f174:	3328      	adds	r3, #40	; 0x28
 800f176:	2101      	movs	r1, #1
 800f178:	4618      	mov	r0, r3
 800f17a:	f002 f91f 	bl	80113bc <RCCEx_PLL3_Config>
 800f17e:	4603      	mov	r3, r0
 800f180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f184:	e00a      	b.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f186:	2301      	movs	r3, #1
 800f188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f18c:	e006      	b.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f18e:	bf00      	nop
 800f190:	e004      	b.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f192:	bf00      	nop
 800f194:	e002      	b.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f196:	bf00      	nop
 800f198:	e000      	b.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f19a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f19c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d10b      	bne.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f1a4:	4ba3      	ldr	r3, [pc, #652]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1a8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f1b4:	4a9f      	ldr	r2, [pc, #636]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1b6:	430b      	orrs	r3, r1
 800f1b8:	6593      	str	r3, [r2, #88]	; 0x58
 800f1ba:	e003      	b.n	800f1c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f1d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f1da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f1de:	460b      	mov	r3, r1
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	d037      	beq.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1ee:	d00e      	beq.n	800f20e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f1f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1f4:	d816      	bhi.n	800f224 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d018      	beq.n	800f22c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f1fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1fe:	d111      	bne.n	800f224 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f200:	4b8c      	ldr	r3, [pc, #560]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f204:	4a8b      	ldr	r2, [pc, #556]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f20a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f20c:	e00f      	b.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f212:	3308      	adds	r3, #8
 800f214:	2101      	movs	r1, #1
 800f216:	4618      	mov	r0, r3
 800f218:	f002 f81e 	bl	8011258 <RCCEx_PLL2_Config>
 800f21c:	4603      	mov	r3, r0
 800f21e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f222:	e004      	b.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f224:	2301      	movs	r3, #1
 800f226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f22a:	e000      	b.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f22c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f22e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f232:	2b00      	cmp	r3, #0
 800f234:	d10a      	bne.n	800f24c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f236:	4b7f      	ldr	r3, [pc, #508]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f23a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f23e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f244:	4a7b      	ldr	r2, [pc, #492]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f246:	430b      	orrs	r3, r1
 800f248:	6513      	str	r3, [r2, #80]	; 0x50
 800f24a:	e003      	b.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f24c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f250:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f264:	2300      	movs	r3, #0
 800f266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f26a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f26e:	460b      	mov	r3, r1
 800f270:	4313      	orrs	r3, r2
 800f272:	d039      	beq.n	800f2e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f27a:	2b03      	cmp	r3, #3
 800f27c:	d81c      	bhi.n	800f2b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f27e:	a201      	add	r2, pc, #4	; (adr r2, 800f284 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f284:	0800f2c1 	.word	0x0800f2c1
 800f288:	0800f295 	.word	0x0800f295
 800f28c:	0800f2a3 	.word	0x0800f2a3
 800f290:	0800f2c1 	.word	0x0800f2c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f294:	4b67      	ldr	r3, [pc, #412]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f298:	4a66      	ldr	r2, [pc, #408]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f29a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f29e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f2a0:	e00f      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2a6:	3308      	adds	r3, #8
 800f2a8:	2102      	movs	r1, #2
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f001 ffd4 	bl	8011258 <RCCEx_PLL2_Config>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f2b6:	e004      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f2be:	e000      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f2c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10a      	bne.n	800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f2ca:	4b5a      	ldr	r3, [pc, #360]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2ce:	f023 0103 	bic.w	r1, r3, #3
 800f2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2d8:	4a56      	ldr	r2, [pc, #344]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2da:	430b      	orrs	r3, r1
 800f2dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f2de:	e003      	b.n	800f2e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f2f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f2fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f302:	460b      	mov	r3, r1
 800f304:	4313      	orrs	r3, r2
 800f306:	f000 809f 	beq.w	800f448 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f30a:	4b4b      	ldr	r3, [pc, #300]	; (800f438 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	4a4a      	ldr	r2, [pc, #296]	; (800f438 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f314:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f316:	f7f6 faf1 	bl	80058fc <HAL_GetTick>
 800f31a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f31e:	e00b      	b.n	800f338 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f320:	f7f6 faec 	bl	80058fc <HAL_GetTick>
 800f324:	4602      	mov	r2, r0
 800f326:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f32a:	1ad3      	subs	r3, r2, r3
 800f32c:	2b64      	cmp	r3, #100	; 0x64
 800f32e:	d903      	bls.n	800f338 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f330:	2303      	movs	r3, #3
 800f332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f336:	e005      	b.n	800f344 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f338:	4b3f      	ldr	r3, [pc, #252]	; (800f438 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f340:	2b00      	cmp	r3, #0
 800f342:	d0ed      	beq.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d179      	bne.n	800f440 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f34c:	4b39      	ldr	r3, [pc, #228]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f34e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f354:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f358:	4053      	eors	r3, r2
 800f35a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d015      	beq.n	800f38e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f362:	4b34      	ldr	r3, [pc, #208]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f36a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f36e:	4b31      	ldr	r3, [pc, #196]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f372:	4a30      	ldr	r2, [pc, #192]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f378:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f37a:	4b2e      	ldr	r3, [pc, #184]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f37c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f37e:	4a2d      	ldr	r2, [pc, #180]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f384:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f386:	4a2b      	ldr	r2, [pc, #172]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f38c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f392:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f39a:	d118      	bne.n	800f3ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f39c:	f7f6 faae 	bl	80058fc <HAL_GetTick>
 800f3a0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f3a4:	e00d      	b.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f3a6:	f7f6 faa9 	bl	80058fc <HAL_GetTick>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f3b0:	1ad2      	subs	r2, r2, r3
 800f3b2:	f241 3388 	movw	r3, #5000	; 0x1388
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d903      	bls.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f3ba:	2303      	movs	r3, #3
 800f3bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f3c0:	e005      	b.n	800f3ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f3c2:	4b1c      	ldr	r3, [pc, #112]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3c6:	f003 0302 	and.w	r3, r3, #2
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d0eb      	beq.n	800f3a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d129      	bne.n	800f42a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f3de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3e6:	d10e      	bne.n	800f406 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f3e8:	4b12      	ldr	r3, [pc, #72]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3ea:	691b      	ldr	r3, [r3, #16]
 800f3ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f3f8:	091a      	lsrs	r2, r3, #4
 800f3fa:	4b10      	ldr	r3, [pc, #64]	; (800f43c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f3fc:	4013      	ands	r3, r2
 800f3fe:	4a0d      	ldr	r2, [pc, #52]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f400:	430b      	orrs	r3, r1
 800f402:	6113      	str	r3, [r2, #16]
 800f404:	e005      	b.n	800f412 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f406:	4b0b      	ldr	r3, [pc, #44]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f408:	691b      	ldr	r3, [r3, #16]
 800f40a:	4a0a      	ldr	r2, [pc, #40]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f40c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f410:	6113      	str	r3, [r2, #16]
 800f412:	4b08      	ldr	r3, [pc, #32]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f414:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f41a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f41e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f422:	4a04      	ldr	r2, [pc, #16]	; (800f434 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f424:	430b      	orrs	r3, r1
 800f426:	6713      	str	r3, [r2, #112]	; 0x70
 800f428:	e00e      	b.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f42a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f42e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f432:	e009      	b.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f434:	58024400 	.word	0x58024400
 800f438:	58024800 	.word	0x58024800
 800f43c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f450:	f002 0301 	and.w	r3, r2, #1
 800f454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f458:	2300      	movs	r3, #0
 800f45a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f45e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f462:	460b      	mov	r3, r1
 800f464:	4313      	orrs	r3, r2
 800f466:	f000 8089 	beq.w	800f57c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f46e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f470:	2b28      	cmp	r3, #40	; 0x28
 800f472:	d86b      	bhi.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f474:	a201      	add	r2, pc, #4	; (adr r2, 800f47c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f47a:	bf00      	nop
 800f47c:	0800f555 	.word	0x0800f555
 800f480:	0800f54d 	.word	0x0800f54d
 800f484:	0800f54d 	.word	0x0800f54d
 800f488:	0800f54d 	.word	0x0800f54d
 800f48c:	0800f54d 	.word	0x0800f54d
 800f490:	0800f54d 	.word	0x0800f54d
 800f494:	0800f54d 	.word	0x0800f54d
 800f498:	0800f54d 	.word	0x0800f54d
 800f49c:	0800f521 	.word	0x0800f521
 800f4a0:	0800f54d 	.word	0x0800f54d
 800f4a4:	0800f54d 	.word	0x0800f54d
 800f4a8:	0800f54d 	.word	0x0800f54d
 800f4ac:	0800f54d 	.word	0x0800f54d
 800f4b0:	0800f54d 	.word	0x0800f54d
 800f4b4:	0800f54d 	.word	0x0800f54d
 800f4b8:	0800f54d 	.word	0x0800f54d
 800f4bc:	0800f537 	.word	0x0800f537
 800f4c0:	0800f54d 	.word	0x0800f54d
 800f4c4:	0800f54d 	.word	0x0800f54d
 800f4c8:	0800f54d 	.word	0x0800f54d
 800f4cc:	0800f54d 	.word	0x0800f54d
 800f4d0:	0800f54d 	.word	0x0800f54d
 800f4d4:	0800f54d 	.word	0x0800f54d
 800f4d8:	0800f54d 	.word	0x0800f54d
 800f4dc:	0800f555 	.word	0x0800f555
 800f4e0:	0800f54d 	.word	0x0800f54d
 800f4e4:	0800f54d 	.word	0x0800f54d
 800f4e8:	0800f54d 	.word	0x0800f54d
 800f4ec:	0800f54d 	.word	0x0800f54d
 800f4f0:	0800f54d 	.word	0x0800f54d
 800f4f4:	0800f54d 	.word	0x0800f54d
 800f4f8:	0800f54d 	.word	0x0800f54d
 800f4fc:	0800f555 	.word	0x0800f555
 800f500:	0800f54d 	.word	0x0800f54d
 800f504:	0800f54d 	.word	0x0800f54d
 800f508:	0800f54d 	.word	0x0800f54d
 800f50c:	0800f54d 	.word	0x0800f54d
 800f510:	0800f54d 	.word	0x0800f54d
 800f514:	0800f54d 	.word	0x0800f54d
 800f518:	0800f54d 	.word	0x0800f54d
 800f51c:	0800f555 	.word	0x0800f555
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f524:	3308      	adds	r3, #8
 800f526:	2101      	movs	r1, #1
 800f528:	4618      	mov	r0, r3
 800f52a:	f001 fe95 	bl	8011258 <RCCEx_PLL2_Config>
 800f52e:	4603      	mov	r3, r0
 800f530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f534:	e00f      	b.n	800f556 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f53a:	3328      	adds	r3, #40	; 0x28
 800f53c:	2101      	movs	r1, #1
 800f53e:	4618      	mov	r0, r3
 800f540:	f001 ff3c 	bl	80113bc <RCCEx_PLL3_Config>
 800f544:	4603      	mov	r3, r0
 800f546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f54a:	e004      	b.n	800f556 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f552:	e000      	b.n	800f556 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f554:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d10a      	bne.n	800f574 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f55e:	4bbf      	ldr	r3, [pc, #764]	; (800f85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f562:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f56a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f56c:	4abb      	ldr	r2, [pc, #748]	; (800f85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f56e:	430b      	orrs	r3, r1
 800f570:	6553      	str	r3, [r2, #84]	; 0x54
 800f572:	e003      	b.n	800f57c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f578:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f584:	f002 0302 	and.w	r3, r2, #2
 800f588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f58c:	2300      	movs	r3, #0
 800f58e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f592:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f596:	460b      	mov	r3, r1
 800f598:	4313      	orrs	r3, r2
 800f59a:	d041      	beq.n	800f620 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5a2:	2b05      	cmp	r3, #5
 800f5a4:	d824      	bhi.n	800f5f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f5a6:	a201      	add	r2, pc, #4	; (adr r2, 800f5ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ac:	0800f5f9 	.word	0x0800f5f9
 800f5b0:	0800f5c5 	.word	0x0800f5c5
 800f5b4:	0800f5db 	.word	0x0800f5db
 800f5b8:	0800f5f9 	.word	0x0800f5f9
 800f5bc:	0800f5f9 	.word	0x0800f5f9
 800f5c0:	0800f5f9 	.word	0x0800f5f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5c8:	3308      	adds	r3, #8
 800f5ca:	2101      	movs	r1, #1
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f001 fe43 	bl	8011258 <RCCEx_PLL2_Config>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f5d8:	e00f      	b.n	800f5fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5de:	3328      	adds	r3, #40	; 0x28
 800f5e0:	2101      	movs	r1, #1
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f001 feea 	bl	80113bc <RCCEx_PLL3_Config>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f5ee:	e004      	b.n	800f5fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f5f6:	e000      	b.n	800f5fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f5f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d10a      	bne.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f602:	4b96      	ldr	r3, [pc, #600]	; (800f85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f606:	f023 0107 	bic.w	r1, r3, #7
 800f60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f60e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f610:	4a92      	ldr	r2, [pc, #584]	; (800f85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f612:	430b      	orrs	r3, r1
 800f614:	6553      	str	r3, [r2, #84]	; 0x54
 800f616:	e003      	b.n	800f620 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f618:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f61c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f628:	f002 0304 	and.w	r3, r2, #4
 800f62c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f630:	2300      	movs	r3, #0
 800f632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f636:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f63a:	460b      	mov	r3, r1
 800f63c:	4313      	orrs	r3, r2
 800f63e:	d044      	beq.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f648:	2b05      	cmp	r3, #5
 800f64a:	d825      	bhi.n	800f698 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f64c:	a201      	add	r2, pc, #4	; (adr r2, 800f654 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f652:	bf00      	nop
 800f654:	0800f6a1 	.word	0x0800f6a1
 800f658:	0800f66d 	.word	0x0800f66d
 800f65c:	0800f683 	.word	0x0800f683
 800f660:	0800f6a1 	.word	0x0800f6a1
 800f664:	0800f6a1 	.word	0x0800f6a1
 800f668:	0800f6a1 	.word	0x0800f6a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f670:	3308      	adds	r3, #8
 800f672:	2101      	movs	r1, #1
 800f674:	4618      	mov	r0, r3
 800f676:	f001 fdef 	bl	8011258 <RCCEx_PLL2_Config>
 800f67a:	4603      	mov	r3, r0
 800f67c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f680:	e00f      	b.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f686:	3328      	adds	r3, #40	; 0x28
 800f688:	2101      	movs	r1, #1
 800f68a:	4618      	mov	r0, r3
 800f68c:	f001 fe96 	bl	80113bc <RCCEx_PLL3_Config>
 800f690:	4603      	mov	r3, r0
 800f692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f696:	e004      	b.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f698:	2301      	movs	r3, #1
 800f69a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f69e:	e000      	b.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f6a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10b      	bne.n	800f6c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f6aa:	4b6c      	ldr	r3, [pc, #432]	; (800f85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f6ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6ae:	f023 0107 	bic.w	r1, r3, #7
 800f6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6ba:	4a68      	ldr	r2, [pc, #416]	; (800f85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f6bc:	430b      	orrs	r3, r1
 800f6be:	6593      	str	r3, [r2, #88]	; 0x58
 800f6c0:	e003      	b.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d2:	f002 0320 	and.w	r3, r2, #32
 800f6d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f6da:	2300      	movs	r3, #0
 800f6dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f6e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	d055      	beq.n	800f796 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f6f6:	d033      	beq.n	800f760 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f6f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f6fc:	d82c      	bhi.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f702:	d02f      	beq.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f708:	d826      	bhi.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f70a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f70e:	d02b      	beq.n	800f768 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f710:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f714:	d820      	bhi.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f71a:	d012      	beq.n	800f742 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f71c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f720:	d81a      	bhi.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f722:	2b00      	cmp	r3, #0
 800f724:	d022      	beq.n	800f76c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f72a:	d115      	bne.n	800f758 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f730:	3308      	adds	r3, #8
 800f732:	2100      	movs	r1, #0
 800f734:	4618      	mov	r0, r3
 800f736:	f001 fd8f 	bl	8011258 <RCCEx_PLL2_Config>
 800f73a:	4603      	mov	r3, r0
 800f73c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f740:	e015      	b.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f746:	3328      	adds	r3, #40	; 0x28
 800f748:	2102      	movs	r1, #2
 800f74a:	4618      	mov	r0, r3
 800f74c:	f001 fe36 	bl	80113bc <RCCEx_PLL3_Config>
 800f750:	4603      	mov	r3, r0
 800f752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f756:	e00a      	b.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f758:	2301      	movs	r3, #1
 800f75a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f75e:	e006      	b.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f760:	bf00      	nop
 800f762:	e004      	b.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f764:	bf00      	nop
 800f766:	e002      	b.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f768:	bf00      	nop
 800f76a:	e000      	b.n	800f76e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f76e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10b      	bne.n	800f78e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f776:	4b39      	ldr	r3, [pc, #228]	; (800f85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f77a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f786:	4a35      	ldr	r2, [pc, #212]	; (800f85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f788:	430b      	orrs	r3, r1
 800f78a:	6553      	str	r3, [r2, #84]	; 0x54
 800f78c:	e003      	b.n	800f796 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f78e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f7a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f7ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	d058      	beq.n	800f868 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f7be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f7c2:	d033      	beq.n	800f82c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f7c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f7c8:	d82c      	bhi.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f7ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7ce:	d02f      	beq.n	800f830 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f7d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7d4:	d826      	bhi.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f7d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7da:	d02b      	beq.n	800f834 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f7dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f7e0:	d820      	bhi.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f7e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7e6:	d012      	beq.n	800f80e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f7e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f7ec:	d81a      	bhi.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d022      	beq.n	800f838 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f7f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7f6:	d115      	bne.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7fc:	3308      	adds	r3, #8
 800f7fe:	2100      	movs	r1, #0
 800f800:	4618      	mov	r0, r3
 800f802:	f001 fd29 	bl	8011258 <RCCEx_PLL2_Config>
 800f806:	4603      	mov	r3, r0
 800f808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f80c:	e015      	b.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f812:	3328      	adds	r3, #40	; 0x28
 800f814:	2102      	movs	r1, #2
 800f816:	4618      	mov	r0, r3
 800f818:	f001 fdd0 	bl	80113bc <RCCEx_PLL3_Config>
 800f81c:	4603      	mov	r3, r0
 800f81e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f822:	e00a      	b.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f824:	2301      	movs	r3, #1
 800f826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f82a:	e006      	b.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f82c:	bf00      	nop
 800f82e:	e004      	b.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f830:	bf00      	nop
 800f832:	e002      	b.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f834:	bf00      	nop
 800f836:	e000      	b.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f83a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d10e      	bne.n	800f860 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f842:	4b06      	ldr	r3, [pc, #24]	; (800f85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f846:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f84e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f852:	4a02      	ldr	r2, [pc, #8]	; (800f85c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f854:	430b      	orrs	r3, r1
 800f856:	6593      	str	r3, [r2, #88]	; 0x58
 800f858:	e006      	b.n	800f868 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f85a:	bf00      	nop
 800f85c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f870:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f878:	2300      	movs	r3, #0
 800f87a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f87e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f882:	460b      	mov	r3, r1
 800f884:	4313      	orrs	r3, r2
 800f886:	d055      	beq.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f88c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f890:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f894:	d033      	beq.n	800f8fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f896:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f89a:	d82c      	bhi.n	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f89c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8a0:	d02f      	beq.n	800f902 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f8a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8a6:	d826      	bhi.n	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f8a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f8ac:	d02b      	beq.n	800f906 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f8ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f8b2:	d820      	bhi.n	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f8b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8b8:	d012      	beq.n	800f8e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f8ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8be:	d81a      	bhi.n	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d022      	beq.n	800f90a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f8c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8c8:	d115      	bne.n	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8ce:	3308      	adds	r3, #8
 800f8d0:	2100      	movs	r1, #0
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f001 fcc0 	bl	8011258 <RCCEx_PLL2_Config>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f8de:	e015      	b.n	800f90c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8e4:	3328      	adds	r3, #40	; 0x28
 800f8e6:	2102      	movs	r1, #2
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f001 fd67 	bl	80113bc <RCCEx_PLL3_Config>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f8f4:	e00a      	b.n	800f90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f8fc:	e006      	b.n	800f90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f8fe:	bf00      	nop
 800f900:	e004      	b.n	800f90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f902:	bf00      	nop
 800f904:	e002      	b.n	800f90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f906:	bf00      	nop
 800f908:	e000      	b.n	800f90c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f90a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f90c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f910:	2b00      	cmp	r3, #0
 800f912:	d10b      	bne.n	800f92c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f914:	4ba1      	ldr	r3, [pc, #644]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f918:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800f91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f920:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f924:	4a9d      	ldr	r2, [pc, #628]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f926:	430b      	orrs	r3, r1
 800f928:	6593      	str	r3, [r2, #88]	; 0x58
 800f92a:	e003      	b.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f92c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f930:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93c:	f002 0308 	and.w	r3, r2, #8
 800f940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f944:	2300      	movs	r3, #0
 800f946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f94a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800f94e:	460b      	mov	r3, r1
 800f950:	4313      	orrs	r3, r2
 800f952:	d01e      	beq.n	800f992 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f95c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f960:	d10c      	bne.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f966:	3328      	adds	r3, #40	; 0x28
 800f968:	2102      	movs	r1, #2
 800f96a:	4618      	mov	r0, r3
 800f96c:	f001 fd26 	bl	80113bc <RCCEx_PLL3_Config>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d002      	beq.n	800f97c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f976:	2301      	movs	r3, #1
 800f978:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f97c:	4b87      	ldr	r3, [pc, #540]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f97e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f980:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f98c:	4a83      	ldr	r2, [pc, #524]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f98e:	430b      	orrs	r3, r1
 800f990:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99a:	f002 0310 	and.w	r3, r2, #16
 800f99e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f9a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	d01e      	beq.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f9ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9be:	d10c      	bne.n	800f9da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9c4:	3328      	adds	r3, #40	; 0x28
 800f9c6:	2102      	movs	r1, #2
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f001 fcf7 	bl	80113bc <RCCEx_PLL3_Config>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d002      	beq.n	800f9da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f9da:	4b70      	ldr	r3, [pc, #448]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f9ea:	4a6c      	ldr	r2, [pc, #432]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f9ec:	430b      	orrs	r3, r1
 800f9ee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800f9fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fa00:	2300      	movs	r3, #0
 800fa02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fa06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	d03e      	beq.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800fa10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fa18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa1c:	d022      	beq.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800fa1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa22:	d81b      	bhi.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d003      	beq.n	800fa30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800fa28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa2c:	d00b      	beq.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800fa2e:	e015      	b.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fa30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa34:	3308      	adds	r3, #8
 800fa36:	2100      	movs	r1, #0
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f001 fc0d 	bl	8011258 <RCCEx_PLL2_Config>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fa44:	e00f      	b.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fa46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa4a:	3328      	adds	r3, #40	; 0x28
 800fa4c:	2102      	movs	r1, #2
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f001 fcb4 	bl	80113bc <RCCEx_PLL3_Config>
 800fa54:	4603      	mov	r3, r0
 800fa56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fa5a:	e004      	b.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa62:	e000      	b.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800fa64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d10b      	bne.n	800fa86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fa6e:	4b4b      	ldr	r3, [pc, #300]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa72:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800fa76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fa7e:	4a47      	ldr	r2, [pc, #284]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa80:	430b      	orrs	r3, r1
 800fa82:	6593      	str	r3, [r2, #88]	; 0x58
 800fa84:	e003      	b.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fa8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa96:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800fa9a:	67bb      	str	r3, [r7, #120]	; 0x78
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800faa0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800faa4:	460b      	mov	r3, r1
 800faa6:	4313      	orrs	r3, r2
 800faa8:	d03b      	beq.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800faaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fab2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fab6:	d01f      	beq.n	800faf8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800fab8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fabc:	d818      	bhi.n	800faf0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800fabe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fac2:	d003      	beq.n	800facc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800fac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fac8:	d007      	beq.n	800fada <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800faca:	e011      	b.n	800faf0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800facc:	4b33      	ldr	r3, [pc, #204]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800face:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fad0:	4a32      	ldr	r2, [pc, #200]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fad6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800fad8:	e00f      	b.n	800fafa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fade:	3328      	adds	r3, #40	; 0x28
 800fae0:	2101      	movs	r1, #1
 800fae2:	4618      	mov	r0, r3
 800fae4:	f001 fc6a 	bl	80113bc <RCCEx_PLL3_Config>
 800fae8:	4603      	mov	r3, r0
 800faea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800faee:	e004      	b.n	800fafa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800faf0:	2301      	movs	r3, #1
 800faf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800faf6:	e000      	b.n	800fafa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800faf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fafa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d10b      	bne.n	800fb1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fb02:	4b26      	ldr	r3, [pc, #152]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb06:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fb0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb12:	4a22      	ldr	r2, [pc, #136]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb14:	430b      	orrs	r3, r1
 800fb16:	6553      	str	r3, [r2, #84]	; 0x54
 800fb18:	e003      	b.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fb22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800fb2e:	673b      	str	r3, [r7, #112]	; 0x70
 800fb30:	2300      	movs	r3, #0
 800fb32:	677b      	str	r3, [r7, #116]	; 0x74
 800fb34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	d034      	beq.n	800fba8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800fb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d003      	beq.n	800fb50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800fb48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb4c:	d007      	beq.n	800fb5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800fb4e:	e011      	b.n	800fb74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb50:	4b12      	ldr	r3, [pc, #72]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb54:	4a11      	ldr	r2, [pc, #68]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fb5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fb5c:	e00e      	b.n	800fb7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb62:	3308      	adds	r3, #8
 800fb64:	2102      	movs	r1, #2
 800fb66:	4618      	mov	r0, r3
 800fb68:	f001 fb76 	bl	8011258 <RCCEx_PLL2_Config>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fb72:	e003      	b.n	800fb7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800fb74:	2301      	movs	r3, #1
 800fb76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d10d      	bne.n	800fba0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fb84:	4b05      	ldr	r3, [pc, #20]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb92:	4a02      	ldr	r2, [pc, #8]	; (800fb9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb94:	430b      	orrs	r3, r1
 800fb96:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fb98:	e006      	b.n	800fba8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800fb9a:	bf00      	nop
 800fb9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800fbb4:	66bb      	str	r3, [r7, #104]	; 0x68
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fbba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800fbbe:	460b      	mov	r3, r1
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	d00c      	beq.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fbc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbc8:	3328      	adds	r3, #40	; 0x28
 800fbca:	2102      	movs	r1, #2
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f001 fbf5 	bl	80113bc <RCCEx_PLL3_Config>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d002      	beq.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800fbea:	663b      	str	r3, [r7, #96]	; 0x60
 800fbec:	2300      	movs	r3, #0
 800fbee:	667b      	str	r3, [r7, #100]	; 0x64
 800fbf0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800fbf4:	460b      	mov	r3, r1
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	d038      	beq.n	800fc6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800fbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc06:	d018      	beq.n	800fc3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800fc08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc0c:	d811      	bhi.n	800fc32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fc0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc12:	d014      	beq.n	800fc3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800fc14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc18:	d80b      	bhi.n	800fc32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d011      	beq.n	800fc42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800fc1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc22:	d106      	bne.n	800fc32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fc24:	4bc3      	ldr	r3, [pc, #780]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc28:	4ac2      	ldr	r2, [pc, #776]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fc2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fc30:	e008      	b.n	800fc44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc32:	2301      	movs	r3, #1
 800fc34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc38:	e004      	b.n	800fc44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fc3a:	bf00      	nop
 800fc3c:	e002      	b.n	800fc44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fc3e:	bf00      	nop
 800fc40:	e000      	b.n	800fc44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fc42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d10b      	bne.n	800fc64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fc4c:	4bb9      	ldr	r3, [pc, #740]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fc54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc5c:	4ab5      	ldr	r2, [pc, #724]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc5e:	430b      	orrs	r3, r1
 800fc60:	6553      	str	r3, [r2, #84]	; 0x54
 800fc62:	e003      	b.n	800fc6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fc6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc74:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800fc78:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800fc82:	460b      	mov	r3, r1
 800fc84:	4313      	orrs	r3, r2
 800fc86:	d009      	beq.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fc88:	4baa      	ldr	r3, [pc, #680]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc96:	4aa7      	ldr	r2, [pc, #668]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fc98:	430b      	orrs	r3, r1
 800fc9a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fc9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800fca8:	653b      	str	r3, [r7, #80]	; 0x50
 800fcaa:	2300      	movs	r3, #0
 800fcac:	657b      	str	r3, [r7, #84]	; 0x54
 800fcae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	4313      	orrs	r3, r2
 800fcb6:	d00a      	beq.n	800fcce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fcb8:	4b9e      	ldr	r3, [pc, #632]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcba:	691b      	ldr	r3, [r3, #16]
 800fcbc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800fcc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fcc8:	4a9a      	ldr	r2, [pc, #616]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcca:	430b      	orrs	r3, r1
 800fccc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800fcda:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcdc:	2300      	movs	r3, #0
 800fcde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fce0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fce4:	460b      	mov	r3, r1
 800fce6:	4313      	orrs	r3, r2
 800fce8:	d009      	beq.n	800fcfe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fcea:	4b92      	ldr	r3, [pc, #584]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcee:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800fcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcf8:	4a8e      	ldr	r2, [pc, #568]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcfa:	430b      	orrs	r3, r1
 800fcfc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fcfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd06:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fd0a:	643b      	str	r3, [r7, #64]	; 0x40
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	647b      	str	r3, [r7, #68]	; 0x44
 800fd10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fd14:	460b      	mov	r3, r1
 800fd16:	4313      	orrs	r3, r2
 800fd18:	d00e      	beq.n	800fd38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fd1a:	4b86      	ldr	r3, [pc, #536]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd1c:	691b      	ldr	r3, [r3, #16]
 800fd1e:	4a85      	ldr	r2, [pc, #532]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fd24:	6113      	str	r3, [r2, #16]
 800fd26:	4b83      	ldr	r3, [pc, #524]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd28:	6919      	ldr	r1, [r3, #16]
 800fd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fd32:	4a80      	ldr	r2, [pc, #512]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd34:	430b      	orrs	r3, r1
 800fd36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fd38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd40:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fd44:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd46:	2300      	movs	r3, #0
 800fd48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fd4e:	460b      	mov	r3, r1
 800fd50:	4313      	orrs	r3, r2
 800fd52:	d009      	beq.n	800fd68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fd54:	4b77      	ldr	r3, [pc, #476]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd58:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fd5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd62:	4a74      	ldr	r2, [pc, #464]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd64:	430b      	orrs	r3, r1
 800fd66:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd70:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800fd74:	633b      	str	r3, [r7, #48]	; 0x30
 800fd76:	2300      	movs	r3, #0
 800fd78:	637b      	str	r3, [r7, #52]	; 0x34
 800fd7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800fd7e:	460b      	mov	r3, r1
 800fd80:	4313      	orrs	r3, r2
 800fd82:	d00a      	beq.n	800fd9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fd84:	4b6b      	ldr	r3, [pc, #428]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd88:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd94:	4a67      	ldr	r2, [pc, #412]	; (800ff34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd96:	430b      	orrs	r3, r1
 800fd98:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda2:	2100      	movs	r1, #0
 800fda4:	62b9      	str	r1, [r7, #40]	; 0x28
 800fda6:	f003 0301 	and.w	r3, r3, #1
 800fdaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	4313      	orrs	r3, r2
 800fdb4:	d011      	beq.n	800fdda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fdb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdba:	3308      	adds	r3, #8
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f001 fa4a 	bl	8011258 <RCCEx_PLL2_Config>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fdca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d003      	beq.n	800fdda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fdd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fdd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fdda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde2:	2100      	movs	r1, #0
 800fde4:	6239      	str	r1, [r7, #32]
 800fde6:	f003 0302 	and.w	r3, r3, #2
 800fdea:	627b      	str	r3, [r7, #36]	; 0x24
 800fdec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	d011      	beq.n	800fe1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fdf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdfa:	3308      	adds	r3, #8
 800fdfc:	2101      	movs	r1, #1
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f001 fa2a 	bl	8011258 <RCCEx_PLL2_Config>
 800fe04:	4603      	mov	r3, r0
 800fe06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fe0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d003      	beq.n	800fe1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fe1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe22:	2100      	movs	r1, #0
 800fe24:	61b9      	str	r1, [r7, #24]
 800fe26:	f003 0304 	and.w	r3, r3, #4
 800fe2a:	61fb      	str	r3, [r7, #28]
 800fe2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fe30:	460b      	mov	r3, r1
 800fe32:	4313      	orrs	r3, r2
 800fe34:	d011      	beq.n	800fe5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fe36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe3a:	3308      	adds	r3, #8
 800fe3c:	2102      	movs	r1, #2
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f001 fa0a 	bl	8011258 <RCCEx_PLL2_Config>
 800fe44:	4603      	mov	r3, r0
 800fe46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fe4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d003      	beq.n	800fe5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fe5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe62:	2100      	movs	r1, #0
 800fe64:	6139      	str	r1, [r7, #16]
 800fe66:	f003 0308 	and.w	r3, r3, #8
 800fe6a:	617b      	str	r3, [r7, #20]
 800fe6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe70:	460b      	mov	r3, r1
 800fe72:	4313      	orrs	r3, r2
 800fe74:	d011      	beq.n	800fe9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fe76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe7a:	3328      	adds	r3, #40	; 0x28
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f001 fa9c 	bl	80113bc <RCCEx_PLL3_Config>
 800fe84:	4603      	mov	r3, r0
 800fe86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800fe8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d003      	beq.n	800fe9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fe9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea2:	2100      	movs	r1, #0
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	f003 0310 	and.w	r3, r3, #16
 800feaa:	60fb      	str	r3, [r7, #12]
 800feac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800feb0:	460b      	mov	r3, r1
 800feb2:	4313      	orrs	r3, r2
 800feb4:	d011      	beq.n	800feda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800feb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feba:	3328      	adds	r3, #40	; 0x28
 800febc:	2101      	movs	r1, #1
 800febe:	4618      	mov	r0, r3
 800fec0:	f001 fa7c 	bl	80113bc <RCCEx_PLL3_Config>
 800fec4:	4603      	mov	r3, r0
 800fec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800feca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d003      	beq.n	800feda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fed6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800feda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee2:	2100      	movs	r1, #0
 800fee4:	6039      	str	r1, [r7, #0]
 800fee6:	f003 0320 	and.w	r3, r3, #32
 800feea:	607b      	str	r3, [r7, #4]
 800feec:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fef0:	460b      	mov	r3, r1
 800fef2:	4313      	orrs	r3, r2
 800fef4:	d011      	beq.n	800ff1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fefa:	3328      	adds	r3, #40	; 0x28
 800fefc:	2102      	movs	r1, #2
 800fefe:	4618      	mov	r0, r3
 800ff00:	f001 fa5c 	bl	80113bc <RCCEx_PLL3_Config>
 800ff04:	4603      	mov	r3, r0
 800ff06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ff0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d003      	beq.n	800ff1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ff1a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d101      	bne.n	800ff26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ff22:	2300      	movs	r3, #0
 800ff24:	e000      	b.n	800ff28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ff26:	2301      	movs	r3, #1
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff34:	58024400 	.word	0x58024400

0800ff38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b090      	sub	sp, #64	; 0x40
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ff42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff46:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ff4a:	430b      	orrs	r3, r1
 800ff4c:	f040 8094 	bne.w	8010078 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ff50:	4b9e      	ldr	r3, [pc, #632]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff54:	f003 0307 	and.w	r3, r3, #7
 800ff58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5c:	2b04      	cmp	r3, #4
 800ff5e:	f200 8087 	bhi.w	8010070 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ff62:	a201      	add	r2, pc, #4	; (adr r2, 800ff68 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ff64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff68:	0800ff7d 	.word	0x0800ff7d
 800ff6c:	0800ffa5 	.word	0x0800ffa5
 800ff70:	0800ffcd 	.word	0x0800ffcd
 800ff74:	08010069 	.word	0x08010069
 800ff78:	0800fff5 	.word	0x0800fff5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ff7c:	4b93      	ldr	r3, [pc, #588]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ff88:	d108      	bne.n	800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ff8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f001 f810 	bl	8010fb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ff94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff98:	f000 bd45 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffa0:	f000 bd41 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ffa4:	4b89      	ldr	r3, [pc, #548]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ffac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ffb0:	d108      	bne.n	800ffc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ffb2:	f107 0318 	add.w	r3, r7, #24
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f000 fd54 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ffbc:	69bb      	ldr	r3, [r7, #24]
 800ffbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffc0:	f000 bd31 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffc8:	f000 bd2d 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ffcc:	4b7f      	ldr	r3, [pc, #508]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ffd8:	d108      	bne.n	800ffec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ffda:	f107 030c 	add.w	r3, r7, #12
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f000 fe94 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ffe8:	f000 bd1d 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ffec:	2300      	movs	r3, #0
 800ffee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fff0:	f000 bd19 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fff4:	4b75      	ldr	r3, [pc, #468]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fffc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fffe:	4b73      	ldr	r3, [pc, #460]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f003 0304 	and.w	r3, r3, #4
 8010006:	2b04      	cmp	r3, #4
 8010008:	d10c      	bne.n	8010024 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801000a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801000c:	2b00      	cmp	r3, #0
 801000e:	d109      	bne.n	8010024 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010010:	4b6e      	ldr	r3, [pc, #440]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	08db      	lsrs	r3, r3, #3
 8010016:	f003 0303 	and.w	r3, r3, #3
 801001a:	4a6d      	ldr	r2, [pc, #436]	; (80101d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801001c:	fa22 f303 	lsr.w	r3, r2, r3
 8010020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010022:	e01f      	b.n	8010064 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010024:	4b69      	ldr	r3, [pc, #420]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801002c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010030:	d106      	bne.n	8010040 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8010032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010034:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010038:	d102      	bne.n	8010040 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801003a:	4b66      	ldr	r3, [pc, #408]	; (80101d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801003c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801003e:	e011      	b.n	8010064 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010040:	4b62      	ldr	r3, [pc, #392]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801004c:	d106      	bne.n	801005c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801004e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010054:	d102      	bne.n	801005c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010056:	4b60      	ldr	r3, [pc, #384]	; (80101d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010058:	63fb      	str	r3, [r7, #60]	; 0x3c
 801005a:	e003      	b.n	8010064 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801005c:	2300      	movs	r3, #0
 801005e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010060:	f000 bce1 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010064:	f000 bcdf 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010068:	4b5c      	ldr	r3, [pc, #368]	; (80101dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801006a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801006c:	f000 bcdb 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010070:	2300      	movs	r3, #0
 8010072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010074:	f000 bcd7 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010078:	e9d7 2300 	ldrd	r2, r3, [r7]
 801007c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8010080:	430b      	orrs	r3, r1
 8010082:	f040 80ad 	bne.w	80101e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8010086:	4b51      	ldr	r3, [pc, #324]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801008a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 801008e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010096:	d056      	beq.n	8010146 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8010098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801009e:	f200 8090 	bhi.w	80101c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80100a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a4:	2bc0      	cmp	r3, #192	; 0xc0
 80100a6:	f000 8088 	beq.w	80101ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80100aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ac:	2bc0      	cmp	r3, #192	; 0xc0
 80100ae:	f200 8088 	bhi.w	80101c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80100b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b4:	2b80      	cmp	r3, #128	; 0x80
 80100b6:	d032      	beq.n	801011e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80100b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ba:	2b80      	cmp	r3, #128	; 0x80
 80100bc:	f200 8081 	bhi.w	80101c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80100c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d003      	beq.n	80100ce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80100c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c8:	2b40      	cmp	r3, #64	; 0x40
 80100ca:	d014      	beq.n	80100f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80100cc:	e079      	b.n	80101c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80100ce:	4b3f      	ldr	r3, [pc, #252]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80100d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80100da:	d108      	bne.n	80100ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80100dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80100e0:	4618      	mov	r0, r3
 80100e2:	f000 ff67 	bl	8010fb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80100e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100ea:	f000 bc9c 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100f2:	f000 bc98 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80100f6:	4b35      	ldr	r3, [pc, #212]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80100fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010102:	d108      	bne.n	8010116 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010104:	f107 0318 	add.w	r3, r7, #24
 8010108:	4618      	mov	r0, r3
 801010a:	f000 fcab 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801010e:	69bb      	ldr	r3, [r7, #24]
 8010110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010112:	f000 bc88 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010116:	2300      	movs	r3, #0
 8010118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801011a:	f000 bc84 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801011e:	4b2b      	ldr	r3, [pc, #172]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801012a:	d108      	bne.n	801013e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801012c:	f107 030c 	add.w	r3, r7, #12
 8010130:	4618      	mov	r0, r3
 8010132:	f000 fdeb 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801013a:	f000 bc74 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010142:	f000 bc70 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010146:	4b21      	ldr	r3, [pc, #132]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801014a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801014e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010150:	4b1e      	ldr	r3, [pc, #120]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f003 0304 	and.w	r3, r3, #4
 8010158:	2b04      	cmp	r3, #4
 801015a:	d10c      	bne.n	8010176 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 801015c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015e:	2b00      	cmp	r3, #0
 8010160:	d109      	bne.n	8010176 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010162:	4b1a      	ldr	r3, [pc, #104]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	08db      	lsrs	r3, r3, #3
 8010168:	f003 0303 	and.w	r3, r3, #3
 801016c:	4a18      	ldr	r2, [pc, #96]	; (80101d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801016e:	fa22 f303 	lsr.w	r3, r2, r3
 8010172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010174:	e01f      	b.n	80101b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010176:	4b15      	ldr	r3, [pc, #84]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801017e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010182:	d106      	bne.n	8010192 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801018a:	d102      	bne.n	8010192 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801018c:	4b11      	ldr	r3, [pc, #68]	; (80101d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801018e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010190:	e011      	b.n	80101b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010192:	4b0e      	ldr	r3, [pc, #56]	; (80101cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801019a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801019e:	d106      	bne.n	80101ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80101a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101a6:	d102      	bne.n	80101ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80101a8:	4b0b      	ldr	r3, [pc, #44]	; (80101d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80101aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101ac:	e003      	b.n	80101b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80101ae:	2300      	movs	r3, #0
 80101b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80101b2:	f000 bc38 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80101b6:	f000 bc36 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80101ba:	4b08      	ldr	r3, [pc, #32]	; (80101dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80101bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101be:	f000 bc32 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101c6:	f000 bc2e 	b.w	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80101ca:	bf00      	nop
 80101cc:	58024400 	.word	0x58024400
 80101d0:	03d09000 	.word	0x03d09000
 80101d4:	003d0900 	.word	0x003d0900
 80101d8:	017d7840 	.word	0x017d7840
 80101dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80101e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80101e4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80101e8:	430b      	orrs	r3, r1
 80101ea:	f040 809c 	bne.w	8010326 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80101ee:	4b9e      	ldr	r3, [pc, #632]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101f2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80101f6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80101f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80101fe:	d054      	beq.n	80102aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010206:	f200 808b 	bhi.w	8010320 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801020a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801020c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010210:	f000 8083 	beq.w	801031a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010216:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801021a:	f200 8081 	bhi.w	8010320 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801021e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010224:	d02f      	beq.n	8010286 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801022c:	d878      	bhi.n	8010320 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801022e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010230:	2b00      	cmp	r3, #0
 8010232:	d004      	beq.n	801023e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801023a:	d012      	beq.n	8010262 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801023c:	e070      	b.n	8010320 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801023e:	4b8a      	ldr	r3, [pc, #552]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801024a:	d107      	bne.n	801025c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801024c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010250:	4618      	mov	r0, r3
 8010252:	f000 feaf 	bl	8010fb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801025a:	e3e4      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801025c:	2300      	movs	r3, #0
 801025e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010260:	e3e1      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010262:	4b81      	ldr	r3, [pc, #516]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801026a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801026e:	d107      	bne.n	8010280 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010270:	f107 0318 	add.w	r3, r7, #24
 8010274:	4618      	mov	r0, r3
 8010276:	f000 fbf5 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801027e:	e3d2      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010280:	2300      	movs	r3, #0
 8010282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010284:	e3cf      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010286:	4b78      	ldr	r3, [pc, #480]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801028e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010292:	d107      	bne.n	80102a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010294:	f107 030c 	add.w	r3, r7, #12
 8010298:	4618      	mov	r0, r3
 801029a:	f000 fd37 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102a2:	e3c0      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102a4:	2300      	movs	r3, #0
 80102a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102a8:	e3bd      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80102aa:	4b6f      	ldr	r3, [pc, #444]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80102b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80102b4:	4b6c      	ldr	r3, [pc, #432]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f003 0304 	and.w	r3, r3, #4
 80102bc:	2b04      	cmp	r3, #4
 80102be:	d10c      	bne.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80102c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d109      	bne.n	80102da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80102c6:	4b68      	ldr	r3, [pc, #416]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	08db      	lsrs	r3, r3, #3
 80102cc:	f003 0303 	and.w	r3, r3, #3
 80102d0:	4a66      	ldr	r2, [pc, #408]	; (801046c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80102d2:	fa22 f303 	lsr.w	r3, r2, r3
 80102d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102d8:	e01e      	b.n	8010318 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80102da:	4b63      	ldr	r3, [pc, #396]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102e6:	d106      	bne.n	80102f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80102e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80102ee:	d102      	bne.n	80102f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80102f0:	4b5f      	ldr	r3, [pc, #380]	; (8010470 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80102f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102f4:	e010      	b.n	8010318 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80102f6:	4b5c      	ldr	r3, [pc, #368]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010302:	d106      	bne.n	8010312 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801030a:	d102      	bne.n	8010312 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801030c:	4b59      	ldr	r3, [pc, #356]	; (8010474 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801030e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010310:	e002      	b.n	8010318 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010316:	e386      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010318:	e385      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801031a:	4b57      	ldr	r3, [pc, #348]	; (8010478 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801031c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801031e:	e382      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010320:	2300      	movs	r3, #0
 8010322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010324:	e37f      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010326:	e9d7 2300 	ldrd	r2, r3, [r7]
 801032a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801032e:	430b      	orrs	r3, r1
 8010330:	f040 80a7 	bne.w	8010482 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010334:	4b4c      	ldr	r3, [pc, #304]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010338:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801033c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801033e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010344:	d055      	beq.n	80103f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801034c:	f200 8096 	bhi.w	801047c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010352:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010356:	f000 8084 	beq.w	8010462 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801035a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010360:	f200 808c 	bhi.w	801047c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801036a:	d030      	beq.n	80103ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 801036c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010372:	f200 8083 	bhi.w	801047c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010378:	2b00      	cmp	r3, #0
 801037a:	d004      	beq.n	8010386 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801037c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010382:	d012      	beq.n	80103aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010384:	e07a      	b.n	801047c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010386:	4b38      	ldr	r3, [pc, #224]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801038e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010392:	d107      	bne.n	80103a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010398:	4618      	mov	r0, r3
 801039a:	f000 fe0b 	bl	8010fb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801039e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103a2:	e340      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103a4:	2300      	movs	r3, #0
 80103a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103a8:	e33d      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80103aa:	4b2f      	ldr	r3, [pc, #188]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80103b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80103b6:	d107      	bne.n	80103c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103b8:	f107 0318 	add.w	r3, r7, #24
 80103bc:	4618      	mov	r0, r3
 80103be:	f000 fb51 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103c6:	e32e      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103c8:	2300      	movs	r3, #0
 80103ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103cc:	e32b      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80103ce:	4b26      	ldr	r3, [pc, #152]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80103d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103da:	d107      	bne.n	80103ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103dc:	f107 030c 	add.w	r3, r7, #12
 80103e0:	4618      	mov	r0, r3
 80103e2:	f000 fc93 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103ea:	e31c      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103ec:	2300      	movs	r3, #0
 80103ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103f0:	e319      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80103f2:	4b1d      	ldr	r3, [pc, #116]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80103fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80103fc:	4b1a      	ldr	r3, [pc, #104]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f003 0304 	and.w	r3, r3, #4
 8010404:	2b04      	cmp	r3, #4
 8010406:	d10c      	bne.n	8010422 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040a:	2b00      	cmp	r3, #0
 801040c:	d109      	bne.n	8010422 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801040e:	4b16      	ldr	r3, [pc, #88]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	08db      	lsrs	r3, r3, #3
 8010414:	f003 0303 	and.w	r3, r3, #3
 8010418:	4a14      	ldr	r2, [pc, #80]	; (801046c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801041a:	fa22 f303 	lsr.w	r3, r2, r3
 801041e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010420:	e01e      	b.n	8010460 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010422:	4b11      	ldr	r3, [pc, #68]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801042a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801042e:	d106      	bne.n	801043e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010436:	d102      	bne.n	801043e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010438:	4b0d      	ldr	r3, [pc, #52]	; (8010470 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801043a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801043c:	e010      	b.n	8010460 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801043e:	4b0a      	ldr	r3, [pc, #40]	; (8010468 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801044a:	d106      	bne.n	801045a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801044c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801044e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010452:	d102      	bne.n	801045a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010454:	4b07      	ldr	r3, [pc, #28]	; (8010474 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010458:	e002      	b.n	8010460 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801045a:	2300      	movs	r3, #0
 801045c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801045e:	e2e2      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010460:	e2e1      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010462:	4b05      	ldr	r3, [pc, #20]	; (8010478 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010466:	e2de      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010468:	58024400 	.word	0x58024400
 801046c:	03d09000 	.word	0x03d09000
 8010470:	003d0900 	.word	0x003d0900
 8010474:	017d7840 	.word	0x017d7840
 8010478:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 801047c:	2300      	movs	r3, #0
 801047e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010480:	e2d1      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010486:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801048a:	430b      	orrs	r3, r1
 801048c:	f040 809c 	bne.w	80105c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010490:	4b93      	ldr	r3, [pc, #588]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010494:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010498:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801049a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80104a0:	d054      	beq.n	801054c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80104a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80104a8:	f200 808b 	bhi.w	80105c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80104ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80104b2:	f000 8083 	beq.w	80105bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80104b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80104bc:	f200 8081 	bhi.w	80105c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80104c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80104c6:	d02f      	beq.n	8010528 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80104c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80104ce:	d878      	bhi.n	80105c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80104d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d004      	beq.n	80104e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80104d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104dc:	d012      	beq.n	8010504 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80104de:	e070      	b.n	80105c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80104e0:	4b7f      	ldr	r3, [pc, #508]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104ec:	d107      	bne.n	80104fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80104ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104f2:	4618      	mov	r0, r3
 80104f4:	f000 fd5e 	bl	8010fb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80104f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104fc:	e293      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104fe:	2300      	movs	r3, #0
 8010500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010502:	e290      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010504:	4b76      	ldr	r3, [pc, #472]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801050c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010510:	d107      	bne.n	8010522 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010512:	f107 0318 	add.w	r3, r7, #24
 8010516:	4618      	mov	r0, r3
 8010518:	f000 faa4 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801051c:	69bb      	ldr	r3, [r7, #24]
 801051e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010520:	e281      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010522:	2300      	movs	r3, #0
 8010524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010526:	e27e      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010528:	4b6d      	ldr	r3, [pc, #436]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010534:	d107      	bne.n	8010546 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010536:	f107 030c 	add.w	r3, r7, #12
 801053a:	4618      	mov	r0, r3
 801053c:	f000 fbe6 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010544:	e26f      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010546:	2300      	movs	r3, #0
 8010548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801054a:	e26c      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801054c:	4b64      	ldr	r3, [pc, #400]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801054e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010554:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010556:	4b62      	ldr	r3, [pc, #392]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	f003 0304 	and.w	r3, r3, #4
 801055e:	2b04      	cmp	r3, #4
 8010560:	d10c      	bne.n	801057c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010564:	2b00      	cmp	r3, #0
 8010566:	d109      	bne.n	801057c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010568:	4b5d      	ldr	r3, [pc, #372]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	08db      	lsrs	r3, r3, #3
 801056e:	f003 0303 	and.w	r3, r3, #3
 8010572:	4a5c      	ldr	r2, [pc, #368]	; (80106e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010574:	fa22 f303 	lsr.w	r3, r2, r3
 8010578:	63fb      	str	r3, [r7, #60]	; 0x3c
 801057a:	e01e      	b.n	80105ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801057c:	4b58      	ldr	r3, [pc, #352]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010588:	d106      	bne.n	8010598 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801058a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801058c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010590:	d102      	bne.n	8010598 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010592:	4b55      	ldr	r3, [pc, #340]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010596:	e010      	b.n	80105ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010598:	4b51      	ldr	r3, [pc, #324]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80105a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80105a4:	d106      	bne.n	80105b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80105a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105ac:	d102      	bne.n	80105b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80105ae:	4b4f      	ldr	r3, [pc, #316]	; (80106ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80105b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105b2:	e002      	b.n	80105ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80105b4:	2300      	movs	r3, #0
 80105b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80105b8:	e235      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80105ba:	e234      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80105bc:	4b4c      	ldr	r3, [pc, #304]	; (80106f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80105be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105c0:	e231      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80105c2:	2300      	movs	r3, #0
 80105c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105c6:	e22e      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80105c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105cc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80105d0:	430b      	orrs	r3, r1
 80105d2:	f040 808f 	bne.w	80106f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80105d6:	4b42      	ldr	r3, [pc, #264]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105da:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80105de:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80105e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80105e6:	d06b      	beq.n	80106c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80105e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80105ee:	d874      	bhi.n	80106da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80105f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80105f6:	d056      	beq.n	80106a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80105fe:	d86c      	bhi.n	80106da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010602:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010606:	d03b      	beq.n	8010680 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801060a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801060e:	d864      	bhi.n	80106da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010612:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010616:	d021      	beq.n	801065c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801061e:	d85c      	bhi.n	80106da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010622:	2b00      	cmp	r3, #0
 8010624:	d004      	beq.n	8010630 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8010626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801062c:	d004      	beq.n	8010638 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801062e:	e054      	b.n	80106da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010630:	f7fe fa0a 	bl	800ea48 <HAL_RCC_GetPCLK1Freq>
 8010634:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010636:	e1f6      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010638:	4b29      	ldr	r3, [pc, #164]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010644:	d107      	bne.n	8010656 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010646:	f107 0318 	add.w	r3, r7, #24
 801064a:	4618      	mov	r0, r3
 801064c:	f000 fa0a 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010654:	e1e7      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801065a:	e1e4      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801065c:	4b20      	ldr	r3, [pc, #128]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010668:	d107      	bne.n	801067a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801066a:	f107 030c 	add.w	r3, r7, #12
 801066e:	4618      	mov	r0, r3
 8010670:	f000 fb4c 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010678:	e1d5      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801067a:	2300      	movs	r3, #0
 801067c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801067e:	e1d2      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010680:	4b17      	ldr	r3, [pc, #92]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f003 0304 	and.w	r3, r3, #4
 8010688:	2b04      	cmp	r3, #4
 801068a:	d109      	bne.n	80106a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801068c:	4b14      	ldr	r3, [pc, #80]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	08db      	lsrs	r3, r3, #3
 8010692:	f003 0303 	and.w	r3, r3, #3
 8010696:	4a13      	ldr	r2, [pc, #76]	; (80106e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010698:	fa22 f303 	lsr.w	r3, r2, r3
 801069c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801069e:	e1c2      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106a0:	2300      	movs	r3, #0
 80106a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106a4:	e1bf      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80106a6:	4b0e      	ldr	r3, [pc, #56]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106b2:	d102      	bne.n	80106ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80106b4:	4b0c      	ldr	r3, [pc, #48]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80106b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106b8:	e1b5      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106be:	e1b2      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80106c0:	4b07      	ldr	r3, [pc, #28]	; (80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106cc:	d102      	bne.n	80106d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80106ce:	4b07      	ldr	r3, [pc, #28]	; (80106ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80106d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106d2:	e1a8      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106d4:	2300      	movs	r3, #0
 80106d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106d8:	e1a5      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80106da:	2300      	movs	r3, #0
 80106dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106de:	e1a2      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106e0:	58024400 	.word	0x58024400
 80106e4:	03d09000 	.word	0x03d09000
 80106e8:	003d0900 	.word	0x003d0900
 80106ec:	017d7840 	.word	0x017d7840
 80106f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80106f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106f8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80106fc:	430b      	orrs	r3, r1
 80106fe:	d173      	bne.n	80107e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010700:	4b9c      	ldr	r3, [pc, #624]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010708:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801070a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010710:	d02f      	beq.n	8010772 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010718:	d863      	bhi.n	80107e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801071a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071c:	2b00      	cmp	r3, #0
 801071e:	d004      	beq.n	801072a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010726:	d012      	beq.n	801074e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010728:	e05b      	b.n	80107e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801072a:	4b92      	ldr	r3, [pc, #584]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010732:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010736:	d107      	bne.n	8010748 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010738:	f107 0318 	add.w	r3, r7, #24
 801073c:	4618      	mov	r0, r3
 801073e:	f000 f991 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010742:	69bb      	ldr	r3, [r7, #24]
 8010744:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010746:	e16e      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010748:	2300      	movs	r3, #0
 801074a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801074c:	e16b      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801074e:	4b89      	ldr	r3, [pc, #548]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801075a:	d107      	bne.n	801076c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801075c:	f107 030c 	add.w	r3, r7, #12
 8010760:	4618      	mov	r0, r3
 8010762:	f000 fad3 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801076a:	e15c      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801076c:	2300      	movs	r3, #0
 801076e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010770:	e159      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010772:	4b80      	ldr	r3, [pc, #512]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010776:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801077a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801077c:	4b7d      	ldr	r3, [pc, #500]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f003 0304 	and.w	r3, r3, #4
 8010784:	2b04      	cmp	r3, #4
 8010786:	d10c      	bne.n	80107a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078a:	2b00      	cmp	r3, #0
 801078c:	d109      	bne.n	80107a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801078e:	4b79      	ldr	r3, [pc, #484]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	08db      	lsrs	r3, r3, #3
 8010794:	f003 0303 	and.w	r3, r3, #3
 8010798:	4a77      	ldr	r2, [pc, #476]	; (8010978 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801079a:	fa22 f303 	lsr.w	r3, r2, r3
 801079e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107a0:	e01e      	b.n	80107e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80107a2:	4b74      	ldr	r3, [pc, #464]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107ae:	d106      	bne.n	80107be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80107b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107b6:	d102      	bne.n	80107be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80107b8:	4b70      	ldr	r3, [pc, #448]	; (801097c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80107ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107bc:	e010      	b.n	80107e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80107be:	4b6d      	ldr	r3, [pc, #436]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107ca:	d106      	bne.n	80107da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80107cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107d2:	d102      	bne.n	80107da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80107d4:	4b6a      	ldr	r3, [pc, #424]	; (8010980 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80107d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107d8:	e002      	b.n	80107e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80107da:	2300      	movs	r3, #0
 80107dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80107de:	e122      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80107e0:	e121      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107e6:	e11e      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80107e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107ec:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80107f0:	430b      	orrs	r3, r1
 80107f2:	d133      	bne.n	801085c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80107f4:	4b5f      	ldr	r3, [pc, #380]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80107fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80107fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010800:	2b00      	cmp	r3, #0
 8010802:	d004      	beq.n	801080e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801080a:	d012      	beq.n	8010832 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801080c:	e023      	b.n	8010856 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801080e:	4b59      	ldr	r3, [pc, #356]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801081a:	d107      	bne.n	801082c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010820:	4618      	mov	r0, r3
 8010822:	f000 fbc7 	bl	8010fb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010828:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801082a:	e0fc      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801082c:	2300      	movs	r3, #0
 801082e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010830:	e0f9      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010832:	4b50      	ldr	r3, [pc, #320]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801083a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801083e:	d107      	bne.n	8010850 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010840:	f107 0318 	add.w	r3, r7, #24
 8010844:	4618      	mov	r0, r3
 8010846:	f000 f90d 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801084a:	6a3b      	ldr	r3, [r7, #32]
 801084c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801084e:	e0ea      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010850:	2300      	movs	r3, #0
 8010852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010854:	e0e7      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010856:	2300      	movs	r3, #0
 8010858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801085a:	e0e4      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801085c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010860:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010864:	430b      	orrs	r3, r1
 8010866:	f040 808d 	bne.w	8010984 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801086a:	4b42      	ldr	r3, [pc, #264]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801086e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010872:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801087a:	d06b      	beq.n	8010954 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801087c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010882:	d874      	bhi.n	801096e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801088a:	d056      	beq.n	801093a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 801088c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010892:	d86c      	bhi.n	801096e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010896:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801089a:	d03b      	beq.n	8010914 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 801089c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80108a2:	d864      	bhi.n	801096e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80108a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108aa:	d021      	beq.n	80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80108ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108b2:	d85c      	bhi.n	801096e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80108b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d004      	beq.n	80108c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80108ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80108c0:	d004      	beq.n	80108cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80108c2:	e054      	b.n	801096e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80108c4:	f000 f8b8 	bl	8010a38 <HAL_RCCEx_GetD3PCLK1Freq>
 80108c8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80108ca:	e0ac      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80108cc:	4b29      	ldr	r3, [pc, #164]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80108d8:	d107      	bne.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108da:	f107 0318 	add.w	r3, r7, #24
 80108de:	4618      	mov	r0, r3
 80108e0:	f000 f8c0 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108e8:	e09d      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108ea:	2300      	movs	r3, #0
 80108ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108ee:	e09a      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80108f0:	4b20      	ldr	r3, [pc, #128]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108fc:	d107      	bne.n	801090e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108fe:	f107 030c 	add.w	r3, r7, #12
 8010902:	4618      	mov	r0, r3
 8010904:	f000 fa02 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801090c:	e08b      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801090e:	2300      	movs	r3, #0
 8010910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010912:	e088      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010914:	4b17      	ldr	r3, [pc, #92]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f003 0304 	and.w	r3, r3, #4
 801091c:	2b04      	cmp	r3, #4
 801091e:	d109      	bne.n	8010934 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010920:	4b14      	ldr	r3, [pc, #80]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	08db      	lsrs	r3, r3, #3
 8010926:	f003 0303 	and.w	r3, r3, #3
 801092a:	4a13      	ldr	r2, [pc, #76]	; (8010978 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801092c:	fa22 f303 	lsr.w	r3, r2, r3
 8010930:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010932:	e078      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010934:	2300      	movs	r3, #0
 8010936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010938:	e075      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801093a:	4b0e      	ldr	r3, [pc, #56]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010946:	d102      	bne.n	801094e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010948:	4b0c      	ldr	r3, [pc, #48]	; (801097c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801094a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801094c:	e06b      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801094e:	2300      	movs	r3, #0
 8010950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010952:	e068      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010954:	4b07      	ldr	r3, [pc, #28]	; (8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801095c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010960:	d102      	bne.n	8010968 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010962:	4b07      	ldr	r3, [pc, #28]	; (8010980 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010964:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010966:	e05e      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010968:	2300      	movs	r3, #0
 801096a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801096c:	e05b      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801096e:	2300      	movs	r3, #0
 8010970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010972:	e058      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010974:	58024400 	.word	0x58024400
 8010978:	03d09000 	.word	0x03d09000
 801097c:	003d0900 	.word	0x003d0900
 8010980:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010988:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 801098c:	430b      	orrs	r3, r1
 801098e:	d148      	bne.n	8010a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010990:	4b27      	ldr	r3, [pc, #156]	; (8010a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010994:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010998:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109a0:	d02a      	beq.n	80109f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80109a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109a8:	d838      	bhi.n	8010a1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80109aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d004      	beq.n	80109ba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80109b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80109b6:	d00d      	beq.n	80109d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80109b8:	e030      	b.n	8010a1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80109ba:	4b1d      	ldr	r3, [pc, #116]	; (8010a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109c6:	d102      	bne.n	80109ce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80109c8:	4b1a      	ldr	r3, [pc, #104]	; (8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80109ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109cc:	e02b      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109ce:	2300      	movs	r3, #0
 80109d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109d2:	e028      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80109d4:	4b16      	ldr	r3, [pc, #88]	; (8010a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80109e0:	d107      	bne.n	80109f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80109e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109e6:	4618      	mov	r0, r3
 80109e8:	f000 fae4 	bl	8010fb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80109ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109f0:	e019      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109f6:	e016      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80109f8:	4b0d      	ldr	r3, [pc, #52]	; (8010a30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a04:	d107      	bne.n	8010a16 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a06:	f107 0318 	add.w	r3, r7, #24
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f000 f82a 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a14:	e007      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a16:	2300      	movs	r3, #0
 8010a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a1a:	e004      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a20:	e001      	b.n	8010a26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010a22:	2300      	movs	r3, #0
 8010a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3740      	adds	r7, #64	; 0x40
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	58024400 	.word	0x58024400
 8010a34:	017d7840 	.word	0x017d7840

08010a38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010a3c:	f7fd ffd4 	bl	800e9e8 <HAL_RCC_GetHCLKFreq>
 8010a40:	4602      	mov	r2, r0
 8010a42:	4b06      	ldr	r3, [pc, #24]	; (8010a5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010a44:	6a1b      	ldr	r3, [r3, #32]
 8010a46:	091b      	lsrs	r3, r3, #4
 8010a48:	f003 0307 	and.w	r3, r3, #7
 8010a4c:	4904      	ldr	r1, [pc, #16]	; (8010a60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010a4e:	5ccb      	ldrb	r3, [r1, r3]
 8010a50:	f003 031f 	and.w	r3, r3, #31
 8010a54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	58024400 	.word	0x58024400
 8010a60:	0801adc4 	.word	0x0801adc4

08010a64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b089      	sub	sp, #36	; 0x24
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a6c:	4ba1      	ldr	r3, [pc, #644]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a70:	f003 0303 	and.w	r3, r3, #3
 8010a74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010a76:	4b9f      	ldr	r3, [pc, #636]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a7a:	0b1b      	lsrs	r3, r3, #12
 8010a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010a82:	4b9c      	ldr	r3, [pc, #624]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a86:	091b      	lsrs	r3, r3, #4
 8010a88:	f003 0301 	and.w	r3, r3, #1
 8010a8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010a8e:	4b99      	ldr	r3, [pc, #612]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a92:	08db      	lsrs	r3, r3, #3
 8010a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a98:	693a      	ldr	r2, [r7, #16]
 8010a9a:	fb02 f303 	mul.w	r3, r2, r3
 8010a9e:	ee07 3a90 	vmov	s15, r3
 8010aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010aa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f000 8111 	beq.w	8010cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	2b02      	cmp	r3, #2
 8010ab6:	f000 8083 	beq.w	8010bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	2b02      	cmp	r3, #2
 8010abe:	f200 80a1 	bhi.w	8010c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010ac2:	69bb      	ldr	r3, [r7, #24]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d003      	beq.n	8010ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010ac8:	69bb      	ldr	r3, [r7, #24]
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d056      	beq.n	8010b7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010ace:	e099      	b.n	8010c04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ad0:	4b88      	ldr	r3, [pc, #544]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	f003 0320 	and.w	r3, r3, #32
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d02d      	beq.n	8010b38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010adc:	4b85      	ldr	r3, [pc, #532]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	08db      	lsrs	r3, r3, #3
 8010ae2:	f003 0303 	and.w	r3, r3, #3
 8010ae6:	4a84      	ldr	r2, [pc, #528]	; (8010cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8010aec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	ee07 3a90 	vmov	s15, r3
 8010af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	ee07 3a90 	vmov	s15, r3
 8010afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b06:	4b7b      	ldr	r3, [pc, #492]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b0e:	ee07 3a90 	vmov	s15, r3
 8010b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010cfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010b36:	e087      	b.n	8010c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	ee07 3a90 	vmov	s15, r3
 8010b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010d00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b4a:	4b6a      	ldr	r3, [pc, #424]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b52:	ee07 3a90 	vmov	s15, r3
 8010b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010cfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b7a:	e065      	b.n	8010c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	ee07 3a90 	vmov	s15, r3
 8010b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010d04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b8e:	4b59      	ldr	r3, [pc, #356]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b96:	ee07 3a90 	vmov	s15, r3
 8010b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ba2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010cfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bbe:	e043      	b.n	8010c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	ee07 3a90 	vmov	s15, r3
 8010bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bd2:	4b48      	ldr	r3, [pc, #288]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bda:	ee07 3a90 	vmov	s15, r3
 8010bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010be6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010cfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c02:	e021      	b.n	8010c48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	ee07 3a90 	vmov	s15, r3
 8010c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010d04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c16:	4b37      	ldr	r3, [pc, #220]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c1e:	ee07 3a90 	vmov	s15, r3
 8010c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010cfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010c48:	4b2a      	ldr	r3, [pc, #168]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c4c:	0a5b      	lsrs	r3, r3, #9
 8010c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c52:	ee07 3a90 	vmov	s15, r3
 8010c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c6e:	ee17 2a90 	vmov	r2, s15
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010c76:	4b1f      	ldr	r3, [pc, #124]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c7a:	0c1b      	lsrs	r3, r3, #16
 8010c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c80:	ee07 3a90 	vmov	s15, r3
 8010c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010c90:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c9c:	ee17 2a90 	vmov	r2, s15
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010ca4:	4b13      	ldr	r3, [pc, #76]	; (8010cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ca8:	0e1b      	lsrs	r3, r3, #24
 8010caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cae:	ee07 3a90 	vmov	s15, r3
 8010cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8010cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010cca:	ee17 2a90 	vmov	r2, s15
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010cd2:	e008      	b.n	8010ce6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	609a      	str	r2, [r3, #8]
}
 8010ce6:	bf00      	nop
 8010ce8:	3724      	adds	r7, #36	; 0x24
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr
 8010cf2:	bf00      	nop
 8010cf4:	58024400 	.word	0x58024400
 8010cf8:	03d09000 	.word	0x03d09000
 8010cfc:	46000000 	.word	0x46000000
 8010d00:	4c742400 	.word	0x4c742400
 8010d04:	4a742400 	.word	0x4a742400
 8010d08:	4bbebc20 	.word	0x4bbebc20

08010d0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b089      	sub	sp, #36	; 0x24
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010d14:	4ba1      	ldr	r3, [pc, #644]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d18:	f003 0303 	and.w	r3, r3, #3
 8010d1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010d1e:	4b9f      	ldr	r3, [pc, #636]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d22:	0d1b      	lsrs	r3, r3, #20
 8010d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010d2a:	4b9c      	ldr	r3, [pc, #624]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2e:	0a1b      	lsrs	r3, r3, #8
 8010d30:	f003 0301 	and.w	r3, r3, #1
 8010d34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010d36:	4b99      	ldr	r3, [pc, #612]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d3a:	08db      	lsrs	r3, r3, #3
 8010d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d40:	693a      	ldr	r2, [r7, #16]
 8010d42:	fb02 f303 	mul.w	r3, r2, r3
 8010d46:	ee07 3a90 	vmov	s15, r3
 8010d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	f000 8111 	beq.w	8010f7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010d5a:	69bb      	ldr	r3, [r7, #24]
 8010d5c:	2b02      	cmp	r3, #2
 8010d5e:	f000 8083 	beq.w	8010e68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	2b02      	cmp	r3, #2
 8010d66:	f200 80a1 	bhi.w	8010eac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010d6a:	69bb      	ldr	r3, [r7, #24]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d003      	beq.n	8010d78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010d70:	69bb      	ldr	r3, [r7, #24]
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	d056      	beq.n	8010e24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010d76:	e099      	b.n	8010eac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d78:	4b88      	ldr	r3, [pc, #544]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f003 0320 	and.w	r3, r3, #32
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d02d      	beq.n	8010de0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010d84:	4b85      	ldr	r3, [pc, #532]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	08db      	lsrs	r3, r3, #3
 8010d8a:	f003 0303 	and.w	r3, r3, #3
 8010d8e:	4a84      	ldr	r2, [pc, #528]	; (8010fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010d90:	fa22 f303 	lsr.w	r3, r2, r3
 8010d94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	ee07 3a90 	vmov	s15, r3
 8010d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	ee07 3a90 	vmov	s15, r3
 8010da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010dae:	4b7b      	ldr	r3, [pc, #492]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010db6:	ee07 3a90 	vmov	s15, r3
 8010dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8010dc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010dda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010dde:	e087      	b.n	8010ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	ee07 3a90 	vmov	s15, r3
 8010de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010df2:	4b6a      	ldr	r3, [pc, #424]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dfa:	ee07 3a90 	vmov	s15, r3
 8010dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e22:	e065      	b.n	8010ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	ee07 3a90 	vmov	s15, r3
 8010e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010fac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e36:	4b59      	ldr	r3, [pc, #356]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e3e:	ee07 3a90 	vmov	s15, r3
 8010e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e66:	e043      	b.n	8010ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	ee07 3a90 	vmov	s15, r3
 8010e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e7a:	4b48      	ldr	r3, [pc, #288]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e82:	ee07 3a90 	vmov	s15, r3
 8010e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010eaa:	e021      	b.n	8010ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	ee07 3a90 	vmov	s15, r3
 8010eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010fac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ebe:	4b37      	ldr	r3, [pc, #220]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ec6:	ee07 3a90 	vmov	s15, r3
 8010eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ed2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010eee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010ef0:	4b2a      	ldr	r3, [pc, #168]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef4:	0a5b      	lsrs	r3, r3, #9
 8010ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010efa:	ee07 3a90 	vmov	s15, r3
 8010efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f16:	ee17 2a90 	vmov	r2, s15
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010f1e:	4b1f      	ldr	r3, [pc, #124]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f22:	0c1b      	lsrs	r3, r3, #16
 8010f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f28:	ee07 3a90 	vmov	s15, r3
 8010f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f38:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f44:	ee17 2a90 	vmov	r2, s15
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010f4c:	4b13      	ldr	r3, [pc, #76]	; (8010f9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f50:	0e1b      	lsrs	r3, r3, #24
 8010f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f56:	ee07 3a90 	vmov	s15, r3
 8010f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f72:	ee17 2a90 	vmov	r2, s15
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010f7a:	e008      	b.n	8010f8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2200      	movs	r2, #0
 8010f86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	609a      	str	r2, [r3, #8]
}
 8010f8e:	bf00      	nop
 8010f90:	3724      	adds	r7, #36	; 0x24
 8010f92:	46bd      	mov	sp, r7
 8010f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f98:	4770      	bx	lr
 8010f9a:	bf00      	nop
 8010f9c:	58024400 	.word	0x58024400
 8010fa0:	03d09000 	.word	0x03d09000
 8010fa4:	46000000 	.word	0x46000000
 8010fa8:	4c742400 	.word	0x4c742400
 8010fac:	4a742400 	.word	0x4a742400
 8010fb0:	4bbebc20 	.word	0x4bbebc20

08010fb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b089      	sub	sp, #36	; 0x24
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010fbc:	4ba0      	ldr	r3, [pc, #640]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fc0:	f003 0303 	and.w	r3, r3, #3
 8010fc4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010fc6:	4b9e      	ldr	r3, [pc, #632]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fca:	091b      	lsrs	r3, r3, #4
 8010fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010fd0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010fd2:	4b9b      	ldr	r3, [pc, #620]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd6:	f003 0301 	and.w	r3, r3, #1
 8010fda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010fdc:	4b98      	ldr	r3, [pc, #608]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fe0:	08db      	lsrs	r3, r3, #3
 8010fe2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010fe6:	693a      	ldr	r2, [r7, #16]
 8010fe8:	fb02 f303 	mul.w	r3, r2, r3
 8010fec:	ee07 3a90 	vmov	s15, r3
 8010ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ff4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f000 8111 	beq.w	8011222 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8011000:	69bb      	ldr	r3, [r7, #24]
 8011002:	2b02      	cmp	r3, #2
 8011004:	f000 8083 	beq.w	801110e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8011008:	69bb      	ldr	r3, [r7, #24]
 801100a:	2b02      	cmp	r3, #2
 801100c:	f200 80a1 	bhi.w	8011152 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8011010:	69bb      	ldr	r3, [r7, #24]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d003      	beq.n	801101e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	2b01      	cmp	r3, #1
 801101a:	d056      	beq.n	80110ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801101c:	e099      	b.n	8011152 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801101e:	4b88      	ldr	r3, [pc, #544]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f003 0320 	and.w	r3, r3, #32
 8011026:	2b00      	cmp	r3, #0
 8011028:	d02d      	beq.n	8011086 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801102a:	4b85      	ldr	r3, [pc, #532]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	08db      	lsrs	r3, r3, #3
 8011030:	f003 0303 	and.w	r3, r3, #3
 8011034:	4a83      	ldr	r2, [pc, #524]	; (8011244 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011036:	fa22 f303 	lsr.w	r3, r2, r3
 801103a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	ee07 3a90 	vmov	s15, r3
 8011042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	ee07 3a90 	vmov	s15, r3
 801104c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011054:	4b7a      	ldr	r3, [pc, #488]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801105c:	ee07 3a90 	vmov	s15, r3
 8011060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011064:	ed97 6a03 	vldr	s12, [r7, #12]
 8011068:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011248 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801106c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801107c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011080:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011084:	e087      	b.n	8011196 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	ee07 3a90 	vmov	s15, r3
 801108c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011090:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801124c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011098:	4b69      	ldr	r3, [pc, #420]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801109c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110a0:	ee07 3a90 	vmov	s15, r3
 80110a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80110ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011248 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80110b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80110c8:	e065      	b.n	8011196 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	ee07 3a90 	vmov	s15, r3
 80110d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011250 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80110d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110dc:	4b58      	ldr	r3, [pc, #352]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110e4:	ee07 3a90 	vmov	s15, r3
 80110e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80110f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011248 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80110f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011108:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801110c:	e043      	b.n	8011196 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	ee07 3a90 	vmov	s15, r3
 8011114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011118:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011254 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801111c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011120:	4b47      	ldr	r3, [pc, #284]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011128:	ee07 3a90 	vmov	s15, r3
 801112c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011130:	ed97 6a03 	vldr	s12, [r7, #12]
 8011134:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011248 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011138:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801113c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011140:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011144:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011148:	ee67 7a27 	vmul.f32	s15, s14, s15
 801114c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011150:	e021      	b.n	8011196 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	ee07 3a90 	vmov	s15, r3
 8011158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801115c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801124c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011164:	4b36      	ldr	r3, [pc, #216]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801116c:	ee07 3a90 	vmov	s15, r3
 8011170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011174:	ed97 6a03 	vldr	s12, [r7, #12]
 8011178:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011248 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801117c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011180:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011184:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011190:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011194:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011196:	4b2a      	ldr	r3, [pc, #168]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801119a:	0a5b      	lsrs	r3, r3, #9
 801119c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111a0:	ee07 3a90 	vmov	s15, r3
 80111a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80111b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111bc:	ee17 2a90 	vmov	r2, s15
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80111c4:	4b1e      	ldr	r3, [pc, #120]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c8:	0c1b      	lsrs	r3, r3, #16
 80111ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111ce:	ee07 3a90 	vmov	s15, r3
 80111d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111de:	edd7 6a07 	vldr	s13, [r7, #28]
 80111e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111ea:	ee17 2a90 	vmov	r2, s15
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80111f2:	4b13      	ldr	r3, [pc, #76]	; (8011240 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111f6:	0e1b      	lsrs	r3, r3, #24
 80111f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111fc:	ee07 3a90 	vmov	s15, r3
 8011200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011208:	ee37 7a87 	vadd.f32	s14, s15, s14
 801120c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011218:	ee17 2a90 	vmov	r2, s15
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011220:	e008      	b.n	8011234 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2200      	movs	r2, #0
 8011226:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2200      	movs	r2, #0
 8011232:	609a      	str	r2, [r3, #8]
}
 8011234:	bf00      	nop
 8011236:	3724      	adds	r7, #36	; 0x24
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr
 8011240:	58024400 	.word	0x58024400
 8011244:	03d09000 	.word	0x03d09000
 8011248:	46000000 	.word	0x46000000
 801124c:	4c742400 	.word	0x4c742400
 8011250:	4a742400 	.word	0x4a742400
 8011254:	4bbebc20 	.word	0x4bbebc20

08011258 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011262:	2300      	movs	r3, #0
 8011264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011266:	4b53      	ldr	r3, [pc, #332]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801126a:	f003 0303 	and.w	r3, r3, #3
 801126e:	2b03      	cmp	r3, #3
 8011270:	d101      	bne.n	8011276 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011272:	2301      	movs	r3, #1
 8011274:	e099      	b.n	80113aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011276:	4b4f      	ldr	r3, [pc, #316]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4a4e      	ldr	r2, [pc, #312]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 801127c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011282:	f7f4 fb3b 	bl	80058fc <HAL_GetTick>
 8011286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011288:	e008      	b.n	801129c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801128a:	f7f4 fb37 	bl	80058fc <HAL_GetTick>
 801128e:	4602      	mov	r2, r0
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	2b02      	cmp	r3, #2
 8011296:	d901      	bls.n	801129c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011298:	2303      	movs	r3, #3
 801129a:	e086      	b.n	80113aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801129c:	4b45      	ldr	r3, [pc, #276]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d1f0      	bne.n	801128a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80112a8:	4b42      	ldr	r3, [pc, #264]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 80112aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	031b      	lsls	r3, r3, #12
 80112b6:	493f      	ldr	r1, [pc, #252]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 80112b8:	4313      	orrs	r3, r2
 80112ba:	628b      	str	r3, [r1, #40]	; 0x28
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	685b      	ldr	r3, [r3, #4]
 80112c0:	3b01      	subs	r3, #1
 80112c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	689b      	ldr	r3, [r3, #8]
 80112ca:	3b01      	subs	r3, #1
 80112cc:	025b      	lsls	r3, r3, #9
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	431a      	orrs	r2, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	68db      	ldr	r3, [r3, #12]
 80112d6:	3b01      	subs	r3, #1
 80112d8:	041b      	lsls	r3, r3, #16
 80112da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80112de:	431a      	orrs	r2, r3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	691b      	ldr	r3, [r3, #16]
 80112e4:	3b01      	subs	r3, #1
 80112e6:	061b      	lsls	r3, r3, #24
 80112e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80112ec:	4931      	ldr	r1, [pc, #196]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 80112ee:	4313      	orrs	r3, r2
 80112f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80112f2:	4b30      	ldr	r3, [pc, #192]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 80112f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	695b      	ldr	r3, [r3, #20]
 80112fe:	492d      	ldr	r1, [pc, #180]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011300:	4313      	orrs	r3, r2
 8011302:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011304:	4b2b      	ldr	r3, [pc, #172]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011308:	f023 0220 	bic.w	r2, r3, #32
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	699b      	ldr	r3, [r3, #24]
 8011310:	4928      	ldr	r1, [pc, #160]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011312:	4313      	orrs	r3, r2
 8011314:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011316:	4b27      	ldr	r3, [pc, #156]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801131a:	4a26      	ldr	r2, [pc, #152]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 801131c:	f023 0310 	bic.w	r3, r3, #16
 8011320:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011322:	4b24      	ldr	r3, [pc, #144]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011326:	4b24      	ldr	r3, [pc, #144]	; (80113b8 <RCCEx_PLL2_Config+0x160>)
 8011328:	4013      	ands	r3, r2
 801132a:	687a      	ldr	r2, [r7, #4]
 801132c:	69d2      	ldr	r2, [r2, #28]
 801132e:	00d2      	lsls	r2, r2, #3
 8011330:	4920      	ldr	r1, [pc, #128]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011332:	4313      	orrs	r3, r2
 8011334:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011336:	4b1f      	ldr	r3, [pc, #124]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133a:	4a1e      	ldr	r2, [pc, #120]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 801133c:	f043 0310 	orr.w	r3, r3, #16
 8011340:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d106      	bne.n	8011356 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011348:	4b1a      	ldr	r3, [pc, #104]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 801134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801134c:	4a19      	ldr	r2, [pc, #100]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 801134e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011352:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011354:	e00f      	b.n	8011376 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	2b01      	cmp	r3, #1
 801135a:	d106      	bne.n	801136a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801135c:	4b15      	ldr	r3, [pc, #84]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 801135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011360:	4a14      	ldr	r2, [pc, #80]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011366:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011368:	e005      	b.n	8011376 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801136a:	4b12      	ldr	r3, [pc, #72]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 801136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801136e:	4a11      	ldr	r2, [pc, #68]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011374:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011376:	4b0f      	ldr	r3, [pc, #60]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	4a0e      	ldr	r2, [pc, #56]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 801137c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011382:	f7f4 fabb 	bl	80058fc <HAL_GetTick>
 8011386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011388:	e008      	b.n	801139c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801138a:	f7f4 fab7 	bl	80058fc <HAL_GetTick>
 801138e:	4602      	mov	r2, r0
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	2b02      	cmp	r3, #2
 8011396:	d901      	bls.n	801139c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011398:	2303      	movs	r3, #3
 801139a:	e006      	b.n	80113aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801139c:	4b05      	ldr	r3, [pc, #20]	; (80113b4 <RCCEx_PLL2_Config+0x15c>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d0f0      	beq.n	801138a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80113a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3710      	adds	r7, #16
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	58024400 	.word	0x58024400
 80113b8:	ffff0007 	.word	0xffff0007

080113bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b084      	sub	sp, #16
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80113c6:	2300      	movs	r3, #0
 80113c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80113ca:	4b53      	ldr	r3, [pc, #332]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80113cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ce:	f003 0303 	and.w	r3, r3, #3
 80113d2:	2b03      	cmp	r3, #3
 80113d4:	d101      	bne.n	80113da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80113d6:	2301      	movs	r3, #1
 80113d8:	e099      	b.n	801150e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80113da:	4b4f      	ldr	r3, [pc, #316]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	4a4e      	ldr	r2, [pc, #312]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80113e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80113e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113e6:	f7f4 fa89 	bl	80058fc <HAL_GetTick>
 80113ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80113ec:	e008      	b.n	8011400 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80113ee:	f7f4 fa85 	bl	80058fc <HAL_GetTick>
 80113f2:	4602      	mov	r2, r0
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	1ad3      	subs	r3, r2, r3
 80113f8:	2b02      	cmp	r3, #2
 80113fa:	d901      	bls.n	8011400 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80113fc:	2303      	movs	r3, #3
 80113fe:	e086      	b.n	801150e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011400:	4b45      	ldr	r3, [pc, #276]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011408:	2b00      	cmp	r3, #0
 801140a:	d1f0      	bne.n	80113ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801140c:	4b42      	ldr	r3, [pc, #264]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 801140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011410:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	051b      	lsls	r3, r3, #20
 801141a:	493f      	ldr	r1, [pc, #252]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 801141c:	4313      	orrs	r3, r2
 801141e:	628b      	str	r3, [r1, #40]	; 0x28
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	685b      	ldr	r3, [r3, #4]
 8011424:	3b01      	subs	r3, #1
 8011426:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	689b      	ldr	r3, [r3, #8]
 801142e:	3b01      	subs	r3, #1
 8011430:	025b      	lsls	r3, r3, #9
 8011432:	b29b      	uxth	r3, r3
 8011434:	431a      	orrs	r2, r3
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	68db      	ldr	r3, [r3, #12]
 801143a:	3b01      	subs	r3, #1
 801143c:	041b      	lsls	r3, r3, #16
 801143e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011442:	431a      	orrs	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	691b      	ldr	r3, [r3, #16]
 8011448:	3b01      	subs	r3, #1
 801144a:	061b      	lsls	r3, r3, #24
 801144c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011450:	4931      	ldr	r1, [pc, #196]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 8011452:	4313      	orrs	r3, r2
 8011454:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011456:	4b30      	ldr	r3, [pc, #192]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 8011458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	695b      	ldr	r3, [r3, #20]
 8011462:	492d      	ldr	r1, [pc, #180]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 8011464:	4313      	orrs	r3, r2
 8011466:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011468:	4b2b      	ldr	r3, [pc, #172]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 801146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801146c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	699b      	ldr	r3, [r3, #24]
 8011474:	4928      	ldr	r1, [pc, #160]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 8011476:	4313      	orrs	r3, r2
 8011478:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801147a:	4b27      	ldr	r3, [pc, #156]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 801147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801147e:	4a26      	ldr	r2, [pc, #152]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 8011480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011484:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011486:	4b24      	ldr	r3, [pc, #144]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 8011488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801148a:	4b24      	ldr	r3, [pc, #144]	; (801151c <RCCEx_PLL3_Config+0x160>)
 801148c:	4013      	ands	r3, r2
 801148e:	687a      	ldr	r2, [r7, #4]
 8011490:	69d2      	ldr	r2, [r2, #28]
 8011492:	00d2      	lsls	r2, r2, #3
 8011494:	4920      	ldr	r1, [pc, #128]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 8011496:	4313      	orrs	r3, r2
 8011498:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801149a:	4b1f      	ldr	r3, [pc, #124]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 801149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801149e:	4a1e      	ldr	r2, [pc, #120]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80114a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d106      	bne.n	80114ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80114ac:	4b1a      	ldr	r3, [pc, #104]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80114ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b0:	4a19      	ldr	r2, [pc, #100]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80114b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80114b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80114b8:	e00f      	b.n	80114da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d106      	bne.n	80114ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80114c0:	4b15      	ldr	r3, [pc, #84]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80114c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c4:	4a14      	ldr	r2, [pc, #80]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80114c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80114ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80114cc:	e005      	b.n	80114da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80114ce:	4b12      	ldr	r3, [pc, #72]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80114d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d2:	4a11      	ldr	r2, [pc, #68]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80114d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80114d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80114da:	4b0f      	ldr	r3, [pc, #60]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	4a0e      	ldr	r2, [pc, #56]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 80114e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80114e6:	f7f4 fa09 	bl	80058fc <HAL_GetTick>
 80114ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80114ec:	e008      	b.n	8011500 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80114ee:	f7f4 fa05 	bl	80058fc <HAL_GetTick>
 80114f2:	4602      	mov	r2, r0
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	2b02      	cmp	r3, #2
 80114fa:	d901      	bls.n	8011500 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80114fc:	2303      	movs	r3, #3
 80114fe:	e006      	b.n	801150e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011500:	4b05      	ldr	r3, [pc, #20]	; (8011518 <RCCEx_PLL3_Config+0x15c>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011508:	2b00      	cmp	r3, #0
 801150a:	d0f0      	beq.n	80114ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801150c:	7bfb      	ldrb	r3, [r7, #15]
}
 801150e:	4618      	mov	r0, r3
 8011510:	3710      	adds	r7, #16
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	58024400 	.word	0x58024400
 801151c:	ffff0007 	.word	0xffff0007

08011520 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011528:	2301      	movs	r3, #1
 801152a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d071      	beq.n	8011616 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011538:	b2db      	uxtb	r3, r3
 801153a:	2b00      	cmp	r3, #0
 801153c:	d106      	bne.n	801154c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2200      	movs	r2, #0
 8011542:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f7f2 fc30 	bl	8003dac <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2202      	movs	r2, #2
 8011550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	f003 0310 	and.w	r3, r3, #16
 801155e:	2b10      	cmp	r3, #16
 8011560:	d050      	beq.n	8011604 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	22ca      	movs	r2, #202	; 0xca
 8011568:	625a      	str	r2, [r3, #36]	; 0x24
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	2253      	movs	r2, #83	; 0x53
 8011570:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f000 fa4a 	bl	8011a0c <RTC_EnterInitMode>
 8011578:	4603      	mov	r3, r0
 801157a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 801157c:	7bfb      	ldrb	r3, [r7, #15]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d124      	bne.n	80115cc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	6899      	ldr	r1, [r3, #8]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681a      	ldr	r2, [r3, #0]
 801158c:	4b24      	ldr	r3, [pc, #144]	; (8011620 <HAL_RTC_Init+0x100>)
 801158e:	400b      	ands	r3, r1
 8011590:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	6899      	ldr	r1, [r3, #8]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	685a      	ldr	r2, [r3, #4]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	691b      	ldr	r3, [r3, #16]
 80115a0:	431a      	orrs	r2, r3
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	699b      	ldr	r3, [r3, #24]
 80115a6:	431a      	orrs	r2, r3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	430a      	orrs	r2, r1
 80115ae:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	689b      	ldr	r3, [r3, #8]
 80115b4:	0419      	lsls	r1, r3, #16
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	68da      	ldr	r2, [r3, #12]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	430a      	orrs	r2, r1
 80115c0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f000 fa56 	bl	8011a74 <RTC_ExitInitMode>
 80115c8:	4603      	mov	r3, r0
 80115ca:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80115cc:	7bfb      	ldrb	r3, [r7, #15]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d113      	bne.n	80115fa <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f022 0203 	bic.w	r2, r2, #3
 80115e0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	69da      	ldr	r2, [r3, #28]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	695b      	ldr	r3, [r3, #20]
 80115f0:	431a      	orrs	r2, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	430a      	orrs	r2, r1
 80115f8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	22ff      	movs	r2, #255	; 0xff
 8011600:	625a      	str	r2, [r3, #36]	; 0x24
 8011602:	e001      	b.n	8011608 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011604:	2300      	movs	r3, #0
 8011606:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011608:	7bfb      	ldrb	r3, [r7, #15]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d103      	bne.n	8011616 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2201      	movs	r2, #1
 8011612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8011616:	7bfb      	ldrb	r3, [r7, #15]
}
 8011618:	4618      	mov	r0, r3
 801161a:	3710      	adds	r7, #16
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}
 8011620:	ff8fffbf 	.word	0xff8fffbf

08011624 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011624:	b590      	push	{r4, r7, lr}
 8011626:	b087      	sub	sp, #28
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011636:	2b01      	cmp	r3, #1
 8011638:	d101      	bne.n	801163e <HAL_RTC_SetTime+0x1a>
 801163a:	2302      	movs	r3, #2
 801163c:	e089      	b.n	8011752 <HAL_RTC_SetTime+0x12e>
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2201      	movs	r2, #1
 8011642:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2202      	movs	r2, #2
 801164a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	22ca      	movs	r2, #202	; 0xca
 8011654:	625a      	str	r2, [r3, #36]	; 0x24
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2253      	movs	r2, #83	; 0x53
 801165c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801165e:	68f8      	ldr	r0, [r7, #12]
 8011660:	f000 f9d4 	bl	8011a0c <RTC_EnterInitMode>
 8011664:	4603      	mov	r3, r0
 8011666:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011668:	7cfb      	ldrb	r3, [r7, #19]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d161      	bne.n	8011732 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d126      	bne.n	80116c2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	689b      	ldr	r3, [r3, #8]
 801167a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801167e:	2b00      	cmp	r3, #0
 8011680:	d102      	bne.n	8011688 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	2200      	movs	r2, #0
 8011686:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	4618      	mov	r0, r3
 801168e:	f000 fa2f 	bl	8011af0 <RTC_ByteToBcd2>
 8011692:	4603      	mov	r3, r0
 8011694:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	785b      	ldrb	r3, [r3, #1]
 801169a:	4618      	mov	r0, r3
 801169c:	f000 fa28 	bl	8011af0 <RTC_ByteToBcd2>
 80116a0:	4603      	mov	r3, r0
 80116a2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80116a4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	789b      	ldrb	r3, [r3, #2]
 80116aa:	4618      	mov	r0, r3
 80116ac:	f000 fa20 	bl	8011af0 <RTC_ByteToBcd2>
 80116b0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80116b2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	78db      	ldrb	r3, [r3, #3]
 80116ba:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80116bc:	4313      	orrs	r3, r2
 80116be:	617b      	str	r3, [r7, #20]
 80116c0:	e018      	b.n	80116f4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	689b      	ldr	r3, [r3, #8]
 80116c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d102      	bne.n	80116d6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	2200      	movs	r2, #0
 80116d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	785b      	ldrb	r3, [r3, #1]
 80116e0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80116e2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80116e8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	78db      	ldrb	r3, [r3, #3]
 80116ee:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80116f0:	4313      	orrs	r3, r2
 80116f2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	6979      	ldr	r1, [r7, #20]
 80116fa:	4b18      	ldr	r3, [pc, #96]	; (801175c <HAL_RTC_SetTime+0x138>)
 80116fc:	400b      	ands	r3, r1
 80116fe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	689a      	ldr	r2, [r3, #8]
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801170e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	6899      	ldr	r1, [r3, #8]
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	68da      	ldr	r2, [r3, #12]
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	691b      	ldr	r3, [r3, #16]
 801171e:	431a      	orrs	r2, r3
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	430a      	orrs	r2, r1
 8011726:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f000 f9a3 	bl	8011a74 <RTC_ExitInitMode>
 801172e:	4603      	mov	r3, r0
 8011730:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	22ff      	movs	r2, #255	; 0xff
 8011738:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801173a:	7cfb      	ldrb	r3, [r7, #19]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d103      	bne.n	8011748 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2201      	movs	r2, #1
 8011744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2200      	movs	r2, #0
 801174c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011750:	7cfb      	ldrb	r3, [r7, #19]
}
 8011752:	4618      	mov	r0, r3
 8011754:	371c      	adds	r7, #28
 8011756:	46bd      	mov	sp, r7
 8011758:	bd90      	pop	{r4, r7, pc}
 801175a:	bf00      	nop
 801175c:	007f7f7f 	.word	0x007f7f7f

08011760 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b086      	sub	sp, #24
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	691b      	ldr	r3, [r3, #16]
 801177c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	4b22      	ldr	r3, [pc, #136]	; (8011814 <HAL_RTC_GetTime+0xb4>)
 801178c:	4013      	ands	r3, r2
 801178e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	0c1b      	lsrs	r3, r3, #16
 8011794:	b2db      	uxtb	r3, r3
 8011796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801179a:	b2da      	uxtb	r2, r3
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	0a1b      	lsrs	r3, r3, #8
 80117a4:	b2db      	uxtb	r3, r3
 80117a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117aa:	b2da      	uxtb	r2, r3
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117b8:	b2da      	uxtb	r2, r3
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	0d9b      	lsrs	r3, r3, #22
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	f003 0301 	and.w	r3, r3, #1
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d11a      	bne.n	801180a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	4618      	mov	r0, r3
 80117da:	f000 f9a9 	bl	8011b30 <RTC_Bcd2ToByte>
 80117de:	4603      	mov	r3, r0
 80117e0:	461a      	mov	r2, r3
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	785b      	ldrb	r3, [r3, #1]
 80117ea:	4618      	mov	r0, r3
 80117ec:	f000 f9a0 	bl	8011b30 <RTC_Bcd2ToByte>
 80117f0:	4603      	mov	r3, r0
 80117f2:	461a      	mov	r2, r3
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	789b      	ldrb	r3, [r3, #2]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f000 f997 	bl	8011b30 <RTC_Bcd2ToByte>
 8011802:	4603      	mov	r3, r0
 8011804:	461a      	mov	r2, r3
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801180a:	2300      	movs	r3, #0
}
 801180c:	4618      	mov	r0, r3
 801180e:	3718      	adds	r7, #24
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}
 8011814:	007f7f7f 	.word	0x007f7f7f

08011818 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011818:	b590      	push	{r4, r7, lr}
 801181a:	b087      	sub	sp, #28
 801181c:	af00      	add	r7, sp, #0
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	f893 3020 	ldrb.w	r3, [r3, #32]
 801182a:	2b01      	cmp	r3, #1
 801182c:	d101      	bne.n	8011832 <HAL_RTC_SetDate+0x1a>
 801182e:	2302      	movs	r3, #2
 8011830:	e073      	b.n	801191a <HAL_RTC_SetDate+0x102>
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2201      	movs	r2, #1
 8011836:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2202      	movs	r2, #2
 801183e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d10e      	bne.n	8011866 <HAL_RTC_SetDate+0x4e>
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	785b      	ldrb	r3, [r3, #1]
 801184c:	f003 0310 	and.w	r3, r3, #16
 8011850:	2b00      	cmp	r3, #0
 8011852:	d008      	beq.n	8011866 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	785b      	ldrb	r3, [r3, #1]
 8011858:	f023 0310 	bic.w	r3, r3, #16
 801185c:	b2db      	uxtb	r3, r3
 801185e:	330a      	adds	r3, #10
 8011860:	b2da      	uxtb	r2, r3
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d11c      	bne.n	80118a6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	78db      	ldrb	r3, [r3, #3]
 8011870:	4618      	mov	r0, r3
 8011872:	f000 f93d 	bl	8011af0 <RTC_ByteToBcd2>
 8011876:	4603      	mov	r3, r0
 8011878:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	785b      	ldrb	r3, [r3, #1]
 801187e:	4618      	mov	r0, r3
 8011880:	f000 f936 	bl	8011af0 <RTC_ByteToBcd2>
 8011884:	4603      	mov	r3, r0
 8011886:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011888:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	789b      	ldrb	r3, [r3, #2]
 801188e:	4618      	mov	r0, r3
 8011890:	f000 f92e 	bl	8011af0 <RTC_ByteToBcd2>
 8011894:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011896:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80118a0:	4313      	orrs	r3, r2
 80118a2:	617b      	str	r3, [r7, #20]
 80118a4:	e00e      	b.n	80118c4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	78db      	ldrb	r3, [r3, #3]
 80118aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	785b      	ldrb	r3, [r3, #1]
 80118b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80118b2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80118b4:	68ba      	ldr	r2, [r7, #8]
 80118b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80118b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80118c0:	4313      	orrs	r3, r2
 80118c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	22ca      	movs	r2, #202	; 0xca
 80118ca:	625a      	str	r2, [r3, #36]	; 0x24
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2253      	movs	r2, #83	; 0x53
 80118d2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80118d4:	68f8      	ldr	r0, [r7, #12]
 80118d6:	f000 f899 	bl	8011a0c <RTC_EnterInitMode>
 80118da:	4603      	mov	r3, r0
 80118dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80118de:	7cfb      	ldrb	r3, [r7, #19]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d10a      	bne.n	80118fa <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	6979      	ldr	r1, [r7, #20]
 80118ea:	4b0e      	ldr	r3, [pc, #56]	; (8011924 <HAL_RTC_SetDate+0x10c>)
 80118ec:	400b      	ands	r3, r1
 80118ee:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80118f0:	68f8      	ldr	r0, [r7, #12]
 80118f2:	f000 f8bf 	bl	8011a74 <RTC_ExitInitMode>
 80118f6:	4603      	mov	r3, r0
 80118f8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	22ff      	movs	r2, #255	; 0xff
 8011900:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011902:	7cfb      	ldrb	r3, [r7, #19]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d103      	bne.n	8011910 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2201      	movs	r2, #1
 801190c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2200      	movs	r2, #0
 8011914:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011918:	7cfb      	ldrb	r3, [r7, #19]


}
 801191a:	4618      	mov	r0, r3
 801191c:	371c      	adds	r7, #28
 801191e:	46bd      	mov	sp, r7
 8011920:	bd90      	pop	{r4, r7, pc}
 8011922:	bf00      	nop
 8011924:	00ffff3f 	.word	0x00ffff3f

08011928 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b086      	sub	sp, #24
 801192c:	af00      	add	r7, sp, #0
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	685a      	ldr	r2, [r3, #4]
 801193a:	4b21      	ldr	r3, [pc, #132]	; (80119c0 <HAL_RTC_GetDate+0x98>)
 801193c:	4013      	ands	r3, r2
 801193e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	0c1b      	lsrs	r3, r3, #16
 8011944:	b2da      	uxtb	r2, r3
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	0a1b      	lsrs	r3, r3, #8
 801194e:	b2db      	uxtb	r3, r3
 8011950:	f003 031f 	and.w	r3, r3, #31
 8011954:	b2da      	uxtb	r2, r3
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	b2db      	uxtb	r3, r3
 801195e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011962:	b2da      	uxtb	r2, r3
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011968:	697b      	ldr	r3, [r7, #20]
 801196a:	0b5b      	lsrs	r3, r3, #13
 801196c:	b2db      	uxtb	r3, r3
 801196e:	f003 0307 	and.w	r3, r3, #7
 8011972:	b2da      	uxtb	r2, r3
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d11a      	bne.n	80119b4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	78db      	ldrb	r3, [r3, #3]
 8011982:	4618      	mov	r0, r3
 8011984:	f000 f8d4 	bl	8011b30 <RTC_Bcd2ToByte>
 8011988:	4603      	mov	r3, r0
 801198a:	461a      	mov	r2, r3
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	785b      	ldrb	r3, [r3, #1]
 8011994:	4618      	mov	r0, r3
 8011996:	f000 f8cb 	bl	8011b30 <RTC_Bcd2ToByte>
 801199a:	4603      	mov	r3, r0
 801199c:	461a      	mov	r2, r3
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	789b      	ldrb	r3, [r3, #2]
 80119a6:	4618      	mov	r0, r3
 80119a8:	f000 f8c2 	bl	8011b30 <RTC_Bcd2ToByte>
 80119ac:	4603      	mov	r3, r0
 80119ae:	461a      	mov	r2, r3
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3718      	adds	r7, #24
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	00ffff3f 	.word	0x00ffff3f

080119c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	4a0d      	ldr	r2, [pc, #52]	; (8011a08 <HAL_RTC_WaitForSynchro+0x44>)
 80119d2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80119d4:	f7f3 ff92 	bl	80058fc <HAL_GetTick>
 80119d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80119da:	e009      	b.n	80119f0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80119dc:	f7f3 ff8e 	bl	80058fc <HAL_GetTick>
 80119e0:	4602      	mov	r2, r0
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	1ad3      	subs	r3, r2, r3
 80119e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80119ea:	d901      	bls.n	80119f0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80119ec:	2303      	movs	r3, #3
 80119ee:	e007      	b.n	8011a00 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	f003 0320 	and.w	r3, r3, #32
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d0ee      	beq.n	80119dc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80119fe:	2300      	movs	r3, #0
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3710      	adds	r7, #16
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	0003ff5f 	.word	0x0003ff5f

08011a0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b084      	sub	sp, #16
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011a14:	2300      	movs	r3, #0
 8011a16:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d120      	bne.n	8011a68 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a2e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011a30:	f7f3 ff64 	bl	80058fc <HAL_GetTick>
 8011a34:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011a36:	e00d      	b.n	8011a54 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011a38:	f7f3 ff60 	bl	80058fc <HAL_GetTick>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	1ad3      	subs	r3, r2, r3
 8011a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011a46:	d905      	bls.n	8011a54 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011a48:	2303      	movs	r3, #3
 8011a4a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2203      	movs	r2, #3
 8011a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d102      	bne.n	8011a68 <RTC_EnterInitMode+0x5c>
 8011a62:	7bfb      	ldrb	r3, [r7, #15]
 8011a64:	2b03      	cmp	r3, #3
 8011a66:	d1e7      	bne.n	8011a38 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
	...

08011a74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011a80:	4b1a      	ldr	r3, [pc, #104]	; (8011aec <RTC_ExitInitMode+0x78>)
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	4a19      	ldr	r2, [pc, #100]	; (8011aec <RTC_ExitInitMode+0x78>)
 8011a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a8a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011a8c:	4b17      	ldr	r3, [pc, #92]	; (8011aec <RTC_ExitInitMode+0x78>)
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	f003 0320 	and.w	r3, r3, #32
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d10c      	bne.n	8011ab2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f7ff ff93 	bl	80119c4 <HAL_RTC_WaitForSynchro>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d01e      	beq.n	8011ae2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2203      	movs	r2, #3
 8011aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011aac:	2303      	movs	r3, #3
 8011aae:	73fb      	strb	r3, [r7, #15]
 8011ab0:	e017      	b.n	8011ae2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011ab2:	4b0e      	ldr	r3, [pc, #56]	; (8011aec <RTC_ExitInitMode+0x78>)
 8011ab4:	689b      	ldr	r3, [r3, #8]
 8011ab6:	4a0d      	ldr	r2, [pc, #52]	; (8011aec <RTC_ExitInitMode+0x78>)
 8011ab8:	f023 0320 	bic.w	r3, r3, #32
 8011abc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f7ff ff80 	bl	80119c4 <HAL_RTC_WaitForSynchro>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d005      	beq.n	8011ad6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2203      	movs	r2, #3
 8011ace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011ad6:	4b05      	ldr	r3, [pc, #20]	; (8011aec <RTC_ExitInitMode+0x78>)
 8011ad8:	689b      	ldr	r3, [r3, #8]
 8011ada:	4a04      	ldr	r2, [pc, #16]	; (8011aec <RTC_ExitInitMode+0x78>)
 8011adc:	f043 0320 	orr.w	r3, r3, #32
 8011ae0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3710      	adds	r7, #16
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	58004000 	.word	0x58004000

08011af0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011af0:	b480      	push	{r7}
 8011af2:	b085      	sub	sp, #20
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	4603      	mov	r3, r0
 8011af8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011afa:	2300      	movs	r3, #0
 8011afc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011afe:	79fb      	ldrb	r3, [r7, #7]
 8011b00:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011b02:	e005      	b.n	8011b10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	3301      	adds	r3, #1
 8011b08:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011b0a:	7afb      	ldrb	r3, [r7, #11]
 8011b0c:	3b0a      	subs	r3, #10
 8011b0e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011b10:	7afb      	ldrb	r3, [r7, #11]
 8011b12:	2b09      	cmp	r3, #9
 8011b14:	d8f6      	bhi.n	8011b04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	011b      	lsls	r3, r3, #4
 8011b1c:	b2da      	uxtb	r2, r3
 8011b1e:	7afb      	ldrb	r3, [r7, #11]
 8011b20:	4313      	orrs	r3, r2
 8011b22:	b2db      	uxtb	r3, r3
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	3714      	adds	r7, #20
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr

08011b30 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011b30:	b480      	push	{r7}
 8011b32:	b085      	sub	sp, #20
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	4603      	mov	r3, r0
 8011b38:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011b3a:	79fb      	ldrb	r3, [r7, #7]
 8011b3c:	091b      	lsrs	r3, r3, #4
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	461a      	mov	r2, r3
 8011b42:	0092      	lsls	r2, r2, #2
 8011b44:	4413      	add	r3, r2
 8011b46:	005b      	lsls	r3, r3, #1
 8011b48:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011b4a:	79fb      	ldrb	r3, [r7, #7]
 8011b4c:	f003 030f 	and.w	r3, r3, #15
 8011b50:	b2da      	uxtb	r2, r3
 8011b52:	7bfb      	ldrb	r3, [r7, #15]
 8011b54:	4413      	add	r3, r2
 8011b56:	b2db      	uxtb	r3, r3
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3714      	adds	r7, #20
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b62:	4770      	bx	lr

08011b64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b084      	sub	sp, #16
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d101      	bne.n	8011b76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011b72:	2301      	movs	r3, #1
 8011b74:	e10f      	b.n	8011d96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	4a87      	ldr	r2, [pc, #540]	; (8011da0 <HAL_SPI_Init+0x23c>)
 8011b82:	4293      	cmp	r3, r2
 8011b84:	d00f      	beq.n	8011ba6 <HAL_SPI_Init+0x42>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	4a86      	ldr	r2, [pc, #536]	; (8011da4 <HAL_SPI_Init+0x240>)
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	d00a      	beq.n	8011ba6 <HAL_SPI_Init+0x42>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4a84      	ldr	r2, [pc, #528]	; (8011da8 <HAL_SPI_Init+0x244>)
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d005      	beq.n	8011ba6 <HAL_SPI_Init+0x42>
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	2b0f      	cmp	r3, #15
 8011ba0:	d901      	bls.n	8011ba6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e0f7      	b.n	8011d96 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f000 fd60 	bl	801266c <SPI_GetPacketSize>
 8011bac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	4a7b      	ldr	r2, [pc, #492]	; (8011da0 <HAL_SPI_Init+0x23c>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d00c      	beq.n	8011bd2 <HAL_SPI_Init+0x6e>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	4a79      	ldr	r2, [pc, #484]	; (8011da4 <HAL_SPI_Init+0x240>)
 8011bbe:	4293      	cmp	r3, r2
 8011bc0:	d007      	beq.n	8011bd2 <HAL_SPI_Init+0x6e>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	4a78      	ldr	r2, [pc, #480]	; (8011da8 <HAL_SPI_Init+0x244>)
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d002      	beq.n	8011bd2 <HAL_SPI_Init+0x6e>
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2b08      	cmp	r3, #8
 8011bd0:	d811      	bhi.n	8011bf6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011bd6:	4a72      	ldr	r2, [pc, #456]	; (8011da0 <HAL_SPI_Init+0x23c>)
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	d009      	beq.n	8011bf0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	4a70      	ldr	r2, [pc, #448]	; (8011da4 <HAL_SPI_Init+0x240>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d004      	beq.n	8011bf0 <HAL_SPI_Init+0x8c>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	4a6f      	ldr	r2, [pc, #444]	; (8011da8 <HAL_SPI_Init+0x244>)
 8011bec:	4293      	cmp	r3, r2
 8011bee:	d104      	bne.n	8011bfa <HAL_SPI_Init+0x96>
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2b10      	cmp	r3, #16
 8011bf4:	d901      	bls.n	8011bfa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	e0cd      	b.n	8011d96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011c00:	b2db      	uxtb	r3, r3
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d106      	bne.n	8011c14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7f2 fb50 	bl	80042b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2202      	movs	r2, #2
 8011c18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	681a      	ldr	r2, [r3, #0]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	f022 0201 	bic.w	r2, r2, #1
 8011c2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	689b      	ldr	r3, [r3, #8]
 8011c32:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011c36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	699b      	ldr	r3, [r3, #24]
 8011c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011c40:	d119      	bne.n	8011c76 <HAL_SPI_Init+0x112>
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011c4a:	d103      	bne.n	8011c54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d008      	beq.n	8011c66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d10c      	bne.n	8011c76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011c64:	d107      	bne.n	8011c76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	681a      	ldr	r2, [r3, #0]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011c74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d00f      	beq.n	8011ca2 <HAL_SPI_Init+0x13e>
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	68db      	ldr	r3, [r3, #12]
 8011c86:	2b06      	cmp	r3, #6
 8011c88:	d90b      	bls.n	8011ca2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	430a      	orrs	r2, r1
 8011c9e:	601a      	str	r2, [r3, #0]
 8011ca0:	e007      	b.n	8011cb2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	681a      	ldr	r2, [r3, #0]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011cb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	69da      	ldr	r2, [r3, #28]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cba:	431a      	orrs	r2, r3
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	431a      	orrs	r2, r3
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cc4:	ea42 0103 	orr.w	r1, r2, r3
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	68da      	ldr	r2, [r3, #12]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	430a      	orrs	r2, r1
 8011cd2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cdc:	431a      	orrs	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ce2:	431a      	orrs	r2, r3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	699b      	ldr	r3, [r3, #24]
 8011ce8:	431a      	orrs	r2, r3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	691b      	ldr	r3, [r3, #16]
 8011cee:	431a      	orrs	r2, r3
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	695b      	ldr	r3, [r3, #20]
 8011cf4:	431a      	orrs	r2, r3
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6a1b      	ldr	r3, [r3, #32]
 8011cfa:	431a      	orrs	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	431a      	orrs	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d06:	431a      	orrs	r2, r3
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	689b      	ldr	r3, [r3, #8]
 8011d0c:	431a      	orrs	r2, r3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d12:	ea42 0103 	orr.w	r1, r2, r3
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	430a      	orrs	r2, r1
 8011d20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d113      	bne.n	8011d52 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	689b      	ldr	r3, [r3, #8]
 8011d30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011d3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	689b      	ldr	r3, [r3, #8]
 8011d44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011d50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	f022 0201 	bic.w	r2, r2, #1
 8011d60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d00a      	beq.n	8011d84 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	430a      	orrs	r2, r1
 8011d82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2201      	movs	r2, #1
 8011d90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011d94:	2300      	movs	r3, #0
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3710      	adds	r7, #16
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
 8011d9e:	bf00      	nop
 8011da0:	40013000 	.word	0x40013000
 8011da4:	40003800 	.word	0x40003800
 8011da8:	40003c00 	.word	0x40003c00

08011dac <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	60f8      	str	r0, [r7, #12]
 8011db4:	60b9      	str	r1, [r7, #8]
 8011db6:	4613      	mov	r3, r2
 8011db8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	2b01      	cmp	r3, #1
 8011dc4:	d005      	beq.n	8011dd2 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011dce:	2302      	movs	r3, #2
 8011dd0:	e127      	b.n	8012022 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d002      	beq.n	8011dde <HAL_SPI_Receive_DMA+0x32>
 8011dd8:	88fb      	ldrh	r3, [r7, #6]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d105      	bne.n	8011dea <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	2200      	movs	r2, #0
 8011de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011de6:	2301      	movs	r3, #1
 8011de8:	e11b      	b.n	8012022 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011df0:	2b01      	cmp	r3, #1
 8011df2:	d101      	bne.n	8011df8 <HAL_SPI_Receive_DMA+0x4c>
 8011df4:	2302      	movs	r3, #2
 8011df6:	e114      	b.n	8012022 <HAL_SPI_Receive_DMA+0x276>
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2201      	movs	r2, #1
 8011dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2204      	movs	r2, #4
 8011e04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	68ba      	ldr	r2, [r7, #8]
 8011e14:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	88fa      	ldrh	r2, [r7, #6]
 8011e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	88fa      	ldrh	r2, [r7, #6]
 8011e22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2200      	movs	r2, #0
 8011e36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	689b      	ldr	r3, [r3, #8]
 8011e46:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011e4a:	d108      	bne.n	8011e5e <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	681a      	ldr	r2, [r3, #0]
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011e5a:	601a      	str	r2, [r3, #0]
 8011e5c:	e009      	b.n	8011e72 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011e70:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	2b0f      	cmp	r3, #15
 8011e78:	d905      	bls.n	8011e86 <HAL_SPI_Receive_DMA+0xda>
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e7e:	699b      	ldr	r3, [r3, #24]
 8011e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011e84:	d10f      	bne.n	8011ea6 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011e8a:	2b07      	cmp	r3, #7
 8011e8c:	d911      	bls.n	8011eb2 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e92:	699b      	ldr	r3, [r3, #24]
 8011e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011e98:	d00b      	beq.n	8011eb2 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e9e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ea4:	d005      	beq.n	8011eb2 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011eae:	2301      	movs	r3, #1
 8011eb0:	e0b7      	b.n	8012022 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	689a      	ldr	r2, [r3, #8]
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011ec0:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	2b07      	cmp	r3, #7
 8011ec8:	d820      	bhi.n	8011f0c <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ece:	699b      	ldr	r3, [r3, #24]
 8011ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ed4:	d109      	bne.n	8011eea <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	3301      	adds	r3, #1
 8011ee0:	105b      	asrs	r3, r3, #1
 8011ee2:	b29a      	uxth	r2, r3
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011eee:	699b      	ldr	r3, [r3, #24]
 8011ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ef4:	d11e      	bne.n	8011f34 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	3303      	adds	r3, #3
 8011f00:	109b      	asrs	r3, r3, #2
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011f0a:	e013      	b.n	8011f34 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	68db      	ldr	r3, [r3, #12]
 8011f10:	2b0f      	cmp	r3, #15
 8011f12:	d80f      	bhi.n	8011f34 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f18:	699b      	ldr	r3, [r3, #24]
 8011f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f1e:	d109      	bne.n	8011f34 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	3301      	adds	r3, #1
 8011f2a:	105b      	asrs	r3, r3, #1
 8011f2c:	b29a      	uxth	r2, r3
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f38:	4a3c      	ldr	r2, [pc, #240]	; (801202c <HAL_SPI_Receive_DMA+0x280>)
 8011f3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f40:	4a3b      	ldr	r2, [pc, #236]	; (8012030 <HAL_SPI_Receive_DMA+0x284>)
 8011f42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f48:	4a3a      	ldr	r2, [pc, #232]	; (8012034 <HAL_SPI_Receive_DMA+0x288>)
 8011f4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f50:	2200      	movs	r2, #0
 8011f52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	3330      	adds	r3, #48	; 0x30
 8011f5e:	4619      	mov	r1, r3
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f64:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011f6e:	f7f6 f9c1 	bl	80082f4 <HAL_DMA_Start_IT>
 8011f72:	4603      	mov	r3, r0
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d011      	beq.n	8011f9c <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f7e:	f043 0210 	orr.w	r2, r3, #16
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2200      	movs	r2, #0
 8011f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8011f98:	2301      	movs	r3, #1
 8011f9a:	e042      	b.n	8012022 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fa0:	69db      	ldr	r3, [r3, #28]
 8011fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011fa6:	d108      	bne.n	8011fba <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	6859      	ldr	r1, [r3, #4]
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	4b21      	ldr	r3, [pc, #132]	; (8012038 <HAL_SPI_Receive_DMA+0x28c>)
 8011fb4:	400b      	ands	r3, r1
 8011fb6:	6053      	str	r3, [r2, #4]
 8011fb8:	e009      	b.n	8011fce <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	685a      	ldr	r2, [r3, #4]
 8011fc0:	4b1d      	ldr	r3, [pc, #116]	; (8012038 <HAL_SPI_Receive_DMA+0x28c>)
 8011fc2:	4013      	ands	r3, r2
 8011fc4:	88f9      	ldrh	r1, [r7, #6]
 8011fc6:	68fa      	ldr	r2, [r7, #12]
 8011fc8:	6812      	ldr	r2, [r2, #0]
 8011fca:	430b      	orrs	r3, r1
 8011fcc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	689a      	ldr	r2, [r3, #8]
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011fdc:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	691a      	ldr	r2, [r3, #16]
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8011fec:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	f042 0201 	orr.w	r2, r2, #1
 8011ffc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	685b      	ldr	r3, [r3, #4]
 8012002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012006:	d107      	bne.n	8012018 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012016:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2200      	movs	r2, #0
 801201c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012020:	2300      	movs	r3, #0
}
 8012022:	4618      	mov	r0, r3
 8012024:	3710      	adds	r7, #16
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	08012497 	.word	0x08012497
 8012030:	08012451 	.word	0x08012451
 8012034:	080124b3 	.word	0x080124b3
 8012038:	ffff0000 	.word	0xffff0000

0801203c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b08a      	sub	sp, #40	; 0x28
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	691b      	ldr	r3, [r3, #16]
 801204a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	695b      	ldr	r3, [r3, #20]
 8012052:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8012054:	6a3a      	ldr	r2, [r7, #32]
 8012056:	69fb      	ldr	r3, [r7, #28]
 8012058:	4013      	ands	r3, r2
 801205a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	689b      	ldr	r3, [r3, #8]
 8012062:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8012064:	2300      	movs	r3, #0
 8012066:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801206e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	3330      	adds	r3, #48	; 0x30
 8012076:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801207e:	2b00      	cmp	r3, #0
 8012080:	d010      	beq.n	80120a4 <HAL_SPI_IRQHandler+0x68>
 8012082:	6a3b      	ldr	r3, [r7, #32]
 8012084:	f003 0308 	and.w	r3, r3, #8
 8012088:	2b00      	cmp	r3, #0
 801208a:	d00b      	beq.n	80120a4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	699a      	ldr	r2, [r3, #24]
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801209a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f000 f9cd 	bl	801243c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80120a2:	e192      	b.n	80123ca <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80120a4:	69bb      	ldr	r3, [r7, #24]
 80120a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d113      	bne.n	80120d6 <HAL_SPI_IRQHandler+0x9a>
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	f003 0320 	and.w	r3, r3, #32
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d10e      	bne.n	80120d6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80120b8:	69bb      	ldr	r3, [r7, #24]
 80120ba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d009      	beq.n	80120d6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	4798      	blx	r3
    handled = 1UL;
 80120d2:	2301      	movs	r3, #1
 80120d4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80120d6:	69bb      	ldr	r3, [r7, #24]
 80120d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d10f      	bne.n	8012100 <HAL_SPI_IRQHandler+0xc4>
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	f003 0301 	and.w	r3, r3, #1
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d00a      	beq.n	8012100 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80120ea:	69bb      	ldr	r3, [r7, #24]
 80120ec:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d105      	bne.n	8012100 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	4798      	blx	r3
    handled = 1UL;
 80120fc:	2301      	movs	r3, #1
 80120fe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012100:	69bb      	ldr	r3, [r7, #24]
 8012102:	f003 0320 	and.w	r3, r3, #32
 8012106:	2b00      	cmp	r3, #0
 8012108:	d10f      	bne.n	801212a <HAL_SPI_IRQHandler+0xee>
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	f003 0302 	and.w	r3, r3, #2
 8012110:	2b00      	cmp	r3, #0
 8012112:	d00a      	beq.n	801212a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801211a:	2b00      	cmp	r3, #0
 801211c:	d105      	bne.n	801212a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	4798      	blx	r3
    handled = 1UL;
 8012126:	2301      	movs	r3, #1
 8012128:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212c:	2b00      	cmp	r3, #0
 801212e:	f040 8147 	bne.w	80123c0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	f003 0308 	and.w	r3, r3, #8
 8012138:	2b00      	cmp	r3, #0
 801213a:	f000 808b 	beq.w	8012254 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	699a      	ldr	r2, [r3, #24]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f042 0208 	orr.w	r2, r2, #8
 801214c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	699a      	ldr	r2, [r3, #24]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f042 0210 	orr.w	r2, r2, #16
 801215c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	699a      	ldr	r2, [r3, #24]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801216c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	691a      	ldr	r2, [r3, #16]
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f022 0208 	bic.w	r2, r2, #8
 801217c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	689b      	ldr	r3, [r3, #8]
 8012184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012188:	2b00      	cmp	r3, #0
 801218a:	d13d      	bne.n	8012208 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801218c:	e036      	b.n	80121fc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	68db      	ldr	r3, [r3, #12]
 8012192:	2b0f      	cmp	r3, #15
 8012194:	d90b      	bls.n	80121ae <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801219e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80121a0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121a6:	1d1a      	adds	r2, r3, #4
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	665a      	str	r2, [r3, #100]	; 0x64
 80121ac:	e01d      	b.n	80121ea <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	68db      	ldr	r3, [r3, #12]
 80121b2:	2b07      	cmp	r3, #7
 80121b4:	d90b      	bls.n	80121ce <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121ba:	68fa      	ldr	r2, [r7, #12]
 80121bc:	8812      	ldrh	r2, [r2, #0]
 80121be:	b292      	uxth	r2, r2
 80121c0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121c6:	1c9a      	adds	r2, r3, #2
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	665a      	str	r2, [r3, #100]	; 0x64
 80121cc:	e00d      	b.n	80121ea <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121da:	7812      	ldrb	r2, [r2, #0]
 80121dc:	b2d2      	uxtb	r2, r2
 80121de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121e4:	1c5a      	adds	r2, r3, #1
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	3b01      	subs	r3, #1
 80121f4:	b29a      	uxth	r2, r3
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012202:	b29b      	uxth	r3, r3
 8012204:	2b00      	cmp	r3, #0
 8012206:	d1c2      	bne.n	801218e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f000 f98f 	bl	801252c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2201      	movs	r2, #1
 8012212:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801221c:	2b00      	cmp	r3, #0
 801221e:	d003      	beq.n	8012228 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 f901 	bl	8012428 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012226:	e0d0      	b.n	80123ca <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012228:	7cfb      	ldrb	r3, [r7, #19]
 801222a:	2b05      	cmp	r3, #5
 801222c:	d103      	bne.n	8012236 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f000 f8e6 	bl	8012400 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012234:	e0c6      	b.n	80123c4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012236:	7cfb      	ldrb	r3, [r7, #19]
 8012238:	2b04      	cmp	r3, #4
 801223a:	d103      	bne.n	8012244 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f000 f8d5 	bl	80123ec <HAL_SPI_RxCpltCallback>
    return;
 8012242:	e0bf      	b.n	80123c4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012244:	7cfb      	ldrb	r3, [r7, #19]
 8012246:	2b03      	cmp	r3, #3
 8012248:	f040 80bc 	bne.w	80123c4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f000 f8c3 	bl	80123d8 <HAL_SPI_TxCpltCallback>
    return;
 8012252:	e0b7      	b.n	80123c4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012254:	69bb      	ldr	r3, [r7, #24]
 8012256:	f403 7358 	and.w	r3, r3, #864	; 0x360
 801225a:	2b00      	cmp	r3, #0
 801225c:	f000 80b5 	beq.w	80123ca <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012260:	69bb      	ldr	r3, [r7, #24]
 8012262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012266:	2b00      	cmp	r3, #0
 8012268:	d00f      	beq.n	801228a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012270:	f043 0204 	orr.w	r2, r3, #4
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	699a      	ldr	r2, [r3, #24]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012288:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801228a:	69bb      	ldr	r3, [r7, #24]
 801228c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012290:	2b00      	cmp	r3, #0
 8012292:	d00f      	beq.n	80122b4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801229a:	f043 0201 	orr.w	r2, r3, #1
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	699a      	ldr	r2, [r3, #24]
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80122b2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d00f      	beq.n	80122de <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122c4:	f043 0208 	orr.w	r2, r3, #8
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	699a      	ldr	r2, [r3, #24]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80122dc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80122de:	69bb      	ldr	r3, [r7, #24]
 80122e0:	f003 0320 	and.w	r3, r3, #32
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d00f      	beq.n	8012308 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	699a      	ldr	r2, [r3, #24]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	f042 0220 	orr.w	r2, r2, #32
 8012306:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801230e:	2b00      	cmp	r3, #0
 8012310:	d05a      	beq.n	80123c8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f022 0201 	bic.w	r2, r2, #1
 8012320:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	6919      	ldr	r1, [r3, #16]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681a      	ldr	r2, [r3, #0]
 801232c:	4b28      	ldr	r3, [pc, #160]	; (80123d0 <HAL_SPI_IRQHandler+0x394>)
 801232e:	400b      	ands	r3, r1
 8012330:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012338:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801233c:	d138      	bne.n	80123b0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	689a      	ldr	r2, [r3, #8]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801234c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012352:	2b00      	cmp	r3, #0
 8012354:	d013      	beq.n	801237e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801235a:	4a1e      	ldr	r2, [pc, #120]	; (80123d4 <HAL_SPI_IRQHandler+0x398>)
 801235c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012362:	4618      	mov	r0, r3
 8012364:	f7f6 fd4e 	bl	8008e04 <HAL_DMA_Abort_IT>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d007      	beq.n	801237e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012382:	2b00      	cmp	r3, #0
 8012384:	d020      	beq.n	80123c8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801238a:	4a12      	ldr	r2, [pc, #72]	; (80123d4 <HAL_SPI_IRQHandler+0x398>)
 801238c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012392:	4618      	mov	r0, r3
 8012394:	f7f6 fd36 	bl	8008e04 <HAL_DMA_Abort_IT>
 8012398:	4603      	mov	r3, r0
 801239a:	2b00      	cmp	r3, #0
 801239c:	d014      	beq.n	80123c8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80123ae:	e00b      	b.n	80123c8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2201      	movs	r2, #1
 80123b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f000 f835 	bl	8012428 <HAL_SPI_ErrorCallback>
    return;
 80123be:	e003      	b.n	80123c8 <HAL_SPI_IRQHandler+0x38c>
    return;
 80123c0:	bf00      	nop
 80123c2:	e002      	b.n	80123ca <HAL_SPI_IRQHandler+0x38e>
    return;
 80123c4:	bf00      	nop
 80123c6:	e000      	b.n	80123ca <HAL_SPI_IRQHandler+0x38e>
    return;
 80123c8:	bf00      	nop
  }
}
 80123ca:	3728      	adds	r7, #40	; 0x28
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	fffffc94 	.word	0xfffffc94
 80123d4:	080124f9 	.word	0x080124f9

080123d8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80123e0:	bf00      	nop
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80123ec:	b480      	push	{r7}
 80123ee:	b083      	sub	sp, #12
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80123f4:	bf00      	nop
 80123f6:	370c      	adds	r7, #12
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr

08012400 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012400:	b480      	push	{r7}
 8012402:	b083      	sub	sp, #12
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012408:	bf00      	nop
 801240a:	370c      	adds	r7, #12
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr

08012414 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012414:	b480      	push	{r7}
 8012416:	b083      	sub	sp, #12
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 801241c:	bf00      	nop
 801241e:	370c      	adds	r7, #12
 8012420:	46bd      	mov	sp, r7
 8012422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012426:	4770      	bx	lr

08012428 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012430:	bf00      	nop
 8012432:	370c      	adds	r7, #12
 8012434:	46bd      	mov	sp, r7
 8012436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243a:	4770      	bx	lr

0801243c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801243c:	b480      	push	{r7}
 801243e:	b083      	sub	sp, #12
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012444:	bf00      	nop
 8012446:	370c      	adds	r7, #12
 8012448:	46bd      	mov	sp, r7
 801244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244e:	4770      	bx	lr

08012450 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b084      	sub	sp, #16
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801245c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012464:	b2db      	uxtb	r3, r3
 8012466:	2b07      	cmp	r3, #7
 8012468:	d011      	beq.n	801248e <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801246e:	69db      	ldr	r3, [r3, #28]
 8012470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012474:	d103      	bne.n	801247e <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8012476:	68f8      	ldr	r0, [r7, #12]
 8012478:	f7ff ffb8 	bl	80123ec <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 801247c:	e007      	b.n	801248e <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	691a      	ldr	r2, [r3, #16]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	f042 0208 	orr.w	r2, r2, #8
 801248c:	611a      	str	r2, [r3, #16]
}
 801248e:	bf00      	nop
 8012490:	3710      	adds	r7, #16
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}

08012496 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012496:	b580      	push	{r7, lr}
 8012498:	b084      	sub	sp, #16
 801249a:	af00      	add	r7, sp, #0
 801249c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124a2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80124a4:	68f8      	ldr	r0, [r7, #12]
 80124a6:	f7ff ffb5 	bl	8012414 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80124aa:	bf00      	nop
 80124ac:	3710      	adds	r7, #16
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}

080124b2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80124b2:	b580      	push	{r7, lr}
 80124b4:	b084      	sub	sp, #16
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124be:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7f7 fe1d 	bl	800a100 <HAL_DMA_GetError>
 80124c6:	4603      	mov	r3, r0
 80124c8:	2b02      	cmp	r3, #2
 80124ca:	d011      	beq.n	80124f0 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80124cc:	68f8      	ldr	r0, [r7, #12]
 80124ce:	f000 f82d 	bl	801252c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124d8:	f043 0210 	orr.w	r2, r3, #16
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	2201      	movs	r2, #1
 80124e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80124ea:	68f8      	ldr	r0, [r7, #12]
 80124ec:	f7ff ff9c 	bl	8012428 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80124f0:	bf00      	nop
 80124f2:	3710      	adds	r7, #16
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012504:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	2200      	movs	r2, #0
 801250a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	2200      	movs	r2, #0
 8012512:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	2201      	movs	r2, #1
 801251a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	f7ff ff82 	bl	8012428 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012524:	bf00      	nop
 8012526:	3710      	adds	r7, #16
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801252c:	b480      	push	{r7}
 801252e:	b085      	sub	sp, #20
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	695b      	ldr	r3, [r3, #20]
 801253a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	699a      	ldr	r2, [r3, #24]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	f042 0208 	orr.w	r2, r2, #8
 801254a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	699a      	ldr	r2, [r3, #24]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	f042 0210 	orr.w	r2, r2, #16
 801255a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	681a      	ldr	r2, [r3, #0]
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f022 0201 	bic.w	r2, r2, #1
 801256a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	6919      	ldr	r1, [r3, #16]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681a      	ldr	r2, [r3, #0]
 8012576:	4b3c      	ldr	r3, [pc, #240]	; (8012668 <SPI_CloseTransfer+0x13c>)
 8012578:	400b      	ands	r3, r1
 801257a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	689a      	ldr	r2, [r3, #8]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801258a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012592:	b2db      	uxtb	r3, r3
 8012594:	2b04      	cmp	r3, #4
 8012596:	d014      	beq.n	80125c2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	f003 0320 	and.w	r3, r3, #32
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d00f      	beq.n	80125c2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	699a      	ldr	r2, [r3, #24]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	f042 0220 	orr.w	r2, r2, #32
 80125c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	2b03      	cmp	r3, #3
 80125cc:	d014      	beq.n	80125f8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d00f      	beq.n	80125f8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125de:	f043 0204 	orr.w	r2, r3, #4
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	699a      	ldr	r2, [r3, #24]
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80125f6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d00f      	beq.n	8012622 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012608:	f043 0201 	orr.w	r2, r3, #1
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	699a      	ldr	r2, [r3, #24]
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012620:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012628:	2b00      	cmp	r3, #0
 801262a:	d00f      	beq.n	801264c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012632:	f043 0208 	orr.w	r2, r3, #8
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	699a      	ldr	r2, [r3, #24]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801264a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2200      	movs	r2, #0
 8012650:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2200      	movs	r2, #0
 8012658:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 801265c:	bf00      	nop
 801265e:	3714      	adds	r7, #20
 8012660:	46bd      	mov	sp, r7
 8012662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012666:	4770      	bx	lr
 8012668:	fffffc90 	.word	0xfffffc90

0801266c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801266c:	b480      	push	{r7}
 801266e:	b085      	sub	sp, #20
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012678:	095b      	lsrs	r3, r3, #5
 801267a:	3301      	adds	r3, #1
 801267c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	68db      	ldr	r3, [r3, #12]
 8012682:	3301      	adds	r3, #1
 8012684:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	3307      	adds	r3, #7
 801268a:	08db      	lsrs	r3, r3, #3
 801268c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	fb02 f303 	mul.w	r3, r2, r3
}
 8012696:	4618      	mov	r0, r3
 8012698:	3714      	adds	r7, #20
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr

080126a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80126a2:	b580      	push	{r7, lr}
 80126a4:	b082      	sub	sp, #8
 80126a6:	af00      	add	r7, sp, #0
 80126a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d101      	bne.n	80126b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80126b0:	2301      	movs	r3, #1
 80126b2:	e049      	b.n	8012748 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d106      	bne.n	80126ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2200      	movs	r2, #0
 80126c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f7f2 faff 	bl	8004ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2202      	movs	r2, #2
 80126d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	3304      	adds	r3, #4
 80126de:	4619      	mov	r1, r3
 80126e0:	4610      	mov	r0, r2
 80126e2:	f000 fe7d 	bl	80133e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2201      	movs	r2, #1
 80126ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2201      	movs	r2, #1
 80126f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2201      	movs	r2, #1
 80126fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2201      	movs	r2, #1
 8012702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2201      	movs	r2, #1
 801270a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2201      	movs	r2, #1
 8012712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2201      	movs	r2, #1
 801271a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2201      	movs	r2, #1
 8012722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2201      	movs	r2, #1
 801272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2201      	movs	r2, #1
 8012732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2201      	movs	r2, #1
 801273a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2201      	movs	r2, #1
 8012742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012750:	b480      	push	{r7}
 8012752:	b085      	sub	sp, #20
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801275e:	b2db      	uxtb	r3, r3
 8012760:	2b01      	cmp	r3, #1
 8012762:	d001      	beq.n	8012768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012764:	2301      	movs	r3, #1
 8012766:	e054      	b.n	8012812 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2202      	movs	r2, #2
 801276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	68da      	ldr	r2, [r3, #12]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	f042 0201 	orr.w	r2, r2, #1
 801277e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4a26      	ldr	r2, [pc, #152]	; (8012820 <HAL_TIM_Base_Start_IT+0xd0>)
 8012786:	4293      	cmp	r3, r2
 8012788:	d022      	beq.n	80127d0 <HAL_TIM_Base_Start_IT+0x80>
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012792:	d01d      	beq.n	80127d0 <HAL_TIM_Base_Start_IT+0x80>
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	4a22      	ldr	r2, [pc, #136]	; (8012824 <HAL_TIM_Base_Start_IT+0xd4>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d018      	beq.n	80127d0 <HAL_TIM_Base_Start_IT+0x80>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	4a21      	ldr	r2, [pc, #132]	; (8012828 <HAL_TIM_Base_Start_IT+0xd8>)
 80127a4:	4293      	cmp	r3, r2
 80127a6:	d013      	beq.n	80127d0 <HAL_TIM_Base_Start_IT+0x80>
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	4a1f      	ldr	r2, [pc, #124]	; (801282c <HAL_TIM_Base_Start_IT+0xdc>)
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d00e      	beq.n	80127d0 <HAL_TIM_Base_Start_IT+0x80>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	4a1e      	ldr	r2, [pc, #120]	; (8012830 <HAL_TIM_Base_Start_IT+0xe0>)
 80127b8:	4293      	cmp	r3, r2
 80127ba:	d009      	beq.n	80127d0 <HAL_TIM_Base_Start_IT+0x80>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	4a1c      	ldr	r2, [pc, #112]	; (8012834 <HAL_TIM_Base_Start_IT+0xe4>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d004      	beq.n	80127d0 <HAL_TIM_Base_Start_IT+0x80>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	4a1b      	ldr	r2, [pc, #108]	; (8012838 <HAL_TIM_Base_Start_IT+0xe8>)
 80127cc:	4293      	cmp	r3, r2
 80127ce:	d115      	bne.n	80127fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	689a      	ldr	r2, [r3, #8]
 80127d6:	4b19      	ldr	r3, [pc, #100]	; (801283c <HAL_TIM_Base_Start_IT+0xec>)
 80127d8:	4013      	ands	r3, r2
 80127da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2b06      	cmp	r3, #6
 80127e0:	d015      	beq.n	801280e <HAL_TIM_Base_Start_IT+0xbe>
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127e8:	d011      	beq.n	801280e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f042 0201 	orr.w	r2, r2, #1
 80127f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127fa:	e008      	b.n	801280e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	f042 0201 	orr.w	r2, r2, #1
 801280a:	601a      	str	r2, [r3, #0]
 801280c:	e000      	b.n	8012810 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801280e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012810:	2300      	movs	r3, #0
}
 8012812:	4618      	mov	r0, r3
 8012814:	3714      	adds	r7, #20
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	40010000 	.word	0x40010000
 8012824:	40000400 	.word	0x40000400
 8012828:	40000800 	.word	0x40000800
 801282c:	40000c00 	.word	0x40000c00
 8012830:	40010400 	.word	0x40010400
 8012834:	40001800 	.word	0x40001800
 8012838:	40014000 	.word	0x40014000
 801283c:	00010007 	.word	0x00010007

08012840 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801284a:	2300      	movs	r3, #0
 801284c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d109      	bne.n	8012868 <HAL_TIM_OC_Start_IT+0x28>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801285a:	b2db      	uxtb	r3, r3
 801285c:	2b01      	cmp	r3, #1
 801285e:	bf14      	ite	ne
 8012860:	2301      	movne	r3, #1
 8012862:	2300      	moveq	r3, #0
 8012864:	b2db      	uxtb	r3, r3
 8012866:	e03c      	b.n	80128e2 <HAL_TIM_OC_Start_IT+0xa2>
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	2b04      	cmp	r3, #4
 801286c:	d109      	bne.n	8012882 <HAL_TIM_OC_Start_IT+0x42>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012874:	b2db      	uxtb	r3, r3
 8012876:	2b01      	cmp	r3, #1
 8012878:	bf14      	ite	ne
 801287a:	2301      	movne	r3, #1
 801287c:	2300      	moveq	r3, #0
 801287e:	b2db      	uxtb	r3, r3
 8012880:	e02f      	b.n	80128e2 <HAL_TIM_OC_Start_IT+0xa2>
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	2b08      	cmp	r3, #8
 8012886:	d109      	bne.n	801289c <HAL_TIM_OC_Start_IT+0x5c>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801288e:	b2db      	uxtb	r3, r3
 8012890:	2b01      	cmp	r3, #1
 8012892:	bf14      	ite	ne
 8012894:	2301      	movne	r3, #1
 8012896:	2300      	moveq	r3, #0
 8012898:	b2db      	uxtb	r3, r3
 801289a:	e022      	b.n	80128e2 <HAL_TIM_OC_Start_IT+0xa2>
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	2b0c      	cmp	r3, #12
 80128a0:	d109      	bne.n	80128b6 <HAL_TIM_OC_Start_IT+0x76>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	2b01      	cmp	r3, #1
 80128ac:	bf14      	ite	ne
 80128ae:	2301      	movne	r3, #1
 80128b0:	2300      	moveq	r3, #0
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	e015      	b.n	80128e2 <HAL_TIM_OC_Start_IT+0xa2>
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	2b10      	cmp	r3, #16
 80128ba:	d109      	bne.n	80128d0 <HAL_TIM_OC_Start_IT+0x90>
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128c2:	b2db      	uxtb	r3, r3
 80128c4:	2b01      	cmp	r3, #1
 80128c6:	bf14      	ite	ne
 80128c8:	2301      	movne	r3, #1
 80128ca:	2300      	moveq	r3, #0
 80128cc:	b2db      	uxtb	r3, r3
 80128ce:	e008      	b.n	80128e2 <HAL_TIM_OC_Start_IT+0xa2>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	2b01      	cmp	r3, #1
 80128da:	bf14      	ite	ne
 80128dc:	2301      	movne	r3, #1
 80128de:	2300      	moveq	r3, #0
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d001      	beq.n	80128ea <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80128e6:	2301      	movs	r3, #1
 80128e8:	e0ec      	b.n	8012ac4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d104      	bne.n	80128fa <HAL_TIM_OC_Start_IT+0xba>
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2202      	movs	r2, #2
 80128f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80128f8:	e023      	b.n	8012942 <HAL_TIM_OC_Start_IT+0x102>
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	2b04      	cmp	r3, #4
 80128fe:	d104      	bne.n	801290a <HAL_TIM_OC_Start_IT+0xca>
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2202      	movs	r2, #2
 8012904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012908:	e01b      	b.n	8012942 <HAL_TIM_OC_Start_IT+0x102>
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	2b08      	cmp	r3, #8
 801290e:	d104      	bne.n	801291a <HAL_TIM_OC_Start_IT+0xda>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2202      	movs	r2, #2
 8012914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012918:	e013      	b.n	8012942 <HAL_TIM_OC_Start_IT+0x102>
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	2b0c      	cmp	r3, #12
 801291e:	d104      	bne.n	801292a <HAL_TIM_OC_Start_IT+0xea>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2202      	movs	r2, #2
 8012924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012928:	e00b      	b.n	8012942 <HAL_TIM_OC_Start_IT+0x102>
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	2b10      	cmp	r3, #16
 801292e:	d104      	bne.n	801293a <HAL_TIM_OC_Start_IT+0xfa>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2202      	movs	r2, #2
 8012934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012938:	e003      	b.n	8012942 <HAL_TIM_OC_Start_IT+0x102>
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2202      	movs	r2, #2
 801293e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	2b0c      	cmp	r3, #12
 8012946:	d841      	bhi.n	80129cc <HAL_TIM_OC_Start_IT+0x18c>
 8012948:	a201      	add	r2, pc, #4	; (adr r2, 8012950 <HAL_TIM_OC_Start_IT+0x110>)
 801294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801294e:	bf00      	nop
 8012950:	08012985 	.word	0x08012985
 8012954:	080129cd 	.word	0x080129cd
 8012958:	080129cd 	.word	0x080129cd
 801295c:	080129cd 	.word	0x080129cd
 8012960:	08012997 	.word	0x08012997
 8012964:	080129cd 	.word	0x080129cd
 8012968:	080129cd 	.word	0x080129cd
 801296c:	080129cd 	.word	0x080129cd
 8012970:	080129a9 	.word	0x080129a9
 8012974:	080129cd 	.word	0x080129cd
 8012978:	080129cd 	.word	0x080129cd
 801297c:	080129cd 	.word	0x080129cd
 8012980:	080129bb 	.word	0x080129bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	68da      	ldr	r2, [r3, #12]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f042 0202 	orr.w	r2, r2, #2
 8012992:	60da      	str	r2, [r3, #12]
      break;
 8012994:	e01d      	b.n	80129d2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	68da      	ldr	r2, [r3, #12]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	f042 0204 	orr.w	r2, r2, #4
 80129a4:	60da      	str	r2, [r3, #12]
      break;
 80129a6:	e014      	b.n	80129d2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	68da      	ldr	r2, [r3, #12]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	f042 0208 	orr.w	r2, r2, #8
 80129b6:	60da      	str	r2, [r3, #12]
      break;
 80129b8:	e00b      	b.n	80129d2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	68da      	ldr	r2, [r3, #12]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f042 0210 	orr.w	r2, r2, #16
 80129c8:	60da      	str	r2, [r3, #12]
      break;
 80129ca:	e002      	b.n	80129d2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80129cc:	2301      	movs	r3, #1
 80129ce:	73fb      	strb	r3, [r7, #15]
      break;
 80129d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80129d2:	7bfb      	ldrb	r3, [r7, #15]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d174      	bne.n	8012ac2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2201      	movs	r2, #1
 80129de:	6839      	ldr	r1, [r7, #0]
 80129e0:	4618      	mov	r0, r3
 80129e2:	f001 f917 	bl	8013c14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4a38      	ldr	r2, [pc, #224]	; (8012acc <HAL_TIM_OC_Start_IT+0x28c>)
 80129ec:	4293      	cmp	r3, r2
 80129ee:	d013      	beq.n	8012a18 <HAL_TIM_OC_Start_IT+0x1d8>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	4a36      	ldr	r2, [pc, #216]	; (8012ad0 <HAL_TIM_OC_Start_IT+0x290>)
 80129f6:	4293      	cmp	r3, r2
 80129f8:	d00e      	beq.n	8012a18 <HAL_TIM_OC_Start_IT+0x1d8>
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	4a35      	ldr	r2, [pc, #212]	; (8012ad4 <HAL_TIM_OC_Start_IT+0x294>)
 8012a00:	4293      	cmp	r3, r2
 8012a02:	d009      	beq.n	8012a18 <HAL_TIM_OC_Start_IT+0x1d8>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	4a33      	ldr	r2, [pc, #204]	; (8012ad8 <HAL_TIM_OC_Start_IT+0x298>)
 8012a0a:	4293      	cmp	r3, r2
 8012a0c:	d004      	beq.n	8012a18 <HAL_TIM_OC_Start_IT+0x1d8>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	4a32      	ldr	r2, [pc, #200]	; (8012adc <HAL_TIM_OC_Start_IT+0x29c>)
 8012a14:	4293      	cmp	r3, r2
 8012a16:	d101      	bne.n	8012a1c <HAL_TIM_OC_Start_IT+0x1dc>
 8012a18:	2301      	movs	r3, #1
 8012a1a:	e000      	b.n	8012a1e <HAL_TIM_OC_Start_IT+0x1de>
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d007      	beq.n	8012a32 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012a30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	4a25      	ldr	r2, [pc, #148]	; (8012acc <HAL_TIM_OC_Start_IT+0x28c>)
 8012a38:	4293      	cmp	r3, r2
 8012a3a:	d022      	beq.n	8012a82 <HAL_TIM_OC_Start_IT+0x242>
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a44:	d01d      	beq.n	8012a82 <HAL_TIM_OC_Start_IT+0x242>
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	4a25      	ldr	r2, [pc, #148]	; (8012ae0 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012a4c:	4293      	cmp	r3, r2
 8012a4e:	d018      	beq.n	8012a82 <HAL_TIM_OC_Start_IT+0x242>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	4a23      	ldr	r2, [pc, #140]	; (8012ae4 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012a56:	4293      	cmp	r3, r2
 8012a58:	d013      	beq.n	8012a82 <HAL_TIM_OC_Start_IT+0x242>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	4a22      	ldr	r2, [pc, #136]	; (8012ae8 <HAL_TIM_OC_Start_IT+0x2a8>)
 8012a60:	4293      	cmp	r3, r2
 8012a62:	d00e      	beq.n	8012a82 <HAL_TIM_OC_Start_IT+0x242>
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	4a19      	ldr	r2, [pc, #100]	; (8012ad0 <HAL_TIM_OC_Start_IT+0x290>)
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	d009      	beq.n	8012a82 <HAL_TIM_OC_Start_IT+0x242>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	4a1e      	ldr	r2, [pc, #120]	; (8012aec <HAL_TIM_OC_Start_IT+0x2ac>)
 8012a74:	4293      	cmp	r3, r2
 8012a76:	d004      	beq.n	8012a82 <HAL_TIM_OC_Start_IT+0x242>
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	4a15      	ldr	r2, [pc, #84]	; (8012ad4 <HAL_TIM_OC_Start_IT+0x294>)
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d115      	bne.n	8012aae <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	689a      	ldr	r2, [r3, #8]
 8012a88:	4b19      	ldr	r3, [pc, #100]	; (8012af0 <HAL_TIM_OC_Start_IT+0x2b0>)
 8012a8a:	4013      	ands	r3, r2
 8012a8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	2b06      	cmp	r3, #6
 8012a92:	d015      	beq.n	8012ac0 <HAL_TIM_OC_Start_IT+0x280>
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a9a:	d011      	beq.n	8012ac0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	681a      	ldr	r2, [r3, #0]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f042 0201 	orr.w	r2, r2, #1
 8012aaa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012aac:	e008      	b.n	8012ac0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	681a      	ldr	r2, [r3, #0]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	f042 0201 	orr.w	r2, r2, #1
 8012abc:	601a      	str	r2, [r3, #0]
 8012abe:	e000      	b.n	8012ac2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ac0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3710      	adds	r7, #16
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	40010000 	.word	0x40010000
 8012ad0:	40010400 	.word	0x40010400
 8012ad4:	40014000 	.word	0x40014000
 8012ad8:	40014400 	.word	0x40014400
 8012adc:	40014800 	.word	0x40014800
 8012ae0:	40000400 	.word	0x40000400
 8012ae4:	40000800 	.word	0x40000800
 8012ae8:	40000c00 	.word	0x40000c00
 8012aec:	40001800 	.word	0x40001800
 8012af0:	00010007 	.word	0x00010007

08012af4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b084      	sub	sp, #16
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012afe:	2300      	movs	r3, #0
 8012b00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	2b0c      	cmp	r3, #12
 8012b06:	d841      	bhi.n	8012b8c <HAL_TIM_OC_Stop_IT+0x98>
 8012b08:	a201      	add	r2, pc, #4	; (adr r2, 8012b10 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b0e:	bf00      	nop
 8012b10:	08012b45 	.word	0x08012b45
 8012b14:	08012b8d 	.word	0x08012b8d
 8012b18:	08012b8d 	.word	0x08012b8d
 8012b1c:	08012b8d 	.word	0x08012b8d
 8012b20:	08012b57 	.word	0x08012b57
 8012b24:	08012b8d 	.word	0x08012b8d
 8012b28:	08012b8d 	.word	0x08012b8d
 8012b2c:	08012b8d 	.word	0x08012b8d
 8012b30:	08012b69 	.word	0x08012b69
 8012b34:	08012b8d 	.word	0x08012b8d
 8012b38:	08012b8d 	.word	0x08012b8d
 8012b3c:	08012b8d 	.word	0x08012b8d
 8012b40:	08012b7b 	.word	0x08012b7b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	68da      	ldr	r2, [r3, #12]
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	f022 0202 	bic.w	r2, r2, #2
 8012b52:	60da      	str	r2, [r3, #12]
      break;
 8012b54:	e01d      	b.n	8012b92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	68da      	ldr	r2, [r3, #12]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f022 0204 	bic.w	r2, r2, #4
 8012b64:	60da      	str	r2, [r3, #12]
      break;
 8012b66:	e014      	b.n	8012b92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	68da      	ldr	r2, [r3, #12]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f022 0208 	bic.w	r2, r2, #8
 8012b76:	60da      	str	r2, [r3, #12]
      break;
 8012b78:	e00b      	b.n	8012b92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	68da      	ldr	r2, [r3, #12]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	f022 0210 	bic.w	r2, r2, #16
 8012b88:	60da      	str	r2, [r3, #12]
      break;
 8012b8a:	e002      	b.n	8012b92 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8012b90:	bf00      	nop
  }

  if (status == HAL_OK)
 8012b92:	7bfb      	ldrb	r3, [r7, #15]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f040 8081 	bne.w	8012c9c <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	6839      	ldr	r1, [r7, #0]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f001 f836 	bl	8013c14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	4a3e      	ldr	r2, [pc, #248]	; (8012ca8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	d013      	beq.n	8012bda <HAL_TIM_OC_Stop_IT+0xe6>
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	4a3d      	ldr	r2, [pc, #244]	; (8012cac <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012bb8:	4293      	cmp	r3, r2
 8012bba:	d00e      	beq.n	8012bda <HAL_TIM_OC_Stop_IT+0xe6>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	4a3b      	ldr	r2, [pc, #236]	; (8012cb0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012bc2:	4293      	cmp	r3, r2
 8012bc4:	d009      	beq.n	8012bda <HAL_TIM_OC_Stop_IT+0xe6>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	4a3a      	ldr	r2, [pc, #232]	; (8012cb4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	d004      	beq.n	8012bda <HAL_TIM_OC_Stop_IT+0xe6>
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	4a38      	ldr	r2, [pc, #224]	; (8012cb8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012bd6:	4293      	cmp	r3, r2
 8012bd8:	d101      	bne.n	8012bde <HAL_TIM_OC_Stop_IT+0xea>
 8012bda:	2301      	movs	r3, #1
 8012bdc:	e000      	b.n	8012be0 <HAL_TIM_OC_Stop_IT+0xec>
 8012bde:	2300      	movs	r3, #0
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d017      	beq.n	8012c14 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	6a1a      	ldr	r2, [r3, #32]
 8012bea:	f241 1311 	movw	r3, #4369	; 0x1111
 8012bee:	4013      	ands	r3, r2
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d10f      	bne.n	8012c14 <HAL_TIM_OC_Stop_IT+0x120>
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	6a1a      	ldr	r2, [r3, #32]
 8012bfa:	f240 4344 	movw	r3, #1092	; 0x444
 8012bfe:	4013      	ands	r3, r2
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d107      	bne.n	8012c14 <HAL_TIM_OC_Stop_IT+0x120>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012c12:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	6a1a      	ldr	r2, [r3, #32]
 8012c1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8012c1e:	4013      	ands	r3, r2
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d10f      	bne.n	8012c44 <HAL_TIM_OC_Stop_IT+0x150>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	6a1a      	ldr	r2, [r3, #32]
 8012c2a:	f240 4344 	movw	r3, #1092	; 0x444
 8012c2e:	4013      	ands	r3, r2
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d107      	bne.n	8012c44 <HAL_TIM_OC_Stop_IT+0x150>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	681a      	ldr	r2, [r3, #0]
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f022 0201 	bic.w	r2, r2, #1
 8012c42:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d104      	bne.n	8012c54 <HAL_TIM_OC_Stop_IT+0x160>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012c52:	e023      	b.n	8012c9c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	2b04      	cmp	r3, #4
 8012c58:	d104      	bne.n	8012c64 <HAL_TIM_OC_Stop_IT+0x170>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012c62:	e01b      	b.n	8012c9c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	2b08      	cmp	r3, #8
 8012c68:	d104      	bne.n	8012c74 <HAL_TIM_OC_Stop_IT+0x180>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012c72:	e013      	b.n	8012c9c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	2b0c      	cmp	r3, #12
 8012c78:	d104      	bne.n	8012c84 <HAL_TIM_OC_Stop_IT+0x190>
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2201      	movs	r2, #1
 8012c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012c82:	e00b      	b.n	8012c9c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	2b10      	cmp	r3, #16
 8012c88:	d104      	bne.n	8012c94 <HAL_TIM_OC_Stop_IT+0x1a0>
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012c92:	e003      	b.n	8012c9c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2201      	movs	r2, #1
 8012c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3710      	adds	r7, #16
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}
 8012ca6:	bf00      	nop
 8012ca8:	40010000 	.word	0x40010000
 8012cac:	40010400 	.word	0x40010400
 8012cb0:	40014000 	.word	0x40014000
 8012cb4:	40014400 	.word	0x40014400
 8012cb8:	40014800 	.word	0x40014800

08012cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b082      	sub	sp, #8
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d101      	bne.n	8012cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	e049      	b.n	8012d62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012cd4:	b2db      	uxtb	r3, r3
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d106      	bne.n	8012ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f000 f841 	bl	8012d6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2202      	movs	r2, #2
 8012cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681a      	ldr	r2, [r3, #0]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	3304      	adds	r3, #4
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	4610      	mov	r0, r2
 8012cfc:	f000 fb70 	bl	80133e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2201      	movs	r2, #1
 8012d04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2201      	movs	r2, #1
 8012d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2201      	movs	r2, #1
 8012d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2201      	movs	r2, #1
 8012d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2201      	movs	r2, #1
 8012d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2201      	movs	r2, #1
 8012d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2201      	movs	r2, #1
 8012d54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012d60:	2300      	movs	r3, #0
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3708      	adds	r7, #8
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}

08012d6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012d6a:	b480      	push	{r7}
 8012d6c:	b083      	sub	sp, #12
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012d72:	bf00      	nop
 8012d74:	370c      	adds	r7, #12
 8012d76:	46bd      	mov	sp, r7
 8012d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7c:	4770      	bx	lr

08012d7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012d7e:	b580      	push	{r7, lr}
 8012d80:	b084      	sub	sp, #16
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	691b      	ldr	r3, [r3, #16]
 8012d94:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	f003 0302 	and.w	r3, r3, #2
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d020      	beq.n	8012de2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	f003 0302 	and.w	r3, r3, #2
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d01b      	beq.n	8012de2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	f06f 0202 	mvn.w	r2, #2
 8012db2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2201      	movs	r2, #1
 8012db8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	699b      	ldr	r3, [r3, #24]
 8012dc0:	f003 0303 	and.w	r3, r3, #3
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d003      	beq.n	8012dd0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f000 faeb 	bl	80133a4 <HAL_TIM_IC_CaptureCallback>
 8012dce:	e005      	b.n	8012ddc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f7ef fdf9 	bl	80029c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f000 faee 	bl	80133b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2200      	movs	r2, #0
 8012de0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	f003 0304 	and.w	r3, r3, #4
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d020      	beq.n	8012e2e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	f003 0304 	and.w	r3, r3, #4
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d01b      	beq.n	8012e2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f06f 0204 	mvn.w	r2, #4
 8012dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2202      	movs	r2, #2
 8012e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	699b      	ldr	r3, [r3, #24]
 8012e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d003      	beq.n	8012e1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f000 fac5 	bl	80133a4 <HAL_TIM_IC_CaptureCallback>
 8012e1a:	e005      	b.n	8012e28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7ef fdd3 	bl	80029c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e22:	6878      	ldr	r0, [r7, #4]
 8012e24:	f000 fac8 	bl	80133b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	f003 0308 	and.w	r3, r3, #8
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d020      	beq.n	8012e7a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	f003 0308 	and.w	r3, r3, #8
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d01b      	beq.n	8012e7a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f06f 0208 	mvn.w	r2, #8
 8012e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2204      	movs	r2, #4
 8012e50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	69db      	ldr	r3, [r3, #28]
 8012e58:	f003 0303 	and.w	r3, r3, #3
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d003      	beq.n	8012e68 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f000 fa9f 	bl	80133a4 <HAL_TIM_IC_CaptureCallback>
 8012e66:	e005      	b.n	8012e74 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f7ef fdad 	bl	80029c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f000 faa2 	bl	80133b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2200      	movs	r2, #0
 8012e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	f003 0310 	and.w	r3, r3, #16
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d020      	beq.n	8012ec6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	f003 0310 	and.w	r3, r3, #16
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d01b      	beq.n	8012ec6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f06f 0210 	mvn.w	r2, #16
 8012e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2208      	movs	r2, #8
 8012e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	69db      	ldr	r3, [r3, #28]
 8012ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d003      	beq.n	8012eb4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f000 fa79 	bl	80133a4 <HAL_TIM_IC_CaptureCallback>
 8012eb2:	e005      	b.n	8012ec0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f7ef fd87 	bl	80029c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f000 fa7c 	bl	80133b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	f003 0301 	and.w	r3, r3, #1
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d00c      	beq.n	8012eea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	f003 0301 	and.w	r3, r3, #1
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d007      	beq.n	8012eea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	f06f 0201 	mvn.w	r2, #1
 8012ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f7f0 fcdb 	bl	80038a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d104      	bne.n	8012efe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d00c      	beq.n	8012f18 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d007      	beq.n	8012f18 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f000 ffba 	bl	8013e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d00c      	beq.n	8012f3c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d007      	beq.n	8012f3c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f000 ffb2 	bl	8013ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d00c      	beq.n	8012f60 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d007      	beq.n	8012f60 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f000 fa36 	bl	80133cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	f003 0320 	and.w	r3, r3, #32
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d00c      	beq.n	8012f84 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	f003 0320 	and.w	r3, r3, #32
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d007      	beq.n	8012f84 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	f06f 0220 	mvn.w	r2, #32
 8012f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f000 ff7a 	bl	8013e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012f84:	bf00      	nop
 8012f86:	3710      	adds	r7, #16
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b086      	sub	sp, #24
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012fa2:	2b01      	cmp	r3, #1
 8012fa4:	d101      	bne.n	8012faa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012fa6:	2302      	movs	r3, #2
 8012fa8:	e0ff      	b.n	80131aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	2201      	movs	r2, #1
 8012fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2b14      	cmp	r3, #20
 8012fb6:	f200 80f0 	bhi.w	801319a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012fba:	a201      	add	r2, pc, #4	; (adr r2, 8012fc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fc0:	08013015 	.word	0x08013015
 8012fc4:	0801319b 	.word	0x0801319b
 8012fc8:	0801319b 	.word	0x0801319b
 8012fcc:	0801319b 	.word	0x0801319b
 8012fd0:	08013055 	.word	0x08013055
 8012fd4:	0801319b 	.word	0x0801319b
 8012fd8:	0801319b 	.word	0x0801319b
 8012fdc:	0801319b 	.word	0x0801319b
 8012fe0:	08013097 	.word	0x08013097
 8012fe4:	0801319b 	.word	0x0801319b
 8012fe8:	0801319b 	.word	0x0801319b
 8012fec:	0801319b 	.word	0x0801319b
 8012ff0:	080130d7 	.word	0x080130d7
 8012ff4:	0801319b 	.word	0x0801319b
 8012ff8:	0801319b 	.word	0x0801319b
 8012ffc:	0801319b 	.word	0x0801319b
 8013000:	08013119 	.word	0x08013119
 8013004:	0801319b 	.word	0x0801319b
 8013008:	0801319b 	.word	0x0801319b
 801300c:	0801319b 	.word	0x0801319b
 8013010:	08013159 	.word	0x08013159
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	68b9      	ldr	r1, [r7, #8]
 801301a:	4618      	mov	r0, r3
 801301c:	f000 fa86 	bl	801352c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	699a      	ldr	r2, [r3, #24]
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	f042 0208 	orr.w	r2, r2, #8
 801302e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	699a      	ldr	r2, [r3, #24]
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	f022 0204 	bic.w	r2, r2, #4
 801303e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	6999      	ldr	r1, [r3, #24]
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	691a      	ldr	r2, [r3, #16]
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	430a      	orrs	r2, r1
 8013050:	619a      	str	r2, [r3, #24]
      break;
 8013052:	e0a5      	b.n	80131a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	68b9      	ldr	r1, [r7, #8]
 801305a:	4618      	mov	r0, r3
 801305c:	f000 faf6 	bl	801364c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	699a      	ldr	r2, [r3, #24]
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801306e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	699a      	ldr	r2, [r3, #24]
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801307e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	6999      	ldr	r1, [r3, #24]
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	691b      	ldr	r3, [r3, #16]
 801308a:	021a      	lsls	r2, r3, #8
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	430a      	orrs	r2, r1
 8013092:	619a      	str	r2, [r3, #24]
      break;
 8013094:	e084      	b.n	80131a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	68b9      	ldr	r1, [r7, #8]
 801309c:	4618      	mov	r0, r3
 801309e:	f000 fb5f 	bl	8013760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	69da      	ldr	r2, [r3, #28]
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	f042 0208 	orr.w	r2, r2, #8
 80130b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	69da      	ldr	r2, [r3, #28]
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	f022 0204 	bic.w	r2, r2, #4
 80130c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	69d9      	ldr	r1, [r3, #28]
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	691a      	ldr	r2, [r3, #16]
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	430a      	orrs	r2, r1
 80130d2:	61da      	str	r2, [r3, #28]
      break;
 80130d4:	e064      	b.n	80131a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	68b9      	ldr	r1, [r7, #8]
 80130dc:	4618      	mov	r0, r3
 80130de:	f000 fbc7 	bl	8013870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	69da      	ldr	r2, [r3, #28]
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80130f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	69da      	ldr	r2, [r3, #28]
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	69d9      	ldr	r1, [r3, #28]
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	691b      	ldr	r3, [r3, #16]
 801310c:	021a      	lsls	r2, r3, #8
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	430a      	orrs	r2, r1
 8013114:	61da      	str	r2, [r3, #28]
      break;
 8013116:	e043      	b.n	80131a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	68b9      	ldr	r1, [r7, #8]
 801311e:	4618      	mov	r0, r3
 8013120:	f000 fc10 	bl	8013944 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	f042 0208 	orr.w	r2, r2, #8
 8013132:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	f022 0204 	bic.w	r2, r2, #4
 8013142:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	691a      	ldr	r2, [r3, #16]
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	430a      	orrs	r2, r1
 8013154:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013156:	e023      	b.n	80131a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68b9      	ldr	r1, [r7, #8]
 801315e:	4618      	mov	r0, r3
 8013160:	f000 fc54 	bl	8013a0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013172:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013182:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	691b      	ldr	r3, [r3, #16]
 801318e:	021a      	lsls	r2, r3, #8
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	430a      	orrs	r2, r1
 8013196:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013198:	e002      	b.n	80131a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801319a:	2301      	movs	r3, #1
 801319c:	75fb      	strb	r3, [r7, #23]
      break;
 801319e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2200      	movs	r2, #0
 80131a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80131a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3718      	adds	r7, #24
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop

080131b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b084      	sub	sp, #16
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80131be:	2300      	movs	r3, #0
 80131c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131c8:	2b01      	cmp	r3, #1
 80131ca:	d101      	bne.n	80131d0 <HAL_TIM_ConfigClockSource+0x1c>
 80131cc:	2302      	movs	r3, #2
 80131ce:	e0dc      	b.n	801338a <HAL_TIM_ConfigClockSource+0x1d6>
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2201      	movs	r2, #1
 80131d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2202      	movs	r2, #2
 80131dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	689b      	ldr	r3, [r3, #8]
 80131e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80131e8:	68ba      	ldr	r2, [r7, #8]
 80131ea:	4b6a      	ldr	r3, [pc, #424]	; (8013394 <HAL_TIM_ConfigClockSource+0x1e0>)
 80131ec:	4013      	ands	r3, r2
 80131ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80131f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	68ba      	ldr	r2, [r7, #8]
 80131fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4a64      	ldr	r2, [pc, #400]	; (8013398 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013206:	4293      	cmp	r3, r2
 8013208:	f000 80a9 	beq.w	801335e <HAL_TIM_ConfigClockSource+0x1aa>
 801320c:	4a62      	ldr	r2, [pc, #392]	; (8013398 <HAL_TIM_ConfigClockSource+0x1e4>)
 801320e:	4293      	cmp	r3, r2
 8013210:	f200 80ae 	bhi.w	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013214:	4a61      	ldr	r2, [pc, #388]	; (801339c <HAL_TIM_ConfigClockSource+0x1e8>)
 8013216:	4293      	cmp	r3, r2
 8013218:	f000 80a1 	beq.w	801335e <HAL_TIM_ConfigClockSource+0x1aa>
 801321c:	4a5f      	ldr	r2, [pc, #380]	; (801339c <HAL_TIM_ConfigClockSource+0x1e8>)
 801321e:	4293      	cmp	r3, r2
 8013220:	f200 80a6 	bhi.w	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013224:	4a5e      	ldr	r2, [pc, #376]	; (80133a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013226:	4293      	cmp	r3, r2
 8013228:	f000 8099 	beq.w	801335e <HAL_TIM_ConfigClockSource+0x1aa>
 801322c:	4a5c      	ldr	r2, [pc, #368]	; (80133a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 801322e:	4293      	cmp	r3, r2
 8013230:	f200 809e 	bhi.w	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013234:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013238:	f000 8091 	beq.w	801335e <HAL_TIM_ConfigClockSource+0x1aa>
 801323c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013240:	f200 8096 	bhi.w	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013248:	f000 8089 	beq.w	801335e <HAL_TIM_ConfigClockSource+0x1aa>
 801324c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013250:	f200 808e 	bhi.w	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013258:	d03e      	beq.n	80132d8 <HAL_TIM_ConfigClockSource+0x124>
 801325a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801325e:	f200 8087 	bhi.w	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013266:	f000 8086 	beq.w	8013376 <HAL_TIM_ConfigClockSource+0x1c2>
 801326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801326e:	d87f      	bhi.n	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013270:	2b70      	cmp	r3, #112	; 0x70
 8013272:	d01a      	beq.n	80132aa <HAL_TIM_ConfigClockSource+0xf6>
 8013274:	2b70      	cmp	r3, #112	; 0x70
 8013276:	d87b      	bhi.n	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013278:	2b60      	cmp	r3, #96	; 0x60
 801327a:	d050      	beq.n	801331e <HAL_TIM_ConfigClockSource+0x16a>
 801327c:	2b60      	cmp	r3, #96	; 0x60
 801327e:	d877      	bhi.n	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013280:	2b50      	cmp	r3, #80	; 0x50
 8013282:	d03c      	beq.n	80132fe <HAL_TIM_ConfigClockSource+0x14a>
 8013284:	2b50      	cmp	r3, #80	; 0x50
 8013286:	d873      	bhi.n	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013288:	2b40      	cmp	r3, #64	; 0x40
 801328a:	d058      	beq.n	801333e <HAL_TIM_ConfigClockSource+0x18a>
 801328c:	2b40      	cmp	r3, #64	; 0x40
 801328e:	d86f      	bhi.n	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013290:	2b30      	cmp	r3, #48	; 0x30
 8013292:	d064      	beq.n	801335e <HAL_TIM_ConfigClockSource+0x1aa>
 8013294:	2b30      	cmp	r3, #48	; 0x30
 8013296:	d86b      	bhi.n	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 8013298:	2b20      	cmp	r3, #32
 801329a:	d060      	beq.n	801335e <HAL_TIM_ConfigClockSource+0x1aa>
 801329c:	2b20      	cmp	r3, #32
 801329e:	d867      	bhi.n	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d05c      	beq.n	801335e <HAL_TIM_ConfigClockSource+0x1aa>
 80132a4:	2b10      	cmp	r3, #16
 80132a6:	d05a      	beq.n	801335e <HAL_TIM_ConfigClockSource+0x1aa>
 80132a8:	e062      	b.n	8013370 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6818      	ldr	r0, [r3, #0]
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	6899      	ldr	r1, [r3, #8]
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	685a      	ldr	r2, [r3, #4]
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	68db      	ldr	r3, [r3, #12]
 80132ba:	f000 fc8b 	bl	8013bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	689b      	ldr	r3, [r3, #8]
 80132c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80132cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	68ba      	ldr	r2, [r7, #8]
 80132d4:	609a      	str	r2, [r3, #8]
      break;
 80132d6:	e04f      	b.n	8013378 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6818      	ldr	r0, [r3, #0]
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	6899      	ldr	r1, [r3, #8]
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	685a      	ldr	r2, [r3, #4]
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	68db      	ldr	r3, [r3, #12]
 80132e8:	f000 fc74 	bl	8013bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	689a      	ldr	r2, [r3, #8]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80132fa:	609a      	str	r2, [r3, #8]
      break;
 80132fc:	e03c      	b.n	8013378 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6818      	ldr	r0, [r3, #0]
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	6859      	ldr	r1, [r3, #4]
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	461a      	mov	r2, r3
 801330c:	f000 fbe4 	bl	8013ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	2150      	movs	r1, #80	; 0x50
 8013316:	4618      	mov	r0, r3
 8013318:	f000 fc3e 	bl	8013b98 <TIM_ITRx_SetConfig>
      break;
 801331c:	e02c      	b.n	8013378 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6818      	ldr	r0, [r3, #0]
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	6859      	ldr	r1, [r3, #4]
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	68db      	ldr	r3, [r3, #12]
 801332a:	461a      	mov	r2, r3
 801332c:	f000 fc03 	bl	8013b36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	2160      	movs	r1, #96	; 0x60
 8013336:	4618      	mov	r0, r3
 8013338:	f000 fc2e 	bl	8013b98 <TIM_ITRx_SetConfig>
      break;
 801333c:	e01c      	b.n	8013378 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6818      	ldr	r0, [r3, #0]
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	6859      	ldr	r1, [r3, #4]
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	461a      	mov	r2, r3
 801334c:	f000 fbc4 	bl	8013ad8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	2140      	movs	r1, #64	; 0x40
 8013356:	4618      	mov	r0, r3
 8013358:	f000 fc1e 	bl	8013b98 <TIM_ITRx_SetConfig>
      break;
 801335c:	e00c      	b.n	8013378 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	4619      	mov	r1, r3
 8013368:	4610      	mov	r0, r2
 801336a:	f000 fc15 	bl	8013b98 <TIM_ITRx_SetConfig>
      break;
 801336e:	e003      	b.n	8013378 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013370:	2301      	movs	r3, #1
 8013372:	73fb      	strb	r3, [r7, #15]
      break;
 8013374:	e000      	b.n	8013378 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2201      	movs	r2, #1
 801337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2200      	movs	r2, #0
 8013384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013388:	7bfb      	ldrb	r3, [r7, #15]
}
 801338a:	4618      	mov	r0, r3
 801338c:	3710      	adds	r7, #16
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	ffceff88 	.word	0xffceff88
 8013398:	00100040 	.word	0x00100040
 801339c:	00100030 	.word	0x00100030
 80133a0:	00100020 	.word	0x00100020

080133a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80133a4:	b480      	push	{r7}
 80133a6:	b083      	sub	sp, #12
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80133ac:	bf00      	nop
 80133ae:	370c      	adds	r7, #12
 80133b0:	46bd      	mov	sp, r7
 80133b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b6:	4770      	bx	lr

080133b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80133b8:	b480      	push	{r7}
 80133ba:	b083      	sub	sp, #12
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80133c0:	bf00      	nop
 80133c2:	370c      	adds	r7, #12
 80133c4:	46bd      	mov	sp, r7
 80133c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ca:	4770      	bx	lr

080133cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80133cc:	b480      	push	{r7}
 80133ce:	b083      	sub	sp, #12
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80133d4:	bf00      	nop
 80133d6:	370c      	adds	r7, #12
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr

080133e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80133e0:	b480      	push	{r7}
 80133e2:	b085      	sub	sp, #20
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	4a46      	ldr	r2, [pc, #280]	; (801350c <TIM_Base_SetConfig+0x12c>)
 80133f4:	4293      	cmp	r3, r2
 80133f6:	d013      	beq.n	8013420 <TIM_Base_SetConfig+0x40>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80133fe:	d00f      	beq.n	8013420 <TIM_Base_SetConfig+0x40>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	4a43      	ldr	r2, [pc, #268]	; (8013510 <TIM_Base_SetConfig+0x130>)
 8013404:	4293      	cmp	r3, r2
 8013406:	d00b      	beq.n	8013420 <TIM_Base_SetConfig+0x40>
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	4a42      	ldr	r2, [pc, #264]	; (8013514 <TIM_Base_SetConfig+0x134>)
 801340c:	4293      	cmp	r3, r2
 801340e:	d007      	beq.n	8013420 <TIM_Base_SetConfig+0x40>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	4a41      	ldr	r2, [pc, #260]	; (8013518 <TIM_Base_SetConfig+0x138>)
 8013414:	4293      	cmp	r3, r2
 8013416:	d003      	beq.n	8013420 <TIM_Base_SetConfig+0x40>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	4a40      	ldr	r2, [pc, #256]	; (801351c <TIM_Base_SetConfig+0x13c>)
 801341c:	4293      	cmp	r3, r2
 801341e:	d108      	bne.n	8013432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	685b      	ldr	r3, [r3, #4]
 801342c:	68fa      	ldr	r2, [r7, #12]
 801342e:	4313      	orrs	r3, r2
 8013430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	4a35      	ldr	r2, [pc, #212]	; (801350c <TIM_Base_SetConfig+0x12c>)
 8013436:	4293      	cmp	r3, r2
 8013438:	d01f      	beq.n	801347a <TIM_Base_SetConfig+0x9a>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013440:	d01b      	beq.n	801347a <TIM_Base_SetConfig+0x9a>
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	4a32      	ldr	r2, [pc, #200]	; (8013510 <TIM_Base_SetConfig+0x130>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d017      	beq.n	801347a <TIM_Base_SetConfig+0x9a>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4a31      	ldr	r2, [pc, #196]	; (8013514 <TIM_Base_SetConfig+0x134>)
 801344e:	4293      	cmp	r3, r2
 8013450:	d013      	beq.n	801347a <TIM_Base_SetConfig+0x9a>
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	4a30      	ldr	r2, [pc, #192]	; (8013518 <TIM_Base_SetConfig+0x138>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d00f      	beq.n	801347a <TIM_Base_SetConfig+0x9a>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	4a2f      	ldr	r2, [pc, #188]	; (801351c <TIM_Base_SetConfig+0x13c>)
 801345e:	4293      	cmp	r3, r2
 8013460:	d00b      	beq.n	801347a <TIM_Base_SetConfig+0x9a>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	4a2e      	ldr	r2, [pc, #184]	; (8013520 <TIM_Base_SetConfig+0x140>)
 8013466:	4293      	cmp	r3, r2
 8013468:	d007      	beq.n	801347a <TIM_Base_SetConfig+0x9a>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	4a2d      	ldr	r2, [pc, #180]	; (8013524 <TIM_Base_SetConfig+0x144>)
 801346e:	4293      	cmp	r3, r2
 8013470:	d003      	beq.n	801347a <TIM_Base_SetConfig+0x9a>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	4a2c      	ldr	r2, [pc, #176]	; (8013528 <TIM_Base_SetConfig+0x148>)
 8013476:	4293      	cmp	r3, r2
 8013478:	d108      	bne.n	801348c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	68fa      	ldr	r2, [r7, #12]
 8013488:	4313      	orrs	r3, r2
 801348a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	695b      	ldr	r3, [r3, #20]
 8013496:	4313      	orrs	r3, r2
 8013498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	68fa      	ldr	r2, [r7, #12]
 801349e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	689a      	ldr	r2, [r3, #8]
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	4a16      	ldr	r2, [pc, #88]	; (801350c <TIM_Base_SetConfig+0x12c>)
 80134b4:	4293      	cmp	r3, r2
 80134b6:	d00f      	beq.n	80134d8 <TIM_Base_SetConfig+0xf8>
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	4a18      	ldr	r2, [pc, #96]	; (801351c <TIM_Base_SetConfig+0x13c>)
 80134bc:	4293      	cmp	r3, r2
 80134be:	d00b      	beq.n	80134d8 <TIM_Base_SetConfig+0xf8>
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	4a17      	ldr	r2, [pc, #92]	; (8013520 <TIM_Base_SetConfig+0x140>)
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d007      	beq.n	80134d8 <TIM_Base_SetConfig+0xf8>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	4a16      	ldr	r2, [pc, #88]	; (8013524 <TIM_Base_SetConfig+0x144>)
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d003      	beq.n	80134d8 <TIM_Base_SetConfig+0xf8>
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	4a15      	ldr	r2, [pc, #84]	; (8013528 <TIM_Base_SetConfig+0x148>)
 80134d4:	4293      	cmp	r3, r2
 80134d6:	d103      	bne.n	80134e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	691a      	ldr	r2, [r3, #16]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2201      	movs	r2, #1
 80134e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	691b      	ldr	r3, [r3, #16]
 80134ea:	f003 0301 	and.w	r3, r3, #1
 80134ee:	2b01      	cmp	r3, #1
 80134f0:	d105      	bne.n	80134fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	691b      	ldr	r3, [r3, #16]
 80134f6:	f023 0201 	bic.w	r2, r3, #1
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	611a      	str	r2, [r3, #16]
  }
}
 80134fe:	bf00      	nop
 8013500:	3714      	adds	r7, #20
 8013502:	46bd      	mov	sp, r7
 8013504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013508:	4770      	bx	lr
 801350a:	bf00      	nop
 801350c:	40010000 	.word	0x40010000
 8013510:	40000400 	.word	0x40000400
 8013514:	40000800 	.word	0x40000800
 8013518:	40000c00 	.word	0x40000c00
 801351c:	40010400 	.word	0x40010400
 8013520:	40014000 	.word	0x40014000
 8013524:	40014400 	.word	0x40014400
 8013528:	40014800 	.word	0x40014800

0801352c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801352c:	b480      	push	{r7}
 801352e:	b087      	sub	sp, #28
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6a1b      	ldr	r3, [r3, #32]
 801353a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6a1b      	ldr	r3, [r3, #32]
 8013540:	f023 0201 	bic.w	r2, r3, #1
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	699b      	ldr	r3, [r3, #24]
 8013552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013554:	68fa      	ldr	r2, [r7, #12]
 8013556:	4b37      	ldr	r3, [pc, #220]	; (8013634 <TIM_OC1_SetConfig+0x108>)
 8013558:	4013      	ands	r3, r2
 801355a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	f023 0303 	bic.w	r3, r3, #3
 8013562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	68fa      	ldr	r2, [r7, #12]
 801356a:	4313      	orrs	r3, r2
 801356c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	f023 0302 	bic.w	r3, r3, #2
 8013574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013576:	683b      	ldr	r3, [r7, #0]
 8013578:	689b      	ldr	r3, [r3, #8]
 801357a:	697a      	ldr	r2, [r7, #20]
 801357c:	4313      	orrs	r3, r2
 801357e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	4a2d      	ldr	r2, [pc, #180]	; (8013638 <TIM_OC1_SetConfig+0x10c>)
 8013584:	4293      	cmp	r3, r2
 8013586:	d00f      	beq.n	80135a8 <TIM_OC1_SetConfig+0x7c>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	4a2c      	ldr	r2, [pc, #176]	; (801363c <TIM_OC1_SetConfig+0x110>)
 801358c:	4293      	cmp	r3, r2
 801358e:	d00b      	beq.n	80135a8 <TIM_OC1_SetConfig+0x7c>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	4a2b      	ldr	r2, [pc, #172]	; (8013640 <TIM_OC1_SetConfig+0x114>)
 8013594:	4293      	cmp	r3, r2
 8013596:	d007      	beq.n	80135a8 <TIM_OC1_SetConfig+0x7c>
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	4a2a      	ldr	r2, [pc, #168]	; (8013644 <TIM_OC1_SetConfig+0x118>)
 801359c:	4293      	cmp	r3, r2
 801359e:	d003      	beq.n	80135a8 <TIM_OC1_SetConfig+0x7c>
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	4a29      	ldr	r2, [pc, #164]	; (8013648 <TIM_OC1_SetConfig+0x11c>)
 80135a4:	4293      	cmp	r3, r2
 80135a6:	d10c      	bne.n	80135c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	f023 0308 	bic.w	r3, r3, #8
 80135ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	68db      	ldr	r3, [r3, #12]
 80135b4:	697a      	ldr	r2, [r7, #20]
 80135b6:	4313      	orrs	r3, r2
 80135b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	f023 0304 	bic.w	r3, r3, #4
 80135c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	4a1c      	ldr	r2, [pc, #112]	; (8013638 <TIM_OC1_SetConfig+0x10c>)
 80135c6:	4293      	cmp	r3, r2
 80135c8:	d00f      	beq.n	80135ea <TIM_OC1_SetConfig+0xbe>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	4a1b      	ldr	r2, [pc, #108]	; (801363c <TIM_OC1_SetConfig+0x110>)
 80135ce:	4293      	cmp	r3, r2
 80135d0:	d00b      	beq.n	80135ea <TIM_OC1_SetConfig+0xbe>
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	4a1a      	ldr	r2, [pc, #104]	; (8013640 <TIM_OC1_SetConfig+0x114>)
 80135d6:	4293      	cmp	r3, r2
 80135d8:	d007      	beq.n	80135ea <TIM_OC1_SetConfig+0xbe>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	4a19      	ldr	r2, [pc, #100]	; (8013644 <TIM_OC1_SetConfig+0x118>)
 80135de:	4293      	cmp	r3, r2
 80135e0:	d003      	beq.n	80135ea <TIM_OC1_SetConfig+0xbe>
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	4a18      	ldr	r2, [pc, #96]	; (8013648 <TIM_OC1_SetConfig+0x11c>)
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d111      	bne.n	801360e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80135f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80135f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	695b      	ldr	r3, [r3, #20]
 80135fe:	693a      	ldr	r2, [r7, #16]
 8013600:	4313      	orrs	r3, r2
 8013602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	699b      	ldr	r3, [r3, #24]
 8013608:	693a      	ldr	r2, [r7, #16]
 801360a:	4313      	orrs	r3, r2
 801360c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	693a      	ldr	r2, [r7, #16]
 8013612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	68fa      	ldr	r2, [r7, #12]
 8013618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	685a      	ldr	r2, [r3, #4]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	697a      	ldr	r2, [r7, #20]
 8013626:	621a      	str	r2, [r3, #32]
}
 8013628:	bf00      	nop
 801362a:	371c      	adds	r7, #28
 801362c:	46bd      	mov	sp, r7
 801362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013632:	4770      	bx	lr
 8013634:	fffeff8f 	.word	0xfffeff8f
 8013638:	40010000 	.word	0x40010000
 801363c:	40010400 	.word	0x40010400
 8013640:	40014000 	.word	0x40014000
 8013644:	40014400 	.word	0x40014400
 8013648:	40014800 	.word	0x40014800

0801364c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801364c:	b480      	push	{r7}
 801364e:	b087      	sub	sp, #28
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6a1b      	ldr	r3, [r3, #32]
 801365a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6a1b      	ldr	r3, [r3, #32]
 8013660:	f023 0210 	bic.w	r2, r3, #16
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	685b      	ldr	r3, [r3, #4]
 801366c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	699b      	ldr	r3, [r3, #24]
 8013672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013674:	68fa      	ldr	r2, [r7, #12]
 8013676:	4b34      	ldr	r3, [pc, #208]	; (8013748 <TIM_OC2_SetConfig+0xfc>)
 8013678:	4013      	ands	r3, r2
 801367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	021b      	lsls	r3, r3, #8
 801368a:	68fa      	ldr	r2, [r7, #12]
 801368c:	4313      	orrs	r3, r2
 801368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	f023 0320 	bic.w	r3, r3, #32
 8013696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	011b      	lsls	r3, r3, #4
 801369e:	697a      	ldr	r2, [r7, #20]
 80136a0:	4313      	orrs	r3, r2
 80136a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	4a29      	ldr	r2, [pc, #164]	; (801374c <TIM_OC2_SetConfig+0x100>)
 80136a8:	4293      	cmp	r3, r2
 80136aa:	d003      	beq.n	80136b4 <TIM_OC2_SetConfig+0x68>
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	4a28      	ldr	r2, [pc, #160]	; (8013750 <TIM_OC2_SetConfig+0x104>)
 80136b0:	4293      	cmp	r3, r2
 80136b2:	d10d      	bne.n	80136d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80136ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	68db      	ldr	r3, [r3, #12]
 80136c0:	011b      	lsls	r3, r3, #4
 80136c2:	697a      	ldr	r2, [r7, #20]
 80136c4:	4313      	orrs	r3, r2
 80136c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80136ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	4a1e      	ldr	r2, [pc, #120]	; (801374c <TIM_OC2_SetConfig+0x100>)
 80136d4:	4293      	cmp	r3, r2
 80136d6:	d00f      	beq.n	80136f8 <TIM_OC2_SetConfig+0xac>
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	4a1d      	ldr	r2, [pc, #116]	; (8013750 <TIM_OC2_SetConfig+0x104>)
 80136dc:	4293      	cmp	r3, r2
 80136de:	d00b      	beq.n	80136f8 <TIM_OC2_SetConfig+0xac>
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	4a1c      	ldr	r2, [pc, #112]	; (8013754 <TIM_OC2_SetConfig+0x108>)
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d007      	beq.n	80136f8 <TIM_OC2_SetConfig+0xac>
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	4a1b      	ldr	r2, [pc, #108]	; (8013758 <TIM_OC2_SetConfig+0x10c>)
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d003      	beq.n	80136f8 <TIM_OC2_SetConfig+0xac>
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	4a1a      	ldr	r2, [pc, #104]	; (801375c <TIM_OC2_SetConfig+0x110>)
 80136f4:	4293      	cmp	r3, r2
 80136f6:	d113      	bne.n	8013720 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80136fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013700:	693b      	ldr	r3, [r7, #16]
 8013702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	695b      	ldr	r3, [r3, #20]
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	693a      	ldr	r2, [r7, #16]
 8013710:	4313      	orrs	r3, r2
 8013712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	699b      	ldr	r3, [r3, #24]
 8013718:	009b      	lsls	r3, r3, #2
 801371a:	693a      	ldr	r2, [r7, #16]
 801371c:	4313      	orrs	r3, r2
 801371e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	693a      	ldr	r2, [r7, #16]
 8013724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	68fa      	ldr	r2, [r7, #12]
 801372a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	685a      	ldr	r2, [r3, #4]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	697a      	ldr	r2, [r7, #20]
 8013738:	621a      	str	r2, [r3, #32]
}
 801373a:	bf00      	nop
 801373c:	371c      	adds	r7, #28
 801373e:	46bd      	mov	sp, r7
 8013740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013744:	4770      	bx	lr
 8013746:	bf00      	nop
 8013748:	feff8fff 	.word	0xfeff8fff
 801374c:	40010000 	.word	0x40010000
 8013750:	40010400 	.word	0x40010400
 8013754:	40014000 	.word	0x40014000
 8013758:	40014400 	.word	0x40014400
 801375c:	40014800 	.word	0x40014800

08013760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013760:	b480      	push	{r7}
 8013762:	b087      	sub	sp, #28
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6a1b      	ldr	r3, [r3, #32]
 801376e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	6a1b      	ldr	r3, [r3, #32]
 8013774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	69db      	ldr	r3, [r3, #28]
 8013786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013788:	68fa      	ldr	r2, [r7, #12]
 801378a:	4b33      	ldr	r3, [pc, #204]	; (8013858 <TIM_OC3_SetConfig+0xf8>)
 801378c:	4013      	ands	r3, r2
 801378e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	f023 0303 	bic.w	r3, r3, #3
 8013796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	68fa      	ldr	r2, [r7, #12]
 801379e:	4313      	orrs	r3, r2
 80137a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80137a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	689b      	ldr	r3, [r3, #8]
 80137ae:	021b      	lsls	r3, r3, #8
 80137b0:	697a      	ldr	r2, [r7, #20]
 80137b2:	4313      	orrs	r3, r2
 80137b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	4a28      	ldr	r2, [pc, #160]	; (801385c <TIM_OC3_SetConfig+0xfc>)
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d003      	beq.n	80137c6 <TIM_OC3_SetConfig+0x66>
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	4a27      	ldr	r2, [pc, #156]	; (8013860 <TIM_OC3_SetConfig+0x100>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d10d      	bne.n	80137e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80137cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	68db      	ldr	r3, [r3, #12]
 80137d2:	021b      	lsls	r3, r3, #8
 80137d4:	697a      	ldr	r2, [r7, #20]
 80137d6:	4313      	orrs	r3, r2
 80137d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80137e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	4a1d      	ldr	r2, [pc, #116]	; (801385c <TIM_OC3_SetConfig+0xfc>)
 80137e6:	4293      	cmp	r3, r2
 80137e8:	d00f      	beq.n	801380a <TIM_OC3_SetConfig+0xaa>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4a1c      	ldr	r2, [pc, #112]	; (8013860 <TIM_OC3_SetConfig+0x100>)
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d00b      	beq.n	801380a <TIM_OC3_SetConfig+0xaa>
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4a1b      	ldr	r2, [pc, #108]	; (8013864 <TIM_OC3_SetConfig+0x104>)
 80137f6:	4293      	cmp	r3, r2
 80137f8:	d007      	beq.n	801380a <TIM_OC3_SetConfig+0xaa>
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	4a1a      	ldr	r2, [pc, #104]	; (8013868 <TIM_OC3_SetConfig+0x108>)
 80137fe:	4293      	cmp	r3, r2
 8013800:	d003      	beq.n	801380a <TIM_OC3_SetConfig+0xaa>
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	4a19      	ldr	r2, [pc, #100]	; (801386c <TIM_OC3_SetConfig+0x10c>)
 8013806:	4293      	cmp	r3, r2
 8013808:	d113      	bne.n	8013832 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	695b      	ldr	r3, [r3, #20]
 801381e:	011b      	lsls	r3, r3, #4
 8013820:	693a      	ldr	r2, [r7, #16]
 8013822:	4313      	orrs	r3, r2
 8013824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	699b      	ldr	r3, [r3, #24]
 801382a:	011b      	lsls	r3, r3, #4
 801382c:	693a      	ldr	r2, [r7, #16]
 801382e:	4313      	orrs	r3, r2
 8013830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	693a      	ldr	r2, [r7, #16]
 8013836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	68fa      	ldr	r2, [r7, #12]
 801383c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	685a      	ldr	r2, [r3, #4]
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	697a      	ldr	r2, [r7, #20]
 801384a:	621a      	str	r2, [r3, #32]
}
 801384c:	bf00      	nop
 801384e:	371c      	adds	r7, #28
 8013850:	46bd      	mov	sp, r7
 8013852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013856:	4770      	bx	lr
 8013858:	fffeff8f 	.word	0xfffeff8f
 801385c:	40010000 	.word	0x40010000
 8013860:	40010400 	.word	0x40010400
 8013864:	40014000 	.word	0x40014000
 8013868:	40014400 	.word	0x40014400
 801386c:	40014800 	.word	0x40014800

08013870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013870:	b480      	push	{r7}
 8013872:	b087      	sub	sp, #28
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6a1b      	ldr	r3, [r3, #32]
 801387e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	6a1b      	ldr	r3, [r3, #32]
 8013884:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	69db      	ldr	r3, [r3, #28]
 8013896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013898:	68fa      	ldr	r2, [r7, #12]
 801389a:	4b24      	ldr	r3, [pc, #144]	; (801392c <TIM_OC4_SetConfig+0xbc>)
 801389c:	4013      	ands	r3, r2
 801389e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80138a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	021b      	lsls	r3, r3, #8
 80138ae:	68fa      	ldr	r2, [r7, #12]
 80138b0:	4313      	orrs	r3, r2
 80138b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80138ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	689b      	ldr	r3, [r3, #8]
 80138c0:	031b      	lsls	r3, r3, #12
 80138c2:	693a      	ldr	r2, [r7, #16]
 80138c4:	4313      	orrs	r3, r2
 80138c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	4a19      	ldr	r2, [pc, #100]	; (8013930 <TIM_OC4_SetConfig+0xc0>)
 80138cc:	4293      	cmp	r3, r2
 80138ce:	d00f      	beq.n	80138f0 <TIM_OC4_SetConfig+0x80>
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	4a18      	ldr	r2, [pc, #96]	; (8013934 <TIM_OC4_SetConfig+0xc4>)
 80138d4:	4293      	cmp	r3, r2
 80138d6:	d00b      	beq.n	80138f0 <TIM_OC4_SetConfig+0x80>
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	4a17      	ldr	r2, [pc, #92]	; (8013938 <TIM_OC4_SetConfig+0xc8>)
 80138dc:	4293      	cmp	r3, r2
 80138de:	d007      	beq.n	80138f0 <TIM_OC4_SetConfig+0x80>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	4a16      	ldr	r2, [pc, #88]	; (801393c <TIM_OC4_SetConfig+0xcc>)
 80138e4:	4293      	cmp	r3, r2
 80138e6:	d003      	beq.n	80138f0 <TIM_OC4_SetConfig+0x80>
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	4a15      	ldr	r2, [pc, #84]	; (8013940 <TIM_OC4_SetConfig+0xd0>)
 80138ec:	4293      	cmp	r3, r2
 80138ee:	d109      	bne.n	8013904 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80138f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	695b      	ldr	r3, [r3, #20]
 80138fc:	019b      	lsls	r3, r3, #6
 80138fe:	697a      	ldr	r2, [r7, #20]
 8013900:	4313      	orrs	r3, r2
 8013902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	697a      	ldr	r2, [r7, #20]
 8013908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	68fa      	ldr	r2, [r7, #12]
 801390e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	685a      	ldr	r2, [r3, #4]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	693a      	ldr	r2, [r7, #16]
 801391c:	621a      	str	r2, [r3, #32]
}
 801391e:	bf00      	nop
 8013920:	371c      	adds	r7, #28
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop
 801392c:	feff8fff 	.word	0xfeff8fff
 8013930:	40010000 	.word	0x40010000
 8013934:	40010400 	.word	0x40010400
 8013938:	40014000 	.word	0x40014000
 801393c:	40014400 	.word	0x40014400
 8013940:	40014800 	.word	0x40014800

08013944 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013944:	b480      	push	{r7}
 8013946:	b087      	sub	sp, #28
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6a1b      	ldr	r3, [r3, #32]
 8013952:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6a1b      	ldr	r3, [r3, #32]
 8013958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	685b      	ldr	r3, [r3, #4]
 8013964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801396c:	68fa      	ldr	r2, [r7, #12]
 801396e:	4b21      	ldr	r3, [pc, #132]	; (80139f4 <TIM_OC5_SetConfig+0xb0>)
 8013970:	4013      	ands	r3, r2
 8013972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	68fa      	ldr	r2, [r7, #12]
 801397a:	4313      	orrs	r3, r2
 801397c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013984:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	689b      	ldr	r3, [r3, #8]
 801398a:	041b      	lsls	r3, r3, #16
 801398c:	693a      	ldr	r2, [r7, #16]
 801398e:	4313      	orrs	r3, r2
 8013990:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	4a18      	ldr	r2, [pc, #96]	; (80139f8 <TIM_OC5_SetConfig+0xb4>)
 8013996:	4293      	cmp	r3, r2
 8013998:	d00f      	beq.n	80139ba <TIM_OC5_SetConfig+0x76>
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	4a17      	ldr	r2, [pc, #92]	; (80139fc <TIM_OC5_SetConfig+0xb8>)
 801399e:	4293      	cmp	r3, r2
 80139a0:	d00b      	beq.n	80139ba <TIM_OC5_SetConfig+0x76>
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	4a16      	ldr	r2, [pc, #88]	; (8013a00 <TIM_OC5_SetConfig+0xbc>)
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d007      	beq.n	80139ba <TIM_OC5_SetConfig+0x76>
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	4a15      	ldr	r2, [pc, #84]	; (8013a04 <TIM_OC5_SetConfig+0xc0>)
 80139ae:	4293      	cmp	r3, r2
 80139b0:	d003      	beq.n	80139ba <TIM_OC5_SetConfig+0x76>
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	4a14      	ldr	r2, [pc, #80]	; (8013a08 <TIM_OC5_SetConfig+0xc4>)
 80139b6:	4293      	cmp	r3, r2
 80139b8:	d109      	bne.n	80139ce <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80139c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80139c2:	683b      	ldr	r3, [r7, #0]
 80139c4:	695b      	ldr	r3, [r3, #20]
 80139c6:	021b      	lsls	r3, r3, #8
 80139c8:	697a      	ldr	r2, [r7, #20]
 80139ca:	4313      	orrs	r3, r2
 80139cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	697a      	ldr	r2, [r7, #20]
 80139d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	68fa      	ldr	r2, [r7, #12]
 80139d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	685a      	ldr	r2, [r3, #4]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	693a      	ldr	r2, [r7, #16]
 80139e6:	621a      	str	r2, [r3, #32]
}
 80139e8:	bf00      	nop
 80139ea:	371c      	adds	r7, #28
 80139ec:	46bd      	mov	sp, r7
 80139ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f2:	4770      	bx	lr
 80139f4:	fffeff8f 	.word	0xfffeff8f
 80139f8:	40010000 	.word	0x40010000
 80139fc:	40010400 	.word	0x40010400
 8013a00:	40014000 	.word	0x40014000
 8013a04:	40014400 	.word	0x40014400
 8013a08:	40014800 	.word	0x40014800

08013a0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b087      	sub	sp, #28
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
 8013a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	6a1b      	ldr	r3, [r3, #32]
 8013a1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	6a1b      	ldr	r3, [r3, #32]
 8013a20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013a34:	68fa      	ldr	r2, [r7, #12]
 8013a36:	4b22      	ldr	r3, [pc, #136]	; (8013ac0 <TIM_OC6_SetConfig+0xb4>)
 8013a38:	4013      	ands	r3, r2
 8013a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	021b      	lsls	r3, r3, #8
 8013a42:	68fa      	ldr	r2, [r7, #12]
 8013a44:	4313      	orrs	r3, r2
 8013a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013a50:	683b      	ldr	r3, [r7, #0]
 8013a52:	689b      	ldr	r3, [r3, #8]
 8013a54:	051b      	lsls	r3, r3, #20
 8013a56:	693a      	ldr	r2, [r7, #16]
 8013a58:	4313      	orrs	r3, r2
 8013a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	4a19      	ldr	r2, [pc, #100]	; (8013ac4 <TIM_OC6_SetConfig+0xb8>)
 8013a60:	4293      	cmp	r3, r2
 8013a62:	d00f      	beq.n	8013a84 <TIM_OC6_SetConfig+0x78>
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	4a18      	ldr	r2, [pc, #96]	; (8013ac8 <TIM_OC6_SetConfig+0xbc>)
 8013a68:	4293      	cmp	r3, r2
 8013a6a:	d00b      	beq.n	8013a84 <TIM_OC6_SetConfig+0x78>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4a17      	ldr	r2, [pc, #92]	; (8013acc <TIM_OC6_SetConfig+0xc0>)
 8013a70:	4293      	cmp	r3, r2
 8013a72:	d007      	beq.n	8013a84 <TIM_OC6_SetConfig+0x78>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	4a16      	ldr	r2, [pc, #88]	; (8013ad0 <TIM_OC6_SetConfig+0xc4>)
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	d003      	beq.n	8013a84 <TIM_OC6_SetConfig+0x78>
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	4a15      	ldr	r2, [pc, #84]	; (8013ad4 <TIM_OC6_SetConfig+0xc8>)
 8013a80:	4293      	cmp	r3, r2
 8013a82:	d109      	bne.n	8013a98 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	695b      	ldr	r3, [r3, #20]
 8013a90:	029b      	lsls	r3, r3, #10
 8013a92:	697a      	ldr	r2, [r7, #20]
 8013a94:	4313      	orrs	r3, r2
 8013a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	697a      	ldr	r2, [r7, #20]
 8013a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	68fa      	ldr	r2, [r7, #12]
 8013aa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	685a      	ldr	r2, [r3, #4]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	693a      	ldr	r2, [r7, #16]
 8013ab0:	621a      	str	r2, [r3, #32]
}
 8013ab2:	bf00      	nop
 8013ab4:	371c      	adds	r7, #28
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abc:	4770      	bx	lr
 8013abe:	bf00      	nop
 8013ac0:	feff8fff 	.word	0xfeff8fff
 8013ac4:	40010000 	.word	0x40010000
 8013ac8:	40010400 	.word	0x40010400
 8013acc:	40014000 	.word	0x40014000
 8013ad0:	40014400 	.word	0x40014400
 8013ad4:	40014800 	.word	0x40014800

08013ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b087      	sub	sp, #28
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	60f8      	str	r0, [r7, #12]
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	6a1b      	ldr	r3, [r3, #32]
 8013ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	6a1b      	ldr	r3, [r3, #32]
 8013aee:	f023 0201 	bic.w	r2, r3, #1
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	699b      	ldr	r3, [r3, #24]
 8013afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	011b      	lsls	r3, r3, #4
 8013b08:	693a      	ldr	r2, [r7, #16]
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	f023 030a 	bic.w	r3, r3, #10
 8013b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013b16:	697a      	ldr	r2, [r7, #20]
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	693a      	ldr	r2, [r7, #16]
 8013b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	697a      	ldr	r2, [r7, #20]
 8013b28:	621a      	str	r2, [r3, #32]
}
 8013b2a:	bf00      	nop
 8013b2c:	371c      	adds	r7, #28
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b34:	4770      	bx	lr

08013b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013b36:	b480      	push	{r7}
 8013b38:	b087      	sub	sp, #28
 8013b3a:	af00      	add	r7, sp, #0
 8013b3c:	60f8      	str	r0, [r7, #12]
 8013b3e:	60b9      	str	r1, [r7, #8]
 8013b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	6a1b      	ldr	r3, [r3, #32]
 8013b46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	6a1b      	ldr	r3, [r3, #32]
 8013b4c:	f023 0210 	bic.w	r2, r3, #16
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	699b      	ldr	r3, [r3, #24]
 8013b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	031b      	lsls	r3, r3, #12
 8013b66:	693a      	ldr	r2, [r7, #16]
 8013b68:	4313      	orrs	r3, r2
 8013b6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013b72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	011b      	lsls	r3, r3, #4
 8013b78:	697a      	ldr	r2, [r7, #20]
 8013b7a:	4313      	orrs	r3, r2
 8013b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	693a      	ldr	r2, [r7, #16]
 8013b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	697a      	ldr	r2, [r7, #20]
 8013b88:	621a      	str	r2, [r3, #32]
}
 8013b8a:	bf00      	nop
 8013b8c:	371c      	adds	r7, #28
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b94:	4770      	bx	lr
	...

08013b98 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b085      	sub	sp, #20
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	689b      	ldr	r3, [r3, #8]
 8013ba6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	4b09      	ldr	r3, [pc, #36]	; (8013bd0 <TIM_ITRx_SetConfig+0x38>)
 8013bac:	4013      	ands	r3, r2
 8013bae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013bb0:	683a      	ldr	r2, [r7, #0]
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	4313      	orrs	r3, r2
 8013bb6:	f043 0307 	orr.w	r3, r3, #7
 8013bba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	68fa      	ldr	r2, [r7, #12]
 8013bc0:	609a      	str	r2, [r3, #8]
}
 8013bc2:	bf00      	nop
 8013bc4:	3714      	adds	r7, #20
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bcc:	4770      	bx	lr
 8013bce:	bf00      	nop
 8013bd0:	ffcfff8f 	.word	0xffcfff8f

08013bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b087      	sub	sp, #28
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	60f8      	str	r0, [r7, #12]
 8013bdc:	60b9      	str	r1, [r7, #8]
 8013bde:	607a      	str	r2, [r7, #4]
 8013be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	689b      	ldr	r3, [r3, #8]
 8013be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	021a      	lsls	r2, r3, #8
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	431a      	orrs	r2, r3
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	4313      	orrs	r3, r2
 8013bfc:	697a      	ldr	r2, [r7, #20]
 8013bfe:	4313      	orrs	r3, r2
 8013c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	697a      	ldr	r2, [r7, #20]
 8013c06:	609a      	str	r2, [r3, #8]
}
 8013c08:	bf00      	nop
 8013c0a:	371c      	adds	r7, #28
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c12:	4770      	bx	lr

08013c14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013c14:	b480      	push	{r7}
 8013c16:	b087      	sub	sp, #28
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	60f8      	str	r0, [r7, #12]
 8013c1c:	60b9      	str	r1, [r7, #8]
 8013c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	f003 031f 	and.w	r3, r3, #31
 8013c26:	2201      	movs	r2, #1
 8013c28:	fa02 f303 	lsl.w	r3, r2, r3
 8013c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	6a1a      	ldr	r2, [r3, #32]
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	43db      	mvns	r3, r3
 8013c36:	401a      	ands	r2, r3
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	6a1a      	ldr	r2, [r3, #32]
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	f003 031f 	and.w	r3, r3, #31
 8013c46:	6879      	ldr	r1, [r7, #4]
 8013c48:	fa01 f303 	lsl.w	r3, r1, r3
 8013c4c:	431a      	orrs	r2, r3
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	621a      	str	r2, [r3, #32]
}
 8013c52:	bf00      	nop
 8013c54:	371c      	adds	r7, #28
 8013c56:	46bd      	mov	sp, r7
 8013c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5c:	4770      	bx	lr
	...

08013c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b085      	sub	sp, #20
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013c70:	2b01      	cmp	r3, #1
 8013c72:	d101      	bne.n	8013c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013c74:	2302      	movs	r3, #2
 8013c76:	e06d      	b.n	8013d54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2202      	movs	r2, #2
 8013c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	689b      	ldr	r3, [r3, #8]
 8013c96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	4a30      	ldr	r2, [pc, #192]	; (8013d60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013c9e:	4293      	cmp	r3, r2
 8013ca0:	d004      	beq.n	8013cac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	4a2f      	ldr	r2, [pc, #188]	; (8013d64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013ca8:	4293      	cmp	r3, r2
 8013caa:	d108      	bne.n	8013cbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013cb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	68fa      	ldr	r2, [r7, #12]
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013cc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	68fa      	ldr	r2, [r7, #12]
 8013ccc:	4313      	orrs	r3, r2
 8013cce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	68fa      	ldr	r2, [r7, #12]
 8013cd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	4a20      	ldr	r2, [pc, #128]	; (8013d60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d022      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013cea:	d01d      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4a1d      	ldr	r2, [pc, #116]	; (8013d68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d018      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	4a1c      	ldr	r2, [pc, #112]	; (8013d6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	d013      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	4a1a      	ldr	r2, [pc, #104]	; (8013d70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d00e      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	4a15      	ldr	r2, [pc, #84]	; (8013d64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013d10:	4293      	cmp	r3, r2
 8013d12:	d009      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	4a16      	ldr	r2, [pc, #88]	; (8013d74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013d1a:	4293      	cmp	r3, r2
 8013d1c:	d004      	beq.n	8013d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	4a15      	ldr	r2, [pc, #84]	; (8013d78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013d24:	4293      	cmp	r3, r2
 8013d26:	d10c      	bne.n	8013d42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013d2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	689b      	ldr	r3, [r3, #8]
 8013d34:	68ba      	ldr	r2, [r7, #8]
 8013d36:	4313      	orrs	r3, r2
 8013d38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	68ba      	ldr	r2, [r7, #8]
 8013d40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2201      	movs	r2, #1
 8013d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013d52:	2300      	movs	r3, #0
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3714      	adds	r7, #20
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5e:	4770      	bx	lr
 8013d60:	40010000 	.word	0x40010000
 8013d64:	40010400 	.word	0x40010400
 8013d68:	40000400 	.word	0x40000400
 8013d6c:	40000800 	.word	0x40000800
 8013d70:	40000c00 	.word	0x40000c00
 8013d74:	40001800 	.word	0x40001800
 8013d78:	40014000 	.word	0x40014000

08013d7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b085      	sub	sp, #20
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013d86:	2300      	movs	r3, #0
 8013d88:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d101      	bne.n	8013d98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013d94:	2302      	movs	r3, #2
 8013d96:	e065      	b.n	8013e64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	4313      	orrs	r3, r2
 8013dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	689b      	ldr	r3, [r3, #8]
 8013db8:	4313      	orrs	r3, r2
 8013dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	685b      	ldr	r3, [r3, #4]
 8013dc6:	4313      	orrs	r3, r2
 8013dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013dd0:	683b      	ldr	r3, [r7, #0]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	4313      	orrs	r3, r2
 8013dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	691b      	ldr	r3, [r3, #16]
 8013de2:	4313      	orrs	r3, r2
 8013de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	695b      	ldr	r3, [r3, #20]
 8013df0:	4313      	orrs	r3, r2
 8013df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dfe:	4313      	orrs	r3, r2
 8013e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	699b      	ldr	r3, [r3, #24]
 8013e0c:	041b      	lsls	r3, r3, #16
 8013e0e:	4313      	orrs	r3, r2
 8013e10:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	4a16      	ldr	r2, [pc, #88]	; (8013e70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	d004      	beq.n	8013e26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	4a14      	ldr	r2, [pc, #80]	; (8013e74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013e22:	4293      	cmp	r3, r2
 8013e24:	d115      	bne.n	8013e52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e30:	051b      	lsls	r3, r3, #20
 8013e32:	4313      	orrs	r3, r2
 8013e34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	69db      	ldr	r3, [r3, #28]
 8013e40:	4313      	orrs	r3, r2
 8013e42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	6a1b      	ldr	r3, [r3, #32]
 8013e4e:	4313      	orrs	r3, r2
 8013e50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	68fa      	ldr	r2, [r7, #12]
 8013e58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013e62:	2300      	movs	r3, #0
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3714      	adds	r7, #20
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr
 8013e70:	40010000 	.word	0x40010000
 8013e74:	40010400 	.word	0x40010400

08013e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013e78:	b480      	push	{r7}
 8013e7a:	b083      	sub	sp, #12
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013e80:	bf00      	nop
 8013e82:	370c      	adds	r7, #12
 8013e84:	46bd      	mov	sp, r7
 8013e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8a:	4770      	bx	lr

08013e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	b083      	sub	sp, #12
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013e94:	bf00      	nop
 8013e96:	370c      	adds	r7, #12
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr

08013ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b083      	sub	sp, #12
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013ea8:	bf00      	nop
 8013eaa:	370c      	adds	r7, #12
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d101      	bne.n	8013ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	e042      	b.n	8013f4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d106      	bne.n	8013ede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	f7f1 f8c1 	bl	8005060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2224      	movs	r2, #36	; 0x24
 8013ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	681a      	ldr	r2, [r3, #0]
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	f022 0201 	bic.w	r2, r2, #1
 8013ef4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d002      	beq.n	8013f04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f001 fbc2 	bl	8015688 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f000 fe57 	bl	8014bb8 <UART_SetConfig>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	2b01      	cmp	r3, #1
 8013f0e:	d101      	bne.n	8013f14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013f10:	2301      	movs	r3, #1
 8013f12:	e01b      	b.n	8013f4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	685a      	ldr	r2, [r3, #4]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	689a      	ldr	r2, [r3, #8]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	681a      	ldr	r2, [r3, #0]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	f042 0201 	orr.w	r2, r2, #1
 8013f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f001 fc41 	bl	80157cc <UART_CheckIdleState>
 8013f4a:	4603      	mov	r3, r0
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3708      	adds	r7, #8
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}

08013f54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b08a      	sub	sp, #40	; 0x28
 8013f58:	af02      	add	r7, sp, #8
 8013f5a:	60f8      	str	r0, [r7, #12]
 8013f5c:	60b9      	str	r1, [r7, #8]
 8013f5e:	603b      	str	r3, [r7, #0]
 8013f60:	4613      	mov	r3, r2
 8013f62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f6a:	2b20      	cmp	r3, #32
 8013f6c:	d17b      	bne.n	8014066 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d002      	beq.n	8013f7a <HAL_UART_Transmit+0x26>
 8013f74:	88fb      	ldrh	r3, [r7, #6]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d101      	bne.n	8013f7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	e074      	b.n	8014068 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	2200      	movs	r2, #0
 8013f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	2221      	movs	r2, #33	; 0x21
 8013f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013f8e:	f7f1 fcb5 	bl	80058fc <HAL_GetTick>
 8013f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	88fa      	ldrh	r2, [r7, #6]
 8013f98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	88fa      	ldrh	r2, [r7, #6]
 8013fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	689b      	ldr	r3, [r3, #8]
 8013fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013fac:	d108      	bne.n	8013fc0 <HAL_UART_Transmit+0x6c>
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	691b      	ldr	r3, [r3, #16]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d104      	bne.n	8013fc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	61bb      	str	r3, [r7, #24]
 8013fbe:	e003      	b.n	8013fc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013fc8:	e030      	b.n	801402c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	9300      	str	r3, [sp, #0]
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	2180      	movs	r1, #128	; 0x80
 8013fd4:	68f8      	ldr	r0, [r7, #12]
 8013fd6:	f001 fca3 	bl	8015920 <UART_WaitOnFlagUntilTimeout>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d005      	beq.n	8013fec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	2220      	movs	r2, #32
 8013fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8013fe8:	2303      	movs	r3, #3
 8013fea:	e03d      	b.n	8014068 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013fec:	69fb      	ldr	r3, [r7, #28]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d10b      	bne.n	801400a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013ff2:	69bb      	ldr	r3, [r7, #24]
 8013ff4:	881b      	ldrh	r3, [r3, #0]
 8013ff6:	461a      	mov	r2, r3
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014000:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	3302      	adds	r3, #2
 8014006:	61bb      	str	r3, [r7, #24]
 8014008:	e007      	b.n	801401a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801400a:	69fb      	ldr	r3, [r7, #28]
 801400c:	781a      	ldrb	r2, [r3, #0]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8014014:	69fb      	ldr	r3, [r7, #28]
 8014016:	3301      	adds	r3, #1
 8014018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014020:	b29b      	uxth	r3, r3
 8014022:	3b01      	subs	r3, #1
 8014024:	b29a      	uxth	r2, r3
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014032:	b29b      	uxth	r3, r3
 8014034:	2b00      	cmp	r3, #0
 8014036:	d1c8      	bne.n	8013fca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	9300      	str	r3, [sp, #0]
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	2200      	movs	r2, #0
 8014040:	2140      	movs	r1, #64	; 0x40
 8014042:	68f8      	ldr	r0, [r7, #12]
 8014044:	f001 fc6c 	bl	8015920 <UART_WaitOnFlagUntilTimeout>
 8014048:	4603      	mov	r3, r0
 801404a:	2b00      	cmp	r3, #0
 801404c:	d005      	beq.n	801405a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2220      	movs	r2, #32
 8014052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8014056:	2303      	movs	r3, #3
 8014058:	e006      	b.n	8014068 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	2220      	movs	r2, #32
 801405e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8014062:	2300      	movs	r3, #0
 8014064:	e000      	b.n	8014068 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8014066:	2302      	movs	r3, #2
  }
}
 8014068:	4618      	mov	r0, r3
 801406a:	3720      	adds	r7, #32
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}

08014070 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b08a      	sub	sp, #40	; 0x28
 8014074:	af02      	add	r7, sp, #8
 8014076:	60f8      	str	r0, [r7, #12]
 8014078:	60b9      	str	r1, [r7, #8]
 801407a:	603b      	str	r3, [r7, #0]
 801407c:	4613      	mov	r3, r2
 801407e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014086:	2b20      	cmp	r3, #32
 8014088:	f040 80b5 	bne.w	80141f6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d002      	beq.n	8014098 <HAL_UART_Receive+0x28>
 8014092:	88fb      	ldrh	r3, [r7, #6]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d101      	bne.n	801409c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8014098:	2301      	movs	r3, #1
 801409a:	e0ad      	b.n	80141f8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	2200      	movs	r2, #0
 80140a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	2222      	movs	r2, #34	; 0x22
 80140a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	2200      	movs	r2, #0
 80140b0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80140b2:	f7f1 fc23 	bl	80058fc <HAL_GetTick>
 80140b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	88fa      	ldrh	r2, [r7, #6]
 80140bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	88fa      	ldrh	r2, [r7, #6]
 80140c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	689b      	ldr	r3, [r3, #8]
 80140cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80140d0:	d10e      	bne.n	80140f0 <HAL_UART_Receive+0x80>
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	691b      	ldr	r3, [r3, #16]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d105      	bne.n	80140e6 <HAL_UART_Receive+0x76>
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80140e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140e4:	e02d      	b.n	8014142 <HAL_UART_Receive+0xd2>
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	22ff      	movs	r2, #255	; 0xff
 80140ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80140ee:	e028      	b.n	8014142 <HAL_UART_Receive+0xd2>
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	689b      	ldr	r3, [r3, #8]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d10d      	bne.n	8014114 <HAL_UART_Receive+0xa4>
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	691b      	ldr	r3, [r3, #16]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d104      	bne.n	801410a <HAL_UART_Receive+0x9a>
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	22ff      	movs	r2, #255	; 0xff
 8014104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014108:	e01b      	b.n	8014142 <HAL_UART_Receive+0xd2>
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	227f      	movs	r2, #127	; 0x7f
 801410e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014112:	e016      	b.n	8014142 <HAL_UART_Receive+0xd2>
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	689b      	ldr	r3, [r3, #8]
 8014118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801411c:	d10d      	bne.n	801413a <HAL_UART_Receive+0xca>
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	691b      	ldr	r3, [r3, #16]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d104      	bne.n	8014130 <HAL_UART_Receive+0xc0>
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	227f      	movs	r2, #127	; 0x7f
 801412a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801412e:	e008      	b.n	8014142 <HAL_UART_Receive+0xd2>
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	223f      	movs	r2, #63	; 0x3f
 8014134:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014138:	e003      	b.n	8014142 <HAL_UART_Receive+0xd2>
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	2200      	movs	r2, #0
 801413e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014148:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	689b      	ldr	r3, [r3, #8]
 801414e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014152:	d108      	bne.n	8014166 <HAL_UART_Receive+0xf6>
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	691b      	ldr	r3, [r3, #16]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d104      	bne.n	8014166 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801415c:	2300      	movs	r3, #0
 801415e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	61bb      	str	r3, [r7, #24]
 8014164:	e003      	b.n	801416e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801416a:	2300      	movs	r3, #0
 801416c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801416e:	e036      	b.n	80141de <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	9300      	str	r3, [sp, #0]
 8014174:	697b      	ldr	r3, [r7, #20]
 8014176:	2200      	movs	r2, #0
 8014178:	2120      	movs	r1, #32
 801417a:	68f8      	ldr	r0, [r7, #12]
 801417c:	f001 fbd0 	bl	8015920 <UART_WaitOnFlagUntilTimeout>
 8014180:	4603      	mov	r3, r0
 8014182:	2b00      	cmp	r3, #0
 8014184:	d005      	beq.n	8014192 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	2220      	movs	r2, #32
 801418a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 801418e:	2303      	movs	r3, #3
 8014190:	e032      	b.n	80141f8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8014192:	69fb      	ldr	r3, [r7, #28]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d10c      	bne.n	80141b2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801419e:	b29a      	uxth	r2, r3
 80141a0:	8a7b      	ldrh	r3, [r7, #18]
 80141a2:	4013      	ands	r3, r2
 80141a4:	b29a      	uxth	r2, r3
 80141a6:	69bb      	ldr	r3, [r7, #24]
 80141a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80141aa:	69bb      	ldr	r3, [r7, #24]
 80141ac:	3302      	adds	r3, #2
 80141ae:	61bb      	str	r3, [r7, #24]
 80141b0:	e00c      	b.n	80141cc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b8:	b2da      	uxtb	r2, r3
 80141ba:	8a7b      	ldrh	r3, [r7, #18]
 80141bc:	b2db      	uxtb	r3, r3
 80141be:	4013      	ands	r3, r2
 80141c0:	b2da      	uxtb	r2, r3
 80141c2:	69fb      	ldr	r3, [r7, #28]
 80141c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80141c6:	69fb      	ldr	r3, [r7, #28]
 80141c8:	3301      	adds	r3, #1
 80141ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	3b01      	subs	r3, #1
 80141d6:	b29a      	uxth	r2, r3
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d1c2      	bne.n	8014170 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2220      	movs	r2, #32
 80141ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80141f2:	2300      	movs	r3, #0
 80141f4:	e000      	b.n	80141f8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80141f6:	2302      	movs	r3, #2
  }
}
 80141f8:	4618      	mov	r0, r3
 80141fa:	3720      	adds	r7, #32
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bd80      	pop	{r7, pc}

08014200 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b08a      	sub	sp, #40	; 0x28
 8014204:	af00      	add	r7, sp, #0
 8014206:	60f8      	str	r0, [r7, #12]
 8014208:	60b9      	str	r1, [r7, #8]
 801420a:	4613      	mov	r3, r2
 801420c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014214:	2b20      	cmp	r3, #32
 8014216:	d137      	bne.n	8014288 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d002      	beq.n	8014224 <HAL_UART_Receive_IT+0x24>
 801421e:	88fb      	ldrh	r3, [r7, #6]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d101      	bne.n	8014228 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014224:	2301      	movs	r3, #1
 8014226:	e030      	b.n	801428a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2200      	movs	r2, #0
 801422c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	4a18      	ldr	r2, [pc, #96]	; (8014294 <HAL_UART_Receive_IT+0x94>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d01f      	beq.n	8014278 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014242:	2b00      	cmp	r3, #0
 8014244:	d018      	beq.n	8014278 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	e853 3f00 	ldrex	r3, [r3]
 8014252:	613b      	str	r3, [r7, #16]
   return(result);
 8014254:	693b      	ldr	r3, [r7, #16]
 8014256:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801425a:	627b      	str	r3, [r7, #36]	; 0x24
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	461a      	mov	r2, r3
 8014262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014264:	623b      	str	r3, [r7, #32]
 8014266:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014268:	69f9      	ldr	r1, [r7, #28]
 801426a:	6a3a      	ldr	r2, [r7, #32]
 801426c:	e841 2300 	strex	r3, r2, [r1]
 8014270:	61bb      	str	r3, [r7, #24]
   return(result);
 8014272:	69bb      	ldr	r3, [r7, #24]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d1e6      	bne.n	8014246 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014278:	88fb      	ldrh	r3, [r7, #6]
 801427a:	461a      	mov	r2, r3
 801427c:	68b9      	ldr	r1, [r7, #8]
 801427e:	68f8      	ldr	r0, [r7, #12]
 8014280:	f001 fbbc 	bl	80159fc <UART_Start_Receive_IT>
 8014284:	4603      	mov	r3, r0
 8014286:	e000      	b.n	801428a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014288:	2302      	movs	r3, #2
  }
}
 801428a:	4618      	mov	r0, r3
 801428c:	3728      	adds	r7, #40	; 0x28
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
 8014292:	bf00      	nop
 8014294:	58000c00 	.word	0x58000c00

08014298 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b09a      	sub	sp, #104	; 0x68
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142a8:	e853 3f00 	ldrex	r3, [r3]
 80142ac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80142ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80142b4:	667b      	str	r3, [r7, #100]	; 0x64
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	461a      	mov	r2, r3
 80142bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80142be:	657b      	str	r3, [r7, #84]	; 0x54
 80142c0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80142c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80142c6:	e841 2300 	strex	r3, r2, [r1]
 80142ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80142cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d1e6      	bne.n	80142a0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	3308      	adds	r3, #8
 80142d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142dc:	e853 3f00 	ldrex	r3, [r3]
 80142e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80142e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142e4:	4b46      	ldr	r3, [pc, #280]	; (8014400 <HAL_UART_AbortReceive+0x168>)
 80142e6:	4013      	ands	r3, r2
 80142e8:	663b      	str	r3, [r7, #96]	; 0x60
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	3308      	adds	r3, #8
 80142f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80142f2:	643a      	str	r2, [r7, #64]	; 0x40
 80142f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80142f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80142fa:	e841 2300 	strex	r3, r2, [r1]
 80142fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014302:	2b00      	cmp	r3, #0
 8014304:	d1e5      	bne.n	80142d2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801430a:	2b01      	cmp	r3, #1
 801430c:	d118      	bne.n	8014340 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014314:	6a3b      	ldr	r3, [r7, #32]
 8014316:	e853 3f00 	ldrex	r3, [r3]
 801431a:	61fb      	str	r3, [r7, #28]
   return(result);
 801431c:	69fb      	ldr	r3, [r7, #28]
 801431e:	f023 0310 	bic.w	r3, r3, #16
 8014322:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	461a      	mov	r2, r3
 801432a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801432c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801432e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014334:	e841 2300 	strex	r3, r2, [r1]
 8014338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433c:	2b00      	cmp	r3, #0
 801433e:	d1e6      	bne.n	801430e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	689b      	ldr	r3, [r3, #8]
 8014346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801434a:	2b40      	cmp	r3, #64	; 0x40
 801434c:	d13b      	bne.n	80143c6 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	3308      	adds	r3, #8
 8014354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	e853 3f00 	ldrex	r3, [r3]
 801435c:	60bb      	str	r3, [r7, #8]
   return(result);
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014364:	65bb      	str	r3, [r7, #88]	; 0x58
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	3308      	adds	r3, #8
 801436c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801436e:	61ba      	str	r2, [r7, #24]
 8014370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014372:	6979      	ldr	r1, [r7, #20]
 8014374:	69ba      	ldr	r2, [r7, #24]
 8014376:	e841 2300 	strex	r3, r2, [r1]
 801437a:	613b      	str	r3, [r7, #16]
   return(result);
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d1e5      	bne.n	801434e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014388:	2b00      	cmp	r3, #0
 801438a:	d01c      	beq.n	80143c6 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014392:	2200      	movs	r2, #0
 8014394:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801439c:	4618      	mov	r0, r3
 801439e:	f7f4 fa13 	bl	80087c8 <HAL_DMA_Abort>
 80143a2:	4603      	mov	r3, r0
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d00e      	beq.n	80143c6 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f5 fea6 	bl	800a100 <HAL_DMA_GetError>
 80143b4:	4603      	mov	r3, r0
 80143b6:	2b20      	cmp	r3, #32
 80143b8:	d105      	bne.n	80143c6 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	2210      	movs	r2, #16
 80143be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80143c2:	2303      	movs	r3, #3
 80143c4:	e017      	b.n	80143f6 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2200      	movs	r2, #0
 80143ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	220f      	movs	r2, #15
 80143d4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	699a      	ldr	r2, [r3, #24]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	f042 0208 	orr.w	r2, r2, #8
 80143e4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2220      	movs	r2, #32
 80143ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	2200      	movs	r2, #0
 80143f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80143f4:	2300      	movs	r3, #0
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3768      	adds	r7, #104	; 0x68
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	effffffe 	.word	0xeffffffe

08014404 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b0ba      	sub	sp, #232	; 0xe8
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	69db      	ldr	r3, [r3, #28]
 8014412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	689b      	ldr	r3, [r3, #8]
 8014426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801442a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801442e:	f640 030f 	movw	r3, #2063	; 0x80f
 8014432:	4013      	ands	r3, r2
 8014434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801443c:	2b00      	cmp	r3, #0
 801443e:	d11b      	bne.n	8014478 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014444:	f003 0320 	and.w	r3, r3, #32
 8014448:	2b00      	cmp	r3, #0
 801444a:	d015      	beq.n	8014478 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014450:	f003 0320 	and.w	r3, r3, #32
 8014454:	2b00      	cmp	r3, #0
 8014456:	d105      	bne.n	8014464 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801445c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014460:	2b00      	cmp	r3, #0
 8014462:	d009      	beq.n	8014478 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014468:	2b00      	cmp	r3, #0
 801446a:	f000 8377 	beq.w	8014b5c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	4798      	blx	r3
      }
      return;
 8014476:	e371      	b.n	8014b5c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801447c:	2b00      	cmp	r3, #0
 801447e:	f000 8123 	beq.w	80146c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8014482:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014486:	4b8d      	ldr	r3, [pc, #564]	; (80146bc <HAL_UART_IRQHandler+0x2b8>)
 8014488:	4013      	ands	r3, r2
 801448a:	2b00      	cmp	r3, #0
 801448c:	d106      	bne.n	801449c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801448e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014492:	4b8b      	ldr	r3, [pc, #556]	; (80146c0 <HAL_UART_IRQHandler+0x2bc>)
 8014494:	4013      	ands	r3, r2
 8014496:	2b00      	cmp	r3, #0
 8014498:	f000 8116 	beq.w	80146c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144a0:	f003 0301 	and.w	r3, r3, #1
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d011      	beq.n	80144cc <HAL_UART_IRQHandler+0xc8>
 80144a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d00b      	beq.n	80144cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2201      	movs	r2, #1
 80144ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144c2:	f043 0201 	orr.w	r2, r3, #1
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80144cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144d0:	f003 0302 	and.w	r3, r3, #2
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d011      	beq.n	80144fc <HAL_UART_IRQHandler+0xf8>
 80144d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80144dc:	f003 0301 	and.w	r3, r3, #1
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d00b      	beq.n	80144fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	2202      	movs	r2, #2
 80144ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144f2:	f043 0204 	orr.w	r2, r3, #4
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80144fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014500:	f003 0304 	and.w	r3, r3, #4
 8014504:	2b00      	cmp	r3, #0
 8014506:	d011      	beq.n	801452c <HAL_UART_IRQHandler+0x128>
 8014508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801450c:	f003 0301 	and.w	r3, r3, #1
 8014510:	2b00      	cmp	r3, #0
 8014512:	d00b      	beq.n	801452c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	2204      	movs	r2, #4
 801451a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014522:	f043 0202 	orr.w	r2, r3, #2
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801452c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014530:	f003 0308 	and.w	r3, r3, #8
 8014534:	2b00      	cmp	r3, #0
 8014536:	d017      	beq.n	8014568 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801453c:	f003 0320 	and.w	r3, r3, #32
 8014540:	2b00      	cmp	r3, #0
 8014542:	d105      	bne.n	8014550 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014544:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014548:	4b5c      	ldr	r3, [pc, #368]	; (80146bc <HAL_UART_IRQHandler+0x2b8>)
 801454a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801454c:	2b00      	cmp	r3, #0
 801454e:	d00b      	beq.n	8014568 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	2208      	movs	r2, #8
 8014556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801455e:	f043 0208 	orr.w	r2, r3, #8
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801456c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014570:	2b00      	cmp	r3, #0
 8014572:	d012      	beq.n	801459a <HAL_UART_IRQHandler+0x196>
 8014574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014578:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801457c:	2b00      	cmp	r3, #0
 801457e:	d00c      	beq.n	801459a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014588:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014590:	f043 0220 	orr.w	r2, r3, #32
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	f000 82dd 	beq.w	8014b60 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80145a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80145aa:	f003 0320 	and.w	r3, r3, #32
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d013      	beq.n	80145da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80145b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80145b6:	f003 0320 	and.w	r3, r3, #32
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d105      	bne.n	80145ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80145be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80145c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d007      	beq.n	80145da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d003      	beq.n	80145da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	689b      	ldr	r3, [r3, #8]
 80145ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145ee:	2b40      	cmp	r3, #64	; 0x40
 80145f0:	d005      	beq.n	80145fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80145f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80145f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d054      	beq.n	80146a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f001 fb1e 	bl	8015c40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	689b      	ldr	r3, [r3, #8]
 801460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801460e:	2b40      	cmp	r3, #64	; 0x40
 8014610:	d146      	bne.n	80146a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	3308      	adds	r3, #8
 8014618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801461c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014620:	e853 3f00 	ldrex	r3, [r3]
 8014624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801462c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	3308      	adds	r3, #8
 801463a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801463e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801464a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801464e:	e841 2300 	strex	r3, r2, [r1]
 8014652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801465a:	2b00      	cmp	r3, #0
 801465c:	d1d9      	bne.n	8014612 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014664:	2b00      	cmp	r3, #0
 8014666:	d017      	beq.n	8014698 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801466e:	4a15      	ldr	r2, [pc, #84]	; (80146c4 <HAL_UART_IRQHandler+0x2c0>)
 8014670:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014678:	4618      	mov	r0, r3
 801467a:	f7f4 fbc3 	bl	8008e04 <HAL_DMA_Abort_IT>
 801467e:	4603      	mov	r3, r0
 8014680:	2b00      	cmp	r3, #0
 8014682:	d019      	beq.n	80146b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801468c:	687a      	ldr	r2, [r7, #4]
 801468e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014692:	4610      	mov	r0, r2
 8014694:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014696:	e00f      	b.n	80146b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f000 fa77 	bl	8014b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801469e:	e00b      	b.n	80146b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f000 fa73 	bl	8014b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80146a6:	e007      	b.n	80146b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f000 fa6f 	bl	8014b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2200      	movs	r2, #0
 80146b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80146b6:	e253      	b.n	8014b60 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80146b8:	bf00      	nop
    return;
 80146ba:	e251      	b.n	8014b60 <HAL_UART_IRQHandler+0x75c>
 80146bc:	10000001 	.word	0x10000001
 80146c0:	04000120 	.word	0x04000120
 80146c4:	08015d0d 	.word	0x08015d0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146cc:	2b01      	cmp	r3, #1
 80146ce:	f040 81e7 	bne.w	8014aa0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80146d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80146d6:	f003 0310 	and.w	r3, r3, #16
 80146da:	2b00      	cmp	r3, #0
 80146dc:	f000 81e0 	beq.w	8014aa0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80146e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80146e4:	f003 0310 	and.w	r3, r3, #16
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	f000 81d9 	beq.w	8014aa0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	2210      	movs	r2, #16
 80146f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	689b      	ldr	r3, [r3, #8]
 80146fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014700:	2b40      	cmp	r3, #64	; 0x40
 8014702:	f040 8151 	bne.w	80149a8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	4a96      	ldr	r2, [pc, #600]	; (8014968 <HAL_UART_IRQHandler+0x564>)
 8014710:	4293      	cmp	r3, r2
 8014712:	d068      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	4a93      	ldr	r2, [pc, #588]	; (801496c <HAL_UART_IRQHandler+0x568>)
 801471e:	4293      	cmp	r3, r2
 8014720:	d061      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	4a91      	ldr	r2, [pc, #580]	; (8014970 <HAL_UART_IRQHandler+0x56c>)
 801472c:	4293      	cmp	r3, r2
 801472e:	d05a      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4a8e      	ldr	r2, [pc, #568]	; (8014974 <HAL_UART_IRQHandler+0x570>)
 801473a:	4293      	cmp	r3, r2
 801473c:	d053      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	4a8c      	ldr	r2, [pc, #560]	; (8014978 <HAL_UART_IRQHandler+0x574>)
 8014748:	4293      	cmp	r3, r2
 801474a:	d04c      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	4a89      	ldr	r2, [pc, #548]	; (801497c <HAL_UART_IRQHandler+0x578>)
 8014756:	4293      	cmp	r3, r2
 8014758:	d045      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	4a87      	ldr	r2, [pc, #540]	; (8014980 <HAL_UART_IRQHandler+0x57c>)
 8014764:	4293      	cmp	r3, r2
 8014766:	d03e      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	4a84      	ldr	r2, [pc, #528]	; (8014984 <HAL_UART_IRQHandler+0x580>)
 8014772:	4293      	cmp	r3, r2
 8014774:	d037      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	4a82      	ldr	r2, [pc, #520]	; (8014988 <HAL_UART_IRQHandler+0x584>)
 8014780:	4293      	cmp	r3, r2
 8014782:	d030      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	4a7f      	ldr	r2, [pc, #508]	; (801498c <HAL_UART_IRQHandler+0x588>)
 801478e:	4293      	cmp	r3, r2
 8014790:	d029      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	4a7d      	ldr	r2, [pc, #500]	; (8014990 <HAL_UART_IRQHandler+0x58c>)
 801479c:	4293      	cmp	r3, r2
 801479e:	d022      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	4a7a      	ldr	r2, [pc, #488]	; (8014994 <HAL_UART_IRQHandler+0x590>)
 80147aa:	4293      	cmp	r3, r2
 80147ac:	d01b      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	4a78      	ldr	r2, [pc, #480]	; (8014998 <HAL_UART_IRQHandler+0x594>)
 80147b8:	4293      	cmp	r3, r2
 80147ba:	d014      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4a75      	ldr	r2, [pc, #468]	; (801499c <HAL_UART_IRQHandler+0x598>)
 80147c6:	4293      	cmp	r3, r2
 80147c8:	d00d      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	4a73      	ldr	r2, [pc, #460]	; (80149a0 <HAL_UART_IRQHandler+0x59c>)
 80147d4:	4293      	cmp	r3, r2
 80147d6:	d006      	beq.n	80147e6 <HAL_UART_IRQHandler+0x3e2>
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	4a70      	ldr	r2, [pc, #448]	; (80149a4 <HAL_UART_IRQHandler+0x5a0>)
 80147e2:	4293      	cmp	r3, r2
 80147e4:	d106      	bne.n	80147f4 <HAL_UART_IRQHandler+0x3f0>
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	e005      	b.n	8014800 <HAL_UART_IRQHandler+0x3fc>
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	685b      	ldr	r3, [r3, #4]
 80147fe:	b29b      	uxth	r3, r3
 8014800:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014804:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014808:	2b00      	cmp	r3, #0
 801480a:	f000 81ab 	beq.w	8014b64 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014814:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014818:	429a      	cmp	r2, r3
 801481a:	f080 81a3 	bcs.w	8014b64 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014824:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801482e:	69db      	ldr	r3, [r3, #28]
 8014830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014834:	f000 8087 	beq.w	8014946 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014844:	e853 3f00 	ldrex	r3, [r3]
 8014848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801484c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	461a      	mov	r2, r3
 801485e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014866:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801486a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801486e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014872:	e841 2300 	strex	r3, r2, [r1]
 8014876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801487a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801487e:	2b00      	cmp	r3, #0
 8014880:	d1da      	bne.n	8014838 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	3308      	adds	r3, #8
 8014888:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801488a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801488c:	e853 3f00 	ldrex	r3, [r3]
 8014890:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014894:	f023 0301 	bic.w	r3, r3, #1
 8014898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	3308      	adds	r3, #8
 80148a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80148a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80148aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80148ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80148b2:	e841 2300 	strex	r3, r2, [r1]
 80148b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80148b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d1e1      	bne.n	8014882 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	3308      	adds	r3, #8
 80148c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80148c8:	e853 3f00 	ldrex	r3, [r3]
 80148cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80148ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80148d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80148d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	3308      	adds	r3, #8
 80148de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80148e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80148e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80148e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80148ea:	e841 2300 	strex	r3, r2, [r1]
 80148ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80148f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d1e3      	bne.n	80148be <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2220      	movs	r2, #32
 80148fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	2200      	movs	r2, #0
 8014902:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801490a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801490c:	e853 3f00 	ldrex	r3, [r3]
 8014910:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014914:	f023 0310 	bic.w	r3, r3, #16
 8014918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	461a      	mov	r2, r3
 8014922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014926:	65bb      	str	r3, [r7, #88]	; 0x58
 8014928:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801492a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801492c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801492e:	e841 2300 	strex	r3, r2, [r1]
 8014932:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014936:	2b00      	cmp	r3, #0
 8014938:	d1e4      	bne.n	8014904 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014940:	4618      	mov	r0, r3
 8014942:	f7f3 ff41 	bl	80087c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2202      	movs	r2, #2
 801494a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014958:	b29b      	uxth	r3, r3
 801495a:	1ad3      	subs	r3, r2, r3
 801495c:	b29b      	uxth	r3, r3
 801495e:	4619      	mov	r1, r3
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	f000 f91d 	bl	8014ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014966:	e0fd      	b.n	8014b64 <HAL_UART_IRQHandler+0x760>
 8014968:	40020010 	.word	0x40020010
 801496c:	40020028 	.word	0x40020028
 8014970:	40020040 	.word	0x40020040
 8014974:	40020058 	.word	0x40020058
 8014978:	40020070 	.word	0x40020070
 801497c:	40020088 	.word	0x40020088
 8014980:	400200a0 	.word	0x400200a0
 8014984:	400200b8 	.word	0x400200b8
 8014988:	40020410 	.word	0x40020410
 801498c:	40020428 	.word	0x40020428
 8014990:	40020440 	.word	0x40020440
 8014994:	40020458 	.word	0x40020458
 8014998:	40020470 	.word	0x40020470
 801499c:	40020488 	.word	0x40020488
 80149a0:	400204a0 	.word	0x400204a0
 80149a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	1ad3      	subs	r3, r2, r3
 80149b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	f000 80cf 	beq.w	8014b68 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80149ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	f000 80ca 	beq.w	8014b68 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149dc:	e853 3f00 	ldrex	r3, [r3]
 80149e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80149e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80149e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	461a      	mov	r2, r3
 80149f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80149f6:	647b      	str	r3, [r7, #68]	; 0x44
 80149f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80149fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80149fe:	e841 2300 	strex	r3, r2, [r1]
 8014a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d1e4      	bne.n	80149d4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	3308      	adds	r3, #8
 8014a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a14:	e853 3f00 	ldrex	r3, [r3]
 8014a18:	623b      	str	r3, [r7, #32]
   return(result);
 8014a1a:	6a3a      	ldr	r2, [r7, #32]
 8014a1c:	4b55      	ldr	r3, [pc, #340]	; (8014b74 <HAL_UART_IRQHandler+0x770>)
 8014a1e:	4013      	ands	r3, r2
 8014a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	3308      	adds	r3, #8
 8014a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8014a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a36:	e841 2300 	strex	r3, r2, [r1]
 8014a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d1e3      	bne.n	8014a0a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2220      	movs	r2, #32
 8014a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2200      	movs	r2, #0
 8014a54:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a5c:	693b      	ldr	r3, [r7, #16]
 8014a5e:	e853 3f00 	ldrex	r3, [r3]
 8014a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f023 0310 	bic.w	r3, r3, #16
 8014a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	461a      	mov	r2, r3
 8014a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014a78:	61fb      	str	r3, [r7, #28]
 8014a7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a7c:	69b9      	ldr	r1, [r7, #24]
 8014a7e:	69fa      	ldr	r2, [r7, #28]
 8014a80:	e841 2300 	strex	r3, r2, [r1]
 8014a84:	617b      	str	r3, [r7, #20]
   return(result);
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d1e4      	bne.n	8014a56 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2202      	movs	r2, #2
 8014a90:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014a92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014a96:	4619      	mov	r1, r3
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f000 f881 	bl	8014ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014a9e:	e063      	b.n	8014b68 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d00e      	beq.n	8014aca <HAL_UART_IRQHandler+0x6c6>
 8014aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d008      	beq.n	8014aca <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014ac0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f001 fe80 	bl	80167c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014ac8:	e051      	b.n	8014b6e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d014      	beq.n	8014b00 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d105      	bne.n	8014aee <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d008      	beq.n	8014b00 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d03a      	beq.n	8014b6c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	4798      	blx	r3
    }
    return;
 8014afe:	e035      	b.n	8014b6c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d009      	beq.n	8014b20 <HAL_UART_IRQHandler+0x71c>
 8014b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d003      	beq.n	8014b20 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f001 f90d 	bl	8015d38 <UART_EndTransmit_IT>
    return;
 8014b1e:	e026      	b.n	8014b6e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d009      	beq.n	8014b40 <HAL_UART_IRQHandler+0x73c>
 8014b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014b30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d003      	beq.n	8014b40 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014b38:	6878      	ldr	r0, [r7, #4]
 8014b3a:	f001 fe59 	bl	80167f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014b3e:	e016      	b.n	8014b6e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d010      	beq.n	8014b6e <HAL_UART_IRQHandler+0x76a>
 8014b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	da0c      	bge.n	8014b6e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f001 fe41 	bl	80167dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014b5a:	e008      	b.n	8014b6e <HAL_UART_IRQHandler+0x76a>
      return;
 8014b5c:	bf00      	nop
 8014b5e:	e006      	b.n	8014b6e <HAL_UART_IRQHandler+0x76a>
    return;
 8014b60:	bf00      	nop
 8014b62:	e004      	b.n	8014b6e <HAL_UART_IRQHandler+0x76a>
      return;
 8014b64:	bf00      	nop
 8014b66:	e002      	b.n	8014b6e <HAL_UART_IRQHandler+0x76a>
      return;
 8014b68:	bf00      	nop
 8014b6a:	e000      	b.n	8014b6e <HAL_UART_IRQHandler+0x76a>
    return;
 8014b6c:	bf00      	nop
  }
}
 8014b6e:	37e8      	adds	r7, #232	; 0xe8
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}
 8014b74:	effffffe 	.word	0xeffffffe

08014b78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014b78:	b480      	push	{r7}
 8014b7a:	b083      	sub	sp, #12
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014b80:	bf00      	nop
 8014b82:	370c      	adds	r7, #12
 8014b84:	46bd      	mov	sp, r7
 8014b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8a:	4770      	bx	lr

08014b8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014b8c:	b480      	push	{r7}
 8014b8e:	b083      	sub	sp, #12
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014b94:	bf00      	nop
 8014b96:	370c      	adds	r7, #12
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr

08014ba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014ba0:	b480      	push	{r7}
 8014ba2:	b083      	sub	sp, #12
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	460b      	mov	r3, r1
 8014baa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014bac:	bf00      	nop
 8014bae:	370c      	adds	r7, #12
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb6:	4770      	bx	lr

08014bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014bbc:	b092      	sub	sp, #72	; 0x48
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014bc8:	697b      	ldr	r3, [r7, #20]
 8014bca:	689a      	ldr	r2, [r3, #8]
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	691b      	ldr	r3, [r3, #16]
 8014bd0:	431a      	orrs	r2, r3
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	695b      	ldr	r3, [r3, #20]
 8014bd6:	431a      	orrs	r2, r3
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	69db      	ldr	r3, [r3, #28]
 8014bdc:	4313      	orrs	r3, r2
 8014bde:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	681a      	ldr	r2, [r3, #0]
 8014be6:	4bbe      	ldr	r3, [pc, #760]	; (8014ee0 <UART_SetConfig+0x328>)
 8014be8:	4013      	ands	r3, r2
 8014bea:	697a      	ldr	r2, [r7, #20]
 8014bec:	6812      	ldr	r2, [r2, #0]
 8014bee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014bf0:	430b      	orrs	r3, r1
 8014bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014bfe:	697b      	ldr	r3, [r7, #20]
 8014c00:	68da      	ldr	r2, [r3, #12]
 8014c02:	697b      	ldr	r3, [r7, #20]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	430a      	orrs	r2, r1
 8014c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014c0a:	697b      	ldr	r3, [r7, #20]
 8014c0c:	699b      	ldr	r3, [r3, #24]
 8014c0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	4ab3      	ldr	r2, [pc, #716]	; (8014ee4 <UART_SetConfig+0x32c>)
 8014c16:	4293      	cmp	r3, r2
 8014c18:	d004      	beq.n	8014c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	6a1b      	ldr	r3, [r3, #32]
 8014c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014c20:	4313      	orrs	r3, r2
 8014c22:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	689a      	ldr	r2, [r3, #8]
 8014c2a:	4baf      	ldr	r3, [pc, #700]	; (8014ee8 <UART_SetConfig+0x330>)
 8014c2c:	4013      	ands	r3, r2
 8014c2e:	697a      	ldr	r2, [r7, #20]
 8014c30:	6812      	ldr	r2, [r2, #0]
 8014c32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014c34:	430b      	orrs	r3, r1
 8014c36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c3e:	f023 010f 	bic.w	r1, r3, #15
 8014c42:	697b      	ldr	r3, [r7, #20]
 8014c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	430a      	orrs	r2, r1
 8014c4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	4aa6      	ldr	r2, [pc, #664]	; (8014eec <UART_SetConfig+0x334>)
 8014c54:	4293      	cmp	r3, r2
 8014c56:	d177      	bne.n	8014d48 <UART_SetConfig+0x190>
 8014c58:	4ba5      	ldr	r3, [pc, #660]	; (8014ef0 <UART_SetConfig+0x338>)
 8014c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014c60:	2b28      	cmp	r3, #40	; 0x28
 8014c62:	d86d      	bhi.n	8014d40 <UART_SetConfig+0x188>
 8014c64:	a201      	add	r2, pc, #4	; (adr r2, 8014c6c <UART_SetConfig+0xb4>)
 8014c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c6a:	bf00      	nop
 8014c6c:	08014d11 	.word	0x08014d11
 8014c70:	08014d41 	.word	0x08014d41
 8014c74:	08014d41 	.word	0x08014d41
 8014c78:	08014d41 	.word	0x08014d41
 8014c7c:	08014d41 	.word	0x08014d41
 8014c80:	08014d41 	.word	0x08014d41
 8014c84:	08014d41 	.word	0x08014d41
 8014c88:	08014d41 	.word	0x08014d41
 8014c8c:	08014d19 	.word	0x08014d19
 8014c90:	08014d41 	.word	0x08014d41
 8014c94:	08014d41 	.word	0x08014d41
 8014c98:	08014d41 	.word	0x08014d41
 8014c9c:	08014d41 	.word	0x08014d41
 8014ca0:	08014d41 	.word	0x08014d41
 8014ca4:	08014d41 	.word	0x08014d41
 8014ca8:	08014d41 	.word	0x08014d41
 8014cac:	08014d21 	.word	0x08014d21
 8014cb0:	08014d41 	.word	0x08014d41
 8014cb4:	08014d41 	.word	0x08014d41
 8014cb8:	08014d41 	.word	0x08014d41
 8014cbc:	08014d41 	.word	0x08014d41
 8014cc0:	08014d41 	.word	0x08014d41
 8014cc4:	08014d41 	.word	0x08014d41
 8014cc8:	08014d41 	.word	0x08014d41
 8014ccc:	08014d29 	.word	0x08014d29
 8014cd0:	08014d41 	.word	0x08014d41
 8014cd4:	08014d41 	.word	0x08014d41
 8014cd8:	08014d41 	.word	0x08014d41
 8014cdc:	08014d41 	.word	0x08014d41
 8014ce0:	08014d41 	.word	0x08014d41
 8014ce4:	08014d41 	.word	0x08014d41
 8014ce8:	08014d41 	.word	0x08014d41
 8014cec:	08014d31 	.word	0x08014d31
 8014cf0:	08014d41 	.word	0x08014d41
 8014cf4:	08014d41 	.word	0x08014d41
 8014cf8:	08014d41 	.word	0x08014d41
 8014cfc:	08014d41 	.word	0x08014d41
 8014d00:	08014d41 	.word	0x08014d41
 8014d04:	08014d41 	.word	0x08014d41
 8014d08:	08014d41 	.word	0x08014d41
 8014d0c:	08014d39 	.word	0x08014d39
 8014d10:	2301      	movs	r3, #1
 8014d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d16:	e222      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d18:	2304      	movs	r3, #4
 8014d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d1e:	e21e      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d20:	2308      	movs	r3, #8
 8014d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d26:	e21a      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d28:	2310      	movs	r3, #16
 8014d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d2e:	e216      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d30:	2320      	movs	r3, #32
 8014d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d36:	e212      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d38:	2340      	movs	r3, #64	; 0x40
 8014d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d3e:	e20e      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d40:	2380      	movs	r3, #128	; 0x80
 8014d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d46:	e20a      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d48:	697b      	ldr	r3, [r7, #20]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	4a69      	ldr	r2, [pc, #420]	; (8014ef4 <UART_SetConfig+0x33c>)
 8014d4e:	4293      	cmp	r3, r2
 8014d50:	d130      	bne.n	8014db4 <UART_SetConfig+0x1fc>
 8014d52:	4b67      	ldr	r3, [pc, #412]	; (8014ef0 <UART_SetConfig+0x338>)
 8014d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d56:	f003 0307 	and.w	r3, r3, #7
 8014d5a:	2b05      	cmp	r3, #5
 8014d5c:	d826      	bhi.n	8014dac <UART_SetConfig+0x1f4>
 8014d5e:	a201      	add	r2, pc, #4	; (adr r2, 8014d64 <UART_SetConfig+0x1ac>)
 8014d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d64:	08014d7d 	.word	0x08014d7d
 8014d68:	08014d85 	.word	0x08014d85
 8014d6c:	08014d8d 	.word	0x08014d8d
 8014d70:	08014d95 	.word	0x08014d95
 8014d74:	08014d9d 	.word	0x08014d9d
 8014d78:	08014da5 	.word	0x08014da5
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d82:	e1ec      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d84:	2304      	movs	r3, #4
 8014d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d8a:	e1e8      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d8c:	2308      	movs	r3, #8
 8014d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d92:	e1e4      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d94:	2310      	movs	r3, #16
 8014d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014d9a:	e1e0      	b.n	801515e <UART_SetConfig+0x5a6>
 8014d9c:	2320      	movs	r3, #32
 8014d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014da2:	e1dc      	b.n	801515e <UART_SetConfig+0x5a6>
 8014da4:	2340      	movs	r3, #64	; 0x40
 8014da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014daa:	e1d8      	b.n	801515e <UART_SetConfig+0x5a6>
 8014dac:	2380      	movs	r3, #128	; 0x80
 8014dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014db2:	e1d4      	b.n	801515e <UART_SetConfig+0x5a6>
 8014db4:	697b      	ldr	r3, [r7, #20]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	4a4f      	ldr	r2, [pc, #316]	; (8014ef8 <UART_SetConfig+0x340>)
 8014dba:	4293      	cmp	r3, r2
 8014dbc:	d130      	bne.n	8014e20 <UART_SetConfig+0x268>
 8014dbe:	4b4c      	ldr	r3, [pc, #304]	; (8014ef0 <UART_SetConfig+0x338>)
 8014dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dc2:	f003 0307 	and.w	r3, r3, #7
 8014dc6:	2b05      	cmp	r3, #5
 8014dc8:	d826      	bhi.n	8014e18 <UART_SetConfig+0x260>
 8014dca:	a201      	add	r2, pc, #4	; (adr r2, 8014dd0 <UART_SetConfig+0x218>)
 8014dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dd0:	08014de9 	.word	0x08014de9
 8014dd4:	08014df1 	.word	0x08014df1
 8014dd8:	08014df9 	.word	0x08014df9
 8014ddc:	08014e01 	.word	0x08014e01
 8014de0:	08014e09 	.word	0x08014e09
 8014de4:	08014e11 	.word	0x08014e11
 8014de8:	2300      	movs	r3, #0
 8014dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dee:	e1b6      	b.n	801515e <UART_SetConfig+0x5a6>
 8014df0:	2304      	movs	r3, #4
 8014df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014df6:	e1b2      	b.n	801515e <UART_SetConfig+0x5a6>
 8014df8:	2308      	movs	r3, #8
 8014dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dfe:	e1ae      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e00:	2310      	movs	r3, #16
 8014e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e06:	e1aa      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e08:	2320      	movs	r3, #32
 8014e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e0e:	e1a6      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e10:	2340      	movs	r3, #64	; 0x40
 8014e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e16:	e1a2      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e18:	2380      	movs	r3, #128	; 0x80
 8014e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e1e:	e19e      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	4a35      	ldr	r2, [pc, #212]	; (8014efc <UART_SetConfig+0x344>)
 8014e26:	4293      	cmp	r3, r2
 8014e28:	d130      	bne.n	8014e8c <UART_SetConfig+0x2d4>
 8014e2a:	4b31      	ldr	r3, [pc, #196]	; (8014ef0 <UART_SetConfig+0x338>)
 8014e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e2e:	f003 0307 	and.w	r3, r3, #7
 8014e32:	2b05      	cmp	r3, #5
 8014e34:	d826      	bhi.n	8014e84 <UART_SetConfig+0x2cc>
 8014e36:	a201      	add	r2, pc, #4	; (adr r2, 8014e3c <UART_SetConfig+0x284>)
 8014e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e3c:	08014e55 	.word	0x08014e55
 8014e40:	08014e5d 	.word	0x08014e5d
 8014e44:	08014e65 	.word	0x08014e65
 8014e48:	08014e6d 	.word	0x08014e6d
 8014e4c:	08014e75 	.word	0x08014e75
 8014e50:	08014e7d 	.word	0x08014e7d
 8014e54:	2300      	movs	r3, #0
 8014e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e5a:	e180      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e5c:	2304      	movs	r3, #4
 8014e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e62:	e17c      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e64:	2308      	movs	r3, #8
 8014e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e6a:	e178      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e6c:	2310      	movs	r3, #16
 8014e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e72:	e174      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e74:	2320      	movs	r3, #32
 8014e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e7a:	e170      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e7c:	2340      	movs	r3, #64	; 0x40
 8014e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e82:	e16c      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e84:	2380      	movs	r3, #128	; 0x80
 8014e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e8a:	e168      	b.n	801515e <UART_SetConfig+0x5a6>
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	4a1b      	ldr	r2, [pc, #108]	; (8014f00 <UART_SetConfig+0x348>)
 8014e92:	4293      	cmp	r3, r2
 8014e94:	d142      	bne.n	8014f1c <UART_SetConfig+0x364>
 8014e96:	4b16      	ldr	r3, [pc, #88]	; (8014ef0 <UART_SetConfig+0x338>)
 8014e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e9a:	f003 0307 	and.w	r3, r3, #7
 8014e9e:	2b05      	cmp	r3, #5
 8014ea0:	d838      	bhi.n	8014f14 <UART_SetConfig+0x35c>
 8014ea2:	a201      	add	r2, pc, #4	; (adr r2, 8014ea8 <UART_SetConfig+0x2f0>)
 8014ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ea8:	08014ec1 	.word	0x08014ec1
 8014eac:	08014ec9 	.word	0x08014ec9
 8014eb0:	08014ed1 	.word	0x08014ed1
 8014eb4:	08014ed9 	.word	0x08014ed9
 8014eb8:	08014f05 	.word	0x08014f05
 8014ebc:	08014f0d 	.word	0x08014f0d
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ec6:	e14a      	b.n	801515e <UART_SetConfig+0x5a6>
 8014ec8:	2304      	movs	r3, #4
 8014eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ece:	e146      	b.n	801515e <UART_SetConfig+0x5a6>
 8014ed0:	2308      	movs	r3, #8
 8014ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ed6:	e142      	b.n	801515e <UART_SetConfig+0x5a6>
 8014ed8:	2310      	movs	r3, #16
 8014eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ede:	e13e      	b.n	801515e <UART_SetConfig+0x5a6>
 8014ee0:	cfff69f3 	.word	0xcfff69f3
 8014ee4:	58000c00 	.word	0x58000c00
 8014ee8:	11fff4ff 	.word	0x11fff4ff
 8014eec:	40011000 	.word	0x40011000
 8014ef0:	58024400 	.word	0x58024400
 8014ef4:	40004400 	.word	0x40004400
 8014ef8:	40004800 	.word	0x40004800
 8014efc:	40004c00 	.word	0x40004c00
 8014f00:	40005000 	.word	0x40005000
 8014f04:	2320      	movs	r3, #32
 8014f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f0a:	e128      	b.n	801515e <UART_SetConfig+0x5a6>
 8014f0c:	2340      	movs	r3, #64	; 0x40
 8014f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f12:	e124      	b.n	801515e <UART_SetConfig+0x5a6>
 8014f14:	2380      	movs	r3, #128	; 0x80
 8014f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f1a:	e120      	b.n	801515e <UART_SetConfig+0x5a6>
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	4acb      	ldr	r2, [pc, #812]	; (8015250 <UART_SetConfig+0x698>)
 8014f22:	4293      	cmp	r3, r2
 8014f24:	d176      	bne.n	8015014 <UART_SetConfig+0x45c>
 8014f26:	4bcb      	ldr	r3, [pc, #812]	; (8015254 <UART_SetConfig+0x69c>)
 8014f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014f2e:	2b28      	cmp	r3, #40	; 0x28
 8014f30:	d86c      	bhi.n	801500c <UART_SetConfig+0x454>
 8014f32:	a201      	add	r2, pc, #4	; (adr r2, 8014f38 <UART_SetConfig+0x380>)
 8014f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f38:	08014fdd 	.word	0x08014fdd
 8014f3c:	0801500d 	.word	0x0801500d
 8014f40:	0801500d 	.word	0x0801500d
 8014f44:	0801500d 	.word	0x0801500d
 8014f48:	0801500d 	.word	0x0801500d
 8014f4c:	0801500d 	.word	0x0801500d
 8014f50:	0801500d 	.word	0x0801500d
 8014f54:	0801500d 	.word	0x0801500d
 8014f58:	08014fe5 	.word	0x08014fe5
 8014f5c:	0801500d 	.word	0x0801500d
 8014f60:	0801500d 	.word	0x0801500d
 8014f64:	0801500d 	.word	0x0801500d
 8014f68:	0801500d 	.word	0x0801500d
 8014f6c:	0801500d 	.word	0x0801500d
 8014f70:	0801500d 	.word	0x0801500d
 8014f74:	0801500d 	.word	0x0801500d
 8014f78:	08014fed 	.word	0x08014fed
 8014f7c:	0801500d 	.word	0x0801500d
 8014f80:	0801500d 	.word	0x0801500d
 8014f84:	0801500d 	.word	0x0801500d
 8014f88:	0801500d 	.word	0x0801500d
 8014f8c:	0801500d 	.word	0x0801500d
 8014f90:	0801500d 	.word	0x0801500d
 8014f94:	0801500d 	.word	0x0801500d
 8014f98:	08014ff5 	.word	0x08014ff5
 8014f9c:	0801500d 	.word	0x0801500d
 8014fa0:	0801500d 	.word	0x0801500d
 8014fa4:	0801500d 	.word	0x0801500d
 8014fa8:	0801500d 	.word	0x0801500d
 8014fac:	0801500d 	.word	0x0801500d
 8014fb0:	0801500d 	.word	0x0801500d
 8014fb4:	0801500d 	.word	0x0801500d
 8014fb8:	08014ffd 	.word	0x08014ffd
 8014fbc:	0801500d 	.word	0x0801500d
 8014fc0:	0801500d 	.word	0x0801500d
 8014fc4:	0801500d 	.word	0x0801500d
 8014fc8:	0801500d 	.word	0x0801500d
 8014fcc:	0801500d 	.word	0x0801500d
 8014fd0:	0801500d 	.word	0x0801500d
 8014fd4:	0801500d 	.word	0x0801500d
 8014fd8:	08015005 	.word	0x08015005
 8014fdc:	2301      	movs	r3, #1
 8014fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fe2:	e0bc      	b.n	801515e <UART_SetConfig+0x5a6>
 8014fe4:	2304      	movs	r3, #4
 8014fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fea:	e0b8      	b.n	801515e <UART_SetConfig+0x5a6>
 8014fec:	2308      	movs	r3, #8
 8014fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ff2:	e0b4      	b.n	801515e <UART_SetConfig+0x5a6>
 8014ff4:	2310      	movs	r3, #16
 8014ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ffa:	e0b0      	b.n	801515e <UART_SetConfig+0x5a6>
 8014ffc:	2320      	movs	r3, #32
 8014ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015002:	e0ac      	b.n	801515e <UART_SetConfig+0x5a6>
 8015004:	2340      	movs	r3, #64	; 0x40
 8015006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801500a:	e0a8      	b.n	801515e <UART_SetConfig+0x5a6>
 801500c:	2380      	movs	r3, #128	; 0x80
 801500e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015012:	e0a4      	b.n	801515e <UART_SetConfig+0x5a6>
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	4a8f      	ldr	r2, [pc, #572]	; (8015258 <UART_SetConfig+0x6a0>)
 801501a:	4293      	cmp	r3, r2
 801501c:	d130      	bne.n	8015080 <UART_SetConfig+0x4c8>
 801501e:	4b8d      	ldr	r3, [pc, #564]	; (8015254 <UART_SetConfig+0x69c>)
 8015020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015022:	f003 0307 	and.w	r3, r3, #7
 8015026:	2b05      	cmp	r3, #5
 8015028:	d826      	bhi.n	8015078 <UART_SetConfig+0x4c0>
 801502a:	a201      	add	r2, pc, #4	; (adr r2, 8015030 <UART_SetConfig+0x478>)
 801502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015030:	08015049 	.word	0x08015049
 8015034:	08015051 	.word	0x08015051
 8015038:	08015059 	.word	0x08015059
 801503c:	08015061 	.word	0x08015061
 8015040:	08015069 	.word	0x08015069
 8015044:	08015071 	.word	0x08015071
 8015048:	2300      	movs	r3, #0
 801504a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801504e:	e086      	b.n	801515e <UART_SetConfig+0x5a6>
 8015050:	2304      	movs	r3, #4
 8015052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015056:	e082      	b.n	801515e <UART_SetConfig+0x5a6>
 8015058:	2308      	movs	r3, #8
 801505a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801505e:	e07e      	b.n	801515e <UART_SetConfig+0x5a6>
 8015060:	2310      	movs	r3, #16
 8015062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015066:	e07a      	b.n	801515e <UART_SetConfig+0x5a6>
 8015068:	2320      	movs	r3, #32
 801506a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801506e:	e076      	b.n	801515e <UART_SetConfig+0x5a6>
 8015070:	2340      	movs	r3, #64	; 0x40
 8015072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015076:	e072      	b.n	801515e <UART_SetConfig+0x5a6>
 8015078:	2380      	movs	r3, #128	; 0x80
 801507a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801507e:	e06e      	b.n	801515e <UART_SetConfig+0x5a6>
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	4a75      	ldr	r2, [pc, #468]	; (801525c <UART_SetConfig+0x6a4>)
 8015086:	4293      	cmp	r3, r2
 8015088:	d130      	bne.n	80150ec <UART_SetConfig+0x534>
 801508a:	4b72      	ldr	r3, [pc, #456]	; (8015254 <UART_SetConfig+0x69c>)
 801508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801508e:	f003 0307 	and.w	r3, r3, #7
 8015092:	2b05      	cmp	r3, #5
 8015094:	d826      	bhi.n	80150e4 <UART_SetConfig+0x52c>
 8015096:	a201      	add	r2, pc, #4	; (adr r2, 801509c <UART_SetConfig+0x4e4>)
 8015098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801509c:	080150b5 	.word	0x080150b5
 80150a0:	080150bd 	.word	0x080150bd
 80150a4:	080150c5 	.word	0x080150c5
 80150a8:	080150cd 	.word	0x080150cd
 80150ac:	080150d5 	.word	0x080150d5
 80150b0:	080150dd 	.word	0x080150dd
 80150b4:	2300      	movs	r3, #0
 80150b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ba:	e050      	b.n	801515e <UART_SetConfig+0x5a6>
 80150bc:	2304      	movs	r3, #4
 80150be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150c2:	e04c      	b.n	801515e <UART_SetConfig+0x5a6>
 80150c4:	2308      	movs	r3, #8
 80150c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ca:	e048      	b.n	801515e <UART_SetConfig+0x5a6>
 80150cc:	2310      	movs	r3, #16
 80150ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150d2:	e044      	b.n	801515e <UART_SetConfig+0x5a6>
 80150d4:	2320      	movs	r3, #32
 80150d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150da:	e040      	b.n	801515e <UART_SetConfig+0x5a6>
 80150dc:	2340      	movs	r3, #64	; 0x40
 80150de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150e2:	e03c      	b.n	801515e <UART_SetConfig+0x5a6>
 80150e4:	2380      	movs	r3, #128	; 0x80
 80150e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ea:	e038      	b.n	801515e <UART_SetConfig+0x5a6>
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	4a5b      	ldr	r2, [pc, #364]	; (8015260 <UART_SetConfig+0x6a8>)
 80150f2:	4293      	cmp	r3, r2
 80150f4:	d130      	bne.n	8015158 <UART_SetConfig+0x5a0>
 80150f6:	4b57      	ldr	r3, [pc, #348]	; (8015254 <UART_SetConfig+0x69c>)
 80150f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80150fa:	f003 0307 	and.w	r3, r3, #7
 80150fe:	2b05      	cmp	r3, #5
 8015100:	d826      	bhi.n	8015150 <UART_SetConfig+0x598>
 8015102:	a201      	add	r2, pc, #4	; (adr r2, 8015108 <UART_SetConfig+0x550>)
 8015104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015108:	08015121 	.word	0x08015121
 801510c:	08015129 	.word	0x08015129
 8015110:	08015131 	.word	0x08015131
 8015114:	08015139 	.word	0x08015139
 8015118:	08015141 	.word	0x08015141
 801511c:	08015149 	.word	0x08015149
 8015120:	2302      	movs	r3, #2
 8015122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015126:	e01a      	b.n	801515e <UART_SetConfig+0x5a6>
 8015128:	2304      	movs	r3, #4
 801512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801512e:	e016      	b.n	801515e <UART_SetConfig+0x5a6>
 8015130:	2308      	movs	r3, #8
 8015132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015136:	e012      	b.n	801515e <UART_SetConfig+0x5a6>
 8015138:	2310      	movs	r3, #16
 801513a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801513e:	e00e      	b.n	801515e <UART_SetConfig+0x5a6>
 8015140:	2320      	movs	r3, #32
 8015142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015146:	e00a      	b.n	801515e <UART_SetConfig+0x5a6>
 8015148:	2340      	movs	r3, #64	; 0x40
 801514a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801514e:	e006      	b.n	801515e <UART_SetConfig+0x5a6>
 8015150:	2380      	movs	r3, #128	; 0x80
 8015152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015156:	e002      	b.n	801515e <UART_SetConfig+0x5a6>
 8015158:	2380      	movs	r3, #128	; 0x80
 801515a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	4a3f      	ldr	r2, [pc, #252]	; (8015260 <UART_SetConfig+0x6a8>)
 8015164:	4293      	cmp	r3, r2
 8015166:	f040 80f8 	bne.w	801535a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801516a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801516e:	2b20      	cmp	r3, #32
 8015170:	dc46      	bgt.n	8015200 <UART_SetConfig+0x648>
 8015172:	2b02      	cmp	r3, #2
 8015174:	f2c0 8082 	blt.w	801527c <UART_SetConfig+0x6c4>
 8015178:	3b02      	subs	r3, #2
 801517a:	2b1e      	cmp	r3, #30
 801517c:	d87e      	bhi.n	801527c <UART_SetConfig+0x6c4>
 801517e:	a201      	add	r2, pc, #4	; (adr r2, 8015184 <UART_SetConfig+0x5cc>)
 8015180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015184:	08015207 	.word	0x08015207
 8015188:	0801527d 	.word	0x0801527d
 801518c:	0801520f 	.word	0x0801520f
 8015190:	0801527d 	.word	0x0801527d
 8015194:	0801527d 	.word	0x0801527d
 8015198:	0801527d 	.word	0x0801527d
 801519c:	0801521f 	.word	0x0801521f
 80151a0:	0801527d 	.word	0x0801527d
 80151a4:	0801527d 	.word	0x0801527d
 80151a8:	0801527d 	.word	0x0801527d
 80151ac:	0801527d 	.word	0x0801527d
 80151b0:	0801527d 	.word	0x0801527d
 80151b4:	0801527d 	.word	0x0801527d
 80151b8:	0801527d 	.word	0x0801527d
 80151bc:	0801522f 	.word	0x0801522f
 80151c0:	0801527d 	.word	0x0801527d
 80151c4:	0801527d 	.word	0x0801527d
 80151c8:	0801527d 	.word	0x0801527d
 80151cc:	0801527d 	.word	0x0801527d
 80151d0:	0801527d 	.word	0x0801527d
 80151d4:	0801527d 	.word	0x0801527d
 80151d8:	0801527d 	.word	0x0801527d
 80151dc:	0801527d 	.word	0x0801527d
 80151e0:	0801527d 	.word	0x0801527d
 80151e4:	0801527d 	.word	0x0801527d
 80151e8:	0801527d 	.word	0x0801527d
 80151ec:	0801527d 	.word	0x0801527d
 80151f0:	0801527d 	.word	0x0801527d
 80151f4:	0801527d 	.word	0x0801527d
 80151f8:	0801527d 	.word	0x0801527d
 80151fc:	0801526f 	.word	0x0801526f
 8015200:	2b40      	cmp	r3, #64	; 0x40
 8015202:	d037      	beq.n	8015274 <UART_SetConfig+0x6bc>
 8015204:	e03a      	b.n	801527c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8015206:	f7fb fc17 	bl	8010a38 <HAL_RCCEx_GetD3PCLK1Freq>
 801520a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801520c:	e03c      	b.n	8015288 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801520e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015212:	4618      	mov	r0, r3
 8015214:	f7fb fc26 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801521a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801521c:	e034      	b.n	8015288 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801521e:	f107 0318 	add.w	r3, r7, #24
 8015222:	4618      	mov	r0, r3
 8015224:	f7fb fd72 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015228:	69fb      	ldr	r3, [r7, #28]
 801522a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801522c:	e02c      	b.n	8015288 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801522e:	4b09      	ldr	r3, [pc, #36]	; (8015254 <UART_SetConfig+0x69c>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	f003 0320 	and.w	r3, r3, #32
 8015236:	2b00      	cmp	r3, #0
 8015238:	d016      	beq.n	8015268 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801523a:	4b06      	ldr	r3, [pc, #24]	; (8015254 <UART_SetConfig+0x69c>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	08db      	lsrs	r3, r3, #3
 8015240:	f003 0303 	and.w	r3, r3, #3
 8015244:	4a07      	ldr	r2, [pc, #28]	; (8015264 <UART_SetConfig+0x6ac>)
 8015246:	fa22 f303 	lsr.w	r3, r2, r3
 801524a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801524c:	e01c      	b.n	8015288 <UART_SetConfig+0x6d0>
 801524e:	bf00      	nop
 8015250:	40011400 	.word	0x40011400
 8015254:	58024400 	.word	0x58024400
 8015258:	40007800 	.word	0x40007800
 801525c:	40007c00 	.word	0x40007c00
 8015260:	58000c00 	.word	0x58000c00
 8015264:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015268:	4b9d      	ldr	r3, [pc, #628]	; (80154e0 <UART_SetConfig+0x928>)
 801526a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801526c:	e00c      	b.n	8015288 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801526e:	4b9d      	ldr	r3, [pc, #628]	; (80154e4 <UART_SetConfig+0x92c>)
 8015270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015272:	e009      	b.n	8015288 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801527a:	e005      	b.n	8015288 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801527c:	2300      	movs	r3, #0
 801527e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015280:	2301      	movs	r3, #1
 8015282:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015286:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801528a:	2b00      	cmp	r3, #0
 801528c:	f000 81de 	beq.w	801564c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015290:	697b      	ldr	r3, [r7, #20]
 8015292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015294:	4a94      	ldr	r2, [pc, #592]	; (80154e8 <UART_SetConfig+0x930>)
 8015296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801529a:	461a      	mov	r2, r3
 801529c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801529e:	fbb3 f3f2 	udiv	r3, r3, r2
 80152a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	685a      	ldr	r2, [r3, #4]
 80152a8:	4613      	mov	r3, r2
 80152aa:	005b      	lsls	r3, r3, #1
 80152ac:	4413      	add	r3, r2
 80152ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152b0:	429a      	cmp	r2, r3
 80152b2:	d305      	bcc.n	80152c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80152b4:	697b      	ldr	r3, [r7, #20]
 80152b6:	685b      	ldr	r3, [r3, #4]
 80152b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80152ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152bc:	429a      	cmp	r2, r3
 80152be:	d903      	bls.n	80152c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80152c0:	2301      	movs	r3, #1
 80152c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80152c6:	e1c1      	b.n	801564c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80152c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152ca:	2200      	movs	r2, #0
 80152cc:	60bb      	str	r3, [r7, #8]
 80152ce:	60fa      	str	r2, [r7, #12]
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152d4:	4a84      	ldr	r2, [pc, #528]	; (80154e8 <UART_SetConfig+0x930>)
 80152d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80152da:	b29b      	uxth	r3, r3
 80152dc:	2200      	movs	r2, #0
 80152de:	603b      	str	r3, [r7, #0]
 80152e0:	607a      	str	r2, [r7, #4]
 80152e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80152e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80152ea:	f7ea fff9 	bl	80002e0 <__aeabi_uldivmod>
 80152ee:	4602      	mov	r2, r0
 80152f0:	460b      	mov	r3, r1
 80152f2:	4610      	mov	r0, r2
 80152f4:	4619      	mov	r1, r3
 80152f6:	f04f 0200 	mov.w	r2, #0
 80152fa:	f04f 0300 	mov.w	r3, #0
 80152fe:	020b      	lsls	r3, r1, #8
 8015300:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015304:	0202      	lsls	r2, r0, #8
 8015306:	6979      	ldr	r1, [r7, #20]
 8015308:	6849      	ldr	r1, [r1, #4]
 801530a:	0849      	lsrs	r1, r1, #1
 801530c:	2000      	movs	r0, #0
 801530e:	460c      	mov	r4, r1
 8015310:	4605      	mov	r5, r0
 8015312:	eb12 0804 	adds.w	r8, r2, r4
 8015316:	eb43 0905 	adc.w	r9, r3, r5
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	2200      	movs	r2, #0
 8015320:	469a      	mov	sl, r3
 8015322:	4693      	mov	fp, r2
 8015324:	4652      	mov	r2, sl
 8015326:	465b      	mov	r3, fp
 8015328:	4640      	mov	r0, r8
 801532a:	4649      	mov	r1, r9
 801532c:	f7ea ffd8 	bl	80002e0 <__aeabi_uldivmod>
 8015330:	4602      	mov	r2, r0
 8015332:	460b      	mov	r3, r1
 8015334:	4613      	mov	r3, r2
 8015336:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801533a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801533e:	d308      	bcc.n	8015352 <UART_SetConfig+0x79a>
 8015340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015346:	d204      	bcs.n	8015352 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801534e:	60da      	str	r2, [r3, #12]
 8015350:	e17c      	b.n	801564c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8015352:	2301      	movs	r3, #1
 8015354:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015358:	e178      	b.n	801564c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	69db      	ldr	r3, [r3, #28]
 801535e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015362:	f040 80c5 	bne.w	80154f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8015366:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801536a:	2b20      	cmp	r3, #32
 801536c:	dc48      	bgt.n	8015400 <UART_SetConfig+0x848>
 801536e:	2b00      	cmp	r3, #0
 8015370:	db7b      	blt.n	801546a <UART_SetConfig+0x8b2>
 8015372:	2b20      	cmp	r3, #32
 8015374:	d879      	bhi.n	801546a <UART_SetConfig+0x8b2>
 8015376:	a201      	add	r2, pc, #4	; (adr r2, 801537c <UART_SetConfig+0x7c4>)
 8015378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801537c:	08015407 	.word	0x08015407
 8015380:	0801540f 	.word	0x0801540f
 8015384:	0801546b 	.word	0x0801546b
 8015388:	0801546b 	.word	0x0801546b
 801538c:	08015417 	.word	0x08015417
 8015390:	0801546b 	.word	0x0801546b
 8015394:	0801546b 	.word	0x0801546b
 8015398:	0801546b 	.word	0x0801546b
 801539c:	08015427 	.word	0x08015427
 80153a0:	0801546b 	.word	0x0801546b
 80153a4:	0801546b 	.word	0x0801546b
 80153a8:	0801546b 	.word	0x0801546b
 80153ac:	0801546b 	.word	0x0801546b
 80153b0:	0801546b 	.word	0x0801546b
 80153b4:	0801546b 	.word	0x0801546b
 80153b8:	0801546b 	.word	0x0801546b
 80153bc:	08015437 	.word	0x08015437
 80153c0:	0801546b 	.word	0x0801546b
 80153c4:	0801546b 	.word	0x0801546b
 80153c8:	0801546b 	.word	0x0801546b
 80153cc:	0801546b 	.word	0x0801546b
 80153d0:	0801546b 	.word	0x0801546b
 80153d4:	0801546b 	.word	0x0801546b
 80153d8:	0801546b 	.word	0x0801546b
 80153dc:	0801546b 	.word	0x0801546b
 80153e0:	0801546b 	.word	0x0801546b
 80153e4:	0801546b 	.word	0x0801546b
 80153e8:	0801546b 	.word	0x0801546b
 80153ec:	0801546b 	.word	0x0801546b
 80153f0:	0801546b 	.word	0x0801546b
 80153f4:	0801546b 	.word	0x0801546b
 80153f8:	0801546b 	.word	0x0801546b
 80153fc:	0801545d 	.word	0x0801545d
 8015400:	2b40      	cmp	r3, #64	; 0x40
 8015402:	d02e      	beq.n	8015462 <UART_SetConfig+0x8aa>
 8015404:	e031      	b.n	801546a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015406:	f7f9 fb1f 	bl	800ea48 <HAL_RCC_GetPCLK1Freq>
 801540a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801540c:	e033      	b.n	8015476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801540e:	f7f9 fb31 	bl	800ea74 <HAL_RCC_GetPCLK2Freq>
 8015412:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015414:	e02f      	b.n	8015476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801541a:	4618      	mov	r0, r3
 801541c:	f7fb fb22 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015424:	e027      	b.n	8015476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015426:	f107 0318 	add.w	r3, r7, #24
 801542a:	4618      	mov	r0, r3
 801542c:	f7fb fc6e 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015430:	69fb      	ldr	r3, [r7, #28]
 8015432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015434:	e01f      	b.n	8015476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015436:	4b2d      	ldr	r3, [pc, #180]	; (80154ec <UART_SetConfig+0x934>)
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	f003 0320 	and.w	r3, r3, #32
 801543e:	2b00      	cmp	r3, #0
 8015440:	d009      	beq.n	8015456 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015442:	4b2a      	ldr	r3, [pc, #168]	; (80154ec <UART_SetConfig+0x934>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	08db      	lsrs	r3, r3, #3
 8015448:	f003 0303 	and.w	r3, r3, #3
 801544c:	4a24      	ldr	r2, [pc, #144]	; (80154e0 <UART_SetConfig+0x928>)
 801544e:	fa22 f303 	lsr.w	r3, r2, r3
 8015452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015454:	e00f      	b.n	8015476 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8015456:	4b22      	ldr	r3, [pc, #136]	; (80154e0 <UART_SetConfig+0x928>)
 8015458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801545a:	e00c      	b.n	8015476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801545c:	4b21      	ldr	r3, [pc, #132]	; (80154e4 <UART_SetConfig+0x92c>)
 801545e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015460:	e009      	b.n	8015476 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015468:	e005      	b.n	8015476 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801546a:	2300      	movs	r3, #0
 801546c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801546e:	2301      	movs	r3, #1
 8015470:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015474:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015478:	2b00      	cmp	r3, #0
 801547a:	f000 80e7 	beq.w	801564c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015482:	4a19      	ldr	r2, [pc, #100]	; (80154e8 <UART_SetConfig+0x930>)
 8015484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015488:	461a      	mov	r2, r3
 801548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801548c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015490:	005a      	lsls	r2, r3, #1
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	085b      	lsrs	r3, r3, #1
 8015498:	441a      	add	r2, r3
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80154a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80154a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154a6:	2b0f      	cmp	r3, #15
 80154a8:	d916      	bls.n	80154d8 <UART_SetConfig+0x920>
 80154aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80154b0:	d212      	bcs.n	80154d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80154b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154b4:	b29b      	uxth	r3, r3
 80154b6:	f023 030f 	bic.w	r3, r3, #15
 80154ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80154bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154be:	085b      	lsrs	r3, r3, #1
 80154c0:	b29b      	uxth	r3, r3
 80154c2:	f003 0307 	and.w	r3, r3, #7
 80154c6:	b29a      	uxth	r2, r3
 80154c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80154ca:	4313      	orrs	r3, r2
 80154cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80154d4:	60da      	str	r2, [r3, #12]
 80154d6:	e0b9      	b.n	801564c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80154d8:	2301      	movs	r3, #1
 80154da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80154de:	e0b5      	b.n	801564c <UART_SetConfig+0xa94>
 80154e0:	03d09000 	.word	0x03d09000
 80154e4:	003d0900 	.word	0x003d0900
 80154e8:	0801addc 	.word	0x0801addc
 80154ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80154f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80154f4:	2b20      	cmp	r3, #32
 80154f6:	dc49      	bgt.n	801558c <UART_SetConfig+0x9d4>
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	db7c      	blt.n	80155f6 <UART_SetConfig+0xa3e>
 80154fc:	2b20      	cmp	r3, #32
 80154fe:	d87a      	bhi.n	80155f6 <UART_SetConfig+0xa3e>
 8015500:	a201      	add	r2, pc, #4	; (adr r2, 8015508 <UART_SetConfig+0x950>)
 8015502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015506:	bf00      	nop
 8015508:	08015593 	.word	0x08015593
 801550c:	0801559b 	.word	0x0801559b
 8015510:	080155f7 	.word	0x080155f7
 8015514:	080155f7 	.word	0x080155f7
 8015518:	080155a3 	.word	0x080155a3
 801551c:	080155f7 	.word	0x080155f7
 8015520:	080155f7 	.word	0x080155f7
 8015524:	080155f7 	.word	0x080155f7
 8015528:	080155b3 	.word	0x080155b3
 801552c:	080155f7 	.word	0x080155f7
 8015530:	080155f7 	.word	0x080155f7
 8015534:	080155f7 	.word	0x080155f7
 8015538:	080155f7 	.word	0x080155f7
 801553c:	080155f7 	.word	0x080155f7
 8015540:	080155f7 	.word	0x080155f7
 8015544:	080155f7 	.word	0x080155f7
 8015548:	080155c3 	.word	0x080155c3
 801554c:	080155f7 	.word	0x080155f7
 8015550:	080155f7 	.word	0x080155f7
 8015554:	080155f7 	.word	0x080155f7
 8015558:	080155f7 	.word	0x080155f7
 801555c:	080155f7 	.word	0x080155f7
 8015560:	080155f7 	.word	0x080155f7
 8015564:	080155f7 	.word	0x080155f7
 8015568:	080155f7 	.word	0x080155f7
 801556c:	080155f7 	.word	0x080155f7
 8015570:	080155f7 	.word	0x080155f7
 8015574:	080155f7 	.word	0x080155f7
 8015578:	080155f7 	.word	0x080155f7
 801557c:	080155f7 	.word	0x080155f7
 8015580:	080155f7 	.word	0x080155f7
 8015584:	080155f7 	.word	0x080155f7
 8015588:	080155e9 	.word	0x080155e9
 801558c:	2b40      	cmp	r3, #64	; 0x40
 801558e:	d02e      	beq.n	80155ee <UART_SetConfig+0xa36>
 8015590:	e031      	b.n	80155f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015592:	f7f9 fa59 	bl	800ea48 <HAL_RCC_GetPCLK1Freq>
 8015596:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015598:	e033      	b.n	8015602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801559a:	f7f9 fa6b 	bl	800ea74 <HAL_RCC_GetPCLK2Freq>
 801559e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80155a0:	e02f      	b.n	8015602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80155a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7fb fa5c 	bl	8010a64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80155ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155b0:	e027      	b.n	8015602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80155b2:	f107 0318 	add.w	r3, r7, #24
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7fb fba8 	bl	8010d0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80155bc:	69fb      	ldr	r3, [r7, #28]
 80155be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155c0:	e01f      	b.n	8015602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80155c2:	4b2d      	ldr	r3, [pc, #180]	; (8015678 <UART_SetConfig+0xac0>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	f003 0320 	and.w	r3, r3, #32
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d009      	beq.n	80155e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80155ce:	4b2a      	ldr	r3, [pc, #168]	; (8015678 <UART_SetConfig+0xac0>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	08db      	lsrs	r3, r3, #3
 80155d4:	f003 0303 	and.w	r3, r3, #3
 80155d8:	4a28      	ldr	r2, [pc, #160]	; (801567c <UART_SetConfig+0xac4>)
 80155da:	fa22 f303 	lsr.w	r3, r2, r3
 80155de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80155e0:	e00f      	b.n	8015602 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80155e2:	4b26      	ldr	r3, [pc, #152]	; (801567c <UART_SetConfig+0xac4>)
 80155e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155e6:	e00c      	b.n	8015602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80155e8:	4b25      	ldr	r3, [pc, #148]	; (8015680 <UART_SetConfig+0xac8>)
 80155ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155ec:	e009      	b.n	8015602 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80155ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80155f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80155f4:	e005      	b.n	8015602 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80155f6:	2300      	movs	r3, #0
 80155f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80155fa:	2301      	movs	r3, #1
 80155fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015600:	bf00      	nop
    }

    if (pclk != 0U)
 8015602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015604:	2b00      	cmp	r3, #0
 8015606:	d021      	beq.n	801564c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801560c:	4a1d      	ldr	r2, [pc, #116]	; (8015684 <UART_SetConfig+0xacc>)
 801560e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015612:	461a      	mov	r2, r3
 8015614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015616:	fbb3 f2f2 	udiv	r2, r3, r2
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	685b      	ldr	r3, [r3, #4]
 801561e:	085b      	lsrs	r3, r3, #1
 8015620:	441a      	add	r2, r3
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	fbb2 f3f3 	udiv	r3, r2, r3
 801562a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801562e:	2b0f      	cmp	r3, #15
 8015630:	d909      	bls.n	8015646 <UART_SetConfig+0xa8e>
 8015632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015638:	d205      	bcs.n	8015646 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801563c:	b29a      	uxth	r2, r3
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	60da      	str	r2, [r3, #12]
 8015644:	e002      	b.n	801564c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015646:	2301      	movs	r3, #1
 8015648:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	2201      	movs	r2, #1
 8015650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	2201      	movs	r2, #1
 8015658:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	2200      	movs	r2, #0
 8015660:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015662:	697b      	ldr	r3, [r7, #20]
 8015664:	2200      	movs	r2, #0
 8015666:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015668:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801566c:	4618      	mov	r0, r3
 801566e:	3748      	adds	r7, #72	; 0x48
 8015670:	46bd      	mov	sp, r7
 8015672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015676:	bf00      	nop
 8015678:	58024400 	.word	0x58024400
 801567c:	03d09000 	.word	0x03d09000
 8015680:	003d0900 	.word	0x003d0900
 8015684:	0801addc 	.word	0x0801addc

08015688 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015688:	b480      	push	{r7}
 801568a:	b083      	sub	sp, #12
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015694:	f003 0308 	and.w	r3, r3, #8
 8015698:	2b00      	cmp	r3, #0
 801569a:	d00a      	beq.n	80156b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	685b      	ldr	r3, [r3, #4]
 80156a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	430a      	orrs	r2, r1
 80156b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156b6:	f003 0301 	and.w	r3, r3, #1
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d00a      	beq.n	80156d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	430a      	orrs	r2, r1
 80156d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156d8:	f003 0302 	and.w	r3, r3, #2
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d00a      	beq.n	80156f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	685b      	ldr	r3, [r3, #4]
 80156e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	430a      	orrs	r2, r1
 80156f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156fa:	f003 0304 	and.w	r3, r3, #4
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d00a      	beq.n	8015718 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	685b      	ldr	r3, [r3, #4]
 8015708:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	430a      	orrs	r2, r1
 8015716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801571c:	f003 0310 	and.w	r3, r3, #16
 8015720:	2b00      	cmp	r3, #0
 8015722:	d00a      	beq.n	801573a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	689b      	ldr	r3, [r3, #8]
 801572a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	430a      	orrs	r2, r1
 8015738:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801573e:	f003 0320 	and.w	r3, r3, #32
 8015742:	2b00      	cmp	r3, #0
 8015744:	d00a      	beq.n	801575c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	689b      	ldr	r3, [r3, #8]
 801574c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	430a      	orrs	r2, r1
 801575a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015764:	2b00      	cmp	r3, #0
 8015766:	d01a      	beq.n	801579e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	685b      	ldr	r3, [r3, #4]
 801576e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	430a      	orrs	r2, r1
 801577c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015786:	d10a      	bne.n	801579e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	430a      	orrs	r2, r1
 801579c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d00a      	beq.n	80157c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	430a      	orrs	r2, r1
 80157be:	605a      	str	r2, [r3, #4]
  }
}
 80157c0:	bf00      	nop
 80157c2:	370c      	adds	r7, #12
 80157c4:	46bd      	mov	sp, r7
 80157c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ca:	4770      	bx	lr

080157cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b098      	sub	sp, #96	; 0x60
 80157d0:	af02      	add	r7, sp, #8
 80157d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	2200      	movs	r2, #0
 80157d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80157dc:	f7f0 f88e 	bl	80058fc <HAL_GetTick>
 80157e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	f003 0308 	and.w	r3, r3, #8
 80157ec:	2b08      	cmp	r3, #8
 80157ee:	d12f      	bne.n	8015850 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80157f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80157f4:	9300      	str	r3, [sp, #0]
 80157f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157f8:	2200      	movs	r2, #0
 80157fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f000 f88e 	bl	8015920 <UART_WaitOnFlagUntilTimeout>
 8015804:	4603      	mov	r3, r0
 8015806:	2b00      	cmp	r3, #0
 8015808:	d022      	beq.n	8015850 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015812:	e853 3f00 	ldrex	r3, [r3]
 8015816:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801581a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801581e:	653b      	str	r3, [r7, #80]	; 0x50
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	461a      	mov	r2, r3
 8015826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015828:	647b      	str	r3, [r7, #68]	; 0x44
 801582a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801582c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801582e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015830:	e841 2300 	strex	r3, r2, [r1]
 8015834:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015838:	2b00      	cmp	r3, #0
 801583a:	d1e6      	bne.n	801580a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2220      	movs	r2, #32
 8015840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2200      	movs	r2, #0
 8015848:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801584c:	2303      	movs	r3, #3
 801584e:	e063      	b.n	8015918 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	f003 0304 	and.w	r3, r3, #4
 801585a:	2b04      	cmp	r3, #4
 801585c:	d149      	bne.n	80158f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801585e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015862:	9300      	str	r3, [sp, #0]
 8015864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015866:	2200      	movs	r2, #0
 8015868:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f000 f857 	bl	8015920 <UART_WaitOnFlagUntilTimeout>
 8015872:	4603      	mov	r3, r0
 8015874:	2b00      	cmp	r3, #0
 8015876:	d03c      	beq.n	80158f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015880:	e853 3f00 	ldrex	r3, [r3]
 8015884:	623b      	str	r3, [r7, #32]
   return(result);
 8015886:	6a3b      	ldr	r3, [r7, #32]
 8015888:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801588c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	461a      	mov	r2, r3
 8015894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015896:	633b      	str	r3, [r7, #48]	; 0x30
 8015898:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801589a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801589c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801589e:	e841 2300 	strex	r3, r2, [r1]
 80158a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80158a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d1e6      	bne.n	8015878 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	3308      	adds	r3, #8
 80158b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	e853 3f00 	ldrex	r3, [r3]
 80158b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	f023 0301 	bic.w	r3, r3, #1
 80158c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	3308      	adds	r3, #8
 80158c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80158ca:	61fa      	str	r2, [r7, #28]
 80158cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158ce:	69b9      	ldr	r1, [r7, #24]
 80158d0:	69fa      	ldr	r2, [r7, #28]
 80158d2:	e841 2300 	strex	r3, r2, [r1]
 80158d6:	617b      	str	r3, [r7, #20]
   return(result);
 80158d8:	697b      	ldr	r3, [r7, #20]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d1e5      	bne.n	80158aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	2220      	movs	r2, #32
 80158e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2200      	movs	r2, #0
 80158ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80158ee:	2303      	movs	r3, #3
 80158f0:	e012      	b.n	8015918 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2220      	movs	r2, #32
 80158f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2220      	movs	r2, #32
 80158fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	2200      	movs	r2, #0
 8015906:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2200      	movs	r2, #0
 801590c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	2200      	movs	r2, #0
 8015912:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015916:	2300      	movs	r3, #0
}
 8015918:	4618      	mov	r0, r3
 801591a:	3758      	adds	r7, #88	; 0x58
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}

08015920 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b084      	sub	sp, #16
 8015924:	af00      	add	r7, sp, #0
 8015926:	60f8      	str	r0, [r7, #12]
 8015928:	60b9      	str	r1, [r7, #8]
 801592a:	603b      	str	r3, [r7, #0]
 801592c:	4613      	mov	r3, r2
 801592e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015930:	e04f      	b.n	80159d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015932:	69bb      	ldr	r3, [r7, #24]
 8015934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015938:	d04b      	beq.n	80159d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801593a:	f7ef ffdf 	bl	80058fc <HAL_GetTick>
 801593e:	4602      	mov	r2, r0
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	1ad3      	subs	r3, r2, r3
 8015944:	69ba      	ldr	r2, [r7, #24]
 8015946:	429a      	cmp	r2, r3
 8015948:	d302      	bcc.n	8015950 <UART_WaitOnFlagUntilTimeout+0x30>
 801594a:	69bb      	ldr	r3, [r7, #24]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d101      	bne.n	8015954 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015950:	2303      	movs	r3, #3
 8015952:	e04e      	b.n	80159f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	f003 0304 	and.w	r3, r3, #4
 801595e:	2b00      	cmp	r3, #0
 8015960:	d037      	beq.n	80159d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015962:	68bb      	ldr	r3, [r7, #8]
 8015964:	2b80      	cmp	r3, #128	; 0x80
 8015966:	d034      	beq.n	80159d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015968:	68bb      	ldr	r3, [r7, #8]
 801596a:	2b40      	cmp	r3, #64	; 0x40
 801596c:	d031      	beq.n	80159d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	69db      	ldr	r3, [r3, #28]
 8015974:	f003 0308 	and.w	r3, r3, #8
 8015978:	2b08      	cmp	r3, #8
 801597a:	d110      	bne.n	801599e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2208      	movs	r2, #8
 8015982:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015984:	68f8      	ldr	r0, [r7, #12]
 8015986:	f000 f95b 	bl	8015c40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	2208      	movs	r2, #8
 801598e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	2200      	movs	r2, #0
 8015996:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 801599a:	2301      	movs	r3, #1
 801599c:	e029      	b.n	80159f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	69db      	ldr	r3, [r3, #28]
 80159a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80159a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80159ac:	d111      	bne.n	80159d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80159b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80159b8:	68f8      	ldr	r0, [r7, #12]
 80159ba:	f000 f941 	bl	8015c40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	2220      	movs	r2, #32
 80159c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2200      	movs	r2, #0
 80159ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80159ce:	2303      	movs	r3, #3
 80159d0:	e00f      	b.n	80159f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	69da      	ldr	r2, [r3, #28]
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	4013      	ands	r3, r2
 80159dc:	68ba      	ldr	r2, [r7, #8]
 80159de:	429a      	cmp	r2, r3
 80159e0:	bf0c      	ite	eq
 80159e2:	2301      	moveq	r3, #1
 80159e4:	2300      	movne	r3, #0
 80159e6:	b2db      	uxtb	r3, r3
 80159e8:	461a      	mov	r2, r3
 80159ea:	79fb      	ldrb	r3, [r7, #7]
 80159ec:	429a      	cmp	r2, r3
 80159ee:	d0a0      	beq.n	8015932 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80159f0:	2300      	movs	r3, #0
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3710      	adds	r7, #16
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
	...

080159fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80159fc:	b480      	push	{r7}
 80159fe:	b0a3      	sub	sp, #140	; 0x8c
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	60f8      	str	r0, [r7, #12]
 8015a04:	60b9      	str	r1, [r7, #8]
 8015a06:	4613      	mov	r3, r2
 8015a08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	68ba      	ldr	r2, [r7, #8]
 8015a0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	88fa      	ldrh	r2, [r7, #6]
 8015a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	88fa      	ldrh	r2, [r7, #6]
 8015a1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	2200      	movs	r2, #0
 8015a24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	689b      	ldr	r3, [r3, #8]
 8015a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a2e:	d10e      	bne.n	8015a4e <UART_Start_Receive_IT+0x52>
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	691b      	ldr	r3, [r3, #16]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d105      	bne.n	8015a44 <UART_Start_Receive_IT+0x48>
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a42:	e02d      	b.n	8015aa0 <UART_Start_Receive_IT+0xa4>
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	22ff      	movs	r2, #255	; 0xff
 8015a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a4c:	e028      	b.n	8015aa0 <UART_Start_Receive_IT+0xa4>
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	689b      	ldr	r3, [r3, #8]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d10d      	bne.n	8015a72 <UART_Start_Receive_IT+0x76>
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	691b      	ldr	r3, [r3, #16]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d104      	bne.n	8015a68 <UART_Start_Receive_IT+0x6c>
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	22ff      	movs	r2, #255	; 0xff
 8015a62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a66:	e01b      	b.n	8015aa0 <UART_Start_Receive_IT+0xa4>
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	227f      	movs	r2, #127	; 0x7f
 8015a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a70:	e016      	b.n	8015aa0 <UART_Start_Receive_IT+0xa4>
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	689b      	ldr	r3, [r3, #8]
 8015a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015a7a:	d10d      	bne.n	8015a98 <UART_Start_Receive_IT+0x9c>
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	691b      	ldr	r3, [r3, #16]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d104      	bne.n	8015a8e <UART_Start_Receive_IT+0x92>
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	227f      	movs	r2, #127	; 0x7f
 8015a88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a8c:	e008      	b.n	8015aa0 <UART_Start_Receive_IT+0xa4>
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	223f      	movs	r2, #63	; 0x3f
 8015a92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015a96:	e003      	b.n	8015aa0 <UART_Start_Receive_IT+0xa4>
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	2222      	movs	r2, #34	; 0x22
 8015aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	3308      	adds	r3, #8
 8015ab6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015aba:	e853 3f00 	ldrex	r3, [r3]
 8015abe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015ac2:	f043 0301 	orr.w	r3, r3, #1
 8015ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	3308      	adds	r3, #8
 8015ad0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015ad4:	673a      	str	r2, [r7, #112]	; 0x70
 8015ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ad8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015ada:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015adc:	e841 2300 	strex	r3, r2, [r1]
 8015ae0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d1e3      	bne.n	8015ab0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015af0:	d14f      	bne.n	8015b92 <UART_Start_Receive_IT+0x196>
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015af8:	88fa      	ldrh	r2, [r7, #6]
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d349      	bcc.n	8015b92 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	689b      	ldr	r3, [r3, #8]
 8015b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b06:	d107      	bne.n	8015b18 <UART_Start_Receive_IT+0x11c>
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	691b      	ldr	r3, [r3, #16]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d103      	bne.n	8015b18 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	4a47      	ldr	r2, [pc, #284]	; (8015c30 <UART_Start_Receive_IT+0x234>)
 8015b14:	675a      	str	r2, [r3, #116]	; 0x74
 8015b16:	e002      	b.n	8015b1e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	4a46      	ldr	r2, [pc, #280]	; (8015c34 <UART_Start_Receive_IT+0x238>)
 8015b1c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	691b      	ldr	r3, [r3, #16]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d01a      	beq.n	8015b5c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b2e:	e853 3f00 	ldrex	r3, [r3]
 8015b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	461a      	mov	r2, r3
 8015b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015b4a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015b4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015b50:	e841 2300 	strex	r3, r2, [r1]
 8015b54:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d1e4      	bne.n	8015b26 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	3308      	adds	r3, #8
 8015b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b66:	e853 3f00 	ldrex	r3, [r3]
 8015b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015b72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	3308      	adds	r3, #8
 8015b7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015b7c:	64ba      	str	r2, [r7, #72]	; 0x48
 8015b7e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015b84:	e841 2300 	strex	r3, r2, [r1]
 8015b88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d1e5      	bne.n	8015b5c <UART_Start_Receive_IT+0x160>
 8015b90:	e046      	b.n	8015c20 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	689b      	ldr	r3, [r3, #8]
 8015b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b9a:	d107      	bne.n	8015bac <UART_Start_Receive_IT+0x1b0>
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	691b      	ldr	r3, [r3, #16]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d103      	bne.n	8015bac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	4a24      	ldr	r2, [pc, #144]	; (8015c38 <UART_Start_Receive_IT+0x23c>)
 8015ba8:	675a      	str	r2, [r3, #116]	; 0x74
 8015baa:	e002      	b.n	8015bb2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	4a23      	ldr	r2, [pc, #140]	; (8015c3c <UART_Start_Receive_IT+0x240>)
 8015bb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	691b      	ldr	r3, [r3, #16]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d019      	beq.n	8015bee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc2:	e853 3f00 	ldrex	r3, [r3]
 8015bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8015bce:	677b      	str	r3, [r7, #116]	; 0x74
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	461a      	mov	r2, r3
 8015bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8015bda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015be0:	e841 2300 	strex	r3, r2, [r1]
 8015be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d1e6      	bne.n	8015bba <UART_Start_Receive_IT+0x1be>
 8015bec:	e018      	b.n	8015c20 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	e853 3f00 	ldrex	r3, [r3]
 8015bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8015bfc:	693b      	ldr	r3, [r7, #16]
 8015bfe:	f043 0320 	orr.w	r3, r3, #32
 8015c02:	67bb      	str	r3, [r7, #120]	; 0x78
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	461a      	mov	r2, r3
 8015c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c0c:	623b      	str	r3, [r7, #32]
 8015c0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c10:	69f9      	ldr	r1, [r7, #28]
 8015c12:	6a3a      	ldr	r2, [r7, #32]
 8015c14:	e841 2300 	strex	r3, r2, [r1]
 8015c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8015c1a:	69bb      	ldr	r3, [r7, #24]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d1e6      	bne.n	8015bee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015c20:	2300      	movs	r3, #0
}
 8015c22:	4618      	mov	r0, r3
 8015c24:	378c      	adds	r7, #140	; 0x8c
 8015c26:	46bd      	mov	sp, r7
 8015c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2c:	4770      	bx	lr
 8015c2e:	bf00      	nop
 8015c30:	08016461 	.word	0x08016461
 8015c34:	08016101 	.word	0x08016101
 8015c38:	08015f49 	.word	0x08015f49
 8015c3c:	08015d91 	.word	0x08015d91

08015c40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015c40:	b480      	push	{r7}
 8015c42:	b095      	sub	sp, #84	; 0x54
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c50:	e853 3f00 	ldrex	r3, [r3]
 8015c54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	461a      	mov	r2, r3
 8015c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c66:	643b      	str	r3, [r7, #64]	; 0x40
 8015c68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015c6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c6e:	e841 2300 	strex	r3, r2, [r1]
 8015c72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d1e6      	bne.n	8015c48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	3308      	adds	r3, #8
 8015c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c82:	6a3b      	ldr	r3, [r7, #32]
 8015c84:	e853 3f00 	ldrex	r3, [r3]
 8015c88:	61fb      	str	r3, [r7, #28]
   return(result);
 8015c8a:	69fa      	ldr	r2, [r7, #28]
 8015c8c:	4b1e      	ldr	r3, [pc, #120]	; (8015d08 <UART_EndRxTransfer+0xc8>)
 8015c8e:	4013      	ands	r3, r2
 8015c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	3308      	adds	r3, #8
 8015c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ca2:	e841 2300 	strex	r3, r2, [r1]
 8015ca6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d1e5      	bne.n	8015c7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015cb2:	2b01      	cmp	r3, #1
 8015cb4:	d118      	bne.n	8015ce8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	e853 3f00 	ldrex	r3, [r3]
 8015cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	f023 0310 	bic.w	r3, r3, #16
 8015cca:	647b      	str	r3, [r7, #68]	; 0x44
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	461a      	mov	r2, r3
 8015cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cd4:	61bb      	str	r3, [r7, #24]
 8015cd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cd8:	6979      	ldr	r1, [r7, #20]
 8015cda:	69ba      	ldr	r2, [r7, #24]
 8015cdc:	e841 2300 	strex	r3, r2, [r1]
 8015ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8015ce2:	693b      	ldr	r3, [r7, #16]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d1e6      	bne.n	8015cb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2220      	movs	r2, #32
 8015cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015cfc:	bf00      	nop
 8015cfe:	3754      	adds	r7, #84	; 0x54
 8015d00:	46bd      	mov	sp, r7
 8015d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d06:	4770      	bx	lr
 8015d08:	effffffe 	.word	0xeffffffe

08015d0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	2200      	movs	r2, #0
 8015d26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015d2a:	68f8      	ldr	r0, [r7, #12]
 8015d2c:	f7fe ff2e 	bl	8014b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015d30:	bf00      	nop
 8015d32:	3710      	adds	r7, #16
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b088      	sub	sp, #32
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	e853 3f00 	ldrex	r3, [r3]
 8015d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8015d4e:	68bb      	ldr	r3, [r7, #8]
 8015d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d54:	61fb      	str	r3, [r7, #28]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	69fb      	ldr	r3, [r7, #28]
 8015d5e:	61bb      	str	r3, [r7, #24]
 8015d60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d62:	6979      	ldr	r1, [r7, #20]
 8015d64:	69ba      	ldr	r2, [r7, #24]
 8015d66:	e841 2300 	strex	r3, r2, [r1]
 8015d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d1e6      	bne.n	8015d40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	2220      	movs	r2, #32
 8015d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f7fe fef9 	bl	8014b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015d86:	bf00      	nop
 8015d88:	3720      	adds	r7, #32
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}
	...

08015d90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b09c      	sub	sp, #112	; 0x70
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015d9e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015da8:	2b22      	cmp	r3, #34	; 0x22
 8015daa:	f040 80be 	bne.w	8015f2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015db4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015db8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015dbc:	b2d9      	uxtb	r1, r3
 8015dbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015dc2:	b2da      	uxtb	r2, r3
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dc8:	400a      	ands	r2, r1
 8015dca:	b2d2      	uxtb	r2, r2
 8015dcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dd2:	1c5a      	adds	r2, r3, #1
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015dde:	b29b      	uxth	r3, r3
 8015de0:	3b01      	subs	r3, #1
 8015de2:	b29a      	uxth	r2, r3
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015df0:	b29b      	uxth	r3, r3
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	f040 80a1 	bne.w	8015f3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e00:	e853 3f00 	ldrex	r3, [r3]
 8015e04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015e0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	461a      	mov	r2, r3
 8015e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015e16:	65bb      	str	r3, [r7, #88]	; 0x58
 8015e18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015e1e:	e841 2300 	strex	r3, r2, [r1]
 8015e22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d1e6      	bne.n	8015df8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	3308      	adds	r3, #8
 8015e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e34:	e853 3f00 	ldrex	r3, [r3]
 8015e38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e3c:	f023 0301 	bic.w	r3, r3, #1
 8015e40:	667b      	str	r3, [r7, #100]	; 0x64
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	3308      	adds	r3, #8
 8015e48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015e4a:	647a      	str	r2, [r7, #68]	; 0x44
 8015e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e52:	e841 2300 	strex	r3, r2, [r1]
 8015e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d1e5      	bne.n	8015e2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	2220      	movs	r2, #32
 8015e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	2200      	movs	r2, #0
 8015e6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	4a33      	ldr	r2, [pc, #204]	; (8015f44 <UART_RxISR_8BIT+0x1b4>)
 8015e78:	4293      	cmp	r3, r2
 8015e7a:	d01f      	beq.n	8015ebc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d018      	beq.n	8015ebc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e92:	e853 3f00 	ldrex	r3, [r3]
 8015e96:	623b      	str	r3, [r7, #32]
   return(result);
 8015e98:	6a3b      	ldr	r3, [r7, #32]
 8015e9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	461a      	mov	r2, r3
 8015ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8015eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015eac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015eb0:	e841 2300 	strex	r3, r2, [r1]
 8015eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d1e6      	bne.n	8015e8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ec0:	2b01      	cmp	r3, #1
 8015ec2:	d12e      	bne.n	8015f22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	e853 3f00 	ldrex	r3, [r3]
 8015ed6:	60fb      	str	r3, [r7, #12]
   return(result);
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	f023 0310 	bic.w	r3, r3, #16
 8015ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	461a      	mov	r2, r3
 8015ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ee8:	61fb      	str	r3, [r7, #28]
 8015eea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015eec:	69b9      	ldr	r1, [r7, #24]
 8015eee:	69fa      	ldr	r2, [r7, #28]
 8015ef0:	e841 2300 	strex	r3, r2, [r1]
 8015ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8015ef6:	697b      	ldr	r3, [r7, #20]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d1e6      	bne.n	8015eca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	69db      	ldr	r3, [r3, #28]
 8015f02:	f003 0310 	and.w	r3, r3, #16
 8015f06:	2b10      	cmp	r3, #16
 8015f08:	d103      	bne.n	8015f12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	2210      	movs	r2, #16
 8015f10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015f18:	4619      	mov	r1, r3
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f7fe fe40 	bl	8014ba0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015f20:	e00b      	b.n	8015f3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	f7ec fda6 	bl	8002a74 <HAL_UART_RxCpltCallback>
}
 8015f28:	e007      	b.n	8015f3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	699a      	ldr	r2, [r3, #24]
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	f042 0208 	orr.w	r2, r2, #8
 8015f38:	619a      	str	r2, [r3, #24]
}
 8015f3a:	bf00      	nop
 8015f3c:	3770      	adds	r7, #112	; 0x70
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	58000c00 	.word	0x58000c00

08015f48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b09c      	sub	sp, #112	; 0x70
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015f56:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f60:	2b22      	cmp	r3, #34	; 0x22
 8015f62:	f040 80be 	bne.w	80160e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f74:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8015f76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8015f7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015f7e:	4013      	ands	r3, r2
 8015f80:	b29a      	uxth	r2, r3
 8015f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015f84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f8a:	1c9a      	adds	r2, r3, #2
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f96:	b29b      	uxth	r3, r3
 8015f98:	3b01      	subs	r3, #1
 8015f9a:	b29a      	uxth	r2, r3
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015fa8:	b29b      	uxth	r3, r3
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	f040 80a1 	bne.w	80160f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015fb8:	e853 3f00 	ldrex	r3, [r3]
 8015fbc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	461a      	mov	r2, r3
 8015fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015fce:	657b      	str	r3, [r7, #84]	; 0x54
 8015fd0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015fd6:	e841 2300 	strex	r3, r2, [r1]
 8015fda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d1e6      	bne.n	8015fb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	3308      	adds	r3, #8
 8015fe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fec:	e853 3f00 	ldrex	r3, [r3]
 8015ff0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff4:	f023 0301 	bic.w	r3, r3, #1
 8015ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	3308      	adds	r3, #8
 8016000:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016002:	643a      	str	r2, [r7, #64]	; 0x40
 8016004:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801600a:	e841 2300 	strex	r3, r2, [r1]
 801600e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016012:	2b00      	cmp	r3, #0
 8016014:	d1e5      	bne.n	8015fe2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2220      	movs	r2, #32
 801601a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2200      	movs	r2, #0
 8016022:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2200      	movs	r2, #0
 8016028:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	4a33      	ldr	r2, [pc, #204]	; (80160fc <UART_RxISR_16BIT+0x1b4>)
 8016030:	4293      	cmp	r3, r2
 8016032:	d01f      	beq.n	8016074 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801603e:	2b00      	cmp	r3, #0
 8016040:	d018      	beq.n	8016074 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016048:	6a3b      	ldr	r3, [r7, #32]
 801604a:	e853 3f00 	ldrex	r3, [r3]
 801604e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016050:	69fb      	ldr	r3, [r7, #28]
 8016052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	461a      	mov	r2, r3
 801605e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016062:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016068:	e841 2300 	strex	r3, r2, [r1]
 801606c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016070:	2b00      	cmp	r3, #0
 8016072:	d1e6      	bne.n	8016042 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016078:	2b01      	cmp	r3, #1
 801607a:	d12e      	bne.n	80160da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	2200      	movs	r2, #0
 8016080:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	e853 3f00 	ldrex	r3, [r3]
 801608e:	60bb      	str	r3, [r7, #8]
   return(result);
 8016090:	68bb      	ldr	r3, [r7, #8]
 8016092:	f023 0310 	bic.w	r3, r3, #16
 8016096:	65bb      	str	r3, [r7, #88]	; 0x58
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	461a      	mov	r2, r3
 801609e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80160a0:	61bb      	str	r3, [r7, #24]
 80160a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160a4:	6979      	ldr	r1, [r7, #20]
 80160a6:	69ba      	ldr	r2, [r7, #24]
 80160a8:	e841 2300 	strex	r3, r2, [r1]
 80160ac:	613b      	str	r3, [r7, #16]
   return(result);
 80160ae:	693b      	ldr	r3, [r7, #16]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d1e6      	bne.n	8016082 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	69db      	ldr	r3, [r3, #28]
 80160ba:	f003 0310 	and.w	r3, r3, #16
 80160be:	2b10      	cmp	r3, #16
 80160c0:	d103      	bne.n	80160ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	2210      	movs	r2, #16
 80160c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80160d0:	4619      	mov	r1, r3
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f7fe fd64 	bl	8014ba0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80160d8:	e00b      	b.n	80160f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f7ec fcca 	bl	8002a74 <HAL_UART_RxCpltCallback>
}
 80160e0:	e007      	b.n	80160f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	699a      	ldr	r2, [r3, #24]
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	f042 0208 	orr.w	r2, r2, #8
 80160f0:	619a      	str	r2, [r3, #24]
}
 80160f2:	bf00      	nop
 80160f4:	3770      	adds	r7, #112	; 0x70
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}
 80160fa:	bf00      	nop
 80160fc:	58000c00 	.word	0x58000c00

08016100 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b0ac      	sub	sp, #176	; 0xb0
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801610e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	69db      	ldr	r3, [r3, #28]
 8016118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	689b      	ldr	r3, [r3, #8]
 801612c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016136:	2b22      	cmp	r3, #34	; 0x22
 8016138:	f040 8180 	bne.w	801643c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016142:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016146:	e123      	b.n	8016390 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801614e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016152:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8016156:	b2d9      	uxtb	r1, r3
 8016158:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801615c:	b2da      	uxtb	r2, r3
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016162:	400a      	ands	r2, r1
 8016164:	b2d2      	uxtb	r2, r2
 8016166:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801616c:	1c5a      	adds	r2, r3, #1
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016178:	b29b      	uxth	r3, r3
 801617a:	3b01      	subs	r3, #1
 801617c:	b29a      	uxth	r2, r3
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	69db      	ldr	r3, [r3, #28]
 801618a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801618e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016192:	f003 0307 	and.w	r3, r3, #7
 8016196:	2b00      	cmp	r3, #0
 8016198:	d053      	beq.n	8016242 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801619a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801619e:	f003 0301 	and.w	r3, r3, #1
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d011      	beq.n	80161ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80161a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80161aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d00b      	beq.n	80161ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	2201      	movs	r2, #1
 80161b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161c0:	f043 0201 	orr.w	r2, r3, #1
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80161ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161ce:	f003 0302 	and.w	r3, r3, #2
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d011      	beq.n	80161fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80161d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80161da:	f003 0301 	and.w	r3, r3, #1
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d00b      	beq.n	80161fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	2202      	movs	r2, #2
 80161e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161f0:	f043 0204 	orr.w	r2, r3, #4
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80161fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80161fe:	f003 0304 	and.w	r3, r3, #4
 8016202:	2b00      	cmp	r3, #0
 8016204:	d011      	beq.n	801622a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801620a:	f003 0301 	and.w	r3, r3, #1
 801620e:	2b00      	cmp	r3, #0
 8016210:	d00b      	beq.n	801622a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	2204      	movs	r2, #4
 8016218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016220:	f043 0202 	orr.w	r2, r3, #2
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016230:	2b00      	cmp	r3, #0
 8016232:	d006      	beq.n	8016242 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f7fe fca9 	bl	8014b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	2200      	movs	r2, #0
 801623e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016248:	b29b      	uxth	r3, r3
 801624a:	2b00      	cmp	r3, #0
 801624c:	f040 80a0 	bne.w	8016390 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016258:	e853 3f00 	ldrex	r3, [r3]
 801625c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801625e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	461a      	mov	r2, r3
 801626e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016272:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016274:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016276:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016278:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801627a:	e841 2300 	strex	r3, r2, [r1]
 801627e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8016280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016282:	2b00      	cmp	r3, #0
 8016284:	d1e4      	bne.n	8016250 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	3308      	adds	r3, #8
 801628c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801628e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016290:	e853 3f00 	ldrex	r3, [r3]
 8016294:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016298:	4b6e      	ldr	r3, [pc, #440]	; (8016454 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801629a:	4013      	ands	r3, r2
 801629c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	3308      	adds	r3, #8
 80162a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80162aa:	66ba      	str	r2, [r7, #104]	; 0x68
 80162ac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162ae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80162b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80162b2:	e841 2300 	strex	r3, r2, [r1]
 80162b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80162b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d1e3      	bne.n	8016286 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2220      	movs	r2, #32
 80162c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	2200      	movs	r2, #0
 80162ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	2200      	movs	r2, #0
 80162d0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	4a60      	ldr	r2, [pc, #384]	; (8016458 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80162d8:	4293      	cmp	r3, r2
 80162da:	d021      	beq.n	8016320 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	685b      	ldr	r3, [r3, #4]
 80162e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d01a      	beq.n	8016320 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80162f2:	e853 3f00 	ldrex	r3, [r3]
 80162f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80162f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80162fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80162fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	461a      	mov	r2, r3
 8016308:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801630c:	657b      	str	r3, [r7, #84]	; 0x54
 801630e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016310:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016312:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016314:	e841 2300 	strex	r3, r2, [r1]
 8016318:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801631a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801631c:	2b00      	cmp	r3, #0
 801631e:	d1e4      	bne.n	80162ea <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016324:	2b01      	cmp	r3, #1
 8016326:	d130      	bne.n	801638a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	2200      	movs	r2, #0
 801632c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016336:	e853 3f00 	ldrex	r3, [r3]
 801633a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633e:	f023 0310 	bic.w	r3, r3, #16
 8016342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	461a      	mov	r2, r3
 801634c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016350:	643b      	str	r3, [r7, #64]	; 0x40
 8016352:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016358:	e841 2300 	strex	r3, r2, [r1]
 801635c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016360:	2b00      	cmp	r3, #0
 8016362:	d1e4      	bne.n	801632e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	69db      	ldr	r3, [r3, #28]
 801636a:	f003 0310 	and.w	r3, r3, #16
 801636e:	2b10      	cmp	r3, #16
 8016370:	d103      	bne.n	801637a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	2210      	movs	r2, #16
 8016378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016380:	4619      	mov	r1, r3
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f7fe fc0c 	bl	8014ba0 <HAL_UARTEx_RxEventCallback>
 8016388:	e002      	b.n	8016390 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7ec fb72 	bl	8002a74 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016390:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016394:	2b00      	cmp	r3, #0
 8016396:	d006      	beq.n	80163a6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8016398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801639c:	f003 0320 	and.w	r3, r3, #32
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	f47f aed1 	bne.w	8016148 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80163ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80163b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d049      	beq.n	801644c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80163be:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d242      	bcs.n	801644c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	3308      	adds	r3, #8
 80163cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ce:	6a3b      	ldr	r3, [r7, #32]
 80163d0:	e853 3f00 	ldrex	r3, [r3]
 80163d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80163d6:	69fb      	ldr	r3, [r7, #28]
 80163d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80163dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	3308      	adds	r3, #8
 80163e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80163ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80163ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80163f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163f2:	e841 2300 	strex	r3, r2, [r1]
 80163f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80163f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d1e3      	bne.n	80163c6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	4a16      	ldr	r2, [pc, #88]	; (801645c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8016402:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	e853 3f00 	ldrex	r3, [r3]
 8016410:	60bb      	str	r3, [r7, #8]
   return(result);
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	f043 0320 	orr.w	r3, r3, #32
 8016418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	461a      	mov	r2, r3
 8016422:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016426:	61bb      	str	r3, [r7, #24]
 8016428:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801642a:	6979      	ldr	r1, [r7, #20]
 801642c:	69ba      	ldr	r2, [r7, #24]
 801642e:	e841 2300 	strex	r3, r2, [r1]
 8016432:	613b      	str	r3, [r7, #16]
   return(result);
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d1e4      	bne.n	8016404 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801643a:	e007      	b.n	801644c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	699a      	ldr	r2, [r3, #24]
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	f042 0208 	orr.w	r2, r2, #8
 801644a:	619a      	str	r2, [r3, #24]
}
 801644c:	bf00      	nop
 801644e:	37b0      	adds	r7, #176	; 0xb0
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}
 8016454:	effffffe 	.word	0xeffffffe
 8016458:	58000c00 	.word	0x58000c00
 801645c:	08015d91 	.word	0x08015d91

08016460 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b0ae      	sub	sp, #184	; 0xb8
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801646e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	69db      	ldr	r3, [r3, #28]
 8016478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	689b      	ldr	r3, [r3, #8]
 801648c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016496:	2b22      	cmp	r3, #34	; 0x22
 8016498:	f040 8184 	bne.w	80167a4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80164a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80164a6:	e127      	b.n	80166f8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80164ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80164be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80164c2:	4013      	ands	r3, r2
 80164c4:	b29a      	uxth	r2, r3
 80164c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80164ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164d0:	1c9a      	adds	r2, r3, #2
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80164dc:	b29b      	uxth	r3, r3
 80164de:	3b01      	subs	r3, #1
 80164e0:	b29a      	uxth	r2, r3
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	69db      	ldr	r3, [r3, #28]
 80164ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80164f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80164f6:	f003 0307 	and.w	r3, r3, #7
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d053      	beq.n	80165a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80164fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016502:	f003 0301 	and.w	r3, r3, #1
 8016506:	2b00      	cmp	r3, #0
 8016508:	d011      	beq.n	801652e <UART_RxISR_16BIT_FIFOEN+0xce>
 801650a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801650e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016512:	2b00      	cmp	r3, #0
 8016514:	d00b      	beq.n	801652e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	2201      	movs	r2, #1
 801651c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016524:	f043 0201 	orr.w	r2, r3, #1
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801652e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016532:	f003 0302 	and.w	r3, r3, #2
 8016536:	2b00      	cmp	r3, #0
 8016538:	d011      	beq.n	801655e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801653a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801653e:	f003 0301 	and.w	r3, r3, #1
 8016542:	2b00      	cmp	r3, #0
 8016544:	d00b      	beq.n	801655e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	2202      	movs	r2, #2
 801654c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016554:	f043 0204 	orr.w	r2, r3, #4
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801655e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016562:	f003 0304 	and.w	r3, r3, #4
 8016566:	2b00      	cmp	r3, #0
 8016568:	d011      	beq.n	801658e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801656a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801656e:	f003 0301 	and.w	r3, r3, #1
 8016572:	2b00      	cmp	r3, #0
 8016574:	d00b      	beq.n	801658e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	2204      	movs	r2, #4
 801657c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016584:	f043 0202 	orr.w	r2, r3, #2
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016594:	2b00      	cmp	r3, #0
 8016596:	d006      	beq.n	80165a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016598:	6878      	ldr	r0, [r7, #4]
 801659a:	f7fe faf7 	bl	8014b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2200      	movs	r2, #0
 80165a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	f040 80a2 	bne.w	80166f8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80165bc:	e853 3f00 	ldrex	r3, [r3]
 80165c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80165c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80165c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80165c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	461a      	mov	r2, r3
 80165d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80165d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80165da:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80165de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80165e2:	e841 2300 	strex	r3, r2, [r1]
 80165e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80165e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d1e2      	bne.n	80165b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	3308      	adds	r3, #8
 80165f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80165f8:	e853 3f00 	ldrex	r3, [r3]
 80165fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80165fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016600:	4b6e      	ldr	r3, [pc, #440]	; (80167bc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016602:	4013      	ands	r3, r2
 8016604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	3308      	adds	r3, #8
 801660e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016612:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016614:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016616:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016618:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801661a:	e841 2300 	strex	r3, r2, [r1]
 801661e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016622:	2b00      	cmp	r3, #0
 8016624:	d1e3      	bne.n	80165ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	2220      	movs	r2, #32
 801662a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	2200      	movs	r2, #0
 8016632:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2200      	movs	r2, #0
 8016638:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	4a60      	ldr	r2, [pc, #384]	; (80167c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016640:	4293      	cmp	r3, r2
 8016642:	d021      	beq.n	8016688 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	685b      	ldr	r3, [r3, #4]
 801664a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801664e:	2b00      	cmp	r3, #0
 8016650:	d01a      	beq.n	8016688 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801665a:	e853 3f00 	ldrex	r3, [r3]
 801665e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016662:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016666:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	461a      	mov	r2, r3
 8016670:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016674:	65bb      	str	r3, [r7, #88]	; 0x58
 8016676:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016678:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801667a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801667c:	e841 2300 	strex	r3, r2, [r1]
 8016680:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016684:	2b00      	cmp	r3, #0
 8016686:	d1e4      	bne.n	8016652 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801668c:	2b01      	cmp	r3, #1
 801668e:	d130      	bne.n	80166f2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2200      	movs	r2, #0
 8016694:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801669e:	e853 3f00 	ldrex	r3, [r3]
 80166a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80166a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166a6:	f023 0310 	bic.w	r3, r3, #16
 80166aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	461a      	mov	r2, r3
 80166b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80166b8:	647b      	str	r3, [r7, #68]	; 0x44
 80166ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80166be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80166c0:	e841 2300 	strex	r3, r2, [r1]
 80166c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80166c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d1e4      	bne.n	8016696 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	69db      	ldr	r3, [r3, #28]
 80166d2:	f003 0310 	and.w	r3, r3, #16
 80166d6:	2b10      	cmp	r3, #16
 80166d8:	d103      	bne.n	80166e2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	2210      	movs	r2, #16
 80166e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80166e8:	4619      	mov	r1, r3
 80166ea:	6878      	ldr	r0, [r7, #4]
 80166ec:	f7fe fa58 	bl	8014ba0 <HAL_UARTEx_RxEventCallback>
 80166f0:	e002      	b.n	80166f8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f7ec f9be 	bl	8002a74 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80166f8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d006      	beq.n	801670e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016700:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016704:	f003 0320 	and.w	r3, r3, #32
 8016708:	2b00      	cmp	r3, #0
 801670a:	f47f aecd 	bne.w	80164a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016714:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016718:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801671c:	2b00      	cmp	r3, #0
 801671e:	d049      	beq.n	80167b4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016726:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801672a:	429a      	cmp	r2, r3
 801672c:	d242      	bcs.n	80167b4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	3308      	adds	r3, #8
 8016734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016738:	e853 3f00 	ldrex	r3, [r3]
 801673c:	623b      	str	r3, [r7, #32]
   return(result);
 801673e:	6a3b      	ldr	r3, [r7, #32]
 8016740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	3308      	adds	r3, #8
 801674e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016752:	633a      	str	r2, [r7, #48]	; 0x30
 8016754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801675a:	e841 2300 	strex	r3, r2, [r1]
 801675e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016762:	2b00      	cmp	r3, #0
 8016764:	d1e3      	bne.n	801672e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	4a16      	ldr	r2, [pc, #88]	; (80167c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801676a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016772:	693b      	ldr	r3, [r7, #16]
 8016774:	e853 3f00 	ldrex	r3, [r3]
 8016778:	60fb      	str	r3, [r7, #12]
   return(result);
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	f043 0320 	orr.w	r3, r3, #32
 8016780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	461a      	mov	r2, r3
 801678a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801678e:	61fb      	str	r3, [r7, #28]
 8016790:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016792:	69b9      	ldr	r1, [r7, #24]
 8016794:	69fa      	ldr	r2, [r7, #28]
 8016796:	e841 2300 	strex	r3, r2, [r1]
 801679a:	617b      	str	r3, [r7, #20]
   return(result);
 801679c:	697b      	ldr	r3, [r7, #20]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d1e4      	bne.n	801676c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80167a2:	e007      	b.n	80167b4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	699a      	ldr	r2, [r3, #24]
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	f042 0208 	orr.w	r2, r2, #8
 80167b2:	619a      	str	r2, [r3, #24]
}
 80167b4:	bf00      	nop
 80167b6:	37b8      	adds	r7, #184	; 0xb8
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}
 80167bc:	effffffe 	.word	0xeffffffe
 80167c0:	58000c00 	.word	0x58000c00
 80167c4:	08015f49 	.word	0x08015f49

080167c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80167c8:	b480      	push	{r7}
 80167ca:	b083      	sub	sp, #12
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80167d0:	bf00      	nop
 80167d2:	370c      	adds	r7, #12
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr

080167dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80167dc:	b480      	push	{r7}
 80167de:	b083      	sub	sp, #12
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80167e4:	bf00      	nop
 80167e6:	370c      	adds	r7, #12
 80167e8:	46bd      	mov	sp, r7
 80167ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ee:	4770      	bx	lr

080167f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80167f0:	b480      	push	{r7}
 80167f2:	b083      	sub	sp, #12
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80167f8:	bf00      	nop
 80167fa:	370c      	adds	r7, #12
 80167fc:	46bd      	mov	sp, r7
 80167fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016802:	4770      	bx	lr

08016804 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016804:	b480      	push	{r7}
 8016806:	b089      	sub	sp, #36	; 0x24
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016812:	2b01      	cmp	r3, #1
 8016814:	d101      	bne.n	801681a <HAL_UARTEx_EnableStopMode+0x16>
 8016816:	2302      	movs	r3, #2
 8016818:	e021      	b.n	801685e <HAL_UARTEx_EnableStopMode+0x5a>
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2201      	movs	r2, #1
 801681e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	e853 3f00 	ldrex	r3, [r3]
 801682e:	60bb      	str	r3, [r7, #8]
   return(result);
 8016830:	68bb      	ldr	r3, [r7, #8]
 8016832:	f043 0302 	orr.w	r3, r3, #2
 8016836:	61fb      	str	r3, [r7, #28]
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	461a      	mov	r2, r3
 801683e:	69fb      	ldr	r3, [r7, #28]
 8016840:	61bb      	str	r3, [r7, #24]
 8016842:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016844:	6979      	ldr	r1, [r7, #20]
 8016846:	69ba      	ldr	r2, [r7, #24]
 8016848:	e841 2300 	strex	r3, r2, [r1]
 801684c:	613b      	str	r3, [r7, #16]
   return(result);
 801684e:	693b      	ldr	r3, [r7, #16]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d1e6      	bne.n	8016822 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	2200      	movs	r2, #0
 8016858:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801685c:	2300      	movs	r3, #0
}
 801685e:	4618      	mov	r0, r3
 8016860:	3724      	adds	r7, #36	; 0x24
 8016862:	46bd      	mov	sp, r7
 8016864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016868:	4770      	bx	lr

0801686a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801686a:	b580      	push	{r7, lr}
 801686c:	b084      	sub	sp, #16
 801686e:	af00      	add	r7, sp, #0
 8016870:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016878:	2b01      	cmp	r3, #1
 801687a:	d101      	bne.n	8016880 <HAL_UARTEx_EnableFifoMode+0x16>
 801687c:	2302      	movs	r3, #2
 801687e:	e02b      	b.n	80168d8 <HAL_UARTEx_EnableFifoMode+0x6e>
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2201      	movs	r2, #1
 8016884:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	2224      	movs	r2, #36	; 0x24
 801688c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	681a      	ldr	r2, [r3, #0]
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	f022 0201 	bic.w	r2, r2, #1
 80168a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80168ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80168b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	68fa      	ldr	r2, [r7, #12]
 80168be:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f000 f8c3 	bl	8016a4c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	2220      	movs	r2, #32
 80168ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	2200      	movs	r2, #0
 80168d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80168d6:	2300      	movs	r3, #0
}
 80168d8:	4618      	mov	r0, r3
 80168da:	3710      	adds	r7, #16
 80168dc:	46bd      	mov	sp, r7
 80168de:	bd80      	pop	{r7, pc}

080168e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80168e0:	b480      	push	{r7}
 80168e2:	b085      	sub	sp, #20
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80168ee:	2b01      	cmp	r3, #1
 80168f0:	d101      	bne.n	80168f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80168f2:	2302      	movs	r3, #2
 80168f4:	e027      	b.n	8016946 <HAL_UARTEx_DisableFifoMode+0x66>
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2201      	movs	r2, #1
 80168fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	2224      	movs	r2, #36	; 0x24
 8016902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	681a      	ldr	r2, [r3, #0]
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	f022 0201 	bic.w	r2, r2, #1
 801691c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016924:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2200      	movs	r2, #0
 801692a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	68fa      	ldr	r2, [r7, #12]
 8016932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	2220      	movs	r2, #32
 8016938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2200      	movs	r2, #0
 8016940:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016944:	2300      	movs	r3, #0
}
 8016946:	4618      	mov	r0, r3
 8016948:	3714      	adds	r7, #20
 801694a:	46bd      	mov	sp, r7
 801694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016950:	4770      	bx	lr

08016952 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016952:	b580      	push	{r7, lr}
 8016954:	b084      	sub	sp, #16
 8016956:	af00      	add	r7, sp, #0
 8016958:	6078      	str	r0, [r7, #4]
 801695a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016962:	2b01      	cmp	r3, #1
 8016964:	d101      	bne.n	801696a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016966:	2302      	movs	r3, #2
 8016968:	e02d      	b.n	80169c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2201      	movs	r2, #1
 801696e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2224      	movs	r2, #36	; 0x24
 8016976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	681a      	ldr	r2, [r3, #0]
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	f022 0201 	bic.w	r2, r2, #1
 8016990:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	689b      	ldr	r3, [r3, #8]
 8016998:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	683a      	ldr	r2, [r7, #0]
 80169a2:	430a      	orrs	r2, r1
 80169a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f000 f850 	bl	8016a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	68fa      	ldr	r2, [r7, #12]
 80169b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	2220      	movs	r2, #32
 80169b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2200      	movs	r2, #0
 80169c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80169c4:	2300      	movs	r3, #0
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3710      	adds	r7, #16
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}

080169ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80169ce:	b580      	push	{r7, lr}
 80169d0:	b084      	sub	sp, #16
 80169d2:	af00      	add	r7, sp, #0
 80169d4:	6078      	str	r0, [r7, #4]
 80169d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80169de:	2b01      	cmp	r3, #1
 80169e0:	d101      	bne.n	80169e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80169e2:	2302      	movs	r3, #2
 80169e4:	e02d      	b.n	8016a42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2201      	movs	r2, #1
 80169ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2224      	movs	r2, #36	; 0x24
 80169f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	681a      	ldr	r2, [r3, #0]
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	f022 0201 	bic.w	r2, r2, #1
 8016a0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	689b      	ldr	r3, [r3, #8]
 8016a14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	683a      	ldr	r2, [r7, #0]
 8016a1e:	430a      	orrs	r2, r1
 8016a20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016a22:	6878      	ldr	r0, [r7, #4]
 8016a24:	f000 f812 	bl	8016a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	68fa      	ldr	r2, [r7, #12]
 8016a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	2220      	movs	r2, #32
 8016a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016a40:	2300      	movs	r3, #0
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3710      	adds	r7, #16
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}
	...

08016a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016a4c:	b480      	push	{r7}
 8016a4e:	b085      	sub	sp, #20
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d108      	bne.n	8016a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	2201      	movs	r2, #1
 8016a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2201      	movs	r2, #1
 8016a68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016a6c:	e031      	b.n	8016ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016a6e:	2310      	movs	r3, #16
 8016a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016a72:	2310      	movs	r3, #16
 8016a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	689b      	ldr	r3, [r3, #8]
 8016a7c:	0e5b      	lsrs	r3, r3, #25
 8016a7e:	b2db      	uxtb	r3, r3
 8016a80:	f003 0307 	and.w	r3, r3, #7
 8016a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	689b      	ldr	r3, [r3, #8]
 8016a8c:	0f5b      	lsrs	r3, r3, #29
 8016a8e:	b2db      	uxtb	r3, r3
 8016a90:	f003 0307 	and.w	r3, r3, #7
 8016a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016a96:	7bbb      	ldrb	r3, [r7, #14]
 8016a98:	7b3a      	ldrb	r2, [r7, #12]
 8016a9a:	4911      	ldr	r1, [pc, #68]	; (8016ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8016a9c:	5c8a      	ldrb	r2, [r1, r2]
 8016a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016aa2:	7b3a      	ldrb	r2, [r7, #12]
 8016aa4:	490f      	ldr	r1, [pc, #60]	; (8016ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8016aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8016aac:	b29a      	uxth	r2, r3
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016ab4:	7bfb      	ldrb	r3, [r7, #15]
 8016ab6:	7b7a      	ldrb	r2, [r7, #13]
 8016ab8:	4909      	ldr	r1, [pc, #36]	; (8016ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8016aba:	5c8a      	ldrb	r2, [r1, r2]
 8016abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016ac0:	7b7a      	ldrb	r2, [r7, #13]
 8016ac2:	4908      	ldr	r1, [pc, #32]	; (8016ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8016ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8016aca:	b29a      	uxth	r2, r3
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016ad2:	bf00      	nop
 8016ad4:	3714      	adds	r7, #20
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016adc:	4770      	bx	lr
 8016ade:	bf00      	nop
 8016ae0:	0801adf4 	.word	0x0801adf4
 8016ae4:	0801adfc 	.word	0x0801adfc

08016ae8 <__NVIC_SetPriority>:
{
 8016ae8:	b480      	push	{r7}
 8016aea:	b083      	sub	sp, #12
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	4603      	mov	r3, r0
 8016af0:	6039      	str	r1, [r7, #0]
 8016af2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	db0a      	blt.n	8016b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	b2da      	uxtb	r2, r3
 8016b00:	490c      	ldr	r1, [pc, #48]	; (8016b34 <__NVIC_SetPriority+0x4c>)
 8016b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016b06:	0112      	lsls	r2, r2, #4
 8016b08:	b2d2      	uxtb	r2, r2
 8016b0a:	440b      	add	r3, r1
 8016b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016b10:	e00a      	b.n	8016b28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016b12:	683b      	ldr	r3, [r7, #0]
 8016b14:	b2da      	uxtb	r2, r3
 8016b16:	4908      	ldr	r1, [pc, #32]	; (8016b38 <__NVIC_SetPriority+0x50>)
 8016b18:	88fb      	ldrh	r3, [r7, #6]
 8016b1a:	f003 030f 	and.w	r3, r3, #15
 8016b1e:	3b04      	subs	r3, #4
 8016b20:	0112      	lsls	r2, r2, #4
 8016b22:	b2d2      	uxtb	r2, r2
 8016b24:	440b      	add	r3, r1
 8016b26:	761a      	strb	r2, [r3, #24]
}
 8016b28:	bf00      	nop
 8016b2a:	370c      	adds	r7, #12
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b32:	4770      	bx	lr
 8016b34:	e000e100 	.word	0xe000e100
 8016b38:	e000ed00 	.word	0xe000ed00

08016b3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016b40:	4b05      	ldr	r3, [pc, #20]	; (8016b58 <SysTick_Handler+0x1c>)
 8016b42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016b44:	f002 f958 	bl	8018df8 <xTaskGetSchedulerState>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	2b01      	cmp	r3, #1
 8016b4c:	d001      	beq.n	8016b52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016b4e:	f002 ff7b 	bl	8019a48 <xPortSysTickHandler>
  }
}
 8016b52:	bf00      	nop
 8016b54:	bd80      	pop	{r7, pc}
 8016b56:	bf00      	nop
 8016b58:	e000e010 	.word	0xe000e010

08016b5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016b60:	2100      	movs	r1, #0
 8016b62:	f06f 0004 	mvn.w	r0, #4
 8016b66:	f7ff ffbf 	bl	8016ae8 <__NVIC_SetPriority>
#endif
}
 8016b6a:	bf00      	nop
 8016b6c:	bd80      	pop	{r7, pc}
	...

08016b70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016b70:	b480      	push	{r7}
 8016b72:	b083      	sub	sp, #12
 8016b74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b76:	f3ef 8305 	mrs	r3, IPSR
 8016b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8016b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d003      	beq.n	8016b8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016b82:	f06f 0305 	mvn.w	r3, #5
 8016b86:	607b      	str	r3, [r7, #4]
 8016b88:	e00c      	b.n	8016ba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016b8a:	4b0a      	ldr	r3, [pc, #40]	; (8016bb4 <osKernelInitialize+0x44>)
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d105      	bne.n	8016b9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016b92:	4b08      	ldr	r3, [pc, #32]	; (8016bb4 <osKernelInitialize+0x44>)
 8016b94:	2201      	movs	r2, #1
 8016b96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016b98:	2300      	movs	r3, #0
 8016b9a:	607b      	str	r3, [r7, #4]
 8016b9c:	e002      	b.n	8016ba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016ba4:	687b      	ldr	r3, [r7, #4]
}
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	370c      	adds	r7, #12
 8016baa:	46bd      	mov	sp, r7
 8016bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb0:	4770      	bx	lr
 8016bb2:	bf00      	nop
 8016bb4:	24001fdc 	.word	0x24001fdc

08016bb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016bbe:	f3ef 8305 	mrs	r3, IPSR
 8016bc2:	603b      	str	r3, [r7, #0]
  return(result);
 8016bc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d003      	beq.n	8016bd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016bca:	f06f 0305 	mvn.w	r3, #5
 8016bce:	607b      	str	r3, [r7, #4]
 8016bd0:	e010      	b.n	8016bf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016bd2:	4b0b      	ldr	r3, [pc, #44]	; (8016c00 <osKernelStart+0x48>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	2b01      	cmp	r3, #1
 8016bd8:	d109      	bne.n	8016bee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016bda:	f7ff ffbf 	bl	8016b5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016bde:	4b08      	ldr	r3, [pc, #32]	; (8016c00 <osKernelStart+0x48>)
 8016be0:	2202      	movs	r2, #2
 8016be2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016be4:	f001 fc0c 	bl	8018400 <vTaskStartScheduler>
      stat = osOK;
 8016be8:	2300      	movs	r3, #0
 8016bea:	607b      	str	r3, [r7, #4]
 8016bec:	e002      	b.n	8016bf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016bf4:	687b      	ldr	r3, [r7, #4]
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3708      	adds	r7, #8
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}
 8016bfe:	bf00      	nop
 8016c00:	24001fdc 	.word	0x24001fdc

08016c04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b08e      	sub	sp, #56	; 0x38
 8016c08:	af04      	add	r7, sp, #16
 8016c0a:	60f8      	str	r0, [r7, #12]
 8016c0c:	60b9      	str	r1, [r7, #8]
 8016c0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016c10:	2300      	movs	r3, #0
 8016c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c14:	f3ef 8305 	mrs	r3, IPSR
 8016c18:	617b      	str	r3, [r7, #20]
  return(result);
 8016c1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d17e      	bne.n	8016d1e <osThreadNew+0x11a>
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d07b      	beq.n	8016d1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016c26:	2380      	movs	r3, #128	; 0x80
 8016c28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016c2a:	2318      	movs	r3, #24
 8016c2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d045      	beq.n	8016cca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d002      	beq.n	8016c4c <osThreadNew+0x48>
        name = attr->name;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	699b      	ldr	r3, [r3, #24]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d002      	beq.n	8016c5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	699b      	ldr	r3, [r3, #24]
 8016c58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016c5a:	69fb      	ldr	r3, [r7, #28]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d008      	beq.n	8016c72 <osThreadNew+0x6e>
 8016c60:	69fb      	ldr	r3, [r7, #28]
 8016c62:	2b38      	cmp	r3, #56	; 0x38
 8016c64:	d805      	bhi.n	8016c72 <osThreadNew+0x6e>
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	685b      	ldr	r3, [r3, #4]
 8016c6a:	f003 0301 	and.w	r3, r3, #1
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d001      	beq.n	8016c76 <osThreadNew+0x72>
        return (NULL);
 8016c72:	2300      	movs	r3, #0
 8016c74:	e054      	b.n	8016d20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	695b      	ldr	r3, [r3, #20]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d003      	beq.n	8016c86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	695b      	ldr	r3, [r3, #20]
 8016c82:	089b      	lsrs	r3, r3, #2
 8016c84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	689b      	ldr	r3, [r3, #8]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d00e      	beq.n	8016cac <osThreadNew+0xa8>
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	68db      	ldr	r3, [r3, #12]
 8016c92:	2b5b      	cmp	r3, #91	; 0x5b
 8016c94:	d90a      	bls.n	8016cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d006      	beq.n	8016cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	695b      	ldr	r3, [r3, #20]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d002      	beq.n	8016cac <osThreadNew+0xa8>
        mem = 1;
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	61bb      	str	r3, [r7, #24]
 8016caa:	e010      	b.n	8016cce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	689b      	ldr	r3, [r3, #8]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d10c      	bne.n	8016cce <osThreadNew+0xca>
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	68db      	ldr	r3, [r3, #12]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d108      	bne.n	8016cce <osThreadNew+0xca>
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	691b      	ldr	r3, [r3, #16]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d104      	bne.n	8016cce <osThreadNew+0xca>
          mem = 0;
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	61bb      	str	r3, [r7, #24]
 8016cc8:	e001      	b.n	8016cce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016cce:	69bb      	ldr	r3, [r7, #24]
 8016cd0:	2b01      	cmp	r3, #1
 8016cd2:	d110      	bne.n	8016cf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016cd8:	687a      	ldr	r2, [r7, #4]
 8016cda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016cdc:	9202      	str	r2, [sp, #8]
 8016cde:	9301      	str	r3, [sp, #4]
 8016ce0:	69fb      	ldr	r3, [r7, #28]
 8016ce2:	9300      	str	r3, [sp, #0]
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	6a3a      	ldr	r2, [r7, #32]
 8016ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cea:	68f8      	ldr	r0, [r7, #12]
 8016cec:	f001 f9b2 	bl	8018054 <xTaskCreateStatic>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	613b      	str	r3, [r7, #16]
 8016cf4:	e013      	b.n	8016d1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016cf6:	69bb      	ldr	r3, [r7, #24]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d110      	bne.n	8016d1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016cfc:	6a3b      	ldr	r3, [r7, #32]
 8016cfe:	b29a      	uxth	r2, r3
 8016d00:	f107 0310 	add.w	r3, r7, #16
 8016d04:	9301      	str	r3, [sp, #4]
 8016d06:	69fb      	ldr	r3, [r7, #28]
 8016d08:	9300      	str	r3, [sp, #0]
 8016d0a:	68bb      	ldr	r3, [r7, #8]
 8016d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d0e:	68f8      	ldr	r0, [r7, #12]
 8016d10:	f001 f9fd 	bl	801810e <xTaskCreate>
 8016d14:	4603      	mov	r3, r0
 8016d16:	2b01      	cmp	r3, #1
 8016d18:	d001      	beq.n	8016d1e <osThreadNew+0x11a>
            hTask = NULL;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016d1e:	693b      	ldr	r3, [r7, #16]
}
 8016d20:	4618      	mov	r0, r3
 8016d22:	3728      	adds	r7, #40	; 0x28
 8016d24:	46bd      	mov	sp, r7
 8016d26:	bd80      	pop	{r7, pc}

08016d28 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016d28:	b480      	push	{r7}
 8016d2a:	b083      	sub	sp, #12
 8016d2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d2e:	f3ef 8305 	mrs	r3, IPSR
 8016d32:	603b      	str	r3, [r7, #0]
  return(result);
 8016d34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d003      	beq.n	8016d42 <osThreadYield+0x1a>
    stat = osErrorISR;
 8016d3a:	f06f 0305 	mvn.w	r3, #5
 8016d3e:	607b      	str	r3, [r7, #4]
 8016d40:	e009      	b.n	8016d56 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8016d42:	2300      	movs	r3, #0
 8016d44:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016d46:	4b07      	ldr	r3, [pc, #28]	; (8016d64 <osThreadYield+0x3c>)
 8016d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d4c:	601a      	str	r2, [r3, #0]
 8016d4e:	f3bf 8f4f 	dsb	sy
 8016d52:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016d56:	687b      	ldr	r3, [r7, #4]
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	370c      	adds	r7, #12
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d62:	4770      	bx	lr
 8016d64:	e000ed04 	.word	0xe000ed04

08016d68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b084      	sub	sp, #16
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d70:	f3ef 8305 	mrs	r3, IPSR
 8016d74:	60bb      	str	r3, [r7, #8]
  return(result);
 8016d76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d003      	beq.n	8016d84 <osDelay+0x1c>
    stat = osErrorISR;
 8016d7c:	f06f 0305 	mvn.w	r3, #5
 8016d80:	60fb      	str	r3, [r7, #12]
 8016d82:	e007      	b.n	8016d94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016d84:	2300      	movs	r3, #0
 8016d86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d002      	beq.n	8016d94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016d8e:	6878      	ldr	r0, [r7, #4]
 8016d90:	f001 fb02 	bl	8018398 <vTaskDelay>
    }
  }

  return (stat);
 8016d94:	68fb      	ldr	r3, [r7, #12]
}
 8016d96:	4618      	mov	r0, r3
 8016d98:	3710      	adds	r7, #16
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}

08016d9e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016d9e:	b580      	push	{r7, lr}
 8016da0:	b086      	sub	sp, #24
 8016da2:	af00      	add	r7, sp, #0
 8016da4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016da6:	2300      	movs	r3, #0
 8016da8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016daa:	f3ef 8305 	mrs	r3, IPSR
 8016dae:	60fb      	str	r3, [r7, #12]
  return(result);
 8016db0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d12d      	bne.n	8016e12 <osEventFlagsNew+0x74>
    mem = -1;
 8016db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016dba:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d015      	beq.n	8016dee <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	689b      	ldr	r3, [r3, #8]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d006      	beq.n	8016dd8 <osEventFlagsNew+0x3a>
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	68db      	ldr	r3, [r3, #12]
 8016dce:	2b1f      	cmp	r3, #31
 8016dd0:	d902      	bls.n	8016dd8 <osEventFlagsNew+0x3a>
        mem = 1;
 8016dd2:	2301      	movs	r3, #1
 8016dd4:	613b      	str	r3, [r7, #16]
 8016dd6:	e00c      	b.n	8016df2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	689b      	ldr	r3, [r3, #8]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d108      	bne.n	8016df2 <osEventFlagsNew+0x54>
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	68db      	ldr	r3, [r3, #12]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d104      	bne.n	8016df2 <osEventFlagsNew+0x54>
          mem = 0;
 8016de8:	2300      	movs	r3, #0
 8016dea:	613b      	str	r3, [r7, #16]
 8016dec:	e001      	b.n	8016df2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016dee:	2300      	movs	r3, #0
 8016df0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016df2:	693b      	ldr	r3, [r7, #16]
 8016df4:	2b01      	cmp	r3, #1
 8016df6:	d106      	bne.n	8016e06 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	689b      	ldr	r3, [r3, #8]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f000 f91d 	bl	801703c <xEventGroupCreateStatic>
 8016e02:	6178      	str	r0, [r7, #20]
 8016e04:	e005      	b.n	8016e12 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016e06:	693b      	ldr	r3, [r7, #16]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d102      	bne.n	8016e12 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016e0c:	f000 f94d 	bl	80170aa <xEventGroupCreate>
 8016e10:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016e12:	697b      	ldr	r3, [r7, #20]
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	3718      	adds	r7, #24
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	bd80      	pop	{r7, pc}

08016e1c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b086      	sub	sp, #24
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
 8016e24:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d004      	beq.n	8016e3a <osEventFlagsSet+0x1e>
 8016e30:	683b      	ldr	r3, [r7, #0]
 8016e32:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d003      	beq.n	8016e42 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016e3a:	f06f 0303 	mvn.w	r3, #3
 8016e3e:	617b      	str	r3, [r7, #20]
 8016e40:	e028      	b.n	8016e94 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e42:	f3ef 8305 	mrs	r3, IPSR
 8016e46:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e48:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d01d      	beq.n	8016e8a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016e4e:	2300      	movs	r3, #0
 8016e50:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8016e52:	f107 0308 	add.w	r3, r7, #8
 8016e56:	461a      	mov	r2, r3
 8016e58:	6839      	ldr	r1, [r7, #0]
 8016e5a:	6938      	ldr	r0, [r7, #16]
 8016e5c:	f000 fb46 	bl	80174ec <xEventGroupSetBitsFromISR>
 8016e60:	4603      	mov	r3, r0
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d103      	bne.n	8016e6e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016e66:	f06f 0302 	mvn.w	r3, #2
 8016e6a:	617b      	str	r3, [r7, #20]
 8016e6c:	e012      	b.n	8016e94 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016e6e:	683b      	ldr	r3, [r7, #0]
 8016e70:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d00d      	beq.n	8016e94 <osEventFlagsSet+0x78>
 8016e78:	4b09      	ldr	r3, [pc, #36]	; (8016ea0 <osEventFlagsSet+0x84>)
 8016e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e7e:	601a      	str	r2, [r3, #0]
 8016e80:	f3bf 8f4f 	dsb	sy
 8016e84:	f3bf 8f6f 	isb	sy
 8016e88:	e004      	b.n	8016e94 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016e8a:	6839      	ldr	r1, [r7, #0]
 8016e8c:	6938      	ldr	r0, [r7, #16]
 8016e8e:	f000 fa65 	bl	801735c <xEventGroupSetBits>
 8016e92:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016e94:	697b      	ldr	r3, [r7, #20]
}
 8016e96:	4618      	mov	r0, r3
 8016e98:	3718      	adds	r7, #24
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bd80      	pop	{r7, pc}
 8016e9e:	bf00      	nop
 8016ea0:	e000ed04 	.word	0xe000ed04

08016ea4 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b086      	sub	sp, #24
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	6078      	str	r0, [r7, #4]
 8016eac:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016eb2:	693b      	ldr	r3, [r7, #16]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d004      	beq.n	8016ec2 <osEventFlagsClear+0x1e>
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d003      	beq.n	8016eca <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016ec2:	f06f 0303 	mvn.w	r3, #3
 8016ec6:	617b      	str	r3, [r7, #20]
 8016ec8:	e019      	b.n	8016efe <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016eca:	f3ef 8305 	mrs	r3, IPSR
 8016ece:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ed0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d00e      	beq.n	8016ef4 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016ed6:	6938      	ldr	r0, [r7, #16]
 8016ed8:	f000 fa1c 	bl	8017314 <xEventGroupGetBitsFromISR>
 8016edc:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016ede:	6839      	ldr	r1, [r7, #0]
 8016ee0:	6938      	ldr	r0, [r7, #16]
 8016ee2:	f000 fa03 	bl	80172ec <xEventGroupClearBitsFromISR>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d108      	bne.n	8016efe <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016eec:	f06f 0302 	mvn.w	r3, #2
 8016ef0:	617b      	str	r3, [r7, #20]
 8016ef2:	e004      	b.n	8016efe <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016ef4:	6839      	ldr	r1, [r7, #0]
 8016ef6:	6938      	ldr	r0, [r7, #16]
 8016ef8:	f000 f9c0 	bl	801727c <xEventGroupClearBits>
 8016efc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016efe:	697b      	ldr	r3, [r7, #20]
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3718      	adds	r7, #24
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}

08016f08 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b08c      	sub	sp, #48	; 0x30
 8016f0c:	af02      	add	r7, sp, #8
 8016f0e:	60f8      	str	r0, [r7, #12]
 8016f10:	60b9      	str	r1, [r7, #8]
 8016f12:	607a      	str	r2, [r7, #4]
 8016f14:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016f1a:	69bb      	ldr	r3, [r7, #24]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d004      	beq.n	8016f2a <osEventFlagsWait+0x22>
 8016f20:	68bb      	ldr	r3, [r7, #8]
 8016f22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d003      	beq.n	8016f32 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016f2a:	f06f 0303 	mvn.w	r3, #3
 8016f2e:	61fb      	str	r3, [r7, #28]
 8016f30:	e04b      	b.n	8016fca <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f32:	f3ef 8305 	mrs	r3, IPSR
 8016f36:	617b      	str	r3, [r7, #20]
  return(result);
 8016f38:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d003      	beq.n	8016f46 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8016f3e:	f06f 0305 	mvn.w	r3, #5
 8016f42:	61fb      	str	r3, [r7, #28]
 8016f44:	e041      	b.n	8016fca <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	f003 0301 	and.w	r3, r3, #1
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d002      	beq.n	8016f56 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016f50:	2301      	movs	r3, #1
 8016f52:	627b      	str	r3, [r7, #36]	; 0x24
 8016f54:	e001      	b.n	8016f5a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8016f56:	2300      	movs	r3, #0
 8016f58:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	f003 0302 	and.w	r3, r3, #2
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d002      	beq.n	8016f6a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8016f64:	2300      	movs	r3, #0
 8016f66:	623b      	str	r3, [r7, #32]
 8016f68:	e001      	b.n	8016f6e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016f6a:	2301      	movs	r3, #1
 8016f6c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	9300      	str	r3, [sp, #0]
 8016f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f74:	6a3a      	ldr	r2, [r7, #32]
 8016f76:	68b9      	ldr	r1, [r7, #8]
 8016f78:	69b8      	ldr	r0, [r7, #24]
 8016f7a:	f000 f8b1 	bl	80170e0 <xEventGroupWaitBits>
 8016f7e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	f003 0301 	and.w	r3, r3, #1
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d010      	beq.n	8016fac <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8016f8a:	68ba      	ldr	r2, [r7, #8]
 8016f8c:	69fb      	ldr	r3, [r7, #28]
 8016f8e:	4013      	ands	r3, r2
 8016f90:	68ba      	ldr	r2, [r7, #8]
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d019      	beq.n	8016fca <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016f96:	683b      	ldr	r3, [r7, #0]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d003      	beq.n	8016fa4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016f9c:	f06f 0301 	mvn.w	r3, #1
 8016fa0:	61fb      	str	r3, [r7, #28]
 8016fa2:	e012      	b.n	8016fca <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016fa4:	f06f 0302 	mvn.w	r3, #2
 8016fa8:	61fb      	str	r3, [r7, #28]
 8016faa:	e00e      	b.n	8016fca <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8016fac:	68ba      	ldr	r2, [r7, #8]
 8016fae:	69fb      	ldr	r3, [r7, #28]
 8016fb0:	4013      	ands	r3, r2
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d109      	bne.n	8016fca <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d003      	beq.n	8016fc4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8016fbc:	f06f 0301 	mvn.w	r3, #1
 8016fc0:	61fb      	str	r3, [r7, #28]
 8016fc2:	e002      	b.n	8016fca <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016fc4:	f06f 0302 	mvn.w	r3, #2
 8016fc8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8016fca:	69fb      	ldr	r3, [r7, #28]
}
 8016fcc:	4618      	mov	r0, r3
 8016fce:	3728      	adds	r7, #40	; 0x28
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}

08016fd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016fd4:	b480      	push	{r7}
 8016fd6:	b085      	sub	sp, #20
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	60f8      	str	r0, [r7, #12]
 8016fdc:	60b9      	str	r1, [r7, #8]
 8016fde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	4a07      	ldr	r2, [pc, #28]	; (8017000 <vApplicationGetIdleTaskMemory+0x2c>)
 8016fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016fe6:	68bb      	ldr	r3, [r7, #8]
 8016fe8:	4a06      	ldr	r2, [pc, #24]	; (8017004 <vApplicationGetIdleTaskMemory+0x30>)
 8016fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2280      	movs	r2, #128	; 0x80
 8016ff0:	601a      	str	r2, [r3, #0]
}
 8016ff2:	bf00      	nop
 8016ff4:	3714      	adds	r7, #20
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffc:	4770      	bx	lr
 8016ffe:	bf00      	nop
 8017000:	24001fe0 	.word	0x24001fe0
 8017004:	2400203c 	.word	0x2400203c

08017008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017008:	b480      	push	{r7}
 801700a:	b085      	sub	sp, #20
 801700c:	af00      	add	r7, sp, #0
 801700e:	60f8      	str	r0, [r7, #12]
 8017010:	60b9      	str	r1, [r7, #8]
 8017012:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	4a07      	ldr	r2, [pc, #28]	; (8017034 <vApplicationGetTimerTaskMemory+0x2c>)
 8017018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	4a06      	ldr	r2, [pc, #24]	; (8017038 <vApplicationGetTimerTaskMemory+0x30>)
 801701e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017026:	601a      	str	r2, [r3, #0]
}
 8017028:	bf00      	nop
 801702a:	3714      	adds	r7, #20
 801702c:	46bd      	mov	sp, r7
 801702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017032:	4770      	bx	lr
 8017034:	2400223c 	.word	0x2400223c
 8017038:	24002298 	.word	0x24002298

0801703c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801703c:	b580      	push	{r7, lr}
 801703e:	b086      	sub	sp, #24
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d10a      	bne.n	8017060 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801704e:	f383 8811 	msr	BASEPRI, r3
 8017052:	f3bf 8f6f 	isb	sy
 8017056:	f3bf 8f4f 	dsb	sy
 801705a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801705c:	bf00      	nop
 801705e:	e7fe      	b.n	801705e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8017060:	2320      	movs	r3, #32
 8017062:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	2b20      	cmp	r3, #32
 8017068:	d00a      	beq.n	8017080 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801706e:	f383 8811 	msr	BASEPRI, r3
 8017072:	f3bf 8f6f 	isb	sy
 8017076:	f3bf 8f4f 	dsb	sy
 801707a:	60fb      	str	r3, [r7, #12]
}
 801707c:	bf00      	nop
 801707e:	e7fe      	b.n	801707e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d00a      	beq.n	80170a0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801708a:	697b      	ldr	r3, [r7, #20]
 801708c:	2200      	movs	r2, #0
 801708e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017090:	697b      	ldr	r3, [r7, #20]
 8017092:	3304      	adds	r3, #4
 8017094:	4618      	mov	r0, r3
 8017096:	f000 fa3d 	bl	8017514 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801709a:	697b      	ldr	r3, [r7, #20]
 801709c:	2201      	movs	r2, #1
 801709e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80170a0:	697b      	ldr	r3, [r7, #20]
	}
 80170a2:	4618      	mov	r0, r3
 80170a4:	3718      	adds	r7, #24
 80170a6:	46bd      	mov	sp, r7
 80170a8:	bd80      	pop	{r7, pc}

080170aa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80170aa:	b580      	push	{r7, lr}
 80170ac:	b082      	sub	sp, #8
 80170ae:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80170b0:	2020      	movs	r0, #32
 80170b2:	f002 fd59 	bl	8019b68 <pvPortMalloc>
 80170b6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d00a      	beq.n	80170d4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	2200      	movs	r2, #0
 80170c2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	3304      	adds	r3, #4
 80170c8:	4618      	mov	r0, r3
 80170ca:	f000 fa23 	bl	8017514 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	2200      	movs	r2, #0
 80170d2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80170d4:	687b      	ldr	r3, [r7, #4]
	}
 80170d6:	4618      	mov	r0, r3
 80170d8:	3708      	adds	r7, #8
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}
	...

080170e0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b090      	sub	sp, #64	; 0x40
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	60f8      	str	r0, [r7, #12]
 80170e8:	60b9      	str	r1, [r7, #8]
 80170ea:	607a      	str	r2, [r7, #4]
 80170ec:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80170f2:	2300      	movs	r3, #0
 80170f4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80170f6:	2300      	movs	r3, #0
 80170f8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d10a      	bne.n	8017116 <xEventGroupWaitBits+0x36>
	__asm volatile
 8017100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017104:	f383 8811 	msr	BASEPRI, r3
 8017108:	f3bf 8f6f 	isb	sy
 801710c:	f3bf 8f4f 	dsb	sy
 8017110:	623b      	str	r3, [r7, #32]
}
 8017112:	bf00      	nop
 8017114:	e7fe      	b.n	8017114 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017116:	68bb      	ldr	r3, [r7, #8]
 8017118:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801711c:	2b00      	cmp	r3, #0
 801711e:	d00a      	beq.n	8017136 <xEventGroupWaitBits+0x56>
	__asm volatile
 8017120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017124:	f383 8811 	msr	BASEPRI, r3
 8017128:	f3bf 8f6f 	isb	sy
 801712c:	f3bf 8f4f 	dsb	sy
 8017130:	61fb      	str	r3, [r7, #28]
}
 8017132:	bf00      	nop
 8017134:	e7fe      	b.n	8017134 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8017136:	68bb      	ldr	r3, [r7, #8]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d10a      	bne.n	8017152 <xEventGroupWaitBits+0x72>
	__asm volatile
 801713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017140:	f383 8811 	msr	BASEPRI, r3
 8017144:	f3bf 8f6f 	isb	sy
 8017148:	f3bf 8f4f 	dsb	sy
 801714c:	61bb      	str	r3, [r7, #24]
}
 801714e:	bf00      	nop
 8017150:	e7fe      	b.n	8017150 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017152:	f001 fe51 	bl	8018df8 <xTaskGetSchedulerState>
 8017156:	4603      	mov	r3, r0
 8017158:	2b00      	cmp	r3, #0
 801715a:	d102      	bne.n	8017162 <xEventGroupWaitBits+0x82>
 801715c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801715e:	2b00      	cmp	r3, #0
 8017160:	d101      	bne.n	8017166 <xEventGroupWaitBits+0x86>
 8017162:	2301      	movs	r3, #1
 8017164:	e000      	b.n	8017168 <xEventGroupWaitBits+0x88>
 8017166:	2300      	movs	r3, #0
 8017168:	2b00      	cmp	r3, #0
 801716a:	d10a      	bne.n	8017182 <xEventGroupWaitBits+0xa2>
	__asm volatile
 801716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017170:	f383 8811 	msr	BASEPRI, r3
 8017174:	f3bf 8f6f 	isb	sy
 8017178:	f3bf 8f4f 	dsb	sy
 801717c:	617b      	str	r3, [r7, #20]
}
 801717e:	bf00      	nop
 8017180:	e7fe      	b.n	8017180 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017182:	f001 f9a3 	bl	80184cc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8017186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801718c:	683a      	ldr	r2, [r7, #0]
 801718e:	68b9      	ldr	r1, [r7, #8]
 8017190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017192:	f000 f988 	bl	80174a6 <prvTestWaitCondition>
 8017196:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8017198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801719a:	2b00      	cmp	r3, #0
 801719c:	d00e      	beq.n	80171bc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80171a2:	2300      	movs	r3, #0
 80171a4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d028      	beq.n	80171fe <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80171ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171ae:	681a      	ldr	r2, [r3, #0]
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	43db      	mvns	r3, r3
 80171b4:	401a      	ands	r2, r3
 80171b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171b8:	601a      	str	r2, [r3, #0]
 80171ba:	e020      	b.n	80171fe <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80171bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d104      	bne.n	80171cc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80171c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80171c6:	2301      	movs	r3, #1
 80171c8:	633b      	str	r3, [r7, #48]	; 0x30
 80171ca:	e018      	b.n	80171fe <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d003      	beq.n	80171da <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80171d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80171d8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80171da:	683b      	ldr	r3, [r7, #0]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d003      	beq.n	80171e8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80171e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80171e6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80171e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171ea:	1d18      	adds	r0, r3, #4
 80171ec:	68ba      	ldr	r2, [r7, #8]
 80171ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171f0:	4313      	orrs	r3, r2
 80171f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171f4:	4619      	mov	r1, r3
 80171f6:	f001 fb77 	bl	80188e8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80171fa:	2300      	movs	r3, #0
 80171fc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80171fe:	f001 f973 	bl	80184e8 <xTaskResumeAll>
 8017202:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017206:	2b00      	cmp	r3, #0
 8017208:	d031      	beq.n	801726e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801720c:	2b00      	cmp	r3, #0
 801720e:	d107      	bne.n	8017220 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8017210:	4b19      	ldr	r3, [pc, #100]	; (8017278 <xEventGroupWaitBits+0x198>)
 8017212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017216:	601a      	str	r2, [r3, #0]
 8017218:	f3bf 8f4f 	dsb	sy
 801721c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8017220:	f001 fe76 	bl	8018f10 <uxTaskResetEventItemValue>
 8017224:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8017226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801722c:	2b00      	cmp	r3, #0
 801722e:	d11a      	bne.n	8017266 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017230:	f002 fb78 	bl	8019924 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8017234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801723a:	683a      	ldr	r2, [r7, #0]
 801723c:	68b9      	ldr	r1, [r7, #8]
 801723e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017240:	f000 f931 	bl	80174a6 <prvTestWaitCondition>
 8017244:	4603      	mov	r3, r0
 8017246:	2b00      	cmp	r3, #0
 8017248:	d009      	beq.n	801725e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2b00      	cmp	r3, #0
 801724e:	d006      	beq.n	801725e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017252:	681a      	ldr	r2, [r3, #0]
 8017254:	68bb      	ldr	r3, [r7, #8]
 8017256:	43db      	mvns	r3, r3
 8017258:	401a      	ands	r2, r3
 801725a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801725c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801725e:	2301      	movs	r3, #1
 8017260:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017262:	f002 fb8f 	bl	8019984 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017268:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801726c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801726e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017270:	4618      	mov	r0, r3
 8017272:	3740      	adds	r7, #64	; 0x40
 8017274:	46bd      	mov	sp, r7
 8017276:	bd80      	pop	{r7, pc}
 8017278:	e000ed04 	.word	0xe000ed04

0801727c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b086      	sub	sp, #24
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
 8017284:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d10a      	bne.n	80172a6 <xEventGroupClearBits+0x2a>
	__asm volatile
 8017290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017294:	f383 8811 	msr	BASEPRI, r3
 8017298:	f3bf 8f6f 	isb	sy
 801729c:	f3bf 8f4f 	dsb	sy
 80172a0:	60fb      	str	r3, [r7, #12]
}
 80172a2:	bf00      	nop
 80172a4:	e7fe      	b.n	80172a4 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d00a      	beq.n	80172c6 <xEventGroupClearBits+0x4a>
	__asm volatile
 80172b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172b4:	f383 8811 	msr	BASEPRI, r3
 80172b8:	f3bf 8f6f 	isb	sy
 80172bc:	f3bf 8f4f 	dsb	sy
 80172c0:	60bb      	str	r3, [r7, #8]
}
 80172c2:	bf00      	nop
 80172c4:	e7fe      	b.n	80172c4 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80172c6:	f002 fb2d 	bl	8019924 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80172ca:	697b      	ldr	r3, [r7, #20]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80172d0:	697b      	ldr	r3, [r7, #20]
 80172d2:	681a      	ldr	r2, [r3, #0]
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	43db      	mvns	r3, r3
 80172d8:	401a      	ands	r2, r3
 80172da:	697b      	ldr	r3, [r7, #20]
 80172dc:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80172de:	f002 fb51 	bl	8019984 <vPortExitCritical>

	return uxReturn;
 80172e2:	693b      	ldr	r3, [r7, #16]
}
 80172e4:	4618      	mov	r0, r3
 80172e6:	3718      	adds	r7, #24
 80172e8:	46bd      	mov	sp, r7
 80172ea:	bd80      	pop	{r7, pc}

080172ec <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b084      	sub	sp, #16
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
 80172f4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80172f6:	2300      	movs	r3, #0
 80172f8:	683a      	ldr	r2, [r7, #0]
 80172fa:	6879      	ldr	r1, [r7, #4]
 80172fc:	4804      	ldr	r0, [pc, #16]	; (8017310 <xEventGroupClearBitsFromISR+0x24>)
 80172fe:	f002 f9c1 	bl	8019684 <xTimerPendFunctionCallFromISR>
 8017302:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8017304:	68fb      	ldr	r3, [r7, #12]
	}
 8017306:	4618      	mov	r0, r3
 8017308:	3710      	adds	r7, #16
 801730a:	46bd      	mov	sp, r7
 801730c:	bd80      	pop	{r7, pc}
 801730e:	bf00      	nop
 8017310:	0801748d 	.word	0x0801748d

08017314 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8017314:	b480      	push	{r7}
 8017316:	b089      	sub	sp, #36	; 0x24
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017320:	f3ef 8211 	mrs	r2, BASEPRI
 8017324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017328:	f383 8811 	msr	BASEPRI, r3
 801732c:	f3bf 8f6f 	isb	sy
 8017330:	f3bf 8f4f 	dsb	sy
 8017334:	60fa      	str	r2, [r7, #12]
 8017336:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017338:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801733a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 801733c:	69fb      	ldr	r3, [r7, #28]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	617b      	str	r3, [r7, #20]
 8017342:	69bb      	ldr	r3, [r7, #24]
 8017344:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017346:	693b      	ldr	r3, [r7, #16]
 8017348:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801734c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801734e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8017350:	4618      	mov	r0, r3
 8017352:	3724      	adds	r7, #36	; 0x24
 8017354:	46bd      	mov	sp, r7
 8017356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735a:	4770      	bx	lr

0801735c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b08e      	sub	sp, #56	; 0x38
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
 8017364:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8017366:	2300      	movs	r3, #0
 8017368:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801736e:	2300      	movs	r3, #0
 8017370:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d10a      	bne.n	801738e <xEventGroupSetBits+0x32>
	__asm volatile
 8017378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801737c:	f383 8811 	msr	BASEPRI, r3
 8017380:	f3bf 8f6f 	isb	sy
 8017384:	f3bf 8f4f 	dsb	sy
 8017388:	613b      	str	r3, [r7, #16]
}
 801738a:	bf00      	nop
 801738c:	e7fe      	b.n	801738c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801738e:	683b      	ldr	r3, [r7, #0]
 8017390:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017394:	2b00      	cmp	r3, #0
 8017396:	d00a      	beq.n	80173ae <xEventGroupSetBits+0x52>
	__asm volatile
 8017398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801739c:	f383 8811 	msr	BASEPRI, r3
 80173a0:	f3bf 8f6f 	isb	sy
 80173a4:	f3bf 8f4f 	dsb	sy
 80173a8:	60fb      	str	r3, [r7, #12]
}
 80173aa:	bf00      	nop
 80173ac:	e7fe      	b.n	80173ac <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80173ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b0:	3304      	adds	r3, #4
 80173b2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80173b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b6:	3308      	adds	r3, #8
 80173b8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80173ba:	f001 f887 	bl	80184cc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80173be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c0:	68db      	ldr	r3, [r3, #12]
 80173c2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80173c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c6:	681a      	ldr	r2, [r3, #0]
 80173c8:	683b      	ldr	r3, [r7, #0]
 80173ca:	431a      	orrs	r2, r3
 80173cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ce:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80173d0:	e03c      	b.n	801744c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80173d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80173d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80173de:	2300      	movs	r3, #0
 80173e0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80173e2:	69bb      	ldr	r3, [r7, #24]
 80173e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80173e8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80173ea:	69bb      	ldr	r3, [r7, #24]
 80173ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80173f0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80173f2:	697b      	ldr	r3, [r7, #20]
 80173f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d108      	bne.n	801740e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80173fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173fe:	681a      	ldr	r2, [r3, #0]
 8017400:	69bb      	ldr	r3, [r7, #24]
 8017402:	4013      	ands	r3, r2
 8017404:	2b00      	cmp	r3, #0
 8017406:	d00b      	beq.n	8017420 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017408:	2301      	movs	r3, #1
 801740a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801740c:	e008      	b.n	8017420 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017410:	681a      	ldr	r2, [r3, #0]
 8017412:	69bb      	ldr	r3, [r7, #24]
 8017414:	4013      	ands	r3, r2
 8017416:	69ba      	ldr	r2, [r7, #24]
 8017418:	429a      	cmp	r2, r3
 801741a:	d101      	bne.n	8017420 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801741c:	2301      	movs	r3, #1
 801741e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8017420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017422:	2b00      	cmp	r3, #0
 8017424:	d010      	beq.n	8017448 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8017426:	697b      	ldr	r3, [r7, #20]
 8017428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801742c:	2b00      	cmp	r3, #0
 801742e:	d003      	beq.n	8017438 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017432:	69bb      	ldr	r3, [r7, #24]
 8017434:	4313      	orrs	r3, r2
 8017436:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017440:	4619      	mov	r1, r3
 8017442:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017444:	f001 fb1c 	bl	8018a80 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8017448:	69fb      	ldr	r3, [r7, #28]
 801744a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801744c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801744e:	6a3b      	ldr	r3, [r7, #32]
 8017450:	429a      	cmp	r2, r3
 8017452:	d1be      	bne.n	80173d2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017456:	681a      	ldr	r2, [r3, #0]
 8017458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801745a:	43db      	mvns	r3, r3
 801745c:	401a      	ands	r2, r3
 801745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017460:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017462:	f001 f841 	bl	80184e8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8017466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017468:	681b      	ldr	r3, [r3, #0]
}
 801746a:	4618      	mov	r0, r3
 801746c:	3738      	adds	r7, #56	; 0x38
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}

08017472 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017472:	b580      	push	{r7, lr}
 8017474:	b082      	sub	sp, #8
 8017476:	af00      	add	r7, sp, #0
 8017478:	6078      	str	r0, [r7, #4]
 801747a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801747c:	6839      	ldr	r1, [r7, #0]
 801747e:	6878      	ldr	r0, [r7, #4]
 8017480:	f7ff ff6c 	bl	801735c <xEventGroupSetBits>
}
 8017484:	bf00      	nop
 8017486:	3708      	adds	r7, #8
 8017488:	46bd      	mov	sp, r7
 801748a:	bd80      	pop	{r7, pc}

0801748c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b082      	sub	sp, #8
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
 8017494:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017496:	6839      	ldr	r1, [r7, #0]
 8017498:	6878      	ldr	r0, [r7, #4]
 801749a:	f7ff feef 	bl	801727c <xEventGroupClearBits>
}
 801749e:	bf00      	nop
 80174a0:	3708      	adds	r7, #8
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}

080174a6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80174a6:	b480      	push	{r7}
 80174a8:	b087      	sub	sp, #28
 80174aa:	af00      	add	r7, sp, #0
 80174ac:	60f8      	str	r0, [r7, #12]
 80174ae:	60b9      	str	r1, [r7, #8]
 80174b0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80174b2:	2300      	movs	r3, #0
 80174b4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d107      	bne.n	80174cc <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80174bc:	68fa      	ldr	r2, [r7, #12]
 80174be:	68bb      	ldr	r3, [r7, #8]
 80174c0:	4013      	ands	r3, r2
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d00a      	beq.n	80174dc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80174c6:	2301      	movs	r3, #1
 80174c8:	617b      	str	r3, [r7, #20]
 80174ca:	e007      	b.n	80174dc <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80174cc:	68fa      	ldr	r2, [r7, #12]
 80174ce:	68bb      	ldr	r3, [r7, #8]
 80174d0:	4013      	ands	r3, r2
 80174d2:	68ba      	ldr	r2, [r7, #8]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d101      	bne.n	80174dc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80174d8:	2301      	movs	r3, #1
 80174da:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80174dc:	697b      	ldr	r3, [r7, #20]
}
 80174de:	4618      	mov	r0, r3
 80174e0:	371c      	adds	r7, #28
 80174e2:	46bd      	mov	sp, r7
 80174e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e8:	4770      	bx	lr
	...

080174ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b086      	sub	sp, #24
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	60f8      	str	r0, [r7, #12]
 80174f4:	60b9      	str	r1, [r7, #8]
 80174f6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	68ba      	ldr	r2, [r7, #8]
 80174fc:	68f9      	ldr	r1, [r7, #12]
 80174fe:	4804      	ldr	r0, [pc, #16]	; (8017510 <xEventGroupSetBitsFromISR+0x24>)
 8017500:	f002 f8c0 	bl	8019684 <xTimerPendFunctionCallFromISR>
 8017504:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017506:	697b      	ldr	r3, [r7, #20]
	}
 8017508:	4618      	mov	r0, r3
 801750a:	3718      	adds	r7, #24
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}
 8017510:	08017473 	.word	0x08017473

08017514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	f103 0208 	add.w	r2, r3, #8
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801752c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	f103 0208 	add.w	r2, r3, #8
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f103 0208 	add.w	r2, r3, #8
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	2200      	movs	r2, #0
 8017546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017548:	bf00      	nop
 801754a:	370c      	adds	r7, #12
 801754c:	46bd      	mov	sp, r7
 801754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017552:	4770      	bx	lr

08017554 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017554:	b480      	push	{r7}
 8017556:	b083      	sub	sp, #12
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	2200      	movs	r2, #0
 8017560:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017562:	bf00      	nop
 8017564:	370c      	adds	r7, #12
 8017566:	46bd      	mov	sp, r7
 8017568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756c:	4770      	bx	lr

0801756e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801756e:	b480      	push	{r7}
 8017570:	b085      	sub	sp, #20
 8017572:	af00      	add	r7, sp, #0
 8017574:	6078      	str	r0, [r7, #4]
 8017576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	685b      	ldr	r3, [r3, #4]
 801757c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	68fa      	ldr	r2, [r7, #12]
 8017582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	689a      	ldr	r2, [r3, #8]
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	689b      	ldr	r3, [r3, #8]
 8017590:	683a      	ldr	r2, [r7, #0]
 8017592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	683a      	ldr	r2, [r7, #0]
 8017598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	1c5a      	adds	r2, r3, #1
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	601a      	str	r2, [r3, #0]
}
 80175aa:	bf00      	nop
 80175ac:	3714      	adds	r7, #20
 80175ae:	46bd      	mov	sp, r7
 80175b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b4:	4770      	bx	lr

080175b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80175b6:	b480      	push	{r7}
 80175b8:	b085      	sub	sp, #20
 80175ba:	af00      	add	r7, sp, #0
 80175bc:	6078      	str	r0, [r7, #4]
 80175be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80175c0:	683b      	ldr	r3, [r7, #0]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80175c6:	68bb      	ldr	r3, [r7, #8]
 80175c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80175cc:	d103      	bne.n	80175d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	691b      	ldr	r3, [r3, #16]
 80175d2:	60fb      	str	r3, [r7, #12]
 80175d4:	e00c      	b.n	80175f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	3308      	adds	r3, #8
 80175da:	60fb      	str	r3, [r7, #12]
 80175dc:	e002      	b.n	80175e4 <vListInsert+0x2e>
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	685b      	ldr	r3, [r3, #4]
 80175e2:	60fb      	str	r3, [r7, #12]
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	685b      	ldr	r3, [r3, #4]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	68ba      	ldr	r2, [r7, #8]
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d2f6      	bcs.n	80175de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	685a      	ldr	r2, [r3, #4]
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	685b      	ldr	r3, [r3, #4]
 80175fc:	683a      	ldr	r2, [r7, #0]
 80175fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	68fa      	ldr	r2, [r7, #12]
 8017604:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	683a      	ldr	r2, [r7, #0]
 801760a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	687a      	ldr	r2, [r7, #4]
 8017610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	1c5a      	adds	r2, r3, #1
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	601a      	str	r2, [r3, #0]
}
 801761c:	bf00      	nop
 801761e:	3714      	adds	r7, #20
 8017620:	46bd      	mov	sp, r7
 8017622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017626:	4770      	bx	lr

08017628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017628:	b480      	push	{r7}
 801762a:	b085      	sub	sp, #20
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	691b      	ldr	r3, [r3, #16]
 8017634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	685b      	ldr	r3, [r3, #4]
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	6892      	ldr	r2, [r2, #8]
 801763e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	689b      	ldr	r3, [r3, #8]
 8017644:	687a      	ldr	r2, [r7, #4]
 8017646:	6852      	ldr	r2, [r2, #4]
 8017648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	687a      	ldr	r2, [r7, #4]
 8017650:	429a      	cmp	r2, r3
 8017652:	d103      	bne.n	801765c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	689a      	ldr	r2, [r3, #8]
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	2200      	movs	r2, #0
 8017660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	1e5a      	subs	r2, r3, #1
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	681b      	ldr	r3, [r3, #0]
}
 8017670:	4618      	mov	r0, r3
 8017672:	3714      	adds	r7, #20
 8017674:	46bd      	mov	sp, r7
 8017676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767a:	4770      	bx	lr

0801767c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b084      	sub	sp, #16
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
 8017684:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d10a      	bne.n	80176a6 <xQueueGenericReset+0x2a>
	__asm volatile
 8017690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017694:	f383 8811 	msr	BASEPRI, r3
 8017698:	f3bf 8f6f 	isb	sy
 801769c:	f3bf 8f4f 	dsb	sy
 80176a0:	60bb      	str	r3, [r7, #8]
}
 80176a2:	bf00      	nop
 80176a4:	e7fe      	b.n	80176a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80176a6:	f002 f93d 	bl	8019924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	681a      	ldr	r2, [r3, #0]
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176b2:	68f9      	ldr	r1, [r7, #12]
 80176b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80176b6:	fb01 f303 	mul.w	r3, r1, r3
 80176ba:	441a      	add	r2, r3
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	2200      	movs	r2, #0
 80176c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	681a      	ldr	r2, [r3, #0]
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80176d6:	3b01      	subs	r3, #1
 80176d8:	68f9      	ldr	r1, [r7, #12]
 80176da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80176dc:	fb01 f303 	mul.w	r3, r1, r3
 80176e0:	441a      	add	r2, r3
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	22ff      	movs	r2, #255	; 0xff
 80176ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	22ff      	movs	r2, #255	; 0xff
 80176f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d114      	bne.n	8017726 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	691b      	ldr	r3, [r3, #16]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d01a      	beq.n	801773a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	3310      	adds	r3, #16
 8017708:	4618      	mov	r0, r3
 801770a:	f001 f955 	bl	80189b8 <xTaskRemoveFromEventList>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d012      	beq.n	801773a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017714:	4b0c      	ldr	r3, [pc, #48]	; (8017748 <xQueueGenericReset+0xcc>)
 8017716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801771a:	601a      	str	r2, [r3, #0]
 801771c:	f3bf 8f4f 	dsb	sy
 8017720:	f3bf 8f6f 	isb	sy
 8017724:	e009      	b.n	801773a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	3310      	adds	r3, #16
 801772a:	4618      	mov	r0, r3
 801772c:	f7ff fef2 	bl	8017514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	3324      	adds	r3, #36	; 0x24
 8017734:	4618      	mov	r0, r3
 8017736:	f7ff feed 	bl	8017514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801773a:	f002 f923 	bl	8019984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801773e:	2301      	movs	r3, #1
}
 8017740:	4618      	mov	r0, r3
 8017742:	3710      	adds	r7, #16
 8017744:	46bd      	mov	sp, r7
 8017746:	bd80      	pop	{r7, pc}
 8017748:	e000ed04 	.word	0xe000ed04

0801774c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801774c:	b580      	push	{r7, lr}
 801774e:	b08e      	sub	sp, #56	; 0x38
 8017750:	af02      	add	r7, sp, #8
 8017752:	60f8      	str	r0, [r7, #12]
 8017754:	60b9      	str	r1, [r7, #8]
 8017756:	607a      	str	r2, [r7, #4]
 8017758:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d10a      	bne.n	8017776 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017764:	f383 8811 	msr	BASEPRI, r3
 8017768:	f3bf 8f6f 	isb	sy
 801776c:	f3bf 8f4f 	dsb	sy
 8017770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017772:	bf00      	nop
 8017774:	e7fe      	b.n	8017774 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017776:	683b      	ldr	r3, [r7, #0]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d10a      	bne.n	8017792 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017780:	f383 8811 	msr	BASEPRI, r3
 8017784:	f3bf 8f6f 	isb	sy
 8017788:	f3bf 8f4f 	dsb	sy
 801778c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801778e:	bf00      	nop
 8017790:	e7fe      	b.n	8017790 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d002      	beq.n	801779e <xQueueGenericCreateStatic+0x52>
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d001      	beq.n	80177a2 <xQueueGenericCreateStatic+0x56>
 801779e:	2301      	movs	r3, #1
 80177a0:	e000      	b.n	80177a4 <xQueueGenericCreateStatic+0x58>
 80177a2:	2300      	movs	r3, #0
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d10a      	bne.n	80177be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80177a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177ac:	f383 8811 	msr	BASEPRI, r3
 80177b0:	f3bf 8f6f 	isb	sy
 80177b4:	f3bf 8f4f 	dsb	sy
 80177b8:	623b      	str	r3, [r7, #32]
}
 80177ba:	bf00      	nop
 80177bc:	e7fe      	b.n	80177bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d102      	bne.n	80177ca <xQueueGenericCreateStatic+0x7e>
 80177c4:	68bb      	ldr	r3, [r7, #8]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d101      	bne.n	80177ce <xQueueGenericCreateStatic+0x82>
 80177ca:	2301      	movs	r3, #1
 80177cc:	e000      	b.n	80177d0 <xQueueGenericCreateStatic+0x84>
 80177ce:	2300      	movs	r3, #0
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d10a      	bne.n	80177ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80177d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177d8:	f383 8811 	msr	BASEPRI, r3
 80177dc:	f3bf 8f6f 	isb	sy
 80177e0:	f3bf 8f4f 	dsb	sy
 80177e4:	61fb      	str	r3, [r7, #28]
}
 80177e6:	bf00      	nop
 80177e8:	e7fe      	b.n	80177e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80177ea:	2350      	movs	r3, #80	; 0x50
 80177ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	2b50      	cmp	r3, #80	; 0x50
 80177f2:	d00a      	beq.n	801780a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80177f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f8:	f383 8811 	msr	BASEPRI, r3
 80177fc:	f3bf 8f6f 	isb	sy
 8017800:	f3bf 8f4f 	dsb	sy
 8017804:	61bb      	str	r3, [r7, #24]
}
 8017806:	bf00      	nop
 8017808:	e7fe      	b.n	8017808 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801780a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017812:	2b00      	cmp	r3, #0
 8017814:	d00d      	beq.n	8017832 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017818:	2201      	movs	r2, #1
 801781a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801781e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017824:	9300      	str	r3, [sp, #0]
 8017826:	4613      	mov	r3, r2
 8017828:	687a      	ldr	r2, [r7, #4]
 801782a:	68b9      	ldr	r1, [r7, #8]
 801782c:	68f8      	ldr	r0, [r7, #12]
 801782e:	f000 f805 	bl	801783c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017834:	4618      	mov	r0, r3
 8017836:	3730      	adds	r7, #48	; 0x30
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}

0801783c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b084      	sub	sp, #16
 8017840:	af00      	add	r7, sp, #0
 8017842:	60f8      	str	r0, [r7, #12]
 8017844:	60b9      	str	r1, [r7, #8]
 8017846:	607a      	str	r2, [r7, #4]
 8017848:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801784a:	68bb      	ldr	r3, [r7, #8]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d103      	bne.n	8017858 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017850:	69bb      	ldr	r3, [r7, #24]
 8017852:	69ba      	ldr	r2, [r7, #24]
 8017854:	601a      	str	r2, [r3, #0]
 8017856:	e002      	b.n	801785e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017858:	69bb      	ldr	r3, [r7, #24]
 801785a:	687a      	ldr	r2, [r7, #4]
 801785c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801785e:	69bb      	ldr	r3, [r7, #24]
 8017860:	68fa      	ldr	r2, [r7, #12]
 8017862:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017864:	69bb      	ldr	r3, [r7, #24]
 8017866:	68ba      	ldr	r2, [r7, #8]
 8017868:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801786a:	2101      	movs	r1, #1
 801786c:	69b8      	ldr	r0, [r7, #24]
 801786e:	f7ff ff05 	bl	801767c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017872:	69bb      	ldr	r3, [r7, #24]
 8017874:	78fa      	ldrb	r2, [r7, #3]
 8017876:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801787a:	bf00      	nop
 801787c:	3710      	adds	r7, #16
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}
	...

08017884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b08e      	sub	sp, #56	; 0x38
 8017888:	af00      	add	r7, sp, #0
 801788a:	60f8      	str	r0, [r7, #12]
 801788c:	60b9      	str	r1, [r7, #8]
 801788e:	607a      	str	r2, [r7, #4]
 8017890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017892:	2300      	movs	r3, #0
 8017894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801789c:	2b00      	cmp	r3, #0
 801789e:	d10a      	bne.n	80178b6 <xQueueGenericSend+0x32>
	__asm volatile
 80178a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178a4:	f383 8811 	msr	BASEPRI, r3
 80178a8:	f3bf 8f6f 	isb	sy
 80178ac:	f3bf 8f4f 	dsb	sy
 80178b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80178b2:	bf00      	nop
 80178b4:	e7fe      	b.n	80178b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80178b6:	68bb      	ldr	r3, [r7, #8]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d103      	bne.n	80178c4 <xQueueGenericSend+0x40>
 80178bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d101      	bne.n	80178c8 <xQueueGenericSend+0x44>
 80178c4:	2301      	movs	r3, #1
 80178c6:	e000      	b.n	80178ca <xQueueGenericSend+0x46>
 80178c8:	2300      	movs	r3, #0
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d10a      	bne.n	80178e4 <xQueueGenericSend+0x60>
	__asm volatile
 80178ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178d2:	f383 8811 	msr	BASEPRI, r3
 80178d6:	f3bf 8f6f 	isb	sy
 80178da:	f3bf 8f4f 	dsb	sy
 80178de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80178e0:	bf00      	nop
 80178e2:	e7fe      	b.n	80178e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80178e4:	683b      	ldr	r3, [r7, #0]
 80178e6:	2b02      	cmp	r3, #2
 80178e8:	d103      	bne.n	80178f2 <xQueueGenericSend+0x6e>
 80178ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178ee:	2b01      	cmp	r3, #1
 80178f0:	d101      	bne.n	80178f6 <xQueueGenericSend+0x72>
 80178f2:	2301      	movs	r3, #1
 80178f4:	e000      	b.n	80178f8 <xQueueGenericSend+0x74>
 80178f6:	2300      	movs	r3, #0
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d10a      	bne.n	8017912 <xQueueGenericSend+0x8e>
	__asm volatile
 80178fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017900:	f383 8811 	msr	BASEPRI, r3
 8017904:	f3bf 8f6f 	isb	sy
 8017908:	f3bf 8f4f 	dsb	sy
 801790c:	623b      	str	r3, [r7, #32]
}
 801790e:	bf00      	nop
 8017910:	e7fe      	b.n	8017910 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017912:	f001 fa71 	bl	8018df8 <xTaskGetSchedulerState>
 8017916:	4603      	mov	r3, r0
 8017918:	2b00      	cmp	r3, #0
 801791a:	d102      	bne.n	8017922 <xQueueGenericSend+0x9e>
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d101      	bne.n	8017926 <xQueueGenericSend+0xa2>
 8017922:	2301      	movs	r3, #1
 8017924:	e000      	b.n	8017928 <xQueueGenericSend+0xa4>
 8017926:	2300      	movs	r3, #0
 8017928:	2b00      	cmp	r3, #0
 801792a:	d10a      	bne.n	8017942 <xQueueGenericSend+0xbe>
	__asm volatile
 801792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017930:	f383 8811 	msr	BASEPRI, r3
 8017934:	f3bf 8f6f 	isb	sy
 8017938:	f3bf 8f4f 	dsb	sy
 801793c:	61fb      	str	r3, [r7, #28]
}
 801793e:	bf00      	nop
 8017940:	e7fe      	b.n	8017940 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017942:	f001 ffef 	bl	8019924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801794e:	429a      	cmp	r2, r3
 8017950:	d302      	bcc.n	8017958 <xQueueGenericSend+0xd4>
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	2b02      	cmp	r3, #2
 8017956:	d129      	bne.n	80179ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017958:	683a      	ldr	r2, [r7, #0]
 801795a:	68b9      	ldr	r1, [r7, #8]
 801795c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801795e:	f000 fa0b 	bl	8017d78 <prvCopyDataToQueue>
 8017962:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017968:	2b00      	cmp	r3, #0
 801796a:	d010      	beq.n	801798e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801796e:	3324      	adds	r3, #36	; 0x24
 8017970:	4618      	mov	r0, r3
 8017972:	f001 f821 	bl	80189b8 <xTaskRemoveFromEventList>
 8017976:	4603      	mov	r3, r0
 8017978:	2b00      	cmp	r3, #0
 801797a:	d013      	beq.n	80179a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801797c:	4b3f      	ldr	r3, [pc, #252]	; (8017a7c <xQueueGenericSend+0x1f8>)
 801797e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017982:	601a      	str	r2, [r3, #0]
 8017984:	f3bf 8f4f 	dsb	sy
 8017988:	f3bf 8f6f 	isb	sy
 801798c:	e00a      	b.n	80179a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017990:	2b00      	cmp	r3, #0
 8017992:	d007      	beq.n	80179a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017994:	4b39      	ldr	r3, [pc, #228]	; (8017a7c <xQueueGenericSend+0x1f8>)
 8017996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801799a:	601a      	str	r2, [r3, #0]
 801799c:	f3bf 8f4f 	dsb	sy
 80179a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80179a4:	f001 ffee 	bl	8019984 <vPortExitCritical>
				return pdPASS;
 80179a8:	2301      	movs	r3, #1
 80179aa:	e063      	b.n	8017a74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d103      	bne.n	80179ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80179b2:	f001 ffe7 	bl	8019984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80179b6:	2300      	movs	r3, #0
 80179b8:	e05c      	b.n	8017a74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80179ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d106      	bne.n	80179ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80179c0:	f107 0314 	add.w	r3, r7, #20
 80179c4:	4618      	mov	r0, r3
 80179c6:	f001 f8bd 	bl	8018b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80179ca:	2301      	movs	r3, #1
 80179cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80179ce:	f001 ffd9 	bl	8019984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80179d2:	f000 fd7b 	bl	80184cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80179d6:	f001 ffa5 	bl	8019924 <vPortEnterCritical>
 80179da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80179e0:	b25b      	sxtb	r3, r3
 80179e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179e6:	d103      	bne.n	80179f0 <xQueueGenericSend+0x16c>
 80179e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ea:	2200      	movs	r2, #0
 80179ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80179f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80179f6:	b25b      	sxtb	r3, r3
 80179f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179fc:	d103      	bne.n	8017a06 <xQueueGenericSend+0x182>
 80179fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a00:	2200      	movs	r2, #0
 8017a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017a06:	f001 ffbd 	bl	8019984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017a0a:	1d3a      	adds	r2, r7, #4
 8017a0c:	f107 0314 	add.w	r3, r7, #20
 8017a10:	4611      	mov	r1, r2
 8017a12:	4618      	mov	r0, r3
 8017a14:	f001 f8ac 	bl	8018b70 <xTaskCheckForTimeOut>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d124      	bne.n	8017a68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a20:	f000 faa2 	bl	8017f68 <prvIsQueueFull>
 8017a24:	4603      	mov	r3, r0
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d018      	beq.n	8017a5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a2c:	3310      	adds	r3, #16
 8017a2e:	687a      	ldr	r2, [r7, #4]
 8017a30:	4611      	mov	r1, r2
 8017a32:	4618      	mov	r0, r3
 8017a34:	f000 ff34 	bl	80188a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a3a:	f000 fa2d 	bl	8017e98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017a3e:	f000 fd53 	bl	80184e8 <xTaskResumeAll>
 8017a42:	4603      	mov	r3, r0
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	f47f af7c 	bne.w	8017942 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017a4a:	4b0c      	ldr	r3, [pc, #48]	; (8017a7c <xQueueGenericSend+0x1f8>)
 8017a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a50:	601a      	str	r2, [r3, #0]
 8017a52:	f3bf 8f4f 	dsb	sy
 8017a56:	f3bf 8f6f 	isb	sy
 8017a5a:	e772      	b.n	8017942 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a5e:	f000 fa1b 	bl	8017e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017a62:	f000 fd41 	bl	80184e8 <xTaskResumeAll>
 8017a66:	e76c      	b.n	8017942 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a6a:	f000 fa15 	bl	8017e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017a6e:	f000 fd3b 	bl	80184e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017a72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017a74:	4618      	mov	r0, r3
 8017a76:	3738      	adds	r7, #56	; 0x38
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}
 8017a7c:	e000ed04 	.word	0xe000ed04

08017a80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b090      	sub	sp, #64	; 0x40
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	60f8      	str	r0, [r7, #12]
 8017a88:	60b9      	str	r1, [r7, #8]
 8017a8a:	607a      	str	r2, [r7, #4]
 8017a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d10a      	bne.n	8017aae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a9c:	f383 8811 	msr	BASEPRI, r3
 8017aa0:	f3bf 8f6f 	isb	sy
 8017aa4:	f3bf 8f4f 	dsb	sy
 8017aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017aaa:	bf00      	nop
 8017aac:	e7fe      	b.n	8017aac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d103      	bne.n	8017abc <xQueueGenericSendFromISR+0x3c>
 8017ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d101      	bne.n	8017ac0 <xQueueGenericSendFromISR+0x40>
 8017abc:	2301      	movs	r3, #1
 8017abe:	e000      	b.n	8017ac2 <xQueueGenericSendFromISR+0x42>
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d10a      	bne.n	8017adc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aca:	f383 8811 	msr	BASEPRI, r3
 8017ace:	f3bf 8f6f 	isb	sy
 8017ad2:	f3bf 8f4f 	dsb	sy
 8017ad6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017ad8:	bf00      	nop
 8017ada:	e7fe      	b.n	8017ada <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	2b02      	cmp	r3, #2
 8017ae0:	d103      	bne.n	8017aea <xQueueGenericSendFromISR+0x6a>
 8017ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ae6:	2b01      	cmp	r3, #1
 8017ae8:	d101      	bne.n	8017aee <xQueueGenericSendFromISR+0x6e>
 8017aea:	2301      	movs	r3, #1
 8017aec:	e000      	b.n	8017af0 <xQueueGenericSendFromISR+0x70>
 8017aee:	2300      	movs	r3, #0
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d10a      	bne.n	8017b0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017af8:	f383 8811 	msr	BASEPRI, r3
 8017afc:	f3bf 8f6f 	isb	sy
 8017b00:	f3bf 8f4f 	dsb	sy
 8017b04:	623b      	str	r3, [r7, #32]
}
 8017b06:	bf00      	nop
 8017b08:	e7fe      	b.n	8017b08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017b0a:	f001 ffed 	bl	8019ae8 <vPortValidateInterruptPriority>
	__asm volatile
 8017b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8017b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b16:	f383 8811 	msr	BASEPRI, r3
 8017b1a:	f3bf 8f6f 	isb	sy
 8017b1e:	f3bf 8f4f 	dsb	sy
 8017b22:	61fa      	str	r2, [r7, #28]
 8017b24:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017b26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017b28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b32:	429a      	cmp	r2, r3
 8017b34:	d302      	bcc.n	8017b3c <xQueueGenericSendFromISR+0xbc>
 8017b36:	683b      	ldr	r3, [r7, #0]
 8017b38:	2b02      	cmp	r3, #2
 8017b3a:	d12f      	bne.n	8017b9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017b4c:	683a      	ldr	r2, [r7, #0]
 8017b4e:	68b9      	ldr	r1, [r7, #8]
 8017b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017b52:	f000 f911 	bl	8017d78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017b56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b5e:	d112      	bne.n	8017b86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d016      	beq.n	8017b96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b6a:	3324      	adds	r3, #36	; 0x24
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f000 ff23 	bl	80189b8 <xTaskRemoveFromEventList>
 8017b72:	4603      	mov	r3, r0
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d00e      	beq.n	8017b96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d00b      	beq.n	8017b96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	2201      	movs	r2, #1
 8017b82:	601a      	str	r2, [r3, #0]
 8017b84:	e007      	b.n	8017b96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017b86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017b8a:	3301      	adds	r3, #1
 8017b8c:	b2db      	uxtb	r3, r3
 8017b8e:	b25a      	sxtb	r2, r3
 8017b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017b96:	2301      	movs	r3, #1
 8017b98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017b9a:	e001      	b.n	8017ba0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ba2:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	f383 8811 	msr	BASEPRI, r3
}
 8017baa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017bae:	4618      	mov	r0, r3
 8017bb0:	3740      	adds	r7, #64	; 0x40
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}
	...

08017bb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b08c      	sub	sp, #48	; 0x30
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	60f8      	str	r0, [r7, #12]
 8017bc0:	60b9      	str	r1, [r7, #8]
 8017bc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d10a      	bne.n	8017be8 <xQueueReceive+0x30>
	__asm volatile
 8017bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bd6:	f383 8811 	msr	BASEPRI, r3
 8017bda:	f3bf 8f6f 	isb	sy
 8017bde:	f3bf 8f4f 	dsb	sy
 8017be2:	623b      	str	r3, [r7, #32]
}
 8017be4:	bf00      	nop
 8017be6:	e7fe      	b.n	8017be6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d103      	bne.n	8017bf6 <xQueueReceive+0x3e>
 8017bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d101      	bne.n	8017bfa <xQueueReceive+0x42>
 8017bf6:	2301      	movs	r3, #1
 8017bf8:	e000      	b.n	8017bfc <xQueueReceive+0x44>
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d10a      	bne.n	8017c16 <xQueueReceive+0x5e>
	__asm volatile
 8017c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c04:	f383 8811 	msr	BASEPRI, r3
 8017c08:	f3bf 8f6f 	isb	sy
 8017c0c:	f3bf 8f4f 	dsb	sy
 8017c10:	61fb      	str	r3, [r7, #28]
}
 8017c12:	bf00      	nop
 8017c14:	e7fe      	b.n	8017c14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017c16:	f001 f8ef 	bl	8018df8 <xTaskGetSchedulerState>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d102      	bne.n	8017c26 <xQueueReceive+0x6e>
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d101      	bne.n	8017c2a <xQueueReceive+0x72>
 8017c26:	2301      	movs	r3, #1
 8017c28:	e000      	b.n	8017c2c <xQueueReceive+0x74>
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d10a      	bne.n	8017c46 <xQueueReceive+0x8e>
	__asm volatile
 8017c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c34:	f383 8811 	msr	BASEPRI, r3
 8017c38:	f3bf 8f6f 	isb	sy
 8017c3c:	f3bf 8f4f 	dsb	sy
 8017c40:	61bb      	str	r3, [r7, #24]
}
 8017c42:	bf00      	nop
 8017c44:	e7fe      	b.n	8017c44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017c46:	f001 fe6d 	bl	8019924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d01f      	beq.n	8017c96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017c56:	68b9      	ldr	r1, [r7, #8]
 8017c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c5a:	f000 f8f7 	bl	8017e4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c60:	1e5a      	subs	r2, r3, #1
 8017c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c68:	691b      	ldr	r3, [r3, #16]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d00f      	beq.n	8017c8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c70:	3310      	adds	r3, #16
 8017c72:	4618      	mov	r0, r3
 8017c74:	f000 fea0 	bl	80189b8 <xTaskRemoveFromEventList>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d007      	beq.n	8017c8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017c7e:	4b3d      	ldr	r3, [pc, #244]	; (8017d74 <xQueueReceive+0x1bc>)
 8017c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017c84:	601a      	str	r2, [r3, #0]
 8017c86:	f3bf 8f4f 	dsb	sy
 8017c8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017c8e:	f001 fe79 	bl	8019984 <vPortExitCritical>
				return pdPASS;
 8017c92:	2301      	movs	r3, #1
 8017c94:	e069      	b.n	8017d6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d103      	bne.n	8017ca4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017c9c:	f001 fe72 	bl	8019984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	e062      	b.n	8017d6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d106      	bne.n	8017cb8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017caa:	f107 0310 	add.w	r3, r7, #16
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f000 ff48 	bl	8018b44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017cb8:	f001 fe64 	bl	8019984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017cbc:	f000 fc06 	bl	80184cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017cc0:	f001 fe30 	bl	8019924 <vPortEnterCritical>
 8017cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017cca:	b25b      	sxtb	r3, r3
 8017ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017cd0:	d103      	bne.n	8017cda <xQueueReceive+0x122>
 8017cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017ce0:	b25b      	sxtb	r3, r3
 8017ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017ce6:	d103      	bne.n	8017cf0 <xQueueReceive+0x138>
 8017ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cea:	2200      	movs	r2, #0
 8017cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017cf0:	f001 fe48 	bl	8019984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017cf4:	1d3a      	adds	r2, r7, #4
 8017cf6:	f107 0310 	add.w	r3, r7, #16
 8017cfa:	4611      	mov	r1, r2
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f000 ff37 	bl	8018b70 <xTaskCheckForTimeOut>
 8017d02:	4603      	mov	r3, r0
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d123      	bne.n	8017d50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d0a:	f000 f917 	bl	8017f3c <prvIsQueueEmpty>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d017      	beq.n	8017d44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d16:	3324      	adds	r3, #36	; 0x24
 8017d18:	687a      	ldr	r2, [r7, #4]
 8017d1a:	4611      	mov	r1, r2
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f000 fdbf 	bl	80188a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d24:	f000 f8b8 	bl	8017e98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017d28:	f000 fbde 	bl	80184e8 <xTaskResumeAll>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d189      	bne.n	8017c46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017d32:	4b10      	ldr	r3, [pc, #64]	; (8017d74 <xQueueReceive+0x1bc>)
 8017d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d38:	601a      	str	r2, [r3, #0]
 8017d3a:	f3bf 8f4f 	dsb	sy
 8017d3e:	f3bf 8f6f 	isb	sy
 8017d42:	e780      	b.n	8017c46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d46:	f000 f8a7 	bl	8017e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017d4a:	f000 fbcd 	bl	80184e8 <xTaskResumeAll>
 8017d4e:	e77a      	b.n	8017c46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d52:	f000 f8a1 	bl	8017e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017d56:	f000 fbc7 	bl	80184e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d5c:	f000 f8ee 	bl	8017f3c <prvIsQueueEmpty>
 8017d60:	4603      	mov	r3, r0
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	f43f af6f 	beq.w	8017c46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017d68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	3730      	adds	r7, #48	; 0x30
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	bd80      	pop	{r7, pc}
 8017d72:	bf00      	nop
 8017d74:	e000ed04 	.word	0xe000ed04

08017d78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b086      	sub	sp, #24
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	60b9      	str	r1, [r7, #8]
 8017d82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017d84:	2300      	movs	r3, #0
 8017d86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d10d      	bne.n	8017db2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d14d      	bne.n	8017e3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	689b      	ldr	r3, [r3, #8]
 8017da2:	4618      	mov	r0, r3
 8017da4:	f001 f846 	bl	8018e34 <xTaskPriorityDisinherit>
 8017da8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	2200      	movs	r2, #0
 8017dae:	609a      	str	r2, [r3, #8]
 8017db0:	e043      	b.n	8017e3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d119      	bne.n	8017dec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	6858      	ldr	r0, [r3, #4]
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dc0:	461a      	mov	r2, r3
 8017dc2:	68b9      	ldr	r1, [r7, #8]
 8017dc4:	f002 f8e4 	bl	8019f90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	685a      	ldr	r2, [r3, #4]
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dd0:	441a      	add	r2, r3
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	685a      	ldr	r2, [r3, #4]
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	689b      	ldr	r3, [r3, #8]
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d32b      	bcc.n	8017e3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	681a      	ldr	r2, [r3, #0]
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	605a      	str	r2, [r3, #4]
 8017dea:	e026      	b.n	8017e3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	68d8      	ldr	r0, [r3, #12]
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017df4:	461a      	mov	r2, r3
 8017df6:	68b9      	ldr	r1, [r7, #8]
 8017df8:	f002 f8ca 	bl	8019f90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	68da      	ldr	r2, [r3, #12]
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e04:	425b      	negs	r3, r3
 8017e06:	441a      	add	r2, r3
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	68da      	ldr	r2, [r3, #12]
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	429a      	cmp	r2, r3
 8017e16:	d207      	bcs.n	8017e28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	689a      	ldr	r2, [r3, #8]
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e20:	425b      	negs	r3, r3
 8017e22:	441a      	add	r2, r3
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	2b02      	cmp	r3, #2
 8017e2c:	d105      	bne.n	8017e3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017e2e:	693b      	ldr	r3, [r7, #16]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d002      	beq.n	8017e3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017e34:	693b      	ldr	r3, [r7, #16]
 8017e36:	3b01      	subs	r3, #1
 8017e38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017e3a:	693b      	ldr	r3, [r7, #16]
 8017e3c:	1c5a      	adds	r2, r3, #1
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017e42:	697b      	ldr	r3, [r7, #20]
}
 8017e44:	4618      	mov	r0, r3
 8017e46:	3718      	adds	r7, #24
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}

08017e4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b082      	sub	sp, #8
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d018      	beq.n	8017e90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	68da      	ldr	r2, [r3, #12]
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e66:	441a      	add	r2, r3
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	68da      	ldr	r2, [r3, #12]
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	689b      	ldr	r3, [r3, #8]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d303      	bcc.n	8017e80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	681a      	ldr	r2, [r3, #0]
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	68d9      	ldr	r1, [r3, #12]
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e88:	461a      	mov	r2, r3
 8017e8a:	6838      	ldr	r0, [r7, #0]
 8017e8c:	f002 f880 	bl	8019f90 <memcpy>
	}
}
 8017e90:	bf00      	nop
 8017e92:	3708      	adds	r7, #8
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bd80      	pop	{r7, pc}

08017e98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b084      	sub	sp, #16
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017ea0:	f001 fd40 	bl	8019924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017eaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017eac:	e011      	b.n	8017ed2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d012      	beq.n	8017edc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	3324      	adds	r3, #36	; 0x24
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f000 fd7c 	bl	80189b8 <xTaskRemoveFromEventList>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d001      	beq.n	8017eca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017ec6:	f000 feb5 	bl	8018c34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017eca:	7bfb      	ldrb	r3, [r7, #15]
 8017ecc:	3b01      	subs	r3, #1
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	dce9      	bgt.n	8017eae <prvUnlockQueue+0x16>
 8017eda:	e000      	b.n	8017ede <prvUnlockQueue+0x46>
					break;
 8017edc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	22ff      	movs	r2, #255	; 0xff
 8017ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017ee6:	f001 fd4d 	bl	8019984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017eea:	f001 fd1b 	bl	8019924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017ef4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017ef6:	e011      	b.n	8017f1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	691b      	ldr	r3, [r3, #16]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d012      	beq.n	8017f26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	3310      	adds	r3, #16
 8017f04:	4618      	mov	r0, r3
 8017f06:	f000 fd57 	bl	80189b8 <xTaskRemoveFromEventList>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d001      	beq.n	8017f14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017f10:	f000 fe90 	bl	8018c34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017f14:	7bbb      	ldrb	r3, [r7, #14]
 8017f16:	3b01      	subs	r3, #1
 8017f18:	b2db      	uxtb	r3, r3
 8017f1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	dce9      	bgt.n	8017ef8 <prvUnlockQueue+0x60>
 8017f24:	e000      	b.n	8017f28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017f26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	22ff      	movs	r2, #255	; 0xff
 8017f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017f30:	f001 fd28 	bl	8019984 <vPortExitCritical>
}
 8017f34:	bf00      	nop
 8017f36:	3710      	adds	r7, #16
 8017f38:	46bd      	mov	sp, r7
 8017f3a:	bd80      	pop	{r7, pc}

08017f3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b084      	sub	sp, #16
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017f44:	f001 fcee 	bl	8019924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d102      	bne.n	8017f56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017f50:	2301      	movs	r3, #1
 8017f52:	60fb      	str	r3, [r7, #12]
 8017f54:	e001      	b.n	8017f5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017f56:	2300      	movs	r3, #0
 8017f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017f5a:	f001 fd13 	bl	8019984 <vPortExitCritical>

	return xReturn;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
}
 8017f60:	4618      	mov	r0, r3
 8017f62:	3710      	adds	r7, #16
 8017f64:	46bd      	mov	sp, r7
 8017f66:	bd80      	pop	{r7, pc}

08017f68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b084      	sub	sp, #16
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017f70:	f001 fcd8 	bl	8019924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	d102      	bne.n	8017f86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017f80:	2301      	movs	r3, #1
 8017f82:	60fb      	str	r3, [r7, #12]
 8017f84:	e001      	b.n	8017f8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017f86:	2300      	movs	r3, #0
 8017f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017f8a:	f001 fcfb 	bl	8019984 <vPortExitCritical>

	return xReturn;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
}
 8017f90:	4618      	mov	r0, r3
 8017f92:	3710      	adds	r7, #16
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}

08017f98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017f98:	b480      	push	{r7}
 8017f9a:	b085      	sub	sp, #20
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
 8017fa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	60fb      	str	r3, [r7, #12]
 8017fa6:	e014      	b.n	8017fd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017fa8:	4a0f      	ldr	r2, [pc, #60]	; (8017fe8 <vQueueAddToRegistry+0x50>)
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d10b      	bne.n	8017fcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017fb4:	490c      	ldr	r1, [pc, #48]	; (8017fe8 <vQueueAddToRegistry+0x50>)
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	683a      	ldr	r2, [r7, #0]
 8017fba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017fbe:	4a0a      	ldr	r2, [pc, #40]	; (8017fe8 <vQueueAddToRegistry+0x50>)
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	00db      	lsls	r3, r3, #3
 8017fc4:	4413      	add	r3, r2
 8017fc6:	687a      	ldr	r2, [r7, #4]
 8017fc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017fca:	e006      	b.n	8017fda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	3301      	adds	r3, #1
 8017fd0:	60fb      	str	r3, [r7, #12]
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	2b07      	cmp	r3, #7
 8017fd6:	d9e7      	bls.n	8017fa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017fd8:	bf00      	nop
 8017fda:	bf00      	nop
 8017fdc:	3714      	adds	r7, #20
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe4:	4770      	bx	lr
 8017fe6:	bf00      	nop
 8017fe8:	24002698 	.word	0x24002698

08017fec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b086      	sub	sp, #24
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	60f8      	str	r0, [r7, #12]
 8017ff4:	60b9      	str	r1, [r7, #8]
 8017ff6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017ffc:	f001 fc92 	bl	8019924 <vPortEnterCritical>
 8018000:	697b      	ldr	r3, [r7, #20]
 8018002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018006:	b25b      	sxtb	r3, r3
 8018008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801800c:	d103      	bne.n	8018016 <vQueueWaitForMessageRestricted+0x2a>
 801800e:	697b      	ldr	r3, [r7, #20]
 8018010:	2200      	movs	r2, #0
 8018012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801801c:	b25b      	sxtb	r3, r3
 801801e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018022:	d103      	bne.n	801802c <vQueueWaitForMessageRestricted+0x40>
 8018024:	697b      	ldr	r3, [r7, #20]
 8018026:	2200      	movs	r2, #0
 8018028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801802c:	f001 fcaa 	bl	8019984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018030:	697b      	ldr	r3, [r7, #20]
 8018032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018034:	2b00      	cmp	r3, #0
 8018036:	d106      	bne.n	8018046 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018038:	697b      	ldr	r3, [r7, #20]
 801803a:	3324      	adds	r3, #36	; 0x24
 801803c:	687a      	ldr	r2, [r7, #4]
 801803e:	68b9      	ldr	r1, [r7, #8]
 8018040:	4618      	mov	r0, r3
 8018042:	f000 fc8d 	bl	8018960 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018046:	6978      	ldr	r0, [r7, #20]
 8018048:	f7ff ff26 	bl	8017e98 <prvUnlockQueue>
	}
 801804c:	bf00      	nop
 801804e:	3718      	adds	r7, #24
 8018050:	46bd      	mov	sp, r7
 8018052:	bd80      	pop	{r7, pc}

08018054 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018054:	b580      	push	{r7, lr}
 8018056:	b08e      	sub	sp, #56	; 0x38
 8018058:	af04      	add	r7, sp, #16
 801805a:	60f8      	str	r0, [r7, #12]
 801805c:	60b9      	str	r1, [r7, #8]
 801805e:	607a      	str	r2, [r7, #4]
 8018060:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018064:	2b00      	cmp	r3, #0
 8018066:	d10a      	bne.n	801807e <xTaskCreateStatic+0x2a>
	__asm volatile
 8018068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801806c:	f383 8811 	msr	BASEPRI, r3
 8018070:	f3bf 8f6f 	isb	sy
 8018074:	f3bf 8f4f 	dsb	sy
 8018078:	623b      	str	r3, [r7, #32]
}
 801807a:	bf00      	nop
 801807c:	e7fe      	b.n	801807c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018080:	2b00      	cmp	r3, #0
 8018082:	d10a      	bne.n	801809a <xTaskCreateStatic+0x46>
	__asm volatile
 8018084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018088:	f383 8811 	msr	BASEPRI, r3
 801808c:	f3bf 8f6f 	isb	sy
 8018090:	f3bf 8f4f 	dsb	sy
 8018094:	61fb      	str	r3, [r7, #28]
}
 8018096:	bf00      	nop
 8018098:	e7fe      	b.n	8018098 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801809a:	235c      	movs	r3, #92	; 0x5c
 801809c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801809e:	693b      	ldr	r3, [r7, #16]
 80180a0:	2b5c      	cmp	r3, #92	; 0x5c
 80180a2:	d00a      	beq.n	80180ba <xTaskCreateStatic+0x66>
	__asm volatile
 80180a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180a8:	f383 8811 	msr	BASEPRI, r3
 80180ac:	f3bf 8f6f 	isb	sy
 80180b0:	f3bf 8f4f 	dsb	sy
 80180b4:	61bb      	str	r3, [r7, #24]
}
 80180b6:	bf00      	nop
 80180b8:	e7fe      	b.n	80180b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80180ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80180bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d01e      	beq.n	8018100 <xTaskCreateStatic+0xac>
 80180c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d01b      	beq.n	8018100 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80180c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80180cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80180d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80180d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d4:	2202      	movs	r2, #2
 80180d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80180da:	2300      	movs	r3, #0
 80180dc:	9303      	str	r3, [sp, #12]
 80180de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e0:	9302      	str	r3, [sp, #8]
 80180e2:	f107 0314 	add.w	r3, r7, #20
 80180e6:	9301      	str	r3, [sp, #4]
 80180e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ea:	9300      	str	r3, [sp, #0]
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	687a      	ldr	r2, [r7, #4]
 80180f0:	68b9      	ldr	r1, [r7, #8]
 80180f2:	68f8      	ldr	r0, [r7, #12]
 80180f4:	f000 f850 	bl	8018198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80180f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80180fa:	f000 f8dd 	bl	80182b8 <prvAddNewTaskToReadyList>
 80180fe:	e001      	b.n	8018104 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018100:	2300      	movs	r3, #0
 8018102:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018104:	697b      	ldr	r3, [r7, #20]
	}
 8018106:	4618      	mov	r0, r3
 8018108:	3728      	adds	r7, #40	; 0x28
 801810a:	46bd      	mov	sp, r7
 801810c:	bd80      	pop	{r7, pc}

0801810e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801810e:	b580      	push	{r7, lr}
 8018110:	b08c      	sub	sp, #48	; 0x30
 8018112:	af04      	add	r7, sp, #16
 8018114:	60f8      	str	r0, [r7, #12]
 8018116:	60b9      	str	r1, [r7, #8]
 8018118:	603b      	str	r3, [r7, #0]
 801811a:	4613      	mov	r3, r2
 801811c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801811e:	88fb      	ldrh	r3, [r7, #6]
 8018120:	009b      	lsls	r3, r3, #2
 8018122:	4618      	mov	r0, r3
 8018124:	f001 fd20 	bl	8019b68 <pvPortMalloc>
 8018128:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801812a:	697b      	ldr	r3, [r7, #20]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d00e      	beq.n	801814e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018130:	205c      	movs	r0, #92	; 0x5c
 8018132:	f001 fd19 	bl	8019b68 <pvPortMalloc>
 8018136:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018138:	69fb      	ldr	r3, [r7, #28]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d003      	beq.n	8018146 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801813e:	69fb      	ldr	r3, [r7, #28]
 8018140:	697a      	ldr	r2, [r7, #20]
 8018142:	631a      	str	r2, [r3, #48]	; 0x30
 8018144:	e005      	b.n	8018152 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018146:	6978      	ldr	r0, [r7, #20]
 8018148:	f001 fdda 	bl	8019d00 <vPortFree>
 801814c:	e001      	b.n	8018152 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801814e:	2300      	movs	r3, #0
 8018150:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018152:	69fb      	ldr	r3, [r7, #28]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d017      	beq.n	8018188 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018158:	69fb      	ldr	r3, [r7, #28]
 801815a:	2200      	movs	r2, #0
 801815c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018160:	88fa      	ldrh	r2, [r7, #6]
 8018162:	2300      	movs	r3, #0
 8018164:	9303      	str	r3, [sp, #12]
 8018166:	69fb      	ldr	r3, [r7, #28]
 8018168:	9302      	str	r3, [sp, #8]
 801816a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801816c:	9301      	str	r3, [sp, #4]
 801816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018170:	9300      	str	r3, [sp, #0]
 8018172:	683b      	ldr	r3, [r7, #0]
 8018174:	68b9      	ldr	r1, [r7, #8]
 8018176:	68f8      	ldr	r0, [r7, #12]
 8018178:	f000 f80e 	bl	8018198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801817c:	69f8      	ldr	r0, [r7, #28]
 801817e:	f000 f89b 	bl	80182b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018182:	2301      	movs	r3, #1
 8018184:	61bb      	str	r3, [r7, #24]
 8018186:	e002      	b.n	801818e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801818c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801818e:	69bb      	ldr	r3, [r7, #24]
	}
 8018190:	4618      	mov	r0, r3
 8018192:	3720      	adds	r7, #32
 8018194:	46bd      	mov	sp, r7
 8018196:	bd80      	pop	{r7, pc}

08018198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b088      	sub	sp, #32
 801819c:	af00      	add	r7, sp, #0
 801819e:	60f8      	str	r0, [r7, #12]
 80181a0:	60b9      	str	r1, [r7, #8]
 80181a2:	607a      	str	r2, [r7, #4]
 80181a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80181a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	009b      	lsls	r3, r3, #2
 80181ae:	461a      	mov	r2, r3
 80181b0:	21a5      	movs	r1, #165	; 0xa5
 80181b2:	f001 fefb 	bl	8019fac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80181b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80181ba:	6879      	ldr	r1, [r7, #4]
 80181bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80181c0:	440b      	add	r3, r1
 80181c2:	009b      	lsls	r3, r3, #2
 80181c4:	4413      	add	r3, r2
 80181c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80181c8:	69bb      	ldr	r3, [r7, #24]
 80181ca:	f023 0307 	bic.w	r3, r3, #7
 80181ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80181d0:	69bb      	ldr	r3, [r7, #24]
 80181d2:	f003 0307 	and.w	r3, r3, #7
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d00a      	beq.n	80181f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80181da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181de:	f383 8811 	msr	BASEPRI, r3
 80181e2:	f3bf 8f6f 	isb	sy
 80181e6:	f3bf 8f4f 	dsb	sy
 80181ea:	617b      	str	r3, [r7, #20]
}
 80181ec:	bf00      	nop
 80181ee:	e7fe      	b.n	80181ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80181f0:	68bb      	ldr	r3, [r7, #8]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d01f      	beq.n	8018236 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80181f6:	2300      	movs	r3, #0
 80181f8:	61fb      	str	r3, [r7, #28]
 80181fa:	e012      	b.n	8018222 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80181fc:	68ba      	ldr	r2, [r7, #8]
 80181fe:	69fb      	ldr	r3, [r7, #28]
 8018200:	4413      	add	r3, r2
 8018202:	7819      	ldrb	r1, [r3, #0]
 8018204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018206:	69fb      	ldr	r3, [r7, #28]
 8018208:	4413      	add	r3, r2
 801820a:	3334      	adds	r3, #52	; 0x34
 801820c:	460a      	mov	r2, r1
 801820e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018210:	68ba      	ldr	r2, [r7, #8]
 8018212:	69fb      	ldr	r3, [r7, #28]
 8018214:	4413      	add	r3, r2
 8018216:	781b      	ldrb	r3, [r3, #0]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d006      	beq.n	801822a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801821c:	69fb      	ldr	r3, [r7, #28]
 801821e:	3301      	adds	r3, #1
 8018220:	61fb      	str	r3, [r7, #28]
 8018222:	69fb      	ldr	r3, [r7, #28]
 8018224:	2b0f      	cmp	r3, #15
 8018226:	d9e9      	bls.n	80181fc <prvInitialiseNewTask+0x64>
 8018228:	e000      	b.n	801822c <prvInitialiseNewTask+0x94>
			{
				break;
 801822a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801822e:	2200      	movs	r2, #0
 8018230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018234:	e003      	b.n	801823e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018238:	2200      	movs	r2, #0
 801823a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018240:	2b37      	cmp	r3, #55	; 0x37
 8018242:	d901      	bls.n	8018248 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018244:	2337      	movs	r3, #55	; 0x37
 8018246:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801824a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801824c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018252:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018256:	2200      	movs	r2, #0
 8018258:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825c:	3304      	adds	r3, #4
 801825e:	4618      	mov	r0, r3
 8018260:	f7ff f978 	bl	8017554 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018266:	3318      	adds	r3, #24
 8018268:	4618      	mov	r0, r3
 801826a:	f7ff f973 	bl	8017554 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018272:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018276:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801827c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018282:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018286:	2200      	movs	r2, #0
 8018288:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801828c:	2200      	movs	r2, #0
 801828e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018292:	683a      	ldr	r2, [r7, #0]
 8018294:	68f9      	ldr	r1, [r7, #12]
 8018296:	69b8      	ldr	r0, [r7, #24]
 8018298:	f001 fa14 	bl	80196c4 <pxPortInitialiseStack>
 801829c:	4602      	mov	r2, r0
 801829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80182a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d002      	beq.n	80182ae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80182a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80182ae:	bf00      	nop
 80182b0:	3720      	adds	r7, #32
 80182b2:	46bd      	mov	sp, r7
 80182b4:	bd80      	pop	{r7, pc}
	...

080182b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b082      	sub	sp, #8
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80182c0:	f001 fb30 	bl	8019924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80182c4:	4b2d      	ldr	r3, [pc, #180]	; (801837c <prvAddNewTaskToReadyList+0xc4>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	3301      	adds	r3, #1
 80182ca:	4a2c      	ldr	r2, [pc, #176]	; (801837c <prvAddNewTaskToReadyList+0xc4>)
 80182cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80182ce:	4b2c      	ldr	r3, [pc, #176]	; (8018380 <prvAddNewTaskToReadyList+0xc8>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d109      	bne.n	80182ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80182d6:	4a2a      	ldr	r2, [pc, #168]	; (8018380 <prvAddNewTaskToReadyList+0xc8>)
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80182dc:	4b27      	ldr	r3, [pc, #156]	; (801837c <prvAddNewTaskToReadyList+0xc4>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	2b01      	cmp	r3, #1
 80182e2:	d110      	bne.n	8018306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80182e4:	f000 fcca 	bl	8018c7c <prvInitialiseTaskLists>
 80182e8:	e00d      	b.n	8018306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80182ea:	4b26      	ldr	r3, [pc, #152]	; (8018384 <prvAddNewTaskToReadyList+0xcc>)
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d109      	bne.n	8018306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80182f2:	4b23      	ldr	r3, [pc, #140]	; (8018380 <prvAddNewTaskToReadyList+0xc8>)
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d802      	bhi.n	8018306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018300:	4a1f      	ldr	r2, [pc, #124]	; (8018380 <prvAddNewTaskToReadyList+0xc8>)
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018306:	4b20      	ldr	r3, [pc, #128]	; (8018388 <prvAddNewTaskToReadyList+0xd0>)
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	3301      	adds	r3, #1
 801830c:	4a1e      	ldr	r2, [pc, #120]	; (8018388 <prvAddNewTaskToReadyList+0xd0>)
 801830e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018310:	4b1d      	ldr	r3, [pc, #116]	; (8018388 <prvAddNewTaskToReadyList+0xd0>)
 8018312:	681a      	ldr	r2, [r3, #0]
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801831c:	4b1b      	ldr	r3, [pc, #108]	; (801838c <prvAddNewTaskToReadyList+0xd4>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	429a      	cmp	r2, r3
 8018322:	d903      	bls.n	801832c <prvAddNewTaskToReadyList+0x74>
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018328:	4a18      	ldr	r2, [pc, #96]	; (801838c <prvAddNewTaskToReadyList+0xd4>)
 801832a:	6013      	str	r3, [r2, #0]
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018330:	4613      	mov	r3, r2
 8018332:	009b      	lsls	r3, r3, #2
 8018334:	4413      	add	r3, r2
 8018336:	009b      	lsls	r3, r3, #2
 8018338:	4a15      	ldr	r2, [pc, #84]	; (8018390 <prvAddNewTaskToReadyList+0xd8>)
 801833a:	441a      	add	r2, r3
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	3304      	adds	r3, #4
 8018340:	4619      	mov	r1, r3
 8018342:	4610      	mov	r0, r2
 8018344:	f7ff f913 	bl	801756e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018348:	f001 fb1c 	bl	8019984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801834c:	4b0d      	ldr	r3, [pc, #52]	; (8018384 <prvAddNewTaskToReadyList+0xcc>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d00e      	beq.n	8018372 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018354:	4b0a      	ldr	r3, [pc, #40]	; (8018380 <prvAddNewTaskToReadyList+0xc8>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801835e:	429a      	cmp	r2, r3
 8018360:	d207      	bcs.n	8018372 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018362:	4b0c      	ldr	r3, [pc, #48]	; (8018394 <prvAddNewTaskToReadyList+0xdc>)
 8018364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018368:	601a      	str	r2, [r3, #0]
 801836a:	f3bf 8f4f 	dsb	sy
 801836e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018372:	bf00      	nop
 8018374:	3708      	adds	r7, #8
 8018376:	46bd      	mov	sp, r7
 8018378:	bd80      	pop	{r7, pc}
 801837a:	bf00      	nop
 801837c:	24002bac 	.word	0x24002bac
 8018380:	240026d8 	.word	0x240026d8
 8018384:	24002bb8 	.word	0x24002bb8
 8018388:	24002bc8 	.word	0x24002bc8
 801838c:	24002bb4 	.word	0x24002bb4
 8018390:	240026dc 	.word	0x240026dc
 8018394:	e000ed04 	.word	0xe000ed04

08018398 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018398:	b580      	push	{r7, lr}
 801839a:	b084      	sub	sp, #16
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80183a0:	2300      	movs	r3, #0
 80183a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d017      	beq.n	80183da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80183aa:	4b13      	ldr	r3, [pc, #76]	; (80183f8 <vTaskDelay+0x60>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d00a      	beq.n	80183c8 <vTaskDelay+0x30>
	__asm volatile
 80183b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183b6:	f383 8811 	msr	BASEPRI, r3
 80183ba:	f3bf 8f6f 	isb	sy
 80183be:	f3bf 8f4f 	dsb	sy
 80183c2:	60bb      	str	r3, [r7, #8]
}
 80183c4:	bf00      	nop
 80183c6:	e7fe      	b.n	80183c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80183c8:	f000 f880 	bl	80184cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80183cc:	2100      	movs	r1, #0
 80183ce:	6878      	ldr	r0, [r7, #4]
 80183d0:	f000 fdb6 	bl	8018f40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80183d4:	f000 f888 	bl	80184e8 <xTaskResumeAll>
 80183d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d107      	bne.n	80183f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80183e0:	4b06      	ldr	r3, [pc, #24]	; (80183fc <vTaskDelay+0x64>)
 80183e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183e6:	601a      	str	r2, [r3, #0]
 80183e8:	f3bf 8f4f 	dsb	sy
 80183ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80183f0:	bf00      	nop
 80183f2:	3710      	adds	r7, #16
 80183f4:	46bd      	mov	sp, r7
 80183f6:	bd80      	pop	{r7, pc}
 80183f8:	24002bd4 	.word	0x24002bd4
 80183fc:	e000ed04 	.word	0xe000ed04

08018400 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b08a      	sub	sp, #40	; 0x28
 8018404:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018406:	2300      	movs	r3, #0
 8018408:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801840a:	2300      	movs	r3, #0
 801840c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801840e:	463a      	mov	r2, r7
 8018410:	1d39      	adds	r1, r7, #4
 8018412:	f107 0308 	add.w	r3, r7, #8
 8018416:	4618      	mov	r0, r3
 8018418:	f7fe fddc 	bl	8016fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801841c:	6839      	ldr	r1, [r7, #0]
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	68ba      	ldr	r2, [r7, #8]
 8018422:	9202      	str	r2, [sp, #8]
 8018424:	9301      	str	r3, [sp, #4]
 8018426:	2300      	movs	r3, #0
 8018428:	9300      	str	r3, [sp, #0]
 801842a:	2300      	movs	r3, #0
 801842c:	460a      	mov	r2, r1
 801842e:	4921      	ldr	r1, [pc, #132]	; (80184b4 <vTaskStartScheduler+0xb4>)
 8018430:	4821      	ldr	r0, [pc, #132]	; (80184b8 <vTaskStartScheduler+0xb8>)
 8018432:	f7ff fe0f 	bl	8018054 <xTaskCreateStatic>
 8018436:	4603      	mov	r3, r0
 8018438:	4a20      	ldr	r2, [pc, #128]	; (80184bc <vTaskStartScheduler+0xbc>)
 801843a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801843c:	4b1f      	ldr	r3, [pc, #124]	; (80184bc <vTaskStartScheduler+0xbc>)
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d002      	beq.n	801844a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018444:	2301      	movs	r3, #1
 8018446:	617b      	str	r3, [r7, #20]
 8018448:	e001      	b.n	801844e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801844a:	2300      	movs	r3, #0
 801844c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801844e:	697b      	ldr	r3, [r7, #20]
 8018450:	2b01      	cmp	r3, #1
 8018452:	d102      	bne.n	801845a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018454:	f000 fdc8 	bl	8018fe8 <xTimerCreateTimerTask>
 8018458:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801845a:	697b      	ldr	r3, [r7, #20]
 801845c:	2b01      	cmp	r3, #1
 801845e:	d116      	bne.n	801848e <vTaskStartScheduler+0x8e>
	__asm volatile
 8018460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018464:	f383 8811 	msr	BASEPRI, r3
 8018468:	f3bf 8f6f 	isb	sy
 801846c:	f3bf 8f4f 	dsb	sy
 8018470:	613b      	str	r3, [r7, #16]
}
 8018472:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018474:	4b12      	ldr	r3, [pc, #72]	; (80184c0 <vTaskStartScheduler+0xc0>)
 8018476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801847a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801847c:	4b11      	ldr	r3, [pc, #68]	; (80184c4 <vTaskStartScheduler+0xc4>)
 801847e:	2201      	movs	r2, #1
 8018480:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018482:	4b11      	ldr	r3, [pc, #68]	; (80184c8 <vTaskStartScheduler+0xc8>)
 8018484:	2200      	movs	r2, #0
 8018486:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018488:	f001 f9aa 	bl	80197e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801848c:	e00e      	b.n	80184ac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801848e:	697b      	ldr	r3, [r7, #20]
 8018490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018494:	d10a      	bne.n	80184ac <vTaskStartScheduler+0xac>
	__asm volatile
 8018496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801849a:	f383 8811 	msr	BASEPRI, r3
 801849e:	f3bf 8f6f 	isb	sy
 80184a2:	f3bf 8f4f 	dsb	sy
 80184a6:	60fb      	str	r3, [r7, #12]
}
 80184a8:	bf00      	nop
 80184aa:	e7fe      	b.n	80184aa <vTaskStartScheduler+0xaa>
}
 80184ac:	bf00      	nop
 80184ae:	3718      	adds	r7, #24
 80184b0:	46bd      	mov	sp, r7
 80184b2:	bd80      	pop	{r7, pc}
 80184b4:	0801ac20 	.word	0x0801ac20
 80184b8:	08018c4d 	.word	0x08018c4d
 80184bc:	24002bd0 	.word	0x24002bd0
 80184c0:	24002bcc 	.word	0x24002bcc
 80184c4:	24002bb8 	.word	0x24002bb8
 80184c8:	24002bb0 	.word	0x24002bb0

080184cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80184cc:	b480      	push	{r7}
 80184ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80184d0:	4b04      	ldr	r3, [pc, #16]	; (80184e4 <vTaskSuspendAll+0x18>)
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	3301      	adds	r3, #1
 80184d6:	4a03      	ldr	r2, [pc, #12]	; (80184e4 <vTaskSuspendAll+0x18>)
 80184d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80184da:	bf00      	nop
 80184dc:	46bd      	mov	sp, r7
 80184de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e2:	4770      	bx	lr
 80184e4:	24002bd4 	.word	0x24002bd4

080184e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b084      	sub	sp, #16
 80184ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80184ee:	2300      	movs	r3, #0
 80184f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80184f2:	2300      	movs	r3, #0
 80184f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80184f6:	4b42      	ldr	r3, [pc, #264]	; (8018600 <xTaskResumeAll+0x118>)
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d10a      	bne.n	8018514 <xTaskResumeAll+0x2c>
	__asm volatile
 80184fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018502:	f383 8811 	msr	BASEPRI, r3
 8018506:	f3bf 8f6f 	isb	sy
 801850a:	f3bf 8f4f 	dsb	sy
 801850e:	603b      	str	r3, [r7, #0]
}
 8018510:	bf00      	nop
 8018512:	e7fe      	b.n	8018512 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018514:	f001 fa06 	bl	8019924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018518:	4b39      	ldr	r3, [pc, #228]	; (8018600 <xTaskResumeAll+0x118>)
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	3b01      	subs	r3, #1
 801851e:	4a38      	ldr	r2, [pc, #224]	; (8018600 <xTaskResumeAll+0x118>)
 8018520:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018522:	4b37      	ldr	r3, [pc, #220]	; (8018600 <xTaskResumeAll+0x118>)
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d162      	bne.n	80185f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801852a:	4b36      	ldr	r3, [pc, #216]	; (8018604 <xTaskResumeAll+0x11c>)
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d05e      	beq.n	80185f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018532:	e02f      	b.n	8018594 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018534:	4b34      	ldr	r3, [pc, #208]	; (8018608 <xTaskResumeAll+0x120>)
 8018536:	68db      	ldr	r3, [r3, #12]
 8018538:	68db      	ldr	r3, [r3, #12]
 801853a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	3318      	adds	r3, #24
 8018540:	4618      	mov	r0, r3
 8018542:	f7ff f871 	bl	8017628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	3304      	adds	r3, #4
 801854a:	4618      	mov	r0, r3
 801854c:	f7ff f86c 	bl	8017628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018554:	4b2d      	ldr	r3, [pc, #180]	; (801860c <xTaskResumeAll+0x124>)
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	429a      	cmp	r2, r3
 801855a:	d903      	bls.n	8018564 <xTaskResumeAll+0x7c>
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018560:	4a2a      	ldr	r2, [pc, #168]	; (801860c <xTaskResumeAll+0x124>)
 8018562:	6013      	str	r3, [r2, #0]
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018568:	4613      	mov	r3, r2
 801856a:	009b      	lsls	r3, r3, #2
 801856c:	4413      	add	r3, r2
 801856e:	009b      	lsls	r3, r3, #2
 8018570:	4a27      	ldr	r2, [pc, #156]	; (8018610 <xTaskResumeAll+0x128>)
 8018572:	441a      	add	r2, r3
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	3304      	adds	r3, #4
 8018578:	4619      	mov	r1, r3
 801857a:	4610      	mov	r0, r2
 801857c:	f7fe fff7 	bl	801756e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018584:	4b23      	ldr	r3, [pc, #140]	; (8018614 <xTaskResumeAll+0x12c>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801858a:	429a      	cmp	r2, r3
 801858c:	d302      	bcc.n	8018594 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801858e:	4b22      	ldr	r3, [pc, #136]	; (8018618 <xTaskResumeAll+0x130>)
 8018590:	2201      	movs	r2, #1
 8018592:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018594:	4b1c      	ldr	r3, [pc, #112]	; (8018608 <xTaskResumeAll+0x120>)
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d1cb      	bne.n	8018534 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d001      	beq.n	80185a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80185a2:	f000 fc09 	bl	8018db8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80185a6:	4b1d      	ldr	r3, [pc, #116]	; (801861c <xTaskResumeAll+0x134>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d010      	beq.n	80185d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80185b2:	f000 f847 	bl	8018644 <xTaskIncrementTick>
 80185b6:	4603      	mov	r3, r0
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d002      	beq.n	80185c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80185bc:	4b16      	ldr	r3, [pc, #88]	; (8018618 <xTaskResumeAll+0x130>)
 80185be:	2201      	movs	r2, #1
 80185c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	3b01      	subs	r3, #1
 80185c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d1f1      	bne.n	80185b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80185ce:	4b13      	ldr	r3, [pc, #76]	; (801861c <xTaskResumeAll+0x134>)
 80185d0:	2200      	movs	r2, #0
 80185d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80185d4:	4b10      	ldr	r3, [pc, #64]	; (8018618 <xTaskResumeAll+0x130>)
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d009      	beq.n	80185f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80185dc:	2301      	movs	r3, #1
 80185de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80185e0:	4b0f      	ldr	r3, [pc, #60]	; (8018620 <xTaskResumeAll+0x138>)
 80185e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185e6:	601a      	str	r2, [r3, #0]
 80185e8:	f3bf 8f4f 	dsb	sy
 80185ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80185f0:	f001 f9c8 	bl	8019984 <vPortExitCritical>

	return xAlreadyYielded;
 80185f4:	68bb      	ldr	r3, [r7, #8]
}
 80185f6:	4618      	mov	r0, r3
 80185f8:	3710      	adds	r7, #16
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bd80      	pop	{r7, pc}
 80185fe:	bf00      	nop
 8018600:	24002bd4 	.word	0x24002bd4
 8018604:	24002bac 	.word	0x24002bac
 8018608:	24002b6c 	.word	0x24002b6c
 801860c:	24002bb4 	.word	0x24002bb4
 8018610:	240026dc 	.word	0x240026dc
 8018614:	240026d8 	.word	0x240026d8
 8018618:	24002bc0 	.word	0x24002bc0
 801861c:	24002bbc 	.word	0x24002bbc
 8018620:	e000ed04 	.word	0xe000ed04

08018624 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018624:	b480      	push	{r7}
 8018626:	b083      	sub	sp, #12
 8018628:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801862a:	4b05      	ldr	r3, [pc, #20]	; (8018640 <xTaskGetTickCount+0x1c>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018630:	687b      	ldr	r3, [r7, #4]
}
 8018632:	4618      	mov	r0, r3
 8018634:	370c      	adds	r7, #12
 8018636:	46bd      	mov	sp, r7
 8018638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863c:	4770      	bx	lr
 801863e:	bf00      	nop
 8018640:	24002bb0 	.word	0x24002bb0

08018644 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b086      	sub	sp, #24
 8018648:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801864a:	2300      	movs	r3, #0
 801864c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801864e:	4b53      	ldr	r3, [pc, #332]	; (801879c <xTaskIncrementTick+0x158>)
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	2b00      	cmp	r3, #0
 8018654:	f040 8095 	bne.w	8018782 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018658:	4b51      	ldr	r3, [pc, #324]	; (80187a0 <xTaskIncrementTick+0x15c>)
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	3301      	adds	r3, #1
 801865e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018660:	4a4f      	ldr	r2, [pc, #316]	; (80187a0 <xTaskIncrementTick+0x15c>)
 8018662:	693b      	ldr	r3, [r7, #16]
 8018664:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018666:	693b      	ldr	r3, [r7, #16]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d120      	bne.n	80186ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801866c:	4b4d      	ldr	r3, [pc, #308]	; (80187a4 <xTaskIncrementTick+0x160>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d00a      	beq.n	801868c <xTaskIncrementTick+0x48>
	__asm volatile
 8018676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801867a:	f383 8811 	msr	BASEPRI, r3
 801867e:	f3bf 8f6f 	isb	sy
 8018682:	f3bf 8f4f 	dsb	sy
 8018686:	603b      	str	r3, [r7, #0]
}
 8018688:	bf00      	nop
 801868a:	e7fe      	b.n	801868a <xTaskIncrementTick+0x46>
 801868c:	4b45      	ldr	r3, [pc, #276]	; (80187a4 <xTaskIncrementTick+0x160>)
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	60fb      	str	r3, [r7, #12]
 8018692:	4b45      	ldr	r3, [pc, #276]	; (80187a8 <xTaskIncrementTick+0x164>)
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	4a43      	ldr	r2, [pc, #268]	; (80187a4 <xTaskIncrementTick+0x160>)
 8018698:	6013      	str	r3, [r2, #0]
 801869a:	4a43      	ldr	r2, [pc, #268]	; (80187a8 <xTaskIncrementTick+0x164>)
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	6013      	str	r3, [r2, #0]
 80186a0:	4b42      	ldr	r3, [pc, #264]	; (80187ac <xTaskIncrementTick+0x168>)
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	3301      	adds	r3, #1
 80186a6:	4a41      	ldr	r2, [pc, #260]	; (80187ac <xTaskIncrementTick+0x168>)
 80186a8:	6013      	str	r3, [r2, #0]
 80186aa:	f000 fb85 	bl	8018db8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80186ae:	4b40      	ldr	r3, [pc, #256]	; (80187b0 <xTaskIncrementTick+0x16c>)
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	693a      	ldr	r2, [r7, #16]
 80186b4:	429a      	cmp	r2, r3
 80186b6:	d349      	bcc.n	801874c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80186b8:	4b3a      	ldr	r3, [pc, #232]	; (80187a4 <xTaskIncrementTick+0x160>)
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d104      	bne.n	80186cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80186c2:	4b3b      	ldr	r3, [pc, #236]	; (80187b0 <xTaskIncrementTick+0x16c>)
 80186c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80186c8:	601a      	str	r2, [r3, #0]
					break;
 80186ca:	e03f      	b.n	801874c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80186cc:	4b35      	ldr	r3, [pc, #212]	; (80187a4 <xTaskIncrementTick+0x160>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	68db      	ldr	r3, [r3, #12]
 80186d2:	68db      	ldr	r3, [r3, #12]
 80186d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80186d6:	68bb      	ldr	r3, [r7, #8]
 80186d8:	685b      	ldr	r3, [r3, #4]
 80186da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80186dc:	693a      	ldr	r2, [r7, #16]
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	429a      	cmp	r2, r3
 80186e2:	d203      	bcs.n	80186ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80186e4:	4a32      	ldr	r2, [pc, #200]	; (80187b0 <xTaskIncrementTick+0x16c>)
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80186ea:	e02f      	b.n	801874c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80186ec:	68bb      	ldr	r3, [r7, #8]
 80186ee:	3304      	adds	r3, #4
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7fe ff99 	bl	8017628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80186f6:	68bb      	ldr	r3, [r7, #8]
 80186f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d004      	beq.n	8018708 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80186fe:	68bb      	ldr	r3, [r7, #8]
 8018700:	3318      	adds	r3, #24
 8018702:	4618      	mov	r0, r3
 8018704:	f7fe ff90 	bl	8017628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018708:	68bb      	ldr	r3, [r7, #8]
 801870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801870c:	4b29      	ldr	r3, [pc, #164]	; (80187b4 <xTaskIncrementTick+0x170>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	429a      	cmp	r2, r3
 8018712:	d903      	bls.n	801871c <xTaskIncrementTick+0xd8>
 8018714:	68bb      	ldr	r3, [r7, #8]
 8018716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018718:	4a26      	ldr	r2, [pc, #152]	; (80187b4 <xTaskIncrementTick+0x170>)
 801871a:	6013      	str	r3, [r2, #0]
 801871c:	68bb      	ldr	r3, [r7, #8]
 801871e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018720:	4613      	mov	r3, r2
 8018722:	009b      	lsls	r3, r3, #2
 8018724:	4413      	add	r3, r2
 8018726:	009b      	lsls	r3, r3, #2
 8018728:	4a23      	ldr	r2, [pc, #140]	; (80187b8 <xTaskIncrementTick+0x174>)
 801872a:	441a      	add	r2, r3
 801872c:	68bb      	ldr	r3, [r7, #8]
 801872e:	3304      	adds	r3, #4
 8018730:	4619      	mov	r1, r3
 8018732:	4610      	mov	r0, r2
 8018734:	f7fe ff1b 	bl	801756e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018738:	68bb      	ldr	r3, [r7, #8]
 801873a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801873c:	4b1f      	ldr	r3, [pc, #124]	; (80187bc <xTaskIncrementTick+0x178>)
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018742:	429a      	cmp	r2, r3
 8018744:	d3b8      	bcc.n	80186b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018746:	2301      	movs	r3, #1
 8018748:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801874a:	e7b5      	b.n	80186b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801874c:	4b1b      	ldr	r3, [pc, #108]	; (80187bc <xTaskIncrementTick+0x178>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018752:	4919      	ldr	r1, [pc, #100]	; (80187b8 <xTaskIncrementTick+0x174>)
 8018754:	4613      	mov	r3, r2
 8018756:	009b      	lsls	r3, r3, #2
 8018758:	4413      	add	r3, r2
 801875a:	009b      	lsls	r3, r3, #2
 801875c:	440b      	add	r3, r1
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	2b01      	cmp	r3, #1
 8018762:	d901      	bls.n	8018768 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018764:	2301      	movs	r3, #1
 8018766:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018768:	4b15      	ldr	r3, [pc, #84]	; (80187c0 <xTaskIncrementTick+0x17c>)
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d101      	bne.n	8018774 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018770:	f7e9 fd1e 	bl	80021b0 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018774:	4b13      	ldr	r3, [pc, #76]	; (80187c4 <xTaskIncrementTick+0x180>)
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d009      	beq.n	8018790 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 801877c:	2301      	movs	r3, #1
 801877e:	617b      	str	r3, [r7, #20]
 8018780:	e006      	b.n	8018790 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018782:	4b0f      	ldr	r3, [pc, #60]	; (80187c0 <xTaskIncrementTick+0x17c>)
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	3301      	adds	r3, #1
 8018788:	4a0d      	ldr	r2, [pc, #52]	; (80187c0 <xTaskIncrementTick+0x17c>)
 801878a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 801878c:	f7e9 fd10 	bl	80021b0 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018790:	697b      	ldr	r3, [r7, #20]
}
 8018792:	4618      	mov	r0, r3
 8018794:	3718      	adds	r7, #24
 8018796:	46bd      	mov	sp, r7
 8018798:	bd80      	pop	{r7, pc}
 801879a:	bf00      	nop
 801879c:	24002bd4 	.word	0x24002bd4
 80187a0:	24002bb0 	.word	0x24002bb0
 80187a4:	24002b64 	.word	0x24002b64
 80187a8:	24002b68 	.word	0x24002b68
 80187ac:	24002bc4 	.word	0x24002bc4
 80187b0:	24002bcc 	.word	0x24002bcc
 80187b4:	24002bb4 	.word	0x24002bb4
 80187b8:	240026dc 	.word	0x240026dc
 80187bc:	240026d8 	.word	0x240026d8
 80187c0:	24002bbc 	.word	0x24002bbc
 80187c4:	24002bc0 	.word	0x24002bc0

080187c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80187c8:	b580      	push	{r7, lr}
 80187ca:	b084      	sub	sp, #16
 80187cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80187ce:	4b2f      	ldr	r3, [pc, #188]	; (801888c <vTaskSwitchContext+0xc4>)
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d003      	beq.n	80187de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80187d6:	4b2e      	ldr	r3, [pc, #184]	; (8018890 <vTaskSwitchContext+0xc8>)
 80187d8:	2201      	movs	r2, #1
 80187da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80187dc:	e052      	b.n	8018884 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80187de:	4b2c      	ldr	r3, [pc, #176]	; (8018890 <vTaskSwitchContext+0xc8>)
 80187e0:	2200      	movs	r2, #0
 80187e2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80187e4:	4b2b      	ldr	r3, [pc, #172]	; (8018894 <vTaskSwitchContext+0xcc>)
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	681a      	ldr	r2, [r3, #0]
 80187ea:	4b2a      	ldr	r3, [pc, #168]	; (8018894 <vTaskSwitchContext+0xcc>)
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187f0:	429a      	cmp	r2, r3
 80187f2:	d808      	bhi.n	8018806 <vTaskSwitchContext+0x3e>
 80187f4:	4b27      	ldr	r3, [pc, #156]	; (8018894 <vTaskSwitchContext+0xcc>)
 80187f6:	681a      	ldr	r2, [r3, #0]
 80187f8:	4b26      	ldr	r3, [pc, #152]	; (8018894 <vTaskSwitchContext+0xcc>)
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	3334      	adds	r3, #52	; 0x34
 80187fe:	4619      	mov	r1, r3
 8018800:	4610      	mov	r0, r2
 8018802:	f7e9 fce3 	bl	80021cc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018806:	4b24      	ldr	r3, [pc, #144]	; (8018898 <vTaskSwitchContext+0xd0>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	60fb      	str	r3, [r7, #12]
 801880c:	e010      	b.n	8018830 <vTaskSwitchContext+0x68>
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d10a      	bne.n	801882a <vTaskSwitchContext+0x62>
	__asm volatile
 8018814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018818:	f383 8811 	msr	BASEPRI, r3
 801881c:	f3bf 8f6f 	isb	sy
 8018820:	f3bf 8f4f 	dsb	sy
 8018824:	607b      	str	r3, [r7, #4]
}
 8018826:	bf00      	nop
 8018828:	e7fe      	b.n	8018828 <vTaskSwitchContext+0x60>
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	3b01      	subs	r3, #1
 801882e:	60fb      	str	r3, [r7, #12]
 8018830:	491a      	ldr	r1, [pc, #104]	; (801889c <vTaskSwitchContext+0xd4>)
 8018832:	68fa      	ldr	r2, [r7, #12]
 8018834:	4613      	mov	r3, r2
 8018836:	009b      	lsls	r3, r3, #2
 8018838:	4413      	add	r3, r2
 801883a:	009b      	lsls	r3, r3, #2
 801883c:	440b      	add	r3, r1
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d0e4      	beq.n	801880e <vTaskSwitchContext+0x46>
 8018844:	68fa      	ldr	r2, [r7, #12]
 8018846:	4613      	mov	r3, r2
 8018848:	009b      	lsls	r3, r3, #2
 801884a:	4413      	add	r3, r2
 801884c:	009b      	lsls	r3, r3, #2
 801884e:	4a13      	ldr	r2, [pc, #76]	; (801889c <vTaskSwitchContext+0xd4>)
 8018850:	4413      	add	r3, r2
 8018852:	60bb      	str	r3, [r7, #8]
 8018854:	68bb      	ldr	r3, [r7, #8]
 8018856:	685b      	ldr	r3, [r3, #4]
 8018858:	685a      	ldr	r2, [r3, #4]
 801885a:	68bb      	ldr	r3, [r7, #8]
 801885c:	605a      	str	r2, [r3, #4]
 801885e:	68bb      	ldr	r3, [r7, #8]
 8018860:	685a      	ldr	r2, [r3, #4]
 8018862:	68bb      	ldr	r3, [r7, #8]
 8018864:	3308      	adds	r3, #8
 8018866:	429a      	cmp	r2, r3
 8018868:	d104      	bne.n	8018874 <vTaskSwitchContext+0xac>
 801886a:	68bb      	ldr	r3, [r7, #8]
 801886c:	685b      	ldr	r3, [r3, #4]
 801886e:	685a      	ldr	r2, [r3, #4]
 8018870:	68bb      	ldr	r3, [r7, #8]
 8018872:	605a      	str	r2, [r3, #4]
 8018874:	68bb      	ldr	r3, [r7, #8]
 8018876:	685b      	ldr	r3, [r3, #4]
 8018878:	68db      	ldr	r3, [r3, #12]
 801887a:	4a06      	ldr	r2, [pc, #24]	; (8018894 <vTaskSwitchContext+0xcc>)
 801887c:	6013      	str	r3, [r2, #0]
 801887e:	4a06      	ldr	r2, [pc, #24]	; (8018898 <vTaskSwitchContext+0xd0>)
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	6013      	str	r3, [r2, #0]
}
 8018884:	bf00      	nop
 8018886:	3710      	adds	r7, #16
 8018888:	46bd      	mov	sp, r7
 801888a:	bd80      	pop	{r7, pc}
 801888c:	24002bd4 	.word	0x24002bd4
 8018890:	24002bc0 	.word	0x24002bc0
 8018894:	240026d8 	.word	0x240026d8
 8018898:	24002bb4 	.word	0x24002bb4
 801889c:	240026dc 	.word	0x240026dc

080188a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b084      	sub	sp, #16
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
 80188a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d10a      	bne.n	80188c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80188b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188b4:	f383 8811 	msr	BASEPRI, r3
 80188b8:	f3bf 8f6f 	isb	sy
 80188bc:	f3bf 8f4f 	dsb	sy
 80188c0:	60fb      	str	r3, [r7, #12]
}
 80188c2:	bf00      	nop
 80188c4:	e7fe      	b.n	80188c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80188c6:	4b07      	ldr	r3, [pc, #28]	; (80188e4 <vTaskPlaceOnEventList+0x44>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	3318      	adds	r3, #24
 80188cc:	4619      	mov	r1, r3
 80188ce:	6878      	ldr	r0, [r7, #4]
 80188d0:	f7fe fe71 	bl	80175b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80188d4:	2101      	movs	r1, #1
 80188d6:	6838      	ldr	r0, [r7, #0]
 80188d8:	f000 fb32 	bl	8018f40 <prvAddCurrentTaskToDelayedList>
}
 80188dc:	bf00      	nop
 80188de:	3710      	adds	r7, #16
 80188e0:	46bd      	mov	sp, r7
 80188e2:	bd80      	pop	{r7, pc}
 80188e4:	240026d8 	.word	0x240026d8

080188e8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b086      	sub	sp, #24
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	60f8      	str	r0, [r7, #12]
 80188f0:	60b9      	str	r1, [r7, #8]
 80188f2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d10a      	bne.n	8018910 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80188fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188fe:	f383 8811 	msr	BASEPRI, r3
 8018902:	f3bf 8f6f 	isb	sy
 8018906:	f3bf 8f4f 	dsb	sy
 801890a:	617b      	str	r3, [r7, #20]
}
 801890c:	bf00      	nop
 801890e:	e7fe      	b.n	801890e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018910:	4b11      	ldr	r3, [pc, #68]	; (8018958 <vTaskPlaceOnUnorderedEventList+0x70>)
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d10a      	bne.n	801892e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8018918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801891c:	f383 8811 	msr	BASEPRI, r3
 8018920:	f3bf 8f6f 	isb	sy
 8018924:	f3bf 8f4f 	dsb	sy
 8018928:	613b      	str	r3, [r7, #16]
}
 801892a:	bf00      	nop
 801892c:	e7fe      	b.n	801892c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801892e:	4b0b      	ldr	r3, [pc, #44]	; (801895c <vTaskPlaceOnUnorderedEventList+0x74>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	68ba      	ldr	r2, [r7, #8]
 8018934:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018938:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801893a:	4b08      	ldr	r3, [pc, #32]	; (801895c <vTaskPlaceOnUnorderedEventList+0x74>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	3318      	adds	r3, #24
 8018940:	4619      	mov	r1, r3
 8018942:	68f8      	ldr	r0, [r7, #12]
 8018944:	f7fe fe13 	bl	801756e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018948:	2101      	movs	r1, #1
 801894a:	6878      	ldr	r0, [r7, #4]
 801894c:	f000 faf8 	bl	8018f40 <prvAddCurrentTaskToDelayedList>
}
 8018950:	bf00      	nop
 8018952:	3718      	adds	r7, #24
 8018954:	46bd      	mov	sp, r7
 8018956:	bd80      	pop	{r7, pc}
 8018958:	24002bd4 	.word	0x24002bd4
 801895c:	240026d8 	.word	0x240026d8

08018960 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018960:	b580      	push	{r7, lr}
 8018962:	b086      	sub	sp, #24
 8018964:	af00      	add	r7, sp, #0
 8018966:	60f8      	str	r0, [r7, #12]
 8018968:	60b9      	str	r1, [r7, #8]
 801896a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d10a      	bne.n	8018988 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018976:	f383 8811 	msr	BASEPRI, r3
 801897a:	f3bf 8f6f 	isb	sy
 801897e:	f3bf 8f4f 	dsb	sy
 8018982:	617b      	str	r3, [r7, #20]
}
 8018984:	bf00      	nop
 8018986:	e7fe      	b.n	8018986 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018988:	4b0a      	ldr	r3, [pc, #40]	; (80189b4 <vTaskPlaceOnEventListRestricted+0x54>)
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	3318      	adds	r3, #24
 801898e:	4619      	mov	r1, r3
 8018990:	68f8      	ldr	r0, [r7, #12]
 8018992:	f7fe fdec 	bl	801756e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d002      	beq.n	80189a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801899c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80189a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80189a2:	6879      	ldr	r1, [r7, #4]
 80189a4:	68b8      	ldr	r0, [r7, #8]
 80189a6:	f000 facb 	bl	8018f40 <prvAddCurrentTaskToDelayedList>
	}
 80189aa:	bf00      	nop
 80189ac:	3718      	adds	r7, #24
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	240026d8 	.word	0x240026d8

080189b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b086      	sub	sp, #24
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	68db      	ldr	r3, [r3, #12]
 80189c4:	68db      	ldr	r3, [r3, #12]
 80189c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80189c8:	693b      	ldr	r3, [r7, #16]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d10a      	bne.n	80189e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80189ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189d2:	f383 8811 	msr	BASEPRI, r3
 80189d6:	f3bf 8f6f 	isb	sy
 80189da:	f3bf 8f4f 	dsb	sy
 80189de:	60fb      	str	r3, [r7, #12]
}
 80189e0:	bf00      	nop
 80189e2:	e7fe      	b.n	80189e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80189e4:	693b      	ldr	r3, [r7, #16]
 80189e6:	3318      	adds	r3, #24
 80189e8:	4618      	mov	r0, r3
 80189ea:	f7fe fe1d 	bl	8017628 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80189ee:	4b1e      	ldr	r3, [pc, #120]	; (8018a68 <xTaskRemoveFromEventList+0xb0>)
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d11d      	bne.n	8018a32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	3304      	adds	r3, #4
 80189fa:	4618      	mov	r0, r3
 80189fc:	f7fe fe14 	bl	8017628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018a00:	693b      	ldr	r3, [r7, #16]
 8018a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a04:	4b19      	ldr	r3, [pc, #100]	; (8018a6c <xTaskRemoveFromEventList+0xb4>)
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d903      	bls.n	8018a14 <xTaskRemoveFromEventList+0x5c>
 8018a0c:	693b      	ldr	r3, [r7, #16]
 8018a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a10:	4a16      	ldr	r2, [pc, #88]	; (8018a6c <xTaskRemoveFromEventList+0xb4>)
 8018a12:	6013      	str	r3, [r2, #0]
 8018a14:	693b      	ldr	r3, [r7, #16]
 8018a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a18:	4613      	mov	r3, r2
 8018a1a:	009b      	lsls	r3, r3, #2
 8018a1c:	4413      	add	r3, r2
 8018a1e:	009b      	lsls	r3, r3, #2
 8018a20:	4a13      	ldr	r2, [pc, #76]	; (8018a70 <xTaskRemoveFromEventList+0xb8>)
 8018a22:	441a      	add	r2, r3
 8018a24:	693b      	ldr	r3, [r7, #16]
 8018a26:	3304      	adds	r3, #4
 8018a28:	4619      	mov	r1, r3
 8018a2a:	4610      	mov	r0, r2
 8018a2c:	f7fe fd9f 	bl	801756e <vListInsertEnd>
 8018a30:	e005      	b.n	8018a3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018a32:	693b      	ldr	r3, [r7, #16]
 8018a34:	3318      	adds	r3, #24
 8018a36:	4619      	mov	r1, r3
 8018a38:	480e      	ldr	r0, [pc, #56]	; (8018a74 <xTaskRemoveFromEventList+0xbc>)
 8018a3a:	f7fe fd98 	bl	801756e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018a3e:	693b      	ldr	r3, [r7, #16]
 8018a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a42:	4b0d      	ldr	r3, [pc, #52]	; (8018a78 <xTaskRemoveFromEventList+0xc0>)
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a48:	429a      	cmp	r2, r3
 8018a4a:	d905      	bls.n	8018a58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018a4c:	2301      	movs	r3, #1
 8018a4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018a50:	4b0a      	ldr	r3, [pc, #40]	; (8018a7c <xTaskRemoveFromEventList+0xc4>)
 8018a52:	2201      	movs	r2, #1
 8018a54:	601a      	str	r2, [r3, #0]
 8018a56:	e001      	b.n	8018a5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018a58:	2300      	movs	r3, #0
 8018a5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018a5c:	697b      	ldr	r3, [r7, #20]
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	3718      	adds	r7, #24
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}
 8018a66:	bf00      	nop
 8018a68:	24002bd4 	.word	0x24002bd4
 8018a6c:	24002bb4 	.word	0x24002bb4
 8018a70:	240026dc 	.word	0x240026dc
 8018a74:	24002b6c 	.word	0x24002b6c
 8018a78:	240026d8 	.word	0x240026d8
 8018a7c:	24002bc0 	.word	0x24002bc0

08018a80 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b086      	sub	sp, #24
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
 8018a88:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018a8a:	4b29      	ldr	r3, [pc, #164]	; (8018b30 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d10a      	bne.n	8018aa8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a96:	f383 8811 	msr	BASEPRI, r3
 8018a9a:	f3bf 8f6f 	isb	sy
 8018a9e:	f3bf 8f4f 	dsb	sy
 8018aa2:	613b      	str	r3, [r7, #16]
}
 8018aa4:	bf00      	nop
 8018aa6:	e7fe      	b.n	8018aa6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018aa8:	683b      	ldr	r3, [r7, #0]
 8018aaa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	68db      	ldr	r3, [r3, #12]
 8018ab6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018ab8:	697b      	ldr	r3, [r7, #20]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d10a      	bne.n	8018ad4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac2:	f383 8811 	msr	BASEPRI, r3
 8018ac6:	f3bf 8f6f 	isb	sy
 8018aca:	f3bf 8f4f 	dsb	sy
 8018ace:	60fb      	str	r3, [r7, #12]
}
 8018ad0:	bf00      	nop
 8018ad2:	e7fe      	b.n	8018ad2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018ad4:	6878      	ldr	r0, [r7, #4]
 8018ad6:	f7fe fda7 	bl	8017628 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018ada:	697b      	ldr	r3, [r7, #20]
 8018adc:	3304      	adds	r3, #4
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7fe fda2 	bl	8017628 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ae8:	4b12      	ldr	r3, [pc, #72]	; (8018b34 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	429a      	cmp	r2, r3
 8018aee:	d903      	bls.n	8018af8 <vTaskRemoveFromUnorderedEventList+0x78>
 8018af0:	697b      	ldr	r3, [r7, #20]
 8018af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018af4:	4a0f      	ldr	r2, [pc, #60]	; (8018b34 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018af6:	6013      	str	r3, [r2, #0]
 8018af8:	697b      	ldr	r3, [r7, #20]
 8018afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018afc:	4613      	mov	r3, r2
 8018afe:	009b      	lsls	r3, r3, #2
 8018b00:	4413      	add	r3, r2
 8018b02:	009b      	lsls	r3, r3, #2
 8018b04:	4a0c      	ldr	r2, [pc, #48]	; (8018b38 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018b06:	441a      	add	r2, r3
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	3304      	adds	r3, #4
 8018b0c:	4619      	mov	r1, r3
 8018b0e:	4610      	mov	r0, r2
 8018b10:	f7fe fd2d 	bl	801756e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018b14:	697b      	ldr	r3, [r7, #20]
 8018b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b18:	4b08      	ldr	r3, [pc, #32]	; (8018b3c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b1e:	429a      	cmp	r2, r3
 8018b20:	d902      	bls.n	8018b28 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018b22:	4b07      	ldr	r3, [pc, #28]	; (8018b40 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018b24:	2201      	movs	r2, #1
 8018b26:	601a      	str	r2, [r3, #0]
	}
}
 8018b28:	bf00      	nop
 8018b2a:	3718      	adds	r7, #24
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	24002bd4 	.word	0x24002bd4
 8018b34:	24002bb4 	.word	0x24002bb4
 8018b38:	240026dc 	.word	0x240026dc
 8018b3c:	240026d8 	.word	0x240026d8
 8018b40:	24002bc0 	.word	0x24002bc0

08018b44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018b44:	b480      	push	{r7}
 8018b46:	b083      	sub	sp, #12
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018b4c:	4b06      	ldr	r3, [pc, #24]	; (8018b68 <vTaskInternalSetTimeOutState+0x24>)
 8018b4e:	681a      	ldr	r2, [r3, #0]
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018b54:	4b05      	ldr	r3, [pc, #20]	; (8018b6c <vTaskInternalSetTimeOutState+0x28>)
 8018b56:	681a      	ldr	r2, [r3, #0]
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	605a      	str	r2, [r3, #4]
}
 8018b5c:	bf00      	nop
 8018b5e:	370c      	adds	r7, #12
 8018b60:	46bd      	mov	sp, r7
 8018b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b66:	4770      	bx	lr
 8018b68:	24002bc4 	.word	0x24002bc4
 8018b6c:	24002bb0 	.word	0x24002bb0

08018b70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	b088      	sub	sp, #32
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	6078      	str	r0, [r7, #4]
 8018b78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d10a      	bne.n	8018b96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b84:	f383 8811 	msr	BASEPRI, r3
 8018b88:	f3bf 8f6f 	isb	sy
 8018b8c:	f3bf 8f4f 	dsb	sy
 8018b90:	613b      	str	r3, [r7, #16]
}
 8018b92:	bf00      	nop
 8018b94:	e7fe      	b.n	8018b94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018b96:	683b      	ldr	r3, [r7, #0]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d10a      	bne.n	8018bb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ba0:	f383 8811 	msr	BASEPRI, r3
 8018ba4:	f3bf 8f6f 	isb	sy
 8018ba8:	f3bf 8f4f 	dsb	sy
 8018bac:	60fb      	str	r3, [r7, #12]
}
 8018bae:	bf00      	nop
 8018bb0:	e7fe      	b.n	8018bb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018bb2:	f000 feb7 	bl	8019924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018bb6:	4b1d      	ldr	r3, [pc, #116]	; (8018c2c <xTaskCheckForTimeOut+0xbc>)
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	685b      	ldr	r3, [r3, #4]
 8018bc0:	69ba      	ldr	r2, [r7, #24]
 8018bc2:	1ad3      	subs	r3, r2, r3
 8018bc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018bc6:	683b      	ldr	r3, [r7, #0]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018bce:	d102      	bne.n	8018bd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	61fb      	str	r3, [r7, #28]
 8018bd4:	e023      	b.n	8018c1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681a      	ldr	r2, [r3, #0]
 8018bda:	4b15      	ldr	r3, [pc, #84]	; (8018c30 <xTaskCheckForTimeOut+0xc0>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	429a      	cmp	r2, r3
 8018be0:	d007      	beq.n	8018bf2 <xTaskCheckForTimeOut+0x82>
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	685b      	ldr	r3, [r3, #4]
 8018be6:	69ba      	ldr	r2, [r7, #24]
 8018be8:	429a      	cmp	r2, r3
 8018bea:	d302      	bcc.n	8018bf2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018bec:	2301      	movs	r3, #1
 8018bee:	61fb      	str	r3, [r7, #28]
 8018bf0:	e015      	b.n	8018c1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018bf2:	683b      	ldr	r3, [r7, #0]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	697a      	ldr	r2, [r7, #20]
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d20b      	bcs.n	8018c14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018bfc:	683b      	ldr	r3, [r7, #0]
 8018bfe:	681a      	ldr	r2, [r3, #0]
 8018c00:	697b      	ldr	r3, [r7, #20]
 8018c02:	1ad2      	subs	r2, r2, r3
 8018c04:	683b      	ldr	r3, [r7, #0]
 8018c06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018c08:	6878      	ldr	r0, [r7, #4]
 8018c0a:	f7ff ff9b 	bl	8018b44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018c0e:	2300      	movs	r3, #0
 8018c10:	61fb      	str	r3, [r7, #28]
 8018c12:	e004      	b.n	8018c1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018c14:	683b      	ldr	r3, [r7, #0]
 8018c16:	2200      	movs	r2, #0
 8018c18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018c1a:	2301      	movs	r3, #1
 8018c1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018c1e:	f000 feb1 	bl	8019984 <vPortExitCritical>

	return xReturn;
 8018c22:	69fb      	ldr	r3, [r7, #28]
}
 8018c24:	4618      	mov	r0, r3
 8018c26:	3720      	adds	r7, #32
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}
 8018c2c:	24002bb0 	.word	0x24002bb0
 8018c30:	24002bc4 	.word	0x24002bc4

08018c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018c34:	b480      	push	{r7}
 8018c36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018c38:	4b03      	ldr	r3, [pc, #12]	; (8018c48 <vTaskMissedYield+0x14>)
 8018c3a:	2201      	movs	r2, #1
 8018c3c:	601a      	str	r2, [r3, #0]
}
 8018c3e:	bf00      	nop
 8018c40:	46bd      	mov	sp, r7
 8018c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c46:	4770      	bx	lr
 8018c48:	24002bc0 	.word	0x24002bc0

08018c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b082      	sub	sp, #8
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018c54:	f000 f852 	bl	8018cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018c58:	4b06      	ldr	r3, [pc, #24]	; (8018c74 <prvIdleTask+0x28>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	2b01      	cmp	r3, #1
 8018c5e:	d9f9      	bls.n	8018c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018c60:	4b05      	ldr	r3, [pc, #20]	; (8018c78 <prvIdleTask+0x2c>)
 8018c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c66:	601a      	str	r2, [r3, #0]
 8018c68:	f3bf 8f4f 	dsb	sy
 8018c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018c70:	e7f0      	b.n	8018c54 <prvIdleTask+0x8>
 8018c72:	bf00      	nop
 8018c74:	240026dc 	.word	0x240026dc
 8018c78:	e000ed04 	.word	0xe000ed04

08018c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b082      	sub	sp, #8
 8018c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018c82:	2300      	movs	r3, #0
 8018c84:	607b      	str	r3, [r7, #4]
 8018c86:	e00c      	b.n	8018ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018c88:	687a      	ldr	r2, [r7, #4]
 8018c8a:	4613      	mov	r3, r2
 8018c8c:	009b      	lsls	r3, r3, #2
 8018c8e:	4413      	add	r3, r2
 8018c90:	009b      	lsls	r3, r3, #2
 8018c92:	4a12      	ldr	r2, [pc, #72]	; (8018cdc <prvInitialiseTaskLists+0x60>)
 8018c94:	4413      	add	r3, r2
 8018c96:	4618      	mov	r0, r3
 8018c98:	f7fe fc3c 	bl	8017514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	3301      	adds	r3, #1
 8018ca0:	607b      	str	r3, [r7, #4]
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	2b37      	cmp	r3, #55	; 0x37
 8018ca6:	d9ef      	bls.n	8018c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018ca8:	480d      	ldr	r0, [pc, #52]	; (8018ce0 <prvInitialiseTaskLists+0x64>)
 8018caa:	f7fe fc33 	bl	8017514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018cae:	480d      	ldr	r0, [pc, #52]	; (8018ce4 <prvInitialiseTaskLists+0x68>)
 8018cb0:	f7fe fc30 	bl	8017514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018cb4:	480c      	ldr	r0, [pc, #48]	; (8018ce8 <prvInitialiseTaskLists+0x6c>)
 8018cb6:	f7fe fc2d 	bl	8017514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018cba:	480c      	ldr	r0, [pc, #48]	; (8018cec <prvInitialiseTaskLists+0x70>)
 8018cbc:	f7fe fc2a 	bl	8017514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018cc0:	480b      	ldr	r0, [pc, #44]	; (8018cf0 <prvInitialiseTaskLists+0x74>)
 8018cc2:	f7fe fc27 	bl	8017514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018cc6:	4b0b      	ldr	r3, [pc, #44]	; (8018cf4 <prvInitialiseTaskLists+0x78>)
 8018cc8:	4a05      	ldr	r2, [pc, #20]	; (8018ce0 <prvInitialiseTaskLists+0x64>)
 8018cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018ccc:	4b0a      	ldr	r3, [pc, #40]	; (8018cf8 <prvInitialiseTaskLists+0x7c>)
 8018cce:	4a05      	ldr	r2, [pc, #20]	; (8018ce4 <prvInitialiseTaskLists+0x68>)
 8018cd0:	601a      	str	r2, [r3, #0]
}
 8018cd2:	bf00      	nop
 8018cd4:	3708      	adds	r7, #8
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}
 8018cda:	bf00      	nop
 8018cdc:	240026dc 	.word	0x240026dc
 8018ce0:	24002b3c 	.word	0x24002b3c
 8018ce4:	24002b50 	.word	0x24002b50
 8018ce8:	24002b6c 	.word	0x24002b6c
 8018cec:	24002b80 	.word	0x24002b80
 8018cf0:	24002b98 	.word	0x24002b98
 8018cf4:	24002b64 	.word	0x24002b64
 8018cf8:	24002b68 	.word	0x24002b68

08018cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b082      	sub	sp, #8
 8018d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018d02:	e019      	b.n	8018d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018d04:	f000 fe0e 	bl	8019924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d08:	4b10      	ldr	r3, [pc, #64]	; (8018d4c <prvCheckTasksWaitingTermination+0x50>)
 8018d0a:	68db      	ldr	r3, [r3, #12]
 8018d0c:	68db      	ldr	r3, [r3, #12]
 8018d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	3304      	adds	r3, #4
 8018d14:	4618      	mov	r0, r3
 8018d16:	f7fe fc87 	bl	8017628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018d1a:	4b0d      	ldr	r3, [pc, #52]	; (8018d50 <prvCheckTasksWaitingTermination+0x54>)
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	3b01      	subs	r3, #1
 8018d20:	4a0b      	ldr	r2, [pc, #44]	; (8018d50 <prvCheckTasksWaitingTermination+0x54>)
 8018d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018d24:	4b0b      	ldr	r3, [pc, #44]	; (8018d54 <prvCheckTasksWaitingTermination+0x58>)
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	3b01      	subs	r3, #1
 8018d2a:	4a0a      	ldr	r2, [pc, #40]	; (8018d54 <prvCheckTasksWaitingTermination+0x58>)
 8018d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018d2e:	f000 fe29 	bl	8019984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018d32:	6878      	ldr	r0, [r7, #4]
 8018d34:	f000 f810 	bl	8018d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018d38:	4b06      	ldr	r3, [pc, #24]	; (8018d54 <prvCheckTasksWaitingTermination+0x58>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d1e1      	bne.n	8018d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018d40:	bf00      	nop
 8018d42:	bf00      	nop
 8018d44:	3708      	adds	r7, #8
 8018d46:	46bd      	mov	sp, r7
 8018d48:	bd80      	pop	{r7, pc}
 8018d4a:	bf00      	nop
 8018d4c:	24002b80 	.word	0x24002b80
 8018d50:	24002bac 	.word	0x24002bac
 8018d54:	24002b94 	.word	0x24002b94

08018d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b084      	sub	sp, #16
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d108      	bne.n	8018d7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f000 ffc6 	bl	8019d00 <vPortFree>
				vPortFree( pxTCB );
 8018d74:	6878      	ldr	r0, [r7, #4]
 8018d76:	f000 ffc3 	bl	8019d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018d7a:	e018      	b.n	8018dae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018d82:	2b01      	cmp	r3, #1
 8018d84:	d103      	bne.n	8018d8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018d86:	6878      	ldr	r0, [r7, #4]
 8018d88:	f000 ffba 	bl	8019d00 <vPortFree>
	}
 8018d8c:	e00f      	b.n	8018dae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018d94:	2b02      	cmp	r3, #2
 8018d96:	d00a      	beq.n	8018dae <prvDeleteTCB+0x56>
	__asm volatile
 8018d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d9c:	f383 8811 	msr	BASEPRI, r3
 8018da0:	f3bf 8f6f 	isb	sy
 8018da4:	f3bf 8f4f 	dsb	sy
 8018da8:	60fb      	str	r3, [r7, #12]
}
 8018daa:	bf00      	nop
 8018dac:	e7fe      	b.n	8018dac <prvDeleteTCB+0x54>
	}
 8018dae:	bf00      	nop
 8018db0:	3710      	adds	r7, #16
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
	...

08018db8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018db8:	b480      	push	{r7}
 8018dba:	b083      	sub	sp, #12
 8018dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018dbe:	4b0c      	ldr	r3, [pc, #48]	; (8018df0 <prvResetNextTaskUnblockTime+0x38>)
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d104      	bne.n	8018dd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018dc8:	4b0a      	ldr	r3, [pc, #40]	; (8018df4 <prvResetNextTaskUnblockTime+0x3c>)
 8018dca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018dce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018dd0:	e008      	b.n	8018de4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018dd2:	4b07      	ldr	r3, [pc, #28]	; (8018df0 <prvResetNextTaskUnblockTime+0x38>)
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	68db      	ldr	r3, [r3, #12]
 8018dd8:	68db      	ldr	r3, [r3, #12]
 8018dda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	685b      	ldr	r3, [r3, #4]
 8018de0:	4a04      	ldr	r2, [pc, #16]	; (8018df4 <prvResetNextTaskUnblockTime+0x3c>)
 8018de2:	6013      	str	r3, [r2, #0]
}
 8018de4:	bf00      	nop
 8018de6:	370c      	adds	r7, #12
 8018de8:	46bd      	mov	sp, r7
 8018dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dee:	4770      	bx	lr
 8018df0:	24002b64 	.word	0x24002b64
 8018df4:	24002bcc 	.word	0x24002bcc

08018df8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018df8:	b480      	push	{r7}
 8018dfa:	b083      	sub	sp, #12
 8018dfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018dfe:	4b0b      	ldr	r3, [pc, #44]	; (8018e2c <xTaskGetSchedulerState+0x34>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d102      	bne.n	8018e0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018e06:	2301      	movs	r3, #1
 8018e08:	607b      	str	r3, [r7, #4]
 8018e0a:	e008      	b.n	8018e1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018e0c:	4b08      	ldr	r3, [pc, #32]	; (8018e30 <xTaskGetSchedulerState+0x38>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d102      	bne.n	8018e1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018e14:	2302      	movs	r3, #2
 8018e16:	607b      	str	r3, [r7, #4]
 8018e18:	e001      	b.n	8018e1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018e1e:	687b      	ldr	r3, [r7, #4]
	}
 8018e20:	4618      	mov	r0, r3
 8018e22:	370c      	adds	r7, #12
 8018e24:	46bd      	mov	sp, r7
 8018e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2a:	4770      	bx	lr
 8018e2c:	24002bb8 	.word	0x24002bb8
 8018e30:	24002bd4 	.word	0x24002bd4

08018e34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018e34:	b580      	push	{r7, lr}
 8018e36:	b086      	sub	sp, #24
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018e40:	2300      	movs	r3, #0
 8018e42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d056      	beq.n	8018ef8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018e4a:	4b2e      	ldr	r3, [pc, #184]	; (8018f04 <xTaskPriorityDisinherit+0xd0>)
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	693a      	ldr	r2, [r7, #16]
 8018e50:	429a      	cmp	r2, r3
 8018e52:	d00a      	beq.n	8018e6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e58:	f383 8811 	msr	BASEPRI, r3
 8018e5c:	f3bf 8f6f 	isb	sy
 8018e60:	f3bf 8f4f 	dsb	sy
 8018e64:	60fb      	str	r3, [r7, #12]
}
 8018e66:	bf00      	nop
 8018e68:	e7fe      	b.n	8018e68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018e6a:	693b      	ldr	r3, [r7, #16]
 8018e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d10a      	bne.n	8018e88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e76:	f383 8811 	msr	BASEPRI, r3
 8018e7a:	f3bf 8f6f 	isb	sy
 8018e7e:	f3bf 8f4f 	dsb	sy
 8018e82:	60bb      	str	r3, [r7, #8]
}
 8018e84:	bf00      	nop
 8018e86:	e7fe      	b.n	8018e86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018e88:	693b      	ldr	r3, [r7, #16]
 8018e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e8c:	1e5a      	subs	r2, r3, #1
 8018e8e:	693b      	ldr	r3, [r7, #16]
 8018e90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018e92:	693b      	ldr	r3, [r7, #16]
 8018e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e96:	693b      	ldr	r3, [r7, #16]
 8018e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e9a:	429a      	cmp	r2, r3
 8018e9c:	d02c      	beq.n	8018ef8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d128      	bne.n	8018ef8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018ea6:	693b      	ldr	r3, [r7, #16]
 8018ea8:	3304      	adds	r3, #4
 8018eaa:	4618      	mov	r0, r3
 8018eac:	f7fe fbbc 	bl	8017628 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018eb0:	693b      	ldr	r3, [r7, #16]
 8018eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018eb4:	693b      	ldr	r3, [r7, #16]
 8018eb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018eb8:	693b      	ldr	r3, [r7, #16]
 8018eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ebc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018ec0:	693b      	ldr	r3, [r7, #16]
 8018ec2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018ec4:	693b      	ldr	r3, [r7, #16]
 8018ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ec8:	4b0f      	ldr	r3, [pc, #60]	; (8018f08 <xTaskPriorityDisinherit+0xd4>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	429a      	cmp	r2, r3
 8018ece:	d903      	bls.n	8018ed8 <xTaskPriorityDisinherit+0xa4>
 8018ed0:	693b      	ldr	r3, [r7, #16]
 8018ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ed4:	4a0c      	ldr	r2, [pc, #48]	; (8018f08 <xTaskPriorityDisinherit+0xd4>)
 8018ed6:	6013      	str	r3, [r2, #0]
 8018ed8:	693b      	ldr	r3, [r7, #16]
 8018eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018edc:	4613      	mov	r3, r2
 8018ede:	009b      	lsls	r3, r3, #2
 8018ee0:	4413      	add	r3, r2
 8018ee2:	009b      	lsls	r3, r3, #2
 8018ee4:	4a09      	ldr	r2, [pc, #36]	; (8018f0c <xTaskPriorityDisinherit+0xd8>)
 8018ee6:	441a      	add	r2, r3
 8018ee8:	693b      	ldr	r3, [r7, #16]
 8018eea:	3304      	adds	r3, #4
 8018eec:	4619      	mov	r1, r3
 8018eee:	4610      	mov	r0, r2
 8018ef0:	f7fe fb3d 	bl	801756e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018ef4:	2301      	movs	r3, #1
 8018ef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018ef8:	697b      	ldr	r3, [r7, #20]
	}
 8018efa:	4618      	mov	r0, r3
 8018efc:	3718      	adds	r7, #24
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}
 8018f02:	bf00      	nop
 8018f04:	240026d8 	.word	0x240026d8
 8018f08:	24002bb4 	.word	0x24002bb4
 8018f0c:	240026dc 	.word	0x240026dc

08018f10 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018f10:	b480      	push	{r7}
 8018f12:	b083      	sub	sp, #12
 8018f14:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018f16:	4b09      	ldr	r3, [pc, #36]	; (8018f3c <uxTaskResetEventItemValue+0x2c>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	699b      	ldr	r3, [r3, #24]
 8018f1c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018f1e:	4b07      	ldr	r3, [pc, #28]	; (8018f3c <uxTaskResetEventItemValue+0x2c>)
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f24:	4b05      	ldr	r3, [pc, #20]	; (8018f3c <uxTaskResetEventItemValue+0x2c>)
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018f2c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018f2e:	687b      	ldr	r3, [r7, #4]
}
 8018f30:	4618      	mov	r0, r3
 8018f32:	370c      	adds	r7, #12
 8018f34:	46bd      	mov	sp, r7
 8018f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f3a:	4770      	bx	lr
 8018f3c:	240026d8 	.word	0x240026d8

08018f40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b084      	sub	sp, #16
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
 8018f48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018f4a:	4b21      	ldr	r3, [pc, #132]	; (8018fd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018f50:	4b20      	ldr	r3, [pc, #128]	; (8018fd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	3304      	adds	r3, #4
 8018f56:	4618      	mov	r0, r3
 8018f58:	f7fe fb66 	bl	8017628 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f62:	d10a      	bne.n	8018f7a <prvAddCurrentTaskToDelayedList+0x3a>
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d007      	beq.n	8018f7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f6a:	4b1a      	ldr	r3, [pc, #104]	; (8018fd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	3304      	adds	r3, #4
 8018f70:	4619      	mov	r1, r3
 8018f72:	4819      	ldr	r0, [pc, #100]	; (8018fd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8018f74:	f7fe fafb 	bl	801756e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018f78:	e026      	b.n	8018fc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018f7a:	68fa      	ldr	r2, [r7, #12]
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	4413      	add	r3, r2
 8018f80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018f82:	4b14      	ldr	r3, [pc, #80]	; (8018fd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	68ba      	ldr	r2, [r7, #8]
 8018f88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018f8a:	68ba      	ldr	r2, [r7, #8]
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	d209      	bcs.n	8018fa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f92:	4b12      	ldr	r3, [pc, #72]	; (8018fdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8018f94:	681a      	ldr	r2, [r3, #0]
 8018f96:	4b0f      	ldr	r3, [pc, #60]	; (8018fd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	3304      	adds	r3, #4
 8018f9c:	4619      	mov	r1, r3
 8018f9e:	4610      	mov	r0, r2
 8018fa0:	f7fe fb09 	bl	80175b6 <vListInsert>
}
 8018fa4:	e010      	b.n	8018fc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018fa6:	4b0e      	ldr	r3, [pc, #56]	; (8018fe0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018fa8:	681a      	ldr	r2, [r3, #0]
 8018faa:	4b0a      	ldr	r3, [pc, #40]	; (8018fd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	3304      	adds	r3, #4
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	4610      	mov	r0, r2
 8018fb4:	f7fe faff 	bl	80175b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018fb8:	4b0a      	ldr	r3, [pc, #40]	; (8018fe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	68ba      	ldr	r2, [r7, #8]
 8018fbe:	429a      	cmp	r2, r3
 8018fc0:	d202      	bcs.n	8018fc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018fc2:	4a08      	ldr	r2, [pc, #32]	; (8018fe4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018fc4:	68bb      	ldr	r3, [r7, #8]
 8018fc6:	6013      	str	r3, [r2, #0]
}
 8018fc8:	bf00      	nop
 8018fca:	3710      	adds	r7, #16
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}
 8018fd0:	24002bb0 	.word	0x24002bb0
 8018fd4:	240026d8 	.word	0x240026d8
 8018fd8:	24002b98 	.word	0x24002b98
 8018fdc:	24002b68 	.word	0x24002b68
 8018fe0:	24002b64 	.word	0x24002b64
 8018fe4:	24002bcc 	.word	0x24002bcc

08018fe8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b08a      	sub	sp, #40	; 0x28
 8018fec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018fee:	2300      	movs	r3, #0
 8018ff0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018ff2:	f000 fb07 	bl	8019604 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018ff6:	4b1c      	ldr	r3, [pc, #112]	; (8019068 <xTimerCreateTimerTask+0x80>)
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d021      	beq.n	8019042 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018ffe:	2300      	movs	r3, #0
 8019000:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019002:	2300      	movs	r3, #0
 8019004:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019006:	1d3a      	adds	r2, r7, #4
 8019008:	f107 0108 	add.w	r1, r7, #8
 801900c:	f107 030c 	add.w	r3, r7, #12
 8019010:	4618      	mov	r0, r3
 8019012:	f7fd fff9 	bl	8017008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8019016:	6879      	ldr	r1, [r7, #4]
 8019018:	68bb      	ldr	r3, [r7, #8]
 801901a:	68fa      	ldr	r2, [r7, #12]
 801901c:	9202      	str	r2, [sp, #8]
 801901e:	9301      	str	r3, [sp, #4]
 8019020:	2302      	movs	r3, #2
 8019022:	9300      	str	r3, [sp, #0]
 8019024:	2300      	movs	r3, #0
 8019026:	460a      	mov	r2, r1
 8019028:	4910      	ldr	r1, [pc, #64]	; (801906c <xTimerCreateTimerTask+0x84>)
 801902a:	4811      	ldr	r0, [pc, #68]	; (8019070 <xTimerCreateTimerTask+0x88>)
 801902c:	f7ff f812 	bl	8018054 <xTaskCreateStatic>
 8019030:	4603      	mov	r3, r0
 8019032:	4a10      	ldr	r2, [pc, #64]	; (8019074 <xTimerCreateTimerTask+0x8c>)
 8019034:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8019036:	4b0f      	ldr	r3, [pc, #60]	; (8019074 <xTimerCreateTimerTask+0x8c>)
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d001      	beq.n	8019042 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801903e:	2301      	movs	r3, #1
 8019040:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d10a      	bne.n	801905e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8019048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801904c:	f383 8811 	msr	BASEPRI, r3
 8019050:	f3bf 8f6f 	isb	sy
 8019054:	f3bf 8f4f 	dsb	sy
 8019058:	613b      	str	r3, [r7, #16]
}
 801905a:	bf00      	nop
 801905c:	e7fe      	b.n	801905c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801905e:	697b      	ldr	r3, [r7, #20]
}
 8019060:	4618      	mov	r0, r3
 8019062:	3718      	adds	r7, #24
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}
 8019068:	24002c08 	.word	0x24002c08
 801906c:	0801ac28 	.word	0x0801ac28
 8019070:	080191ad 	.word	0x080191ad
 8019074:	24002c0c 	.word	0x24002c0c

08019078 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b08a      	sub	sp, #40	; 0x28
 801907c:	af00      	add	r7, sp, #0
 801907e:	60f8      	str	r0, [r7, #12]
 8019080:	60b9      	str	r1, [r7, #8]
 8019082:	607a      	str	r2, [r7, #4]
 8019084:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019086:	2300      	movs	r3, #0
 8019088:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d10a      	bne.n	80190a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8019090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019094:	f383 8811 	msr	BASEPRI, r3
 8019098:	f3bf 8f6f 	isb	sy
 801909c:	f3bf 8f4f 	dsb	sy
 80190a0:	623b      	str	r3, [r7, #32]
}
 80190a2:	bf00      	nop
 80190a4:	e7fe      	b.n	80190a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80190a6:	4b1a      	ldr	r3, [pc, #104]	; (8019110 <xTimerGenericCommand+0x98>)
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d02a      	beq.n	8019104 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80190ae:	68bb      	ldr	r3, [r7, #8]
 80190b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80190ba:	68bb      	ldr	r3, [r7, #8]
 80190bc:	2b05      	cmp	r3, #5
 80190be:	dc18      	bgt.n	80190f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80190c0:	f7ff fe9a 	bl	8018df8 <xTaskGetSchedulerState>
 80190c4:	4603      	mov	r3, r0
 80190c6:	2b02      	cmp	r3, #2
 80190c8:	d109      	bne.n	80190de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80190ca:	4b11      	ldr	r3, [pc, #68]	; (8019110 <xTimerGenericCommand+0x98>)
 80190cc:	6818      	ldr	r0, [r3, #0]
 80190ce:	f107 0110 	add.w	r1, r7, #16
 80190d2:	2300      	movs	r3, #0
 80190d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80190d6:	f7fe fbd5 	bl	8017884 <xQueueGenericSend>
 80190da:	6278      	str	r0, [r7, #36]	; 0x24
 80190dc:	e012      	b.n	8019104 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80190de:	4b0c      	ldr	r3, [pc, #48]	; (8019110 <xTimerGenericCommand+0x98>)
 80190e0:	6818      	ldr	r0, [r3, #0]
 80190e2:	f107 0110 	add.w	r1, r7, #16
 80190e6:	2300      	movs	r3, #0
 80190e8:	2200      	movs	r2, #0
 80190ea:	f7fe fbcb 	bl	8017884 <xQueueGenericSend>
 80190ee:	6278      	str	r0, [r7, #36]	; 0x24
 80190f0:	e008      	b.n	8019104 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80190f2:	4b07      	ldr	r3, [pc, #28]	; (8019110 <xTimerGenericCommand+0x98>)
 80190f4:	6818      	ldr	r0, [r3, #0]
 80190f6:	f107 0110 	add.w	r1, r7, #16
 80190fa:	2300      	movs	r3, #0
 80190fc:	683a      	ldr	r2, [r7, #0]
 80190fe:	f7fe fcbf 	bl	8017a80 <xQueueGenericSendFromISR>
 8019102:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019106:	4618      	mov	r0, r3
 8019108:	3728      	adds	r7, #40	; 0x28
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}
 801910e:	bf00      	nop
 8019110:	24002c08 	.word	0x24002c08

08019114 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b088      	sub	sp, #32
 8019118:	af02      	add	r7, sp, #8
 801911a:	6078      	str	r0, [r7, #4]
 801911c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801911e:	4b22      	ldr	r3, [pc, #136]	; (80191a8 <prvProcessExpiredTimer+0x94>)
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	68db      	ldr	r3, [r3, #12]
 8019124:	68db      	ldr	r3, [r3, #12]
 8019126:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019128:	697b      	ldr	r3, [r7, #20]
 801912a:	3304      	adds	r3, #4
 801912c:	4618      	mov	r0, r3
 801912e:	f7fe fa7b 	bl	8017628 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019132:	697b      	ldr	r3, [r7, #20]
 8019134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019138:	f003 0304 	and.w	r3, r3, #4
 801913c:	2b00      	cmp	r3, #0
 801913e:	d022      	beq.n	8019186 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019140:	697b      	ldr	r3, [r7, #20]
 8019142:	699a      	ldr	r2, [r3, #24]
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	18d1      	adds	r1, r2, r3
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	683a      	ldr	r2, [r7, #0]
 801914c:	6978      	ldr	r0, [r7, #20]
 801914e:	f000 f8d1 	bl	80192f4 <prvInsertTimerInActiveList>
 8019152:	4603      	mov	r3, r0
 8019154:	2b00      	cmp	r3, #0
 8019156:	d01f      	beq.n	8019198 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019158:	2300      	movs	r3, #0
 801915a:	9300      	str	r3, [sp, #0]
 801915c:	2300      	movs	r3, #0
 801915e:	687a      	ldr	r2, [r7, #4]
 8019160:	2100      	movs	r1, #0
 8019162:	6978      	ldr	r0, [r7, #20]
 8019164:	f7ff ff88 	bl	8019078 <xTimerGenericCommand>
 8019168:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801916a:	693b      	ldr	r3, [r7, #16]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d113      	bne.n	8019198 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019174:	f383 8811 	msr	BASEPRI, r3
 8019178:	f3bf 8f6f 	isb	sy
 801917c:	f3bf 8f4f 	dsb	sy
 8019180:	60fb      	str	r3, [r7, #12]
}
 8019182:	bf00      	nop
 8019184:	e7fe      	b.n	8019184 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019186:	697b      	ldr	r3, [r7, #20]
 8019188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801918c:	f023 0301 	bic.w	r3, r3, #1
 8019190:	b2da      	uxtb	r2, r3
 8019192:	697b      	ldr	r3, [r7, #20]
 8019194:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019198:	697b      	ldr	r3, [r7, #20]
 801919a:	6a1b      	ldr	r3, [r3, #32]
 801919c:	6978      	ldr	r0, [r7, #20]
 801919e:	4798      	blx	r3
}
 80191a0:	bf00      	nop
 80191a2:	3718      	adds	r7, #24
 80191a4:	46bd      	mov	sp, r7
 80191a6:	bd80      	pop	{r7, pc}
 80191a8:	24002c00 	.word	0x24002c00

080191ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b084      	sub	sp, #16
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80191b4:	f107 0308 	add.w	r3, r7, #8
 80191b8:	4618      	mov	r0, r3
 80191ba:	f000 f857 	bl	801926c <prvGetNextExpireTime>
 80191be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80191c0:	68bb      	ldr	r3, [r7, #8]
 80191c2:	4619      	mov	r1, r3
 80191c4:	68f8      	ldr	r0, [r7, #12]
 80191c6:	f000 f803 	bl	80191d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80191ca:	f000 f8d5 	bl	8019378 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80191ce:	e7f1      	b.n	80191b4 <prvTimerTask+0x8>

080191d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b084      	sub	sp, #16
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
 80191d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80191da:	f7ff f977 	bl	80184cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80191de:	f107 0308 	add.w	r3, r7, #8
 80191e2:	4618      	mov	r0, r3
 80191e4:	f000 f866 	bl	80192b4 <prvSampleTimeNow>
 80191e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80191ea:	68bb      	ldr	r3, [r7, #8]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d130      	bne.n	8019252 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d10a      	bne.n	801920c <prvProcessTimerOrBlockTask+0x3c>
 80191f6:	687a      	ldr	r2, [r7, #4]
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	429a      	cmp	r2, r3
 80191fc:	d806      	bhi.n	801920c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80191fe:	f7ff f973 	bl	80184e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019202:	68f9      	ldr	r1, [r7, #12]
 8019204:	6878      	ldr	r0, [r7, #4]
 8019206:	f7ff ff85 	bl	8019114 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801920a:	e024      	b.n	8019256 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801920c:	683b      	ldr	r3, [r7, #0]
 801920e:	2b00      	cmp	r3, #0
 8019210:	d008      	beq.n	8019224 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019212:	4b13      	ldr	r3, [pc, #76]	; (8019260 <prvProcessTimerOrBlockTask+0x90>)
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d101      	bne.n	8019220 <prvProcessTimerOrBlockTask+0x50>
 801921c:	2301      	movs	r3, #1
 801921e:	e000      	b.n	8019222 <prvProcessTimerOrBlockTask+0x52>
 8019220:	2300      	movs	r3, #0
 8019222:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019224:	4b0f      	ldr	r3, [pc, #60]	; (8019264 <prvProcessTimerOrBlockTask+0x94>)
 8019226:	6818      	ldr	r0, [r3, #0]
 8019228:	687a      	ldr	r2, [r7, #4]
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	1ad3      	subs	r3, r2, r3
 801922e:	683a      	ldr	r2, [r7, #0]
 8019230:	4619      	mov	r1, r3
 8019232:	f7fe fedb 	bl	8017fec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019236:	f7ff f957 	bl	80184e8 <xTaskResumeAll>
 801923a:	4603      	mov	r3, r0
 801923c:	2b00      	cmp	r3, #0
 801923e:	d10a      	bne.n	8019256 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019240:	4b09      	ldr	r3, [pc, #36]	; (8019268 <prvProcessTimerOrBlockTask+0x98>)
 8019242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019246:	601a      	str	r2, [r3, #0]
 8019248:	f3bf 8f4f 	dsb	sy
 801924c:	f3bf 8f6f 	isb	sy
}
 8019250:	e001      	b.n	8019256 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019252:	f7ff f949 	bl	80184e8 <xTaskResumeAll>
}
 8019256:	bf00      	nop
 8019258:	3710      	adds	r7, #16
 801925a:	46bd      	mov	sp, r7
 801925c:	bd80      	pop	{r7, pc}
 801925e:	bf00      	nop
 8019260:	24002c04 	.word	0x24002c04
 8019264:	24002c08 	.word	0x24002c08
 8019268:	e000ed04 	.word	0xe000ed04

0801926c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801926c:	b480      	push	{r7}
 801926e:	b085      	sub	sp, #20
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019274:	4b0e      	ldr	r3, [pc, #56]	; (80192b0 <prvGetNextExpireTime+0x44>)
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d101      	bne.n	8019282 <prvGetNextExpireTime+0x16>
 801927e:	2201      	movs	r2, #1
 8019280:	e000      	b.n	8019284 <prvGetNextExpireTime+0x18>
 8019282:	2200      	movs	r2, #0
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	2b00      	cmp	r3, #0
 801928e:	d105      	bne.n	801929c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019290:	4b07      	ldr	r3, [pc, #28]	; (80192b0 <prvGetNextExpireTime+0x44>)
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	68db      	ldr	r3, [r3, #12]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	60fb      	str	r3, [r7, #12]
 801929a:	e001      	b.n	80192a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801929c:	2300      	movs	r3, #0
 801929e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80192a0:	68fb      	ldr	r3, [r7, #12]
}
 80192a2:	4618      	mov	r0, r3
 80192a4:	3714      	adds	r7, #20
 80192a6:	46bd      	mov	sp, r7
 80192a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ac:	4770      	bx	lr
 80192ae:	bf00      	nop
 80192b0:	24002c00 	.word	0x24002c00

080192b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b084      	sub	sp, #16
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80192bc:	f7ff f9b2 	bl	8018624 <xTaskGetTickCount>
 80192c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80192c2:	4b0b      	ldr	r3, [pc, #44]	; (80192f0 <prvSampleTimeNow+0x3c>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	68fa      	ldr	r2, [r7, #12]
 80192c8:	429a      	cmp	r2, r3
 80192ca:	d205      	bcs.n	80192d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80192cc:	f000 f936 	bl	801953c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	2201      	movs	r2, #1
 80192d4:	601a      	str	r2, [r3, #0]
 80192d6:	e002      	b.n	80192de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	2200      	movs	r2, #0
 80192dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80192de:	4a04      	ldr	r2, [pc, #16]	; (80192f0 <prvSampleTimeNow+0x3c>)
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80192e4:	68fb      	ldr	r3, [r7, #12]
}
 80192e6:	4618      	mov	r0, r3
 80192e8:	3710      	adds	r7, #16
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
 80192ee:	bf00      	nop
 80192f0:	24002c10 	.word	0x24002c10

080192f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b086      	sub	sp, #24
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	60f8      	str	r0, [r7, #12]
 80192fc:	60b9      	str	r1, [r7, #8]
 80192fe:	607a      	str	r2, [r7, #4]
 8019300:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019302:	2300      	movs	r3, #0
 8019304:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	68ba      	ldr	r2, [r7, #8]
 801930a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	68fa      	ldr	r2, [r7, #12]
 8019310:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019312:	68ba      	ldr	r2, [r7, #8]
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	429a      	cmp	r2, r3
 8019318:	d812      	bhi.n	8019340 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801931a:	687a      	ldr	r2, [r7, #4]
 801931c:	683b      	ldr	r3, [r7, #0]
 801931e:	1ad2      	subs	r2, r2, r3
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	699b      	ldr	r3, [r3, #24]
 8019324:	429a      	cmp	r2, r3
 8019326:	d302      	bcc.n	801932e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019328:	2301      	movs	r3, #1
 801932a:	617b      	str	r3, [r7, #20]
 801932c:	e01b      	b.n	8019366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801932e:	4b10      	ldr	r3, [pc, #64]	; (8019370 <prvInsertTimerInActiveList+0x7c>)
 8019330:	681a      	ldr	r2, [r3, #0]
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	3304      	adds	r3, #4
 8019336:	4619      	mov	r1, r3
 8019338:	4610      	mov	r0, r2
 801933a:	f7fe f93c 	bl	80175b6 <vListInsert>
 801933e:	e012      	b.n	8019366 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019340:	687a      	ldr	r2, [r7, #4]
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	429a      	cmp	r2, r3
 8019346:	d206      	bcs.n	8019356 <prvInsertTimerInActiveList+0x62>
 8019348:	68ba      	ldr	r2, [r7, #8]
 801934a:	683b      	ldr	r3, [r7, #0]
 801934c:	429a      	cmp	r2, r3
 801934e:	d302      	bcc.n	8019356 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019350:	2301      	movs	r3, #1
 8019352:	617b      	str	r3, [r7, #20]
 8019354:	e007      	b.n	8019366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019356:	4b07      	ldr	r3, [pc, #28]	; (8019374 <prvInsertTimerInActiveList+0x80>)
 8019358:	681a      	ldr	r2, [r3, #0]
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	3304      	adds	r3, #4
 801935e:	4619      	mov	r1, r3
 8019360:	4610      	mov	r0, r2
 8019362:	f7fe f928 	bl	80175b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019366:	697b      	ldr	r3, [r7, #20]
}
 8019368:	4618      	mov	r0, r3
 801936a:	3718      	adds	r7, #24
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}
 8019370:	24002c04 	.word	0x24002c04
 8019374:	24002c00 	.word	0x24002c00

08019378 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b08e      	sub	sp, #56	; 0x38
 801937c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801937e:	e0ca      	b.n	8019516 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	2b00      	cmp	r3, #0
 8019384:	da18      	bge.n	80193b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019386:	1d3b      	adds	r3, r7, #4
 8019388:	3304      	adds	r3, #4
 801938a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801938e:	2b00      	cmp	r3, #0
 8019390:	d10a      	bne.n	80193a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019396:	f383 8811 	msr	BASEPRI, r3
 801939a:	f3bf 8f6f 	isb	sy
 801939e:	f3bf 8f4f 	dsb	sy
 80193a2:	61fb      	str	r3, [r7, #28]
}
 80193a4:	bf00      	nop
 80193a6:	e7fe      	b.n	80193a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80193a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80193ae:	6850      	ldr	r0, [r2, #4]
 80193b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80193b2:	6892      	ldr	r2, [r2, #8]
 80193b4:	4611      	mov	r1, r2
 80193b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	f2c0 80aa 	blt.w	8019514 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80193c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c6:	695b      	ldr	r3, [r3, #20]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d004      	beq.n	80193d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80193cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ce:	3304      	adds	r3, #4
 80193d0:	4618      	mov	r0, r3
 80193d2:	f7fe f929 	bl	8017628 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80193d6:	463b      	mov	r3, r7
 80193d8:	4618      	mov	r0, r3
 80193da:	f7ff ff6b 	bl	80192b4 <prvSampleTimeNow>
 80193de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	2b09      	cmp	r3, #9
 80193e4:	f200 8097 	bhi.w	8019516 <prvProcessReceivedCommands+0x19e>
 80193e8:	a201      	add	r2, pc, #4	; (adr r2, 80193f0 <prvProcessReceivedCommands+0x78>)
 80193ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193ee:	bf00      	nop
 80193f0:	08019419 	.word	0x08019419
 80193f4:	08019419 	.word	0x08019419
 80193f8:	08019419 	.word	0x08019419
 80193fc:	0801948d 	.word	0x0801948d
 8019400:	080194a1 	.word	0x080194a1
 8019404:	080194eb 	.word	0x080194eb
 8019408:	08019419 	.word	0x08019419
 801940c:	08019419 	.word	0x08019419
 8019410:	0801948d 	.word	0x0801948d
 8019414:	080194a1 	.word	0x080194a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801941a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801941e:	f043 0301 	orr.w	r3, r3, #1
 8019422:	b2da      	uxtb	r2, r3
 8019424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801942a:	68ba      	ldr	r2, [r7, #8]
 801942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801942e:	699b      	ldr	r3, [r3, #24]
 8019430:	18d1      	adds	r1, r2, r3
 8019432:	68bb      	ldr	r3, [r7, #8]
 8019434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019438:	f7ff ff5c 	bl	80192f4 <prvInsertTimerInActiveList>
 801943c:	4603      	mov	r3, r0
 801943e:	2b00      	cmp	r3, #0
 8019440:	d069      	beq.n	8019516 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019444:	6a1b      	ldr	r3, [r3, #32]
 8019446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019448:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801944c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019450:	f003 0304 	and.w	r3, r3, #4
 8019454:	2b00      	cmp	r3, #0
 8019456:	d05e      	beq.n	8019516 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019458:	68ba      	ldr	r2, [r7, #8]
 801945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801945c:	699b      	ldr	r3, [r3, #24]
 801945e:	441a      	add	r2, r3
 8019460:	2300      	movs	r3, #0
 8019462:	9300      	str	r3, [sp, #0]
 8019464:	2300      	movs	r3, #0
 8019466:	2100      	movs	r1, #0
 8019468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801946a:	f7ff fe05 	bl	8019078 <xTimerGenericCommand>
 801946e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019470:	6a3b      	ldr	r3, [r7, #32]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d14f      	bne.n	8019516 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801947a:	f383 8811 	msr	BASEPRI, r3
 801947e:	f3bf 8f6f 	isb	sy
 8019482:	f3bf 8f4f 	dsb	sy
 8019486:	61bb      	str	r3, [r7, #24]
}
 8019488:	bf00      	nop
 801948a:	e7fe      	b.n	801948a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801948e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019492:	f023 0301 	bic.w	r3, r3, #1
 8019496:	b2da      	uxtb	r2, r3
 8019498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801949a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801949e:	e03a      	b.n	8019516 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80194a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194a6:	f043 0301 	orr.w	r3, r3, #1
 80194aa:	b2da      	uxtb	r2, r3
 80194ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80194b2:	68ba      	ldr	r2, [r7, #8]
 80194b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80194b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ba:	699b      	ldr	r3, [r3, #24]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d10a      	bne.n	80194d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80194c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194c4:	f383 8811 	msr	BASEPRI, r3
 80194c8:	f3bf 8f6f 	isb	sy
 80194cc:	f3bf 8f4f 	dsb	sy
 80194d0:	617b      	str	r3, [r7, #20]
}
 80194d2:	bf00      	nop
 80194d4:	e7fe      	b.n	80194d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80194d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d8:	699a      	ldr	r2, [r3, #24]
 80194da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194dc:	18d1      	adds	r1, r2, r3
 80194de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194e4:	f7ff ff06 	bl	80192f4 <prvInsertTimerInActiveList>
					break;
 80194e8:	e015      	b.n	8019516 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80194ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194f0:	f003 0302 	and.w	r3, r3, #2
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d103      	bne.n	8019500 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80194f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194fa:	f000 fc01 	bl	8019d00 <vPortFree>
 80194fe:	e00a      	b.n	8019516 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019506:	f023 0301 	bic.w	r3, r3, #1
 801950a:	b2da      	uxtb	r2, r3
 801950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801950e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019512:	e000      	b.n	8019516 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019514:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019516:	4b08      	ldr	r3, [pc, #32]	; (8019538 <prvProcessReceivedCommands+0x1c0>)
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	1d39      	adds	r1, r7, #4
 801951c:	2200      	movs	r2, #0
 801951e:	4618      	mov	r0, r3
 8019520:	f7fe fb4a 	bl	8017bb8 <xQueueReceive>
 8019524:	4603      	mov	r3, r0
 8019526:	2b00      	cmp	r3, #0
 8019528:	f47f af2a 	bne.w	8019380 <prvProcessReceivedCommands+0x8>
	}
}
 801952c:	bf00      	nop
 801952e:	bf00      	nop
 8019530:	3730      	adds	r7, #48	; 0x30
 8019532:	46bd      	mov	sp, r7
 8019534:	bd80      	pop	{r7, pc}
 8019536:	bf00      	nop
 8019538:	24002c08 	.word	0x24002c08

0801953c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801953c:	b580      	push	{r7, lr}
 801953e:	b088      	sub	sp, #32
 8019540:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019542:	e048      	b.n	80195d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019544:	4b2d      	ldr	r3, [pc, #180]	; (80195fc <prvSwitchTimerLists+0xc0>)
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	68db      	ldr	r3, [r3, #12]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801954e:	4b2b      	ldr	r3, [pc, #172]	; (80195fc <prvSwitchTimerLists+0xc0>)
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	68db      	ldr	r3, [r3, #12]
 8019554:	68db      	ldr	r3, [r3, #12]
 8019556:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	3304      	adds	r3, #4
 801955c:	4618      	mov	r0, r3
 801955e:	f7fe f863 	bl	8017628 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	6a1b      	ldr	r3, [r3, #32]
 8019566:	68f8      	ldr	r0, [r7, #12]
 8019568:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019570:	f003 0304 	and.w	r3, r3, #4
 8019574:	2b00      	cmp	r3, #0
 8019576:	d02e      	beq.n	80195d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	699b      	ldr	r3, [r3, #24]
 801957c:	693a      	ldr	r2, [r7, #16]
 801957e:	4413      	add	r3, r2
 8019580:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019582:	68ba      	ldr	r2, [r7, #8]
 8019584:	693b      	ldr	r3, [r7, #16]
 8019586:	429a      	cmp	r2, r3
 8019588:	d90e      	bls.n	80195a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	68ba      	ldr	r2, [r7, #8]
 801958e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	68fa      	ldr	r2, [r7, #12]
 8019594:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019596:	4b19      	ldr	r3, [pc, #100]	; (80195fc <prvSwitchTimerLists+0xc0>)
 8019598:	681a      	ldr	r2, [r3, #0]
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	3304      	adds	r3, #4
 801959e:	4619      	mov	r1, r3
 80195a0:	4610      	mov	r0, r2
 80195a2:	f7fe f808 	bl	80175b6 <vListInsert>
 80195a6:	e016      	b.n	80195d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80195a8:	2300      	movs	r3, #0
 80195aa:	9300      	str	r3, [sp, #0]
 80195ac:	2300      	movs	r3, #0
 80195ae:	693a      	ldr	r2, [r7, #16]
 80195b0:	2100      	movs	r1, #0
 80195b2:	68f8      	ldr	r0, [r7, #12]
 80195b4:	f7ff fd60 	bl	8019078 <xTimerGenericCommand>
 80195b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d10a      	bne.n	80195d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80195c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195c4:	f383 8811 	msr	BASEPRI, r3
 80195c8:	f3bf 8f6f 	isb	sy
 80195cc:	f3bf 8f4f 	dsb	sy
 80195d0:	603b      	str	r3, [r7, #0]
}
 80195d2:	bf00      	nop
 80195d4:	e7fe      	b.n	80195d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80195d6:	4b09      	ldr	r3, [pc, #36]	; (80195fc <prvSwitchTimerLists+0xc0>)
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d1b1      	bne.n	8019544 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80195e0:	4b06      	ldr	r3, [pc, #24]	; (80195fc <prvSwitchTimerLists+0xc0>)
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80195e6:	4b06      	ldr	r3, [pc, #24]	; (8019600 <prvSwitchTimerLists+0xc4>)
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	4a04      	ldr	r2, [pc, #16]	; (80195fc <prvSwitchTimerLists+0xc0>)
 80195ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80195ee:	4a04      	ldr	r2, [pc, #16]	; (8019600 <prvSwitchTimerLists+0xc4>)
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	6013      	str	r3, [r2, #0]
}
 80195f4:	bf00      	nop
 80195f6:	3718      	adds	r7, #24
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}
 80195fc:	24002c00 	.word	0x24002c00
 8019600:	24002c04 	.word	0x24002c04

08019604 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019604:	b580      	push	{r7, lr}
 8019606:	b082      	sub	sp, #8
 8019608:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801960a:	f000 f98b 	bl	8019924 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801960e:	4b15      	ldr	r3, [pc, #84]	; (8019664 <prvCheckForValidListAndQueue+0x60>)
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d120      	bne.n	8019658 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019616:	4814      	ldr	r0, [pc, #80]	; (8019668 <prvCheckForValidListAndQueue+0x64>)
 8019618:	f7fd ff7c 	bl	8017514 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801961c:	4813      	ldr	r0, [pc, #76]	; (801966c <prvCheckForValidListAndQueue+0x68>)
 801961e:	f7fd ff79 	bl	8017514 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019622:	4b13      	ldr	r3, [pc, #76]	; (8019670 <prvCheckForValidListAndQueue+0x6c>)
 8019624:	4a10      	ldr	r2, [pc, #64]	; (8019668 <prvCheckForValidListAndQueue+0x64>)
 8019626:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019628:	4b12      	ldr	r3, [pc, #72]	; (8019674 <prvCheckForValidListAndQueue+0x70>)
 801962a:	4a10      	ldr	r2, [pc, #64]	; (801966c <prvCheckForValidListAndQueue+0x68>)
 801962c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801962e:	2300      	movs	r3, #0
 8019630:	9300      	str	r3, [sp, #0]
 8019632:	4b11      	ldr	r3, [pc, #68]	; (8019678 <prvCheckForValidListAndQueue+0x74>)
 8019634:	4a11      	ldr	r2, [pc, #68]	; (801967c <prvCheckForValidListAndQueue+0x78>)
 8019636:	2110      	movs	r1, #16
 8019638:	200a      	movs	r0, #10
 801963a:	f7fe f887 	bl	801774c <xQueueGenericCreateStatic>
 801963e:	4603      	mov	r3, r0
 8019640:	4a08      	ldr	r2, [pc, #32]	; (8019664 <prvCheckForValidListAndQueue+0x60>)
 8019642:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019644:	4b07      	ldr	r3, [pc, #28]	; (8019664 <prvCheckForValidListAndQueue+0x60>)
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	2b00      	cmp	r3, #0
 801964a:	d005      	beq.n	8019658 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801964c:	4b05      	ldr	r3, [pc, #20]	; (8019664 <prvCheckForValidListAndQueue+0x60>)
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	490b      	ldr	r1, [pc, #44]	; (8019680 <prvCheckForValidListAndQueue+0x7c>)
 8019652:	4618      	mov	r0, r3
 8019654:	f7fe fca0 	bl	8017f98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019658:	f000 f994 	bl	8019984 <vPortExitCritical>
}
 801965c:	bf00      	nop
 801965e:	46bd      	mov	sp, r7
 8019660:	bd80      	pop	{r7, pc}
 8019662:	bf00      	nop
 8019664:	24002c08 	.word	0x24002c08
 8019668:	24002bd8 	.word	0x24002bd8
 801966c:	24002bec 	.word	0x24002bec
 8019670:	24002c00 	.word	0x24002c00
 8019674:	24002c04 	.word	0x24002c04
 8019678:	24002cb4 	.word	0x24002cb4
 801967c:	24002c14 	.word	0x24002c14
 8019680:	0801ac30 	.word	0x0801ac30

08019684 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019684:	b580      	push	{r7, lr}
 8019686:	b08a      	sub	sp, #40	; 0x28
 8019688:	af00      	add	r7, sp, #0
 801968a:	60f8      	str	r0, [r7, #12]
 801968c:	60b9      	str	r1, [r7, #8]
 801968e:	607a      	str	r2, [r7, #4]
 8019690:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019692:	f06f 0301 	mvn.w	r3, #1
 8019696:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801969c:	68bb      	ldr	r3, [r7, #8]
 801969e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80196a4:	4b06      	ldr	r3, [pc, #24]	; (80196c0 <xTimerPendFunctionCallFromISR+0x3c>)
 80196a6:	6818      	ldr	r0, [r3, #0]
 80196a8:	f107 0114 	add.w	r1, r7, #20
 80196ac:	2300      	movs	r3, #0
 80196ae:	683a      	ldr	r2, [r7, #0]
 80196b0:	f7fe f9e6 	bl	8017a80 <xQueueGenericSendFromISR>
 80196b4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80196b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80196b8:	4618      	mov	r0, r3
 80196ba:	3728      	adds	r7, #40	; 0x28
 80196bc:	46bd      	mov	sp, r7
 80196be:	bd80      	pop	{r7, pc}
 80196c0:	24002c08 	.word	0x24002c08

080196c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80196c4:	b480      	push	{r7}
 80196c6:	b085      	sub	sp, #20
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	60f8      	str	r0, [r7, #12]
 80196cc:	60b9      	str	r1, [r7, #8]
 80196ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	3b04      	subs	r3, #4
 80196d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80196dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	3b04      	subs	r3, #4
 80196e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80196e4:	68bb      	ldr	r3, [r7, #8]
 80196e6:	f023 0201 	bic.w	r2, r3, #1
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	3b04      	subs	r3, #4
 80196f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80196f4:	4a0c      	ldr	r2, [pc, #48]	; (8019728 <pxPortInitialiseStack+0x64>)
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	3b14      	subs	r3, #20
 80196fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019700:	687a      	ldr	r2, [r7, #4]
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	3b04      	subs	r3, #4
 801970a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	f06f 0202 	mvn.w	r2, #2
 8019712:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	3b20      	subs	r3, #32
 8019718:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801971a:	68fb      	ldr	r3, [r7, #12]
}
 801971c:	4618      	mov	r0, r3
 801971e:	3714      	adds	r7, #20
 8019720:	46bd      	mov	sp, r7
 8019722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019726:	4770      	bx	lr
 8019728:	0801972d 	.word	0x0801972d

0801972c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801972c:	b480      	push	{r7}
 801972e:	b085      	sub	sp, #20
 8019730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019732:	2300      	movs	r3, #0
 8019734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019736:	4b12      	ldr	r3, [pc, #72]	; (8019780 <prvTaskExitError+0x54>)
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801973e:	d00a      	beq.n	8019756 <prvTaskExitError+0x2a>
	__asm volatile
 8019740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019744:	f383 8811 	msr	BASEPRI, r3
 8019748:	f3bf 8f6f 	isb	sy
 801974c:	f3bf 8f4f 	dsb	sy
 8019750:	60fb      	str	r3, [r7, #12]
}
 8019752:	bf00      	nop
 8019754:	e7fe      	b.n	8019754 <prvTaskExitError+0x28>
	__asm volatile
 8019756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801975a:	f383 8811 	msr	BASEPRI, r3
 801975e:	f3bf 8f6f 	isb	sy
 8019762:	f3bf 8f4f 	dsb	sy
 8019766:	60bb      	str	r3, [r7, #8]
}
 8019768:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801976a:	bf00      	nop
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d0fc      	beq.n	801976c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019772:	bf00      	nop
 8019774:	bf00      	nop
 8019776:	3714      	adds	r7, #20
 8019778:	46bd      	mov	sp, r7
 801977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977e:	4770      	bx	lr
 8019780:	240000a0 	.word	0x240000a0
	...

08019790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019790:	4b07      	ldr	r3, [pc, #28]	; (80197b0 <pxCurrentTCBConst2>)
 8019792:	6819      	ldr	r1, [r3, #0]
 8019794:	6808      	ldr	r0, [r1, #0]
 8019796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801979a:	f380 8809 	msr	PSP, r0
 801979e:	f3bf 8f6f 	isb	sy
 80197a2:	f04f 0000 	mov.w	r0, #0
 80197a6:	f380 8811 	msr	BASEPRI, r0
 80197aa:	4770      	bx	lr
 80197ac:	f3af 8000 	nop.w

080197b0 <pxCurrentTCBConst2>:
 80197b0:	240026d8 	.word	0x240026d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80197b4:	bf00      	nop
 80197b6:	bf00      	nop

080197b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80197b8:	4808      	ldr	r0, [pc, #32]	; (80197dc <prvPortStartFirstTask+0x24>)
 80197ba:	6800      	ldr	r0, [r0, #0]
 80197bc:	6800      	ldr	r0, [r0, #0]
 80197be:	f380 8808 	msr	MSP, r0
 80197c2:	f04f 0000 	mov.w	r0, #0
 80197c6:	f380 8814 	msr	CONTROL, r0
 80197ca:	b662      	cpsie	i
 80197cc:	b661      	cpsie	f
 80197ce:	f3bf 8f4f 	dsb	sy
 80197d2:	f3bf 8f6f 	isb	sy
 80197d6:	df00      	svc	0
 80197d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80197da:	bf00      	nop
 80197dc:	e000ed08 	.word	0xe000ed08

080197e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	b086      	sub	sp, #24
 80197e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80197e6:	4b46      	ldr	r3, [pc, #280]	; (8019900 <xPortStartScheduler+0x120>)
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	4a46      	ldr	r2, [pc, #280]	; (8019904 <xPortStartScheduler+0x124>)
 80197ec:	4293      	cmp	r3, r2
 80197ee:	d10a      	bne.n	8019806 <xPortStartScheduler+0x26>
	__asm volatile
 80197f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197f4:	f383 8811 	msr	BASEPRI, r3
 80197f8:	f3bf 8f6f 	isb	sy
 80197fc:	f3bf 8f4f 	dsb	sy
 8019800:	613b      	str	r3, [r7, #16]
}
 8019802:	bf00      	nop
 8019804:	e7fe      	b.n	8019804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019806:	4b3e      	ldr	r3, [pc, #248]	; (8019900 <xPortStartScheduler+0x120>)
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	4a3f      	ldr	r2, [pc, #252]	; (8019908 <xPortStartScheduler+0x128>)
 801980c:	4293      	cmp	r3, r2
 801980e:	d10a      	bne.n	8019826 <xPortStartScheduler+0x46>
	__asm volatile
 8019810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019814:	f383 8811 	msr	BASEPRI, r3
 8019818:	f3bf 8f6f 	isb	sy
 801981c:	f3bf 8f4f 	dsb	sy
 8019820:	60fb      	str	r3, [r7, #12]
}
 8019822:	bf00      	nop
 8019824:	e7fe      	b.n	8019824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019826:	4b39      	ldr	r3, [pc, #228]	; (801990c <xPortStartScheduler+0x12c>)
 8019828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801982a:	697b      	ldr	r3, [r7, #20]
 801982c:	781b      	ldrb	r3, [r3, #0]
 801982e:	b2db      	uxtb	r3, r3
 8019830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019832:	697b      	ldr	r3, [r7, #20]
 8019834:	22ff      	movs	r2, #255	; 0xff
 8019836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019838:	697b      	ldr	r3, [r7, #20]
 801983a:	781b      	ldrb	r3, [r3, #0]
 801983c:	b2db      	uxtb	r3, r3
 801983e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019840:	78fb      	ldrb	r3, [r7, #3]
 8019842:	b2db      	uxtb	r3, r3
 8019844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019848:	b2da      	uxtb	r2, r3
 801984a:	4b31      	ldr	r3, [pc, #196]	; (8019910 <xPortStartScheduler+0x130>)
 801984c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801984e:	4b31      	ldr	r3, [pc, #196]	; (8019914 <xPortStartScheduler+0x134>)
 8019850:	2207      	movs	r2, #7
 8019852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019854:	e009      	b.n	801986a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019856:	4b2f      	ldr	r3, [pc, #188]	; (8019914 <xPortStartScheduler+0x134>)
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	3b01      	subs	r3, #1
 801985c:	4a2d      	ldr	r2, [pc, #180]	; (8019914 <xPortStartScheduler+0x134>)
 801985e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019860:	78fb      	ldrb	r3, [r7, #3]
 8019862:	b2db      	uxtb	r3, r3
 8019864:	005b      	lsls	r3, r3, #1
 8019866:	b2db      	uxtb	r3, r3
 8019868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801986a:	78fb      	ldrb	r3, [r7, #3]
 801986c:	b2db      	uxtb	r3, r3
 801986e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019872:	2b80      	cmp	r3, #128	; 0x80
 8019874:	d0ef      	beq.n	8019856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019876:	4b27      	ldr	r3, [pc, #156]	; (8019914 <xPortStartScheduler+0x134>)
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	f1c3 0307 	rsb	r3, r3, #7
 801987e:	2b04      	cmp	r3, #4
 8019880:	d00a      	beq.n	8019898 <xPortStartScheduler+0xb8>
	__asm volatile
 8019882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019886:	f383 8811 	msr	BASEPRI, r3
 801988a:	f3bf 8f6f 	isb	sy
 801988e:	f3bf 8f4f 	dsb	sy
 8019892:	60bb      	str	r3, [r7, #8]
}
 8019894:	bf00      	nop
 8019896:	e7fe      	b.n	8019896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019898:	4b1e      	ldr	r3, [pc, #120]	; (8019914 <xPortStartScheduler+0x134>)
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	021b      	lsls	r3, r3, #8
 801989e:	4a1d      	ldr	r2, [pc, #116]	; (8019914 <xPortStartScheduler+0x134>)
 80198a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80198a2:	4b1c      	ldr	r3, [pc, #112]	; (8019914 <xPortStartScheduler+0x134>)
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80198aa:	4a1a      	ldr	r2, [pc, #104]	; (8019914 <xPortStartScheduler+0x134>)
 80198ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	b2da      	uxtb	r2, r3
 80198b2:	697b      	ldr	r3, [r7, #20]
 80198b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80198b6:	4b18      	ldr	r3, [pc, #96]	; (8019918 <xPortStartScheduler+0x138>)
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	4a17      	ldr	r2, [pc, #92]	; (8019918 <xPortStartScheduler+0x138>)
 80198bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80198c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80198c2:	4b15      	ldr	r3, [pc, #84]	; (8019918 <xPortStartScheduler+0x138>)
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	4a14      	ldr	r2, [pc, #80]	; (8019918 <xPortStartScheduler+0x138>)
 80198c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80198cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80198ce:	f000 f8dd 	bl	8019a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80198d2:	4b12      	ldr	r3, [pc, #72]	; (801991c <xPortStartScheduler+0x13c>)
 80198d4:	2200      	movs	r2, #0
 80198d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80198d8:	f000 f8fc 	bl	8019ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80198dc:	4b10      	ldr	r3, [pc, #64]	; (8019920 <xPortStartScheduler+0x140>)
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	4a0f      	ldr	r2, [pc, #60]	; (8019920 <xPortStartScheduler+0x140>)
 80198e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80198e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80198e8:	f7ff ff66 	bl	80197b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80198ec:	f7fe ff6c 	bl	80187c8 <vTaskSwitchContext>
	prvTaskExitError();
 80198f0:	f7ff ff1c 	bl	801972c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80198f4:	2300      	movs	r3, #0
}
 80198f6:	4618      	mov	r0, r3
 80198f8:	3718      	adds	r7, #24
 80198fa:	46bd      	mov	sp, r7
 80198fc:	bd80      	pop	{r7, pc}
 80198fe:	bf00      	nop
 8019900:	e000ed00 	.word	0xe000ed00
 8019904:	410fc271 	.word	0x410fc271
 8019908:	410fc270 	.word	0x410fc270
 801990c:	e000e400 	.word	0xe000e400
 8019910:	24002d04 	.word	0x24002d04
 8019914:	24002d08 	.word	0x24002d08
 8019918:	e000ed20 	.word	0xe000ed20
 801991c:	240000a0 	.word	0x240000a0
 8019920:	e000ef34 	.word	0xe000ef34

08019924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019924:	b480      	push	{r7}
 8019926:	b083      	sub	sp, #12
 8019928:	af00      	add	r7, sp, #0
	__asm volatile
 801992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801992e:	f383 8811 	msr	BASEPRI, r3
 8019932:	f3bf 8f6f 	isb	sy
 8019936:	f3bf 8f4f 	dsb	sy
 801993a:	607b      	str	r3, [r7, #4]
}
 801993c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801993e:	4b0f      	ldr	r3, [pc, #60]	; (801997c <vPortEnterCritical+0x58>)
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	3301      	adds	r3, #1
 8019944:	4a0d      	ldr	r2, [pc, #52]	; (801997c <vPortEnterCritical+0x58>)
 8019946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019948:	4b0c      	ldr	r3, [pc, #48]	; (801997c <vPortEnterCritical+0x58>)
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	2b01      	cmp	r3, #1
 801994e:	d10f      	bne.n	8019970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019950:	4b0b      	ldr	r3, [pc, #44]	; (8019980 <vPortEnterCritical+0x5c>)
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	b2db      	uxtb	r3, r3
 8019956:	2b00      	cmp	r3, #0
 8019958:	d00a      	beq.n	8019970 <vPortEnterCritical+0x4c>
	__asm volatile
 801995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801995e:	f383 8811 	msr	BASEPRI, r3
 8019962:	f3bf 8f6f 	isb	sy
 8019966:	f3bf 8f4f 	dsb	sy
 801996a:	603b      	str	r3, [r7, #0]
}
 801996c:	bf00      	nop
 801996e:	e7fe      	b.n	801996e <vPortEnterCritical+0x4a>
	}
}
 8019970:	bf00      	nop
 8019972:	370c      	adds	r7, #12
 8019974:	46bd      	mov	sp, r7
 8019976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997a:	4770      	bx	lr
 801997c:	240000a0 	.word	0x240000a0
 8019980:	e000ed04 	.word	0xe000ed04

08019984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019984:	b480      	push	{r7}
 8019986:	b083      	sub	sp, #12
 8019988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801998a:	4b12      	ldr	r3, [pc, #72]	; (80199d4 <vPortExitCritical+0x50>)
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d10a      	bne.n	80199a8 <vPortExitCritical+0x24>
	__asm volatile
 8019992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019996:	f383 8811 	msr	BASEPRI, r3
 801999a:	f3bf 8f6f 	isb	sy
 801999e:	f3bf 8f4f 	dsb	sy
 80199a2:	607b      	str	r3, [r7, #4]
}
 80199a4:	bf00      	nop
 80199a6:	e7fe      	b.n	80199a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80199a8:	4b0a      	ldr	r3, [pc, #40]	; (80199d4 <vPortExitCritical+0x50>)
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	3b01      	subs	r3, #1
 80199ae:	4a09      	ldr	r2, [pc, #36]	; (80199d4 <vPortExitCritical+0x50>)
 80199b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80199b2:	4b08      	ldr	r3, [pc, #32]	; (80199d4 <vPortExitCritical+0x50>)
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d105      	bne.n	80199c6 <vPortExitCritical+0x42>
 80199ba:	2300      	movs	r3, #0
 80199bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80199be:	683b      	ldr	r3, [r7, #0]
 80199c0:	f383 8811 	msr	BASEPRI, r3
}
 80199c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80199c6:	bf00      	nop
 80199c8:	370c      	adds	r7, #12
 80199ca:	46bd      	mov	sp, r7
 80199cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199d0:	4770      	bx	lr
 80199d2:	bf00      	nop
 80199d4:	240000a0 	.word	0x240000a0
	...

080199e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80199e0:	f3ef 8009 	mrs	r0, PSP
 80199e4:	f3bf 8f6f 	isb	sy
 80199e8:	4b15      	ldr	r3, [pc, #84]	; (8019a40 <pxCurrentTCBConst>)
 80199ea:	681a      	ldr	r2, [r3, #0]
 80199ec:	f01e 0f10 	tst.w	lr, #16
 80199f0:	bf08      	it	eq
 80199f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80199f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199fa:	6010      	str	r0, [r2, #0]
 80199fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019a04:	f380 8811 	msr	BASEPRI, r0
 8019a08:	f3bf 8f4f 	dsb	sy
 8019a0c:	f3bf 8f6f 	isb	sy
 8019a10:	f7fe feda 	bl	80187c8 <vTaskSwitchContext>
 8019a14:	f04f 0000 	mov.w	r0, #0
 8019a18:	f380 8811 	msr	BASEPRI, r0
 8019a1c:	bc09      	pop	{r0, r3}
 8019a1e:	6819      	ldr	r1, [r3, #0]
 8019a20:	6808      	ldr	r0, [r1, #0]
 8019a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a26:	f01e 0f10 	tst.w	lr, #16
 8019a2a:	bf08      	it	eq
 8019a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019a30:	f380 8809 	msr	PSP, r0
 8019a34:	f3bf 8f6f 	isb	sy
 8019a38:	4770      	bx	lr
 8019a3a:	bf00      	nop
 8019a3c:	f3af 8000 	nop.w

08019a40 <pxCurrentTCBConst>:
 8019a40:	240026d8 	.word	0x240026d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019a44:	bf00      	nop
 8019a46:	bf00      	nop

08019a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b082      	sub	sp, #8
 8019a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8019a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a52:	f383 8811 	msr	BASEPRI, r3
 8019a56:	f3bf 8f6f 	isb	sy
 8019a5a:	f3bf 8f4f 	dsb	sy
 8019a5e:	607b      	str	r3, [r7, #4]
}
 8019a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019a62:	f7fe fdef 	bl	8018644 <xTaskIncrementTick>
 8019a66:	4603      	mov	r3, r0
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d003      	beq.n	8019a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019a6c:	4b06      	ldr	r3, [pc, #24]	; (8019a88 <xPortSysTickHandler+0x40>)
 8019a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a72:	601a      	str	r2, [r3, #0]
 8019a74:	2300      	movs	r3, #0
 8019a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019a78:	683b      	ldr	r3, [r7, #0]
 8019a7a:	f383 8811 	msr	BASEPRI, r3
}
 8019a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019a80:	bf00      	nop
 8019a82:	3708      	adds	r7, #8
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bd80      	pop	{r7, pc}
 8019a88:	e000ed04 	.word	0xe000ed04

08019a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019a8c:	b480      	push	{r7}
 8019a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019a90:	4b0b      	ldr	r3, [pc, #44]	; (8019ac0 <vPortSetupTimerInterrupt+0x34>)
 8019a92:	2200      	movs	r2, #0
 8019a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019a96:	4b0b      	ldr	r3, [pc, #44]	; (8019ac4 <vPortSetupTimerInterrupt+0x38>)
 8019a98:	2200      	movs	r2, #0
 8019a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019a9c:	4b0a      	ldr	r3, [pc, #40]	; (8019ac8 <vPortSetupTimerInterrupt+0x3c>)
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	4a0a      	ldr	r2, [pc, #40]	; (8019acc <vPortSetupTimerInterrupt+0x40>)
 8019aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8019aa6:	099b      	lsrs	r3, r3, #6
 8019aa8:	4a09      	ldr	r2, [pc, #36]	; (8019ad0 <vPortSetupTimerInterrupt+0x44>)
 8019aaa:	3b01      	subs	r3, #1
 8019aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019aae:	4b04      	ldr	r3, [pc, #16]	; (8019ac0 <vPortSetupTimerInterrupt+0x34>)
 8019ab0:	2207      	movs	r2, #7
 8019ab2:	601a      	str	r2, [r3, #0]
}
 8019ab4:	bf00      	nop
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019abc:	4770      	bx	lr
 8019abe:	bf00      	nop
 8019ac0:	e000e010 	.word	0xe000e010
 8019ac4:	e000e018 	.word	0xe000e018
 8019ac8:	24000090 	.word	0x24000090
 8019acc:	10624dd3 	.word	0x10624dd3
 8019ad0:	e000e014 	.word	0xe000e014

08019ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019ae4 <vPortEnableVFP+0x10>
 8019ad8:	6801      	ldr	r1, [r0, #0]
 8019ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019ade:	6001      	str	r1, [r0, #0]
 8019ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019ae2:	bf00      	nop
 8019ae4:	e000ed88 	.word	0xe000ed88

08019ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019ae8:	b480      	push	{r7}
 8019aea:	b085      	sub	sp, #20
 8019aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019aee:	f3ef 8305 	mrs	r3, IPSR
 8019af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	2b0f      	cmp	r3, #15
 8019af8:	d914      	bls.n	8019b24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019afa:	4a17      	ldr	r2, [pc, #92]	; (8019b58 <vPortValidateInterruptPriority+0x70>)
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	4413      	add	r3, r2
 8019b00:	781b      	ldrb	r3, [r3, #0]
 8019b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019b04:	4b15      	ldr	r3, [pc, #84]	; (8019b5c <vPortValidateInterruptPriority+0x74>)
 8019b06:	781b      	ldrb	r3, [r3, #0]
 8019b08:	7afa      	ldrb	r2, [r7, #11]
 8019b0a:	429a      	cmp	r2, r3
 8019b0c:	d20a      	bcs.n	8019b24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b12:	f383 8811 	msr	BASEPRI, r3
 8019b16:	f3bf 8f6f 	isb	sy
 8019b1a:	f3bf 8f4f 	dsb	sy
 8019b1e:	607b      	str	r3, [r7, #4]
}
 8019b20:	bf00      	nop
 8019b22:	e7fe      	b.n	8019b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019b24:	4b0e      	ldr	r3, [pc, #56]	; (8019b60 <vPortValidateInterruptPriority+0x78>)
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019b2c:	4b0d      	ldr	r3, [pc, #52]	; (8019b64 <vPortValidateInterruptPriority+0x7c>)
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	429a      	cmp	r2, r3
 8019b32:	d90a      	bls.n	8019b4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b38:	f383 8811 	msr	BASEPRI, r3
 8019b3c:	f3bf 8f6f 	isb	sy
 8019b40:	f3bf 8f4f 	dsb	sy
 8019b44:	603b      	str	r3, [r7, #0]
}
 8019b46:	bf00      	nop
 8019b48:	e7fe      	b.n	8019b48 <vPortValidateInterruptPriority+0x60>
	}
 8019b4a:	bf00      	nop
 8019b4c:	3714      	adds	r7, #20
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b54:	4770      	bx	lr
 8019b56:	bf00      	nop
 8019b58:	e000e3f0 	.word	0xe000e3f0
 8019b5c:	24002d04 	.word	0x24002d04
 8019b60:	e000ed0c 	.word	0xe000ed0c
 8019b64:	24002d08 	.word	0x24002d08

08019b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b08a      	sub	sp, #40	; 0x28
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019b70:	2300      	movs	r3, #0
 8019b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019b74:	f7fe fcaa 	bl	80184cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019b78:	4b5b      	ldr	r3, [pc, #364]	; (8019ce8 <pvPortMalloc+0x180>)
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d101      	bne.n	8019b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019b80:	f000 f920 	bl	8019dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019b84:	4b59      	ldr	r3, [pc, #356]	; (8019cec <pvPortMalloc+0x184>)
 8019b86:	681a      	ldr	r2, [r3, #0]
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	4013      	ands	r3, r2
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	f040 8093 	bne.w	8019cb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d01d      	beq.n	8019bd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019b98:	2208      	movs	r2, #8
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	4413      	add	r3, r2
 8019b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	f003 0307 	and.w	r3, r3, #7
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d014      	beq.n	8019bd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	f023 0307 	bic.w	r3, r3, #7
 8019bb0:	3308      	adds	r3, #8
 8019bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	f003 0307 	and.w	r3, r3, #7
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d00a      	beq.n	8019bd4 <pvPortMalloc+0x6c>
	__asm volatile
 8019bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bc2:	f383 8811 	msr	BASEPRI, r3
 8019bc6:	f3bf 8f6f 	isb	sy
 8019bca:	f3bf 8f4f 	dsb	sy
 8019bce:	617b      	str	r3, [r7, #20]
}
 8019bd0:	bf00      	nop
 8019bd2:	e7fe      	b.n	8019bd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d06e      	beq.n	8019cb8 <pvPortMalloc+0x150>
 8019bda:	4b45      	ldr	r3, [pc, #276]	; (8019cf0 <pvPortMalloc+0x188>)
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	687a      	ldr	r2, [r7, #4]
 8019be0:	429a      	cmp	r2, r3
 8019be2:	d869      	bhi.n	8019cb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019be4:	4b43      	ldr	r3, [pc, #268]	; (8019cf4 <pvPortMalloc+0x18c>)
 8019be6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019be8:	4b42      	ldr	r3, [pc, #264]	; (8019cf4 <pvPortMalloc+0x18c>)
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019bee:	e004      	b.n	8019bfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfc:	685b      	ldr	r3, [r3, #4]
 8019bfe:	687a      	ldr	r2, [r7, #4]
 8019c00:	429a      	cmp	r2, r3
 8019c02:	d903      	bls.n	8019c0c <pvPortMalloc+0xa4>
 8019c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d1f1      	bne.n	8019bf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019c0c:	4b36      	ldr	r3, [pc, #216]	; (8019ce8 <pvPortMalloc+0x180>)
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d050      	beq.n	8019cb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019c16:	6a3b      	ldr	r3, [r7, #32]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	2208      	movs	r2, #8
 8019c1c:	4413      	add	r3, r2
 8019c1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c22:	681a      	ldr	r2, [r3, #0]
 8019c24:	6a3b      	ldr	r3, [r7, #32]
 8019c26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c2a:	685a      	ldr	r2, [r3, #4]
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	1ad2      	subs	r2, r2, r3
 8019c30:	2308      	movs	r3, #8
 8019c32:	005b      	lsls	r3, r3, #1
 8019c34:	429a      	cmp	r2, r3
 8019c36:	d91f      	bls.n	8019c78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	4413      	add	r3, r2
 8019c3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019c40:	69bb      	ldr	r3, [r7, #24]
 8019c42:	f003 0307 	and.w	r3, r3, #7
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d00a      	beq.n	8019c60 <pvPortMalloc+0xf8>
	__asm volatile
 8019c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c4e:	f383 8811 	msr	BASEPRI, r3
 8019c52:	f3bf 8f6f 	isb	sy
 8019c56:	f3bf 8f4f 	dsb	sy
 8019c5a:	613b      	str	r3, [r7, #16]
}
 8019c5c:	bf00      	nop
 8019c5e:	e7fe      	b.n	8019c5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c62:	685a      	ldr	r2, [r3, #4]
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	1ad2      	subs	r2, r2, r3
 8019c68:	69bb      	ldr	r3, [r7, #24]
 8019c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c6e:	687a      	ldr	r2, [r7, #4]
 8019c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019c72:	69b8      	ldr	r0, [r7, #24]
 8019c74:	f000 f908 	bl	8019e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019c78:	4b1d      	ldr	r3, [pc, #116]	; (8019cf0 <pvPortMalloc+0x188>)
 8019c7a:	681a      	ldr	r2, [r3, #0]
 8019c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c7e:	685b      	ldr	r3, [r3, #4]
 8019c80:	1ad3      	subs	r3, r2, r3
 8019c82:	4a1b      	ldr	r2, [pc, #108]	; (8019cf0 <pvPortMalloc+0x188>)
 8019c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019c86:	4b1a      	ldr	r3, [pc, #104]	; (8019cf0 <pvPortMalloc+0x188>)
 8019c88:	681a      	ldr	r2, [r3, #0]
 8019c8a:	4b1b      	ldr	r3, [pc, #108]	; (8019cf8 <pvPortMalloc+0x190>)
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	429a      	cmp	r2, r3
 8019c90:	d203      	bcs.n	8019c9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019c92:	4b17      	ldr	r3, [pc, #92]	; (8019cf0 <pvPortMalloc+0x188>)
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	4a18      	ldr	r2, [pc, #96]	; (8019cf8 <pvPortMalloc+0x190>)
 8019c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c9c:	685a      	ldr	r2, [r3, #4]
 8019c9e:	4b13      	ldr	r3, [pc, #76]	; (8019cec <pvPortMalloc+0x184>)
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	431a      	orrs	r2, r3
 8019ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019caa:	2200      	movs	r2, #0
 8019cac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019cae:	4b13      	ldr	r3, [pc, #76]	; (8019cfc <pvPortMalloc+0x194>)
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	3301      	adds	r3, #1
 8019cb4:	4a11      	ldr	r2, [pc, #68]	; (8019cfc <pvPortMalloc+0x194>)
 8019cb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019cb8:	f7fe fc16 	bl	80184e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019cbc:	69fb      	ldr	r3, [r7, #28]
 8019cbe:	f003 0307 	and.w	r3, r3, #7
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d00a      	beq.n	8019cdc <pvPortMalloc+0x174>
	__asm volatile
 8019cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cca:	f383 8811 	msr	BASEPRI, r3
 8019cce:	f3bf 8f6f 	isb	sy
 8019cd2:	f3bf 8f4f 	dsb	sy
 8019cd6:	60fb      	str	r3, [r7, #12]
}
 8019cd8:	bf00      	nop
 8019cda:	e7fe      	b.n	8019cda <pvPortMalloc+0x172>
	return pvReturn;
 8019cdc:	69fb      	ldr	r3, [r7, #28]
}
 8019cde:	4618      	mov	r0, r3
 8019ce0:	3728      	adds	r7, #40	; 0x28
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}
 8019ce6:	bf00      	nop
 8019ce8:	24006914 	.word	0x24006914
 8019cec:	24006928 	.word	0x24006928
 8019cf0:	24006918 	.word	0x24006918
 8019cf4:	2400690c 	.word	0x2400690c
 8019cf8:	2400691c 	.word	0x2400691c
 8019cfc:	24006920 	.word	0x24006920

08019d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b086      	sub	sp, #24
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d04d      	beq.n	8019dae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019d12:	2308      	movs	r3, #8
 8019d14:	425b      	negs	r3, r3
 8019d16:	697a      	ldr	r2, [r7, #20]
 8019d18:	4413      	add	r3, r2
 8019d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019d1c:	697b      	ldr	r3, [r7, #20]
 8019d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019d20:	693b      	ldr	r3, [r7, #16]
 8019d22:	685a      	ldr	r2, [r3, #4]
 8019d24:	4b24      	ldr	r3, [pc, #144]	; (8019db8 <vPortFree+0xb8>)
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	4013      	ands	r3, r2
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d10a      	bne.n	8019d44 <vPortFree+0x44>
	__asm volatile
 8019d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d32:	f383 8811 	msr	BASEPRI, r3
 8019d36:	f3bf 8f6f 	isb	sy
 8019d3a:	f3bf 8f4f 	dsb	sy
 8019d3e:	60fb      	str	r3, [r7, #12]
}
 8019d40:	bf00      	nop
 8019d42:	e7fe      	b.n	8019d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019d44:	693b      	ldr	r3, [r7, #16]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d00a      	beq.n	8019d62 <vPortFree+0x62>
	__asm volatile
 8019d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d50:	f383 8811 	msr	BASEPRI, r3
 8019d54:	f3bf 8f6f 	isb	sy
 8019d58:	f3bf 8f4f 	dsb	sy
 8019d5c:	60bb      	str	r3, [r7, #8]
}
 8019d5e:	bf00      	nop
 8019d60:	e7fe      	b.n	8019d60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019d62:	693b      	ldr	r3, [r7, #16]
 8019d64:	685a      	ldr	r2, [r3, #4]
 8019d66:	4b14      	ldr	r3, [pc, #80]	; (8019db8 <vPortFree+0xb8>)
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	4013      	ands	r3, r2
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d01e      	beq.n	8019dae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019d70:	693b      	ldr	r3, [r7, #16]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d11a      	bne.n	8019dae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019d78:	693b      	ldr	r3, [r7, #16]
 8019d7a:	685a      	ldr	r2, [r3, #4]
 8019d7c:	4b0e      	ldr	r3, [pc, #56]	; (8019db8 <vPortFree+0xb8>)
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	43db      	mvns	r3, r3
 8019d82:	401a      	ands	r2, r3
 8019d84:	693b      	ldr	r3, [r7, #16]
 8019d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019d88:	f7fe fba0 	bl	80184cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019d8c:	693b      	ldr	r3, [r7, #16]
 8019d8e:	685a      	ldr	r2, [r3, #4]
 8019d90:	4b0a      	ldr	r3, [pc, #40]	; (8019dbc <vPortFree+0xbc>)
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	4413      	add	r3, r2
 8019d96:	4a09      	ldr	r2, [pc, #36]	; (8019dbc <vPortFree+0xbc>)
 8019d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019d9a:	6938      	ldr	r0, [r7, #16]
 8019d9c:	f000 f874 	bl	8019e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019da0:	4b07      	ldr	r3, [pc, #28]	; (8019dc0 <vPortFree+0xc0>)
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	3301      	adds	r3, #1
 8019da6:	4a06      	ldr	r2, [pc, #24]	; (8019dc0 <vPortFree+0xc0>)
 8019da8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019daa:	f7fe fb9d 	bl	80184e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019dae:	bf00      	nop
 8019db0:	3718      	adds	r7, #24
 8019db2:	46bd      	mov	sp, r7
 8019db4:	bd80      	pop	{r7, pc}
 8019db6:	bf00      	nop
 8019db8:	24006928 	.word	0x24006928
 8019dbc:	24006918 	.word	0x24006918
 8019dc0:	24006924 	.word	0x24006924

08019dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019dc4:	b480      	push	{r7}
 8019dc6:	b085      	sub	sp, #20
 8019dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019dca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019dd0:	4b27      	ldr	r3, [pc, #156]	; (8019e70 <prvHeapInit+0xac>)
 8019dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	f003 0307 	and.w	r3, r3, #7
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d00c      	beq.n	8019df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019dde:	68fb      	ldr	r3, [r7, #12]
 8019de0:	3307      	adds	r3, #7
 8019de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	f023 0307 	bic.w	r3, r3, #7
 8019dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019dec:	68ba      	ldr	r2, [r7, #8]
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	1ad3      	subs	r3, r2, r3
 8019df2:	4a1f      	ldr	r2, [pc, #124]	; (8019e70 <prvHeapInit+0xac>)
 8019df4:	4413      	add	r3, r2
 8019df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019dfc:	4a1d      	ldr	r2, [pc, #116]	; (8019e74 <prvHeapInit+0xb0>)
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019e02:	4b1c      	ldr	r3, [pc, #112]	; (8019e74 <prvHeapInit+0xb0>)
 8019e04:	2200      	movs	r2, #0
 8019e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	68ba      	ldr	r2, [r7, #8]
 8019e0c:	4413      	add	r3, r2
 8019e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019e10:	2208      	movs	r2, #8
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	1a9b      	subs	r3, r3, r2
 8019e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	f023 0307 	bic.w	r3, r3, #7
 8019e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	4a15      	ldr	r2, [pc, #84]	; (8019e78 <prvHeapInit+0xb4>)
 8019e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019e26:	4b14      	ldr	r3, [pc, #80]	; (8019e78 <prvHeapInit+0xb4>)
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019e2e:	4b12      	ldr	r3, [pc, #72]	; (8019e78 <prvHeapInit+0xb4>)
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	2200      	movs	r2, #0
 8019e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019e3a:	683b      	ldr	r3, [r7, #0]
 8019e3c:	68fa      	ldr	r2, [r7, #12]
 8019e3e:	1ad2      	subs	r2, r2, r3
 8019e40:	683b      	ldr	r3, [r7, #0]
 8019e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019e44:	4b0c      	ldr	r3, [pc, #48]	; (8019e78 <prvHeapInit+0xb4>)
 8019e46:	681a      	ldr	r2, [r3, #0]
 8019e48:	683b      	ldr	r3, [r7, #0]
 8019e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	685b      	ldr	r3, [r3, #4]
 8019e50:	4a0a      	ldr	r2, [pc, #40]	; (8019e7c <prvHeapInit+0xb8>)
 8019e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019e54:	683b      	ldr	r3, [r7, #0]
 8019e56:	685b      	ldr	r3, [r3, #4]
 8019e58:	4a09      	ldr	r2, [pc, #36]	; (8019e80 <prvHeapInit+0xbc>)
 8019e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019e5c:	4b09      	ldr	r3, [pc, #36]	; (8019e84 <prvHeapInit+0xc0>)
 8019e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019e62:	601a      	str	r2, [r3, #0]
}
 8019e64:	bf00      	nop
 8019e66:	3714      	adds	r7, #20
 8019e68:	46bd      	mov	sp, r7
 8019e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e6e:	4770      	bx	lr
 8019e70:	24002d0c 	.word	0x24002d0c
 8019e74:	2400690c 	.word	0x2400690c
 8019e78:	24006914 	.word	0x24006914
 8019e7c:	2400691c 	.word	0x2400691c
 8019e80:	24006918 	.word	0x24006918
 8019e84:	24006928 	.word	0x24006928

08019e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019e88:	b480      	push	{r7}
 8019e8a:	b085      	sub	sp, #20
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019e90:	4b28      	ldr	r3, [pc, #160]	; (8019f34 <prvInsertBlockIntoFreeList+0xac>)
 8019e92:	60fb      	str	r3, [r7, #12]
 8019e94:	e002      	b.n	8019e9c <prvInsertBlockIntoFreeList+0x14>
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	60fb      	str	r3, [r7, #12]
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	687a      	ldr	r2, [r7, #4]
 8019ea2:	429a      	cmp	r2, r3
 8019ea4:	d8f7      	bhi.n	8019e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	68ba      	ldr	r2, [r7, #8]
 8019eb0:	4413      	add	r3, r2
 8019eb2:	687a      	ldr	r2, [r7, #4]
 8019eb4:	429a      	cmp	r2, r3
 8019eb6:	d108      	bne.n	8019eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	685a      	ldr	r2, [r3, #4]
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	685b      	ldr	r3, [r3, #4]
 8019ec0:	441a      	add	r2, r3
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	685b      	ldr	r3, [r3, #4]
 8019ed2:	68ba      	ldr	r2, [r7, #8]
 8019ed4:	441a      	add	r2, r3
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	429a      	cmp	r2, r3
 8019edc:	d118      	bne.n	8019f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	681a      	ldr	r2, [r3, #0]
 8019ee2:	4b15      	ldr	r3, [pc, #84]	; (8019f38 <prvInsertBlockIntoFreeList+0xb0>)
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	429a      	cmp	r2, r3
 8019ee8:	d00d      	beq.n	8019f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	685a      	ldr	r2, [r3, #4]
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	685b      	ldr	r3, [r3, #4]
 8019ef4:	441a      	add	r2, r3
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	681a      	ldr	r2, [r3, #0]
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	601a      	str	r2, [r3, #0]
 8019f04:	e008      	b.n	8019f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019f06:	4b0c      	ldr	r3, [pc, #48]	; (8019f38 <prvInsertBlockIntoFreeList+0xb0>)
 8019f08:	681a      	ldr	r2, [r3, #0]
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	601a      	str	r2, [r3, #0]
 8019f0e:	e003      	b.n	8019f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	681a      	ldr	r2, [r3, #0]
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019f18:	68fa      	ldr	r2, [r7, #12]
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	429a      	cmp	r2, r3
 8019f1e:	d002      	beq.n	8019f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	687a      	ldr	r2, [r7, #4]
 8019f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019f26:	bf00      	nop
 8019f28:	3714      	adds	r7, #20
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f30:	4770      	bx	lr
 8019f32:	bf00      	nop
 8019f34:	2400690c 	.word	0x2400690c
 8019f38:	24006914 	.word	0x24006914

08019f3c <__errno>:
 8019f3c:	4b01      	ldr	r3, [pc, #4]	; (8019f44 <__errno+0x8>)
 8019f3e:	6818      	ldr	r0, [r3, #0]
 8019f40:	4770      	bx	lr
 8019f42:	bf00      	nop
 8019f44:	240000a4 	.word	0x240000a4

08019f48 <__libc_init_array>:
 8019f48:	b570      	push	{r4, r5, r6, lr}
 8019f4a:	4d0d      	ldr	r5, [pc, #52]	; (8019f80 <__libc_init_array+0x38>)
 8019f4c:	4c0d      	ldr	r4, [pc, #52]	; (8019f84 <__libc_init_array+0x3c>)
 8019f4e:	1b64      	subs	r4, r4, r5
 8019f50:	10a4      	asrs	r4, r4, #2
 8019f52:	2600      	movs	r6, #0
 8019f54:	42a6      	cmp	r6, r4
 8019f56:	d109      	bne.n	8019f6c <__libc_init_array+0x24>
 8019f58:	4d0b      	ldr	r5, [pc, #44]	; (8019f88 <__libc_init_array+0x40>)
 8019f5a:	4c0c      	ldr	r4, [pc, #48]	; (8019f8c <__libc_init_array+0x44>)
 8019f5c:	f000 fd2c 	bl	801a9b8 <_init>
 8019f60:	1b64      	subs	r4, r4, r5
 8019f62:	10a4      	asrs	r4, r4, #2
 8019f64:	2600      	movs	r6, #0
 8019f66:	42a6      	cmp	r6, r4
 8019f68:	d105      	bne.n	8019f76 <__libc_init_array+0x2e>
 8019f6a:	bd70      	pop	{r4, r5, r6, pc}
 8019f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f70:	4798      	blx	r3
 8019f72:	3601      	adds	r6, #1
 8019f74:	e7ee      	b.n	8019f54 <__libc_init_array+0xc>
 8019f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f7a:	4798      	blx	r3
 8019f7c:	3601      	adds	r6, #1
 8019f7e:	e7f2      	b.n	8019f66 <__libc_init_array+0x1e>
 8019f80:	0801ae70 	.word	0x0801ae70
 8019f84:	0801ae70 	.word	0x0801ae70
 8019f88:	0801ae70 	.word	0x0801ae70
 8019f8c:	0801ae74 	.word	0x0801ae74

08019f90 <memcpy>:
 8019f90:	440a      	add	r2, r1
 8019f92:	4291      	cmp	r1, r2
 8019f94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019f98:	d100      	bne.n	8019f9c <memcpy+0xc>
 8019f9a:	4770      	bx	lr
 8019f9c:	b510      	push	{r4, lr}
 8019f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019fa6:	4291      	cmp	r1, r2
 8019fa8:	d1f9      	bne.n	8019f9e <memcpy+0xe>
 8019faa:	bd10      	pop	{r4, pc}

08019fac <memset>:
 8019fac:	4402      	add	r2, r0
 8019fae:	4603      	mov	r3, r0
 8019fb0:	4293      	cmp	r3, r2
 8019fb2:	d100      	bne.n	8019fb6 <memset+0xa>
 8019fb4:	4770      	bx	lr
 8019fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8019fba:	e7f9      	b.n	8019fb0 <memset+0x4>

08019fbc <_puts_r>:
 8019fbc:	b570      	push	{r4, r5, r6, lr}
 8019fbe:	460e      	mov	r6, r1
 8019fc0:	4605      	mov	r5, r0
 8019fc2:	b118      	cbz	r0, 8019fcc <_puts_r+0x10>
 8019fc4:	6983      	ldr	r3, [r0, #24]
 8019fc6:	b90b      	cbnz	r3, 8019fcc <_puts_r+0x10>
 8019fc8:	f000 fa48 	bl	801a45c <__sinit>
 8019fcc:	69ab      	ldr	r3, [r5, #24]
 8019fce:	68ac      	ldr	r4, [r5, #8]
 8019fd0:	b913      	cbnz	r3, 8019fd8 <_puts_r+0x1c>
 8019fd2:	4628      	mov	r0, r5
 8019fd4:	f000 fa42 	bl	801a45c <__sinit>
 8019fd8:	4b2c      	ldr	r3, [pc, #176]	; (801a08c <_puts_r+0xd0>)
 8019fda:	429c      	cmp	r4, r3
 8019fdc:	d120      	bne.n	801a020 <_puts_r+0x64>
 8019fde:	686c      	ldr	r4, [r5, #4]
 8019fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019fe2:	07db      	lsls	r3, r3, #31
 8019fe4:	d405      	bmi.n	8019ff2 <_puts_r+0x36>
 8019fe6:	89a3      	ldrh	r3, [r4, #12]
 8019fe8:	0598      	lsls	r0, r3, #22
 8019fea:	d402      	bmi.n	8019ff2 <_puts_r+0x36>
 8019fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019fee:	f000 fad3 	bl	801a598 <__retarget_lock_acquire_recursive>
 8019ff2:	89a3      	ldrh	r3, [r4, #12]
 8019ff4:	0719      	lsls	r1, r3, #28
 8019ff6:	d51d      	bpl.n	801a034 <_puts_r+0x78>
 8019ff8:	6923      	ldr	r3, [r4, #16]
 8019ffa:	b1db      	cbz	r3, 801a034 <_puts_r+0x78>
 8019ffc:	3e01      	subs	r6, #1
 8019ffe:	68a3      	ldr	r3, [r4, #8]
 801a000:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a004:	3b01      	subs	r3, #1
 801a006:	60a3      	str	r3, [r4, #8]
 801a008:	bb39      	cbnz	r1, 801a05a <_puts_r+0x9e>
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	da38      	bge.n	801a080 <_puts_r+0xc4>
 801a00e:	4622      	mov	r2, r4
 801a010:	210a      	movs	r1, #10
 801a012:	4628      	mov	r0, r5
 801a014:	f000 f848 	bl	801a0a8 <__swbuf_r>
 801a018:	3001      	adds	r0, #1
 801a01a:	d011      	beq.n	801a040 <_puts_r+0x84>
 801a01c:	250a      	movs	r5, #10
 801a01e:	e011      	b.n	801a044 <_puts_r+0x88>
 801a020:	4b1b      	ldr	r3, [pc, #108]	; (801a090 <_puts_r+0xd4>)
 801a022:	429c      	cmp	r4, r3
 801a024:	d101      	bne.n	801a02a <_puts_r+0x6e>
 801a026:	68ac      	ldr	r4, [r5, #8]
 801a028:	e7da      	b.n	8019fe0 <_puts_r+0x24>
 801a02a:	4b1a      	ldr	r3, [pc, #104]	; (801a094 <_puts_r+0xd8>)
 801a02c:	429c      	cmp	r4, r3
 801a02e:	bf08      	it	eq
 801a030:	68ec      	ldreq	r4, [r5, #12]
 801a032:	e7d5      	b.n	8019fe0 <_puts_r+0x24>
 801a034:	4621      	mov	r1, r4
 801a036:	4628      	mov	r0, r5
 801a038:	f000 f888 	bl	801a14c <__swsetup_r>
 801a03c:	2800      	cmp	r0, #0
 801a03e:	d0dd      	beq.n	8019ffc <_puts_r+0x40>
 801a040:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a044:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a046:	07da      	lsls	r2, r3, #31
 801a048:	d405      	bmi.n	801a056 <_puts_r+0x9a>
 801a04a:	89a3      	ldrh	r3, [r4, #12]
 801a04c:	059b      	lsls	r3, r3, #22
 801a04e:	d402      	bmi.n	801a056 <_puts_r+0x9a>
 801a050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a052:	f000 faa2 	bl	801a59a <__retarget_lock_release_recursive>
 801a056:	4628      	mov	r0, r5
 801a058:	bd70      	pop	{r4, r5, r6, pc}
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	da04      	bge.n	801a068 <_puts_r+0xac>
 801a05e:	69a2      	ldr	r2, [r4, #24]
 801a060:	429a      	cmp	r2, r3
 801a062:	dc06      	bgt.n	801a072 <_puts_r+0xb6>
 801a064:	290a      	cmp	r1, #10
 801a066:	d004      	beq.n	801a072 <_puts_r+0xb6>
 801a068:	6823      	ldr	r3, [r4, #0]
 801a06a:	1c5a      	adds	r2, r3, #1
 801a06c:	6022      	str	r2, [r4, #0]
 801a06e:	7019      	strb	r1, [r3, #0]
 801a070:	e7c5      	b.n	8019ffe <_puts_r+0x42>
 801a072:	4622      	mov	r2, r4
 801a074:	4628      	mov	r0, r5
 801a076:	f000 f817 	bl	801a0a8 <__swbuf_r>
 801a07a:	3001      	adds	r0, #1
 801a07c:	d1bf      	bne.n	8019ffe <_puts_r+0x42>
 801a07e:	e7df      	b.n	801a040 <_puts_r+0x84>
 801a080:	6823      	ldr	r3, [r4, #0]
 801a082:	250a      	movs	r5, #10
 801a084:	1c5a      	adds	r2, r3, #1
 801a086:	6022      	str	r2, [r4, #0]
 801a088:	701d      	strb	r5, [r3, #0]
 801a08a:	e7db      	b.n	801a044 <_puts_r+0x88>
 801a08c:	0801ae28 	.word	0x0801ae28
 801a090:	0801ae48 	.word	0x0801ae48
 801a094:	0801ae08 	.word	0x0801ae08

0801a098 <puts>:
 801a098:	4b02      	ldr	r3, [pc, #8]	; (801a0a4 <puts+0xc>)
 801a09a:	4601      	mov	r1, r0
 801a09c:	6818      	ldr	r0, [r3, #0]
 801a09e:	f7ff bf8d 	b.w	8019fbc <_puts_r>
 801a0a2:	bf00      	nop
 801a0a4:	240000a4 	.word	0x240000a4

0801a0a8 <__swbuf_r>:
 801a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0aa:	460e      	mov	r6, r1
 801a0ac:	4614      	mov	r4, r2
 801a0ae:	4605      	mov	r5, r0
 801a0b0:	b118      	cbz	r0, 801a0ba <__swbuf_r+0x12>
 801a0b2:	6983      	ldr	r3, [r0, #24]
 801a0b4:	b90b      	cbnz	r3, 801a0ba <__swbuf_r+0x12>
 801a0b6:	f000 f9d1 	bl	801a45c <__sinit>
 801a0ba:	4b21      	ldr	r3, [pc, #132]	; (801a140 <__swbuf_r+0x98>)
 801a0bc:	429c      	cmp	r4, r3
 801a0be:	d12b      	bne.n	801a118 <__swbuf_r+0x70>
 801a0c0:	686c      	ldr	r4, [r5, #4]
 801a0c2:	69a3      	ldr	r3, [r4, #24]
 801a0c4:	60a3      	str	r3, [r4, #8]
 801a0c6:	89a3      	ldrh	r3, [r4, #12]
 801a0c8:	071a      	lsls	r2, r3, #28
 801a0ca:	d52f      	bpl.n	801a12c <__swbuf_r+0x84>
 801a0cc:	6923      	ldr	r3, [r4, #16]
 801a0ce:	b36b      	cbz	r3, 801a12c <__swbuf_r+0x84>
 801a0d0:	6923      	ldr	r3, [r4, #16]
 801a0d2:	6820      	ldr	r0, [r4, #0]
 801a0d4:	1ac0      	subs	r0, r0, r3
 801a0d6:	6963      	ldr	r3, [r4, #20]
 801a0d8:	b2f6      	uxtb	r6, r6
 801a0da:	4283      	cmp	r3, r0
 801a0dc:	4637      	mov	r7, r6
 801a0de:	dc04      	bgt.n	801a0ea <__swbuf_r+0x42>
 801a0e0:	4621      	mov	r1, r4
 801a0e2:	4628      	mov	r0, r5
 801a0e4:	f000 f926 	bl	801a334 <_fflush_r>
 801a0e8:	bb30      	cbnz	r0, 801a138 <__swbuf_r+0x90>
 801a0ea:	68a3      	ldr	r3, [r4, #8]
 801a0ec:	3b01      	subs	r3, #1
 801a0ee:	60a3      	str	r3, [r4, #8]
 801a0f0:	6823      	ldr	r3, [r4, #0]
 801a0f2:	1c5a      	adds	r2, r3, #1
 801a0f4:	6022      	str	r2, [r4, #0]
 801a0f6:	701e      	strb	r6, [r3, #0]
 801a0f8:	6963      	ldr	r3, [r4, #20]
 801a0fa:	3001      	adds	r0, #1
 801a0fc:	4283      	cmp	r3, r0
 801a0fe:	d004      	beq.n	801a10a <__swbuf_r+0x62>
 801a100:	89a3      	ldrh	r3, [r4, #12]
 801a102:	07db      	lsls	r3, r3, #31
 801a104:	d506      	bpl.n	801a114 <__swbuf_r+0x6c>
 801a106:	2e0a      	cmp	r6, #10
 801a108:	d104      	bne.n	801a114 <__swbuf_r+0x6c>
 801a10a:	4621      	mov	r1, r4
 801a10c:	4628      	mov	r0, r5
 801a10e:	f000 f911 	bl	801a334 <_fflush_r>
 801a112:	b988      	cbnz	r0, 801a138 <__swbuf_r+0x90>
 801a114:	4638      	mov	r0, r7
 801a116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a118:	4b0a      	ldr	r3, [pc, #40]	; (801a144 <__swbuf_r+0x9c>)
 801a11a:	429c      	cmp	r4, r3
 801a11c:	d101      	bne.n	801a122 <__swbuf_r+0x7a>
 801a11e:	68ac      	ldr	r4, [r5, #8]
 801a120:	e7cf      	b.n	801a0c2 <__swbuf_r+0x1a>
 801a122:	4b09      	ldr	r3, [pc, #36]	; (801a148 <__swbuf_r+0xa0>)
 801a124:	429c      	cmp	r4, r3
 801a126:	bf08      	it	eq
 801a128:	68ec      	ldreq	r4, [r5, #12]
 801a12a:	e7ca      	b.n	801a0c2 <__swbuf_r+0x1a>
 801a12c:	4621      	mov	r1, r4
 801a12e:	4628      	mov	r0, r5
 801a130:	f000 f80c 	bl	801a14c <__swsetup_r>
 801a134:	2800      	cmp	r0, #0
 801a136:	d0cb      	beq.n	801a0d0 <__swbuf_r+0x28>
 801a138:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a13c:	e7ea      	b.n	801a114 <__swbuf_r+0x6c>
 801a13e:	bf00      	nop
 801a140:	0801ae28 	.word	0x0801ae28
 801a144:	0801ae48 	.word	0x0801ae48
 801a148:	0801ae08 	.word	0x0801ae08

0801a14c <__swsetup_r>:
 801a14c:	4b32      	ldr	r3, [pc, #200]	; (801a218 <__swsetup_r+0xcc>)
 801a14e:	b570      	push	{r4, r5, r6, lr}
 801a150:	681d      	ldr	r5, [r3, #0]
 801a152:	4606      	mov	r6, r0
 801a154:	460c      	mov	r4, r1
 801a156:	b125      	cbz	r5, 801a162 <__swsetup_r+0x16>
 801a158:	69ab      	ldr	r3, [r5, #24]
 801a15a:	b913      	cbnz	r3, 801a162 <__swsetup_r+0x16>
 801a15c:	4628      	mov	r0, r5
 801a15e:	f000 f97d 	bl	801a45c <__sinit>
 801a162:	4b2e      	ldr	r3, [pc, #184]	; (801a21c <__swsetup_r+0xd0>)
 801a164:	429c      	cmp	r4, r3
 801a166:	d10f      	bne.n	801a188 <__swsetup_r+0x3c>
 801a168:	686c      	ldr	r4, [r5, #4]
 801a16a:	89a3      	ldrh	r3, [r4, #12]
 801a16c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a170:	0719      	lsls	r1, r3, #28
 801a172:	d42c      	bmi.n	801a1ce <__swsetup_r+0x82>
 801a174:	06dd      	lsls	r5, r3, #27
 801a176:	d411      	bmi.n	801a19c <__swsetup_r+0x50>
 801a178:	2309      	movs	r3, #9
 801a17a:	6033      	str	r3, [r6, #0]
 801a17c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a180:	81a3      	strh	r3, [r4, #12]
 801a182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a186:	e03e      	b.n	801a206 <__swsetup_r+0xba>
 801a188:	4b25      	ldr	r3, [pc, #148]	; (801a220 <__swsetup_r+0xd4>)
 801a18a:	429c      	cmp	r4, r3
 801a18c:	d101      	bne.n	801a192 <__swsetup_r+0x46>
 801a18e:	68ac      	ldr	r4, [r5, #8]
 801a190:	e7eb      	b.n	801a16a <__swsetup_r+0x1e>
 801a192:	4b24      	ldr	r3, [pc, #144]	; (801a224 <__swsetup_r+0xd8>)
 801a194:	429c      	cmp	r4, r3
 801a196:	bf08      	it	eq
 801a198:	68ec      	ldreq	r4, [r5, #12]
 801a19a:	e7e6      	b.n	801a16a <__swsetup_r+0x1e>
 801a19c:	0758      	lsls	r0, r3, #29
 801a19e:	d512      	bpl.n	801a1c6 <__swsetup_r+0x7a>
 801a1a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a1a2:	b141      	cbz	r1, 801a1b6 <__swsetup_r+0x6a>
 801a1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1a8:	4299      	cmp	r1, r3
 801a1aa:	d002      	beq.n	801a1b2 <__swsetup_r+0x66>
 801a1ac:	4630      	mov	r0, r6
 801a1ae:	f000 fa5b 	bl	801a668 <_free_r>
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	6363      	str	r3, [r4, #52]	; 0x34
 801a1b6:	89a3      	ldrh	r3, [r4, #12]
 801a1b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a1bc:	81a3      	strh	r3, [r4, #12]
 801a1be:	2300      	movs	r3, #0
 801a1c0:	6063      	str	r3, [r4, #4]
 801a1c2:	6923      	ldr	r3, [r4, #16]
 801a1c4:	6023      	str	r3, [r4, #0]
 801a1c6:	89a3      	ldrh	r3, [r4, #12]
 801a1c8:	f043 0308 	orr.w	r3, r3, #8
 801a1cc:	81a3      	strh	r3, [r4, #12]
 801a1ce:	6923      	ldr	r3, [r4, #16]
 801a1d0:	b94b      	cbnz	r3, 801a1e6 <__swsetup_r+0x9a>
 801a1d2:	89a3      	ldrh	r3, [r4, #12]
 801a1d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a1d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a1dc:	d003      	beq.n	801a1e6 <__swsetup_r+0x9a>
 801a1de:	4621      	mov	r1, r4
 801a1e0:	4630      	mov	r0, r6
 801a1e2:	f000 fa01 	bl	801a5e8 <__smakebuf_r>
 801a1e6:	89a0      	ldrh	r0, [r4, #12]
 801a1e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1ec:	f010 0301 	ands.w	r3, r0, #1
 801a1f0:	d00a      	beq.n	801a208 <__swsetup_r+0xbc>
 801a1f2:	2300      	movs	r3, #0
 801a1f4:	60a3      	str	r3, [r4, #8]
 801a1f6:	6963      	ldr	r3, [r4, #20]
 801a1f8:	425b      	negs	r3, r3
 801a1fa:	61a3      	str	r3, [r4, #24]
 801a1fc:	6923      	ldr	r3, [r4, #16]
 801a1fe:	b943      	cbnz	r3, 801a212 <__swsetup_r+0xc6>
 801a200:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a204:	d1ba      	bne.n	801a17c <__swsetup_r+0x30>
 801a206:	bd70      	pop	{r4, r5, r6, pc}
 801a208:	0781      	lsls	r1, r0, #30
 801a20a:	bf58      	it	pl
 801a20c:	6963      	ldrpl	r3, [r4, #20]
 801a20e:	60a3      	str	r3, [r4, #8]
 801a210:	e7f4      	b.n	801a1fc <__swsetup_r+0xb0>
 801a212:	2000      	movs	r0, #0
 801a214:	e7f7      	b.n	801a206 <__swsetup_r+0xba>
 801a216:	bf00      	nop
 801a218:	240000a4 	.word	0x240000a4
 801a21c:	0801ae28 	.word	0x0801ae28
 801a220:	0801ae48 	.word	0x0801ae48
 801a224:	0801ae08 	.word	0x0801ae08

0801a228 <__sflush_r>:
 801a228:	898a      	ldrh	r2, [r1, #12]
 801a22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a22e:	4605      	mov	r5, r0
 801a230:	0710      	lsls	r0, r2, #28
 801a232:	460c      	mov	r4, r1
 801a234:	d458      	bmi.n	801a2e8 <__sflush_r+0xc0>
 801a236:	684b      	ldr	r3, [r1, #4]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	dc05      	bgt.n	801a248 <__sflush_r+0x20>
 801a23c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a23e:	2b00      	cmp	r3, #0
 801a240:	dc02      	bgt.n	801a248 <__sflush_r+0x20>
 801a242:	2000      	movs	r0, #0
 801a244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a24a:	2e00      	cmp	r6, #0
 801a24c:	d0f9      	beq.n	801a242 <__sflush_r+0x1a>
 801a24e:	2300      	movs	r3, #0
 801a250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a254:	682f      	ldr	r7, [r5, #0]
 801a256:	602b      	str	r3, [r5, #0]
 801a258:	d032      	beq.n	801a2c0 <__sflush_r+0x98>
 801a25a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a25c:	89a3      	ldrh	r3, [r4, #12]
 801a25e:	075a      	lsls	r2, r3, #29
 801a260:	d505      	bpl.n	801a26e <__sflush_r+0x46>
 801a262:	6863      	ldr	r3, [r4, #4]
 801a264:	1ac0      	subs	r0, r0, r3
 801a266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a268:	b10b      	cbz	r3, 801a26e <__sflush_r+0x46>
 801a26a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a26c:	1ac0      	subs	r0, r0, r3
 801a26e:	2300      	movs	r3, #0
 801a270:	4602      	mov	r2, r0
 801a272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a274:	6a21      	ldr	r1, [r4, #32]
 801a276:	4628      	mov	r0, r5
 801a278:	47b0      	blx	r6
 801a27a:	1c43      	adds	r3, r0, #1
 801a27c:	89a3      	ldrh	r3, [r4, #12]
 801a27e:	d106      	bne.n	801a28e <__sflush_r+0x66>
 801a280:	6829      	ldr	r1, [r5, #0]
 801a282:	291d      	cmp	r1, #29
 801a284:	d82c      	bhi.n	801a2e0 <__sflush_r+0xb8>
 801a286:	4a2a      	ldr	r2, [pc, #168]	; (801a330 <__sflush_r+0x108>)
 801a288:	40ca      	lsrs	r2, r1
 801a28a:	07d6      	lsls	r6, r2, #31
 801a28c:	d528      	bpl.n	801a2e0 <__sflush_r+0xb8>
 801a28e:	2200      	movs	r2, #0
 801a290:	6062      	str	r2, [r4, #4]
 801a292:	04d9      	lsls	r1, r3, #19
 801a294:	6922      	ldr	r2, [r4, #16]
 801a296:	6022      	str	r2, [r4, #0]
 801a298:	d504      	bpl.n	801a2a4 <__sflush_r+0x7c>
 801a29a:	1c42      	adds	r2, r0, #1
 801a29c:	d101      	bne.n	801a2a2 <__sflush_r+0x7a>
 801a29e:	682b      	ldr	r3, [r5, #0]
 801a2a0:	b903      	cbnz	r3, 801a2a4 <__sflush_r+0x7c>
 801a2a2:	6560      	str	r0, [r4, #84]	; 0x54
 801a2a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a2a6:	602f      	str	r7, [r5, #0]
 801a2a8:	2900      	cmp	r1, #0
 801a2aa:	d0ca      	beq.n	801a242 <__sflush_r+0x1a>
 801a2ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a2b0:	4299      	cmp	r1, r3
 801a2b2:	d002      	beq.n	801a2ba <__sflush_r+0x92>
 801a2b4:	4628      	mov	r0, r5
 801a2b6:	f000 f9d7 	bl	801a668 <_free_r>
 801a2ba:	2000      	movs	r0, #0
 801a2bc:	6360      	str	r0, [r4, #52]	; 0x34
 801a2be:	e7c1      	b.n	801a244 <__sflush_r+0x1c>
 801a2c0:	6a21      	ldr	r1, [r4, #32]
 801a2c2:	2301      	movs	r3, #1
 801a2c4:	4628      	mov	r0, r5
 801a2c6:	47b0      	blx	r6
 801a2c8:	1c41      	adds	r1, r0, #1
 801a2ca:	d1c7      	bne.n	801a25c <__sflush_r+0x34>
 801a2cc:	682b      	ldr	r3, [r5, #0]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d0c4      	beq.n	801a25c <__sflush_r+0x34>
 801a2d2:	2b1d      	cmp	r3, #29
 801a2d4:	d001      	beq.n	801a2da <__sflush_r+0xb2>
 801a2d6:	2b16      	cmp	r3, #22
 801a2d8:	d101      	bne.n	801a2de <__sflush_r+0xb6>
 801a2da:	602f      	str	r7, [r5, #0]
 801a2dc:	e7b1      	b.n	801a242 <__sflush_r+0x1a>
 801a2de:	89a3      	ldrh	r3, [r4, #12]
 801a2e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2e4:	81a3      	strh	r3, [r4, #12]
 801a2e6:	e7ad      	b.n	801a244 <__sflush_r+0x1c>
 801a2e8:	690f      	ldr	r7, [r1, #16]
 801a2ea:	2f00      	cmp	r7, #0
 801a2ec:	d0a9      	beq.n	801a242 <__sflush_r+0x1a>
 801a2ee:	0793      	lsls	r3, r2, #30
 801a2f0:	680e      	ldr	r6, [r1, #0]
 801a2f2:	bf08      	it	eq
 801a2f4:	694b      	ldreq	r3, [r1, #20]
 801a2f6:	600f      	str	r7, [r1, #0]
 801a2f8:	bf18      	it	ne
 801a2fa:	2300      	movne	r3, #0
 801a2fc:	eba6 0807 	sub.w	r8, r6, r7
 801a300:	608b      	str	r3, [r1, #8]
 801a302:	f1b8 0f00 	cmp.w	r8, #0
 801a306:	dd9c      	ble.n	801a242 <__sflush_r+0x1a>
 801a308:	6a21      	ldr	r1, [r4, #32]
 801a30a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a30c:	4643      	mov	r3, r8
 801a30e:	463a      	mov	r2, r7
 801a310:	4628      	mov	r0, r5
 801a312:	47b0      	blx	r6
 801a314:	2800      	cmp	r0, #0
 801a316:	dc06      	bgt.n	801a326 <__sflush_r+0xfe>
 801a318:	89a3      	ldrh	r3, [r4, #12]
 801a31a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a31e:	81a3      	strh	r3, [r4, #12]
 801a320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a324:	e78e      	b.n	801a244 <__sflush_r+0x1c>
 801a326:	4407      	add	r7, r0
 801a328:	eba8 0800 	sub.w	r8, r8, r0
 801a32c:	e7e9      	b.n	801a302 <__sflush_r+0xda>
 801a32e:	bf00      	nop
 801a330:	20400001 	.word	0x20400001

0801a334 <_fflush_r>:
 801a334:	b538      	push	{r3, r4, r5, lr}
 801a336:	690b      	ldr	r3, [r1, #16]
 801a338:	4605      	mov	r5, r0
 801a33a:	460c      	mov	r4, r1
 801a33c:	b913      	cbnz	r3, 801a344 <_fflush_r+0x10>
 801a33e:	2500      	movs	r5, #0
 801a340:	4628      	mov	r0, r5
 801a342:	bd38      	pop	{r3, r4, r5, pc}
 801a344:	b118      	cbz	r0, 801a34e <_fflush_r+0x1a>
 801a346:	6983      	ldr	r3, [r0, #24]
 801a348:	b90b      	cbnz	r3, 801a34e <_fflush_r+0x1a>
 801a34a:	f000 f887 	bl	801a45c <__sinit>
 801a34e:	4b14      	ldr	r3, [pc, #80]	; (801a3a0 <_fflush_r+0x6c>)
 801a350:	429c      	cmp	r4, r3
 801a352:	d11b      	bne.n	801a38c <_fflush_r+0x58>
 801a354:	686c      	ldr	r4, [r5, #4]
 801a356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d0ef      	beq.n	801a33e <_fflush_r+0xa>
 801a35e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a360:	07d0      	lsls	r0, r2, #31
 801a362:	d404      	bmi.n	801a36e <_fflush_r+0x3a>
 801a364:	0599      	lsls	r1, r3, #22
 801a366:	d402      	bmi.n	801a36e <_fflush_r+0x3a>
 801a368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a36a:	f000 f915 	bl	801a598 <__retarget_lock_acquire_recursive>
 801a36e:	4628      	mov	r0, r5
 801a370:	4621      	mov	r1, r4
 801a372:	f7ff ff59 	bl	801a228 <__sflush_r>
 801a376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a378:	07da      	lsls	r2, r3, #31
 801a37a:	4605      	mov	r5, r0
 801a37c:	d4e0      	bmi.n	801a340 <_fflush_r+0xc>
 801a37e:	89a3      	ldrh	r3, [r4, #12]
 801a380:	059b      	lsls	r3, r3, #22
 801a382:	d4dd      	bmi.n	801a340 <_fflush_r+0xc>
 801a384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a386:	f000 f908 	bl	801a59a <__retarget_lock_release_recursive>
 801a38a:	e7d9      	b.n	801a340 <_fflush_r+0xc>
 801a38c:	4b05      	ldr	r3, [pc, #20]	; (801a3a4 <_fflush_r+0x70>)
 801a38e:	429c      	cmp	r4, r3
 801a390:	d101      	bne.n	801a396 <_fflush_r+0x62>
 801a392:	68ac      	ldr	r4, [r5, #8]
 801a394:	e7df      	b.n	801a356 <_fflush_r+0x22>
 801a396:	4b04      	ldr	r3, [pc, #16]	; (801a3a8 <_fflush_r+0x74>)
 801a398:	429c      	cmp	r4, r3
 801a39a:	bf08      	it	eq
 801a39c:	68ec      	ldreq	r4, [r5, #12]
 801a39e:	e7da      	b.n	801a356 <_fflush_r+0x22>
 801a3a0:	0801ae28 	.word	0x0801ae28
 801a3a4:	0801ae48 	.word	0x0801ae48
 801a3a8:	0801ae08 	.word	0x0801ae08

0801a3ac <std>:
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	b510      	push	{r4, lr}
 801a3b0:	4604      	mov	r4, r0
 801a3b2:	e9c0 3300 	strd	r3, r3, [r0]
 801a3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a3ba:	6083      	str	r3, [r0, #8]
 801a3bc:	8181      	strh	r1, [r0, #12]
 801a3be:	6643      	str	r3, [r0, #100]	; 0x64
 801a3c0:	81c2      	strh	r2, [r0, #14]
 801a3c2:	6183      	str	r3, [r0, #24]
 801a3c4:	4619      	mov	r1, r3
 801a3c6:	2208      	movs	r2, #8
 801a3c8:	305c      	adds	r0, #92	; 0x5c
 801a3ca:	f7ff fdef 	bl	8019fac <memset>
 801a3ce:	4b05      	ldr	r3, [pc, #20]	; (801a3e4 <std+0x38>)
 801a3d0:	6263      	str	r3, [r4, #36]	; 0x24
 801a3d2:	4b05      	ldr	r3, [pc, #20]	; (801a3e8 <std+0x3c>)
 801a3d4:	62a3      	str	r3, [r4, #40]	; 0x28
 801a3d6:	4b05      	ldr	r3, [pc, #20]	; (801a3ec <std+0x40>)
 801a3d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a3da:	4b05      	ldr	r3, [pc, #20]	; (801a3f0 <std+0x44>)
 801a3dc:	6224      	str	r4, [r4, #32]
 801a3de:	6323      	str	r3, [r4, #48]	; 0x30
 801a3e0:	bd10      	pop	{r4, pc}
 801a3e2:	bf00      	nop
 801a3e4:	0801a849 	.word	0x0801a849
 801a3e8:	0801a86b 	.word	0x0801a86b
 801a3ec:	0801a8a3 	.word	0x0801a8a3
 801a3f0:	0801a8c7 	.word	0x0801a8c7

0801a3f4 <_cleanup_r>:
 801a3f4:	4901      	ldr	r1, [pc, #4]	; (801a3fc <_cleanup_r+0x8>)
 801a3f6:	f000 b8af 	b.w	801a558 <_fwalk_reent>
 801a3fa:	bf00      	nop
 801a3fc:	0801a335 	.word	0x0801a335

0801a400 <__sfmoreglue>:
 801a400:	b570      	push	{r4, r5, r6, lr}
 801a402:	2268      	movs	r2, #104	; 0x68
 801a404:	1e4d      	subs	r5, r1, #1
 801a406:	4355      	muls	r5, r2
 801a408:	460e      	mov	r6, r1
 801a40a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a40e:	f000 f997 	bl	801a740 <_malloc_r>
 801a412:	4604      	mov	r4, r0
 801a414:	b140      	cbz	r0, 801a428 <__sfmoreglue+0x28>
 801a416:	2100      	movs	r1, #0
 801a418:	e9c0 1600 	strd	r1, r6, [r0]
 801a41c:	300c      	adds	r0, #12
 801a41e:	60a0      	str	r0, [r4, #8]
 801a420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a424:	f7ff fdc2 	bl	8019fac <memset>
 801a428:	4620      	mov	r0, r4
 801a42a:	bd70      	pop	{r4, r5, r6, pc}

0801a42c <__sfp_lock_acquire>:
 801a42c:	4801      	ldr	r0, [pc, #4]	; (801a434 <__sfp_lock_acquire+0x8>)
 801a42e:	f000 b8b3 	b.w	801a598 <__retarget_lock_acquire_recursive>
 801a432:	bf00      	nop
 801a434:	2400692d 	.word	0x2400692d

0801a438 <__sfp_lock_release>:
 801a438:	4801      	ldr	r0, [pc, #4]	; (801a440 <__sfp_lock_release+0x8>)
 801a43a:	f000 b8ae 	b.w	801a59a <__retarget_lock_release_recursive>
 801a43e:	bf00      	nop
 801a440:	2400692d 	.word	0x2400692d

0801a444 <__sinit_lock_acquire>:
 801a444:	4801      	ldr	r0, [pc, #4]	; (801a44c <__sinit_lock_acquire+0x8>)
 801a446:	f000 b8a7 	b.w	801a598 <__retarget_lock_acquire_recursive>
 801a44a:	bf00      	nop
 801a44c:	2400692e 	.word	0x2400692e

0801a450 <__sinit_lock_release>:
 801a450:	4801      	ldr	r0, [pc, #4]	; (801a458 <__sinit_lock_release+0x8>)
 801a452:	f000 b8a2 	b.w	801a59a <__retarget_lock_release_recursive>
 801a456:	bf00      	nop
 801a458:	2400692e 	.word	0x2400692e

0801a45c <__sinit>:
 801a45c:	b510      	push	{r4, lr}
 801a45e:	4604      	mov	r4, r0
 801a460:	f7ff fff0 	bl	801a444 <__sinit_lock_acquire>
 801a464:	69a3      	ldr	r3, [r4, #24]
 801a466:	b11b      	cbz	r3, 801a470 <__sinit+0x14>
 801a468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a46c:	f7ff bff0 	b.w	801a450 <__sinit_lock_release>
 801a470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a474:	6523      	str	r3, [r4, #80]	; 0x50
 801a476:	4b13      	ldr	r3, [pc, #76]	; (801a4c4 <__sinit+0x68>)
 801a478:	4a13      	ldr	r2, [pc, #76]	; (801a4c8 <__sinit+0x6c>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a47e:	42a3      	cmp	r3, r4
 801a480:	bf04      	itt	eq
 801a482:	2301      	moveq	r3, #1
 801a484:	61a3      	streq	r3, [r4, #24]
 801a486:	4620      	mov	r0, r4
 801a488:	f000 f820 	bl	801a4cc <__sfp>
 801a48c:	6060      	str	r0, [r4, #4]
 801a48e:	4620      	mov	r0, r4
 801a490:	f000 f81c 	bl	801a4cc <__sfp>
 801a494:	60a0      	str	r0, [r4, #8]
 801a496:	4620      	mov	r0, r4
 801a498:	f000 f818 	bl	801a4cc <__sfp>
 801a49c:	2200      	movs	r2, #0
 801a49e:	60e0      	str	r0, [r4, #12]
 801a4a0:	2104      	movs	r1, #4
 801a4a2:	6860      	ldr	r0, [r4, #4]
 801a4a4:	f7ff ff82 	bl	801a3ac <std>
 801a4a8:	68a0      	ldr	r0, [r4, #8]
 801a4aa:	2201      	movs	r2, #1
 801a4ac:	2109      	movs	r1, #9
 801a4ae:	f7ff ff7d 	bl	801a3ac <std>
 801a4b2:	68e0      	ldr	r0, [r4, #12]
 801a4b4:	2202      	movs	r2, #2
 801a4b6:	2112      	movs	r1, #18
 801a4b8:	f7ff ff78 	bl	801a3ac <std>
 801a4bc:	2301      	movs	r3, #1
 801a4be:	61a3      	str	r3, [r4, #24]
 801a4c0:	e7d2      	b.n	801a468 <__sinit+0xc>
 801a4c2:	bf00      	nop
 801a4c4:	0801ae04 	.word	0x0801ae04
 801a4c8:	0801a3f5 	.word	0x0801a3f5

0801a4cc <__sfp>:
 801a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ce:	4607      	mov	r7, r0
 801a4d0:	f7ff ffac 	bl	801a42c <__sfp_lock_acquire>
 801a4d4:	4b1e      	ldr	r3, [pc, #120]	; (801a550 <__sfp+0x84>)
 801a4d6:	681e      	ldr	r6, [r3, #0]
 801a4d8:	69b3      	ldr	r3, [r6, #24]
 801a4da:	b913      	cbnz	r3, 801a4e2 <__sfp+0x16>
 801a4dc:	4630      	mov	r0, r6
 801a4de:	f7ff ffbd 	bl	801a45c <__sinit>
 801a4e2:	3648      	adds	r6, #72	; 0x48
 801a4e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a4e8:	3b01      	subs	r3, #1
 801a4ea:	d503      	bpl.n	801a4f4 <__sfp+0x28>
 801a4ec:	6833      	ldr	r3, [r6, #0]
 801a4ee:	b30b      	cbz	r3, 801a534 <__sfp+0x68>
 801a4f0:	6836      	ldr	r6, [r6, #0]
 801a4f2:	e7f7      	b.n	801a4e4 <__sfp+0x18>
 801a4f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a4f8:	b9d5      	cbnz	r5, 801a530 <__sfp+0x64>
 801a4fa:	4b16      	ldr	r3, [pc, #88]	; (801a554 <__sfp+0x88>)
 801a4fc:	60e3      	str	r3, [r4, #12]
 801a4fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a502:	6665      	str	r5, [r4, #100]	; 0x64
 801a504:	f000 f847 	bl	801a596 <__retarget_lock_init_recursive>
 801a508:	f7ff ff96 	bl	801a438 <__sfp_lock_release>
 801a50c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a510:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a514:	6025      	str	r5, [r4, #0]
 801a516:	61a5      	str	r5, [r4, #24]
 801a518:	2208      	movs	r2, #8
 801a51a:	4629      	mov	r1, r5
 801a51c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a520:	f7ff fd44 	bl	8019fac <memset>
 801a524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a52c:	4620      	mov	r0, r4
 801a52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a530:	3468      	adds	r4, #104	; 0x68
 801a532:	e7d9      	b.n	801a4e8 <__sfp+0x1c>
 801a534:	2104      	movs	r1, #4
 801a536:	4638      	mov	r0, r7
 801a538:	f7ff ff62 	bl	801a400 <__sfmoreglue>
 801a53c:	4604      	mov	r4, r0
 801a53e:	6030      	str	r0, [r6, #0]
 801a540:	2800      	cmp	r0, #0
 801a542:	d1d5      	bne.n	801a4f0 <__sfp+0x24>
 801a544:	f7ff ff78 	bl	801a438 <__sfp_lock_release>
 801a548:	230c      	movs	r3, #12
 801a54a:	603b      	str	r3, [r7, #0]
 801a54c:	e7ee      	b.n	801a52c <__sfp+0x60>
 801a54e:	bf00      	nop
 801a550:	0801ae04 	.word	0x0801ae04
 801a554:	ffff0001 	.word	0xffff0001

0801a558 <_fwalk_reent>:
 801a558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a55c:	4606      	mov	r6, r0
 801a55e:	4688      	mov	r8, r1
 801a560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a564:	2700      	movs	r7, #0
 801a566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a56a:	f1b9 0901 	subs.w	r9, r9, #1
 801a56e:	d505      	bpl.n	801a57c <_fwalk_reent+0x24>
 801a570:	6824      	ldr	r4, [r4, #0]
 801a572:	2c00      	cmp	r4, #0
 801a574:	d1f7      	bne.n	801a566 <_fwalk_reent+0xe>
 801a576:	4638      	mov	r0, r7
 801a578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a57c:	89ab      	ldrh	r3, [r5, #12]
 801a57e:	2b01      	cmp	r3, #1
 801a580:	d907      	bls.n	801a592 <_fwalk_reent+0x3a>
 801a582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a586:	3301      	adds	r3, #1
 801a588:	d003      	beq.n	801a592 <_fwalk_reent+0x3a>
 801a58a:	4629      	mov	r1, r5
 801a58c:	4630      	mov	r0, r6
 801a58e:	47c0      	blx	r8
 801a590:	4307      	orrs	r7, r0
 801a592:	3568      	adds	r5, #104	; 0x68
 801a594:	e7e9      	b.n	801a56a <_fwalk_reent+0x12>

0801a596 <__retarget_lock_init_recursive>:
 801a596:	4770      	bx	lr

0801a598 <__retarget_lock_acquire_recursive>:
 801a598:	4770      	bx	lr

0801a59a <__retarget_lock_release_recursive>:
 801a59a:	4770      	bx	lr

0801a59c <__swhatbuf_r>:
 801a59c:	b570      	push	{r4, r5, r6, lr}
 801a59e:	460e      	mov	r6, r1
 801a5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5a4:	2900      	cmp	r1, #0
 801a5a6:	b096      	sub	sp, #88	; 0x58
 801a5a8:	4614      	mov	r4, r2
 801a5aa:	461d      	mov	r5, r3
 801a5ac:	da08      	bge.n	801a5c0 <__swhatbuf_r+0x24>
 801a5ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	602a      	str	r2, [r5, #0]
 801a5b6:	061a      	lsls	r2, r3, #24
 801a5b8:	d410      	bmi.n	801a5dc <__swhatbuf_r+0x40>
 801a5ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a5be:	e00e      	b.n	801a5de <__swhatbuf_r+0x42>
 801a5c0:	466a      	mov	r2, sp
 801a5c2:	f000 f9a7 	bl	801a914 <_fstat_r>
 801a5c6:	2800      	cmp	r0, #0
 801a5c8:	dbf1      	blt.n	801a5ae <__swhatbuf_r+0x12>
 801a5ca:	9a01      	ldr	r2, [sp, #4]
 801a5cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a5d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a5d4:	425a      	negs	r2, r3
 801a5d6:	415a      	adcs	r2, r3
 801a5d8:	602a      	str	r2, [r5, #0]
 801a5da:	e7ee      	b.n	801a5ba <__swhatbuf_r+0x1e>
 801a5dc:	2340      	movs	r3, #64	; 0x40
 801a5de:	2000      	movs	r0, #0
 801a5e0:	6023      	str	r3, [r4, #0]
 801a5e2:	b016      	add	sp, #88	; 0x58
 801a5e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a5e8 <__smakebuf_r>:
 801a5e8:	898b      	ldrh	r3, [r1, #12]
 801a5ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a5ec:	079d      	lsls	r5, r3, #30
 801a5ee:	4606      	mov	r6, r0
 801a5f0:	460c      	mov	r4, r1
 801a5f2:	d507      	bpl.n	801a604 <__smakebuf_r+0x1c>
 801a5f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a5f8:	6023      	str	r3, [r4, #0]
 801a5fa:	6123      	str	r3, [r4, #16]
 801a5fc:	2301      	movs	r3, #1
 801a5fe:	6163      	str	r3, [r4, #20]
 801a600:	b002      	add	sp, #8
 801a602:	bd70      	pop	{r4, r5, r6, pc}
 801a604:	ab01      	add	r3, sp, #4
 801a606:	466a      	mov	r2, sp
 801a608:	f7ff ffc8 	bl	801a59c <__swhatbuf_r>
 801a60c:	9900      	ldr	r1, [sp, #0]
 801a60e:	4605      	mov	r5, r0
 801a610:	4630      	mov	r0, r6
 801a612:	f000 f895 	bl	801a740 <_malloc_r>
 801a616:	b948      	cbnz	r0, 801a62c <__smakebuf_r+0x44>
 801a618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a61c:	059a      	lsls	r2, r3, #22
 801a61e:	d4ef      	bmi.n	801a600 <__smakebuf_r+0x18>
 801a620:	f023 0303 	bic.w	r3, r3, #3
 801a624:	f043 0302 	orr.w	r3, r3, #2
 801a628:	81a3      	strh	r3, [r4, #12]
 801a62a:	e7e3      	b.n	801a5f4 <__smakebuf_r+0xc>
 801a62c:	4b0d      	ldr	r3, [pc, #52]	; (801a664 <__smakebuf_r+0x7c>)
 801a62e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a630:	89a3      	ldrh	r3, [r4, #12]
 801a632:	6020      	str	r0, [r4, #0]
 801a634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a638:	81a3      	strh	r3, [r4, #12]
 801a63a:	9b00      	ldr	r3, [sp, #0]
 801a63c:	6163      	str	r3, [r4, #20]
 801a63e:	9b01      	ldr	r3, [sp, #4]
 801a640:	6120      	str	r0, [r4, #16]
 801a642:	b15b      	cbz	r3, 801a65c <__smakebuf_r+0x74>
 801a644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a648:	4630      	mov	r0, r6
 801a64a:	f000 f975 	bl	801a938 <_isatty_r>
 801a64e:	b128      	cbz	r0, 801a65c <__smakebuf_r+0x74>
 801a650:	89a3      	ldrh	r3, [r4, #12]
 801a652:	f023 0303 	bic.w	r3, r3, #3
 801a656:	f043 0301 	orr.w	r3, r3, #1
 801a65a:	81a3      	strh	r3, [r4, #12]
 801a65c:	89a0      	ldrh	r0, [r4, #12]
 801a65e:	4305      	orrs	r5, r0
 801a660:	81a5      	strh	r5, [r4, #12]
 801a662:	e7cd      	b.n	801a600 <__smakebuf_r+0x18>
 801a664:	0801a3f5 	.word	0x0801a3f5

0801a668 <_free_r>:
 801a668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a66a:	2900      	cmp	r1, #0
 801a66c:	d044      	beq.n	801a6f8 <_free_r+0x90>
 801a66e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a672:	9001      	str	r0, [sp, #4]
 801a674:	2b00      	cmp	r3, #0
 801a676:	f1a1 0404 	sub.w	r4, r1, #4
 801a67a:	bfb8      	it	lt
 801a67c:	18e4      	addlt	r4, r4, r3
 801a67e:	f000 f97d 	bl	801a97c <__malloc_lock>
 801a682:	4a1e      	ldr	r2, [pc, #120]	; (801a6fc <_free_r+0x94>)
 801a684:	9801      	ldr	r0, [sp, #4]
 801a686:	6813      	ldr	r3, [r2, #0]
 801a688:	b933      	cbnz	r3, 801a698 <_free_r+0x30>
 801a68a:	6063      	str	r3, [r4, #4]
 801a68c:	6014      	str	r4, [r2, #0]
 801a68e:	b003      	add	sp, #12
 801a690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a694:	f000 b978 	b.w	801a988 <__malloc_unlock>
 801a698:	42a3      	cmp	r3, r4
 801a69a:	d908      	bls.n	801a6ae <_free_r+0x46>
 801a69c:	6825      	ldr	r5, [r4, #0]
 801a69e:	1961      	adds	r1, r4, r5
 801a6a0:	428b      	cmp	r3, r1
 801a6a2:	bf01      	itttt	eq
 801a6a4:	6819      	ldreq	r1, [r3, #0]
 801a6a6:	685b      	ldreq	r3, [r3, #4]
 801a6a8:	1949      	addeq	r1, r1, r5
 801a6aa:	6021      	streq	r1, [r4, #0]
 801a6ac:	e7ed      	b.n	801a68a <_free_r+0x22>
 801a6ae:	461a      	mov	r2, r3
 801a6b0:	685b      	ldr	r3, [r3, #4]
 801a6b2:	b10b      	cbz	r3, 801a6b8 <_free_r+0x50>
 801a6b4:	42a3      	cmp	r3, r4
 801a6b6:	d9fa      	bls.n	801a6ae <_free_r+0x46>
 801a6b8:	6811      	ldr	r1, [r2, #0]
 801a6ba:	1855      	adds	r5, r2, r1
 801a6bc:	42a5      	cmp	r5, r4
 801a6be:	d10b      	bne.n	801a6d8 <_free_r+0x70>
 801a6c0:	6824      	ldr	r4, [r4, #0]
 801a6c2:	4421      	add	r1, r4
 801a6c4:	1854      	adds	r4, r2, r1
 801a6c6:	42a3      	cmp	r3, r4
 801a6c8:	6011      	str	r1, [r2, #0]
 801a6ca:	d1e0      	bne.n	801a68e <_free_r+0x26>
 801a6cc:	681c      	ldr	r4, [r3, #0]
 801a6ce:	685b      	ldr	r3, [r3, #4]
 801a6d0:	6053      	str	r3, [r2, #4]
 801a6d2:	4421      	add	r1, r4
 801a6d4:	6011      	str	r1, [r2, #0]
 801a6d6:	e7da      	b.n	801a68e <_free_r+0x26>
 801a6d8:	d902      	bls.n	801a6e0 <_free_r+0x78>
 801a6da:	230c      	movs	r3, #12
 801a6dc:	6003      	str	r3, [r0, #0]
 801a6de:	e7d6      	b.n	801a68e <_free_r+0x26>
 801a6e0:	6825      	ldr	r5, [r4, #0]
 801a6e2:	1961      	adds	r1, r4, r5
 801a6e4:	428b      	cmp	r3, r1
 801a6e6:	bf04      	itt	eq
 801a6e8:	6819      	ldreq	r1, [r3, #0]
 801a6ea:	685b      	ldreq	r3, [r3, #4]
 801a6ec:	6063      	str	r3, [r4, #4]
 801a6ee:	bf04      	itt	eq
 801a6f0:	1949      	addeq	r1, r1, r5
 801a6f2:	6021      	streq	r1, [r4, #0]
 801a6f4:	6054      	str	r4, [r2, #4]
 801a6f6:	e7ca      	b.n	801a68e <_free_r+0x26>
 801a6f8:	b003      	add	sp, #12
 801a6fa:	bd30      	pop	{r4, r5, pc}
 801a6fc:	24006930 	.word	0x24006930

0801a700 <sbrk_aligned>:
 801a700:	b570      	push	{r4, r5, r6, lr}
 801a702:	4e0e      	ldr	r6, [pc, #56]	; (801a73c <sbrk_aligned+0x3c>)
 801a704:	460c      	mov	r4, r1
 801a706:	6831      	ldr	r1, [r6, #0]
 801a708:	4605      	mov	r5, r0
 801a70a:	b911      	cbnz	r1, 801a712 <sbrk_aligned+0x12>
 801a70c:	f000 f88c 	bl	801a828 <_sbrk_r>
 801a710:	6030      	str	r0, [r6, #0]
 801a712:	4621      	mov	r1, r4
 801a714:	4628      	mov	r0, r5
 801a716:	f000 f887 	bl	801a828 <_sbrk_r>
 801a71a:	1c43      	adds	r3, r0, #1
 801a71c:	d00a      	beq.n	801a734 <sbrk_aligned+0x34>
 801a71e:	1cc4      	adds	r4, r0, #3
 801a720:	f024 0403 	bic.w	r4, r4, #3
 801a724:	42a0      	cmp	r0, r4
 801a726:	d007      	beq.n	801a738 <sbrk_aligned+0x38>
 801a728:	1a21      	subs	r1, r4, r0
 801a72a:	4628      	mov	r0, r5
 801a72c:	f000 f87c 	bl	801a828 <_sbrk_r>
 801a730:	3001      	adds	r0, #1
 801a732:	d101      	bne.n	801a738 <sbrk_aligned+0x38>
 801a734:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a738:	4620      	mov	r0, r4
 801a73a:	bd70      	pop	{r4, r5, r6, pc}
 801a73c:	24006934 	.word	0x24006934

0801a740 <_malloc_r>:
 801a740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a744:	1ccd      	adds	r5, r1, #3
 801a746:	f025 0503 	bic.w	r5, r5, #3
 801a74a:	3508      	adds	r5, #8
 801a74c:	2d0c      	cmp	r5, #12
 801a74e:	bf38      	it	cc
 801a750:	250c      	movcc	r5, #12
 801a752:	2d00      	cmp	r5, #0
 801a754:	4607      	mov	r7, r0
 801a756:	db01      	blt.n	801a75c <_malloc_r+0x1c>
 801a758:	42a9      	cmp	r1, r5
 801a75a:	d905      	bls.n	801a768 <_malloc_r+0x28>
 801a75c:	230c      	movs	r3, #12
 801a75e:	603b      	str	r3, [r7, #0]
 801a760:	2600      	movs	r6, #0
 801a762:	4630      	mov	r0, r6
 801a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a768:	4e2e      	ldr	r6, [pc, #184]	; (801a824 <_malloc_r+0xe4>)
 801a76a:	f000 f907 	bl	801a97c <__malloc_lock>
 801a76e:	6833      	ldr	r3, [r6, #0]
 801a770:	461c      	mov	r4, r3
 801a772:	bb34      	cbnz	r4, 801a7c2 <_malloc_r+0x82>
 801a774:	4629      	mov	r1, r5
 801a776:	4638      	mov	r0, r7
 801a778:	f7ff ffc2 	bl	801a700 <sbrk_aligned>
 801a77c:	1c43      	adds	r3, r0, #1
 801a77e:	4604      	mov	r4, r0
 801a780:	d14d      	bne.n	801a81e <_malloc_r+0xde>
 801a782:	6834      	ldr	r4, [r6, #0]
 801a784:	4626      	mov	r6, r4
 801a786:	2e00      	cmp	r6, #0
 801a788:	d140      	bne.n	801a80c <_malloc_r+0xcc>
 801a78a:	6823      	ldr	r3, [r4, #0]
 801a78c:	4631      	mov	r1, r6
 801a78e:	4638      	mov	r0, r7
 801a790:	eb04 0803 	add.w	r8, r4, r3
 801a794:	f000 f848 	bl	801a828 <_sbrk_r>
 801a798:	4580      	cmp	r8, r0
 801a79a:	d13a      	bne.n	801a812 <_malloc_r+0xd2>
 801a79c:	6821      	ldr	r1, [r4, #0]
 801a79e:	3503      	adds	r5, #3
 801a7a0:	1a6d      	subs	r5, r5, r1
 801a7a2:	f025 0503 	bic.w	r5, r5, #3
 801a7a6:	3508      	adds	r5, #8
 801a7a8:	2d0c      	cmp	r5, #12
 801a7aa:	bf38      	it	cc
 801a7ac:	250c      	movcc	r5, #12
 801a7ae:	4629      	mov	r1, r5
 801a7b0:	4638      	mov	r0, r7
 801a7b2:	f7ff ffa5 	bl	801a700 <sbrk_aligned>
 801a7b6:	3001      	adds	r0, #1
 801a7b8:	d02b      	beq.n	801a812 <_malloc_r+0xd2>
 801a7ba:	6823      	ldr	r3, [r4, #0]
 801a7bc:	442b      	add	r3, r5
 801a7be:	6023      	str	r3, [r4, #0]
 801a7c0:	e00e      	b.n	801a7e0 <_malloc_r+0xa0>
 801a7c2:	6822      	ldr	r2, [r4, #0]
 801a7c4:	1b52      	subs	r2, r2, r5
 801a7c6:	d41e      	bmi.n	801a806 <_malloc_r+0xc6>
 801a7c8:	2a0b      	cmp	r2, #11
 801a7ca:	d916      	bls.n	801a7fa <_malloc_r+0xba>
 801a7cc:	1961      	adds	r1, r4, r5
 801a7ce:	42a3      	cmp	r3, r4
 801a7d0:	6025      	str	r5, [r4, #0]
 801a7d2:	bf18      	it	ne
 801a7d4:	6059      	strne	r1, [r3, #4]
 801a7d6:	6863      	ldr	r3, [r4, #4]
 801a7d8:	bf08      	it	eq
 801a7da:	6031      	streq	r1, [r6, #0]
 801a7dc:	5162      	str	r2, [r4, r5]
 801a7de:	604b      	str	r3, [r1, #4]
 801a7e0:	4638      	mov	r0, r7
 801a7e2:	f104 060b 	add.w	r6, r4, #11
 801a7e6:	f000 f8cf 	bl	801a988 <__malloc_unlock>
 801a7ea:	f026 0607 	bic.w	r6, r6, #7
 801a7ee:	1d23      	adds	r3, r4, #4
 801a7f0:	1af2      	subs	r2, r6, r3
 801a7f2:	d0b6      	beq.n	801a762 <_malloc_r+0x22>
 801a7f4:	1b9b      	subs	r3, r3, r6
 801a7f6:	50a3      	str	r3, [r4, r2]
 801a7f8:	e7b3      	b.n	801a762 <_malloc_r+0x22>
 801a7fa:	6862      	ldr	r2, [r4, #4]
 801a7fc:	42a3      	cmp	r3, r4
 801a7fe:	bf0c      	ite	eq
 801a800:	6032      	streq	r2, [r6, #0]
 801a802:	605a      	strne	r2, [r3, #4]
 801a804:	e7ec      	b.n	801a7e0 <_malloc_r+0xa0>
 801a806:	4623      	mov	r3, r4
 801a808:	6864      	ldr	r4, [r4, #4]
 801a80a:	e7b2      	b.n	801a772 <_malloc_r+0x32>
 801a80c:	4634      	mov	r4, r6
 801a80e:	6876      	ldr	r6, [r6, #4]
 801a810:	e7b9      	b.n	801a786 <_malloc_r+0x46>
 801a812:	230c      	movs	r3, #12
 801a814:	603b      	str	r3, [r7, #0]
 801a816:	4638      	mov	r0, r7
 801a818:	f000 f8b6 	bl	801a988 <__malloc_unlock>
 801a81c:	e7a1      	b.n	801a762 <_malloc_r+0x22>
 801a81e:	6025      	str	r5, [r4, #0]
 801a820:	e7de      	b.n	801a7e0 <_malloc_r+0xa0>
 801a822:	bf00      	nop
 801a824:	24006930 	.word	0x24006930

0801a828 <_sbrk_r>:
 801a828:	b538      	push	{r3, r4, r5, lr}
 801a82a:	4d06      	ldr	r5, [pc, #24]	; (801a844 <_sbrk_r+0x1c>)
 801a82c:	2300      	movs	r3, #0
 801a82e:	4604      	mov	r4, r0
 801a830:	4608      	mov	r0, r1
 801a832:	602b      	str	r3, [r5, #0]
 801a834:	f7ea f868 	bl	8004908 <_sbrk>
 801a838:	1c43      	adds	r3, r0, #1
 801a83a:	d102      	bne.n	801a842 <_sbrk_r+0x1a>
 801a83c:	682b      	ldr	r3, [r5, #0]
 801a83e:	b103      	cbz	r3, 801a842 <_sbrk_r+0x1a>
 801a840:	6023      	str	r3, [r4, #0]
 801a842:	bd38      	pop	{r3, r4, r5, pc}
 801a844:	24006938 	.word	0x24006938

0801a848 <__sread>:
 801a848:	b510      	push	{r4, lr}
 801a84a:	460c      	mov	r4, r1
 801a84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a850:	f000 f8a0 	bl	801a994 <_read_r>
 801a854:	2800      	cmp	r0, #0
 801a856:	bfab      	itete	ge
 801a858:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a85a:	89a3      	ldrhlt	r3, [r4, #12]
 801a85c:	181b      	addge	r3, r3, r0
 801a85e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a862:	bfac      	ite	ge
 801a864:	6563      	strge	r3, [r4, #84]	; 0x54
 801a866:	81a3      	strhlt	r3, [r4, #12]
 801a868:	bd10      	pop	{r4, pc}

0801a86a <__swrite>:
 801a86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a86e:	461f      	mov	r7, r3
 801a870:	898b      	ldrh	r3, [r1, #12]
 801a872:	05db      	lsls	r3, r3, #23
 801a874:	4605      	mov	r5, r0
 801a876:	460c      	mov	r4, r1
 801a878:	4616      	mov	r6, r2
 801a87a:	d505      	bpl.n	801a888 <__swrite+0x1e>
 801a87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a880:	2302      	movs	r3, #2
 801a882:	2200      	movs	r2, #0
 801a884:	f000 f868 	bl	801a958 <_lseek_r>
 801a888:	89a3      	ldrh	r3, [r4, #12]
 801a88a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a88e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a892:	81a3      	strh	r3, [r4, #12]
 801a894:	4632      	mov	r2, r6
 801a896:	463b      	mov	r3, r7
 801a898:	4628      	mov	r0, r5
 801a89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a89e:	f000 b817 	b.w	801a8d0 <_write_r>

0801a8a2 <__sseek>:
 801a8a2:	b510      	push	{r4, lr}
 801a8a4:	460c      	mov	r4, r1
 801a8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8aa:	f000 f855 	bl	801a958 <_lseek_r>
 801a8ae:	1c43      	adds	r3, r0, #1
 801a8b0:	89a3      	ldrh	r3, [r4, #12]
 801a8b2:	bf15      	itete	ne
 801a8b4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a8b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a8ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a8be:	81a3      	strheq	r3, [r4, #12]
 801a8c0:	bf18      	it	ne
 801a8c2:	81a3      	strhne	r3, [r4, #12]
 801a8c4:	bd10      	pop	{r4, pc}

0801a8c6 <__sclose>:
 801a8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8ca:	f000 b813 	b.w	801a8f4 <_close_r>
	...

0801a8d0 <_write_r>:
 801a8d0:	b538      	push	{r3, r4, r5, lr}
 801a8d2:	4d07      	ldr	r5, [pc, #28]	; (801a8f0 <_write_r+0x20>)
 801a8d4:	4604      	mov	r4, r0
 801a8d6:	4608      	mov	r0, r1
 801a8d8:	4611      	mov	r1, r2
 801a8da:	2200      	movs	r2, #0
 801a8dc:	602a      	str	r2, [r5, #0]
 801a8de:	461a      	mov	r2, r3
 801a8e0:	f7e9 ffc1 	bl	8004866 <_write>
 801a8e4:	1c43      	adds	r3, r0, #1
 801a8e6:	d102      	bne.n	801a8ee <_write_r+0x1e>
 801a8e8:	682b      	ldr	r3, [r5, #0]
 801a8ea:	b103      	cbz	r3, 801a8ee <_write_r+0x1e>
 801a8ec:	6023      	str	r3, [r4, #0]
 801a8ee:	bd38      	pop	{r3, r4, r5, pc}
 801a8f0:	24006938 	.word	0x24006938

0801a8f4 <_close_r>:
 801a8f4:	b538      	push	{r3, r4, r5, lr}
 801a8f6:	4d06      	ldr	r5, [pc, #24]	; (801a910 <_close_r+0x1c>)
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	4604      	mov	r4, r0
 801a8fc:	4608      	mov	r0, r1
 801a8fe:	602b      	str	r3, [r5, #0]
 801a900:	f7e9 ffcd 	bl	800489e <_close>
 801a904:	1c43      	adds	r3, r0, #1
 801a906:	d102      	bne.n	801a90e <_close_r+0x1a>
 801a908:	682b      	ldr	r3, [r5, #0]
 801a90a:	b103      	cbz	r3, 801a90e <_close_r+0x1a>
 801a90c:	6023      	str	r3, [r4, #0]
 801a90e:	bd38      	pop	{r3, r4, r5, pc}
 801a910:	24006938 	.word	0x24006938

0801a914 <_fstat_r>:
 801a914:	b538      	push	{r3, r4, r5, lr}
 801a916:	4d07      	ldr	r5, [pc, #28]	; (801a934 <_fstat_r+0x20>)
 801a918:	2300      	movs	r3, #0
 801a91a:	4604      	mov	r4, r0
 801a91c:	4608      	mov	r0, r1
 801a91e:	4611      	mov	r1, r2
 801a920:	602b      	str	r3, [r5, #0]
 801a922:	f7e9 ffc8 	bl	80048b6 <_fstat>
 801a926:	1c43      	adds	r3, r0, #1
 801a928:	d102      	bne.n	801a930 <_fstat_r+0x1c>
 801a92a:	682b      	ldr	r3, [r5, #0]
 801a92c:	b103      	cbz	r3, 801a930 <_fstat_r+0x1c>
 801a92e:	6023      	str	r3, [r4, #0]
 801a930:	bd38      	pop	{r3, r4, r5, pc}
 801a932:	bf00      	nop
 801a934:	24006938 	.word	0x24006938

0801a938 <_isatty_r>:
 801a938:	b538      	push	{r3, r4, r5, lr}
 801a93a:	4d06      	ldr	r5, [pc, #24]	; (801a954 <_isatty_r+0x1c>)
 801a93c:	2300      	movs	r3, #0
 801a93e:	4604      	mov	r4, r0
 801a940:	4608      	mov	r0, r1
 801a942:	602b      	str	r3, [r5, #0]
 801a944:	f7e9 ffc7 	bl	80048d6 <_isatty>
 801a948:	1c43      	adds	r3, r0, #1
 801a94a:	d102      	bne.n	801a952 <_isatty_r+0x1a>
 801a94c:	682b      	ldr	r3, [r5, #0]
 801a94e:	b103      	cbz	r3, 801a952 <_isatty_r+0x1a>
 801a950:	6023      	str	r3, [r4, #0]
 801a952:	bd38      	pop	{r3, r4, r5, pc}
 801a954:	24006938 	.word	0x24006938

0801a958 <_lseek_r>:
 801a958:	b538      	push	{r3, r4, r5, lr}
 801a95a:	4d07      	ldr	r5, [pc, #28]	; (801a978 <_lseek_r+0x20>)
 801a95c:	4604      	mov	r4, r0
 801a95e:	4608      	mov	r0, r1
 801a960:	4611      	mov	r1, r2
 801a962:	2200      	movs	r2, #0
 801a964:	602a      	str	r2, [r5, #0]
 801a966:	461a      	mov	r2, r3
 801a968:	f7e9 ffc0 	bl	80048ec <_lseek>
 801a96c:	1c43      	adds	r3, r0, #1
 801a96e:	d102      	bne.n	801a976 <_lseek_r+0x1e>
 801a970:	682b      	ldr	r3, [r5, #0]
 801a972:	b103      	cbz	r3, 801a976 <_lseek_r+0x1e>
 801a974:	6023      	str	r3, [r4, #0]
 801a976:	bd38      	pop	{r3, r4, r5, pc}
 801a978:	24006938 	.word	0x24006938

0801a97c <__malloc_lock>:
 801a97c:	4801      	ldr	r0, [pc, #4]	; (801a984 <__malloc_lock+0x8>)
 801a97e:	f7ff be0b 	b.w	801a598 <__retarget_lock_acquire_recursive>
 801a982:	bf00      	nop
 801a984:	2400692c 	.word	0x2400692c

0801a988 <__malloc_unlock>:
 801a988:	4801      	ldr	r0, [pc, #4]	; (801a990 <__malloc_unlock+0x8>)
 801a98a:	f7ff be06 	b.w	801a59a <__retarget_lock_release_recursive>
 801a98e:	bf00      	nop
 801a990:	2400692c 	.word	0x2400692c

0801a994 <_read_r>:
 801a994:	b538      	push	{r3, r4, r5, lr}
 801a996:	4d07      	ldr	r5, [pc, #28]	; (801a9b4 <_read_r+0x20>)
 801a998:	4604      	mov	r4, r0
 801a99a:	4608      	mov	r0, r1
 801a99c:	4611      	mov	r1, r2
 801a99e:	2200      	movs	r2, #0
 801a9a0:	602a      	str	r2, [r5, #0]
 801a9a2:	461a      	mov	r2, r3
 801a9a4:	f7e9 ff42 	bl	800482c <_read>
 801a9a8:	1c43      	adds	r3, r0, #1
 801a9aa:	d102      	bne.n	801a9b2 <_read_r+0x1e>
 801a9ac:	682b      	ldr	r3, [r5, #0]
 801a9ae:	b103      	cbz	r3, 801a9b2 <_read_r+0x1e>
 801a9b0:	6023      	str	r3, [r4, #0]
 801a9b2:	bd38      	pop	{r3, r4, r5, pc}
 801a9b4:	24006938 	.word	0x24006938

0801a9b8 <_init>:
 801a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9ba:	bf00      	nop
 801a9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a9be:	bc08      	pop	{r3}
 801a9c0:	469e      	mov	lr, r3
 801a9c2:	4770      	bx	lr

0801a9c4 <_fini>:
 801a9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9c6:	bf00      	nop
 801a9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a9ca:	bc08      	pop	{r3}
 801a9cc:	469e      	mov	lr, r3
 801a9ce:	4770      	bx	lr
