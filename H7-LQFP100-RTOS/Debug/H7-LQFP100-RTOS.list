
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aed0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801b170  0801b170  0002b170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b608  0801b608  0002b608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b610  0801b610  0002b610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b614  0801b614  0002b614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000138  24000000  0801b618  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801b750  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801b750  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041167  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007d76  00000000  00000000  000712cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc0  00000000  00000000  00079048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002878  00000000  00000000  0007bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046855  00000000  00000000  0007e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043366  00000000  00000000  000c4cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196b75  00000000  00000000  0010803b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029ebb0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd08  00000000  00000000  0029ec00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b158 	.word	0x0801b158

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801b158 	.word	0x0801b158

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fed9 	bl	8006420 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 fa24 	bl	8003ac0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fff4 	bl	8007670 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 fa17 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 f937 	bl	8006928 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f9fe 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 f929 	bl	8006928 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f9f0 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 f91b 	bl	8006928 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f9e2 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 f90d 	bl	8006928 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f9d4 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 f8fe 	bl	8006928 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f9c5 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 f8ef 	bl	8006928 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f9b6 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 f8e0 	bl	8006928 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f9a7 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 f8d1 	bl	8006928 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f998 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f006 f8c2 	bl	8006928 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f989 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f006 f8b3 	bl	8006928 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f97a 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f006 f8a4 	bl	8006928 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f96b 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 fdc1 	bl	8006420 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f90c 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f006 f82c 	bl	8006928 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f8f3 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f006 f81e 	bl	8006928 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f8e5 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f006 f810 	bl	8006928 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f8d7 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f006 f802 	bl	8006928 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f8c9 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fd2c 	bl	800b458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fd20 	bl	800b458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fd14 	bl	800b458 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 fbbf 	bl	80081f8 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f003 f81e 	bl	8003ac0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 fa7a 	bl	8005fd8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 fa74 	bl	8005fd8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 fb5f 	bl	80081f8 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 ffbe 	bl	8003ac0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 fddd 	bl	801a74c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 ff27 	bl	80079ec <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 ff8c 	bl	8003ac0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 f942 	bl	8007e4c <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 ff77 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a fbff 	bl	800b458 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 faaa 	bl	80081f8 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 ff09 	bl	8003ac0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fe6c 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fe83 	bl	80079d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fe43 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fe5a 	bl	80079d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fe3b 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fe52 	bl	80079d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fe33 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fe4a 	bl	80079d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fe2b 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fe42 	bl	80079d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fe23 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fe3a 	bl	80079d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fe1b 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fe32 	bl	80079d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fe13 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fe2a 	bl	80079d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fe0b 	bl	800799c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fe22 	bl	80079d0 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 fcbe 	bl	801a74c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a f982 	bl	800b174 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00a f927 	bl	800b174 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 ff74 	bl	800aea4 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1c      	cmp	r3, #28
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fec8 	bl	800aea4 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 ffd4 	bl	800b174 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 ff71 	bl	800b174 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fdbe 	bl	800aea4 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fe9c 	bl	800b174 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1c      	cmp	r3, #28
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fca7 	bl	800aea4 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fdb4 	bl	800b174 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 ffaa 	bl	801a74c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fc8f 	bl	800b174 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 fadd 	bl	800aea4 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 fbf1 	bl	800b174 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fe45 	bl	801a74c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fe3c 	bl	801a74c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 f9a9 	bl	800aea4 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 f996 	bl	800aea4 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 fd87 	bl	801a74c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 fd80 	bl	801a74c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 f8ef 	bl	800aea4 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1c      	cmp	r3, #28
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f009 f907 	bl	800afc8 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 f9af 	bl	800b174 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fffb 	bl	800aea4 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <__NVIC_SystemReset>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_SystemReset+0x28>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
    __NOP();
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <__NVIC_SystemReset+0x20>
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0004 	.word	0x05fa0004

08001f5c <handle_error>:
 * set the previous error to whatever error we are currently handling, send an error packet,
 * and enter IDLE mode. Additional actions are taken depending on the error category.
 *
 * @param error Error given by the caller.
 */
void handle_error(ERROR_STRUCT error) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	80b8      	strh	r0, [r7, #4]
#ifdef ERROR_HANDLING_ENABLED
	osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <handle_error+0x60>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f015 fa26 	bl	80173bc <osEventFlagsSet>
	while (!IDLING) {};
 8001f70:	bf00      	nop
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <handle_error+0x64>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0fa      	beq.n	8001f72 <handle_error+0x16>
	increment_error_counter(error);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f851 	bl	8002024 <increment_error_counter>
	set_previous_error(error);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8b2 	bl	80020ec <set_previous_error>
	send_current_error_packet(error);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fa5b 	bl	8002444 <send_current_error_packet>
	send_junk_packet();
 8001f8e:	f000 fa73 	bl	8002478 <send_junk_packet>

	switch (error.category) {
 8001f92:	793b      	ldrb	r3, [r7, #4]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d008      	beq.n	8001faa <handle_error+0x4e>
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	dc08      	bgt.n	8001fae <handle_error+0x52>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <handle_error+0x4a>
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d006      	beq.n	8001fb2 <handle_error+0x56>
	case EC_peripheral:
		NVIC_SystemReset();
		break;
	default:
		// Should not be possible to get here
		break;
 8001fa4:	e003      	b.n	8001fae <handle_error+0x52>
		NVIC_SystemReset();
 8001fa6:	f7ff ffc3 	bl	8001f30 <__NVIC_SystemReset>
		NVIC_SystemReset();
 8001faa:	f7ff ffc1 	bl	8001f30 <__NVIC_SystemReset>
		break;
 8001fae:	bf00      	nop
 8001fb0:	e000      	b.n	8001fb4 <handle_error+0x58>
		break;
 8001fb2:	bf00      	nop
	}
#endif
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	24001a98 	.word	0x24001a98
 8001fc0:	24001ae5 	.word	0x24001ae5

08001fc4 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init() {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fca:	f008 fffd 	bl	800afc8 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fce:	f7fe fee3 	bl	8000d98 <EE_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <error_counter_init+0x18>
		Error_Handler();
 8001fd8:	f001 fd72 	bl	8003ac0 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	e013      	b.n	800200a <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <error_counter_init+0x58>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	490c      	ldr	r1, [pc, #48]	; (8002020 <error_counter_init+0x5c>)
 8001ff0:	440b      	add	r3, r1
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f7ff fb87 	bl	8001708 <EE_ReadVariable>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <error_counter_init+0x40>
			Error_Handler();
 8002000:	f001 fd5e 	bl	8003ac0 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3301      	adds	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b1a      	cmp	r3, #26
 800200e:	dde8      	ble.n	8001fe2 <error_counter_init+0x1e>
		}
	}
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	24000000 	.word	0x24000000
 8002020:	240003a4 	.word	0x240003a4

08002024 <increment_error_counter>:
 * local_cpy array. To see what index a particular error is stored in, just check the value
 * each category or detail is assigned in the header file.
 *
 * @param error Error given by the caller.
 */
void increment_error_counter(ERROR_STRUCT error) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 800202c:	793b      	ldrb	r3, [r7, #4]
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <increment_error_counter+0x38>)
 8002030:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002034:	3201      	adds	r2, #1
 8002036:	b291      	uxth	r1, r2
 8002038:	4a08      	ldr	r2, [pc, #32]	; (800205c <increment_error_counter+0x38>)
 800203a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800203e:	797b      	ldrb	r3, [r7, #5]
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <increment_error_counter+0x38>)
 8002042:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002046:	3201      	adds	r2, #1
 8002048:	b291      	uxth	r1, r2
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <increment_error_counter+0x38>)
 800204c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 8002050:	f000 f806 	bl	8002060 <update_error_counter>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	240003a4 	.word	0x240003a4

08002060 <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter(){
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	e013      	b.n	8002094 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <update_error_counter+0x44>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002074:	490c      	ldr	r1, [pc, #48]	; (80020a8 <update_error_counter+0x48>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f7ff fb8a 	bl	8001798 <EE_WriteVariable>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <update_error_counter+0x2e>
			Error_Handler();
 800208a:	f001 fd19 	bl	8003ac0 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3301      	adds	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b1a      	cmp	r3, #26
 8002098:	dde8      	ble.n	800206c <update_error_counter+0xc>
		}
	}
}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	24000000 	.word	0x24000000
 80020a8:	240003a4 	.word	0x240003a4

080020ac <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters() {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	e00f      	b.n	80020d8 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <reset_error_counters+0x3c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fb68 	bl	8001798 <EE_WriteVariable>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <reset_error_counters+0x26>
			Error_Handler();
 80020ce:	f001 fcf7 	bl	8003ac0 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3301      	adds	r3, #1
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b1a      	cmp	r3, #26
 80020dc:	ddec      	ble.n	80020b8 <reset_error_counters+0xc>
		}
	}
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	24000000 	.word	0x24000000

080020ec <set_previous_error>:
/**
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	80b8      	strh	r0, [r7, #4]
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <set_previous_error+0x44>)
 80020f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f8:	793a      	ldrb	r2, [r7, #4]
 80020fa:	b292      	uxth	r2, r2
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fb4a 	bl	8001798 <EE_WriteVariable>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <set_previous_error+0x22>
		Error_Handler();
 800210a:	f001 fcd9 	bl	8003ac0 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <set_previous_error+0x44>)
 8002110:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002112:	797a      	ldrb	r2, [r7, #5]
 8002114:	b292      	uxth	r2, r2
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fb3d 	bl	8001798 <EE_WriteVariable>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <set_previous_error+0x3c>
		Error_Handler();
 8002124:	f001 fccc 	bl	8003ac0 <Error_Handler>
	}
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	24000000 	.word	0x24000000

08002134 <get_previous_error>:
/**
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error() {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <get_previous_error+0x5c>)
 800213c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800213e:	1dba      	adds	r2, r7, #6
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fae0 	bl	8001708 <EE_ReadVariable>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <get_previous_error+0x1e>
		Error_Handler();
 800214e:	f001 fcb7 	bl	8003ac0 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <get_previous_error+0x5c>)
 8002154:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002156:	1d3a      	adds	r2, r7, #4
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fad4 	bl	8001708 <EE_ReadVariable>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <get_previous_error+0x36>
		Error_Handler();
 8002166:	f001 fcab 	bl	8003ac0 <Error_Handler>
	}

	prev_error.category = category;
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	723b      	strb	r3, [r7, #8]
	prev_error.detail = detail;
 8002170:	88bb      	ldrh	r3, [r7, #4]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	727b      	strb	r3, [r7, #9]

	return prev_error;
 8002176:	893b      	ldrh	r3, [r7, #8]
 8002178:	81bb      	strh	r3, [r7, #12]
 800217a:	2300      	movs	r3, #0
 800217c:	7b3a      	ldrb	r2, [r7, #12]
 800217e:	f362 0307 	bfi	r3, r2, #0, #8
 8002182:	7b7a      	ldrb	r2, [r7, #13]
 8002184:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	24000000 	.word	0x24000000

08002194 <send_error_counter_packet>:
 * @brief Creates and sends a packet containing all 27 error counters.
 *
 * There is an error counter for every single category and detail.
 * This type of packet is only sent during sync.
 */
void send_error_counter_packet() {
 8002194:	b580      	push	{r7, lr}
 8002196:	b08e      	sub	sp, #56	; 0x38
 8002198:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 800219a:	23cc      	movs	r3, #204	; 0xcc
 800219c:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 800219e:	23cc      	movs	r3, #204	; 0xcc
 80021a0:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 80021a2:	4b98      	ldr	r3, [pc, #608]	; (8002404 <send_error_counter_packet+0x270>)
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 80021ae:	4b95      	ldr	r3, [pc, #596]	; (8002404 <send_error_counter_packet+0x270>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 80021b6:	4b93      	ldr	r3, [pc, #588]	; (8002404 <send_error_counter_packet+0x270>)
 80021b8:	885b      	ldrh	r3, [r3, #2]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 80021c2:	4b90      	ldr	r3, [pc, #576]	; (8002404 <send_error_counter_packet+0x270>)
 80021c4:	885b      	ldrh	r3, [r3, #2]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 80021ca:	4b8e      	ldr	r3, [pc, #568]	; (8002404 <send_error_counter_packet+0x270>)
 80021cc:	889b      	ldrh	r3, [r3, #4]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 80021d6:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <send_error_counter_packet+0x270>)
 80021d8:	889b      	ldrh	r3, [r3, #4]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 80021de:	4b89      	ldr	r3, [pc, #548]	; (8002404 <send_error_counter_packet+0x270>)
 80021e0:	88db      	ldrh	r3, [r3, #6]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 80021ea:	4b86      	ldr	r3, [pc, #536]	; (8002404 <send_error_counter_packet+0x270>)
 80021ec:	88db      	ldrh	r3, [r3, #6]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 80021f2:	4b84      	ldr	r3, [pc, #528]	; (8002404 <send_error_counter_packet+0x270>)
 80021f4:	891b      	ldrh	r3, [r3, #8]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 80021fe:	4b81      	ldr	r3, [pc, #516]	; (8002404 <send_error_counter_packet+0x270>)
 8002200:	891b      	ldrh	r3, [r3, #8]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 8002206:	4b7f      	ldr	r3, [pc, #508]	; (8002404 <send_error_counter_packet+0x270>)
 8002208:	895b      	ldrh	r3, [r3, #10]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 8002212:	4b7c      	ldr	r3, [pc, #496]	; (8002404 <send_error_counter_packet+0x270>)
 8002214:	895b      	ldrh	r3, [r3, #10]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 800221a:	4b7a      	ldr	r3, [pc, #488]	; (8002404 <send_error_counter_packet+0x270>)
 800221c:	899b      	ldrh	r3, [r3, #12]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	b29b      	uxth	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 8002226:	4b77      	ldr	r3, [pc, #476]	; (8002404 <send_error_counter_packet+0x270>)
 8002228:	899b      	ldrh	r3, [r3, #12]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 800222e:	4b75      	ldr	r3, [pc, #468]	; (8002404 <send_error_counter_packet+0x270>)
 8002230:	89db      	ldrh	r3, [r3, #14]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	b29b      	uxth	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 800223a:	4b72      	ldr	r3, [pc, #456]	; (8002404 <send_error_counter_packet+0x270>)
 800223c:	89db      	ldrh	r3, [r3, #14]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 8002242:	4b70      	ldr	r3, [pc, #448]	; (8002404 <send_error_counter_packet+0x270>)
 8002244:	8a1b      	ldrh	r3, [r3, #16]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	b29b      	uxth	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 800224e:	4b6d      	ldr	r3, [pc, #436]	; (8002404 <send_error_counter_packet+0x270>)
 8002250:	8a1b      	ldrh	r3, [r3, #16]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 8002256:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <send_error_counter_packet+0x270>)
 8002258:	8a5b      	ldrh	r3, [r3, #18]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 8002262:	4b68      	ldr	r3, [pc, #416]	; (8002404 <send_error_counter_packet+0x270>)
 8002264:	8a5b      	ldrh	r3, [r3, #18]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 800226a:	4b66      	ldr	r3, [pc, #408]	; (8002404 <send_error_counter_packet+0x270>)
 800226c:	8a9b      	ldrh	r3, [r3, #20]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 8002276:	4b63      	ldr	r3, [pc, #396]	; (8002404 <send_error_counter_packet+0x270>)
 8002278:	8a9b      	ldrh	r3, [r3, #20]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 800227e:	4b61      	ldr	r3, [pc, #388]	; (8002404 <send_error_counter_packet+0x270>)
 8002280:	8adb      	ldrh	r3, [r3, #22]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 800228a:	4b5e      	ldr	r3, [pc, #376]	; (8002404 <send_error_counter_packet+0x270>)
 800228c:	8adb      	ldrh	r3, [r3, #22]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 8002292:	4b5c      	ldr	r3, [pc, #368]	; (8002404 <send_error_counter_packet+0x270>)
 8002294:	8b1b      	ldrh	r3, [r3, #24]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	b29b      	uxth	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 800229e:	4b59      	ldr	r3, [pc, #356]	; (8002404 <send_error_counter_packet+0x270>)
 80022a0:	8b1b      	ldrh	r3, [r3, #24]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 80022a6:	4b57      	ldr	r3, [pc, #348]	; (8002404 <send_error_counter_packet+0x270>)
 80022a8:	8b5b      	ldrh	r3, [r3, #26]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 80022b2:	4b54      	ldr	r3, [pc, #336]	; (8002404 <send_error_counter_packet+0x270>)
 80022b4:	8b5b      	ldrh	r3, [r3, #26]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 80022ba:	4b52      	ldr	r3, [pc, #328]	; (8002404 <send_error_counter_packet+0x270>)
 80022bc:	8b9b      	ldrh	r3, [r3, #28]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 80022c6:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <send_error_counter_packet+0x270>)
 80022c8:	8b9b      	ldrh	r3, [r3, #28]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 80022ce:	4b4d      	ldr	r3, [pc, #308]	; (8002404 <send_error_counter_packet+0x270>)
 80022d0:	8bdb      	ldrh	r3, [r3, #30]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <send_error_counter_packet+0x270>)
 80022de:	8bdb      	ldrh	r3, [r3, #30]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <send_error_counter_packet+0x270>)
 80022e8:	8c1b      	ldrh	r3, [r3, #32]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 80022f4:	4b43      	ldr	r3, [pc, #268]	; (8002404 <send_error_counter_packet+0x270>)
 80022f6:	8c1b      	ldrh	r3, [r3, #32]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <send_error_counter_packet+0x270>)
 8002300:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	b29b      	uxth	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 800230c:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <send_error_counter_packet+0x270>)
 800230e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <send_error_counter_packet+0x270>)
 8002318:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	b29b      	uxth	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <send_error_counter_packet+0x270>)
 8002326:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 800232e:	4b35      	ldr	r3, [pc, #212]	; (8002404 <send_error_counter_packet+0x270>)
 8002330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	b29b      	uxth	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <send_error_counter_packet+0x270>)
 800233e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <send_error_counter_packet+0x270>)
 8002348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b29b      	uxth	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <send_error_counter_packet+0x270>)
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <send_error_counter_packet+0x270>)
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	b29b      	uxth	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <send_error_counter_packet+0x270>)
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 8002376:	4b23      	ldr	r3, [pc, #140]	; (8002404 <send_error_counter_packet+0x270>)
 8002378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	b29b      	uxth	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <send_error_counter_packet+0x270>)
 8002386:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <send_error_counter_packet+0x270>)
 8002390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	b29b      	uxth	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <send_error_counter_packet+0x270>)
 800239e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <send_error_counter_packet+0x270>)
 80023a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <send_error_counter_packet+0x270>)
 80023b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <send_error_counter_packet+0x270>)
 80023c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 80023cc:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <send_error_counter_packet+0x270>)
 80023ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <send_error_counter_packet+0x270>)
 80023d8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <send_error_counter_packet+0x270>)
 80023e6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 80023ee:	4639      	mov	r1, r7
 80023f0:	2364      	movs	r3, #100	; 0x64
 80023f2:	2238      	movs	r2, #56	; 0x38
 80023f4:	4804      	ldr	r0, [pc, #16]	; (8002408 <send_error_counter_packet+0x274>)
 80023f6:	f012 f83b 	bl	8014470 <HAL_UART_Transmit>
}
 80023fa:	bf00      	nop
 80023fc:	3738      	adds	r7, #56	; 0x38
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	240003a4 	.word	0x240003a4
 8002408:	24001e3c 	.word	0x24001e3c

0800240c <send_previous_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet() {
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 8002412:	f7ff fe8f 	bl	8002134 <get_previous_error>
 8002416:	4603      	mov	r3, r0
 8002418:	80bb      	strh	r3, [r7, #4]

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 800241a:	23aa      	movs	r3, #170	; 0xaa
 800241c:	703b      	strb	r3, [r7, #0]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 800241e:	23aa      	movs	r3, #170	; 0xaa
 8002420:	707b      	strb	r3, [r7, #1]
	buffer[2] = prev_error.category;
 8002422:	793b      	ldrb	r3, [r7, #4]
 8002424:	70bb      	strb	r3, [r7, #2]
	buffer[3] = prev_error.detail;
 8002426:	797b      	ldrb	r3, [r7, #5]
 8002428:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 800242a:	4639      	mov	r1, r7
 800242c:	2364      	movs	r3, #100	; 0x64
 800242e:	2204      	movs	r2, #4
 8002430:	4803      	ldr	r0, [pc, #12]	; (8002440 <send_previous_error_packet+0x34>)
 8002432:	f012 f81d 	bl	8014470 <HAL_UART_Transmit>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	24001e3c 	.word	0x24001e3c

08002444 <send_current_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	80b8      	strh	r0, [r7, #4]
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 800244c:	23bb      	movs	r3, #187	; 0xbb
 800244e:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 8002450:	23bb      	movs	r3, #187	; 0xbb
 8002452:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 8002454:	793b      	ldrb	r3, [r7, #4]
 8002456:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 8002458:	797b      	ldrb	r3, [r7, #5]
 800245a:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 800245c:	f107 010c 	add.w	r1, r7, #12
 8002460:	2364      	movs	r3, #100	; 0x64
 8002462:	2204      	movs	r2, #4
 8002464:	4803      	ldr	r0, [pc, #12]	; (8002474 <send_current_error_packet+0x30>)
 8002466:	f012 f803 	bl	8014470 <HAL_UART_Transmit>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	24001e3c 	.word	0x24001e3c

08002478 <send_junk_packet>:
/**
 * @brief Creates and sends a junk packet containing all 0xCE.
 *
 * Used to clear out the buffer on the OBC.
 */
void send_junk_packet() {	// TODO: Figure out if we still need this.
 8002478:	b580      	push	{r7, lr}
 800247a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800247e:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002486:	e00d      	b.n	80024a4 <send_junk_packet+0x2c>
		buffer[i] = 0xCE;
 8002488:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800248c:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 8002490:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002494:	4413      	add	r3, r2
 8002496:	22ce      	movs	r2, #206	; 0xce
 8002498:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 800249a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800249e:	3301      	adds	r3, #1
 80024a0:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80024a4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80024a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ac:	dbec      	blt.n	8002488 <send_junk_packet+0x10>
	}

	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
 80024ae:	1d39      	adds	r1, r7, #4
 80024b0:	2364      	movs	r3, #100	; 0x64
 80024b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b6:	4804      	ldr	r0, [pc, #16]	; (80024c8 <send_junk_packet+0x50>)
 80024b8:	f011 ffda 	bl	8014470 <HAL_UART_Transmit>
}
 80024bc:	bf00      	nop
 80024be:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	24001e3c 	.word	0x24001e3c

080024cc <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <vApplicationTickHook+0x18>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3301      	adds	r3, #1
 80024d6:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <vApplicationTickHook+0x18>)
 80024d8:	6013      	str	r3, [r2, #0]
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	24001ae0 	.word	0x24001ae0

080024e8 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8002504:	4a24      	ldr	r2, [pc, #144]	; (8002598 <MX_FREERTOS_Init+0x98>)
 8002506:	2100      	movs	r1, #0
 8002508:	4824      	ldr	r0, [pc, #144]	; (800259c <MX_FREERTOS_Init+0x9c>)
 800250a:	f014 fe09 	bl	8017120 <osThreadNew>
 800250e:	4603      	mov	r3, r0
 8002510:	4a23      	ldr	r2, [pc, #140]	; (80025a0 <MX_FREERTOS_Init+0xa0>)
 8002512:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <MX_FREERTOS_Init+0xa4>)
 8002516:	2100      	movs	r1, #0
 8002518:	4823      	ldr	r0, [pc, #140]	; (80025a8 <MX_FREERTOS_Init+0xa8>)
 800251a:	f014 fe01 	bl	8017120 <osThreadNew>
 800251e:	4603      	mov	r3, r0
 8002520:	4a22      	ldr	r2, [pc, #136]	; (80025ac <MX_FREERTOS_Init+0xac>)
 8002522:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <MX_FREERTOS_Init+0xb0>)
 8002526:	2100      	movs	r1, #0
 8002528:	4822      	ldr	r0, [pc, #136]	; (80025b4 <MX_FREERTOS_Init+0xb4>)
 800252a:	f014 fdf9 	bl	8017120 <osThreadNew>
 800252e:	4603      	mov	r3, r0
 8002530:	4a21      	ldr	r2, [pc, #132]	; (80025b8 <MX_FREERTOS_Init+0xb8>)
 8002532:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <MX_FREERTOS_Init+0xbc>)
 8002536:	2100      	movs	r1, #0
 8002538:	4821      	ldr	r0, [pc, #132]	; (80025c0 <MX_FREERTOS_Init+0xc0>)
 800253a:	f014 fdf1 	bl	8017120 <osThreadNew>
 800253e:	4603      	mov	r3, r0
 8002540:	4a20      	ldr	r2, [pc, #128]	; (80025c4 <MX_FREERTOS_Init+0xc4>)
 8002542:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <MX_FREERTOS_Init+0xc8>)
 8002546:	2100      	movs	r1, #0
 8002548:	4820      	ldr	r0, [pc, #128]	; (80025cc <MX_FREERTOS_Init+0xcc>)
 800254a:	f014 fde9 	bl	8017120 <osThreadNew>
 800254e:	4603      	mov	r3, r0
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <MX_FREERTOS_Init+0xd0>)
 8002552:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002554:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <MX_FREERTOS_Init+0xd4>)
 8002556:	2100      	movs	r1, #0
 8002558:	481f      	ldr	r0, [pc, #124]	; (80025d8 <MX_FREERTOS_Init+0xd8>)
 800255a:	f014 fde1 	bl	8017120 <osThreadNew>
 800255e:	4603      	mov	r3, r0
 8002560:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <MX_FREERTOS_Init+0xdc>)
 8002562:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002564:	4a1e      	ldr	r2, [pc, #120]	; (80025e0 <MX_FREERTOS_Init+0xe0>)
 8002566:	2100      	movs	r1, #0
 8002568:	481e      	ldr	r0, [pc, #120]	; (80025e4 <MX_FREERTOS_Init+0xe4>)
 800256a:	f014 fdd9 	bl	8017120 <osThreadNew>
 800256e:	4603      	mov	r3, r0
 8002570:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <MX_FREERTOS_Init+0xe8>)
 8002572:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002574:	4a1d      	ldr	r2, [pc, #116]	; (80025ec <MX_FREERTOS_Init+0xec>)
 8002576:	2100      	movs	r1, #0
 8002578:	481d      	ldr	r0, [pc, #116]	; (80025f0 <MX_FREERTOS_Init+0xf0>)
 800257a:	f014 fdd1 	bl	8017120 <osThreadNew>
 800257e:	4603      	mov	r3, r0
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <MX_FREERTOS_Init+0xf4>)
 8002582:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002584:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <MX_FREERTOS_Init+0xf8>)
 8002586:	2100      	movs	r1, #0
 8002588:	481c      	ldr	r0, [pc, #112]	; (80025fc <MX_FREERTOS_Init+0xfc>)
 800258a:	f014 fdc9 	bl	8017120 <osThreadNew>
 800258e:	4603      	mov	r3, r0
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <MX_FREERTOS_Init+0x100>)
 8002592:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	0801b3d8 	.word	0x0801b3d8
 800259c:	08002605 	.word	0x08002605
 80025a0:	240003dc 	.word	0x240003dc
 80025a4:	0801b3fc 	.word	0x0801b3fc
 80025a8:	0800262d 	.word	0x0800262d
 80025ac:	2400063c 	.word	0x2400063c
 80025b0:	0801b420 	.word	0x0801b420
 80025b4:	08002655 	.word	0x08002655
 80025b8:	2400089c 	.word	0x2400089c
 80025bc:	0801b444 	.word	0x0801b444
 80025c0:	0800267d 	.word	0x0800267d
 80025c4:	24000afc 	.word	0x24000afc
 80025c8:	0801b468 	.word	0x0801b468
 80025cc:	080026f5 	.word	0x080026f5
 80025d0:	24000d5c 	.word	0x24000d5c
 80025d4:	0801b48c 	.word	0x0801b48c
 80025d8:	0800276d 	.word	0x0800276d
 80025dc:	24000fbc 	.word	0x24000fbc
 80025e0:	0801b4b0 	.word	0x0801b4b0
 80025e4:	0800279d 	.word	0x0800279d
 80025e8:	2400121c 	.word	0x2400121c
 80025ec:	0801b4d4 	.word	0x0801b4d4
 80025f0:	080027cd 	.word	0x080027cd
 80025f4:	2400147c 	.word	0x2400147c
 80025f8:	0801b4f8 	.word	0x0801b4f8
 80025fc:	080028cd 	.word	0x080028cd
 8002600:	240016dc 	.word	0x240016dc

08002604 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <PMT_init+0x24>)
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002614:	2200      	movs	r2, #0
 8002616:	2101      	movs	r1, #1
 8002618:	f014 ff46 	bl	80174a8 <osEventFlagsWait>

		create_pmt_packet();
 800261c:	f001 fa5e 	bl	8003adc <create_pmt_packet>

		osThreadYield();
 8002620:	f014 fe10 	bl	8017244 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002624:	e7f2      	b.n	800260c <PMT_init+0x8>
 8002626:	bf00      	nop
 8002628:	24001a90 	.word	0x24001a90

0800262c <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <ERPA_init+0x24>)
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263c:	2200      	movs	r2, #0
 800263e:	2102      	movs	r1, #2
 8002640:	f014 ff32 	bl	80174a8 <osEventFlagsWait>

		create_erpa_packet();
 8002644:	f001 fa90 	bl	8003b68 <create_erpa_packet>

		osThreadYield();
 8002648:	f014 fdfc 	bl	8017244 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800264c:	e7f2      	b.n	8002634 <ERPA_init+0x8>
 800264e:	bf00      	nop
 8002650:	24001a90 	.word	0x24001a90

08002654 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HK_init+0x24>)
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002664:	2200      	movs	r2, #0
 8002666:	2104      	movs	r1, #4
 8002668:	f014 ff1e 	bl	80174a8 <osEventFlagsWait>

		create_hk_packet();
 800266c:	f001 fada 	bl	8003c24 <create_hk_packet>

		osThreadYield();
 8002670:	f014 fde8 	bl	8017244 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002674:	e7f2      	b.n	800265c <HK_init+0x8>
 8002676:	bf00      	nop
 8002678:	24001a90 	.word	0x24001a90

0800267c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <AUTOINIT_init+0x70>)
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800268c:	2200      	movs	r2, #0
 800268e:	2104      	movs	r1, #4
 8002690:	f014 ff0a 	bl	80174a8 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e012      	b.n	80026c0 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800269a:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <AUTOINIT_init+0x74>)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80026a2:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <AUTOINIT_init+0x74>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	889b      	ldrh	r3, [r3, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	4619      	mov	r1, r3
 80026b0:	f009 f89a 	bl	800b7e8 <HAL_GPIO_WritePin>
			osDelay(100);
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	f014 fe27 	bl	8017308 <osDelay>
		for (int i = 0; i < 7; i++) {
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3301      	adds	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	dde9      	ble.n	800269a <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80026c6:	2308      	movs	r3, #8
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	e008      	b.n	80026de <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 fa18 	bl	8005b08 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3301      	adds	r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b0d      	cmp	r3, #13
 80026e2:	ddf3      	ble.n	80026cc <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80026e4:	f014 fdae 	bl	8017244 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026e8:	e7cc      	b.n	8002684 <AUTOINIT_init+0x8>
 80026ea:	bf00      	nop
 80026ec:	24001a94 	.word	0x24001a94
 80026f0:	0801b51c 	.word	0x0801b51c

080026f4 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <AUTODEINIT_init+0x70>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002704:	2200      	movs	r2, #0
 8002706:	2108      	movs	r1, #8
 8002708:	f014 fece 	bl	80174a8 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800270c:	230d      	movs	r3, #13
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e008      	b.n	8002724 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f003 f9f5 	bl	8005b08 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3b01      	subs	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b07      	cmp	r3, #7
 8002728:	dcf3      	bgt.n	8002712 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800272a:	2306      	movs	r3, #6
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	e012      	b.n	8002756 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <AUTODEINIT_init+0x74>)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002738:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <AUTODEINIT_init+0x74>)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	889b      	ldrh	r3, [r3, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	4619      	mov	r1, r3
 8002746:	f009 f84f 	bl	800b7e8 <HAL_GPIO_WritePin>
			osDelay(100);
 800274a:	2064      	movs	r0, #100	; 0x64
 800274c:	f014 fddc 	bl	8017308 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3b01      	subs	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	dae9      	bge.n	8002730 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 800275c:	f014 fd72 	bl	8017244 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002760:	e7cc      	b.n	80026fc <AUTODEINIT_init+0x8>
 8002762:	bf00      	nop
 8002764:	24001a94 	.word	0x24001a94
 8002768:	0801b51c 	.word	0x0801b51c

0800276c <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <Voltage_Monitor_init+0x28>)
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800277c:	2200      	movs	r2, #0
 800277e:	2101      	movs	r1, #1
 8002780:	f014 fe92 	bl	80174a8 <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 8002784:	4804      	ldr	r0, [pc, #16]	; (8002798 <Voltage_Monitor_init+0x2c>)
 8002786:	f00b fbad 	bl	800dee4 <HAL_IWDG_Refresh>
	  set_rail_monitor();
 800278a:	f003 f9dd 	bl	8005b48 <set_rail_monitor>
	  monitor_rails();
 800278e:	f003 fa5f 	bl	8005c50 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002792:	e7ef      	b.n	8002774 <Voltage_Monitor_init+0x8>
 8002794:	24001a94 	.word	0x24001a94
 8002798:	24001a80 	.word	0x24001a80

0800279c <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <STOP_init+0x2c>)
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ac:	2200      	movs	r2, #0
 80027ae:	2102      	movs	r1, #2
 80027b0:	f014 fe7a 	bl	80174a8 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <STOP_init+0x2c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2102      	movs	r1, #2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f014 fe42 	bl	8017444 <osEventFlagsClear>

	  enter_stop();
 80027c0:	f001 f960 	bl	8003a84 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80027c4:	e7ee      	b.n	80027a4 <STOP_init+0x8>
 80027c6:	bf00      	nop
 80027c8:	24001a94 	.word	0x24001a94

080027cc <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80027d4:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <Science_init+0xd4>)
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027dc:	2200      	movs	r2, #0
 80027de:	2101      	movs	r1, #1
 80027e0:	f014 fe62 	bl	80174a8 <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 80027e4:	4b2f      	ldr	r3, [pc, #188]	; (80028a4 <Science_init+0xd8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f014 fd4b 	bl	8017284 <osThreadSuspend>
		IDLING = 0;
 80027ee:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <Science_init+0xdc>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e012      	b.n	8002820 <Science_init+0x54>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80027fa:	4a2c      	ldr	r2, [pc, #176]	; (80028ac <Science_init+0xe0>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002802:	4a2a      	ldr	r2, [pc, #168]	; (80028ac <Science_init+0xe0>)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	889b      	ldrh	r3, [r3, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	4619      	mov	r1, r3
 8002810:	f008 ffea 	bl	800b7e8 <HAL_GPIO_WritePin>
			osDelay(200);
 8002814:	20c8      	movs	r0, #200	; 0xc8
 8002816:	f014 fd77 	bl	8017308 <osDelay>
		for (int i = 0; i < 9; i++) {
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3301      	adds	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b08      	cmp	r3, #8
 8002824:	dde9      	ble.n	80027fa <Science_init+0x2e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_n800v; i++) {
 8002826:	2306      	movs	r3, #6
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	e008      	b.n	800283e <Science_init+0x72>
			set_rail_monitor_enable(i, 1);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2101      	movs	r1, #1
 8002832:	4618      	mov	r0, r3
 8002834:	f003 f968 	bl	8005b08 <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_n800v; i++) {
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	3301      	adds	r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b10      	cmp	r3, #16
 8002842:	ddf3      	ble.n	800282c <Science_init+0x60>
		}
		osThreadResume(Voltage_MonitorHandle);
 8002844:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <Science_init+0xd8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f014 fd3c 	bl	80172c6 <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 800284e:	b672      	cpsid	i
}
 8002850:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8002852:	2300      	movs	r3, #0
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2320      	movs	r3, #32
 8002858:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <Science_init+0xe4>)
 800285a:	2100      	movs	r1, #0
 800285c:	4815      	ldr	r0, [pc, #84]	; (80028b4 <Science_init+0xe8>)
 800285e:	f005 f93f 	bl	8007ae0 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <Science_init+0xec>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <Science_init+0xf0>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <Science_init+0xf4>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 8002874:	f001 fb14 	bl	8003ea0 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <Science_init+0xf8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2104      	movs	r1, #4
 800287e:	4618      	mov	r0, r3
 8002880:	f014 fd9c 	bl	80173bc <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002888:	f44f 729c 	mov.w	r2, #312	; 0x138
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 800288e:	2100      	movs	r1, #0
 8002890:	480d      	ldr	r0, [pc, #52]	; (80028c8 <Science_init+0xfc>)
 8002892:	f010 fa63 	bl	8012d5c <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8002896:	b662      	cpsie	i
}
 8002898:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 800289a:	f014 fcd3 	bl	8017244 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800289e:	e799      	b.n	80027d4 <Science_init+0x8>
 80028a0:	24001a98 	.word	0x24001a98
 80028a4:	24000fbc 	.word	0x24000fbc
 80028a8:	24001ae5 	.word	0x24001ae5
 80028ac:	0801b51c 	.word	0x0801b51c
 80028b0:	2400003c 	.word	0x2400003c
 80028b4:	24000314 	.word	0x24000314
 80028b8:	24001adc 	.word	0x24001adc
 80028bc:	24001add 	.word	0x24001add
 80028c0:	24001ae0 	.word	0x24001ae0
 80028c4:	24001a90 	.word	0x24001a90
 80028c8:	24001da4 	.word	0x24001da4

080028cc <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <Idle_init+0xb4>)
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028dc:	2200      	movs	r2, #0
 80028de:	2102      	movs	r1, #2
 80028e0:	f014 fde2 	bl	80174a8 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <Idle_init+0xb8>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80028ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028ee:	2200      	movs	r2, #0
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80028f2:	2100      	movs	r1, #0
 80028f4:	4824      	ldr	r0, [pc, #144]	; (8002988 <Idle_init+0xbc>)
 80028f6:	f010 fb8b 	bl	8013010 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <Idle_init+0xc0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8002900:	2100      	movs	r1, #0
 8002902:	4823      	ldr	r0, [pc, #140]	; (8002990 <Idle_init+0xc4>)
 8002904:	f005 f9ac 	bl	8007c60 <HAL_DAC_Stop_DMA>
		osThreadSuspend(Voltage_MonitorHandle);
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <Idle_init+0xc8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f014 fcb9 	bl	8017284 <osThreadSuspend>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_busvmon; i--) {
 8002912:	2310      	movs	r3, #16
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e008      	b.n	800292a <Idle_init+0x5e>
			set_rail_monitor_enable(i, 0);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f003 f8f2 	bl	8005b08 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_busvmon; i--) {
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3b01      	subs	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b05      	cmp	r3, #5
 800292e:	dcf3      	bgt.n	8002918 <Idle_init+0x4c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8002930:	2308      	movs	r3, #8
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	e012      	b.n	800295c <Idle_init+0x90>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002936:	4a18      	ldr	r2, [pc, #96]	; (8002998 <Idle_init+0xcc>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <Idle_init+0xcc>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	889b      	ldrh	r3, [r3, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	4619      	mov	r1, r3
 800294c:	f008 ff4c 	bl	800b7e8 <HAL_GPIO_WritePin>
			osDelay(200);
 8002950:	20c8      	movs	r0, #200	; 0xc8
 8002952:	f014 fcd9 	bl	8017308 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3b01      	subs	r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	dae9      	bge.n	8002936 <Idle_init+0x6a>
		}
		osDelay(3500);		// TODO: Reduce to 1000 for assembled instrument
 8002962:	f640 50ac 	movw	r0, #3500	; 0xdac
 8002966:	f014 fccf 	bl	8017308 <osDelay>
		IDLING = 1;
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <Idle_init+0xd0>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
		osThreadResume(Voltage_MonitorHandle);
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <Idle_init+0xc8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f014 fca6 	bl	80172c6 <osThreadResume>

		// Yield thread control
		osThreadYield();
 800297a:	f014 fc63 	bl	8017244 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800297e:	e7a9      	b.n	80028d4 <Idle_init+0x8>
 8002980:	24001a98 	.word	0x24001a98
 8002984:	24001add 	.word	0x24001add
 8002988:	24001da4 	.word	0x24001da4
 800298c:	24001adc 	.word	0x24001adc
 8002990:	24000314 	.word	0x24000314
 8002994:	24000fbc 	.word	0x24000fbc
 8002998:	0801b51c 	.word	0x0801b51c
 800299c:	24001ae5 	.word	0x24001ae5

080029a0 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b6:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <MX_GPIO_Init+0xe8>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029bc:	4a32      	ldr	r2, [pc, #200]	; (8002a88 <MX_GPIO_Init+0xe8>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <MX_GPIO_Init+0xe8>)
 80029c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029d4:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <MX_GPIO_Init+0xe8>)
 80029d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029da:	4a2b      	ldr	r2, [pc, #172]	; (8002a88 <MX_GPIO_Init+0xe8>)
 80029dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <MX_GPIO_Init+0xe8>)
 80029e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <MX_GPIO_Init+0xe8>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f8:	4a23      	ldr	r2, [pc, #140]	; (8002a88 <MX_GPIO_Init+0xe8>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a02:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <MX_GPIO_Init+0xe8>)
 8002a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <MX_GPIO_Init+0xe8>)
 8002a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a16:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <MX_GPIO_Init+0xe8>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <MX_GPIO_Init+0xe8>)
 8002a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002a34:	4815      	ldr	r0, [pc, #84]	; (8002a8c <MX_GPIO_Init+0xec>)
 8002a36:	f008 fed7 	bl	800b7e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2164      	movs	r1, #100	; 0x64
 8002a3e:	4814      	ldr	r0, [pc, #80]	; (8002a90 <MX_GPIO_Init+0xf0>)
 8002a40:	f008 fed2 	bl	800b7e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a44:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002a48:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	480b      	ldr	r0, [pc, #44]	; (8002a8c <MX_GPIO_Init+0xec>)
 8002a5e:	f008 fcfb 	bl	800b458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002a62:	2364      	movs	r3, #100	; 0x64
 8002a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	4805      	ldr	r0, [pc, #20]	; (8002a90 <MX_GPIO_Init+0xf0>)
 8002a7a:	f008 fced 	bl	800b458 <HAL_GPIO_Init>

}
 8002a7e:	bf00      	nop
 8002a80:	3728      	adds	r7, #40	; 0x28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	58024400 	.word	0x58024400
 8002a8c:	58020800 	.word	0x58020800
 8002a90:	58020400 	.word	0x58020400

08002a94 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002a9a:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <MX_I2C1_Init+0x7c>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002aa0:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <MX_I2C1_Init+0x80>)
 8002aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab0:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002abc:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ace:	480f      	ldr	r0, [pc, #60]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002ad0:	f008 fea4 	bl	800b81c <HAL_I2C_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ada:	f000 fff1 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ade:	2100      	movs	r1, #0
 8002ae0:	480a      	ldr	r0, [pc, #40]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002ae2:	f00b f943 	bl	800dd6c <HAL_I2CEx_ConfigAnalogFilter>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002aec:	f000 ffe8 	bl	8003ac0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002af0:	2100      	movs	r1, #0
 8002af2:	4806      	ldr	r0, [pc, #24]	; (8002b0c <MX_I2C1_Init+0x78>)
 8002af4:	f00b f985 	bl	800de02 <HAL_I2CEx_ConfigDigitalFilter>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002afe:	f000 ffdf 	bl	8003ac0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f00b f9ca 	bl	800de9c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2400193c 	.word	0x2400193c
 8002b10:	40005400 	.word	0x40005400
 8002b14:	00100517 	.word	0x00100517

08002b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0ba      	sub	sp, #232	; 0xe8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b30:	f107 0310 	add.w	r3, r7, #16
 8002b34:	22c0      	movs	r2, #192	; 0xc0
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f017 fe07 	bl	801a74c <memset>
  if(i2cHandle->Instance==I2C1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5d      	ldr	r2, [pc, #372]	; (8002cb8 <HAL_I2C_MspInit+0x1a0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	f040 80b3 	bne.w	8002cb0 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b4a:	f04f 0208 	mov.w	r2, #8
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00c fa6d 	bl	800f040 <HAL_RCCEx_PeriphCLKConfig>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002b6c:	f000 ffa8 	bl	8003ac0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b70:	4b52      	ldr	r3, [pc, #328]	; (8002cbc <HAL_I2C_MspInit+0x1a4>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b76:	4a51      	ldr	r2, [pc, #324]	; (8002cbc <HAL_I2C_MspInit+0x1a4>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b80:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <HAL_I2C_MspInit+0x1a4>)
 8002b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b96:	2312      	movs	r3, #18
 8002b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4842      	ldr	r0, [pc, #264]	; (8002cc0 <HAL_I2C_MspInit+0x1a8>)
 8002bb6:	f008 fc4f 	bl	800b458 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bba:	4b40      	ldr	r3, [pc, #256]	; (8002cbc <HAL_I2C_MspInit+0x1a4>)
 8002bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc0:	4a3e      	ldr	r2, [pc, #248]	; (8002cbc <HAL_I2C_MspInit+0x1a4>)
 8002bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bca:	4b3c      	ldr	r3, [pc, #240]	; (8002cbc <HAL_I2C_MspInit+0x1a4>)
 8002bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002bd8:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002bda:	4a3b      	ldr	r2, [pc, #236]	; (8002cc8 <HAL_I2C_MspInit+0x1b0>)
 8002bdc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002bde:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002be0:	2222      	movs	r2, #34	; 0x22
 8002be2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bea:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf0:	4b34      	ldr	r3, [pc, #208]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bf6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf8:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bfe:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002c04:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c0a:	4b2e      	ldr	r3, [pc, #184]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002c0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c10:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c12:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002c18:	482a      	ldr	r0, [pc, #168]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002c1a:	f005 faed 	bl	80081f8 <HAL_DMA_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002c24:	f000 ff4c 	bl	8003ac0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a26      	ldr	r2, [pc, #152]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c2e:	4a25      	ldr	r2, [pc, #148]	; (8002cc4 <HAL_I2C_MspInit+0x1ac>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002c34:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c36:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <HAL_I2C_MspInit+0x1b8>)
 8002c38:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c3c:	2221      	movs	r2, #33	; 0x21
 8002c3e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c52:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002c60:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c66:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c6c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002c74:	4815      	ldr	r0, [pc, #84]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c76:	f005 fabf 	bl	80081f8 <HAL_DMA_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002c80:	f000 ff1e 	bl	8003ac0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c88:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c8a:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <HAL_I2C_MspInit+0x1b4>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2105      	movs	r1, #5
 8002c94:	201f      	movs	r0, #31
 8002c96:	f004 fe81 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c9a:	201f      	movs	r0, #31
 8002c9c:	f004 fe98 	bl	80079d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2105      	movs	r1, #5
 8002ca4:	2020      	movs	r0, #32
 8002ca6:	f004 fe79 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002caa:	2020      	movs	r0, #32
 8002cac:	f004 fe90 	bl	80079d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	37e8      	adds	r7, #232	; 0xe8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40005400 	.word	0x40005400
 8002cbc:	58024400 	.word	0x58024400
 8002cc0:	58020400 	.word	0x58020400
 8002cc4:	24001990 	.word	0x24001990
 8002cc8:	400200a0 	.word	0x400200a0
 8002ccc:	24001a08 	.word	0x24001a08
 8002cd0:	400200b8 	.word	0x400200b8

08002cd4 <__NVIC_SystemReset>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002cd8:	f3bf 8f4f 	dsb	sy
}
 8002cdc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <__NVIC_SystemReset+0x24>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002ce6:	4904      	ldr	r1, [pc, #16]	; (8002cf8 <__NVIC_SystemReset+0x24>)
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_SystemReset+0x28>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cee:	f3bf 8f4f 	dsb	sy
}
 8002cf2:	bf00      	nop
    __NOP();
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <__NVIC_SystemReset+0x20>
 8002cf8:	e000ed00 	.word	0xe000ed00
 8002cfc:	05fa0004 	.word	0x05fa0004

08002d00 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a20      	ldr	r2, [pc, #128]	; (8002d8c <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d106      	bne.n	8002d1e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f014 fb50 	bl	80173bc <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002d1c:	e032      	b.n	8002d84 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d12b      	bne.n	8002d7e <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2102      	movs	r1, #2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f014 fb40 	bl	80173bc <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d113      	bne.n	8002d6e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f014 fb35 	bl	80173bc <osEventFlagsSet>
			if (HK_ENABLED){
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2104      	movs	r1, #4
 8002d62:	4618      	mov	r0, r3
 8002d64:	f014 fb2a 	bl	80173bc <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002d7a:	701a      	strb	r2, [r3, #0]
}
 8002d7c:	e002      	b.n	8002d84 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002d7e:	480a      	ldr	r0, [pc, #40]	; (8002da8 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002d80:	f017 fd5a 	bl	801a838 <puts>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	24001da4 	.word	0x24001da4
 8002d90:	24001a90 	.word	0x24001a90
 8002d94:	24001df0 	.word	0x24001df0
 8002d98:	24001add 	.word	0x24001add
 8002d9c:	24001ae4 	.word	0x24001ae4
 8002da0:	24001a94 	.word	0x24001a94
 8002da4:	24001adc 	.word	0x24001adc
 8002da8:	0801b1e8 	.word	0x0801b1e8

08002dac <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002db4:	2201      	movs	r2, #1
 8002db6:	49f7      	ldr	r1, [pc, #988]	; (8003194 <HAL_UART_RxCpltCallback+0x3e8>)
 8002db8:	48f7      	ldr	r0, [pc, #988]	; (8003198 <HAL_UART_RxCpltCallback+0x3ec>)
 8002dba:	f011 fcaf 	bl	801471c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002dbe:	4bf5      	ldr	r3, [pc, #980]	; (8003194 <HAL_UART_RxCpltCallback+0x3e8>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2bef      	cmp	r3, #239	; 0xef
 8002dc8:	f200 843e 	bhi.w	8003648 <HAL_UART_RxCpltCallback+0x89c>
 8002dcc:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <HAL_UART_RxCpltCallback+0x28>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	080031b1 	.word	0x080031b1
 8002dd8:	080031e1 	.word	0x080031e1
 8002ddc:	08003251 	.word	0x08003251
 8002de0:	0800328b 	.word	0x0800328b
 8002de4:	080032c3 	.word	0x080032c3
 8002de8:	080032fd 	.word	0x080032fd
 8002dec:	08003339 	.word	0x08003339
 8002df0:	08003375 	.word	0x08003375
 8002df4:	080033af 	.word	0x080033af
 8002df8:	080033e3 	.word	0x080033e3
 8002dfc:	08003417 	.word	0x08003417
 8002e00:	08003449 	.word	0x08003449
 8002e04:	08003473 	.word	0x08003473
 8002e08:	0800354f 	.word	0x0800354f
 8002e0c:	080035b7 	.word	0x080035b7
 8002e10:	080035df 	.word	0x080035df
 8002e14:	0800319d 	.word	0x0800319d
 8002e18:	080031c5 	.word	0x080031c5
 8002e1c:	08003233 	.word	0x08003233
 8002e20:	0800326f 	.word	0x0800326f
 8002e24:	080032a7 	.word	0x080032a7
 8002e28:	080032df 	.word	0x080032df
 8002e2c:	0800331b 	.word	0x0800331b
 8002e30:	08003357 	.word	0x08003357
 8002e34:	08003393 	.word	0x08003393
 8002e38:	080033cb 	.word	0x080033cb
 8002e3c:	080033f3 	.word	0x080033f3
 8002e40:	0800342d 	.word	0x0800342d
 8002e44:	08003459 	.word	0x08003459
 8002e48:	0800350d 	.word	0x0800350d
 8002e4c:	0800358f 	.word	0x0800358f
 8002e50:	08003649 	.word	0x08003649
 8002e54:	08003649 	.word	0x08003649
 8002e58:	08003649 	.word	0x08003649
 8002e5c:	08003649 	.word	0x08003649
 8002e60:	08003649 	.word	0x08003649
 8002e64:	08003649 	.word	0x08003649
 8002e68:	08003649 	.word	0x08003649
 8002e6c:	08003649 	.word	0x08003649
 8002e70:	08003649 	.word	0x08003649
 8002e74:	08003649 	.word	0x08003649
 8002e78:	08003649 	.word	0x08003649
 8002e7c:	08003649 	.word	0x08003649
 8002e80:	08003649 	.word	0x08003649
 8002e84:	08003649 	.word	0x08003649
 8002e88:	08003649 	.word	0x08003649
 8002e8c:	08003649 	.word	0x08003649
 8002e90:	08003649 	.word	0x08003649
 8002e94:	08003649 	.word	0x08003649
 8002e98:	08003649 	.word	0x08003649
 8002e9c:	08003649 	.word	0x08003649
 8002ea0:	08003649 	.word	0x08003649
 8002ea4:	08003649 	.word	0x08003649
 8002ea8:	08003649 	.word	0x08003649
 8002eac:	08003649 	.word	0x08003649
 8002eb0:	08003649 	.word	0x08003649
 8002eb4:	08003649 	.word	0x08003649
 8002eb8:	08003649 	.word	0x08003649
 8002ebc:	08003649 	.word	0x08003649
 8002ec0:	08003649 	.word	0x08003649
 8002ec4:	08003649 	.word	0x08003649
 8002ec8:	08003649 	.word	0x08003649
 8002ecc:	08003649 	.word	0x08003649
 8002ed0:	08003649 	.word	0x08003649
 8002ed4:	08003649 	.word	0x08003649
 8002ed8:	08003649 	.word	0x08003649
 8002edc:	08003649 	.word	0x08003649
 8002ee0:	08003649 	.word	0x08003649
 8002ee4:	08003649 	.word	0x08003649
 8002ee8:	08003649 	.word	0x08003649
 8002eec:	08003649 	.word	0x08003649
 8002ef0:	08003649 	.word	0x08003649
 8002ef4:	08003649 	.word	0x08003649
 8002ef8:	08003649 	.word	0x08003649
 8002efc:	08003649 	.word	0x08003649
 8002f00:	08003649 	.word	0x08003649
 8002f04:	08003649 	.word	0x08003649
 8002f08:	08003649 	.word	0x08003649
 8002f0c:	08003649 	.word	0x08003649
 8002f10:	08003649 	.word	0x08003649
 8002f14:	08003649 	.word	0x08003649
 8002f18:	08003649 	.word	0x08003649
 8002f1c:	08003649 	.word	0x08003649
 8002f20:	08003649 	.word	0x08003649
 8002f24:	08003649 	.word	0x08003649
 8002f28:	08003649 	.word	0x08003649
 8002f2c:	08003649 	.word	0x08003649
 8002f30:	08003649 	.word	0x08003649
 8002f34:	08003649 	.word	0x08003649
 8002f38:	08003649 	.word	0x08003649
 8002f3c:	08003649 	.word	0x08003649
 8002f40:	08003649 	.word	0x08003649
 8002f44:	08003649 	.word	0x08003649
 8002f48:	08003649 	.word	0x08003649
 8002f4c:	08003649 	.word	0x08003649
 8002f50:	08003649 	.word	0x08003649
 8002f54:	08003649 	.word	0x08003649
 8002f58:	08003649 	.word	0x08003649
 8002f5c:	08003649 	.word	0x08003649
 8002f60:	08003649 	.word	0x08003649
 8002f64:	08003649 	.word	0x08003649
 8002f68:	08003649 	.word	0x08003649
 8002f6c:	08003649 	.word	0x08003649
 8002f70:	08003649 	.word	0x08003649
 8002f74:	08003649 	.word	0x08003649
 8002f78:	08003649 	.word	0x08003649
 8002f7c:	08003649 	.word	0x08003649
 8002f80:	08003649 	.word	0x08003649
 8002f84:	08003649 	.word	0x08003649
 8002f88:	08003649 	.word	0x08003649
 8002f8c:	08003649 	.word	0x08003649
 8002f90:	08003649 	.word	0x08003649
 8002f94:	08003649 	.word	0x08003649
 8002f98:	08003649 	.word	0x08003649
 8002f9c:	08003649 	.word	0x08003649
 8002fa0:	08003649 	.word	0x08003649
 8002fa4:	08003649 	.word	0x08003649
 8002fa8:	08003649 	.word	0x08003649
 8002fac:	08003649 	.word	0x08003649
 8002fb0:	08003649 	.word	0x08003649
 8002fb4:	08003649 	.word	0x08003649
 8002fb8:	08003649 	.word	0x08003649
 8002fbc:	08003649 	.word	0x08003649
 8002fc0:	08003649 	.word	0x08003649
 8002fc4:	08003649 	.word	0x08003649
 8002fc8:	08003649 	.word	0x08003649
 8002fcc:	08003649 	.word	0x08003649
 8002fd0:	08003649 	.word	0x08003649
 8002fd4:	08003649 	.word	0x08003649
 8002fd8:	08003649 	.word	0x08003649
 8002fdc:	08003649 	.word	0x08003649
 8002fe0:	08003649 	.word	0x08003649
 8002fe4:	08003649 	.word	0x08003649
 8002fe8:	08003649 	.word	0x08003649
 8002fec:	08003649 	.word	0x08003649
 8002ff0:	08003649 	.word	0x08003649
 8002ff4:	08003649 	.word	0x08003649
 8002ff8:	08003649 	.word	0x08003649
 8002ffc:	08003649 	.word	0x08003649
 8003000:	08003649 	.word	0x08003649
 8003004:	08003649 	.word	0x08003649
 8003008:	08003649 	.word	0x08003649
 800300c:	08003649 	.word	0x08003649
 8003010:	08003649 	.word	0x08003649
 8003014:	08003649 	.word	0x08003649
 8003018:	08003649 	.word	0x08003649
 800301c:	08003649 	.word	0x08003649
 8003020:	08003649 	.word	0x08003649
 8003024:	08003649 	.word	0x08003649
 8003028:	08003649 	.word	0x08003649
 800302c:	08003649 	.word	0x08003649
 8003030:	08003649 	.word	0x08003649
 8003034:	08003649 	.word	0x08003649
 8003038:	08003649 	.word	0x08003649
 800303c:	08003649 	.word	0x08003649
 8003040:	08003649 	.word	0x08003649
 8003044:	08003649 	.word	0x08003649
 8003048:	08003649 	.word	0x08003649
 800304c:	08003649 	.word	0x08003649
 8003050:	08003649 	.word	0x08003649
 8003054:	08003649 	.word	0x08003649
 8003058:	08003649 	.word	0x08003649
 800305c:	08003649 	.word	0x08003649
 8003060:	08003649 	.word	0x08003649
 8003064:	08003649 	.word	0x08003649
 8003068:	08003649 	.word	0x08003649
 800306c:	08003649 	.word	0x08003649
 8003070:	08003649 	.word	0x08003649
 8003074:	08003649 	.word	0x08003649
 8003078:	08003649 	.word	0x08003649
 800307c:	08003649 	.word	0x08003649
 8003080:	08003649 	.word	0x08003649
 8003084:	08003649 	.word	0x08003649
 8003088:	08003649 	.word	0x08003649
 800308c:	08003649 	.word	0x08003649
 8003090:	0800361b 	.word	0x0800361b
 8003094:	08003649 	.word	0x08003649
 8003098:	08003649 	.word	0x08003649
 800309c:	08003649 	.word	0x08003649
 80030a0:	08003649 	.word	0x08003649
 80030a4:	08003649 	.word	0x08003649
 80030a8:	08003649 	.word	0x08003649
 80030ac:	08003649 	.word	0x08003649
 80030b0:	08003649 	.word	0x08003649
 80030b4:	08003649 	.word	0x08003649
 80030b8:	08003649 	.word	0x08003649
 80030bc:	08003649 	.word	0x08003649
 80030c0:	08003649 	.word	0x08003649
 80030c4:	08003649 	.word	0x08003649
 80030c8:	08003649 	.word	0x08003649
 80030cc:	08003649 	.word	0x08003649
 80030d0:	08003621 	.word	0x08003621
 80030d4:	08003649 	.word	0x08003649
 80030d8:	08003649 	.word	0x08003649
 80030dc:	08003649 	.word	0x08003649
 80030e0:	08003649 	.word	0x08003649
 80030e4:	08003649 	.word	0x08003649
 80030e8:	08003649 	.word	0x08003649
 80030ec:	08003649 	.word	0x08003649
 80030f0:	08003649 	.word	0x08003649
 80030f4:	08003649 	.word	0x08003649
 80030f8:	08003649 	.word	0x08003649
 80030fc:	08003649 	.word	0x08003649
 8003100:	08003649 	.word	0x08003649
 8003104:	08003649 	.word	0x08003649
 8003108:	08003649 	.word	0x08003649
 800310c:	08003649 	.word	0x08003649
 8003110:	0800362f 	.word	0x0800362f
 8003114:	08003607 	.word	0x08003607
 8003118:	08003649 	.word	0x08003649
 800311c:	08003649 	.word	0x08003649
 8003120:	08003649 	.word	0x08003649
 8003124:	08003649 	.word	0x08003649
 8003128:	08003649 	.word	0x08003649
 800312c:	08003649 	.word	0x08003649
 8003130:	08003649 	.word	0x08003649
 8003134:	08003649 	.word	0x08003649
 8003138:	08003649 	.word	0x08003649
 800313c:	08003649 	.word	0x08003649
 8003140:	08003649 	.word	0x08003649
 8003144:	08003649 	.word	0x08003649
 8003148:	08003649 	.word	0x08003649
 800314c:	08003649 	.word	0x08003649
 8003150:	0800363d 	.word	0x0800363d
 8003154:	080035f3 	.word	0x080035f3
 8003158:	08003649 	.word	0x08003649
 800315c:	08003649 	.word	0x08003649
 8003160:	08003649 	.word	0x08003649
 8003164:	08003649 	.word	0x08003649
 8003168:	08003649 	.word	0x08003649
 800316c:	08003649 	.word	0x08003649
 8003170:	08003649 	.word	0x08003649
 8003174:	08003649 	.word	0x08003649
 8003178:	08003649 	.word	0x08003649
 800317c:	08003649 	.word	0x08003649
 8003180:	08003649 	.word	0x08003649
 8003184:	08003649 	.word	0x08003649
 8003188:	08003649 	.word	0x08003649
 800318c:	08003649 	.word	0x08003649
 8003190:	08003643 	.word	0x08003643
 8003194:	24001a9c 	.word	0x24001a9c
 8003198:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 800319c:	48b8      	ldr	r0, [pc, #736]	; (8003480 <HAL_UART_RxCpltCallback+0x6d4>)
 800319e:	f017 fb4b 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80031a2:	4bb8      	ldr	r3, [pc, #736]	; (8003484 <HAL_UART_RxCpltCallback+0x6d8>)
 80031a4:	2104      	movs	r1, #4
 80031a6:	2201      	movs	r2, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f008 fb1d 	bl	800b7e8 <HAL_GPIO_WritePin>
		break;
 80031ae:	e256      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 80031b0:	48b5      	ldr	r0, [pc, #724]	; (8003488 <HAL_UART_RxCpltCallback+0x6dc>)
 80031b2:	f017 fb41 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 80031b6:	4bb3      	ldr	r3, [pc, #716]	; (8003484 <HAL_UART_RxCpltCallback+0x6d8>)
 80031b8:	2104      	movs	r1, #4
 80031ba:	2200      	movs	r2, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f008 fb13 	bl	800b7e8 <HAL_GPIO_WritePin>
		break;
 80031c2:	e24c      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 80031c4:	48b1      	ldr	r0, [pc, #708]	; (800348c <HAL_UART_RxCpltCallback+0x6e0>)
 80031c6:	f017 fb37 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 80031ca:	4bae      	ldr	r3, [pc, #696]	; (8003484 <HAL_UART_RxCpltCallback+0x6d8>)
 80031cc:	2120      	movs	r1, #32
 80031ce:	2201      	movs	r2, #1
 80031d0:	4618      	mov	r0, r3
 80031d2:	f008 fb09 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 80031d6:	2101      	movs	r1, #1
 80031d8:	2008      	movs	r0, #8
 80031da:	f002 fc95 	bl	8005b08 <set_rail_monitor_enable>
		break;
 80031de:	e23e      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 80031e0:	48ab      	ldr	r0, [pc, #684]	; (8003490 <HAL_UART_RxCpltCallback+0x6e4>)
 80031e2:	f017 fb29 	bl	801a838 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 80031e6:	2308      	movs	r3, #8
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	e00f      	b.n	800320c <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80031ec:	4aa9      	ldr	r2, [pc, #676]	; (8003494 <HAL_UART_RxCpltCallback+0x6e8>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80031f4:	4aa7      	ldr	r2, [pc, #668]	; (8003494 <HAL_UART_RxCpltCallback+0x6e8>)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	889b      	ldrh	r3, [r3, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	4619      	mov	r1, r3
 8003202:	f008 faf1 	bl	800b7e8 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3b01      	subs	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	dcec      	bgt.n	80031ec <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003212:	2310      	movs	r3, #16
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	e008      	b.n	800322a <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f002 fc72 	bl	8005b08 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	3b01      	subs	r3, #1
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b07      	cmp	r3, #7
 800322e:	dcf3      	bgt.n	8003218 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 8003230:	e215      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8003232:	4899      	ldr	r0, [pc, #612]	; (8003498 <HAL_UART_RxCpltCallback+0x6ec>)
 8003234:	f017 fb00 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8003238:	4b98      	ldr	r3, [pc, #608]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 800323a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800323e:	2201      	movs	r2, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f008 fad1 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8003246:	2101      	movs	r1, #1
 8003248:	2009      	movs	r0, #9
 800324a:	f002 fc5d 	bl	8005b08 <set_rail_monitor_enable>

		break;
 800324e:	e206      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003250:	4893      	ldr	r0, [pc, #588]	; (80034a0 <HAL_UART_RxCpltCallback+0x6f4>)
 8003252:	f017 faf1 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8003256:	4b91      	ldr	r3, [pc, #580]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 8003258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800325c:	2200      	movs	r2, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f008 fac2 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8003264:	2100      	movs	r1, #0
 8003266:	2009      	movs	r0, #9
 8003268:	f002 fc4e 	bl	8005b08 <set_rail_monitor_enable>
		break;
 800326c:	e1f7      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 800326e:	488d      	ldr	r0, [pc, #564]	; (80034a4 <HAL_UART_RxCpltCallback+0x6f8>)
 8003270:	f017 fae2 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8003274:	4b89      	ldr	r3, [pc, #548]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	2201      	movs	r2, #1
 800327a:	4618      	mov	r0, r3
 800327c:	f008 fab4 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8003280:	2101      	movs	r1, #1
 8003282:	200a      	movs	r0, #10
 8003284:	f002 fc40 	bl	8005b08 <set_rail_monitor_enable>

		break;
 8003288:	e1e9      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 800328a:	4887      	ldr	r0, [pc, #540]	; (80034a8 <HAL_UART_RxCpltCallback+0x6fc>)
 800328c:	f017 fad4 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8003290:	4b82      	ldr	r3, [pc, #520]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 8003292:	2180      	movs	r1, #128	; 0x80
 8003294:	2200      	movs	r2, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f008 faa6 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 800329c:	2100      	movs	r1, #0
 800329e:	200a      	movs	r0, #10
 80032a0:	f002 fc32 	bl	8005b08 <set_rail_monitor_enable>
		break;
 80032a4:	e1db      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 80032a6:	4881      	ldr	r0, [pc, #516]	; (80034ac <HAL_UART_RxCpltCallback+0x700>)
 80032a8:	f017 fac6 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 80032ac:	4b7b      	ldr	r3, [pc, #492]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 80032ae:	2140      	movs	r1, #64	; 0x40
 80032b0:	2201      	movs	r2, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f008 fa98 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 80032b8:	2101      	movs	r1, #1
 80032ba:	200b      	movs	r0, #11
 80032bc:	f002 fc24 	bl	8005b08 <set_rail_monitor_enable>

		break;
 80032c0:	e1cd      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 80032c2:	487b      	ldr	r0, [pc, #492]	; (80034b0 <HAL_UART_RxCpltCallback+0x704>)
 80032c4:	f017 fab8 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80032c8:	4b74      	ldr	r3, [pc, #464]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 80032ca:	2140      	movs	r1, #64	; 0x40
 80032cc:	2200      	movs	r2, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f008 fa8a 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 80032d4:	2100      	movs	r1, #0
 80032d6:	200b      	movs	r0, #11
 80032d8:	f002 fc16 	bl	8005b08 <set_rail_monitor_enable>
		break;
 80032dc:	e1bf      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 80032de:	4875      	ldr	r0, [pc, #468]	; (80034b4 <HAL_UART_RxCpltCallback+0x708>)
 80032e0:	f017 faaa 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80032e4:	4b6d      	ldr	r3, [pc, #436]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 80032e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ea:	2201      	movs	r2, #1
 80032ec:	4618      	mov	r0, r3
 80032ee:	f008 fa7b 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80032f2:	2101      	movs	r1, #1
 80032f4:	200c      	movs	r0, #12
 80032f6:	f002 fc07 	bl	8005b08 <set_rail_monitor_enable>

		break;
 80032fa:	e1b0      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80032fc:	486e      	ldr	r0, [pc, #440]	; (80034b8 <HAL_UART_RxCpltCallback+0x70c>)
 80032fe:	f017 fa9b 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8003302:	4b66      	ldr	r3, [pc, #408]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 8003304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003308:	2200      	movs	r2, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f008 fa6c 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8003310:	2100      	movs	r1, #0
 8003312:	200c      	movs	r0, #12
 8003314:	f002 fbf8 	bl	8005b08 <set_rail_monitor_enable>
		break;
 8003318:	e1a1      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 800331a:	4868      	ldr	r0, [pc, #416]	; (80034bc <HAL_UART_RxCpltCallback+0x710>)
 800331c:	f017 fa8c 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8003320:	4b5e      	ldr	r3, [pc, #376]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 8003322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003326:	2201      	movs	r2, #1
 8003328:	4618      	mov	r0, r3
 800332a:	f008 fa5d 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 800332e:	2101      	movs	r1, #1
 8003330:	200d      	movs	r0, #13
 8003332:	f002 fbe9 	bl	8005b08 <set_rail_monitor_enable>

		break;
 8003336:	e192      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8003338:	4861      	ldr	r0, [pc, #388]	; (80034c0 <HAL_UART_RxCpltCallback+0x714>)
 800333a:	f017 fa7d 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 800333e:	4b57      	ldr	r3, [pc, #348]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 8003340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003344:	2200      	movs	r2, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f008 fa4e 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 800334c:	2100      	movs	r1, #0
 800334e:	200d      	movs	r0, #13
 8003350:	f002 fbda 	bl	8005b08 <set_rail_monitor_enable>
		break;
 8003354:	e183      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8003356:	485b      	ldr	r0, [pc, #364]	; (80034c4 <HAL_UART_RxCpltCallback+0x718>)
 8003358:	f017 fa6e 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800335c:	4b4f      	ldr	r3, [pc, #316]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 800335e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003362:	2201      	movs	r2, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f008 fa3f 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 800336a:	2101      	movs	r1, #1
 800336c:	200f      	movs	r0, #15
 800336e:	f002 fbcb 	bl	8005b08 <set_rail_monitor_enable>

		break;
 8003372:	e174      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8003374:	4854      	ldr	r0, [pc, #336]	; (80034c8 <HAL_UART_RxCpltCallback+0x71c>)
 8003376:	f017 fa5f 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800337a:	4b48      	ldr	r3, [pc, #288]	; (800349c <HAL_UART_RxCpltCallback+0x6f0>)
 800337c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003380:	2200      	movs	r2, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f008 fa30 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8003388:	2100      	movs	r1, #0
 800338a:	200f      	movs	r0, #15
 800338c:	f002 fbbc 	bl	8005b08 <set_rail_monitor_enable>
		break;
 8003390:	e165      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8003392:	484e      	ldr	r0, [pc, #312]	; (80034cc <HAL_UART_RxCpltCallback+0x720>)
 8003394:	f017 fa50 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <HAL_UART_RxCpltCallback+0x6d8>)
 800339a:	2140      	movs	r1, #64	; 0x40
 800339c:	2201      	movs	r2, #1
 800339e:	4618      	mov	r0, r3
 80033a0:	f008 fa22 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 80033a4:	2101      	movs	r1, #1
 80033a6:	2010      	movs	r0, #16
 80033a8:	f002 fbae 	bl	8005b08 <set_rail_monitor_enable>

		break;
 80033ac:	e157      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 80033ae:	4848      	ldr	r0, [pc, #288]	; (80034d0 <HAL_UART_RxCpltCallback+0x724>)
 80033b0:	f017 fa42 	bl	801a838 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80033b4:	4b33      	ldr	r3, [pc, #204]	; (8003484 <HAL_UART_RxCpltCallback+0x6d8>)
 80033b6:	2140      	movs	r1, #64	; 0x40
 80033b8:	2200      	movs	r2, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f008 fa14 	bl	800b7e8 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 80033c0:	2100      	movs	r1, #0
 80033c2:	2010      	movs	r0, #16
 80033c4:	f002 fba0 	bl	8005b08 <set_rail_monitor_enable>
		break;
 80033c8:	e149      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 80033ca:	4842      	ldr	r0, [pc, #264]	; (80034d4 <HAL_UART_RxCpltCallback+0x728>)
 80033cc:	f017 fa34 	bl	801a838 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 80033d0:	2300      	movs	r3, #0
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2320      	movs	r3, #32
 80033d6:	4a40      	ldr	r2, [pc, #256]	; (80034d8 <HAL_UART_RxCpltCallback+0x72c>)
 80033d8:	2100      	movs	r1, #0
 80033da:	4840      	ldr	r0, [pc, #256]	; (80034dc <HAL_UART_RxCpltCallback+0x730>)
 80033dc:	f004 fb80 	bl	8007ae0 <HAL_DAC_Start_DMA>
		break;
 80033e0:	e13d      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 80033e2:	483f      	ldr	r0, [pc, #252]	; (80034e0 <HAL_UART_RxCpltCallback+0x734>)
 80033e4:	f017 fa28 	bl	801a838 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80033e8:	2100      	movs	r1, #0
 80033ea:	483c      	ldr	r0, [pc, #240]	; (80034dc <HAL_UART_RxCpltCallback+0x730>)
 80033ec:	f004 fc38 	bl	8007c60 <HAL_DAC_Stop_DMA>
		break;
 80033f0:	e135      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80033f2:	483c      	ldr	r0, [pc, #240]	; (80034e4 <HAL_UART_RxCpltCallback+0x738>)
 80033f4:	f017 fa20 	bl	801a838 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80033f8:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_UART_RxCpltCallback+0x73c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f013 ffdc 	bl	80173bc <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8003404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003408:	f44f 729c 	mov.w	r2, #312	; 0x138
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <HAL_UART_RxCpltCallback+0x740>)
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]

		break;
 8003414:	e123      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8003416:	4836      	ldr	r0, [pc, #216]	; (80034f0 <HAL_UART_RxCpltCallback+0x744>)
 8003418:	f017 fa0e 	bl	801a838 <puts>
		ERPA_ENABLED = 0;
 800341c:	4b33      	ldr	r3, [pc, #204]	; (80034ec <HAL_UART_RxCpltCallback+0x740>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8003422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800342a:	e118      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 800342c:	4831      	ldr	r0, [pc, #196]	; (80034f4 <HAL_UART_RxCpltCallback+0x748>)
 800342e:	f017 fa03 	bl	801a838 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003432:	2100      	movs	r1, #0
 8003434:	4830      	ldr	r0, [pc, #192]	; (80034f8 <HAL_UART_RxCpltCallback+0x74c>)
 8003436:	f00f fc91 	bl	8012d5c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800343a:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <HAL_UART_RxCpltCallback+0x73c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f013 ffbb 	bl	80173bc <osEventFlagsSet>
		break;
 8003446:	e10a      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8003448:	482c      	ldr	r0, [pc, #176]	; (80034fc <HAL_UART_RxCpltCallback+0x750>)
 800344a:	f017 f9f5 	bl	801a838 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800344e:	2100      	movs	r1, #0
 8003450:	4829      	ldr	r0, [pc, #164]	; (80034f8 <HAL_UART_RxCpltCallback+0x74c>)
 8003452:	f00f fddd 	bl	8013010 <HAL_TIM_OC_Stop_IT>
		break;
 8003456:	e102      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8003458:	4829      	ldr	r0, [pc, #164]	; (8003500 <HAL_UART_RxCpltCallback+0x754>)
 800345a:	f017 f9ed 	bl	801a838 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_UART_RxCpltCallback+0x73c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2104      	movs	r1, #4
 8003464:	4618      	mov	r0, r3
 8003466:	f013 ffa9 	bl	80173bc <osEventFlagsSet>
		HK_ENABLED = 1;
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <HAL_UART_RxCpltCallback+0x758>)
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]
		break;
 8003470:	e0f5      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8003472:	4825      	ldr	r0, [pc, #148]	; (8003508 <HAL_UART_RxCpltCallback+0x75c>)
 8003474:	f017 f9e0 	bl	801a838 <puts>
		HK_ENABLED = 0;
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <HAL_UART_RxCpltCallback+0x758>)
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
		break;
 800347e:	e0ee      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
 8003480:	0801b200 	.word	0x0801b200
 8003484:	58020400 	.word	0x58020400
 8003488:	0801b208 	.word	0x0801b208
 800348c:	0801b214 	.word	0x0801b214
 8003490:	0801b220 	.word	0x0801b220
 8003494:	0801b51c 	.word	0x0801b51c
 8003498:	0801b22c 	.word	0x0801b22c
 800349c:	58020800 	.word	0x58020800
 80034a0:	0801b238 	.word	0x0801b238
 80034a4:	0801b248 	.word	0x0801b248
 80034a8:	0801b254 	.word	0x0801b254
 80034ac:	0801b260 	.word	0x0801b260
 80034b0:	0801b26c 	.word	0x0801b26c
 80034b4:	0801b27c 	.word	0x0801b27c
 80034b8:	0801b288 	.word	0x0801b288
 80034bc:	0801b294 	.word	0x0801b294
 80034c0:	0801b2a0 	.word	0x0801b2a0
 80034c4:	0801b2ac 	.word	0x0801b2ac
 80034c8:	0801b2bc 	.word	0x0801b2bc
 80034cc:	0801b2cc 	.word	0x0801b2cc
 80034d0:	0801b2d8 	.word	0x0801b2d8
 80034d4:	0801b2e8 	.word	0x0801b2e8
 80034d8:	2400003c 	.word	0x2400003c
 80034dc:	24000314 	.word	0x24000314
 80034e0:	0801b2f8 	.word	0x0801b2f8
 80034e4:	0801b308 	.word	0x0801b308
 80034e8:	24001a90 	.word	0x24001a90
 80034ec:	24001add 	.word	0x24001add
 80034f0:	0801b310 	.word	0x0801b310
 80034f4:	0801b31c 	.word	0x0801b31c
 80034f8:	24001da4 	.word	0x24001da4
 80034fc:	0801b324 	.word	0x0801b324
 8003500:	0801b32c 	.word	0x0801b32c
 8003504:	24001adc 	.word	0x24001adc
 8003508:	0801b334 	.word	0x0801b334
	}
	case 0x1D: {
		printf("Step Up\n");
 800350c:	4856      	ldr	r0, [pc, #344]	; (8003668 <HAL_UART_RxCpltCallback+0x8bc>)
 800350e:	f017 f993 	bl	801a838 <puts>
		if (step < 14) {
 8003512:	4b56      	ldr	r3, [pc, #344]	; (800366c <HAL_UART_RxCpltCallback+0x8c0>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b0d      	cmp	r3, #13
 800351a:	f200 8099 	bhi.w	8003650 <HAL_UART_RxCpltCallback+0x8a4>
			step += 2;
 800351e:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_UART_RxCpltCallback+0x8c0>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3302      	adds	r3, #2
 8003526:	b2da      	uxtb	r2, r3
 8003528:	4b50      	ldr	r3, [pc, #320]	; (800366c <HAL_UART_RxCpltCallback+0x8c0>)
 800352a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800352c:	4b4f      	ldr	r3, [pc, #316]	; (800366c <HAL_UART_RxCpltCallback+0x8c0>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	4b4e      	ldr	r3, [pc, #312]	; (8003670 <HAL_UART_RxCpltCallback+0x8c4>)
 8003536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353a:	2200      	movs	r2, #0
 800353c:	2100      	movs	r1, #0
 800353e:	484d      	ldr	r0, [pc, #308]	; (8003674 <HAL_UART_RxCpltCallback+0x8c8>)
 8003540:	f004 fc31 	bl	8007da6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003544:	2100      	movs	r1, #0
 8003546:	484b      	ldr	r0, [pc, #300]	; (8003674 <HAL_UART_RxCpltCallback+0x8c8>)
 8003548:	f004 fa72 	bl	8007a30 <HAL_DAC_Start>
		}
		break;
 800354c:	e080      	b.n	8003650 <HAL_UART_RxCpltCallback+0x8a4>
	}
	case 0x0D: {
		printf("Step Down\n");
 800354e:	484a      	ldr	r0, [pc, #296]	; (8003678 <HAL_UART_RxCpltCallback+0x8cc>)
 8003550:	f017 f972 	bl	801a838 <puts>
		if (step > 1) {
 8003554:	4b45      	ldr	r3, [pc, #276]	; (800366c <HAL_UART_RxCpltCallback+0x8c0>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d97a      	bls.n	8003654 <HAL_UART_RxCpltCallback+0x8a8>
			step -= 2;
 800355e:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_UART_RxCpltCallback+0x8c0>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3b02      	subs	r3, #2
 8003566:	b2da      	uxtb	r2, r3
 8003568:	4b40      	ldr	r3, [pc, #256]	; (800366c <HAL_UART_RxCpltCallback+0x8c0>)
 800356a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800356c:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_UART_RxCpltCallback+0x8c0>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <HAL_UART_RxCpltCallback+0x8c4>)
 8003576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357a:	2200      	movs	r2, #0
 800357c:	2100      	movs	r1, #0
 800357e:	483d      	ldr	r0, [pc, #244]	; (8003674 <HAL_UART_RxCpltCallback+0x8c8>)
 8003580:	f004 fc11 	bl	8007da6 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003584:	2100      	movs	r1, #0
 8003586:	483b      	ldr	r0, [pc, #236]	; (8003674 <HAL_UART_RxCpltCallback+0x8c8>)
 8003588:	f004 fa52 	bl	8007a30 <HAL_DAC_Start>
		}
		break;
 800358c:	e062      	b.n	8003654 <HAL_UART_RxCpltCallback+0x8a8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 800358e:	483b      	ldr	r0, [pc, #236]	; (800367c <HAL_UART_RxCpltCallback+0x8d0>)
 8003590:	f017 f952 	bl	801a838 <puts>
		if (cadence <= 50000) {
 8003594:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <HAL_UART_RxCpltCallback+0x8d4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f24c 3250 	movw	r2, #50000	; 0xc350
 800359c:	4293      	cmp	r3, r2
 800359e:	d85b      	bhi.n	8003658 <HAL_UART_RxCpltCallback+0x8ac>
			cadence *= 2;
 80035a0:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_UART_RxCpltCallback+0x8d4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4a36      	ldr	r2, [pc, #216]	; (8003680 <HAL_UART_RxCpltCallback+0x8d4>)
 80035a8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80035aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035ae:	4b34      	ldr	r3, [pc, #208]	; (8003680 <HAL_UART_RxCpltCallback+0x8d4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80035b4:	e050      	b.n	8003658 <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0E: {
		printf("Factor Down\n");
 80035b6:	4833      	ldr	r0, [pc, #204]	; (8003684 <HAL_UART_RxCpltCallback+0x8d8>)
 80035b8:	f017 f93e 	bl	801a838 <puts>
		if (cadence >= 6250) {
 80035bc:	4b30      	ldr	r3, [pc, #192]	; (8003680 <HAL_UART_RxCpltCallback+0x8d4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f641 0269 	movw	r2, #6249	; 0x1869
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d949      	bls.n	800365c <HAL_UART_RxCpltCallback+0x8b0>
			cadence /= 2;
 80035c8:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <HAL_UART_RxCpltCallback+0x8d4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	4a2c      	ldr	r2, [pc, #176]	; (8003680 <HAL_UART_RxCpltCallback+0x8d4>)
 80035d0:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80035d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035d6:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <HAL_UART_RxCpltCallback+0x8d4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80035dc:	e03e      	b.n	800365c <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 80035de:	482a      	ldr	r0, [pc, #168]	; (8003688 <HAL_UART_RxCpltCallback+0x8dc>)
 80035e0:	f017 f92a 	bl	801a838 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80035e4:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_UART_RxCpltCallback+0x8e0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2102      	movs	r1, #2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f013 fee6 	bl	80173bc <osEventFlagsSet>
		break;
 80035f0:	e035      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80035f2:	4827      	ldr	r0, [pc, #156]	; (8003690 <HAL_UART_RxCpltCallback+0x8e4>)
 80035f4:	f017 f920 	bl	801a838 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80035f8:	4b24      	ldr	r3, [pc, #144]	; (800368c <HAL_UART_RxCpltCallback+0x8e0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2104      	movs	r1, #4
 80035fe:	4618      	mov	r0, r3
 8003600:	f013 fedc 	bl	80173bc <osEventFlagsSet>
		break;
 8003604:	e02b      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8003606:	4823      	ldr	r0, [pc, #140]	; (8003694 <HAL_UART_RxCpltCallback+0x8e8>)
 8003608:	f017 f916 	bl	801a838 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 800360c:	4b1f      	ldr	r3, [pc, #124]	; (800368c <HAL_UART_RxCpltCallback+0x8e0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2108      	movs	r1, #8
 8003612:	4618      	mov	r0, r3
 8003614:	f013 fed2 	bl	80173bc <osEventFlagsSet>
		break;
 8003618:	e021      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xAF: {
		sync();
 800361a:	f000 f999 	bl	8003950 <sync>
		break;
 800361e:	e01e      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003620:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <HAL_UART_RxCpltCallback+0x8ec>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2101      	movs	r1, #1
 8003626:	4618      	mov	r0, r3
 8003628:	f013 fec8 	bl	80173bc <osEventFlagsSet>
		break;
 800362c:	e017      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_UART_RxCpltCallback+0x8ec>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2102      	movs	r1, #2
 8003634:	4618      	mov	r0, r3
 8003636:	f013 fec1 	bl	80173bc <osEventFlagsSet>
		break;
 800363a:	e010      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xDF: {
		reset_error_counters();
 800363c:	f7fe fd36 	bl	80020ac <reset_error_counters>
		break;
 8003640:	e00d      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xEF: {
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 8003642:	f7fe fee3 	bl	800240c <send_previous_error_packet>
#endif
		break;
 8003646:	e00a      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
	}
	default: {
		printf("Unknown Command\n");
 8003648:	4814      	ldr	r0, [pc, #80]	; (800369c <HAL_UART_RxCpltCallback+0x8f0>)
 800364a:	f017 f8f5 	bl	801a838 <puts>
		break;
 800364e:	e006      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003650:	bf00      	nop
 8003652:	e004      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 800365c:	bf00      	nop
	}
	}
}
 800365e:	bf00      	nop
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	0801b33c 	.word	0x0801b33c
 800366c:	24001ade 	.word	0x24001ade
 8003670:	2400003c 	.word	0x2400003c
 8003674:	24000314 	.word	0x24000314
 8003678:	0801b344 	.word	0x0801b344
 800367c:	0801b350 	.word	0x0801b350
 8003680:	240000bc 	.word	0x240000bc
 8003684:	0801b35c 	.word	0x0801b35c
 8003688:	0801b368 	.word	0x0801b368
 800368c:	24001a94 	.word	0x24001a94
 8003690:	0801b378 	.word	0x0801b378
 8003694:	0801b384 	.word	0x0801b384
 8003698:	24001a98 	.word	0x24001a98
 800369c:	0801b390 	.word	0x0801b390

080036a0 <get_reset_cause>:

void get_reset_cause()
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <get_reset_cause+0x58>)
 80036a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80036ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <get_reset_cause+0x24>
    {
        error.category = EC_watchdog;
 80036b4:	2304      	movs	r3, #4
 80036b6:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 80036b8:	231a      	movs	r3, #26
 80036ba:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fe fc4d 	bl	8001f5c <handle_error>
 80036c2:	e00d      	b.n	80036e0 <get_reset_cause+0x40>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <get_reset_cause+0x58>)
 80036c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80036ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <get_reset_cause+0x40>
    {
        error.category = EC_brownout;
 80036d2:	2303      	movs	r3, #3
 80036d4:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 80036d6:	231a      	movs	r3, #26
 80036d8:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fe fc3e 	bl	8001f5c <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <get_reset_cause+0x58>)
 80036e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80036e6:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <get_reset_cause+0x58>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	58024400 	.word	0x58024400

080036fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003700:	f002 fc02 	bl	8005f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003704:	f000 f828 	bl	8003758 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003708:	f000 f8a8 	bl	800385c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800370c:	f7ff f948 	bl	80029a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003710:	f7fd faea 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003714:	f001 ff2e 	bl	8005574 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003718:	f7ff f9bc 	bl	8002a94 <MX_I2C1_Init>
  MX_SPI2_Init();
 800371c:	f000 fe60 	bl	80043e0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003720:	f001 fb4c 	bl	8004dbc <MX_TIM2_Init>
  MX_TIM1_Init();
 8003724:	f001 fa9c 	bl	8004c60 <MX_TIM1_Init>
  MX_ADC3_Init();
 8003728:	f7fd f87e 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 800372c:	f7fc ff5a 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003730:	f7fd fa26 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003734:	f000 fdfc 	bl	8004330 <MX_SPI1_Init>
  MX_RTC_Init();
 8003738:	f000 fbc8 	bl	8003ecc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

#ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
 800373c:	f7fe fc42 	bl	8001fc4 <error_counter_init>
  	get_reset_cause();
 8003740:	f7ff ffae 	bl	80036a0 <get_reset_cause>
#endif

  system_setup();
 8003744:	f000 f8ba 	bl	80038bc <system_setup>
//  handle_error(error);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003748:	f013 fca0 	bl	801708c <osKernelInitialize>
  MX_FREERTOS_Init();
 800374c:	f7fe fed8 	bl	8002500 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003750:	f013 fcc0 	bl	80170d4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003754:	e7fe      	b.n	8003754 <main+0x58>
	...

08003758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b09c      	sub	sp, #112	; 0x70
 800375c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800375e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003762:	224c      	movs	r2, #76	; 0x4c
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f016 fff0 	bl	801a74c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800376c:	1d3b      	adds	r3, r7, #4
 800376e:	2220      	movs	r2, #32
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f016 ffea 	bl	801a74c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003778:	2002      	movs	r0, #2
 800377a:	f00a fbff 	bl	800df7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800377e:	2300      	movs	r3, #0
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	4b34      	ldr	r3, [pc, #208]	; (8003854 <SystemClock_Config+0xfc>)
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	4a33      	ldr	r2, [pc, #204]	; (8003854 <SystemClock_Config+0xfc>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800378e:	4b31      	ldr	r3, [pc, #196]	; (8003854 <SystemClock_Config+0xfc>)
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <SystemClock_Config+0x100>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037a0:	4a2d      	ldr	r2, [pc, #180]	; (8003858 <SystemClock_Config+0x100>)
 80037a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a6:	6193      	str	r3, [r2, #24]
 80037a8:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <SystemClock_Config+0x100>)
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80037b4:	bf00      	nop
 80037b6:	4b28      	ldr	r3, [pc, #160]	; (8003858 <SystemClock_Config+0x100>)
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	d1f8      	bne.n	80037b6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80037c4:	230b      	movs	r3, #11
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80037ce:	2309      	movs	r3, #9
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037d2:	2340      	movs	r3, #64	; 0x40
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80037d6:	2301      	movs	r3, #1
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037da:	2302      	movs	r3, #2
 80037dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037de:	2302      	movs	r3, #2
 80037e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037e2:	2304      	movs	r3, #4
 80037e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80037e6:	2318      	movs	r3, #24
 80037e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80037ea:	2302      	movs	r3, #2
 80037ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80037ee:	2302      	movs	r3, #2
 80037f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037f2:	2302      	movs	r3, #2
 80037f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80037f6:	2308      	movs	r3, #8
 80037f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80037fa:	2302      	movs	r3, #2
 80037fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003806:	4618      	mov	r0, r3
 8003808:	f00a fbf2 	bl	800dff0 <HAL_RCC_OscConfig>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003812:	f000 f955 	bl	8003ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003816:	233f      	movs	r3, #63	; 0x3f
 8003818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800381a:	2303      	movs	r3, #3
 800381c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800382a:	2340      	movs	r3, #64	; 0x40
 800382c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2101      	movs	r1, #1
 800383a:	4618      	mov	r0, r3
 800383c:	f00b f832 	bl	800e8a4 <HAL_RCC_ClockConfig>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003846:	f000 f93b 	bl	8003ac0 <Error_Handler>
  }
}
 800384a:	bf00      	nop
 800384c:	3770      	adds	r7, #112	; 0x70
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	58000400 	.word	0x58000400
 8003858:	58024800 	.word	0x58024800

0800385c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b0b0      	sub	sp, #192	; 0xc0
 8003860:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003862:	463b      	mov	r3, r7
 8003864:	22c0      	movs	r2, #192	; 0xc0
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f016 ff6f 	bl	801a74c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800386e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800387a:	2304      	movs	r3, #4
 800387c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800387e:	2318      	movs	r3, #24
 8003880:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003882:	2308      	movs	r3, #8
 8003884:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003886:	2302      	movs	r3, #2
 8003888:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800388a:	2302      	movs	r3, #2
 800388c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003892:	2320      	movs	r3, #32
 8003894:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800389a:	2300      	movs	r3, #0
 800389c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038a0:	463b      	mov	r3, r7
 80038a2:	4618      	mov	r0, r3
 80038a4:	f00b fbcc 	bl	800f040 <HAL_RCCEx_PeriphCLKConfig>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80038ae:	f000 f907 	bl	8003ac0 <Error_Handler>
  }
}
 80038b2:	bf00      	nop
 80038b4:	37c0      	adds	r7, #192	; 0xc0
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts



	packet_event_flags = osEventFlagsNew(NULL);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f013 fd3c 	bl	801733e <osEventFlagsNew>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4a1b      	ldr	r2, [pc, #108]	; (8003938 <system_setup+0x7c>)
 80038ca:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <system_setup+0x7c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d100      	bne.n	80038d6 <system_setup+0x1a>
        while (1);
 80038d4:	e7fe      	b.n	80038d4 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 80038d6:	2000      	movs	r0, #0
 80038d8:	f013 fd31 	bl	801733e <osEventFlagsNew>
 80038dc:	4603      	mov	r3, r0
 80038de:	4a17      	ldr	r2, [pc, #92]	; (800393c <system_setup+0x80>)
 80038e0:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 80038e2:	4b16      	ldr	r3, [pc, #88]	; (800393c <system_setup+0x80>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d100      	bne.n	80038ec <system_setup+0x30>
        while (1);
 80038ea:	e7fe      	b.n	80038ea <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 80038ec:	2000      	movs	r0, #0
 80038ee:	f013 fd26 	bl	801733e <osEventFlagsNew>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4a12      	ldr	r2, [pc, #72]	; (8003940 <system_setup+0x84>)
 80038f6:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <system_setup+0x84>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d100      	bne.n	8003902 <system_setup+0x46>
        while (1);
 8003900:	e7fe      	b.n	8003900 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 8003902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003906:	2200      	movs	r2, #0
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 800390a:	210c      	movs	r1, #12
 800390c:	480d      	ldr	r0, [pc, #52]	; (8003944 <system_setup+0x88>)
 800390e:	f00f fa25 	bl	8012d5c <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 8003912:	f001 ff39 	bl	8005788 <voltage_monitor_init>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d100      	bne.n	800391e <system_setup+0x62>
		while (1);
 800391c:	e7fe      	b.n	800391c <system_setup+0x60>
	}

	if (!init_adc_dma()) {
 800391e:	f000 fb67 	bl	8003ff0 <init_adc_dma>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d100      	bne.n	800392a <system_setup+0x6e>
		while (1);
 8003928:	e7fe      	b.n	8003928 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800392a:	2201      	movs	r2, #1
 800392c:	4906      	ldr	r1, [pc, #24]	; (8003948 <system_setup+0x8c>)
 800392e:	4807      	ldr	r0, [pc, #28]	; (800394c <system_setup+0x90>)
 8003930:	f010 fef4 	bl	801471c <HAL_UART_Receive_IT>

	//MX_IWDG1_Init();

}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}
 8003938:	24001a90 	.word	0x24001a90
 800393c:	24001a94 	.word	0x24001a94
 8003940:	24001a98 	.word	0x24001a98
 8003944:	24001df0 	.word	0x24001df0
 8003948:	24001a9c 	.word	0x24001a9c
 800394c:	24001e3c 	.word	0x24001e3c

08003950 <sync>:

void sync() {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
	send_ACK();
 8003956:	f000 f821 	bl	800399c <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800395a:	480e      	ldr	r0, [pc, #56]	; (8003994 <sync+0x44>)
 800395c:	f010 ff2a 	bl	80147b4 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8003960:	2364      	movs	r3, #100	; 0x64
 8003962:	2209      	movs	r2, #9
 8003964:	490c      	ldr	r1, [pc, #48]	; (8003998 <sync+0x48>)
 8003966:	480b      	ldr	r0, [pc, #44]	; (8003994 <sync+0x44>)
 8003968:	f010 fe10 	bl	801458c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <sync+0x48>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	2bff      	cmp	r3, #255	; 0xff
 8003976:	d1f3      	bne.n	8003960 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8003978:	4807      	ldr	r0, [pc, #28]	; (8003998 <sync+0x48>)
 800397a:	f001 fd39 	bl	80053f0 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800397e:	2201      	movs	r2, #1
 8003980:	4905      	ldr	r1, [pc, #20]	; (8003998 <sync+0x48>)
 8003982:	4804      	ldr	r0, [pc, #16]	; (8003994 <sync+0x44>)
 8003984:	f010 feca 	bl	801471c <HAL_UART_Receive_IT>
	send_error_counter_packet();
 8003988:	f7fe fc04 	bl	8002194 <send_error_counter_packet>
}
 800398c:	bf00      	nop
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	24001e3c 	.word	0x24001e3c
 8003998:	24001a9c 	.word	0x24001a9c

0800399c <send_ACK>:

void send_ACK() {
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <send_ACK+0x1c>)
 80039a2:	22ff      	movs	r2, #255	; 0xff
 80039a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80039a6:	2364      	movs	r3, #100	; 0x64
 80039a8:	2201      	movs	r2, #1
 80039aa:	4903      	ldr	r1, [pc, #12]	; (80039b8 <send_ACK+0x1c>)
 80039ac:	4803      	ldr	r0, [pc, #12]	; (80039bc <send_ACK+0x20>)
 80039ae:	f010 fd5f 	bl	8014470 <HAL_UART_Transmit>
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	24001ae8 	.word	0x24001ae8
 80039bc:	24001e3c 	.word	0x24001e3c

080039c0 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80039c6:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <get_current_step+0xc0>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d04a      	beq.n	8003a6c <get_current_step+0xac>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039dc:	da48      	bge.n	8003a70 <get_current_step+0xb0>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f640 628b 	movw	r2, #3723	; 0xe8b
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d03f      	beq.n	8003a68 <get_current_step+0xa8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f640 628b 	movw	r2, #3723	; 0xe8b
 80039ee:	4293      	cmp	r3, r2
 80039f0:	dc3e      	bgt.n	8003a70 <get_current_step+0xb0>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f640 421f 	movw	r2, #3103	; 0xc1f
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d033      	beq.n	8003a64 <get_current_step+0xa4>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003a02:	da35      	bge.n	8003a70 <get_current_step+0xb0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d028      	beq.n	8003a60 <get_current_step+0xa0>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003a14:	4293      	cmp	r3, r2
 8003a16:	dc2b      	bgt.n	8003a70 <get_current_step+0xb0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f240 7245 	movw	r2, #1861	; 0x745
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01c      	beq.n	8003a5c <get_current_step+0x9c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f240 7245 	movw	r2, #1861	; 0x745
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	dc21      	bgt.n	8003a70 <get_current_step+0xb0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d010      	beq.n	8003a58 <get_current_step+0x98>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	dc17      	bgt.n	8003a70 <get_current_step+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <get_current_step+0x90>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003a4c:	d002      	beq.n	8003a54 <get_current_step+0x94>
 8003a4e:	e00f      	b.n	8003a70 <get_current_step+0xb0>
	case 0:
		return 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e00e      	b.n	8003a72 <get_current_step+0xb2>
	case 620:
		return 1;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e00c      	b.n	8003a72 <get_current_step+0xb2>
	case 1241:
		return 2;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e00a      	b.n	8003a72 <get_current_step+0xb2>
	case 1861:
		return 3;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e008      	b.n	8003a72 <get_current_step+0xb2>
	case 2482:
		return 4;
 8003a60:	2304      	movs	r3, #4
 8003a62:	e006      	b.n	8003a72 <get_current_step+0xb2>
	case 3103:
		return 5;
 8003a64:	2305      	movs	r3, #5
 8003a66:	e004      	b.n	8003a72 <get_current_step+0xb2>
	case 3723:
		return 6;
 8003a68:	2306      	movs	r3, #6
 8003a6a:	e002      	b.n	8003a72 <get_current_step+0xb2>
	case 4095:
		return 7;
 8003a6c:	2307      	movs	r3, #7
 8003a6e:	e000      	b.n	8003a72 <get_current_step+0xb2>
	default:
		return -1;
 8003a70:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40007400 	.word	0x40007400

08003a84 <enter_stop>:

void enter_stop() {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
	  send_ACK();
 8003a88:	f7ff ff88 	bl	800399c <send_ACK>

	  vTaskSuspendAll();
 8003a8c:	f015 f8f4 	bl	8018c78 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003a90:	2101      	movs	r1, #1
 8003a92:	2001      	movs	r0, #1
 8003a94:	f00a fa36 	bl	800df04 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003a98:	f7ff f91c 	bl	8002cd4 <__NVIC_SystemReset>

08003a9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a04      	ldr	r2, [pc, #16]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003aae:	f002 fa67 	bl	8005f80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40001000 	.word	0x40001000

08003ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 8003aca:	231a      	movs	r3, #26
 8003acc:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fe fa44 	bl	8001f5c <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003ae2:	bf00      	nop
 8003ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ae8:	481c      	ldr	r0, [pc, #112]	; (8003b5c <create_pmt_packet+0x80>)
 8003aea:	f007 fe65 	bl	800b7b8 <HAL_GPIO_ReadPin>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f7      	bne.n	8003ae4 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003af4:	1d3b      	adds	r3, r7, #4
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fa98 	bl	800502c <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003afc:	f107 0308 	add.w	r3, r7, #8
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fac9 	bl	8004098 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8003b06:	23ff      	movs	r3, #255	; 0xff
 8003b08:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003b0a:	23ff      	movs	r3, #255	; 0xff
 8003b0c:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <create_pmt_packet+0x84>)
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <create_pmt_packet+0x84>)
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003b22:	7a3b      	ldrb	r3, [r7, #8]
 8003b24:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8003b26:	7a7b      	ldrb	r3, [r7, #9]
 8003b28:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003b2a:	793b      	ldrb	r3, [r7, #4]
 8003b2c:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003b2e:	797b      	ldrb	r3, [r7, #5]
 8003b30:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003b32:	79bb      	ldrb	r3, [r7, #6]
 8003b34:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003b3a:	f107 010c 	add.w	r1, r7, #12
 8003b3e:	2364      	movs	r3, #100	; 0x64
 8003b40:	220a      	movs	r2, #10
 8003b42:	4808      	ldr	r0, [pc, #32]	; (8003b64 <create_pmt_packet+0x88>)
 8003b44:	f010 fc94 	bl	8014470 <HAL_UART_Transmit>

	pmt_seq++;
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <create_pmt_packet+0x84>)
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <create_pmt_packet+0x84>)
 8003b52:	801a      	strh	r2, [r3, #0]
}
 8003b54:	bf00      	nop
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	58020000 	.word	0x58020000
 8003b60:	24001aea 	.word	0x24001aea
 8003b64:	24001e3c 	.word	0x24001e3c

08003b68 <create_erpa_packet>:


void create_erpa_packet() {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003b6e:	bf00      	nop
 8003b70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b74:	4828      	ldr	r0, [pc, #160]	; (8003c18 <create_erpa_packet+0xb0>)
 8003b76:	f007 fe1f 	bl	800b7b8 <HAL_GPIO_ReadPin>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f7      	bne.n	8003b70 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003b80:	23ff      	movs	r3, #255	; 0xff
 8003b82:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fa50 	bl	800502c <get_uptime>
	sweep_step = get_current_step();
 8003b8c:	f7ff ff18 	bl	80039c0 <get_current_step>
 8003b90:	4603      	mov	r3, r0
 8003b92:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fa9d 	bl	80040d8 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003b9e:	f107 0308 	add.w	r3, r7, #8
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fab8 	bl	8004118 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003ba8:	23ee      	movs	r3, #238	; 0xee
 8003baa:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003bac:	23ee      	movs	r3, #238	; 0xee
 8003bae:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <create_erpa_packet+0xb4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003bba:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <create_erpa_packet+0xb4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003bc4:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <create_erpa_packet+0xb4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003bcc:	7ffb      	ldrb	r3, [r7, #31]
 8003bce:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003bd0:	893b      	ldrh	r3, [r7, #8]
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003bda:	893b      	ldrh	r3, [r7, #8]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003be0:	7b3b      	ldrb	r3, [r7, #12]
 8003be2:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003be4:	7b7b      	ldrb	r3, [r7, #13]
 8003be6:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003be8:	793b      	ldrb	r3, [r7, #4]
 8003bea:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003bec:	797b      	ldrb	r3, [r7, #5]
 8003bee:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003bf0:	79bb      	ldrb	r3, [r7, #6]
 8003bf2:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003bf8:	f107 0110 	add.w	r1, r7, #16
 8003bfc:	2364      	movs	r3, #100	; 0x64
 8003bfe:	220e      	movs	r2, #14
 8003c00:	4807      	ldr	r0, [pc, #28]	; (8003c20 <create_erpa_packet+0xb8>)
 8003c02:	f010 fc35 	bl	8014470 <HAL_UART_Transmit>

	erpa_seq++;
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <create_erpa_packet+0xb4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <create_erpa_packet+0xb4>)
 8003c0e:	6013      	str	r3, [r2, #0]
}
 8003c10:	bf00      	nop
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	58020400 	.word	0x58020400
 8003c1c:	24001aec 	.word	0x24001aec
 8003c20:	24001e3c 	.word	0x24001e3c

08003c24 <create_hk_packet>:


void create_hk_packet() {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b092      	sub	sp, #72	; 0x48
 8003c28:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 f9fd 	bl	800502c <get_uptime>
	get_unix_time(timestamp);
 8003c32:	f107 0308 	add.w	r3, r7, #8
 8003c36:	4618      	mov	r0, r3
 8003c38:	f001 fa48 	bl	80050cc <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8003c3c:	f001 ffe6 	bl	8005c0c <get_rail_monitor>
 8003c40:	6478      	str	r0, [r7, #68]	; 0x44


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003c42:	23dd      	movs	r3, #221	; 0xdd
 8003c44:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003c46:	23dd      	movs	r3, #221	; 0xdd
 8003c48:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003c4a:	4b93      	ldr	r3, [pc, #588]	; (8003e98 <create_hk_packet+0x274>)
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	74bb      	strb	r3, [r7, #18]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003c56:	4b90      	ldr	r3, [pc, #576]	; (8003e98 <create_hk_packet+0x274>)
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	74fb      	strb	r3, [r7, #19]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c60:	889b      	ldrh	r3, [r3, #4]
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	753b      	strb	r3, [r7, #20]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6c:	889b      	ldrh	r3, [r3, #4]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c74:	330a      	adds	r3, #10
 8003c76:	889b      	ldrh	r3, [r3, #4]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c82:	330a      	adds	r3, #10
 8003c84:	889b      	ldrh	r3, [r3, #4]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	75fb      	strb	r3, [r7, #23]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	889b      	ldrh	r3, [r3, #4]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	763b      	strb	r3, [r7, #24]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9a:	3314      	adds	r3, #20
 8003c9c:	889b      	ldrh	r3, [r3, #4]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca4:	331e      	adds	r3, #30
 8003ca6:	889b      	ldrh	r3, [r3, #4]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb2:	331e      	adds	r3, #30
 8003cb4:	889b      	ldrh	r3, [r3, #4]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cbc:	3328      	adds	r3, #40	; 0x28
 8003cbe:	889b      	ldrh	r3, [r3, #4]
 8003cc0:	0a1b      	lsrs	r3, r3, #8
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	773b      	strb	r3, [r7, #28]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cca:	3328      	adds	r3, #40	; 0x28
 8003ccc:	889b      	ldrh	r3, [r3, #4]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd4:	3332      	adds	r3, #50	; 0x32
 8003cd6:	889b      	ldrh	r3, [r3, #4]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce2:	3332      	adds	r3, #50	; 0x32
 8003ce4:	889b      	ldrh	r3, [r3, #4]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cec:	333c      	adds	r3, #60	; 0x3c
 8003cee:	889b      	ldrh	r3, [r3, #4]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cfc:	333c      	adds	r3, #60	; 0x3c
 8003cfe:	889b      	ldrh	r3, [r3, #4]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d08:	3346      	adds	r3, #70	; 0x46
 8003d0a:	889b      	ldrh	r3, [r3, #4]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d18:	3346      	adds	r3, #70	; 0x46
 8003d1a:	889b      	ldrh	r3, [r3, #4]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d24:	3350      	adds	r3, #80	; 0x50
 8003d26:	889b      	ldrh	r3, [r3, #4]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d34:	3350      	adds	r3, #80	; 0x50
 8003d36:	889b      	ldrh	r3, [r3, #4]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d40:	335a      	adds	r3, #90	; 0x5a
 8003d42:	889b      	ldrh	r3, [r3, #4]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d50:	335a      	adds	r3, #90	; 0x5a
 8003d52:	889b      	ldrh	r3, [r3, #4]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5c:	3364      	adds	r3, #100	; 0x64
 8003d5e:	889b      	ldrh	r3, [r3, #4]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6c:	3364      	adds	r3, #100	; 0x64
 8003d6e:	889b      	ldrh	r3, [r3, #4]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d78:	336e      	adds	r3, #110	; 0x6e
 8003d7a:	889b      	ldrh	r3, [r3, #4]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d88:	336e      	adds	r3, #110	; 0x6e
 8003d8a:	889b      	ldrh	r3, [r3, #4]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d94:	3378      	adds	r3, #120	; 0x78
 8003d96:	889b      	ldrh	r3, [r3, #4]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da4:	3378      	adds	r3, #120	; 0x78
 8003da6:	889b      	ldrh	r3, [r3, #4]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db0:	3382      	adds	r3, #130	; 0x82
 8003db2:	889b      	ldrh	r3, [r3, #4]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc0:	3382      	adds	r3, #130	; 0x82
 8003dc2:	889b      	ldrh	r3, [r3, #4]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dcc:	338c      	adds	r3, #140	; 0x8c
 8003dce:	889b      	ldrh	r3, [r3, #4]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ddc:	338c      	adds	r3, #140	; 0x8c
 8003dde:	889b      	ldrh	r3, [r3, #4]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de8:	3396      	adds	r3, #150	; 0x96
 8003dea:	889b      	ldrh	r3, [r3, #4]
 8003dec:	0a1b      	lsrs	r3, r3, #8
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df8:	3396      	adds	r3, #150	; 0x96
 8003dfa:	889b      	ldrh	r3, [r3, #4]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e04:	33a0      	adds	r3, #160	; 0xa0
 8003e06:	889b      	ldrh	r3, [r3, #4]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e14:	33a0      	adds	r3, #160	; 0xa0
 8003e16:	889b      	ldrh	r3, [r3, #4]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e20:	33aa      	adds	r3, #170	; 0xaa
 8003e22:	889b      	ldrh	r3, [r3, #4]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e30:	33aa      	adds	r3, #170	; 0xaa
 8003e32:	889b      	ldrh	r3, [r3, #4]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = timestamp[0];
 8003e3a:	7a3b      	ldrb	r3, [r7, #8]
 8003e3c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = timestamp[1];
 8003e40:	7a7b      	ldrb	r3, [r7, #9]
 8003e42:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = timestamp[2];
 8003e46:	7abb      	ldrb	r3, [r7, #10]
 8003e48:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = timestamp[3];
 8003e4c:	7afb      	ldrb	r3, [r7, #11]
 8003e4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = timestamp[4];
 8003e52:	7b3b      	ldrb	r3, [r7, #12]
 8003e54:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = timestamp[5];
 8003e58:	7b7b      	ldrb	r3, [r7, #13]
 8003e5a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = uptime[0];
 8003e5e:	793b      	ldrb	r3, [r7, #4]
 8003e60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = uptime[1];
 8003e64:	797b      	ldrb	r3, [r7, #5]
 8003e66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = uptime[2];
 8003e6a:	79bb      	ldrb	r3, [r7, #6]
 8003e6c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = uptime[3];
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003e76:	f107 0110 	add.w	r1, r7, #16
 8003e7a:	2364      	movs	r3, #100	; 0x64
 8003e7c:	2232      	movs	r2, #50	; 0x32
 8003e7e:	4807      	ldr	r0, [pc, #28]	; (8003e9c <create_hk_packet+0x278>)
 8003e80:	f010 faf6 	bl	8014470 <HAL_UART_Transmit>

	hk_seq++;
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <create_hk_packet+0x274>)
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	4b02      	ldr	r3, [pc, #8]	; (8003e98 <create_hk_packet+0x274>)
 8003e8e:	801a      	strh	r2, [r3, #0]
}
 8003e90:	bf00      	nop
 8003e92:	3748      	adds	r7, #72	; 0x48
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	24001af0 	.word	0x24001af0
 8003e9c:	24001e3c 	.word	0x24001e3c

08003ea0 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <reset_packet_sequence_numbers+0x20>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <reset_packet_sequence_numbers+0x24>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <reset_packet_sequence_numbers+0x28>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	801a      	strh	r2, [r3, #0]
}
 8003eb6:	bf00      	nop
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	24001aea 	.word	0x24001aea
 8003ec4:	24001aec 	.word	0x24001aec
 8003ec8:	24001af0 	.word	0x24001af0

08003ecc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	60da      	str	r2, [r3, #12]
 8003ede:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003ee4:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003ee6:	4a27      	ldr	r2, [pc, #156]	; (8003f84 <MX_RTC_Init+0xb8>)
 8003ee8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003ef0:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003ef2:	2263      	movs	r2, #99	; 0x63
 8003ef4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003ef8:	f242 720f 	movw	r2, #9999	; 0x270f
 8003efc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f04:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f0a:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f16:	481a      	ldr	r0, [pc, #104]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003f18:	f00d fd90 	bl	8011a3c <HAL_RTC_Init>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003f22:	f7ff fdcd 	bl	8003ac0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	4619      	mov	r1, r3
 8003f40:	480f      	ldr	r0, [pc, #60]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003f42:	f00d fdfd 	bl	8011b40 <HAL_RTC_SetTime>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003f4c:	f7ff fdb8 	bl	8003ac0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003f50:	2301      	movs	r3, #1
 8003f52:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003f54:	2301      	movs	r3, #1
 8003f56:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003f60:	463b      	mov	r3, r7
 8003f62:	2201      	movs	r2, #1
 8003f64:	4619      	mov	r1, r3
 8003f66:	4806      	ldr	r0, [pc, #24]	; (8003f80 <MX_RTC_Init+0xb4>)
 8003f68:	f00d fee4 	bl	8011d34 <HAL_RTC_SetDate>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003f72:	f7ff fda5 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f76:	bf00      	nop
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	24001af4 	.word	0x24001af4
 8003f84:	58004000 	.word	0x58004000

08003f88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b0b2      	sub	sp, #200	; 0xc8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f90:	f107 0308 	add.w	r3, r7, #8
 8003f94:	22c0      	movs	r2, #192	; 0xc0
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f016 fbd7 	bl	801a74c <memset>
  if(rtcHandle->Instance==RTC)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a10      	ldr	r2, [pc, #64]	; (8003fe4 <HAL_RTC_MspInit+0x5c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d118      	bne.n	8003fda <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003fa8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <HAL_RTC_MspInit+0x60>)
 8003fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fba:	f107 0308 	add.w	r3, r7, #8
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f00b f83e 	bl	800f040 <HAL_RCCEx_PeriphCLKConfig>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003fca:	f7ff fd79 	bl	8003ac0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_RTC_MspInit+0x64>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a06      	ldr	r2, [pc, #24]	; (8003fec <HAL_RTC_MspInit+0x64>)
 8003fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003fda:	bf00      	nop
 8003fdc:	37c8      	adds	r7, #200	; 0xc8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	58004000 	.word	0x58004000
 8003fe8:	00019300 	.word	0x00019300
 8003fec:	58024400 	.word	0x58024400

08003ff0 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003ffa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003ffe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004002:	481f      	ldr	r0, [pc, #124]	; (8004080 <init_adc_dma+0x90>)
 8004004:	f003 fad0 	bl	80075a8 <HAL_ADCEx_Calibration_Start>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800400e:	f7ff fd57 	bl	8003ac0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8004012:	220b      	movs	r2, #11
 8004014:	491b      	ldr	r1, [pc, #108]	; (8004084 <init_adc_dma+0x94>)
 8004016:	481a      	ldr	r0, [pc, #104]	; (8004080 <init_adc_dma+0x90>)
 8004018:	f002 fba4 	bl	8006764 <HAL_ADC_Start_DMA>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8004022:	f7ff fd4d 	bl	8003ac0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8004026:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800402a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800402e:	4816      	ldr	r0, [pc, #88]	; (8004088 <init_adc_dma+0x98>)
 8004030:	f003 faba 	bl	80075a8 <HAL_ADCEx_Calibration_Start>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800403a:	f7ff fd41 	bl	8003ac0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800403e:	2204      	movs	r2, #4
 8004040:	4912      	ldr	r1, [pc, #72]	; (800408c <init_adc_dma+0x9c>)
 8004042:	4811      	ldr	r0, [pc, #68]	; (8004088 <init_adc_dma+0x98>)
 8004044:	f002 fb8e 	bl	8006764 <HAL_ADC_Start_DMA>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800404e:	f7ff fd37 	bl	8003ac0 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <init_adc_dma+0xa0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <init_adc_dma+0xa0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004060:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <init_adc_dma+0xa4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <init_adc_dma+0xa4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004070:	601a      	str	r2, [r3, #0]


	status = 1;
 8004072:	2301      	movs	r3, #1
 8004074:	71fb      	strb	r3, [r7, #7]

	return status;
 8004076:	79fb      	ldrb	r3, [r7, #7]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	2400015c 	.word	0x2400015c
 8004084:	24001b20 	.word	0x24001b20
 8004088:	240001c0 	.word	0x240001c0
 800408c:	24001b40 	.word	0x24001b40
 8004090:	24001bdc 	.word	0x24001bdc
 8004094:	24001b54 	.word	0x24001b54

08004098 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 80040a0:	2201      	movs	r2, #1
 80040a2:	490b      	ldr	r1, [pc, #44]	; (80040d0 <sample_pmt_spi+0x38>)
 80040a4:	480b      	ldr	r0, [pc, #44]	; (80040d4 <sample_pmt_spi+0x3c>)
 80040a6:	f00e f90f 	bl	80122c8 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 80040aa:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <sample_pmt_spi+0x38>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <sample_pmt_spi+0x38>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3301      	adds	r3, #1
 80040c4:	7bba      	ldrb	r2, [r7, #14]
 80040c6:	701a      	strb	r2, [r3, #0]
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	24001b4c 	.word	0x24001b4c
 80040d4:	24001b54 	.word	0x24001b54

080040d8 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 80040e0:	2201      	movs	r2, #1
 80040e2:	490b      	ldr	r1, [pc, #44]	; (8004110 <sample_erpa_spi+0x38>)
 80040e4:	480b      	ldr	r0, [pc, #44]	; (8004114 <sample_erpa_spi+0x3c>)
 80040e6:	f00e f8ef 	bl	80122c8 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <sample_erpa_spi+0x38>)
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <sample_erpa_spi+0x38>)
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3301      	adds	r3, #1
 8004104:	7bba      	ldrb	r2, [r7, #14]
 8004106:	701a      	strb	r2, [r3, #0]
}
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	24001b48 	.word	0x24001b48
 8004114:	24001bdc 	.word	0x24001bdc

08004118 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <sample_erpa_adc+0x20>)
 8004122:	885b      	ldrh	r3, [r3, #2]
 8004124:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	89fa      	ldrh	r2, [r7, #14]
 800412a:	801a      	strh	r2, [r3, #0]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	24001b20 	.word	0x24001b20

0800413c <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8004144:	2390      	movs	r3, #144	; 0x90
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f8a2 	bl	8004290 <poll_i2c_sensor>
 800414c:	4603      	mov	r3, r0
 800414e:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004150:	2394      	movs	r3, #148	; 0x94
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f89c 	bl	8004290 <poll_i2c_sensor>
 8004158:	4603      	mov	r3, r0
 800415a:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 800415c:	2392      	movs	r3, #146	; 0x92
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f896 	bl	8004290 <poll_i2c_sensor>
 8004164:	4603      	mov	r3, r0
 8004166:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8004168:	2396      	movs	r3, #150	; 0x96
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f890 	bl	8004290 <poll_i2c_sensor>
 8004170:	4603      	mov	r3, r0
 8004172:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	89fa      	ldrh	r2, [r7, #14]
 8004178:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3302      	adds	r3, #2
 800417e:	89ba      	ldrh	r2, [r7, #12]
 8004180:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	897a      	ldrh	r2, [r7, #10]
 8004188:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3306      	adds	r3, #6
 800418e:	893a      	ldrh	r2, [r7, #8]
 8004190:	801a      	strh	r2, [r3, #0]
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	; 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <sample_hk_adc1+0xa0>)
 80041a6:	8a9b      	ldrh	r3, [r3, #20]
 80041a8:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <sample_hk_adc1+0xa0>)
 80041ac:	8a1b      	ldrh	r3, [r3, #16]
 80041ae:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80041b0:	4b22      	ldr	r3, [pc, #136]	; (800423c <sample_hk_adc1+0xa0>)
 80041b2:	899b      	ldrh	r3, [r3, #12]
 80041b4:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80041b6:	4b21      	ldr	r3, [pc, #132]	; (800423c <sample_hk_adc1+0xa0>)
 80041b8:	8a5b      	ldrh	r3, [r3, #18]
 80041ba:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <sample_hk_adc1+0xa0>)
 80041be:	889b      	ldrh	r3, [r3, #4]
 80041c0:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80041c2:	4b1e      	ldr	r3, [pc, #120]	; (800423c <sample_hk_adc1+0xa0>)
 80041c4:	88db      	ldrh	r3, [r3, #6]
 80041c6:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80041c8:	4b1c      	ldr	r3, [pc, #112]	; (800423c <sample_hk_adc1+0xa0>)
 80041ca:	89db      	ldrh	r3, [r3, #14]
 80041cc:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80041ce:	4b1b      	ldr	r3, [pc, #108]	; (800423c <sample_hk_adc1+0xa0>)
 80041d0:	891b      	ldrh	r3, [r3, #8]
 80041d2:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <sample_hk_adc1+0xa0>)
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80041da:	4b18      	ldr	r3, [pc, #96]	; (800423c <sample_hk_adc1+0xa0>)
 80041dc:	895b      	ldrh	r3, [r3, #10]
 80041de:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8bfa      	ldrh	r2, [r7, #30]
 80041e4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3302      	adds	r3, #2
 80041ea:	8bba      	ldrh	r2, [r7, #28]
 80041ec:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	8b7a      	ldrh	r2, [r7, #26]
 80041f4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3306      	adds	r3, #6
 80041fa:	8b3a      	ldrh	r2, [r7, #24]
 80041fc:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3308      	adds	r3, #8
 8004202:	8afa      	ldrh	r2, [r7, #22]
 8004204:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	330a      	adds	r3, #10
 800420a:	8aba      	ldrh	r2, [r7, #20]
 800420c:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	330c      	adds	r3, #12
 8004212:	8a7a      	ldrh	r2, [r7, #18]
 8004214:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	330e      	adds	r3, #14
 800421a:	8a3a      	ldrh	r2, [r7, #16]
 800421c:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3310      	adds	r3, #16
 8004222:	89fa      	ldrh	r2, [r7, #14]
 8004224:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3312      	adds	r3, #18
 800422a:	89ba      	ldrh	r2, [r7, #12]
 800422c:	801a      	strh	r2, [r3, #0]
}
 800422e:	bf00      	nop
 8004230:	3724      	adds	r7, #36	; 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	24001b20 	.word	0x24001b20

08004240 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <sample_hk_adc3+0x4c>)
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <sample_hk_adc3+0x4c>)
 8004250:	885b      	ldrh	r3, [r3, #2]
 8004252:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004254:	4b0d      	ldr	r3, [pc, #52]	; (800428c <sample_hk_adc3+0x4c>)
 8004256:	889b      	ldrh	r3, [r3, #4]
 8004258:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800425a:	4b0c      	ldr	r3, [pc, #48]	; (800428c <sample_hk_adc3+0x4c>)
 800425c:	88db      	ldrh	r3, [r3, #6]
 800425e:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	89fa      	ldrh	r2, [r7, #14]
 8004264:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3302      	adds	r3, #2
 800426a:	89ba      	ldrh	r2, [r7, #12]
 800426c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	897a      	ldrh	r2, [r7, #10]
 8004274:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3306      	adds	r3, #6
 800427a:	893a      	ldrh	r2, [r7, #8]
 800427c:	801a      	strh	r2, [r3, #0]
}
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	24001b40 	.word	0x24001b40

08004290 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 800429a:	2200      	movs	r2, #0
 800429c:	4b20      	ldr	r3, [pc, #128]	; (8004320 <poll_i2c_sensor+0x90>)
 800429e:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	b299      	uxth	r1, r3
 80042a4:	2301      	movs	r3, #1
 80042a6:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <poll_i2c_sensor+0x90>)
 80042a8:	481e      	ldr	r0, [pc, #120]	; (8004324 <poll_i2c_sensor+0x94>)
 80042aa:	f007 fb53 	bl	800b954 <HAL_I2C_Master_Transmit_DMA>
 80042ae:	4603      	mov	r3, r0
 80042b0:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80042b2:	7b7b      	ldrb	r3, [r7, #13]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 80042b8:	481b      	ldr	r0, [pc, #108]	; (8004328 <poll_i2c_sensor+0x98>)
 80042ba:	f016 fabd 	bl	801a838 <puts>
 80042be:	e028      	b.n	8004312 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80042c0:	bf00      	nop
 80042c2:	4818      	ldr	r0, [pc, #96]	; (8004324 <poll_i2c_sensor+0x94>)
 80042c4:	f007 fe2d 	bl	800bf22 <HAL_I2C_GetState>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d1f9      	bne.n	80042c2 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	b299      	uxth	r1, r3
 80042d2:	2302      	movs	r3, #2
 80042d4:	4a12      	ldr	r2, [pc, #72]	; (8004320 <poll_i2c_sensor+0x90>)
 80042d6:	4813      	ldr	r0, [pc, #76]	; (8004324 <poll_i2c_sensor+0x94>)
 80042d8:	f007 fc50 	bl	800bb7c <HAL_I2C_Master_Receive_DMA>
 80042dc:	4603      	mov	r3, r0
 80042de:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80042e0:	7b7b      	ldrb	r3, [r7, #13]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80042e6:	4811      	ldr	r0, [pc, #68]	; (800432c <poll_i2c_sensor+0x9c>)
 80042e8:	f016 faa6 	bl	801a838 <puts>
 80042ec:	e011      	b.n	8004312 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80042ee:	bf00      	nop
 80042f0:	480c      	ldr	r0, [pc, #48]	; (8004324 <poll_i2c_sensor+0x94>)
 80042f2:	f007 fe16 	bl	800bf22 <HAL_I2C_GetState>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d1f9      	bne.n	80042f0 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <poll_i2c_sensor+0x90>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8004304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004308:	4a05      	ldr	r2, [pc, #20]	; (8004320 <poll_i2c_sensor+0x90>)
 800430a:	7852      	ldrb	r2, [r2, #1]
 800430c:	4313      	orrs	r3, r2
 800430e:	10db      	asrs	r3, r3, #3
 8004310:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8004312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	24001b50 	.word	0x24001b50
 8004324:	2400193c 	.word	0x2400193c
 8004328:	0801b3a0 	.word	0x0801b3a0
 800432c:	0801b3b0 	.word	0x0801b3b0

08004330 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <MX_SPI1_Init+0xa8>)
 8004336:	4a29      	ldr	r2, [pc, #164]	; (80043dc <MX_SPI1_Init+0xac>)
 8004338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <MX_SPI1_Init+0xa8>)
 800433c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004342:	4b25      	ldr	r3, [pc, #148]	; (80043d8 <MX_SPI1_Init+0xa8>)
 8004344:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004348:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800434a:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <MX_SPI1_Init+0xa8>)
 800434c:	220f      	movs	r2, #15
 800434e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004350:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <MX_SPI1_Init+0xa8>)
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <MX_SPI1_Init+0xa8>)
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <MX_SPI1_Init+0xa8>)
 800435e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004362:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004364:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <MX_SPI1_Init+0xa8>)
 8004366:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800436a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <MX_SPI1_Init+0xa8>)
 800436e:	2200      	movs	r2, #0
 8004370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004372:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <MX_SPI1_Init+0xa8>)
 8004374:	2200      	movs	r2, #0
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <MX_SPI1_Init+0xa8>)
 800437a:	2200      	movs	r2, #0
 800437c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800437e:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <MX_SPI1_Init+0xa8>)
 8004380:	2200      	movs	r2, #0
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <MX_SPI1_Init+0xa8>)
 8004386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800438a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <MX_SPI1_Init+0xa8>)
 800438e:	2200      	movs	r2, #0
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <MX_SPI1_Init+0xa8>)
 8004394:	2200      	movs	r2, #0
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <MX_SPI1_Init+0xa8>)
 800439a:	2200      	movs	r2, #0
 800439c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <MX_SPI1_Init+0xa8>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <MX_SPI1_Init+0xa8>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <MX_SPI1_Init+0xa8>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <MX_SPI1_Init+0xa8>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <MX_SPI1_Init+0xa8>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <MX_SPI1_Init+0xa8>)
 80043be:	2200      	movs	r2, #0
 80043c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043c2:	4805      	ldr	r0, [pc, #20]	; (80043d8 <MX_SPI1_Init+0xa8>)
 80043c4:	f00d fe5c 	bl	8012080 <HAL_SPI_Init>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80043ce:	f7ff fb77 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	24001b54 	.word	0x24001b54
 80043dc:	40013000 	.word	0x40013000

080043e0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80043e4:	4b28      	ldr	r3, [pc, #160]	; (8004488 <MX_SPI2_Init+0xa8>)
 80043e6:	4a29      	ldr	r2, [pc, #164]	; (800448c <MX_SPI2_Init+0xac>)
 80043e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80043ea:	4b27      	ldr	r3, [pc, #156]	; (8004488 <MX_SPI2_Init+0xa8>)
 80043ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80043f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80043f2:	4b25      	ldr	r3, [pc, #148]	; (8004488 <MX_SPI2_Init+0xa8>)
 80043f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043f8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80043fa:	4b23      	ldr	r3, [pc, #140]	; (8004488 <MX_SPI2_Init+0xa8>)
 80043fc:	220f      	movs	r2, #15
 80043fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004408:	2200      	movs	r2, #0
 800440a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800440c:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <MX_SPI2_Init+0xa8>)
 800440e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004412:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004414:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004416:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800441a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800441c:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <MX_SPI2_Init+0xa8>)
 800441e:	2200      	movs	r2, #0
 8004420:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004422:	4b19      	ldr	r3, [pc, #100]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004424:	2200      	movs	r2, #0
 8004426:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004428:	4b17      	ldr	r3, [pc, #92]	; (8004488 <MX_SPI2_Init+0xa8>)
 800442a:	2200      	movs	r2, #0
 800442c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800442e:	4b16      	ldr	r3, [pc, #88]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004430:	2200      	movs	r2, #0
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004434:	4b14      	ldr	r3, [pc, #80]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800443a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <MX_SPI2_Init+0xa8>)
 800443e:	2200      	movs	r2, #0
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004444:	2200      	movs	r2, #0
 8004446:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <MX_SPI2_Init+0xa8>)
 800444a:	2200      	movs	r2, #0
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004450:	2200      	movs	r2, #0
 8004452:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004456:	2200      	movs	r2, #0
 8004458:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <MX_SPI2_Init+0xa8>)
 800445c:	2200      	movs	r2, #0
 800445e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004462:	2200      	movs	r2, #0
 8004464:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004468:	2200      	movs	r2, #0
 800446a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <MX_SPI2_Init+0xa8>)
 800446e:	2200      	movs	r2, #0
 8004470:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004472:	4805      	ldr	r0, [pc, #20]	; (8004488 <MX_SPI2_Init+0xa8>)
 8004474:	f00d fe04 	bl	8012080 <HAL_SPI_Init>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800447e:	f7ff fb1f 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	24001bdc 	.word	0x24001bdc
 800448c:	40003800 	.word	0x40003800

08004490 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b0bc      	sub	sp, #240	; 0xf0
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044a8:	f107 0318 	add.w	r3, r7, #24
 80044ac:	22c0      	movs	r2, #192	; 0xc0
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f016 f94b 	bl	801a74c <memset>
  if(spiHandle->Instance==SPI1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a83      	ldr	r2, [pc, #524]	; (80046c8 <HAL_SPI_MspInit+0x238>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d17c      	bne.n	80045ba <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80044c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044d0:	f107 0318 	add.w	r3, r7, #24
 80044d4:	4618      	mov	r0, r3
 80044d6:	f00a fdb3 	bl	800f040 <HAL_RCCEx_PeriphCLKConfig>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80044e0:	f7ff faee 	bl	8003ac0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80044e4:	4b79      	ldr	r3, [pc, #484]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 80044e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044ea:	4a78      	ldr	r2, [pc, #480]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 80044ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044f4:	4b75      	ldr	r3, [pc, #468]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 80044f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004502:	4b72      	ldr	r3, [pc, #456]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 8004504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004508:	4a70      	ldr	r2, [pc, #448]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004512:	4b6e      	ldr	r3, [pc, #440]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 8004514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004520:	2318      	movs	r3, #24
 8004522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004532:	2300      	movs	r3, #0
 8004534:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004538:	2305      	movs	r3, #5
 800453a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004542:	4619      	mov	r1, r3
 8004544:	4862      	ldr	r0, [pc, #392]	; (80046d0 <HAL_SPI_MspInit+0x240>)
 8004546:	f006 ff87 	bl	800b458 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800454a:	4b62      	ldr	r3, [pc, #392]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 800454c:	4a62      	ldr	r2, [pc, #392]	; (80046d8 <HAL_SPI_MspInit+0x248>)
 800454e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004550:	4b60      	ldr	r3, [pc, #384]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 8004552:	2225      	movs	r2, #37	; 0x25
 8004554:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004556:	4b5f      	ldr	r3, [pc, #380]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 8004558:	2200      	movs	r2, #0
 800455a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800455c:	4b5d      	ldr	r3, [pc, #372]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 800455e:	2200      	movs	r2, #0
 8004560:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004562:	4b5c      	ldr	r3, [pc, #368]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 8004564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004568:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800456a:	4b5a      	ldr	r3, [pc, #360]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 800456c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004570:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004572:	4b58      	ldr	r3, [pc, #352]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 8004574:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004578:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800457a:	4b56      	ldr	r3, [pc, #344]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 800457c:	2200      	movs	r2, #0
 800457e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004580:	4b54      	ldr	r3, [pc, #336]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 8004582:	2200      	movs	r2, #0
 8004584:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004586:	4b53      	ldr	r3, [pc, #332]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 8004588:	2200      	movs	r2, #0
 800458a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800458c:	4851      	ldr	r0, [pc, #324]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 800458e:	f003 fe33 	bl	80081f8 <HAL_DMA_Init>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004598:	f7ff fa92 	bl	8003ac0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a4d      	ldr	r2, [pc, #308]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 80045a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80045a2:	4a4c      	ldr	r2, [pc, #304]	; (80046d4 <HAL_SPI_MspInit+0x244>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80045a8:	2200      	movs	r2, #0
 80045aa:	2105      	movs	r1, #5
 80045ac:	2023      	movs	r0, #35	; 0x23
 80045ae:	f003 f9f5 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80045b2:	2023      	movs	r0, #35	; 0x23
 80045b4:	f003 fa0c 	bl	80079d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80045b8:	e081      	b.n	80046be <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a47      	ldr	r2, [pc, #284]	; (80046dc <HAL_SPI_MspInit+0x24c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d17c      	bne.n	80046be <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80045c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045d4:	f107 0318 	add.w	r3, r7, #24
 80045d8:	4618      	mov	r0, r3
 80045da:	f00a fd31 	bl	800f040 <HAL_RCCEx_PeriphCLKConfig>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80045e4:	f7ff fa6c 	bl	8003ac0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045e8:	4b38      	ldr	r3, [pc, #224]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 80045ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045ee:	4a37      	ldr	r2, [pc, #220]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 80045f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045f8:	4b34      	ldr	r3, [pc, #208]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 80045fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004606:	4b31      	ldr	r3, [pc, #196]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 8004608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800460c:	4a2f      	ldr	r2, [pc, #188]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 800460e:	f043 0302 	orr.w	r3, r3, #2
 8004612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004616:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <HAL_SPI_MspInit+0x23c>)
 8004618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004624:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004628:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462c:	2302      	movs	r3, #2
 800462e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004632:	2300      	movs	r3, #0
 8004634:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004638:	2300      	movs	r3, #0
 800463a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800463e:	2305      	movs	r3, #5
 8004640:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004644:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004648:	4619      	mov	r1, r3
 800464a:	4821      	ldr	r0, [pc, #132]	; (80046d0 <HAL_SPI_MspInit+0x240>)
 800464c:	f006 ff04 	bl	800b458 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004650:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 8004652:	4a24      	ldr	r2, [pc, #144]	; (80046e4 <HAL_SPI_MspInit+0x254>)
 8004654:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 8004658:	2227      	movs	r2, #39	; 0x27
 800465a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800465c:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004662:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 8004664:	2200      	movs	r2, #0
 8004666:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 800466a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800466e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 8004672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004676:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 800467a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800467e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004680:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 8004682:	2200      	movs	r2, #0
 8004684:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004686:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 8004688:	2200      	movs	r2, #0
 800468a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 800468e:	2200      	movs	r2, #0
 8004690:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004692:	4813      	ldr	r0, [pc, #76]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 8004694:	f003 fdb0 	bl	80081f8 <HAL_DMA_Init>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 800469e:	f7ff fa0f 	bl	8003ac0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a0e      	ldr	r2, [pc, #56]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 80046a6:	67da      	str	r2, [r3, #124]	; 0x7c
 80046a8:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <HAL_SPI_MspInit+0x250>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80046ae:	2200      	movs	r2, #0
 80046b0:	2105      	movs	r1, #5
 80046b2:	2024      	movs	r0, #36	; 0x24
 80046b4:	f003 f972 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80046b8:	2024      	movs	r0, #36	; 0x24
 80046ba:	f003 f989 	bl	80079d0 <HAL_NVIC_EnableIRQ>
}
 80046be:	bf00      	nop
 80046c0:	37f0      	adds	r7, #240	; 0xf0
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40013000 	.word	0x40013000
 80046cc:	58024400 	.word	0x58024400
 80046d0:	58020400 	.word	0x58020400
 80046d4:	24001c64 	.word	0x24001c64
 80046d8:	40020070 	.word	0x40020070
 80046dc:	40003800 	.word	0x40003800
 80046e0:	24001cdc 	.word	0x24001cdc
 80046e4:	40020058 	.word	0x40020058

080046e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_MspInit+0x38>)
 80046f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046f4:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <HAL_MspInit+0x38>)
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <HAL_MspInit+0x38>)
 8004700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	607b      	str	r3, [r7, #4]
 800470a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800470c:	2200      	movs	r2, #0
 800470e:	210f      	movs	r1, #15
 8004710:	f06f 0001 	mvn.w	r0, #1
 8004714:	f003 f942 	bl	800799c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	58024400 	.word	0x58024400

08004724 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b090      	sub	sp, #64	; 0x40
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b0f      	cmp	r3, #15
 8004730:	d827      	bhi.n	8004782 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004732:	2200      	movs	r2, #0
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	2036      	movs	r0, #54	; 0x36
 8004738:	f003 f930 	bl	800799c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800473c:	2036      	movs	r0, #54	; 0x36
 800473e:	f003 f947 	bl	80079d0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004742:	4a29      	ldr	r2, [pc, #164]	; (80047e8 <HAL_InitTick+0xc4>)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004748:	4b28      	ldr	r3, [pc, #160]	; (80047ec <HAL_InitTick+0xc8>)
 800474a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800474e:	4a27      	ldr	r2, [pc, #156]	; (80047ec <HAL_InitTick+0xc8>)
 8004750:	f043 0310 	orr.w	r3, r3, #16
 8004754:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004758:	4b24      	ldr	r3, [pc, #144]	; (80047ec <HAL_InitTick+0xc8>)
 800475a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004766:	f107 0210 	add.w	r2, r7, #16
 800476a:	f107 0314 	add.w	r3, r7, #20
 800476e:	4611      	mov	r1, r2
 8004770:	4618      	mov	r0, r3
 8004772:	f00a fc23 	bl	800efbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <HAL_InitTick+0x6a>
 8004780:	e001      	b.n	8004786 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e02b      	b.n	80047de <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004786:	f00a fbed 	bl	800ef64 <HAL_RCC_GetPCLK1Freq>
 800478a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800478c:	e004      	b.n	8004798 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800478e:	f00a fbe9 	bl	800ef64 <HAL_RCC_GetPCLK1Freq>
 8004792:	4603      	mov	r3, r0
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479a:	4a15      	ldr	r2, [pc, #84]	; (80047f0 <HAL_InitTick+0xcc>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	0c9b      	lsrs	r3, r3, #18
 80047a2:	3b01      	subs	r3, #1
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <HAL_InitTick+0xd0>)
 80047a8:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <HAL_InitTick+0xd4>)
 80047aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80047ac:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <HAL_InitTick+0xd0>)
 80047ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80047b4:	4a0f      	ldr	r2, [pc, #60]	; (80047f4 <HAL_InitTick+0xd0>)
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80047ba:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <HAL_InitTick+0xd0>)
 80047bc:	2200      	movs	r2, #0
 80047be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_InitTick+0xd0>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80047c6:	480b      	ldr	r0, [pc, #44]	; (80047f4 <HAL_InitTick+0xd0>)
 80047c8:	f00e f9f9 	bl	8012bbe <HAL_TIM_Base_Init>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80047d2:	4808      	ldr	r0, [pc, #32]	; (80047f4 <HAL_InitTick+0xd0>)
 80047d4:	f00e fa4a 	bl	8012c6c <HAL_TIM_Base_Start_IT>
 80047d8:	4603      	mov	r3, r0
 80047da:	e000      	b.n	80047de <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3740      	adds	r7, #64	; 0x40
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	240000c8 	.word	0x240000c8
 80047ec:	58024400 	.word	0x58024400
 80047f0:	431bde83 	.word	0x431bde83
 80047f4:	24001d54 	.word	0x24001d54
 80047f8:	40001000 	.word	0x40001000

080047fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004800:	e7fe      	b.n	8004800 <NMI_Handler+0x4>

08004802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004802:	b480      	push	{r7}
 8004804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004806:	e7fe      	b.n	8004806 <HardFault_Handler+0x4>

08004808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800480c:	e7fe      	b.n	800480c <MemManage_Handler+0x4>

0800480e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800480e:	b480      	push	{r7}
 8004810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004812:	e7fe      	b.n	8004812 <BusFault_Handler+0x4>

08004814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004818:	e7fe      	b.n	8004818 <UsageFault_Handler+0x4>

0800481a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800481a:	b480      	push	{r7}
 800481c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800482c:	4802      	ldr	r0, [pc, #8]	; (8004838 <DMA1_Stream0_IRQHandler+0x10>)
 800482e:	f005 f80d 	bl	800984c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	24000224 	.word	0x24000224

0800483c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004840:	4802      	ldr	r0, [pc, #8]	; (800484c <DMA1_Stream1_IRQHandler+0x10>)
 8004842:	f005 f803 	bl	800984c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2400029c 	.word	0x2400029c

08004850 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004854:	4802      	ldr	r0, [pc, #8]	; (8004860 <DMA1_Stream2_IRQHandler+0x10>)
 8004856:	f004 fff9 	bl	800984c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	24001ed0 	.word	0x24001ed0

08004864 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004868:	4802      	ldr	r0, [pc, #8]	; (8004874 <DMA1_Stream3_IRQHandler+0x10>)
 800486a:	f004 ffef 	bl	800984c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	24001cdc 	.word	0x24001cdc

08004878 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800487c:	4802      	ldr	r0, [pc, #8]	; (8004888 <DMA1_Stream4_IRQHandler+0x10>)
 800487e:	f004 ffe5 	bl	800984c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	24001c64 	.word	0x24001c64

0800488c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004890:	4802      	ldr	r0, [pc, #8]	; (800489c <DMA1_Stream5_IRQHandler+0x10>)
 8004892:	f004 ffdb 	bl	800984c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	24000328 	.word	0x24000328

080048a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <DMA1_Stream6_IRQHandler+0x10>)
 80048a6:	f004 ffd1 	bl	800984c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	24001990 	.word	0x24001990

080048b4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048b8:	4802      	ldr	r0, [pc, #8]	; (80048c4 <TIM1_BRK_IRQHandler+0x10>)
 80048ba:	f00e fcee 	bl	801329a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	24001da4 	.word	0x24001da4

080048c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048cc:	4802      	ldr	r0, [pc, #8]	; (80048d8 <TIM1_UP_IRQHandler+0x10>)
 80048ce:	f00e fce4 	bl	801329a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80048d2:	bf00      	nop
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	24001da4 	.word	0x24001da4

080048dc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048e0:	4802      	ldr	r0, [pc, #8]	; (80048ec <TIM1_TRG_COM_IRQHandler+0x10>)
 80048e2:	f00e fcda 	bl	801329a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80048e6:	bf00      	nop
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	24001da4 	.word	0x24001da4

080048f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048f4:	4802      	ldr	r0, [pc, #8]	; (8004900 <TIM1_CC_IRQHandler+0x10>)
 80048f6:	f00e fcd0 	bl	801329a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80048fa:	bf00      	nop
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	24001da4 	.word	0x24001da4

08004904 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004908:	4802      	ldr	r0, [pc, #8]	; (8004914 <TIM2_IRQHandler+0x10>)
 800490a:	f00e fcc6 	bl	801329a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	24001df0 	.word	0x24001df0

08004918 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800491c:	4802      	ldr	r0, [pc, #8]	; (8004928 <I2C1_EV_IRQHandler+0x10>)
 800491e:	f007 fa1d 	bl	800bd5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	2400193c 	.word	0x2400193c

0800492c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004930:	4802      	ldr	r0, [pc, #8]	; (800493c <I2C1_ER_IRQHandler+0x10>)
 8004932:	f007 fa2d 	bl	800bd90 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	2400193c 	.word	0x2400193c

08004940 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004944:	4802      	ldr	r0, [pc, #8]	; (8004950 <SPI1_IRQHandler+0x10>)
 8004946:	f00d fe07 	bl	8012558 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800494a:	bf00      	nop
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	24001b54 	.word	0x24001b54

08004954 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004958:	4802      	ldr	r0, [pc, #8]	; (8004964 <SPI2_IRQHandler+0x10>)
 800495a:	f00d fdfd 	bl	8012558 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800495e:	bf00      	nop
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	24001bdc 	.word	0x24001bdc

08004968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800496c:	4802      	ldr	r0, [pc, #8]	; (8004978 <USART1_IRQHandler+0x10>)
 800496e:	f00f ffd7 	bl	8014920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	24001e3c 	.word	0x24001e3c

0800497c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004980:	4802      	ldr	r0, [pc, #8]	; (800498c <DMA1_Stream7_IRQHandler+0x10>)
 8004982:	f004 ff63 	bl	800984c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	24001a08 	.word	0x24001a08

08004990 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <TIM6_DAC_IRQHandler+0x20>)
 8004996:	791b      	ldrb	r3, [r3, #4]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800499e:	4804      	ldr	r0, [pc, #16]	; (80049b0 <TIM6_DAC_IRQHandler+0x20>)
 80049a0:	f003 f9ab 	bl	8007cfa <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80049a4:	4803      	ldr	r0, [pc, #12]	; (80049b4 <TIM6_DAC_IRQHandler+0x24>)
 80049a6:	f00e fc78 	bl	801329a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	24000314 	.word	0x24000314
 80049b4:	24001d54 	.word	0x24001d54

080049b8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80049c2:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <ITM_SendChar+0x48>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a0e      	ldr	r2, [pc, #56]	; (8004a00 <ITM_SendChar+0x48>)
 80049c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049cc:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <ITM_SendChar+0x4c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a0c      	ldr	r2, [pc, #48]	; (8004a04 <ITM_SendChar+0x4c>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80049da:	bf00      	nop
 80049dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f8      	beq.n	80049dc <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80049ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	6013      	str	r3, [r2, #0]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	e000edfc 	.word	0xe000edfc
 8004a04:	e0000e00 	.word	0xe0000e00

08004a08 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e00a      	b.n	8004a30 <_read+0x28>
		*ptr++ = __io_getchar();
 8004a1a:	f3af 8000 	nop.w
 8004a1e:	4601      	mov	r1, r0
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	60ba      	str	r2, [r7, #8]
 8004a26:	b2ca      	uxtb	r2, r1
 8004a28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	dbf0      	blt.n	8004a1a <_read+0x12>
	}

	return len;
 8004a38:	687b      	ldr	r3, [r7, #4]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e009      	b.n	8004a68 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	60ba      	str	r2, [r7, #8]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ffab 	bl	80049b8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	3301      	adds	r3, #1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	dbf1      	blt.n	8004a54 <_write+0x12>
	}
	return len;
 8004a70:	687b      	ldr	r3, [r7, #4]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <_close>:

int _close(int file) {
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <_fstat>:

int _fstat(int file, struct stat *st) {
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004aa2:	605a      	str	r2, [r3, #4]
	return 0;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <_isatty>:

int _isatty(int file) {
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004aba:	2301      	movs	r3, #1
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004aec:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004aee:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004af8:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <_sbrk+0x64>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004b00:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <_sbrk+0x64>)
 8004b02:	4a12      	ldr	r2, [pc, #72]	; (8004b4c <_sbrk+0x68>)
 8004b04:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <_sbrk+0x64>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d207      	bcs.n	8004b24 <_sbrk+0x40>
		errno = ENOMEM;
 8004b14:	f015 fde2 	bl	801a6dc <__errno>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	220c      	movs	r2, #12
 8004b1c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b22:	e009      	b.n	8004b38 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004b24:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <_sbrk+0x64>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004b2a:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <_sbrk+0x64>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4413      	add	r3, r2
 8004b32:	4a05      	ldr	r2, [pc, #20]	; (8004b48 <_sbrk+0x64>)
 8004b34:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004b36:	68fb      	ldr	r3, [r7, #12]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	24080000 	.word	0x24080000
 8004b44:	00000400 	.word	0x00000400
 8004b48:	24001da0 	.word	0x24001da0
 8004b4c:	24006980 	.word	0x24006980

08004b50 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004b54:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <SystemInit+0xe4>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	4a36      	ldr	r2, [pc, #216]	; (8004c34 <SystemInit+0xe4>)
 8004b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004b64:	4b34      	ldr	r3, [pc, #208]	; (8004c38 <SystemInit+0xe8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	2b06      	cmp	r3, #6
 8004b6e:	d807      	bhi.n	8004b80 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004b70:	4b31      	ldr	r3, [pc, #196]	; (8004c38 <SystemInit+0xe8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 030f 	bic.w	r3, r3, #15
 8004b78:	4a2f      	ldr	r2, [pc, #188]	; (8004c38 <SystemInit+0xe8>)
 8004b7a:	f043 0307 	orr.w	r3, r3, #7
 8004b7e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004b80:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <SystemInit+0xec>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2d      	ldr	r2, [pc, #180]	; (8004c3c <SystemInit+0xec>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004b8c:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <SystemInit+0xec>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004b92:	4b2a      	ldr	r3, [pc, #168]	; (8004c3c <SystemInit+0xec>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4929      	ldr	r1, [pc, #164]	; (8004c3c <SystemInit+0xec>)
 8004b98:	4b29      	ldr	r3, [pc, #164]	; (8004c40 <SystemInit+0xf0>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004b9e:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <SystemInit+0xe8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004baa:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <SystemInit+0xe8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 030f 	bic.w	r3, r3, #15
 8004bb2:	4a21      	ldr	r2, [pc, #132]	; (8004c38 <SystemInit+0xe8>)
 8004bb4:	f043 0307 	orr.w	r3, r3, #7
 8004bb8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004bba:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <SystemInit+0xec>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004bc0:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <SystemInit+0xec>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004bc6:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <SystemInit+0xec>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004bcc:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <SystemInit+0xec>)
 8004bce:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <SystemInit+0xf4>)
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004bd2:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <SystemInit+0xec>)
 8004bd4:	4a1c      	ldr	r2, [pc, #112]	; (8004c48 <SystemInit+0xf8>)
 8004bd6:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004bd8:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <SystemInit+0xec>)
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <SystemInit+0xfc>)
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <SystemInit+0xec>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004be4:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <SystemInit+0xec>)
 8004be6:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <SystemInit+0xfc>)
 8004be8:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <SystemInit+0xec>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <SystemInit+0xec>)
 8004bf2:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <SystemInit+0xfc>)
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <SystemInit+0xec>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <SystemInit+0xec>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0e      	ldr	r2, [pc, #56]	; (8004c3c <SystemInit+0xec>)
 8004c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c06:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <SystemInit+0xec>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004c0e:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <SystemInit+0x100>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <SystemInit+0x104>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1a:	d202      	bcs.n	8004c22 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <SystemInit+0x108>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c22:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <SystemInit+0x10c>)
 8004c24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c2a:	bf00      	nop
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000ed00 	.word	0xe000ed00
 8004c38:	52002000 	.word	0x52002000
 8004c3c:	58024400 	.word	0x58024400
 8004c40:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c44:	02020200 	.word	0x02020200
 8004c48:	01ff0000 	.word	0x01ff0000
 8004c4c:	01010280 	.word	0x01010280
 8004c50:	5c001000 	.word	0x5c001000
 8004c54:	ffff0000 	.word	0xffff0000
 8004c58:	51008108 	.word	0x51008108
 8004c5c:	52004000 	.word	0x52004000

08004c60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b09a      	sub	sp, #104	; 0x68
 8004c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	605a      	str	r2, [r3, #4]
 8004c70:	609a      	str	r2, [r3, #8]
 8004c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	609a      	str	r2, [r3, #8]
 8004c8c:	60da      	str	r2, [r3, #12]
 8004c8e:	611a      	str	r2, [r3, #16]
 8004c90:	615a      	str	r2, [r3, #20]
 8004c92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	222c      	movs	r2, #44	; 0x2c
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f015 fd56 	bl	801a74c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ca0:	4b44      	ldr	r3, [pc, #272]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004ca2:	4a45      	ldr	r2, [pc, #276]	; (8004db8 <MX_TIM1_Init+0x158>)
 8004ca4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004ca6:	4b43      	ldr	r3, [pc, #268]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004ca8:	224a      	movs	r2, #74	; 0x4a
 8004caa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cac:	4b41      	ldr	r3, [pc, #260]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004cb2:	4b40      	ldr	r3, [pc, #256]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004cb4:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004cb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cba:	4b3e      	ldr	r3, [pc, #248]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004cc0:	4b3c      	ldr	r3, [pc, #240]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cc6:	4b3b      	ldr	r3, [pc, #236]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004ccc:	4839      	ldr	r0, [pc, #228]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004cce:	f00d ff76 	bl	8012bbe <HAL_TIM_Base_Init>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004cd8:	f7fe fef2 	bl	8003ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ce0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ce2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4832      	ldr	r0, [pc, #200]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004cea:	f00e fcf1 	bl	80136d0 <HAL_TIM_ConfigClockSource>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004cf4:	f7fe fee4 	bl	8003ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004cf8:	482e      	ldr	r0, [pc, #184]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004cfa:	f00e fa6d 	bl	80131d8 <HAL_TIM_PWM_Init>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004d04:	f7fe fedc 	bl	8003ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4826      	ldr	r0, [pc, #152]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004d1c:	f00f fa2e 	bl	801417c <HAL_TIMEx_MasterConfigSynchronization>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004d26:	f7fe fecb 	bl	8003ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d2a:	2360      	movs	r3, #96	; 0x60
 8004d2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004d2e:	f240 13df 	movw	r3, #479	; 0x1df
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d34:	2300      	movs	r3, #0
 8004d36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d40:	2300      	movs	r3, #0
 8004d42:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d44:	2300      	movs	r3, #0
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4818      	ldr	r0, [pc, #96]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004d52:	f00e fba9 	bl	80134a8 <HAL_TIM_PWM_ConfigChannel>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004d5c:	f7fe feb0 	bl	8003ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004d82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4807      	ldr	r0, [pc, #28]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004d96:	f00f fa7f 	bl	8014298 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004da0:	f7fe fe8e 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004da4:	4803      	ldr	r0, [pc, #12]	; (8004db4 <MX_TIM1_Init+0x154>)
 8004da6:	f000 f8dd 	bl	8004f64 <HAL_TIM_MspPostInit>

}
 8004daa:	bf00      	nop
 8004dac:	3768      	adds	r7, #104	; 0x68
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	24001da4 	.word	0x24001da4
 8004db8:	40010000 	.word	0x40010000

08004dbc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08e      	sub	sp, #56	; 0x38
 8004dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	605a      	str	r2, [r3, #4]
 8004dcc:	609a      	str	r2, [r3, #8]
 8004dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dd0:	f107 031c 	add.w	r3, r7, #28
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ddc:	463b      	mov	r3, r7
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	609a      	str	r2, [r3, #8]
 8004de6:	60da      	str	r2, [r3, #12]
 8004de8:	611a      	str	r2, [r3, #16]
 8004dea:	615a      	str	r2, [r3, #20]
 8004dec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004dee:	4b2d      	ldr	r3, [pc, #180]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004df0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004df4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004df6:	4b2b      	ldr	r3, [pc, #172]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004df8:	224a      	movs	r2, #74	; 0x4a
 8004dfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dfc:	4b29      	ldr	r3, [pc, #164]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004e02:	4b28      	ldr	r3, [pc, #160]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004e04:	f640 4234 	movw	r2, #3124	; 0xc34
 8004e08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e0a:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e10:	4b24      	ldr	r3, [pc, #144]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004e12:	2280      	movs	r2, #128	; 0x80
 8004e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e16:	4823      	ldr	r0, [pc, #140]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004e18:	f00d fed1 	bl	8012bbe <HAL_TIM_Base_Init>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004e22:	f7fe fe4d 	bl	8003ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e30:	4619      	mov	r1, r3
 8004e32:	481c      	ldr	r0, [pc, #112]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004e34:	f00e fc4c 	bl	80136d0 <HAL_TIM_ConfigClockSource>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004e3e:	f7fe fe3f 	bl	8003ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004e42:	4818      	ldr	r0, [pc, #96]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004e44:	f00e f9c8 	bl	80131d8 <HAL_TIM_PWM_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004e4e:	f7fe fe37 	bl	8003ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e52:	2320      	movs	r3, #32
 8004e54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e5a:	f107 031c 	add.w	r3, r7, #28
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4810      	ldr	r0, [pc, #64]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004e62:	f00f f98b 	bl	801417c <HAL_TIMEx_MasterConfigSynchronization>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004e6c:	f7fe fe28 	bl	8003ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e70:	2360      	movs	r3, #96	; 0x60
 8004e72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004e80:	463b      	mov	r3, r7
 8004e82:	220c      	movs	r2, #12
 8004e84:	4619      	mov	r1, r3
 8004e86:	4807      	ldr	r0, [pc, #28]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004e88:	f00e fb0e 	bl	80134a8 <HAL_TIM_PWM_ConfigChannel>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004e92:	f7fe fe15 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004e96:	4803      	ldr	r0, [pc, #12]	; (8004ea4 <MX_TIM2_Init+0xe8>)
 8004e98:	f000 f864 	bl	8004f64 <HAL_TIM_MspPostInit>

}
 8004e9c:	bf00      	nop
 8004e9e:	3738      	adds	r7, #56	; 0x38
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	24001df0 	.word	0x24001df0

08004ea8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <HAL_TIM_Base_MspInit+0xb4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d12f      	bne.n	8004f1a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004eba:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <HAL_TIM_Base_MspInit+0xb8>)
 8004ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ec0:	4a27      	ldr	r2, [pc, #156]	; (8004f60 <HAL_TIM_Base_MspInit+0xb8>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004eca:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <HAL_TIM_Base_MspInit+0xb8>)
 8004ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2105      	movs	r1, #5
 8004edc:	2018      	movs	r0, #24
 8004ede:	f002 fd5d 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004ee2:	2018      	movs	r0, #24
 8004ee4:	f002 fd74 	bl	80079d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2105      	movs	r1, #5
 8004eec:	2019      	movs	r0, #25
 8004eee:	f002 fd55 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004ef2:	2019      	movs	r0, #25
 8004ef4:	f002 fd6c 	bl	80079d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2105      	movs	r1, #5
 8004efc:	201a      	movs	r0, #26
 8004efe:	f002 fd4d 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004f02:	201a      	movs	r0, #26
 8004f04:	f002 fd64 	bl	80079d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2105      	movs	r1, #5
 8004f0c:	201b      	movs	r0, #27
 8004f0e:	f002 fd45 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004f12:	201b      	movs	r0, #27
 8004f14:	f002 fd5c 	bl	80079d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004f18:	e01b      	b.n	8004f52 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f22:	d116      	bne.n	8004f52 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f24:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <HAL_TIM_Base_MspInit+0xb8>)
 8004f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f2a:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <HAL_TIM_Base_MspInit+0xb8>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f34:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <HAL_TIM_Base_MspInit+0xb8>)
 8004f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004f42:	2200      	movs	r2, #0
 8004f44:	2105      	movs	r1, #5
 8004f46:	201c      	movs	r0, #28
 8004f48:	f002 fd28 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f4c:	201c      	movs	r0, #28
 8004f4e:	f002 fd3f 	bl	80079d0 <HAL_NVIC_EnableIRQ>
}
 8004f52:	bf00      	nop
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	58024400 	.word	0x58024400

08004f64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08a      	sub	sp, #40	; 0x28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	60da      	str	r2, [r3, #12]
 8004f7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a26      	ldr	r2, [pc, #152]	; (800501c <HAL_TIM_MspPostInit+0xb8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d120      	bne.n	8004fc8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f86:	4b26      	ldr	r3, [pc, #152]	; (8005020 <HAL_TIM_MspPostInit+0xbc>)
 8004f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f8c:	4a24      	ldr	r2, [pc, #144]	; (8005020 <HAL_TIM_MspPostInit+0xbc>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f96:	4b22      	ldr	r3, [pc, #136]	; (8005020 <HAL_TIM_MspPostInit+0xbc>)
 8004f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004faa:	2302      	movs	r3, #2
 8004fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4818      	ldr	r0, [pc, #96]	; (8005024 <HAL_TIM_MspPostInit+0xc0>)
 8004fc2:	f006 fa49 	bl	800b458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004fc6:	e024      	b.n	8005012 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d11f      	bne.n	8005012 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <HAL_TIM_MspPostInit+0xbc>)
 8004fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fd8:	4a11      	ldr	r2, [pc, #68]	; (8005020 <HAL_TIM_MspPostInit+0xbc>)
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <HAL_TIM_MspPostInit+0xbc>)
 8004fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004ff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ffe:	2300      	movs	r3, #0
 8005000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005002:	2301      	movs	r3, #1
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	4619      	mov	r1, r3
 800500c:	4806      	ldr	r0, [pc, #24]	; (8005028 <HAL_TIM_MspPostInit+0xc4>)
 800500e:	f006 fa23 	bl	800b458 <HAL_GPIO_Init>
}
 8005012:	bf00      	nop
 8005014:	3728      	adds	r7, #40	; 0x28
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40010000 	.word	0x40010000
 8005020:	58024400 	.word	0x58024400
 8005024:	58020000 	.word	0x58020000
 8005028:	58020400 	.word	0x58020400

0800502c <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8005038:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <get_uptime+0x94>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 800503e:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <get_uptime+0x98>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8005044:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <get_uptime+0x94>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	429a      	cmp	r2, r3
 800504c:	d005      	beq.n	800505a <get_uptime+0x2e>
		ms = uptime_millis;
 800504e:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <get_uptime+0x94>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8005054:	4b1b      	ldr	r3, [pc, #108]	; (80050c4 <get_uptime+0x98>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005060:	fb03 f202 	mul.w	r2, r3, r2
 8005064:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <get_uptime+0x98>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	3301      	adds	r3, #1
 800506a:	4917      	ldr	r1, [pc, #92]	; (80050c8 <get_uptime+0x9c>)
 800506c:	fba1 1303 	umull	r1, r3, r1, r3
 8005070:	099b      	lsrs	r3, r3, #6
 8005072:	68f9      	ldr	r1, [r7, #12]
 8005074:	fbb1 f3f3 	udiv	r3, r1, r3
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <get_uptime+0x5a>
		uptime = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	0e1b      	lsrs	r3, r3, #24
 800508a:	b2da      	uxtb	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	0c1a      	lsrs	r2, r3, #16
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	0a1a      	lsrs	r2, r3, #8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3302      	adds	r3, #2
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3303      	adds	r3, #3
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	24001ae0 	.word	0x24001ae0
 80050c4:	e000e010 	.word	0xe000e010
 80050c8:	10624dd3 	.word	0x10624dd3

080050cc <get_unix_time>:

void get_unix_time(uint8_t* buffer) {
 80050cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d0:	b0a5      	sub	sp, #148	; 0x94
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	65f8      	str	r0, [r7, #92]	; 0x5c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80050d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80050da:	2200      	movs	r2, #0
 80050dc:	4619      	mov	r1, r3
 80050de:	48bf      	ldr	r0, [pc, #764]	; (80053dc <get_unix_time+0x310>)
 80050e0:	f00c fdcc 	bl	8011c7c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80050e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050e8:	2200      	movs	r2, #0
 80050ea:	4619      	mov	r1, r3
 80050ec:	48bb      	ldr	r0, [pc, #748]	; (80053dc <get_unix_time+0x310>)
 80050ee:	f00c fea9 	bl	8011e44 <HAL_RTC_GetDate>
	uint32_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 80050f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80050f8:	1ad2      	subs	r2, r2, r3
 80050fa:	4bb9      	ldr	r3, [pc, #740]	; (80053e0 <get_unix_time+0x314>)
 80050fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005100:	08db      	lsrs	r3, r3, #3
 8005102:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80


	y = current_date.Year + 2000;
 8005112:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005116:	b29b      	uxth	r3, r3
 8005118:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800511c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	m = current_date.Month;
 8005120:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005124:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	d = current_date.Date;
 8005128:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800512c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 8005130:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8005134:	2b02      	cmp	r3, #2
 8005136:	d809      	bhi.n	800514c <get_unix_time+0x80>
	{
		m += 12;
 8005138:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800513c:	330c      	adds	r3, #12
 800513e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		y -= 1;
 8005142:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005146:	3b01      	subs	r3, #1
 8005148:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 800514c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005150:	f240 136d 	movw	r3, #365	; 0x16d
 8005154:	fb03 f202 	mul.w	r2, r3, r2
 8005158:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	b29b      	uxth	r3, r3
 8005160:	18d1      	adds	r1, r2, r3
 8005162:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005166:	4b9f      	ldr	r3, [pc, #636]	; (80053e4 <get_unix_time+0x318>)
 8005168:	fba3 2302 	umull	r2, r3, r3, r2
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	b29b      	uxth	r3, r3
 8005170:	1ac9      	subs	r1, r1, r3
 8005172:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005176:	4b9b      	ldr	r3, [pc, #620]	; (80053e4 <get_unix_time+0x318>)
 8005178:	fba3 2302 	umull	r2, r3, r3, r2
 800517c:	09db      	lsrs	r3, r3, #7
 800517e:	b29b      	uxth	r3, r3
 8005180:	440b      	add	r3, r1
 8005182:	17da      	asrs	r2, r3, #31
 8005184:	63bb      	str	r3, [r7, #56]	; 0x38
 8005186:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800518c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 8005190:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8005194:	4613      	mov	r3, r2
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4618      	mov	r0, r3
 800519e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	4613      	mov	r3, r2
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	1899      	adds	r1, r3, r2
 80051aa:	4b8f      	ldr	r3, [pc, #572]	; (80053e8 <get_unix_time+0x31c>)
 80051ac:	fb83 2301 	smull	r2, r3, r3, r1
 80051b0:	105a      	asrs	r2, r3, #1
 80051b2:	17cb      	asrs	r3, r1, #31
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	18c2      	adds	r2, r0, r3
 80051b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80051bc:	4413      	add	r3, r2
 80051be:	17da      	asrs	r2, r3, #31
 80051c0:	653b      	str	r3, [r7, #80]	; 0x50
 80051c2:	657a      	str	r2, [r7, #84]	; 0x54
 80051c4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80051c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051ca:	1851      	adds	r1, r2, r1
 80051cc:	6339      	str	r1, [r7, #48]	; 0x30
 80051ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051d0:	eb43 0101 	adc.w	r1, r3, r1
 80051d4:	6379      	str	r1, [r7, #52]	; 0x34
 80051d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051da:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 80051de:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80051e2:	4982      	ldr	r1, [pc, #520]	; (80053ec <get_unix_time+0x320>)
 80051e4:	1851      	adds	r1, r2, r1
 80051e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80051e8:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051f2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 80051f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	1896      	adds	r6, r2, r2
 8005200:	623e      	str	r6, [r7, #32]
 8005202:	415b      	adcs	r3, r3
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
 8005206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800520a:	1814      	adds	r4, r2, r0
 800520c:	eb43 0501 	adc.w	r5, r3, r1
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	012b      	lsls	r3, r5, #4
 800521a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800521e:	0122      	lsls	r2, r4, #4
 8005220:	ebb2 0804 	subs.w	r8, r2, r4
 8005224:	eb63 0905 	sbc.w	r9, r3, r5
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8005234:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8005238:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800523c:	ebb2 0108 	subs.w	r1, r2, r8
 8005240:	61b9      	str	r1, [r7, #24]
 8005242:	eb63 0309 	sbc.w	r3, r3, r9
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8005254:	4629      	mov	r1, r5
 8005256:	01cb      	lsls	r3, r1, #7
 8005258:	4621      	mov	r1, r4
 800525a:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800525e:	4621      	mov	r1, r4
 8005260:	01ca      	lsls	r2, r1, #7
 8005262:	461c      	mov	r4, r3
 8005264:	4613      	mov	r3, r2
 8005266:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 800526a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800526e:	461a      	mov	r2, r3
 8005270:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005274:	fb03 f102 	mul.w	r1, r3, r2
 8005278:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800527c:	461a      	mov	r2, r3
 800527e:	4613      	mov	r3, r2
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	18ca      	adds	r2, r1, r3
 8005288:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800528c:	4413      	add	r3, r2
 800528e:	2200      	movs	r2, #0
 8005290:	64bb      	str	r3, [r7, #72]	; 0x48
 8005292:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005294:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005298:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800529c:	4621      	mov	r1, r4
 800529e:	1851      	adds	r1, r2, r1
 80052a0:	6139      	str	r1, [r7, #16]
 80052a2:	4629      	mov	r1, r5
 80052a4:	eb43 0101 	adc.w	r1, r3, r1
 80052a8:	6179      	str	r1, [r7, #20]
 80052aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80052ae:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	// Convert to milliseconds
	unix_tm_val *= 1000;
 80052b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	f04f 0400 	mov.w	r4, #0
 80052be:	f04f 0500 	mov.w	r5, #0
 80052c2:	015d      	lsls	r5, r3, #5
 80052c4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80052c8:	0154      	lsls	r4, r2, #5
 80052ca:	4622      	mov	r2, r4
 80052cc:	462b      	mov	r3, r5
 80052ce:	ebb2 0a00 	subs.w	sl, r2, r0
 80052d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80052e2:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 80052e6:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80052ea:	4692      	mov	sl, r2
 80052ec:	469b      	mov	fp, r3
 80052ee:	eb1a 0300 	adds.w	r3, sl, r0
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	eb4b 0301 	adc.w	r3, fp, r1
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005306:	4629      	mov	r1, r5
 8005308:	00cb      	lsls	r3, r1, #3
 800530a:	4621      	mov	r1, r4
 800530c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005310:	4621      	mov	r1, r4
 8005312:	00ca      	lsls	r2, r1, #3
 8005314:	461c      	mov	r4, r3
 8005316:	4613      	mov	r3, r2
 8005318:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	// Add milliseconds
	unix_tm_val += milliseconds;
 800531c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005320:	2200      	movs	r2, #0
 8005322:	643b      	str	r3, [r7, #64]	; 0x40
 8005324:	647a      	str	r2, [r7, #68]	; 0x44
 8005326:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800532a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800532e:	4621      	mov	r1, r4
 8005330:	1851      	adds	r1, r2, r1
 8005332:	6039      	str	r1, [r7, #0]
 8005334:	4629      	mov	r1, r5
 8005336:	eb43 0101 	adc.w	r1, r3, r1
 800533a:	6079      	str	r1, [r7, #4]
 800533c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005340:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

	buffer[0] = ((unix_tm_val >> 40) & 0xFF);
 8005344:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	0a0a      	lsrs	r2, r1, #8
 8005352:	2300      	movs	r3, #0
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005358:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 32) & 0xFF);
 800535a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	000a      	movs	r2, r1
 8005368:	2300      	movs	r3, #0
 800536a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800536c:	3101      	adds	r1, #1
 800536e:	b2d3      	uxtb	r3, r2
 8005370:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 24) & 0xFF);
 8005372:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	0e02      	lsrs	r2, r0, #24
 8005380:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005384:	0e0b      	lsrs	r3, r1, #24
 8005386:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005388:	3102      	adds	r1, #2
 800538a:	b2d3      	uxtb	r3, r2
 800538c:	700b      	strb	r3, [r1, #0]
	buffer[3] = ((unix_tm_val >> 16) & 0xFF);
 800538e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	0c02      	lsrs	r2, r0, #16
 800539c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80053a0:	0c0b      	lsrs	r3, r1, #16
 80053a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80053a4:	3103      	adds	r1, #3
 80053a6:	b2d3      	uxtb	r3, r2
 80053a8:	700b      	strb	r3, [r1, #0]
	buffer[4] = ((unix_tm_val >> 8) & 0xFF);
 80053aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	0a02      	lsrs	r2, r0, #8
 80053b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80053bc:	0a0b      	lsrs	r3, r1, #8
 80053be:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80053c0:	3104      	adds	r1, #4
 80053c2:	b2d3      	uxtb	r3, r2
 80053c4:	700b      	strb	r3, [r1, #0]
	buffer[5] = unix_tm_val & 0xFF;
 80053c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c8:	3305      	adds	r3, #5
 80053ca:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 80053ce:	701a      	strb	r2, [r3, #0]
}
 80053d0:	bf00      	nop
 80053d2:	3794      	adds	r7, #148	; 0x94
 80053d4:	46bd      	mov	sp, r7
 80053d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053da:	bf00      	nop
 80053dc:	24001af4 	.word	0x24001af4
 80053e0:	cccccccd 	.word	0xcccccccd
 80053e4:	51eb851f 	.word	0x51eb851f
 80053e8:	66666667 	.word	0x66666667
 80053ec:	fff50537 	.word	0xfff50537

080053f0 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08c      	sub	sp, #48	; 0x30
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	789b      	ldrb	r3, [r3, #2]
 8005404:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	78db      	ldrb	r3, [r3, #3]
 800540c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	791b      	ldrb	r3, [r3, #4]
 8005414:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	795b      	ldrb	r3, [r3, #5]
 800541c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	799b      	ldrb	r3, [r3, #6]
 8005424:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3307      	adds	r3, #7
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	b21a      	sxth	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3308      	adds	r3, #8
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b21b      	sxth	r3, r3
 800543a:	4313      	orrs	r3, r2
 800543c:	b21b      	sxth	r3, r3
 800543e:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005448:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800544c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005450:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8005458:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800545c:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 800545e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005462:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8005464:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005468:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 800546a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800546c:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 800546e:	f107 0320 	add.w	r3, r7, #32
 8005472:	2200      	movs	r2, #0
 8005474:	4619      	mov	r1, r3
 8005476:	480b      	ldr	r0, [pc, #44]	; (80054a4 <calibrateRTC+0xb4>)
 8005478:	f00c fc5c 	bl	8011d34 <HAL_RTC_SetDate>
 800547c:	4603      	mov	r3, r0
 800547e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8005482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <calibrateRTC+0x9e>
		Error_Handler();
 800548a:	f7fe fb19 	bl	8003ac0 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 800548e:	f107 030c 	add.w	r3, r7, #12
 8005492:	2200      	movs	r2, #0
 8005494:	4619      	mov	r1, r3
 8005496:	4803      	ldr	r0, [pc, #12]	; (80054a4 <calibrateRTC+0xb4>)
 8005498:	f000 f806 	bl	80054a8 <RTC_SetTime>
}
 800549c:	bf00      	nop
 800549e:	3730      	adds	r7, #48	; 0x30
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	24001af4 	.word	0x24001af4

080054a8 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 80054a8:	b590      	push	{r4, r7, lr}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <RTC_SetTime+0x1a>
 80054be:	2302      	movs	r3, #2
 80054c0:	e051      	b.n	8005566 <RTC_SetTime+0xbe>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	22ca      	movs	r2, #202	; 0xca
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2253      	movs	r2, #83	; 0x53
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f00c fd20 	bl	8011f28 <RTC_EnterInitMode>
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d129      	bne.n	8005546 <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2200      	movs	r2, #0
 80054f6:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f00c fd85 	bl	801200c <RTC_ByteToBcd2>
 8005502:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005504:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	4618      	mov	r0, r3
 800550c:	f00c fd7e 	bl	801200c <RTC_ByteToBcd2>
 8005510:	4603      	mov	r3, r0
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	789b      	ldrb	r3, [r3, #2]
 800551a:	4618      	mov	r0, r3
 800551c:	f00c fd76 	bl	801200c <RTC_ByteToBcd2>
 8005520:	4603      	mov	r3, r0
 8005522:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	78db      	ldrb	r3, [r3, #3]
 800552a:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	6939      	ldr	r1, [r7, #16]
 8005536:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <RTC_SetTime+0xc8>)
 8005538:	400b      	ands	r3, r1
 800553a:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f00c fd27 	bl	8011f90 <RTC_ExitInitMode>
 8005542:	4603      	mov	r3, r0
 8005544:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	22ff      	movs	r2, #255	; 0xff
 800554c:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8005564:	7dfb      	ldrb	r3, [r7, #23]

}
 8005566:	4618      	mov	r0, r3
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	bd90      	pop	{r4, r7, pc}
 800556e:	bf00      	nop
 8005570:	007f7f7f 	.word	0x007f7f7f

08005574 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005578:	4b30      	ldr	r3, [pc, #192]	; (800563c <MX_USART1_UART_Init+0xc8>)
 800557a:	4a31      	ldr	r2, [pc, #196]	; (8005640 <MX_USART1_UART_Init+0xcc>)
 800557c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800557e:	4b2f      	ldr	r3, [pc, #188]	; (800563c <MX_USART1_UART_Init+0xc8>)
 8005580:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8005584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005586:	4b2d      	ldr	r3, [pc, #180]	; (800563c <MX_USART1_UART_Init+0xc8>)
 8005588:	2200      	movs	r2, #0
 800558a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800558c:	4b2b      	ldr	r3, [pc, #172]	; (800563c <MX_USART1_UART_Init+0xc8>)
 800558e:	2200      	movs	r2, #0
 8005590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005592:	4b2a      	ldr	r3, [pc, #168]	; (800563c <MX_USART1_UART_Init+0xc8>)
 8005594:	2200      	movs	r2, #0
 8005596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005598:	4b28      	ldr	r3, [pc, #160]	; (800563c <MX_USART1_UART_Init+0xc8>)
 800559a:	220c      	movs	r2, #12
 800559c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800559e:	4b27      	ldr	r3, [pc, #156]	; (800563c <MX_USART1_UART_Init+0xc8>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055a4:	4b25      	ldr	r3, [pc, #148]	; (800563c <MX_USART1_UART_Init+0xc8>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <MX_USART1_UART_Init+0xc8>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80055b0:	4b22      	ldr	r3, [pc, #136]	; (800563c <MX_USART1_UART_Init+0xc8>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055b6:	4b21      	ldr	r3, [pc, #132]	; (800563c <MX_USART1_UART_Init+0xc8>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055bc:	481f      	ldr	r0, [pc, #124]	; (800563c <MX_USART1_UART_Init+0xc8>)
 80055be:	f00e ff07 	bl	80143d0 <HAL_UART_Init>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80055c8:	f7fe fa7a 	bl	8003ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055cc:	2100      	movs	r1, #0
 80055ce:	481b      	ldr	r0, [pc, #108]	; (800563c <MX_USART1_UART_Init+0xc8>)
 80055d0:	f011 fc4d 	bl	8016e6e <HAL_UARTEx_SetTxFifoThreshold>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80055da:	f7fe fa71 	bl	8003ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055de:	2100      	movs	r1, #0
 80055e0:	4816      	ldr	r0, [pc, #88]	; (800563c <MX_USART1_UART_Init+0xc8>)
 80055e2:	f011 fc82 	bl	8016eea <HAL_UARTEx_SetRxFifoThreshold>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80055ec:	f7fe fa68 	bl	8003ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80055f0:	4812      	ldr	r0, [pc, #72]	; (800563c <MX_USART1_UART_Init+0xc8>)
 80055f2:	f011 fc03 	bl	8016dfc <HAL_UARTEx_DisableFifoMode>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80055fc:	f7fe fa60 	bl	8003ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005600:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005604:	480d      	ldr	r0, [pc, #52]	; (800563c <MX_USART1_UART_Init+0xc8>)
 8005606:	f011 fc70 	bl	8016eea <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800560a:	480c      	ldr	r0, [pc, #48]	; (800563c <MX_USART1_UART_Init+0xc8>)
 800560c:	f011 fbbb 	bl	8016d86 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005610:	480a      	ldr	r0, [pc, #40]	; (800563c <MX_USART1_UART_Init+0xc8>)
 8005612:	f011 fb85 	bl	8016d20 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <MX_USART1_UART_Init+0xc8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	4b07      	ldr	r3, [pc, #28]	; (800563c <MX_USART1_UART_Init+0xc8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005624:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <MX_USART1_UART_Init+0xc8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <MX_USART1_UART_Init+0xc8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005634:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005636:	bf00      	nop
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	24001e3c 	.word	0x24001e3c
 8005640:	40011000 	.word	0x40011000

08005644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b0ba      	sub	sp, #232	; 0xe8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800564c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	605a      	str	r2, [r3, #4]
 8005656:	609a      	str	r2, [r3, #8]
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800565c:	f107 0310 	add.w	r3, r7, #16
 8005660:	22c0      	movs	r2, #192	; 0xc0
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f015 f871 	bl	801a74c <memset>
  if(uartHandle->Instance==USART1)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a41      	ldr	r2, [pc, #260]	; (8005774 <HAL_UART_MspInit+0x130>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d17b      	bne.n	800576c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005674:	f04f 0201 	mov.w	r2, #1
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8005680:	2318      	movs	r3, #24
 8005682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005686:	f107 0310 	add.w	r3, r7, #16
 800568a:	4618      	mov	r0, r3
 800568c:	f009 fcd8 	bl	800f040 <HAL_RCCEx_PeriphCLKConfig>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005696:	f7fe fa13 	bl	8003ac0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800569a:	4b37      	ldr	r3, [pc, #220]	; (8005778 <HAL_UART_MspInit+0x134>)
 800569c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056a0:	4a35      	ldr	r2, [pc, #212]	; (8005778 <HAL_UART_MspInit+0x134>)
 80056a2:	f043 0310 	orr.w	r3, r3, #16
 80056a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80056aa:	4b33      	ldr	r3, [pc, #204]	; (8005778 <HAL_UART_MspInit+0x134>)
 80056ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056b8:	4b2f      	ldr	r3, [pc, #188]	; (8005778 <HAL_UART_MspInit+0x134>)
 80056ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056be:	4a2e      	ldr	r2, [pc, #184]	; (8005778 <HAL_UART_MspInit+0x134>)
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056c8:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <HAL_UART_MspInit+0x134>)
 80056ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	60bb      	str	r3, [r7, #8]
 80056d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80056d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80056da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056de:	2302      	movs	r3, #2
 80056e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80056f0:	2307      	movs	r3, #7
 80056f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80056fa:	4619      	mov	r1, r3
 80056fc:	481f      	ldr	r0, [pc, #124]	; (800577c <HAL_UART_MspInit+0x138>)
 80056fe:	f005 feab 	bl	800b458 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005702:	4b1f      	ldr	r3, [pc, #124]	; (8005780 <HAL_UART_MspInit+0x13c>)
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <HAL_UART_MspInit+0x140>)
 8005706:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005708:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <HAL_UART_MspInit+0x13c>)
 800570a:	222a      	movs	r2, #42	; 0x2a
 800570c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800570e:	4b1c      	ldr	r3, [pc, #112]	; (8005780 <HAL_UART_MspInit+0x13c>)
 8005710:	2240      	movs	r2, #64	; 0x40
 8005712:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <HAL_UART_MspInit+0x13c>)
 8005716:	2200      	movs	r2, #0
 8005718:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800571a:	4b19      	ldr	r3, [pc, #100]	; (8005780 <HAL_UART_MspInit+0x13c>)
 800571c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005720:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005722:	4b17      	ldr	r3, [pc, #92]	; (8005780 <HAL_UART_MspInit+0x13c>)
 8005724:	2200      	movs	r2, #0
 8005726:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005728:	4b15      	ldr	r3, [pc, #84]	; (8005780 <HAL_UART_MspInit+0x13c>)
 800572a:	2200      	movs	r2, #0
 800572c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800572e:	4b14      	ldr	r3, [pc, #80]	; (8005780 <HAL_UART_MspInit+0x13c>)
 8005730:	2200      	movs	r2, #0
 8005732:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005734:	4b12      	ldr	r3, [pc, #72]	; (8005780 <HAL_UART_MspInit+0x13c>)
 8005736:	2200      	movs	r2, #0
 8005738:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <HAL_UART_MspInit+0x13c>)
 800573c:	2200      	movs	r2, #0
 800573e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005740:	480f      	ldr	r0, [pc, #60]	; (8005780 <HAL_UART_MspInit+0x13c>)
 8005742:	f002 fd59 	bl	80081f8 <HAL_DMA_Init>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800574c:	f7fe f9b8 	bl	8003ac0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a0b      	ldr	r2, [pc, #44]	; (8005780 <HAL_UART_MspInit+0x13c>)
 8005754:	67da      	str	r2, [r3, #124]	; 0x7c
 8005756:	4a0a      	ldr	r2, [pc, #40]	; (8005780 <HAL_UART_MspInit+0x13c>)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800575c:	2200      	movs	r2, #0
 800575e:	2105      	movs	r1, #5
 8005760:	2025      	movs	r0, #37	; 0x25
 8005762:	f002 f91b 	bl	800799c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005766:	2025      	movs	r0, #37	; 0x25
 8005768:	f002 f932 	bl	80079d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800576c:	bf00      	nop
 800576e:	37e8      	adds	r7, #232	; 0xe8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40011000 	.word	0x40011000
 8005778:	58024400 	.word	0x58024400
 800577c:	58020000 	.word	0x58020000
 8005780:	24001ed0 	.word	0x24001ed0
 8005784:	40020040 	.word	0x40020040

08005788 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8005792:	4bc3      	ldr	r3, [pc, #780]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8005798:	4bc1      	ldr	r3, [pc, #772]	; (8005aa0 <voltage_monitor_init+0x318>)
 800579a:	2200      	movs	r2, #0
 800579c:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 800579e:	4bc0      	ldr	r3, [pc, #768]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057a0:	2201      	movs	r2, #1
 80057a2:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80057a4:	4bbe      	ldr	r3, [pc, #760]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057aa:	4bbd      	ldr	r3, [pc, #756]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80057b0:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 80057b2:	4bbb      	ldr	r3, [pc, #748]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80057b8:	4bb9      	ldr	r3, [pc, #740]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80057be:	4bb8      	ldr	r3, [pc, #736]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80057c4:	4bb6      	ldr	r3, [pc, #728]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 80057ca:	4bb5      	ldr	r3, [pc, #724]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057d0:	4bb3      	ldr	r3, [pc, #716]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80057d6:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80057d8:	4bb1      	ldr	r3, [pc, #708]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057da:	2200      	movs	r2, #0
 80057dc:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80057de:	4bb0      	ldr	r3, [pc, #704]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057e0:	2202      	movs	r2, #2
 80057e2:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 80057e4:	4bae      	ldr	r3, [pc, #696]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 80057ea:	4bad      	ldr	r3, [pc, #692]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 80057f0:	4bab      	ldr	r3, [pc, #684]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80057f6:	4baa      	ldr	r3, [pc, #680]	; (8005aa0 <voltage_monitor_init+0x318>)
 80057f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80057fc:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 80057fe:	4ba8      	ldr	r3, [pc, #672]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005800:	2200      	movs	r2, #0
 8005802:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005804:	4ba6      	ldr	r3, [pc, #664]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005806:	2203      	movs	r2, #3
 8005808:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 800580a:	4ba5      	ldr	r3, [pc, #660]	; (8005aa0 <voltage_monitor_init+0x318>)
 800580c:	2200      	movs	r2, #0
 800580e:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8005810:	4ba3      	ldr	r3, [pc, #652]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8005818:	4ba1      	ldr	r3, [pc, #644]	; (8005aa0 <voltage_monitor_init+0x318>)
 800581a:	2200      	movs	r2, #0
 800581c:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 800581e:	4ba0      	ldr	r3, [pc, #640]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005820:	f242 7210 	movw	r2, #10000	; 0x2710
 8005824:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8005826:	4b9e      	ldr	r3, [pc, #632]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005828:	2200      	movs	r2, #0
 800582a:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 800582c:	4b9c      	ldr	r3, [pc, #624]	; (8005aa0 <voltage_monitor_init+0x318>)
 800582e:	2204      	movs	r2, #4
 8005830:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005834:	4b9a      	ldr	r3, [pc, #616]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 800583c:	4b98      	ldr	r3, [pc, #608]	; (8005aa0 <voltage_monitor_init+0x318>)
 800583e:	2201      	movs	r2, #1
 8005840:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005844:	4b96      	ldr	r3, [pc, #600]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005846:	2200      	movs	r2, #0
 8005848:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800584a:	4b95      	ldr	r3, [pc, #596]	; (8005aa0 <voltage_monitor_init+0x318>)
 800584c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005850:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 10000;
 8005852:	4b93      	ldr	r3, [pc, #588]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005854:	f242 7210 	movw	r2, #10000	; 0x2710
 8005858:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 800585a:	4b91      	ldr	r3, [pc, #580]	; (8005aa0 <voltage_monitor_init+0x318>)
 800585c:	2205      	movs	r2, #5
 800585e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8005862:	4b8f      	ldr	r3, [pc, #572]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 800586a:	4b8d      	ldr	r3, [pc, #564]	; (8005aa0 <voltage_monitor_init+0x318>)
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8005872:	4b8b      	ldr	r3, [pc, #556]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005874:	2200      	movs	r2, #0
 8005876:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005878:	4b89      	ldr	r3, [pc, #548]	; (8005aa0 <voltage_monitor_init+0x318>)
 800587a:	f242 7210 	movw	r2, #10000	; 0x2710
 800587e:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8005880:	4b87      	ldr	r3, [pc, #540]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005882:	2200      	movs	r2, #0
 8005884:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8005886:	4b86      	ldr	r3, [pc, #536]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005888:	2206      	movs	r2, #6
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 800588e:	4b84      	ldr	r3, [pc, #528]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 0;
 8005896:	4b82      	ldr	r3, [pc, #520]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 800589e:	4b80      	ldr	r3, [pc, #512]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80058a6:	4b7e      	ldr	r3, [pc, #504]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80058ac:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80058b0:	4b7b      	ldr	r3, [pc, #492]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80058b8:	4b79      	ldr	r3, [pc, #484]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058ba:	2207      	movs	r2, #7
 80058bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80058c0:	4b77      	ldr	r3, [pc, #476]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 0;
 80058c8:	4b75      	ldr	r3, [pc, #468]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80058d0:	4b73      	ldr	r3, [pc, #460]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80058d8:	4b71      	ldr	r3, [pc, #452]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058da:	f242 7210 	movw	r2, #10000	; 0x2710
 80058de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80058e2:	4b6f      	ldr	r3, [pc, #444]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80058ea:	4b6d      	ldr	r3, [pc, #436]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058ec:	2208      	movs	r2, #8
 80058ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 80058f2:	4b6b      	ldr	r3, [pc, #428]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80058fa:	4b69      	ldr	r3, [pc, #420]	; (8005aa0 <voltage_monitor_init+0x318>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8005902:	4b67      	ldr	r3, [pc, #412]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005904:	2200      	movs	r2, #0
 8005906:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 800590a:	4b65      	ldr	r3, [pc, #404]	; (8005aa0 <voltage_monitor_init+0x318>)
 800590c:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8005910:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8005914:	4b62      	ldr	r3, [pc, #392]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005916:	f640 3283 	movw	r2, #2947	; 0xb83
 800591a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 800591e:	4b60      	ldr	r3, [pc, #384]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005920:	2209      	movs	r2, #9
 8005922:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005926:	4b5e      	ldr	r3, [pc, #376]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005928:	2200      	movs	r2, #0
 800592a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 800592e:	4b5c      	ldr	r3, [pc, #368]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005930:	2200      	movs	r2, #0
 8005932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005936:	4b5a      	ldr	r3, [pc, #360]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005938:	2200      	movs	r2, #0
 800593a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 800593e:	4b58      	ldr	r3, [pc, #352]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005940:	f640 7245 	movw	r2, #3909	; 0xf45
 8005944:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005948:	4b55      	ldr	r3, [pc, #340]	; (8005aa0 <voltage_monitor_init+0x318>)
 800594a:	2200      	movs	r2, #0
 800594c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8005950:	4b53      	ldr	r3, [pc, #332]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005952:	220a      	movs	r2, #10
 8005954:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005958:	4b51      	ldr	r3, [pc, #324]	; (8005aa0 <voltage_monitor_init+0x318>)
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8005960:	4b4f      	ldr	r3, [pc, #316]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8005968:	4b4d      	ldr	r3, [pc, #308]	; (8005aa0 <voltage_monitor_init+0x318>)
 800596a:	2200      	movs	r2, #0
 800596c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8005970:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005972:	f640 7245 	movw	r2, #3909	; 0xf45
 8005976:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 800597a:	4b49      	ldr	r3, [pc, #292]	; (8005aa0 <voltage_monitor_init+0x318>)
 800597c:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005980:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8005984:	4b46      	ldr	r3, [pc, #280]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005986:	220b      	movs	r2, #11
 8005988:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 800598c:	4b44      	ldr	r3, [pc, #272]	; (8005aa0 <voltage_monitor_init+0x318>)
 800598e:	2200      	movs	r2, #0
 8005990:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8005994:	4b42      	ldr	r3, [pc, #264]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 800599c:	4b40      	ldr	r3, [pc, #256]	; (8005aa0 <voltage_monitor_init+0x318>)
 800599e:	2200      	movs	r2, #0
 80059a0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80059a4:	4b3e      	ldr	r3, [pc, #248]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059a6:	f640 72fb 	movw	r2, #4091	; 0xffb
 80059aa:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80059ae:	4b3c      	ldr	r3, [pc, #240]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059b0:	f640 6276 	movw	r2, #3702	; 0xe76
 80059b4:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80059b8:	4b39      	ldr	r3, [pc, #228]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059ba:	220c      	movs	r2, #12
 80059bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80059c0:	4b37      	ldr	r3, [pc, #220]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80059c8:	4b35      	ldr	r3, [pc, #212]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 80059d0:	4b33      	ldr	r3, [pc, #204]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 80059d8:	4b31      	ldr	r3, [pc, #196]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059da:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80059de:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80059e2:	4b2f      	ldr	r3, [pc, #188]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 80059ea:	4b2d      	ldr	r3, [pc, #180]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059ec:	220d      	movs	r2, #13
 80059ee:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 80059f2:	4b2b      	ldr	r3, [pc, #172]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 80059fa:	4b29      	ldr	r3, [pc, #164]	; (8005aa0 <voltage_monitor_init+0x318>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8005a02:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8005a0a:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a0c:	f640 7238 	movw	r2, #3896	; 0xf38
 8005a10:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8005a14:	4b22      	ldr	r3, [pc, #136]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a16:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8005a1a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8005a1e:	4b20      	ldr	r3, [pc, #128]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a20:	220e      	movs	r2, #14
 8005a22:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005a26:	4b1e      	ldr	r3, [pc, #120]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005a2e:	4b1c      	ldr	r3, [pc, #112]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005a36:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8005a3e:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a40:	f640 7245 	movw	r2, #3909	; 0xf45
 8005a44:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a4a:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8005a4e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005a52:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a54:	220f      	movs	r2, #15
 8005a56:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005a5a:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8005a62:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a74:	f241 0264 	movw	r2, #4196	; 0x1064
 8005a78:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8005a7c:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a86:	2210      	movs	r2, #16
 8005a88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8005a8c:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8005a94:	4b02      	ldr	r3, [pc, #8]	; (8005aa0 <voltage_monitor_init+0x318>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8005a9c:	e002      	b.n	8005aa4 <voltage_monitor_init+0x31c>
 8005a9e:	bf00      	nop
 8005aa0:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 8005aa4:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <voltage_monitor_init+0x37c>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8005aac:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <voltage_monitor_init+0x37c>)
 8005aae:	f640 5208 	movw	r2, #3336	; 0xd08
 8005ab2:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8005ab6:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <voltage_monitor_init+0x37c>)
 8005ab8:	f640 32ca 	movw	r2, #3018	; 0xbca
 8005abc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8005ac0:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <voltage_monitor_init+0x37c>)
 8005ac2:	2211      	movs	r2, #17
 8005ac4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005ac8:	4b0e      	ldr	r3, [pc, #56]	; (8005b04 <voltage_monitor_init+0x37c>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <voltage_monitor_init+0x37c>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <voltage_monitor_init+0x37c>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005ae0:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <voltage_monitor_init+0x37c>)
 8005ae2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ae6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005aea:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <voltage_monitor_init+0x37c>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8005af2:	2301      	movs	r3, #1
 8005af4:	71fb      	strb	r3, [r7, #7]

	return status;
 8005af6:	79fb      	ldrb	r3, [r7, #7]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	24001f48 	.word	0x24001f48

08005b08 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	460a      	mov	r2, r1
 8005b12:	71fb      	strb	r3, [r7, #7]
 8005b14:	4613      	mov	r3, r2
 8005b16:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005b1c:	79fa      	ldrb	r2, [r7, #7]
 8005b1e:	4909      	ldr	r1, [pc, #36]	; (8005b44 <set_rail_monitor_enable+0x3c>)
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	440b      	add	r3, r1
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	79ba      	ldrb	r2, [r7, #6]
 8005b2e:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]

	return status;
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	24001f48 	.word	0x24001f48

08005b48 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005b54:	463b      	mov	r3, r7
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe faf0 	bl	800413c <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005b5c:	f107 0310 	add.w	r3, r7, #16
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe fb1b 	bl	800419c <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005b66:	f107 0308 	add.w	r3, r7, #8
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fb68 	bl	8004240 <sample_hk_adc3>
 8005b70:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8005b72:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <set_rail_monitor+0xc0>)
 8005b74:	809a      	strh	r2, [r3, #4]
 8005b76:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005b78:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <set_rail_monitor+0xc0>)
 8005b7a:	81da      	strh	r2, [r3, #14]
 8005b7c:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8005b7e:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <set_rail_monitor+0xc0>)
 8005b80:	831a      	strh	r2, [r3, #24]
 8005b82:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005b84:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <set_rail_monitor+0xc0>)
 8005b86:	845a      	strh	r2, [r3, #34]	; 0x22
 8005b88:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <set_rail_monitor+0xc0>)
 8005b8c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005b90:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <set_rail_monitor+0xc0>)
 8005b92:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b94:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005b96:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <set_rail_monitor+0xc0>)
 8005b98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005b9c:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8005b9e:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <set_rail_monitor+0xc0>)
 8005ba0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005ba4:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8005ba6:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <set_rail_monitor+0xc0>)
 8005ba8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005bac:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8005bae:	4b16      	ldr	r3, [pc, #88]	; (8005c08 <set_rail_monitor+0xc0>)
 8005bb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005bb4:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8005bb6:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <set_rail_monitor+0xc0>)
 8005bb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005bbc:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8005bbe:	4b12      	ldr	r3, [pc, #72]	; (8005c08 <set_rail_monitor+0xc0>)
 8005bc0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005bc4:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005bc6:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <set_rail_monitor+0xc0>)
 8005bc8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005bcc:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8005bce:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <set_rail_monitor+0xc0>)
 8005bd0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005bd4:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <set_rail_monitor+0xc0>)
 8005bd8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005bdc:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8005bde:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <set_rail_monitor+0xc0>)
 8005be0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005be4:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <set_rail_monitor+0xc0>)
 8005be8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005bec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005bee:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <set_rail_monitor+0xc0>)
 8005bf0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3728      	adds	r7, #40	; 0x28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	24001f48 	.word	0x24001f48

08005c0c <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005c10:	4b02      	ldr	r3, [pc, #8]	; (8005c1c <get_rail_monitor+0x10>)
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	24001f48 	.word	0x24001f48

08005c20 <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8005c2e:	89fb      	ldrh	r3, [r7, #14]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	db05      	blt.n	8005c42 <in_range+0x22>
 8005c36:	89fb      	ldrh	r3, [r7, #14]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	dc01      	bgt.n	8005c42 <in_range+0x22>
		return 1;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <in_range+0x24>
	}
	return 0;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <monitor_rails>:


void monitor_rails() {
 8005c50:	b590      	push	{r4, r7, lr}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e0bd      	b.n	8005dd8 <monitor_rails+0x188>
		if (rail_monitor[i].is_enabled){
 8005c5c:	4966      	ldr	r1, [pc, #408]	; (8005df8 <monitor_rails+0x1a8>)
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	440b      	add	r3, r1
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d056      	beq.n	8005d20 <monitor_rails+0xd0>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8005c72:	4961      	ldr	r1, [pc, #388]	; (8005df8 <monitor_rails+0x1a8>)
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	440b      	add	r3, r1
 8005c80:	3304      	adds	r3, #4
 8005c82:	8818      	ldrh	r0, [r3, #0]
 8005c84:	495c      	ldr	r1, [pc, #368]	; (8005df8 <monitor_rails+0x1a8>)
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	440b      	add	r3, r1
 8005c92:	3308      	adds	r3, #8
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	461c      	mov	r4, r3
 8005c98:	4957      	ldr	r1, [pc, #348]	; (8005df8 <monitor_rails+0x1a8>)
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	440b      	add	r3, r1
 8005ca6:	3306      	adds	r3, #6
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	4621      	mov	r1, r4
 8005cae:	f7ff ffb7 	bl	8005c20 <in_range>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f040 808c 	bne.w	8005dd2 <monitor_rails+0x182>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005cba:	494f      	ldr	r1, [pc, #316]	; (8005df8 <monitor_rails+0x1a8>)
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	440b      	add	r3, r1
 8005cc8:	3301      	adds	r3, #1
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	b2d8      	uxtb	r0, r3
 8005cd0:	4949      	ldr	r1, [pc, #292]	; (8005df8 <monitor_rails+0x1a8>)
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	440b      	add	r3, r1
 8005cde:	3301      	adds	r3, #1
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005ce4:	4944      	ldr	r1, [pc, #272]	; (8005df8 <monitor_rails+0x1a8>)
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	440b      	add	r3, r1
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d16b      	bne.n	8005dd2 <monitor_rails+0x182>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005cfa:	493f      	ldr	r1, [pc, #252]	; (8005df8 <monitor_rails+0x1a8>)
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	440b      	add	r3, r1
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f876 	bl	8005dfc <get_rail_name_error_detail>
 8005d10:	4603      	mov	r3, r0
 8005d12:	727b      	strb	r3, [r7, #9]
					error.category = EC_power_supply_rail;
 8005d14:	2300      	movs	r3, #0
 8005d16:	723b      	strb	r3, [r7, #8]
					handle_error(error);
 8005d18:	68b8      	ldr	r0, [r7, #8]
 8005d1a:	f7fc f91f 	bl	8001f5c <handle_error>
 8005d1e:	e058      	b.n	8005dd2 <monitor_rails+0x182>
			}
		}
		// If the rail monitor isn't enabled...
		else {
			uint16_t tolerance;
			tolerance = rail_monitor[i].max_voltage * 0.1;
 8005d20:	4935      	ldr	r1, [pc, #212]	; (8005df8 <monitor_rails+0x1a8>)
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3306      	adds	r3, #6
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005d3a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8005df0 <monitor_rails+0x1a0>
 8005d3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005d46:	ee17 3a90 	vmov	r3, s15
 8005d4a:	817b      	strh	r3, [r7, #10]

			// If it isn't within +10% of its max voltage from 0...
			if (!in_range(rail_monitor[i].data, 0, tolerance)) {
 8005d4c:	492a      	ldr	r1, [pc, #168]	; (8005df8 <monitor_rails+0x1a8>)
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	440b      	add	r3, r1
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	897a      	ldrh	r2, [r7, #10]
 8005d60:	2100      	movs	r1, #0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff ff5c 	bl	8005c20 <in_range>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d131      	bne.n	8005dd2 <monitor_rails+0x182>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005d6e:	4922      	ldr	r1, [pc, #136]	; (8005df8 <monitor_rails+0x1a8>)
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	440b      	add	r3, r1
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	b2d8      	uxtb	r0, r3
 8005d84:	491c      	ldr	r1, [pc, #112]	; (8005df8 <monitor_rails+0x1a8>)
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	440b      	add	r3, r1
 8005d92:	3301      	adds	r3, #1
 8005d94:	4602      	mov	r2, r0
 8005d96:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005d98:	4917      	ldr	r1, [pc, #92]	; (8005df8 <monitor_rails+0x1a8>)
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	440b      	add	r3, r1
 8005da6:	3301      	adds	r3, #1
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d111      	bne.n	8005dd2 <monitor_rails+0x182>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005dae:	4912      	ldr	r1, [pc, #72]	; (8005df8 <monitor_rails+0x1a8>)
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	440b      	add	r3, r1
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f81c 	bl	8005dfc <get_rail_name_error_detail>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	717b      	strb	r3, [r7, #5]
					error.category = EC_power_supply_rail;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	713b      	strb	r3, [r7, #4]
					handle_error(error);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fc f8c5 	bl	8001f5c <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b11      	cmp	r3, #17
 8005ddc:	f77f af3e 	ble.w	8005c5c <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd90      	pop	{r4, r7, pc}
 8005dea:	bf00      	nop
 8005dec:	f3af 8000 	nop.w
 8005df0:	9999999a 	.word	0x9999999a
 8005df4:	3fb99999 	.word	0x3fb99999
 8005df8:	24001f48 	.word	0x24001f48

08005dfc <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	2b11      	cmp	r3, #17
 8005e0a:	d84b      	bhi.n	8005ea4 <get_rail_name_error_detail+0xa8>
 8005e0c:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <get_rail_name_error_detail+0x18>)
 8005e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e12:	bf00      	nop
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005e61 	.word	0x08005e61
 8005e1c:	08005e65 	.word	0x08005e65
 8005e20:	08005e69 	.word	0x08005e69
 8005e24:	08005e6d 	.word	0x08005e6d
 8005e28:	08005e71 	.word	0x08005e71
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e79 	.word	0x08005e79
 8005e34:	08005e7d 	.word	0x08005e7d
 8005e38:	08005e81 	.word	0x08005e81
 8005e3c:	08005e85 	.word	0x08005e85
 8005e40:	08005e89 	.word	0x08005e89
 8005e44:	08005e8d 	.word	0x08005e8d
 8005e48:	08005e91 	.word	0x08005e91
 8005e4c:	08005e95 	.word	0x08005e95
 8005e50:	08005e99 	.word	0x08005e99
 8005e54:	08005e9d 	.word	0x08005e9d
 8005e58:	08005ea1 	.word	0x08005ea1
	case RAIL_vsense:
		return ED_vsense;
 8005e5c:	2306      	movs	r3, #6
 8005e5e:	e022      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8005e60:	2307      	movs	r3, #7
 8005e62:	e020      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8005e64:	2308      	movs	r3, #8
 8005e66:	e01e      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8005e68:	2309      	movs	r3, #9
 8005e6a:	e01c      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8005e6c:	230a      	movs	r3, #10
 8005e6e:	e01a      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8005e70:	230b      	movs	r3, #11
 8005e72:	e018      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8005e74:	230c      	movs	r3, #12
 8005e76:	e016      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8005e78:	230d      	movs	r3, #13
 8005e7a:	e014      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8005e7c:	230e      	movs	r3, #14
 8005e7e:	e012      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8005e80:	230f      	movs	r3, #15
 8005e82:	e010      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8005e84:	2310      	movs	r3, #16
 8005e86:	e00e      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8005e88:	2311      	movs	r3, #17
 8005e8a:	e00c      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8005e8c:	2312      	movs	r3, #18
 8005e8e:	e00a      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8005e90:	2313      	movs	r3, #19
 8005e92:	e008      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8005e94:	2314      	movs	r3, #20
 8005e96:	e006      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8005e98:	2315      	movs	r3, #21
 8005e9a:	e004      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8005e9c:	2316      	movs	r3, #22
 8005e9e:	e002      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8005ea0:	2317      	movs	r3, #23
 8005ea2:	e000      	b.n	8005ea6 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005ea4:	231a      	movs	r3, #26
	}
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop

08005eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005eb8:	f7fe fe4a 	bl	8004b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ebc:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005ebe:	490d      	ldr	r1, [pc, #52]	; (8005ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ec0:	4a0d      	ldr	r2, [pc, #52]	; (8005ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ec4:	e002      	b.n	8005ecc <LoopCopyDataInit>

08005ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005eca:	3304      	adds	r3, #4

08005ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ed0:	d3f9      	bcc.n	8005ec6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ed2:	4a0a      	ldr	r2, [pc, #40]	; (8005efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005ed4:	4c0a      	ldr	r4, [pc, #40]	; (8005f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ed8:	e001      	b.n	8005ede <LoopFillZerobss>

08005eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005edc:	3204      	adds	r2, #4

08005ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ee0:	d3fb      	bcc.n	8005eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ee2:	f014 fc01 	bl	801a6e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ee6:	f7fd fc09 	bl	80036fc <main>
  bx  lr
 8005eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005eec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005ef0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005ef4:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8005ef8:	0801b618 	.word	0x0801b618
  ldr r2, =_sbss
 8005efc:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8005f00:	2400697c 	.word	0x2400697c

08005f04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f04:	e7fe      	b.n	8005f04 <ADC3_IRQHandler>
	...

08005f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f0e:	2003      	movs	r0, #3
 8005f10:	f001 fd39 	bl	8007986 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f14:	f008 fe7c 	bl	800ec10 <HAL_RCC_GetSysClockFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b15      	ldr	r3, [pc, #84]	; (8005f70 <HAL_Init+0x68>)
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	4913      	ldr	r1, [pc, #76]	; (8005f74 <HAL_Init+0x6c>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f32:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <HAL_Init+0x68>)
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	4a0e      	ldr	r2, [pc, #56]	; (8005f74 <HAL_Init+0x6c>)
 8005f3c:	5cd3      	ldrb	r3, [r2, r3]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
 8005f48:	4a0b      	ldr	r2, [pc, #44]	; (8005f78 <HAL_Init+0x70>)
 8005f4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f4c:	4a0b      	ldr	r2, [pc, #44]	; (8005f7c <HAL_Init+0x74>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f52:	2005      	movs	r0, #5
 8005f54:	f7fe fbe6 	bl	8004724 <HAL_InitTick>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e002      	b.n	8005f68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005f62:	f7fe fbc1 	bl	80046e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	58024400 	.word	0x58024400
 8005f74:	0801b564 	.word	0x0801b564
 8005f78:	240000c4 	.word	0x240000c4
 8005f7c:	240000c0 	.word	0x240000c0

08005f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005f84:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_IncTick+0x20>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <HAL_IncTick+0x24>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4413      	add	r3, r2
 8005f90:	4a04      	ldr	r2, [pc, #16]	; (8005fa4 <HAL_IncTick+0x24>)
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	240000cc 	.word	0x240000cc
 8005fa4:	24001ffc 	.word	0x24001ffc

08005fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  return uwTick;
 8005fac:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <HAL_GetTick+0x14>)
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	24001ffc 	.word	0x24001ffc

08005fc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <HAL_GetREVID+0x14>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	0c1b      	lsrs	r3, r3, #16
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	5c001000 	.word	0x5c001000

08005fd8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005fe2:	4b07      	ldr	r3, [pc, #28]	; (8006000 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	401a      	ands	r2, r3
 8005fec:	4904      	ldr	r1, [pc, #16]	; (8006000 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	604b      	str	r3, [r1, #4]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	58000400 	.word	0x58000400

08006004 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	609a      	str	r2, [r3, #8]
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	609a      	str	r2, [r3, #8]
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3360      	adds	r3, #96	; 0x60
 800607e:	461a      	mov	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	430b      	orrs	r3, r1
 800609a:	431a      	orrs	r2, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	fa01 f303 	lsl.w	r3, r1, r3
 80060cc:	431a      	orrs	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	611a      	str	r2, [r3, #16]
}
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80060de:	b480      	push	{r7}
 80060e0:	b087      	sub	sp, #28
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3360      	adds	r3, #96	; 0x60
 80060ee:	461a      	mov	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	431a      	orrs	r2, r3
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	601a      	str	r2, [r3, #0]
  }
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800613a:	b480      	push	{r7}
 800613c:	b087      	sub	sp, #28
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3330      	adds	r3, #48	; 0x30
 800614a:	461a      	mov	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	0a1b      	lsrs	r3, r3, #8
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	f003 030c 	and.w	r3, r3, #12
 8006156:	4413      	add	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	211f      	movs	r1, #31
 8006166:	fa01 f303 	lsl.w	r3, r1, r3
 800616a:	43db      	mvns	r3, r3
 800616c:	401a      	ands	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	0e9b      	lsrs	r3, r3, #26
 8006172:	f003 011f 	and.w	r1, r3, #31
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	fa01 f303 	lsl.w	r3, r1, r3
 8006180:	431a      	orrs	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f023 0203 	bic.w	r2, r3, #3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3314      	adds	r3, #20
 80061c8:	461a      	mov	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	0e5b      	lsrs	r3, r3, #25
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	4413      	add	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	0d1b      	lsrs	r3, r3, #20
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	2107      	movs	r1, #7
 80061e6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	401a      	ands	r2, r3
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	0d1b      	lsrs	r3, r3, #20
 80061f2:	f003 031f 	and.w	r3, r3, #31
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	fa01 f303 	lsl.w	r3, r1, r3
 80061fc:	431a      	orrs	r2, r3
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
	...

08006210 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006228:	43db      	mvns	r3, r3
 800622a:	401a      	ands	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f003 0318 	and.w	r3, r3, #24
 8006232:	4908      	ldr	r1, [pc, #32]	; (8006254 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006234:	40d9      	lsrs	r1, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	400b      	ands	r3, r1
 800623a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800623e:	431a      	orrs	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	000fffff 	.word	0x000fffff

08006258 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f003 031f 	and.w	r3, r3, #31
}
 8006268:	4618      	mov	r0, r3
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <LL_ADC_DisableDeepPowerDown+0x20>)
 8006282:	4013      	ands	r3, r2
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6093      	str	r3, [r2, #8]
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	5fffffc0 	.word	0x5fffffc0

08006298 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ac:	d101      	bne.n	80062b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80062ce:	4013      	ands	r3, r2
 80062d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	6fffffc0 	.word	0x6fffffc0

080062e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062fc:	d101      	bne.n	8006302 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <LL_ADC_Enable+0x24>)
 800631e:	4013      	ands	r3, r2
 8006320:	f043 0201 	orr.w	r2, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	7fffffc0 	.word	0x7fffffc0

08006338 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <LL_ADC_Disable+0x24>)
 8006346:	4013      	ands	r3, r2
 8006348:	f043 0202 	orr.w	r2, r3, #2
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	7fffffc0 	.word	0x7fffffc0

08006360 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <LL_ADC_IsEnabled+0x18>
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <LL_ADC_IsEnabled+0x1a>
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b02      	cmp	r3, #2
 8006398:	d101      	bne.n	800639e <LL_ADC_IsDisableOngoing+0x18>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <LL_ADC_IsDisableOngoing+0x1a>
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <LL_ADC_REG_StartConversion+0x24>)
 80063ba:	4013      	ands	r3, r2
 80063bc:	f043 0204 	orr.w	r2, r3, #4
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	7fffffc0 	.word	0x7fffffc0

080063d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d101      	bne.n	80063ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b08      	cmp	r3, #8
 800640c:	d101      	bne.n	8006412 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b089      	sub	sp, #36	; 0x24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800642c:	2300      	movs	r3, #0
 800642e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e18f      	b.n	800675a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7fa fa7f 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff ff19 	bl	8006298 <LL_ADC_IsDeepPowerDownEnabled>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff feff 	bl	8006274 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff ff34 	bl	80062e8 <LL_ADC_IsInternalRegulatorEnabled>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d114      	bne.n	80064b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff ff18 	bl	80062c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006490:	4b87      	ldr	r3, [pc, #540]	; (80066b0 <HAL_ADC_Init+0x290>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	099b      	lsrs	r3, r3, #6
 8006496:	4a87      	ldr	r2, [pc, #540]	; (80066b4 <HAL_ADC_Init+0x294>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	099b      	lsrs	r3, r3, #6
 800649e:	3301      	adds	r3, #1
 80064a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80064a2:	e002      	b.n	80064aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f9      	bne.n	80064a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff ff17 	bl	80062e8 <LL_ADC_IsInternalRegulatorEnabled>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10d      	bne.n	80064dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c4:	f043 0210 	orr.w	r2, r3, #16
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d0:	f043 0201 	orr.w	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff ff77 	bl	80063d4 <LL_ADC_REG_IsConversionOngoing>
 80064e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	f003 0310 	and.w	r3, r3, #16
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 8129 	bne.w	8006748 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f040 8125 	bne.w	8006748 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006506:	f043 0202 	orr.w	r2, r3, #2
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff ff24 	bl	8006360 <LL_ADC_IsEnabled>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d136      	bne.n	800658c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a65      	ldr	r2, [pc, #404]	; (80066b8 <HAL_ADC_Init+0x298>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d004      	beq.n	8006532 <HAL_ADC_Init+0x112>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a63      	ldr	r2, [pc, #396]	; (80066bc <HAL_ADC_Init+0x29c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d10e      	bne.n	8006550 <HAL_ADC_Init+0x130>
 8006532:	4861      	ldr	r0, [pc, #388]	; (80066b8 <HAL_ADC_Init+0x298>)
 8006534:	f7ff ff14 	bl	8006360 <LL_ADC_IsEnabled>
 8006538:	4604      	mov	r4, r0
 800653a:	4860      	ldr	r0, [pc, #384]	; (80066bc <HAL_ADC_Init+0x29c>)
 800653c:	f7ff ff10 	bl	8006360 <LL_ADC_IsEnabled>
 8006540:	4603      	mov	r3, r0
 8006542:	4323      	orrs	r3, r4
 8006544:	2b00      	cmp	r3, #0
 8006546:	bf0c      	ite	eq
 8006548:	2301      	moveq	r3, #1
 800654a:	2300      	movne	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	e008      	b.n	8006562 <HAL_ADC_Init+0x142>
 8006550:	485b      	ldr	r0, [pc, #364]	; (80066c0 <HAL_ADC_Init+0x2a0>)
 8006552:	f7ff ff05 	bl	8006360 <LL_ADC_IsEnabled>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	bf0c      	ite	eq
 800655c:	2301      	moveq	r3, #1
 800655e:	2300      	movne	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d012      	beq.n	800658c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a53      	ldr	r2, [pc, #332]	; (80066b8 <HAL_ADC_Init+0x298>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d004      	beq.n	800657a <HAL_ADC_Init+0x15a>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a51      	ldr	r2, [pc, #324]	; (80066bc <HAL_ADC_Init+0x29c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d101      	bne.n	800657e <HAL_ADC_Init+0x15e>
 800657a:	4a52      	ldr	r2, [pc, #328]	; (80066c4 <HAL_ADC_Init+0x2a4>)
 800657c:	e000      	b.n	8006580 <HAL_ADC_Init+0x160>
 800657e:	4a52      	ldr	r2, [pc, #328]	; (80066c8 <HAL_ADC_Init+0x2a8>)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7ff fd3c 	bl	8006004 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800658c:	f7ff fd18 	bl	8005fc0 <HAL_GetREVID>
 8006590:	4603      	mov	r3, r0
 8006592:	f241 0203 	movw	r2, #4099	; 0x1003
 8006596:	4293      	cmp	r3, r2
 8006598:	d914      	bls.n	80065c4 <HAL_ADC_Init+0x1a4>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b10      	cmp	r3, #16
 80065a0:	d110      	bne.n	80065c4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	7d5b      	ldrb	r3, [r3, #21]
 80065a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80065ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80065b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	7f1b      	ldrb	r3, [r3, #28]
 80065b8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80065ba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80065bc:	f043 030c 	orr.w	r3, r3, #12
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	e00d      	b.n	80065e0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	7d5b      	ldrb	r3, [r3, #21]
 80065c8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80065ce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80065d4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	7f1b      	ldrb	r3, [r3, #28]
 80065da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80065dc:	4313      	orrs	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	7f1b      	ldrb	r3, [r3, #28]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d106      	bne.n	80065f6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	045b      	lsls	r3, r3, #17
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	4313      	orrs	r3, r2
 8006610:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	4b2c      	ldr	r3, [pc, #176]	; (80066cc <HAL_ADC_Init+0x2ac>)
 800661a:	4013      	ands	r3, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	69b9      	ldr	r1, [r7, #24]
 8006622:	430b      	orrs	r3, r1
 8006624:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f7ff fed2 	bl	80063d4 <LL_ADC_REG_IsConversionOngoing>
 8006630:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fedf 	bl	80063fa <LL_ADC_INJ_IsConversionOngoing>
 800663c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d15f      	bne.n	8006704 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d15c      	bne.n	8006704 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	7d1b      	ldrb	r3, [r3, #20]
 800664e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8006654:	4313      	orrs	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <HAL_ADC_Init+0x2b0>)
 8006660:	4013      	ands	r3, r2
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	69b9      	ldr	r1, [r7, #24]
 8006668:	430b      	orrs	r3, r1
 800666a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006672:	2b01      	cmp	r3, #1
 8006674:	d130      	bne.n	80066d8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	4b14      	ldr	r3, [pc, #80]	; (80066d4 <HAL_ADC_Init+0x2b4>)
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800668a:	3a01      	subs	r2, #1
 800668c:	0411      	lsls	r1, r2, #16
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006692:	4311      	orrs	r1, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006698:	4311      	orrs	r1, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800669e:	430a      	orrs	r2, r1
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	611a      	str	r2, [r3, #16]
 80066ac:	e01c      	b.n	80066e8 <HAL_ADC_Init+0x2c8>
 80066ae:	bf00      	nop
 80066b0:	240000c0 	.word	0x240000c0
 80066b4:	053e2d63 	.word	0x053e2d63
 80066b8:	40022000 	.word	0x40022000
 80066bc:	40022100 	.word	0x40022100
 80066c0:	58026000 	.word	0x58026000
 80066c4:	40022300 	.word	0x40022300
 80066c8:	58026300 	.word	0x58026300
 80066cc:	fff0c003 	.word	0xfff0c003
 80066d0:	ffffbffc 	.word	0xffffbffc
 80066d4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fdec 	bl	80072dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d10c      	bne.n	8006726 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	f023 010f 	bic.w	r1, r3, #15
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	1e5a      	subs	r2, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
 8006724:	e007      	b.n	8006736 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 020f 	bic.w	r2, r2, #15
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	f043 0201 	orr.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	655a      	str	r2, [r3, #84]	; 0x54
 8006746:	e007      	b.n	8006758 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674c:	f043 0210 	orr.w	r2, r3, #16
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006758:	7ffb      	ldrb	r3, [r7, #31]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3724      	adds	r7, #36	; 0x24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd90      	pop	{r4, r7, pc}
 8006762:	bf00      	nop

08006764 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a55      	ldr	r2, [pc, #340]	; (80068cc <HAL_ADC_Start_DMA+0x168>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d004      	beq.n	8006784 <HAL_ADC_Start_DMA+0x20>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a54      	ldr	r2, [pc, #336]	; (80068d0 <HAL_ADC_Start_DMA+0x16c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d101      	bne.n	8006788 <HAL_ADC_Start_DMA+0x24>
 8006784:	4b53      	ldr	r3, [pc, #332]	; (80068d4 <HAL_ADC_Start_DMA+0x170>)
 8006786:	e000      	b.n	800678a <HAL_ADC_Start_DMA+0x26>
 8006788:	4b53      	ldr	r3, [pc, #332]	; (80068d8 <HAL_ADC_Start_DMA+0x174>)
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fd64 	bl	8006258 <LL_ADC_GetMultimode>
 8006790:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff fe1c 	bl	80063d4 <LL_ADC_REG_IsConversionOngoing>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f040 808c 	bne.w	80068bc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_ADC_Start_DMA+0x4e>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e087      	b.n	80068c2 <HAL_ADC_Start_DMA+0x15e>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d005      	beq.n	80067cc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	d002      	beq.n	80067cc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b09      	cmp	r3, #9
 80067ca:	d170      	bne.n	80068ae <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 fc07 	bl	8006fe0 <ADC_Enable>
 80067d2:	4603      	mov	r3, r0
 80067d4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d163      	bne.n	80068a4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067e0:	4b3e      	ldr	r3, [pc, #248]	; (80068dc <HAL_ADC_Start_DMA+0x178>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a37      	ldr	r2, [pc, #220]	; (80068d0 <HAL_ADC_Start_DMA+0x16c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d002      	beq.n	80067fc <HAL_ADC_Start_DMA+0x98>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	e000      	b.n	80067fe <HAL_ADC_Start_DMA+0x9a>
 80067fc:	4b33      	ldr	r3, [pc, #204]	; (80068cc <HAL_ADC_Start_DMA+0x168>)
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	6812      	ldr	r2, [r2, #0]
 8006802:	4293      	cmp	r3, r2
 8006804:	d002      	beq.n	800680c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d105      	bne.n	8006818 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006810:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d006      	beq.n	8006832 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006828:	f023 0206 	bic.w	r2, r3, #6
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	659a      	str	r2, [r3, #88]	; 0x58
 8006830:	e002      	b.n	8006838 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683c:	4a28      	ldr	r2, [pc, #160]	; (80068e0 <HAL_ADC_Start_DMA+0x17c>)
 800683e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006844:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <HAL_ADC_Start_DMA+0x180>)
 8006846:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <HAL_ADC_Start_DMA+0x184>)
 800684e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	221c      	movs	r2, #28
 8006856:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0210 	orr.w	r2, r2, #16
 800686e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f7ff fc89 	bl	8006192 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3340      	adds	r3, #64	; 0x40
 800688a:	4619      	mov	r1, r3
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f002 f80e 	bl	80088b0 <HAL_DMA_Start_IT>
 8006894:	4603      	mov	r3, r0
 8006896:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fd85 	bl	80063ac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80068a2:	e00d      	b.n	80068c0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80068ac:	e008      	b.n	80068c0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80068ba:	e001      	b.n	80068c0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80068bc:	2302      	movs	r3, #2
 80068be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40022000 	.word	0x40022000
 80068d0:	40022100 	.word	0x40022100
 80068d4:	40022300 	.word	0x40022300
 80068d8:	58026300 	.word	0x58026300
 80068dc:	fffff0fe 	.word	0xfffff0fe
 80068e0:	080071b3 	.word	0x080071b3
 80068e4:	0800728b 	.word	0x0800728b
 80068e8:	080072a7 	.word	0x080072a7

080068ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006928:	b590      	push	{r4, r7, lr}
 800692a:	b0a1      	sub	sp, #132	; 0x84
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	4a65      	ldr	r2, [pc, #404]	; (8006ad8 <HAL_ADC_ConfigChannel+0x1b0>)
 8006942:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <HAL_ADC_ConfigChannel+0x2a>
 800694e:	2302      	movs	r3, #2
 8006950:	e32e      	b.n	8006fb0 <HAL_ADC_ConfigChannel+0x688>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fd38 	bl	80063d4 <LL_ADC_REG_IsConversionOngoing>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	f040 8313 	bne.w	8006f92 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	db2c      	blt.n	80069ce <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800697c:	2b00      	cmp	r3, #0
 800697e:	d108      	bne.n	8006992 <HAL_ADC_ConfigChannel+0x6a>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	0e9b      	lsrs	r3, r3, #26
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	2201      	movs	r2, #1
 800698c:	fa02 f303 	lsl.w	r3, r2, r3
 8006990:	e016      	b.n	80069c0 <HAL_ADC_ConfigChannel+0x98>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800699a:	fa93 f3a3 	rbit	r3, r3
 800699e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80069a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069a2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80069a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80069aa:	2320      	movs	r3, #32
 80069ac:	e003      	b.n	80069b6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80069ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069b0:	fab3 f383 	clz	r3, r3
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	2201      	movs	r2, #1
 80069bc:	fa02 f303 	lsl.w	r3, r2, r3
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	69d1      	ldr	r1, [r2, #28]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6812      	ldr	r2, [r2, #0]
 80069ca:	430b      	orrs	r3, r1
 80069cc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6859      	ldr	r1, [r3, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	f7ff fbad 	bl	800613a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff fcf5 	bl	80063d4 <LL_ADC_REG_IsConversionOngoing>
 80069ea:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff fd02 	bl	80063fa <LL_ADC_INJ_IsConversionOngoing>
 80069f6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80069f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f040 80b8 	bne.w	8006b70 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f040 80b4 	bne.w	8006b70 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6819      	ldr	r1, [r3, #0]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	461a      	mov	r2, r3
 8006a16:	f7ff fbcf 	bl	80061b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006a1a:	4b30      	ldr	r3, [pc, #192]	; (8006adc <HAL_ADC_ConfigChannel+0x1b4>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a26:	d10b      	bne.n	8006a40 <HAL_ADC_ConfigChannel+0x118>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	695a      	ldr	r2, [r3, #20]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	089b      	lsrs	r3, r3, #2
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	e01d      	b.n	8006a7c <HAL_ADC_ConfigChannel+0x154>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <HAL_ADC_ConfigChannel+0x13e>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	089b      	lsrs	r3, r3, #2
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	e00a      	b.n	8006a7c <HAL_ADC_ConfigChannel+0x154>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	089b      	lsrs	r3, r3, #2
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d02c      	beq.n	8006ae0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6919      	ldr	r1, [r3, #16]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a94:	f7ff faea 	bl	800606c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	6919      	ldr	r1, [r3, #16]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	7e5b      	ldrb	r3, [r3, #25]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d102      	bne.n	8006aae <HAL_ADC_ConfigChannel+0x186>
 8006aa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006aac:	e000      	b.n	8006ab0 <HAL_ADC_ConfigChannel+0x188>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f7ff fb14 	bl	80060de <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6919      	ldr	r1, [r3, #16]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	7e1b      	ldrb	r3, [r3, #24]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d102      	bne.n	8006acc <HAL_ADC_ConfigChannel+0x1a4>
 8006ac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006aca:	e000      	b.n	8006ace <HAL_ADC_ConfigChannel+0x1a6>
 8006acc:	2300      	movs	r3, #0
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f7ff faec 	bl	80060ac <LL_ADC_SetDataRightShift>
 8006ad4:	e04c      	b.n	8006b70 <HAL_ADC_ConfigChannel+0x248>
 8006ad6:	bf00      	nop
 8006ad8:	47ff0000 	.word	0x47ff0000
 8006adc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	069b      	lsls	r3, r3, #26
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d107      	bne.n	8006b04 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b02:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	069b      	lsls	r3, r3, #26
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d107      	bne.n	8006b28 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b26:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	069b      	lsls	r3, r3, #26
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d107      	bne.n	8006b4c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b4a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	069b      	lsls	r3, r3, #26
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d107      	bne.n	8006b70 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006b6e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fbf3 	bl	8006360 <LL_ADC_IsEnabled>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f040 8211 	bne.w	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6819      	ldr	r1, [r3, #0]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f7ff fb3e 	bl	8006210 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4aa1      	ldr	r2, [pc, #644]	; (8006e20 <HAL_ADC_ConfigChannel+0x4f8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	f040 812e 	bne.w	8006dfc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10b      	bne.n	8006bc8 <HAL_ADC_ConfigChannel+0x2a0>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	0e9b      	lsrs	r3, r3, #26
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2b09      	cmp	r3, #9
 8006bbe:	bf94      	ite	ls
 8006bc0:	2301      	movls	r3, #1
 8006bc2:	2300      	movhi	r3, #0
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	e019      	b.n	8006bfc <HAL_ADC_ConfigChannel+0x2d4>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bd0:	fa93 f3a3 	rbit	r3, r3
 8006bd4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006be0:	2320      	movs	r3, #32
 8006be2:	e003      	b.n	8006bec <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006be6:	fab3 f383 	clz	r3, r3
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	3301      	adds	r3, #1
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	2b09      	cmp	r3, #9
 8006bf4:	bf94      	ite	ls
 8006bf6:	2301      	movls	r3, #1
 8006bf8:	2300      	movhi	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d079      	beq.n	8006cf4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d107      	bne.n	8006c1c <HAL_ADC_ConfigChannel+0x2f4>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	0e9b      	lsrs	r3, r3, #26
 8006c12:	3301      	adds	r3, #1
 8006c14:	069b      	lsls	r3, r3, #26
 8006c16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c1a:	e015      	b.n	8006c48 <HAL_ADC_ConfigChannel+0x320>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c24:	fa93 f3a3 	rbit	r3, r3
 8006c28:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c2c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006c34:	2320      	movs	r3, #32
 8006c36:	e003      	b.n	8006c40 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c3a:	fab3 f383 	clz	r3, r3
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	3301      	adds	r3, #1
 8006c42:	069b      	lsls	r3, r3, #26
 8006c44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d109      	bne.n	8006c68 <HAL_ADC_ConfigChannel+0x340>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	0e9b      	lsrs	r3, r3, #26
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	2101      	movs	r1, #1
 8006c62:	fa01 f303 	lsl.w	r3, r1, r3
 8006c66:	e017      	b.n	8006c98 <HAL_ADC_ConfigChannel+0x370>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c70:	fa93 f3a3 	rbit	r3, r3
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c78:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8006c80:	2320      	movs	r3, #32
 8006c82:	e003      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8006c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c86:	fab3 f383 	clz	r3, r3
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	2101      	movs	r1, #1
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	ea42 0103 	orr.w	r1, r2, r3
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <HAL_ADC_ConfigChannel+0x396>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	0e9b      	lsrs	r3, r3, #26
 8006cae:	3301      	adds	r3, #1
 8006cb0:	f003 021f 	and.w	r2, r3, #31
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	4413      	add	r3, r2
 8006cba:	051b      	lsls	r3, r3, #20
 8006cbc:	e018      	b.n	8006cf0 <HAL_ADC_ConfigChannel+0x3c8>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc6:	fa93 f3a3 	rbit	r3, r3
 8006cca:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8006cd6:	2320      	movs	r3, #32
 8006cd8:	e003      	b.n	8006ce2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	fab3 f383 	clz	r3, r3
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	f003 021f 	and.w	r2, r3, #31
 8006ce8:	4613      	mov	r3, r2
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	4413      	add	r3, r2
 8006cee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	e07e      	b.n	8006df2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d107      	bne.n	8006d10 <HAL_ADC_ConfigChannel+0x3e8>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	0e9b      	lsrs	r3, r3, #26
 8006d06:	3301      	adds	r3, #1
 8006d08:	069b      	lsls	r3, r3, #26
 8006d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d0e:	e015      	b.n	8006d3c <HAL_ADC_ConfigChannel+0x414>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	fa93 f3a3 	rbit	r3, r3
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8006d28:	2320      	movs	r3, #32
 8006d2a:	e003      	b.n	8006d34 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	fab3 f383 	clz	r3, r3
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	3301      	adds	r3, #1
 8006d36:	069b      	lsls	r3, r3, #26
 8006d38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <HAL_ADC_ConfigChannel+0x434>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	0e9b      	lsrs	r3, r3, #26
 8006d4e:	3301      	adds	r3, #1
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	2101      	movs	r1, #1
 8006d56:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5a:	e017      	b.n	8006d8c <HAL_ADC_ConfigChannel+0x464>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	fa93 f3a3 	rbit	r3, r3
 8006d68:	61bb      	str	r3, [r7, #24]
  return result;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8006d74:	2320      	movs	r3, #32
 8006d76:	e003      	b.n	8006d80 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	fab3 f383 	clz	r3, r3
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	3301      	adds	r3, #1
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	2101      	movs	r1, #1
 8006d88:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8c:	ea42 0103 	orr.w	r1, r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10d      	bne.n	8006db8 <HAL_ADC_ConfigChannel+0x490>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	0e9b      	lsrs	r3, r3, #26
 8006da2:	3301      	adds	r3, #1
 8006da4:	f003 021f 	and.w	r2, r3, #31
 8006da8:	4613      	mov	r3, r2
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	4413      	add	r3, r2
 8006dae:	3b1e      	subs	r3, #30
 8006db0:	051b      	lsls	r3, r3, #20
 8006db2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006db6:	e01b      	b.n	8006df0 <HAL_ADC_ConfigChannel+0x4c8>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	fa93 f3a3 	rbit	r3, r3
 8006dc4:	60fb      	str	r3, [r7, #12]
  return result;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006dd0:	2320      	movs	r3, #32
 8006dd2:	e003      	b.n	8006ddc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	fab3 f383 	clz	r3, r3
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	3301      	adds	r3, #1
 8006dde:	f003 021f 	and.w	r2, r3, #31
 8006de2:	4613      	mov	r3, r2
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	4413      	add	r3, r2
 8006de8:	3b1e      	subs	r3, #30
 8006dea:	051b      	lsls	r3, r3, #20
 8006dec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006df0:	430b      	orrs	r3, r1
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	6892      	ldr	r2, [r2, #8]
 8006df6:	4619      	mov	r1, r3
 8006df8:	f7ff f9de 	bl	80061b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f280 80cf 	bge.w	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a06      	ldr	r2, [pc, #24]	; (8006e24 <HAL_ADC_ConfigChannel+0x4fc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <HAL_ADC_ConfigChannel+0x4f2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a04      	ldr	r2, [pc, #16]	; (8006e28 <HAL_ADC_ConfigChannel+0x500>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d10a      	bne.n	8006e30 <HAL_ADC_ConfigChannel+0x508>
 8006e1a:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <HAL_ADC_ConfigChannel+0x504>)
 8006e1c:	e009      	b.n	8006e32 <HAL_ADC_ConfigChannel+0x50a>
 8006e1e:	bf00      	nop
 8006e20:	47ff0000 	.word	0x47ff0000
 8006e24:	40022000 	.word	0x40022000
 8006e28:	40022100 	.word	0x40022100
 8006e2c:	40022300 	.word	0x40022300
 8006e30:	4b61      	ldr	r3, [pc, #388]	; (8006fb8 <HAL_ADC_ConfigChannel+0x690>)
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff f90c 	bl	8006050 <LL_ADC_GetCommonPathInternalCh>
 8006e38:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a5f      	ldr	r2, [pc, #380]	; (8006fbc <HAL_ADC_ConfigChannel+0x694>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d004      	beq.n	8006e4e <HAL_ADC_ConfigChannel+0x526>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a5d      	ldr	r2, [pc, #372]	; (8006fc0 <HAL_ADC_ConfigChannel+0x698>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d10e      	bne.n	8006e6c <HAL_ADC_ConfigChannel+0x544>
 8006e4e:	485b      	ldr	r0, [pc, #364]	; (8006fbc <HAL_ADC_ConfigChannel+0x694>)
 8006e50:	f7ff fa86 	bl	8006360 <LL_ADC_IsEnabled>
 8006e54:	4604      	mov	r4, r0
 8006e56:	485a      	ldr	r0, [pc, #360]	; (8006fc0 <HAL_ADC_ConfigChannel+0x698>)
 8006e58:	f7ff fa82 	bl	8006360 <LL_ADC_IsEnabled>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	4323      	orrs	r3, r4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bf0c      	ite	eq
 8006e64:	2301      	moveq	r3, #1
 8006e66:	2300      	movne	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	e008      	b.n	8006e7e <HAL_ADC_ConfigChannel+0x556>
 8006e6c:	4855      	ldr	r0, [pc, #340]	; (8006fc4 <HAL_ADC_ConfigChannel+0x69c>)
 8006e6e:	f7ff fa77 	bl	8006360 <LL_ADC_IsEnabled>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d07d      	beq.n	8006f7e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a50      	ldr	r2, [pc, #320]	; (8006fc8 <HAL_ADC_ConfigChannel+0x6a0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d130      	bne.n	8006eee <HAL_ADC_ConfigChannel+0x5c6>
 8006e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d12b      	bne.n	8006eee <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a4a      	ldr	r2, [pc, #296]	; (8006fc4 <HAL_ADC_ConfigChannel+0x69c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	f040 8081 	bne.w	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a45      	ldr	r2, [pc, #276]	; (8006fbc <HAL_ADC_ConfigChannel+0x694>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d004      	beq.n	8006eb6 <HAL_ADC_ConfigChannel+0x58e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a43      	ldr	r2, [pc, #268]	; (8006fc0 <HAL_ADC_ConfigChannel+0x698>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d101      	bne.n	8006eba <HAL_ADC_ConfigChannel+0x592>
 8006eb6:	4a45      	ldr	r2, [pc, #276]	; (8006fcc <HAL_ADC_ConfigChannel+0x6a4>)
 8006eb8:	e000      	b.n	8006ebc <HAL_ADC_ConfigChannel+0x594>
 8006eba:	4a3f      	ldr	r2, [pc, #252]	; (8006fb8 <HAL_ADC_ConfigChannel+0x690>)
 8006ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f7ff f8b0 	bl	800602a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006eca:	4b41      	ldr	r3, [pc, #260]	; (8006fd0 <HAL_ADC_ConfigChannel+0x6a8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	099b      	lsrs	r3, r3, #6
 8006ed0:	4a40      	ldr	r2, [pc, #256]	; (8006fd4 <HAL_ADC_ConfigChannel+0x6ac>)
 8006ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed6:	099b      	lsrs	r3, r3, #6
 8006ed8:	3301      	adds	r3, #1
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006ede:	e002      	b.n	8006ee6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1f9      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006eec:	e05a      	b.n	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a39      	ldr	r2, [pc, #228]	; (8006fd8 <HAL_ADC_ConfigChannel+0x6b0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d11e      	bne.n	8006f36 <HAL_ADC_ConfigChannel+0x60e>
 8006ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d119      	bne.n	8006f36 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a2f      	ldr	r2, [pc, #188]	; (8006fc4 <HAL_ADC_ConfigChannel+0x69c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d14b      	bne.n	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a2a      	ldr	r2, [pc, #168]	; (8006fbc <HAL_ADC_ConfigChannel+0x694>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d004      	beq.n	8006f20 <HAL_ADC_ConfigChannel+0x5f8>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a29      	ldr	r2, [pc, #164]	; (8006fc0 <HAL_ADC_ConfigChannel+0x698>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d101      	bne.n	8006f24 <HAL_ADC_ConfigChannel+0x5fc>
 8006f20:	4a2a      	ldr	r2, [pc, #168]	; (8006fcc <HAL_ADC_ConfigChannel+0x6a4>)
 8006f22:	e000      	b.n	8006f26 <HAL_ADC_ConfigChannel+0x5fe>
 8006f24:	4a24      	ldr	r2, [pc, #144]	; (8006fb8 <HAL_ADC_ConfigChannel+0x690>)
 8006f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4610      	mov	r0, r2
 8006f30:	f7ff f87b 	bl	800602a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f34:	e036      	b.n	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a28      	ldr	r2, [pc, #160]	; (8006fdc <HAL_ADC_ConfigChannel+0x6b4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d131      	bne.n	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
 8006f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d12c      	bne.n	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1d      	ldr	r2, [pc, #116]	; (8006fc4 <HAL_ADC_ConfigChannel+0x69c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d127      	bne.n	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a18      	ldr	r2, [pc, #96]	; (8006fbc <HAL_ADC_ConfigChannel+0x694>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d004      	beq.n	8006f68 <HAL_ADC_ConfigChannel+0x640>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a17      	ldr	r2, [pc, #92]	; (8006fc0 <HAL_ADC_ConfigChannel+0x698>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d101      	bne.n	8006f6c <HAL_ADC_ConfigChannel+0x644>
 8006f68:	4a18      	ldr	r2, [pc, #96]	; (8006fcc <HAL_ADC_ConfigChannel+0x6a4>)
 8006f6a:	e000      	b.n	8006f6e <HAL_ADC_ConfigChannel+0x646>
 8006f6c:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <HAL_ADC_ConfigChannel+0x690>)
 8006f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f7ff f857 	bl	800602a <LL_ADC_SetCommonPathInternalCh>
 8006f7c:	e012      	b.n	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f82:	f043 0220 	orr.w	r2, r3, #32
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006f90:	e008      	b.n	8006fa4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f96:	f043 0220 	orr.w	r2, r3, #32
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006fac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3784      	adds	r7, #132	; 0x84
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd90      	pop	{r4, r7, pc}
 8006fb8:	58026300 	.word	0x58026300
 8006fbc:	40022000 	.word	0x40022000
 8006fc0:	40022100 	.word	0x40022100
 8006fc4:	58026000 	.word	0x58026000
 8006fc8:	cb840000 	.word	0xcb840000
 8006fcc:	40022300 	.word	0x40022300
 8006fd0:	240000c0 	.word	0x240000c0
 8006fd4:	053e2d63 	.word	0x053e2d63
 8006fd8:	c7520000 	.word	0xc7520000
 8006fdc:	cfb80000 	.word	0xcfb80000

08006fe0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff f9b7 	bl	8006360 <LL_ADC_IsEnabled>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d16e      	bne.n	80070d6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	4b38      	ldr	r3, [pc, #224]	; (80070e0 <ADC_Enable+0x100>)
 8007000:	4013      	ands	r3, r2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00d      	beq.n	8007022 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700a:	f043 0210 	orr.w	r2, r3, #16
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007016:	f043 0201 	orr.w	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e05a      	b.n	80070d8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff f972 	bl	8006310 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800702c:	f7fe ffbc 	bl	8005fa8 <HAL_GetTick>
 8007030:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a2b      	ldr	r2, [pc, #172]	; (80070e4 <ADC_Enable+0x104>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d004      	beq.n	8007046 <ADC_Enable+0x66>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a29      	ldr	r2, [pc, #164]	; (80070e8 <ADC_Enable+0x108>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d101      	bne.n	800704a <ADC_Enable+0x6a>
 8007046:	4b29      	ldr	r3, [pc, #164]	; (80070ec <ADC_Enable+0x10c>)
 8007048:	e000      	b.n	800704c <ADC_Enable+0x6c>
 800704a:	4b29      	ldr	r3, [pc, #164]	; (80070f0 <ADC_Enable+0x110>)
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff f903 	bl	8006258 <LL_ADC_GetMultimode>
 8007052:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a23      	ldr	r2, [pc, #140]	; (80070e8 <ADC_Enable+0x108>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d002      	beq.n	8007064 <ADC_Enable+0x84>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	e000      	b.n	8007066 <ADC_Enable+0x86>
 8007064:	4b1f      	ldr	r3, [pc, #124]	; (80070e4 <ADC_Enable+0x104>)
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	4293      	cmp	r3, r2
 800706c:	d02c      	beq.n	80070c8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d130      	bne.n	80070d6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007074:	e028      	b.n	80070c8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff f970 	bl	8006360 <LL_ADC_IsEnabled>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d104      	bne.n	8007090 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff f940 	bl	8006310 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007090:	f7fe ff8a 	bl	8005fa8 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d914      	bls.n	80070c8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d00d      	beq.n	80070c8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b0:	f043 0210 	orr.w	r2, r3, #16
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070bc:	f043 0201 	orr.w	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e007      	b.n	80070d8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d1cf      	bne.n	8007076 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	8000003f 	.word	0x8000003f
 80070e4:	40022000 	.word	0x40022000
 80070e8:	40022100 	.word	0x40022100
 80070ec:	40022300 	.word	0x40022300
 80070f0:	58026300 	.word	0x58026300

080070f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff f940 	bl	8006386 <LL_ADC_IsDisableOngoing>
 8007106:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff f927 	bl	8006360 <LL_ADC_IsEnabled>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d047      	beq.n	80071a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d144      	bne.n	80071a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f003 030d 	and.w	r3, r3, #13
 8007128:	2b01      	cmp	r3, #1
 800712a:	d10c      	bne.n	8007146 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff f901 	bl	8006338 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2203      	movs	r2, #3
 800713c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800713e:	f7fe ff33 	bl	8005fa8 <HAL_GetTick>
 8007142:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007144:	e029      	b.n	800719a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714a:	f043 0210 	orr.w	r2, r3, #16
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007156:	f043 0201 	orr.w	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e023      	b.n	80071aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007162:	f7fe ff21 	bl	8005fa8 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d914      	bls.n	800719a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00d      	beq.n	800719a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	f043 0210 	orr.w	r2, r3, #16
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718e:	f043 0201 	orr.w	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e007      	b.n	80071aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1dc      	bne.n	8007162 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d14b      	bne.n	8007264 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d021      	beq.n	800722a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe ff92 	bl	8006114 <LL_ADC_REG_IsTriggerSourceSWStart>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d032      	beq.n	800725c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d12b      	bne.n	800725c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007208:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d11f      	bne.n	800725c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007220:	f043 0201 	orr.w	r2, r3, #1
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	655a      	str	r2, [r3, #84]	; 0x54
 8007228:	e018      	b.n	800725c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d111      	bne.n	800725c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d105      	bne.n	800725c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007254:	f043 0201 	orr.w	r2, r3, #1
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff fb45 	bl	80068ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007262:	e00e      	b.n	8007282 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff fb4f 	bl	8006914 <HAL_ADC_ErrorCallback>
}
 8007276:	e004      	b.n	8007282 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	4798      	blx	r3
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff fb31 	bl	8006900 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c4:	f043 0204 	orr.w	r2, r3, #4
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff fb21 	bl	8006914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a7a      	ldr	r2, [pc, #488]	; (80074d4 <ADC_ConfigureBoostMode+0x1f8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d004      	beq.n	80072f8 <ADC_ConfigureBoostMode+0x1c>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a79      	ldr	r2, [pc, #484]	; (80074d8 <ADC_ConfigureBoostMode+0x1fc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d109      	bne.n	800730c <ADC_ConfigureBoostMode+0x30>
 80072f8:	4b78      	ldr	r3, [pc, #480]	; (80074dc <ADC_ConfigureBoostMode+0x200>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007300:	2b00      	cmp	r3, #0
 8007302:	bf14      	ite	ne
 8007304:	2301      	movne	r3, #1
 8007306:	2300      	moveq	r3, #0
 8007308:	b2db      	uxtb	r3, r3
 800730a:	e008      	b.n	800731e <ADC_ConfigureBoostMode+0x42>
 800730c:	4b74      	ldr	r3, [pc, #464]	; (80074e0 <ADC_ConfigureBoostMode+0x204>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007314:	2b00      	cmp	r3, #0
 8007316:	bf14      	ite	ne
 8007318:	2301      	movne	r3, #1
 800731a:	2300      	moveq	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d01c      	beq.n	800735c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8007322:	f007 fdef 	bl	800ef04 <HAL_RCC_GetHCLKFreq>
 8007326:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007330:	d010      	beq.n	8007354 <ADC_ConfigureBoostMode+0x78>
 8007332:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007336:	d873      	bhi.n	8007420 <ADC_ConfigureBoostMode+0x144>
 8007338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800733c:	d002      	beq.n	8007344 <ADC_ConfigureBoostMode+0x68>
 800733e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007342:	d16d      	bne.n	8007420 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007350:	60fb      	str	r3, [r7, #12]
        break;
 8007352:	e068      	b.n	8007426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	089b      	lsrs	r3, r3, #2
 8007358:	60fb      	str	r3, [r7, #12]
        break;
 800735a:	e064      	b.n	8007426 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800735c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007360:	f04f 0100 	mov.w	r1, #0
 8007364:	f009 f876 	bl	8010454 <HAL_RCCEx_GetPeriphCLKFreq>
 8007368:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007372:	d051      	beq.n	8007418 <ADC_ConfigureBoostMode+0x13c>
 8007374:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007378:	d854      	bhi.n	8007424 <ADC_ConfigureBoostMode+0x148>
 800737a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800737e:	d047      	beq.n	8007410 <ADC_ConfigureBoostMode+0x134>
 8007380:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007384:	d84e      	bhi.n	8007424 <ADC_ConfigureBoostMode+0x148>
 8007386:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800738a:	d03d      	beq.n	8007408 <ADC_ConfigureBoostMode+0x12c>
 800738c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007390:	d848      	bhi.n	8007424 <ADC_ConfigureBoostMode+0x148>
 8007392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007396:	d033      	beq.n	8007400 <ADC_ConfigureBoostMode+0x124>
 8007398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800739c:	d842      	bhi.n	8007424 <ADC_ConfigureBoostMode+0x148>
 800739e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80073a2:	d029      	beq.n	80073f8 <ADC_ConfigureBoostMode+0x11c>
 80073a4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80073a8:	d83c      	bhi.n	8007424 <ADC_ConfigureBoostMode+0x148>
 80073aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80073ae:	d01a      	beq.n	80073e6 <ADC_ConfigureBoostMode+0x10a>
 80073b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80073b4:	d836      	bhi.n	8007424 <ADC_ConfigureBoostMode+0x148>
 80073b6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80073ba:	d014      	beq.n	80073e6 <ADC_ConfigureBoostMode+0x10a>
 80073bc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80073c0:	d830      	bhi.n	8007424 <ADC_ConfigureBoostMode+0x148>
 80073c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c6:	d00e      	beq.n	80073e6 <ADC_ConfigureBoostMode+0x10a>
 80073c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073cc:	d82a      	bhi.n	8007424 <ADC_ConfigureBoostMode+0x148>
 80073ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80073d2:	d008      	beq.n	80073e6 <ADC_ConfigureBoostMode+0x10a>
 80073d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80073d8:	d824      	bhi.n	8007424 <ADC_ConfigureBoostMode+0x148>
 80073da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073de:	d002      	beq.n	80073e6 <ADC_ConfigureBoostMode+0x10a>
 80073e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073e4:	d11e      	bne.n	8007424 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	0c9b      	lsrs	r3, r3, #18
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f4:	60fb      	str	r3, [r7, #12]
        break;
 80073f6:	e016      	b.n	8007426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	091b      	lsrs	r3, r3, #4
 80073fc:	60fb      	str	r3, [r7, #12]
        break;
 80073fe:	e012      	b.n	8007426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	60fb      	str	r3, [r7, #12]
        break;
 8007406:	e00e      	b.n	8007426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	099b      	lsrs	r3, r3, #6
 800740c:	60fb      	str	r3, [r7, #12]
        break;
 800740e:	e00a      	b.n	8007426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	09db      	lsrs	r3, r3, #7
 8007414:	60fb      	str	r3, [r7, #12]
        break;
 8007416:	e006      	b.n	8007426 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	60fb      	str	r3, [r7, #12]
        break;
 800741e:	e002      	b.n	8007426 <ADC_ConfigureBoostMode+0x14a>
        break;
 8007420:	bf00      	nop
 8007422:	e000      	b.n	8007426 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8007424:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007426:	f7fe fdcb 	bl	8005fc0 <HAL_GetREVID>
 800742a:	4603      	mov	r3, r0
 800742c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007430:	4293      	cmp	r3, r2
 8007432:	d815      	bhi.n	8007460 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4a2b      	ldr	r2, [pc, #172]	; (80074e4 <ADC_ConfigureBoostMode+0x208>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d908      	bls.n	800744e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800744a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800744c:	e03e      	b.n	80074cc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800745c:	609a      	str	r2, [r3, #8]
}
 800745e:	e035      	b.n	80074cc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	085b      	lsrs	r3, r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4a1f      	ldr	r2, [pc, #124]	; (80074e8 <ADC_ConfigureBoostMode+0x20c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d808      	bhi.n	8007480 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800747c:	609a      	str	r2, [r3, #8]
}
 800747e:	e025      	b.n	80074cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4a1a      	ldr	r2, [pc, #104]	; (80074ec <ADC_ConfigureBoostMode+0x210>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d80a      	bhi.n	800749e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800749a:	609a      	str	r2, [r3, #8]
}
 800749c:	e016      	b.n	80074cc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a13      	ldr	r2, [pc, #76]	; (80074f0 <ADC_ConfigureBoostMode+0x214>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d80a      	bhi.n	80074bc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074b8:	609a      	str	r2, [r3, #8]
}
 80074ba:	e007      	b.n	80074cc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80074ca:	609a      	str	r2, [r3, #8]
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	40022000 	.word	0x40022000
 80074d8:	40022100 	.word	0x40022100
 80074dc:	40022300 	.word	0x40022300
 80074e0:	58026300 	.word	0x58026300
 80074e4:	01312d00 	.word	0x01312d00
 80074e8:	005f5e10 	.word	0x005f5e10
 80074ec:	00bebc20 	.word	0x00bebc20
 80074f0:	017d7840 	.word	0x017d7840

080074f4 <LL_ADC_IsEnabled>:
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <LL_ADC_IsEnabled+0x18>
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <LL_ADC_IsEnabled+0x1a>
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
	...

0800751c <LL_ADC_StartCalibration>:
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	4b09      	ldr	r3, [pc, #36]	; (8007554 <LL_ADC_StartCalibration+0x38>)
 800752e:	4013      	ands	r3, r2
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800753c:	430a      	orrs	r2, r1
 800753e:	4313      	orrs	r3, r2
 8007540:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	609a      	str	r2, [r3, #8]
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	3ffeffc0 	.word	0x3ffeffc0

08007558 <LL_ADC_IsCalibrationOnGoing>:
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800756c:	d101      	bne.n	8007572 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <LL_ADC_REG_IsConversionOngoing>:
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b04      	cmp	r3, #4
 8007592:	d101      	bne.n	8007598 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007594:	2301      	movs	r3, #1
 8007596:	e000      	b.n	800759a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <HAL_ADCEx_Calibration_Start+0x1e>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e04c      	b.n	8007660 <HAL_ADCEx_Calibration_Start+0xb8>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff fd90 	bl	80070f4 <ADC_Disable>
 80075d4:	4603      	mov	r3, r0
 80075d6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d135      	bne.n	800764a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075e2:	4b21      	ldr	r3, [pc, #132]	; (8007668 <HAL_ADCEx_Calibration_Start+0xc0>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	f043 0202 	orr.w	r2, r3, #2
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff ff90 	bl	800751c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80075fc:	e014      	b.n	8007628 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3301      	adds	r3, #1
 8007602:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4a19      	ldr	r2, [pc, #100]	; (800766c <HAL_ADCEx_Calibration_Start+0xc4>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d30d      	bcc.n	8007628 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007610:	f023 0312 	bic.w	r3, r3, #18
 8007614:	f043 0210 	orr.w	r2, r3, #16
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e01b      	b.n	8007660 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff ff93 	bl	8007558 <LL_ADC_IsCalibrationOnGoing>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e2      	bne.n	80075fe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	f043 0201 	orr.w	r2, r3, #1
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	655a      	str	r2, [r3, #84]	; 0x54
 8007648:	e005      	b.n	8007656 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764e:	f043 0210 	orr.w	r2, r3, #16
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800765e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	ffffeefd 	.word	0xffffeefd
 800766c:	25c3f800 	.word	0x25c3f800

08007670 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007670:	b590      	push	{r4, r7, lr}
 8007672:	b09f      	sub	sp, #124	; 0x7c
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800768a:	2302      	movs	r3, #2
 800768c:	e0be      	b.n	800780c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007696:	2300      	movs	r3, #0
 8007698:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800769a:	2300      	movs	r3, #0
 800769c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a5c      	ldr	r2, [pc, #368]	; (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d102      	bne.n	80076ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80076a8:	4b5b      	ldr	r3, [pc, #364]	; (8007818 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80076aa:	60bb      	str	r3, [r7, #8]
 80076ac:	e001      	b.n	80076b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80076ae:	2300      	movs	r3, #0
 80076b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10b      	bne.n	80076d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076bc:	f043 0220 	orr.w	r2, r3, #32
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e09d      	b.n	800780c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff ff54 	bl	8007580 <LL_ADC_REG_IsConversionOngoing>
 80076d8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff ff4e 	bl	8007580 <LL_ADC_REG_IsConversionOngoing>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d17f      	bne.n	80077ea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80076ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d17c      	bne.n	80077ea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a47      	ldr	r2, [pc, #284]	; (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d004      	beq.n	8007704 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a46      	ldr	r2, [pc, #280]	; (8007818 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d101      	bne.n	8007708 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007704:	4b45      	ldr	r3, [pc, #276]	; (800781c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007706:	e000      	b.n	800770a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007708:	4b45      	ldr	r3, [pc, #276]	; (8007820 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800770a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d039      	beq.n	8007788 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	431a      	orrs	r2, r3
 8007722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007724:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a3a      	ldr	r2, [pc, #232]	; (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d004      	beq.n	800773a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a38      	ldr	r2, [pc, #224]	; (8007818 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d10e      	bne.n	8007758 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800773a:	4836      	ldr	r0, [pc, #216]	; (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800773c:	f7ff feda 	bl	80074f4 <LL_ADC_IsEnabled>
 8007740:	4604      	mov	r4, r0
 8007742:	4835      	ldr	r0, [pc, #212]	; (8007818 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007744:	f7ff fed6 	bl	80074f4 <LL_ADC_IsEnabled>
 8007748:	4603      	mov	r3, r0
 800774a:	4323      	orrs	r3, r4
 800774c:	2b00      	cmp	r3, #0
 800774e:	bf0c      	ite	eq
 8007750:	2301      	moveq	r3, #1
 8007752:	2300      	movne	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	e008      	b.n	800776a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8007758:	4832      	ldr	r0, [pc, #200]	; (8007824 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800775a:	f7ff fecb 	bl	80074f4 <LL_ADC_IsEnabled>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	bf0c      	ite	eq
 8007764:	2301      	moveq	r3, #1
 8007766:	2300      	movne	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d047      	beq.n	80077fe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800776e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	4b2d      	ldr	r3, [pc, #180]	; (8007828 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007774:	4013      	ands	r3, r2
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	6811      	ldr	r1, [r2, #0]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	6892      	ldr	r2, [r2, #8]
 800777e:	430a      	orrs	r2, r1
 8007780:	431a      	orrs	r2, r3
 8007782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007784:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007786:	e03a      	b.n	80077fe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007792:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1d      	ldr	r2, [pc, #116]	; (8007818 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d10e      	bne.n	80077c6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80077a8:	481a      	ldr	r0, [pc, #104]	; (8007814 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80077aa:	f7ff fea3 	bl	80074f4 <LL_ADC_IsEnabled>
 80077ae:	4604      	mov	r4, r0
 80077b0:	4819      	ldr	r0, [pc, #100]	; (8007818 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80077b2:	f7ff fe9f 	bl	80074f4 <LL_ADC_IsEnabled>
 80077b6:	4603      	mov	r3, r0
 80077b8:	4323      	orrs	r3, r4
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	bf0c      	ite	eq
 80077be:	2301      	moveq	r3, #1
 80077c0:	2300      	movne	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	e008      	b.n	80077d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80077c6:	4817      	ldr	r0, [pc, #92]	; (8007824 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80077c8:	f7ff fe94 	bl	80074f4 <LL_ADC_IsEnabled>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bf0c      	ite	eq
 80077d2:	2301      	moveq	r3, #1
 80077d4:	2300      	movne	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d010      	beq.n	80077fe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80077dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	4b11      	ldr	r3, [pc, #68]	; (8007828 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80077e2:	4013      	ands	r3, r2
 80077e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077e6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077e8:	e009      	b.n	80077fe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ee:	f043 0220 	orr.w	r2, r3, #32
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80077fc:	e000      	b.n	8007800 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077fe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007808:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800780c:	4618      	mov	r0, r3
 800780e:	377c      	adds	r7, #124	; 0x7c
 8007810:	46bd      	mov	sp, r7
 8007812:	bd90      	pop	{r4, r7, pc}
 8007814:	40022000 	.word	0x40022000
 8007818:	40022100 	.word	0x40022100
 800781c:	40022300 	.word	0x40022300
 8007820:	58026300 	.word	0x58026300
 8007824:	58026000 	.word	0x58026000
 8007828:	fffff0e0 	.word	0xfffff0e0

0800782c <__NVIC_SetPriorityGrouping>:
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800783c:	4b0b      	ldr	r3, [pc, #44]	; (800786c <__NVIC_SetPriorityGrouping+0x40>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007848:	4013      	ands	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007854:	4b06      	ldr	r3, [pc, #24]	; (8007870 <__NVIC_SetPriorityGrouping+0x44>)
 8007856:	4313      	orrs	r3, r2
 8007858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800785a:	4a04      	ldr	r2, [pc, #16]	; (800786c <__NVIC_SetPriorityGrouping+0x40>)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	60d3      	str	r3, [r2, #12]
}
 8007860:	bf00      	nop
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	e000ed00 	.word	0xe000ed00
 8007870:	05fa0000 	.word	0x05fa0000

08007874 <__NVIC_GetPriorityGrouping>:
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <__NVIC_GetPriorityGrouping+0x18>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	f003 0307 	and.w	r3, r3, #7
}
 8007882:	4618      	mov	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <__NVIC_EnableIRQ>:
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800789a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	db0b      	blt.n	80078ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	f003 021f 	and.w	r2, r3, #31
 80078a8:	4907      	ldr	r1, [pc, #28]	; (80078c8 <__NVIC_EnableIRQ+0x38>)
 80078aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	2001      	movs	r0, #1
 80078b2:	fa00 f202 	lsl.w	r2, r0, r2
 80078b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	e000e100 	.word	0xe000e100

080078cc <__NVIC_SetPriority>:
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80078d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	db0a      	blt.n	80078f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	490c      	ldr	r1, [pc, #48]	; (8007918 <__NVIC_SetPriority+0x4c>)
 80078e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078ea:	0112      	lsls	r2, r2, #4
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	440b      	add	r3, r1
 80078f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80078f4:	e00a      	b.n	800790c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4908      	ldr	r1, [pc, #32]	; (800791c <__NVIC_SetPriority+0x50>)
 80078fc:	88fb      	ldrh	r3, [r7, #6]
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	3b04      	subs	r3, #4
 8007904:	0112      	lsls	r2, r2, #4
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	440b      	add	r3, r1
 800790a:	761a      	strb	r2, [r3, #24]
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	e000e100 	.word	0xe000e100
 800791c:	e000ed00 	.word	0xe000ed00

08007920 <NVIC_EncodePriority>:
{
 8007920:	b480      	push	{r7}
 8007922:	b089      	sub	sp, #36	; 0x24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f1c3 0307 	rsb	r3, r3, #7
 800793a:	2b04      	cmp	r3, #4
 800793c:	bf28      	it	cs
 800793e:	2304      	movcs	r3, #4
 8007940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3304      	adds	r3, #4
 8007946:	2b06      	cmp	r3, #6
 8007948:	d902      	bls.n	8007950 <NVIC_EncodePriority+0x30>
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3b03      	subs	r3, #3
 800794e:	e000      	b.n	8007952 <NVIC_EncodePriority+0x32>
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43da      	mvns	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	401a      	ands	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007968:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	fa01 f303 	lsl.w	r3, r1, r3
 8007972:	43d9      	mvns	r1, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007978:	4313      	orrs	r3, r2
}
 800797a:	4618      	mov	r0, r3
 800797c:	3724      	adds	r7, #36	; 0x24
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff ff4c 	bl	800782c <__NVIC_SetPriorityGrouping>
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80079aa:	f7ff ff63 	bl	8007874 <__NVIC_GetPriorityGrouping>
 80079ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	68b9      	ldr	r1, [r7, #8]
 80079b4:	6978      	ldr	r0, [r7, #20]
 80079b6:	f7ff ffb3 	bl	8007920 <NVIC_EncodePriority>
 80079ba:	4602      	mov	r2, r0
 80079bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff ff82 	bl	80078cc <__NVIC_SetPriority>
}
 80079c8:	bf00      	nop
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff ff56 	bl	8007890 <__NVIC_EnableIRQ>
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e014      	b.n	8007a28 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	791b      	ldrb	r3, [r3, #4]
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d105      	bne.n	8007a14 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7f9 f8e8 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e046      	b.n	8007ad2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	795b      	ldrb	r3, [r3, #5]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d101      	bne.n	8007a50 <HAL_DAC_Start+0x20>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e040      	b.n	8007ad2 <HAL_DAC_Start+0xa2>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6819      	ldr	r1, [r3, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	2201      	movs	r2, #1
 8007a6a:	409a      	lsls	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10f      	bne.n	8007a9a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d11d      	bne.n	8007ac4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	605a      	str	r2, [r3, #4]
 8007a98:	e014      	b.n	8007ac4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f003 0310 	and.w	r3, r3, #16
 8007aaa:	2102      	movs	r1, #2
 8007aac:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d107      	bne.n	8007ac4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0202 	orr.w	r2, r2, #2
 8007ac2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e0a2      	b.n	8007c3e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	795b      	ldrb	r3, [r3, #5]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d101      	bne.n	8007b04 <HAL_DAC_Start_DMA+0x24>
 8007b00:	2302      	movs	r3, #2
 8007b02:	e09c      	b.n	8007c3e <HAL_DAC_Start_DMA+0x15e>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2201      	movs	r2, #1
 8007b08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d129      	bne.n	8007b6a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	4a4b      	ldr	r2, [pc, #300]	; (8007c48 <HAL_DAC_Start_DMA+0x168>)
 8007b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	4a4a      	ldr	r2, [pc, #296]	; (8007c4c <HAL_DAC_Start_DMA+0x16c>)
 8007b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	4a49      	ldr	r2, [pc, #292]	; (8007c50 <HAL_DAC_Start_DMA+0x170>)
 8007b2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b3c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <HAL_DAC_Start_DMA+0x6c>
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d005      	beq.n	8007b56 <HAL_DAC_Start_DMA+0x76>
 8007b4a:	e009      	b.n	8007b60 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3308      	adds	r3, #8
 8007b52:	613b      	str	r3, [r7, #16]
        break;
 8007b54:	e033      	b.n	8007bbe <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	330c      	adds	r3, #12
 8007b5c:	613b      	str	r3, [r7, #16]
        break;
 8007b5e:	e02e      	b.n	8007bbe <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3310      	adds	r3, #16
 8007b66:	613b      	str	r3, [r7, #16]
        break;
 8007b68:	e029      	b.n	8007bbe <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	4a39      	ldr	r2, [pc, #228]	; (8007c54 <HAL_DAC_Start_DMA+0x174>)
 8007b70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	4a38      	ldr	r2, [pc, #224]	; (8007c58 <HAL_DAC_Start_DMA+0x178>)
 8007b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	4a37      	ldr	r2, [pc, #220]	; (8007c5c <HAL_DAC_Start_DMA+0x17c>)
 8007b80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007b90:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <HAL_DAC_Start_DMA+0xc0>
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d005      	beq.n	8007baa <HAL_DAC_Start_DMA+0xca>
 8007b9e:	e009      	b.n	8007bb4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	613b      	str	r3, [r7, #16]
        break;
 8007ba8:	e009      	b.n	8007bbe <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3318      	adds	r3, #24
 8007bb0:	613b      	str	r3, [r7, #16]
        break;
 8007bb2:	e004      	b.n	8007bbe <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	331c      	adds	r3, #28
 8007bba:	613b      	str	r3, [r7, #16]
        break;
 8007bbc:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d111      	bne.n	8007be8 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6898      	ldr	r0, [r3, #8]
 8007bd8:	6879      	ldr	r1, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	f000 fe67 	bl	80088b0 <HAL_DMA_Start_IT>
 8007be2:	4603      	mov	r3, r0
 8007be4:	75fb      	strb	r3, [r7, #23]
 8007be6:	e010      	b.n	8007c0a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007bf6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	68d8      	ldr	r0, [r3, #12]
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	f000 fe55 	bl	80088b0 <HAL_DMA_Start_IT>
 8007c06:	4603      	mov	r3, r0
 8007c08:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10c      	bne.n	8007c30 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6819      	ldr	r1, [r3, #0]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f003 0310 	and.w	r3, r3, #16
 8007c22:	2201      	movs	r2, #1
 8007c24:	409a      	lsls	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	e005      	b.n	8007c3c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	f043 0204 	orr.w	r2, r3, #4
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	080080d1 	.word	0x080080d1
 8007c4c:	080080f3 	.word	0x080080f3
 8007c50:	0800810f 	.word	0x0800810f
 8007c54:	0800818d 	.word	0x0800818d
 8007c58:	080081af 	.word	0x080081af
 8007c5c:	080081cb 	.word	0x080081cb

08007c60 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e03e      	b.n	8007cf2 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6819      	ldr	r1, [r3, #0]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007c84:	fa02 f303 	lsl.w	r3, r2, r3
 8007c88:	43da      	mvns	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	400a      	ands	r2, r1
 8007c90:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6819      	ldr	r1, [r3, #0]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f003 0310 	and.w	r3, r3, #16
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca4:	43da      	mvns	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	400a      	ands	r2, r1
 8007cac:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10d      	bne.n	8007cd0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 f863 	bl	8008d84 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e00c      	b.n	8007cea <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f001 f855 	bl	8008d84 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007ce8:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d10:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01d      	beq.n	8007d58 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d018      	beq.n	8007d58 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f043 0201 	orr.w	r2, r3, #1
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d50:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f86f 	bl	8007e36 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d01d      	beq.n	8007d9e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d018      	beq.n	8007d9e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2204      	movs	r2, #4
 8007d70:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f043 0202 	orr.w	r2, r3, #2
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007d86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f9ed 	bl	8008178 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b087      	sub	sp, #28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e015      	b.n	8007dee <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d105      	bne.n	8007dda <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	e004      	b.n	8007de4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4413      	add	r3, r2
 8007de0:	3314      	adds	r3, #20
 8007de2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	461a      	mov	r2, r3
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
	...

08007e4c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08a      	sub	sp, #40	; 0x28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <HAL_DAC_ConfigChannel+0x1e>
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e12a      	b.n	80080c4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	795b      	ldrb	r3, [r3, #5]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d101      	bne.n	8007e7a <HAL_DAC_ConfigChannel+0x2e>
 8007e76:	2302      	movs	r3, #2
 8007e78:	e124      	b.n	80080c4 <HAL_DAC_ConfigChannel+0x278>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2202      	movs	r2, #2
 8007e84:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	d17a      	bne.n	8007f84 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007e8e:	f7fe f88b 	bl	8005fa8 <HAL_GetTick>
 8007e92:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d13d      	bne.n	8007f16 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007e9a:	e018      	b.n	8007ece <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007e9c:	f7fe f884 	bl	8005fa8 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d911      	bls.n	8007ece <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eb0:	4b86      	ldr	r3, [pc, #536]	; (80080cc <HAL_DAC_ConfigChannel+0x280>)
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f043 0208 	orr.w	r2, r3, #8
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e0fa      	b.n	80080c4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed4:	4b7d      	ldr	r3, [pc, #500]	; (80080cc <HAL_DAC_ConfigChannel+0x280>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1df      	bne.n	8007e9c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	6992      	ldr	r2, [r2, #24]
 8007ee4:	641a      	str	r2, [r3, #64]	; 0x40
 8007ee6:	e020      	b.n	8007f2a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007ee8:	f7fe f85e 	bl	8005fa8 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d90f      	bls.n	8007f16 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	da0a      	bge.n	8007f16 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	f043 0208 	orr.w	r2, r3, #8
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2203      	movs	r2, #3
 8007f10:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e0d6      	b.n	80080c4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dbe3      	blt.n	8007ee8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	6992      	ldr	r2, [r2, #24]
 8007f28:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f003 0310 	and.w	r3, r3, #16
 8007f36:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3e:	43db      	mvns	r3, r3
 8007f40:	ea02 0103 	and.w	r1, r2, r3
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	69da      	ldr	r2, [r3, #28]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f003 0310 	and.w	r3, r3, #16
 8007f4e:	409a      	lsls	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f003 0310 	and.w	r3, r3, #16
 8007f64:	21ff      	movs	r1, #255	; 0xff
 8007f66:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	ea02 0103 	and.w	r1, r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	6a1a      	ldr	r2, [r3, #32]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f003 0310 	and.w	r3, r3, #16
 8007f7a:	409a      	lsls	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d11d      	bne.n	8007fc8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	221f      	movs	r2, #31
 8007f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa0:	43db      	mvns	r3, r3
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fce:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f003 0310 	and.w	r3, r3, #16
 8007fd6:	2207      	movs	r2, #7
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	43db      	mvns	r3, r3
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d102      	bne.n	8007ff2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff0:	e00f      	b.n	8008012 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d102      	bne.n	8008000 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffe:	e008      	b.n	8008012 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d102      	bne.n	800800e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008008:	2301      	movs	r3, #1
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
 800800c:	e001      	b.n	8008012 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800800e:	2300      	movs	r3, #0
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	4313      	orrs	r3, r2
 800801c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	fa02 f303 	lsl.w	r3, r2, r3
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	4313      	orrs	r3, r2
 8008032:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6819      	ldr	r1, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800804c:	fa02 f303 	lsl.w	r3, r2, r3
 8008050:	43da      	mvns	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	400a      	ands	r2, r1
 8008058:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f003 0310 	and.w	r3, r3, #16
 8008068:	f640 72fe 	movw	r2, #4094	; 0xffe
 800806c:	fa02 f303 	lsl.w	r3, r2, r3
 8008070:	43db      	mvns	r3, r3
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	4013      	ands	r3, r2
 8008076:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	fa02 f303 	lsl.w	r3, r2, r3
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	4313      	orrs	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6819      	ldr	r1, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	22c0      	movs	r2, #192	; 0xc0
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	43da      	mvns	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	400a      	ands	r2, r1
 80080b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80080c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3728      	adds	r7, #40	; 0x28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20008000 	.word	0x20008000

080080d0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7ff fe8b 	bl	8007dfa <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2201      	movs	r2, #1
 80080e8:	711a      	strb	r2, [r3, #4]
}
 80080ea:	bf00      	nop
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7ff fe84 	bl	8007e0e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f043 0204 	orr.w	r2, r3, #4
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f7ff fe7a 	bl	8007e22 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	711a      	strb	r2, [r3, #4]
}
 8008134:	bf00      	nop
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff ffce 	bl	800813c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2201      	movs	r2, #1
 80081a4:	711a      	strb	r2, [r3, #4]
}
 80081a6:	bf00      	nop
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7ff ffc7 	bl	8008150 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80081c2:	bf00      	nop
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	f043 0204 	orr.w	r2, r3, #4
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f7ff ffbd 	bl	8008164 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	711a      	strb	r2, [r3, #4]
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008200:	f7fd fed2 	bl	8005fa8 <HAL_GetTick>
 8008204:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e316      	b.n	800883e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a66      	ldr	r2, [pc, #408]	; (80083b0 <HAL_DMA_Init+0x1b8>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d04a      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a65      	ldr	r2, [pc, #404]	; (80083b4 <HAL_DMA_Init+0x1bc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d045      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a63      	ldr	r2, [pc, #396]	; (80083b8 <HAL_DMA_Init+0x1c0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d040      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a62      	ldr	r2, [pc, #392]	; (80083bc <HAL_DMA_Init+0x1c4>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d03b      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a60      	ldr	r2, [pc, #384]	; (80083c0 <HAL_DMA_Init+0x1c8>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d036      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a5f      	ldr	r2, [pc, #380]	; (80083c4 <HAL_DMA_Init+0x1cc>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d031      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a5d      	ldr	r2, [pc, #372]	; (80083c8 <HAL_DMA_Init+0x1d0>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d02c      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a5c      	ldr	r2, [pc, #368]	; (80083cc <HAL_DMA_Init+0x1d4>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d027      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a5a      	ldr	r2, [pc, #360]	; (80083d0 <HAL_DMA_Init+0x1d8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d022      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a59      	ldr	r2, [pc, #356]	; (80083d4 <HAL_DMA_Init+0x1dc>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d01d      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a57      	ldr	r2, [pc, #348]	; (80083d8 <HAL_DMA_Init+0x1e0>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d018      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a56      	ldr	r2, [pc, #344]	; (80083dc <HAL_DMA_Init+0x1e4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d013      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a54      	ldr	r2, [pc, #336]	; (80083e0 <HAL_DMA_Init+0x1e8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00e      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a53      	ldr	r2, [pc, #332]	; (80083e4 <HAL_DMA_Init+0x1ec>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d009      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a51      	ldr	r2, [pc, #324]	; (80083e8 <HAL_DMA_Init+0x1f0>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d004      	beq.n	80082b0 <HAL_DMA_Init+0xb8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a50      	ldr	r2, [pc, #320]	; (80083ec <HAL_DMA_Init+0x1f4>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d101      	bne.n	80082b4 <HAL_DMA_Init+0xbc>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e000      	b.n	80082b6 <HAL_DMA_Init+0xbe>
 80082b4:	2300      	movs	r3, #0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 813b 	beq.w	8008532 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a37      	ldr	r2, [pc, #220]	; (80083b0 <HAL_DMA_Init+0x1b8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d04a      	beq.n	800836c <HAL_DMA_Init+0x174>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a36      	ldr	r2, [pc, #216]	; (80083b4 <HAL_DMA_Init+0x1bc>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d045      	beq.n	800836c <HAL_DMA_Init+0x174>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a34      	ldr	r2, [pc, #208]	; (80083b8 <HAL_DMA_Init+0x1c0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d040      	beq.n	800836c <HAL_DMA_Init+0x174>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a33      	ldr	r2, [pc, #204]	; (80083bc <HAL_DMA_Init+0x1c4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d03b      	beq.n	800836c <HAL_DMA_Init+0x174>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a31      	ldr	r2, [pc, #196]	; (80083c0 <HAL_DMA_Init+0x1c8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d036      	beq.n	800836c <HAL_DMA_Init+0x174>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a30      	ldr	r2, [pc, #192]	; (80083c4 <HAL_DMA_Init+0x1cc>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d031      	beq.n	800836c <HAL_DMA_Init+0x174>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a2e      	ldr	r2, [pc, #184]	; (80083c8 <HAL_DMA_Init+0x1d0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d02c      	beq.n	800836c <HAL_DMA_Init+0x174>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a2d      	ldr	r2, [pc, #180]	; (80083cc <HAL_DMA_Init+0x1d4>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d027      	beq.n	800836c <HAL_DMA_Init+0x174>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a2b      	ldr	r2, [pc, #172]	; (80083d0 <HAL_DMA_Init+0x1d8>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d022      	beq.n	800836c <HAL_DMA_Init+0x174>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a2a      	ldr	r2, [pc, #168]	; (80083d4 <HAL_DMA_Init+0x1dc>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d01d      	beq.n	800836c <HAL_DMA_Init+0x174>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a28      	ldr	r2, [pc, #160]	; (80083d8 <HAL_DMA_Init+0x1e0>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d018      	beq.n	800836c <HAL_DMA_Init+0x174>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a27      	ldr	r2, [pc, #156]	; (80083dc <HAL_DMA_Init+0x1e4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d013      	beq.n	800836c <HAL_DMA_Init+0x174>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a25      	ldr	r2, [pc, #148]	; (80083e0 <HAL_DMA_Init+0x1e8>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d00e      	beq.n	800836c <HAL_DMA_Init+0x174>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a24      	ldr	r2, [pc, #144]	; (80083e4 <HAL_DMA_Init+0x1ec>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d009      	beq.n	800836c <HAL_DMA_Init+0x174>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a22      	ldr	r2, [pc, #136]	; (80083e8 <HAL_DMA_Init+0x1f0>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d004      	beq.n	800836c <HAL_DMA_Init+0x174>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a21      	ldr	r2, [pc, #132]	; (80083ec <HAL_DMA_Init+0x1f4>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d108      	bne.n	800837e <HAL_DMA_Init+0x186>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0201 	bic.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	e007      	b.n	800838e <HAL_DMA_Init+0x196>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800838e:	e02f      	b.n	80083f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008390:	f7fd fe0a 	bl	8005fa8 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b05      	cmp	r3, #5
 800839c:	d928      	bls.n	80083f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2220      	movs	r2, #32
 80083a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2203      	movs	r2, #3
 80083a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e246      	b.n	800883e <HAL_DMA_Init+0x646>
 80083b0:	40020010 	.word	0x40020010
 80083b4:	40020028 	.word	0x40020028
 80083b8:	40020040 	.word	0x40020040
 80083bc:	40020058 	.word	0x40020058
 80083c0:	40020070 	.word	0x40020070
 80083c4:	40020088 	.word	0x40020088
 80083c8:	400200a0 	.word	0x400200a0
 80083cc:	400200b8 	.word	0x400200b8
 80083d0:	40020410 	.word	0x40020410
 80083d4:	40020428 	.word	0x40020428
 80083d8:	40020440 	.word	0x40020440
 80083dc:	40020458 	.word	0x40020458
 80083e0:	40020470 	.word	0x40020470
 80083e4:	40020488 	.word	0x40020488
 80083e8:	400204a0 	.word	0x400204a0
 80083ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1c8      	bne.n	8008390 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	4b83      	ldr	r3, [pc, #524]	; (8008618 <HAL_DMA_Init+0x420>)
 800840a:	4013      	ands	r3, r2
 800840c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008416:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008422:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800842e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	4313      	orrs	r3, r2
 800843a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	2b04      	cmp	r3, #4
 8008442:	d107      	bne.n	8008454 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844c:	4313      	orrs	r3, r2
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	4313      	orrs	r3, r2
 8008452:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008454:	4b71      	ldr	r3, [pc, #452]	; (800861c <HAL_DMA_Init+0x424>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4b71      	ldr	r3, [pc, #452]	; (8008620 <HAL_DMA_Init+0x428>)
 800845a:	4013      	ands	r3, r2
 800845c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008460:	d328      	bcc.n	80084b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	2b28      	cmp	r3, #40	; 0x28
 8008468:	d903      	bls.n	8008472 <HAL_DMA_Init+0x27a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2b2e      	cmp	r3, #46	; 0x2e
 8008470:	d917      	bls.n	80084a2 <HAL_DMA_Init+0x2aa>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b3e      	cmp	r3, #62	; 0x3e
 8008478:	d903      	bls.n	8008482 <HAL_DMA_Init+0x28a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b42      	cmp	r3, #66	; 0x42
 8008480:	d90f      	bls.n	80084a2 <HAL_DMA_Init+0x2aa>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2b46      	cmp	r3, #70	; 0x46
 8008488:	d903      	bls.n	8008492 <HAL_DMA_Init+0x29a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b48      	cmp	r3, #72	; 0x48
 8008490:	d907      	bls.n	80084a2 <HAL_DMA_Init+0x2aa>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2b4e      	cmp	r3, #78	; 0x4e
 8008498:	d905      	bls.n	80084a6 <HAL_DMA_Init+0x2ae>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b52      	cmp	r3, #82	; 0x52
 80084a0:	d801      	bhi.n	80084a6 <HAL_DMA_Init+0x2ae>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <HAL_DMA_Init+0x2b0>
 80084a6:	2300      	movs	r3, #0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f023 0307 	bic.w	r3, r3, #7
 80084ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d117      	bne.n	800850e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00e      	beq.n	800850e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f002 fb4d 	bl	800ab90 <DMA_CheckFifoParam>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d008      	beq.n	800850e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2240      	movs	r2, #64	; 0x40
 8008500:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e197      	b.n	800883e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f002 fa88 	bl	800aa2c <DMA_CalcBaseAndBitshift>
 800851c:	4603      	mov	r3, r0
 800851e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008524:	f003 031f 	and.w	r3, r3, #31
 8008528:	223f      	movs	r2, #63	; 0x3f
 800852a:	409a      	lsls	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	e0cd      	b.n	80086ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a3b      	ldr	r2, [pc, #236]	; (8008624 <HAL_DMA_Init+0x42c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d022      	beq.n	8008582 <HAL_DMA_Init+0x38a>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a39      	ldr	r2, [pc, #228]	; (8008628 <HAL_DMA_Init+0x430>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d01d      	beq.n	8008582 <HAL_DMA_Init+0x38a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a38      	ldr	r2, [pc, #224]	; (800862c <HAL_DMA_Init+0x434>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d018      	beq.n	8008582 <HAL_DMA_Init+0x38a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a36      	ldr	r2, [pc, #216]	; (8008630 <HAL_DMA_Init+0x438>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d013      	beq.n	8008582 <HAL_DMA_Init+0x38a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a35      	ldr	r2, [pc, #212]	; (8008634 <HAL_DMA_Init+0x43c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d00e      	beq.n	8008582 <HAL_DMA_Init+0x38a>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a33      	ldr	r2, [pc, #204]	; (8008638 <HAL_DMA_Init+0x440>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d009      	beq.n	8008582 <HAL_DMA_Init+0x38a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a32      	ldr	r2, [pc, #200]	; (800863c <HAL_DMA_Init+0x444>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d004      	beq.n	8008582 <HAL_DMA_Init+0x38a>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a30      	ldr	r2, [pc, #192]	; (8008640 <HAL_DMA_Init+0x448>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d101      	bne.n	8008586 <HAL_DMA_Init+0x38e>
 8008582:	2301      	movs	r3, #1
 8008584:	e000      	b.n	8008588 <HAL_DMA_Init+0x390>
 8008586:	2300      	movs	r3, #0
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8097 	beq.w	80086bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a24      	ldr	r2, [pc, #144]	; (8008624 <HAL_DMA_Init+0x42c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d021      	beq.n	80085dc <HAL_DMA_Init+0x3e4>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a22      	ldr	r2, [pc, #136]	; (8008628 <HAL_DMA_Init+0x430>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d01c      	beq.n	80085dc <HAL_DMA_Init+0x3e4>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a21      	ldr	r2, [pc, #132]	; (800862c <HAL_DMA_Init+0x434>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d017      	beq.n	80085dc <HAL_DMA_Init+0x3e4>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a1f      	ldr	r2, [pc, #124]	; (8008630 <HAL_DMA_Init+0x438>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d012      	beq.n	80085dc <HAL_DMA_Init+0x3e4>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a1e      	ldr	r2, [pc, #120]	; (8008634 <HAL_DMA_Init+0x43c>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d00d      	beq.n	80085dc <HAL_DMA_Init+0x3e4>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a1c      	ldr	r2, [pc, #112]	; (8008638 <HAL_DMA_Init+0x440>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d008      	beq.n	80085dc <HAL_DMA_Init+0x3e4>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a1b      	ldr	r2, [pc, #108]	; (800863c <HAL_DMA_Init+0x444>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d003      	beq.n	80085dc <HAL_DMA_Init+0x3e4>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a19      	ldr	r2, [pc, #100]	; (8008640 <HAL_DMA_Init+0x448>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4b12      	ldr	r3, [pc, #72]	; (8008644 <HAL_DMA_Init+0x44c>)
 80085fa:	4013      	ands	r3, r2
 80085fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	2b40      	cmp	r3, #64	; 0x40
 8008604:	d020      	beq.n	8008648 <HAL_DMA_Init+0x450>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b80      	cmp	r3, #128	; 0x80
 800860c:	d102      	bne.n	8008614 <HAL_DMA_Init+0x41c>
 800860e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008612:	e01a      	b.n	800864a <HAL_DMA_Init+0x452>
 8008614:	2300      	movs	r3, #0
 8008616:	e018      	b.n	800864a <HAL_DMA_Init+0x452>
 8008618:	fe10803f 	.word	0xfe10803f
 800861c:	5c001000 	.word	0x5c001000
 8008620:	ffff0000 	.word	0xffff0000
 8008624:	58025408 	.word	0x58025408
 8008628:	5802541c 	.word	0x5802541c
 800862c:	58025430 	.word	0x58025430
 8008630:	58025444 	.word	0x58025444
 8008634:	58025458 	.word	0x58025458
 8008638:	5802546c 	.word	0x5802546c
 800863c:	58025480 	.word	0x58025480
 8008640:	58025494 	.word	0x58025494
 8008644:	fffe000f 	.word	0xfffe000f
 8008648:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	68d2      	ldr	r2, [r2, #12]
 800864e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008650:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008660:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008678:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	4313      	orrs	r3, r2
 800867e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	4b6e      	ldr	r3, [pc, #440]	; (8008848 <HAL_DMA_Init+0x650>)
 8008690:	4413      	add	r3, r2
 8008692:	4a6e      	ldr	r2, [pc, #440]	; (800884c <HAL_DMA_Init+0x654>)
 8008694:	fba2 2303 	umull	r2, r3, r2, r3
 8008698:	091b      	lsrs	r3, r3, #4
 800869a:	009a      	lsls	r2, r3, #2
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f002 f9c3 	bl	800aa2c <DMA_CalcBaseAndBitshift>
 80086a6:	4603      	mov	r3, r0
 80086a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ae:	f003 031f 	and.w	r3, r3, #31
 80086b2:	2201      	movs	r2, #1
 80086b4:	409a      	lsls	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	605a      	str	r2, [r3, #4]
 80086ba:	e008      	b.n	80086ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2240      	movs	r2, #64	; 0x40
 80086c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2203      	movs	r2, #3
 80086c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e0b7      	b.n	800883e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a5f      	ldr	r2, [pc, #380]	; (8008850 <HAL_DMA_Init+0x658>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d072      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a5d      	ldr	r2, [pc, #372]	; (8008854 <HAL_DMA_Init+0x65c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d06d      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a5c      	ldr	r2, [pc, #368]	; (8008858 <HAL_DMA_Init+0x660>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d068      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a5a      	ldr	r2, [pc, #360]	; (800885c <HAL_DMA_Init+0x664>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d063      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a59      	ldr	r2, [pc, #356]	; (8008860 <HAL_DMA_Init+0x668>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d05e      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a57      	ldr	r2, [pc, #348]	; (8008864 <HAL_DMA_Init+0x66c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d059      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a56      	ldr	r2, [pc, #344]	; (8008868 <HAL_DMA_Init+0x670>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d054      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a54      	ldr	r2, [pc, #336]	; (800886c <HAL_DMA_Init+0x674>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d04f      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a53      	ldr	r2, [pc, #332]	; (8008870 <HAL_DMA_Init+0x678>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d04a      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a51      	ldr	r2, [pc, #324]	; (8008874 <HAL_DMA_Init+0x67c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d045      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a50      	ldr	r2, [pc, #320]	; (8008878 <HAL_DMA_Init+0x680>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d040      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a4e      	ldr	r2, [pc, #312]	; (800887c <HAL_DMA_Init+0x684>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d03b      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a4d      	ldr	r2, [pc, #308]	; (8008880 <HAL_DMA_Init+0x688>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d036      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a4b      	ldr	r2, [pc, #300]	; (8008884 <HAL_DMA_Init+0x68c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d031      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a4a      	ldr	r2, [pc, #296]	; (8008888 <HAL_DMA_Init+0x690>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d02c      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a48      	ldr	r2, [pc, #288]	; (800888c <HAL_DMA_Init+0x694>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d027      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a47      	ldr	r2, [pc, #284]	; (8008890 <HAL_DMA_Init+0x698>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d022      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a45      	ldr	r2, [pc, #276]	; (8008894 <HAL_DMA_Init+0x69c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d01d      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a44      	ldr	r2, [pc, #272]	; (8008898 <HAL_DMA_Init+0x6a0>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d018      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a42      	ldr	r2, [pc, #264]	; (800889c <HAL_DMA_Init+0x6a4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d013      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a41      	ldr	r2, [pc, #260]	; (80088a0 <HAL_DMA_Init+0x6a8>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d00e      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a3f      	ldr	r2, [pc, #252]	; (80088a4 <HAL_DMA_Init+0x6ac>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d009      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a3e      	ldr	r2, [pc, #248]	; (80088a8 <HAL_DMA_Init+0x6b0>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d004      	beq.n	80087be <HAL_DMA_Init+0x5c6>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a3c      	ldr	r2, [pc, #240]	; (80088ac <HAL_DMA_Init+0x6b4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d101      	bne.n	80087c2 <HAL_DMA_Init+0x5ca>
 80087be:	2301      	movs	r3, #1
 80087c0:	e000      	b.n	80087c4 <HAL_DMA_Init+0x5cc>
 80087c2:	2300      	movs	r3, #0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d032      	beq.n	800882e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f002 fa5d 	bl	800ac88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	2b80      	cmp	r3, #128	; 0x80
 80087d4:	d102      	bne.n	80087dc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80087f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d010      	beq.n	800881c <HAL_DMA_Init+0x624>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	2b08      	cmp	r3, #8
 8008800:	d80c      	bhi.n	800881c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f002 fada 	bl	800adbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008818:	605a      	str	r2, [r3, #4]
 800881a:	e008      	b.n	800882e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	a7fdabf8 	.word	0xa7fdabf8
 800884c:	cccccccd 	.word	0xcccccccd
 8008850:	40020010 	.word	0x40020010
 8008854:	40020028 	.word	0x40020028
 8008858:	40020040 	.word	0x40020040
 800885c:	40020058 	.word	0x40020058
 8008860:	40020070 	.word	0x40020070
 8008864:	40020088 	.word	0x40020088
 8008868:	400200a0 	.word	0x400200a0
 800886c:	400200b8 	.word	0x400200b8
 8008870:	40020410 	.word	0x40020410
 8008874:	40020428 	.word	0x40020428
 8008878:	40020440 	.word	0x40020440
 800887c:	40020458 	.word	0x40020458
 8008880:	40020470 	.word	0x40020470
 8008884:	40020488 	.word	0x40020488
 8008888:	400204a0 	.word	0x400204a0
 800888c:	400204b8 	.word	0x400204b8
 8008890:	58025408 	.word	0x58025408
 8008894:	5802541c 	.word	0x5802541c
 8008898:	58025430 	.word	0x58025430
 800889c:	58025444 	.word	0x58025444
 80088a0:	58025458 	.word	0x58025458
 80088a4:	5802546c 	.word	0x5802546c
 80088a8:	58025480 	.word	0x58025480
 80088ac:	58025494 	.word	0x58025494

080088b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e226      	b.n	8008d1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d101      	bne.n	80088da <HAL_DMA_Start_IT+0x2a>
 80088d6:	2302      	movs	r3, #2
 80088d8:	e21f      	b.n	8008d1a <HAL_DMA_Start_IT+0x46a>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	f040 820a 	bne.w	8008d04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a68      	ldr	r2, [pc, #416]	; (8008aa4 <HAL_DMA_Start_IT+0x1f4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d04a      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a66      	ldr	r2, [pc, #408]	; (8008aa8 <HAL_DMA_Start_IT+0x1f8>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d045      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a65      	ldr	r2, [pc, #404]	; (8008aac <HAL_DMA_Start_IT+0x1fc>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d040      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a63      	ldr	r2, [pc, #396]	; (8008ab0 <HAL_DMA_Start_IT+0x200>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d03b      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a62      	ldr	r2, [pc, #392]	; (8008ab4 <HAL_DMA_Start_IT+0x204>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d036      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a60      	ldr	r2, [pc, #384]	; (8008ab8 <HAL_DMA_Start_IT+0x208>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d031      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a5f      	ldr	r2, [pc, #380]	; (8008abc <HAL_DMA_Start_IT+0x20c>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d02c      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a5d      	ldr	r2, [pc, #372]	; (8008ac0 <HAL_DMA_Start_IT+0x210>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d027      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a5c      	ldr	r2, [pc, #368]	; (8008ac4 <HAL_DMA_Start_IT+0x214>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d022      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a5a      	ldr	r2, [pc, #360]	; (8008ac8 <HAL_DMA_Start_IT+0x218>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d01d      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a59      	ldr	r2, [pc, #356]	; (8008acc <HAL_DMA_Start_IT+0x21c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d018      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a57      	ldr	r2, [pc, #348]	; (8008ad0 <HAL_DMA_Start_IT+0x220>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d013      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a56      	ldr	r2, [pc, #344]	; (8008ad4 <HAL_DMA_Start_IT+0x224>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00e      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a54      	ldr	r2, [pc, #336]	; (8008ad8 <HAL_DMA_Start_IT+0x228>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d009      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a53      	ldr	r2, [pc, #332]	; (8008adc <HAL_DMA_Start_IT+0x22c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d004      	beq.n	800899e <HAL_DMA_Start_IT+0xee>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a51      	ldr	r2, [pc, #324]	; (8008ae0 <HAL_DMA_Start_IT+0x230>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d108      	bne.n	80089b0 <HAL_DMA_Start_IT+0x100>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0201 	bic.w	r2, r2, #1
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	e007      	b.n	80089c0 <HAL_DMA_Start_IT+0x110>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0201 	bic.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f001 fe84 	bl	800a6d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a34      	ldr	r2, [pc, #208]	; (8008aa4 <HAL_DMA_Start_IT+0x1f4>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d04a      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a33      	ldr	r2, [pc, #204]	; (8008aa8 <HAL_DMA_Start_IT+0x1f8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d045      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a31      	ldr	r2, [pc, #196]	; (8008aac <HAL_DMA_Start_IT+0x1fc>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d040      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a30      	ldr	r2, [pc, #192]	; (8008ab0 <HAL_DMA_Start_IT+0x200>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d03b      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a2e      	ldr	r2, [pc, #184]	; (8008ab4 <HAL_DMA_Start_IT+0x204>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d036      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a2d      	ldr	r2, [pc, #180]	; (8008ab8 <HAL_DMA_Start_IT+0x208>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d031      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a2b      	ldr	r2, [pc, #172]	; (8008abc <HAL_DMA_Start_IT+0x20c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d02c      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a2a      	ldr	r2, [pc, #168]	; (8008ac0 <HAL_DMA_Start_IT+0x210>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d027      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a28      	ldr	r2, [pc, #160]	; (8008ac4 <HAL_DMA_Start_IT+0x214>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d022      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a27      	ldr	r2, [pc, #156]	; (8008ac8 <HAL_DMA_Start_IT+0x218>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d01d      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a25      	ldr	r2, [pc, #148]	; (8008acc <HAL_DMA_Start_IT+0x21c>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d018      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a24      	ldr	r2, [pc, #144]	; (8008ad0 <HAL_DMA_Start_IT+0x220>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d013      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a22      	ldr	r2, [pc, #136]	; (8008ad4 <HAL_DMA_Start_IT+0x224>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00e      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a21      	ldr	r2, [pc, #132]	; (8008ad8 <HAL_DMA_Start_IT+0x228>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d009      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1f      	ldr	r2, [pc, #124]	; (8008adc <HAL_DMA_Start_IT+0x22c>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d004      	beq.n	8008a6c <HAL_DMA_Start_IT+0x1bc>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a1e      	ldr	r2, [pc, #120]	; (8008ae0 <HAL_DMA_Start_IT+0x230>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d101      	bne.n	8008a70 <HAL_DMA_Start_IT+0x1c0>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e000      	b.n	8008a72 <HAL_DMA_Start_IT+0x1c2>
 8008a70:	2300      	movs	r3, #0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d036      	beq.n	8008ae4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f023 021e 	bic.w	r2, r3, #30
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f042 0216 	orr.w	r2, r2, #22
 8008a88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d03e      	beq.n	8008b10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f042 0208 	orr.w	r2, r2, #8
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	e035      	b.n	8008b10 <HAL_DMA_Start_IT+0x260>
 8008aa4:	40020010 	.word	0x40020010
 8008aa8:	40020028 	.word	0x40020028
 8008aac:	40020040 	.word	0x40020040
 8008ab0:	40020058 	.word	0x40020058
 8008ab4:	40020070 	.word	0x40020070
 8008ab8:	40020088 	.word	0x40020088
 8008abc:	400200a0 	.word	0x400200a0
 8008ac0:	400200b8 	.word	0x400200b8
 8008ac4:	40020410 	.word	0x40020410
 8008ac8:	40020428 	.word	0x40020428
 8008acc:	40020440 	.word	0x40020440
 8008ad0:	40020458 	.word	0x40020458
 8008ad4:	40020470 	.word	0x40020470
 8008ad8:	40020488 	.word	0x40020488
 8008adc:	400204a0 	.word	0x400204a0
 8008ae0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f023 020e 	bic.w	r2, r3, #14
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 020a 	orr.w	r2, r2, #10
 8008af6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d007      	beq.n	8008b10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0204 	orr.w	r2, r2, #4
 8008b0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a83      	ldr	r2, [pc, #524]	; (8008d24 <HAL_DMA_Start_IT+0x474>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d072      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a82      	ldr	r2, [pc, #520]	; (8008d28 <HAL_DMA_Start_IT+0x478>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d06d      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a80      	ldr	r2, [pc, #512]	; (8008d2c <HAL_DMA_Start_IT+0x47c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d068      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a7f      	ldr	r2, [pc, #508]	; (8008d30 <HAL_DMA_Start_IT+0x480>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d063      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a7d      	ldr	r2, [pc, #500]	; (8008d34 <HAL_DMA_Start_IT+0x484>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d05e      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a7c      	ldr	r2, [pc, #496]	; (8008d38 <HAL_DMA_Start_IT+0x488>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d059      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a7a      	ldr	r2, [pc, #488]	; (8008d3c <HAL_DMA_Start_IT+0x48c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d054      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a79      	ldr	r2, [pc, #484]	; (8008d40 <HAL_DMA_Start_IT+0x490>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d04f      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a77      	ldr	r2, [pc, #476]	; (8008d44 <HAL_DMA_Start_IT+0x494>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d04a      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a76      	ldr	r2, [pc, #472]	; (8008d48 <HAL_DMA_Start_IT+0x498>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d045      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a74      	ldr	r2, [pc, #464]	; (8008d4c <HAL_DMA_Start_IT+0x49c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d040      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a73      	ldr	r2, [pc, #460]	; (8008d50 <HAL_DMA_Start_IT+0x4a0>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d03b      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a71      	ldr	r2, [pc, #452]	; (8008d54 <HAL_DMA_Start_IT+0x4a4>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d036      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a70      	ldr	r2, [pc, #448]	; (8008d58 <HAL_DMA_Start_IT+0x4a8>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d031      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a6e      	ldr	r2, [pc, #440]	; (8008d5c <HAL_DMA_Start_IT+0x4ac>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d02c      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a6d      	ldr	r2, [pc, #436]	; (8008d60 <HAL_DMA_Start_IT+0x4b0>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d027      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a6b      	ldr	r2, [pc, #428]	; (8008d64 <HAL_DMA_Start_IT+0x4b4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d022      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a6a      	ldr	r2, [pc, #424]	; (8008d68 <HAL_DMA_Start_IT+0x4b8>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d01d      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a68      	ldr	r2, [pc, #416]	; (8008d6c <HAL_DMA_Start_IT+0x4bc>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d018      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a67      	ldr	r2, [pc, #412]	; (8008d70 <HAL_DMA_Start_IT+0x4c0>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a65      	ldr	r2, [pc, #404]	; (8008d74 <HAL_DMA_Start_IT+0x4c4>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00e      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a64      	ldr	r2, [pc, #400]	; (8008d78 <HAL_DMA_Start_IT+0x4c8>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d009      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a62      	ldr	r2, [pc, #392]	; (8008d7c <HAL_DMA_Start_IT+0x4cc>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_DMA_Start_IT+0x350>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a61      	ldr	r2, [pc, #388]	; (8008d80 <HAL_DMA_Start_IT+0x4d0>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d101      	bne.n	8008c04 <HAL_DMA_Start_IT+0x354>
 8008c00:	2301      	movs	r3, #1
 8008c02:	e000      	b.n	8008c06 <HAL_DMA_Start_IT+0x356>
 8008c04:	2300      	movs	r3, #0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d01a      	beq.n	8008c40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d007      	beq.n	8008c28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d007      	beq.n	8008c40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a37      	ldr	r2, [pc, #220]	; (8008d24 <HAL_DMA_Start_IT+0x474>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d04a      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a36      	ldr	r2, [pc, #216]	; (8008d28 <HAL_DMA_Start_IT+0x478>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d045      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a34      	ldr	r2, [pc, #208]	; (8008d2c <HAL_DMA_Start_IT+0x47c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d040      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a33      	ldr	r2, [pc, #204]	; (8008d30 <HAL_DMA_Start_IT+0x480>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d03b      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a31      	ldr	r2, [pc, #196]	; (8008d34 <HAL_DMA_Start_IT+0x484>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d036      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a30      	ldr	r2, [pc, #192]	; (8008d38 <HAL_DMA_Start_IT+0x488>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d031      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a2e      	ldr	r2, [pc, #184]	; (8008d3c <HAL_DMA_Start_IT+0x48c>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d02c      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a2d      	ldr	r2, [pc, #180]	; (8008d40 <HAL_DMA_Start_IT+0x490>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d027      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a2b      	ldr	r2, [pc, #172]	; (8008d44 <HAL_DMA_Start_IT+0x494>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d022      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a2a      	ldr	r2, [pc, #168]	; (8008d48 <HAL_DMA_Start_IT+0x498>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d01d      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a28      	ldr	r2, [pc, #160]	; (8008d4c <HAL_DMA_Start_IT+0x49c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d018      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a27      	ldr	r2, [pc, #156]	; (8008d50 <HAL_DMA_Start_IT+0x4a0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d013      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a25      	ldr	r2, [pc, #148]	; (8008d54 <HAL_DMA_Start_IT+0x4a4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00e      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a24      	ldr	r2, [pc, #144]	; (8008d58 <HAL_DMA_Start_IT+0x4a8>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d009      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a22      	ldr	r2, [pc, #136]	; (8008d5c <HAL_DMA_Start_IT+0x4ac>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d004      	beq.n	8008ce0 <HAL_DMA_Start_IT+0x430>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a21      	ldr	r2, [pc, #132]	; (8008d60 <HAL_DMA_Start_IT+0x4b0>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d108      	bne.n	8008cf2 <HAL_DMA_Start_IT+0x442>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f042 0201 	orr.w	r2, r2, #1
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	e012      	b.n	8008d18 <HAL_DMA_Start_IT+0x468>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f042 0201 	orr.w	r2, r2, #1
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	e009      	b.n	8008d18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	40020010 	.word	0x40020010
 8008d28:	40020028 	.word	0x40020028
 8008d2c:	40020040 	.word	0x40020040
 8008d30:	40020058 	.word	0x40020058
 8008d34:	40020070 	.word	0x40020070
 8008d38:	40020088 	.word	0x40020088
 8008d3c:	400200a0 	.word	0x400200a0
 8008d40:	400200b8 	.word	0x400200b8
 8008d44:	40020410 	.word	0x40020410
 8008d48:	40020428 	.word	0x40020428
 8008d4c:	40020440 	.word	0x40020440
 8008d50:	40020458 	.word	0x40020458
 8008d54:	40020470 	.word	0x40020470
 8008d58:	40020488 	.word	0x40020488
 8008d5c:	400204a0 	.word	0x400204a0
 8008d60:	400204b8 	.word	0x400204b8
 8008d64:	58025408 	.word	0x58025408
 8008d68:	5802541c 	.word	0x5802541c
 8008d6c:	58025430 	.word	0x58025430
 8008d70:	58025444 	.word	0x58025444
 8008d74:	58025458 	.word	0x58025458
 8008d78:	5802546c 	.word	0x5802546c
 8008d7c:	58025480 	.word	0x58025480
 8008d80:	58025494 	.word	0x58025494

08008d84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008d8c:	f7fd f90c 	bl	8005fa8 <HAL_GetTick>
 8008d90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e2dc      	b.n	8009356 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d008      	beq.n	8008dba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2280      	movs	r2, #128	; 0x80
 8008dac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e2cd      	b.n	8009356 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a76      	ldr	r2, [pc, #472]	; (8008f98 <HAL_DMA_Abort+0x214>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d04a      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a74      	ldr	r2, [pc, #464]	; (8008f9c <HAL_DMA_Abort+0x218>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d045      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a73      	ldr	r2, [pc, #460]	; (8008fa0 <HAL_DMA_Abort+0x21c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d040      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a71      	ldr	r2, [pc, #452]	; (8008fa4 <HAL_DMA_Abort+0x220>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d03b      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a70      	ldr	r2, [pc, #448]	; (8008fa8 <HAL_DMA_Abort+0x224>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d036      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a6e      	ldr	r2, [pc, #440]	; (8008fac <HAL_DMA_Abort+0x228>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d031      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a6d      	ldr	r2, [pc, #436]	; (8008fb0 <HAL_DMA_Abort+0x22c>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d02c      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a6b      	ldr	r2, [pc, #428]	; (8008fb4 <HAL_DMA_Abort+0x230>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d027      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a6a      	ldr	r2, [pc, #424]	; (8008fb8 <HAL_DMA_Abort+0x234>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d022      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a68      	ldr	r2, [pc, #416]	; (8008fbc <HAL_DMA_Abort+0x238>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d01d      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a67      	ldr	r2, [pc, #412]	; (8008fc0 <HAL_DMA_Abort+0x23c>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d018      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a65      	ldr	r2, [pc, #404]	; (8008fc4 <HAL_DMA_Abort+0x240>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d013      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a64      	ldr	r2, [pc, #400]	; (8008fc8 <HAL_DMA_Abort+0x244>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00e      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a62      	ldr	r2, [pc, #392]	; (8008fcc <HAL_DMA_Abort+0x248>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d009      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a61      	ldr	r2, [pc, #388]	; (8008fd0 <HAL_DMA_Abort+0x24c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d004      	beq.n	8008e5a <HAL_DMA_Abort+0xd6>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a5f      	ldr	r2, [pc, #380]	; (8008fd4 <HAL_DMA_Abort+0x250>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d101      	bne.n	8008e5e <HAL_DMA_Abort+0xda>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e000      	b.n	8008e60 <HAL_DMA_Abort+0xdc>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d013      	beq.n	8008e8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 021e 	bic.w	r2, r2, #30
 8008e72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	695a      	ldr	r2, [r3, #20]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	e00a      	b.n	8008ea2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 020e 	bic.w	r2, r2, #14
 8008e9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a3c      	ldr	r2, [pc, #240]	; (8008f98 <HAL_DMA_Abort+0x214>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d072      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a3a      	ldr	r2, [pc, #232]	; (8008f9c <HAL_DMA_Abort+0x218>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d06d      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a39      	ldr	r2, [pc, #228]	; (8008fa0 <HAL_DMA_Abort+0x21c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d068      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a37      	ldr	r2, [pc, #220]	; (8008fa4 <HAL_DMA_Abort+0x220>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d063      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a36      	ldr	r2, [pc, #216]	; (8008fa8 <HAL_DMA_Abort+0x224>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d05e      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a34      	ldr	r2, [pc, #208]	; (8008fac <HAL_DMA_Abort+0x228>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d059      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a33      	ldr	r2, [pc, #204]	; (8008fb0 <HAL_DMA_Abort+0x22c>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d054      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a31      	ldr	r2, [pc, #196]	; (8008fb4 <HAL_DMA_Abort+0x230>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d04f      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a30      	ldr	r2, [pc, #192]	; (8008fb8 <HAL_DMA_Abort+0x234>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d04a      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a2e      	ldr	r2, [pc, #184]	; (8008fbc <HAL_DMA_Abort+0x238>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d045      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a2d      	ldr	r2, [pc, #180]	; (8008fc0 <HAL_DMA_Abort+0x23c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d040      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a2b      	ldr	r2, [pc, #172]	; (8008fc4 <HAL_DMA_Abort+0x240>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d03b      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a2a      	ldr	r2, [pc, #168]	; (8008fc8 <HAL_DMA_Abort+0x244>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d036      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a28      	ldr	r2, [pc, #160]	; (8008fcc <HAL_DMA_Abort+0x248>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d031      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a27      	ldr	r2, [pc, #156]	; (8008fd0 <HAL_DMA_Abort+0x24c>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d02c      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a25      	ldr	r2, [pc, #148]	; (8008fd4 <HAL_DMA_Abort+0x250>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d027      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a24      	ldr	r2, [pc, #144]	; (8008fd8 <HAL_DMA_Abort+0x254>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d022      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a22      	ldr	r2, [pc, #136]	; (8008fdc <HAL_DMA_Abort+0x258>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d01d      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a21      	ldr	r2, [pc, #132]	; (8008fe0 <HAL_DMA_Abort+0x25c>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d018      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a1f      	ldr	r2, [pc, #124]	; (8008fe4 <HAL_DMA_Abort+0x260>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d013      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a1e      	ldr	r2, [pc, #120]	; (8008fe8 <HAL_DMA_Abort+0x264>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d00e      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a1c      	ldr	r2, [pc, #112]	; (8008fec <HAL_DMA_Abort+0x268>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d009      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a1b      	ldr	r2, [pc, #108]	; (8008ff0 <HAL_DMA_Abort+0x26c>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d004      	beq.n	8008f92 <HAL_DMA_Abort+0x20e>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a19      	ldr	r2, [pc, #100]	; (8008ff4 <HAL_DMA_Abort+0x270>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d132      	bne.n	8008ff8 <HAL_DMA_Abort+0x274>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e031      	b.n	8008ffa <HAL_DMA_Abort+0x276>
 8008f96:	bf00      	nop
 8008f98:	40020010 	.word	0x40020010
 8008f9c:	40020028 	.word	0x40020028
 8008fa0:	40020040 	.word	0x40020040
 8008fa4:	40020058 	.word	0x40020058
 8008fa8:	40020070 	.word	0x40020070
 8008fac:	40020088 	.word	0x40020088
 8008fb0:	400200a0 	.word	0x400200a0
 8008fb4:	400200b8 	.word	0x400200b8
 8008fb8:	40020410 	.word	0x40020410
 8008fbc:	40020428 	.word	0x40020428
 8008fc0:	40020440 	.word	0x40020440
 8008fc4:	40020458 	.word	0x40020458
 8008fc8:	40020470 	.word	0x40020470
 8008fcc:	40020488 	.word	0x40020488
 8008fd0:	400204a0 	.word	0x400204a0
 8008fd4:	400204b8 	.word	0x400204b8
 8008fd8:	58025408 	.word	0x58025408
 8008fdc:	5802541c 	.word	0x5802541c
 8008fe0:	58025430 	.word	0x58025430
 8008fe4:	58025444 	.word	0x58025444
 8008fe8:	58025458 	.word	0x58025458
 8008fec:	5802546c 	.word	0x5802546c
 8008ff0:	58025480 	.word	0x58025480
 8008ff4:	58025494 	.word	0x58025494
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d007      	beq.n	800900e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800900c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a6d      	ldr	r2, [pc, #436]	; (80091c8 <HAL_DMA_Abort+0x444>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d04a      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a6b      	ldr	r2, [pc, #428]	; (80091cc <HAL_DMA_Abort+0x448>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d045      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a6a      	ldr	r2, [pc, #424]	; (80091d0 <HAL_DMA_Abort+0x44c>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d040      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a68      	ldr	r2, [pc, #416]	; (80091d4 <HAL_DMA_Abort+0x450>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d03b      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a67      	ldr	r2, [pc, #412]	; (80091d8 <HAL_DMA_Abort+0x454>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d036      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a65      	ldr	r2, [pc, #404]	; (80091dc <HAL_DMA_Abort+0x458>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d031      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a64      	ldr	r2, [pc, #400]	; (80091e0 <HAL_DMA_Abort+0x45c>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d02c      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a62      	ldr	r2, [pc, #392]	; (80091e4 <HAL_DMA_Abort+0x460>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d027      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a61      	ldr	r2, [pc, #388]	; (80091e8 <HAL_DMA_Abort+0x464>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d022      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a5f      	ldr	r2, [pc, #380]	; (80091ec <HAL_DMA_Abort+0x468>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d01d      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a5e      	ldr	r2, [pc, #376]	; (80091f0 <HAL_DMA_Abort+0x46c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d018      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a5c      	ldr	r2, [pc, #368]	; (80091f4 <HAL_DMA_Abort+0x470>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d013      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a5b      	ldr	r2, [pc, #364]	; (80091f8 <HAL_DMA_Abort+0x474>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00e      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a59      	ldr	r2, [pc, #356]	; (80091fc <HAL_DMA_Abort+0x478>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d009      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a58      	ldr	r2, [pc, #352]	; (8009200 <HAL_DMA_Abort+0x47c>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d004      	beq.n	80090ae <HAL_DMA_Abort+0x32a>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a56      	ldr	r2, [pc, #344]	; (8009204 <HAL_DMA_Abort+0x480>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d108      	bne.n	80090c0 <HAL_DMA_Abort+0x33c>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0201 	bic.w	r2, r2, #1
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	e007      	b.n	80090d0 <HAL_DMA_Abort+0x34c>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 0201 	bic.w	r2, r2, #1
 80090ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80090d0:	e013      	b.n	80090fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80090d2:	f7fc ff69 	bl	8005fa8 <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b05      	cmp	r3, #5
 80090de:	d90c      	bls.n	80090fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2220      	movs	r2, #32
 80090e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2203      	movs	r2, #3
 80090ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e12d      	b.n	8009356 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e5      	bne.n	80090d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a2f      	ldr	r2, [pc, #188]	; (80091c8 <HAL_DMA_Abort+0x444>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d04a      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a2d      	ldr	r2, [pc, #180]	; (80091cc <HAL_DMA_Abort+0x448>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d045      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a2c      	ldr	r2, [pc, #176]	; (80091d0 <HAL_DMA_Abort+0x44c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d040      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a2a      	ldr	r2, [pc, #168]	; (80091d4 <HAL_DMA_Abort+0x450>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d03b      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a29      	ldr	r2, [pc, #164]	; (80091d8 <HAL_DMA_Abort+0x454>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d036      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a27      	ldr	r2, [pc, #156]	; (80091dc <HAL_DMA_Abort+0x458>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d031      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <HAL_DMA_Abort+0x45c>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d02c      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a24      	ldr	r2, [pc, #144]	; (80091e4 <HAL_DMA_Abort+0x460>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d027      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a23      	ldr	r2, [pc, #140]	; (80091e8 <HAL_DMA_Abort+0x464>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d022      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a21      	ldr	r2, [pc, #132]	; (80091ec <HAL_DMA_Abort+0x468>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d01d      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a20      	ldr	r2, [pc, #128]	; (80091f0 <HAL_DMA_Abort+0x46c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d018      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1e      	ldr	r2, [pc, #120]	; (80091f4 <HAL_DMA_Abort+0x470>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d013      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a1d      	ldr	r2, [pc, #116]	; (80091f8 <HAL_DMA_Abort+0x474>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d00e      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a1b      	ldr	r2, [pc, #108]	; (80091fc <HAL_DMA_Abort+0x478>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d009      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a1a      	ldr	r2, [pc, #104]	; (8009200 <HAL_DMA_Abort+0x47c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d004      	beq.n	80091a6 <HAL_DMA_Abort+0x422>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a18      	ldr	r2, [pc, #96]	; (8009204 <HAL_DMA_Abort+0x480>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d101      	bne.n	80091aa <HAL_DMA_Abort+0x426>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <HAL_DMA_Abort+0x428>
 80091aa:	2300      	movs	r3, #0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d02b      	beq.n	8009208 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ba:	f003 031f 	and.w	r3, r3, #31
 80091be:	223f      	movs	r2, #63	; 0x3f
 80091c0:	409a      	lsls	r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	609a      	str	r2, [r3, #8]
 80091c6:	e02a      	b.n	800921e <HAL_DMA_Abort+0x49a>
 80091c8:	40020010 	.word	0x40020010
 80091cc:	40020028 	.word	0x40020028
 80091d0:	40020040 	.word	0x40020040
 80091d4:	40020058 	.word	0x40020058
 80091d8:	40020070 	.word	0x40020070
 80091dc:	40020088 	.word	0x40020088
 80091e0:	400200a0 	.word	0x400200a0
 80091e4:	400200b8 	.word	0x400200b8
 80091e8:	40020410 	.word	0x40020410
 80091ec:	40020428 	.word	0x40020428
 80091f0:	40020440 	.word	0x40020440
 80091f4:	40020458 	.word	0x40020458
 80091f8:	40020470 	.word	0x40020470
 80091fc:	40020488 	.word	0x40020488
 8009200:	400204a0 	.word	0x400204a0
 8009204:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009212:	f003 031f 	and.w	r3, r3, #31
 8009216:	2201      	movs	r2, #1
 8009218:	409a      	lsls	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a4f      	ldr	r2, [pc, #316]	; (8009360 <HAL_DMA_Abort+0x5dc>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d072      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a4d      	ldr	r2, [pc, #308]	; (8009364 <HAL_DMA_Abort+0x5e0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d06d      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a4c      	ldr	r2, [pc, #304]	; (8009368 <HAL_DMA_Abort+0x5e4>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d068      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a4a      	ldr	r2, [pc, #296]	; (800936c <HAL_DMA_Abort+0x5e8>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d063      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a49      	ldr	r2, [pc, #292]	; (8009370 <HAL_DMA_Abort+0x5ec>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d05e      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a47      	ldr	r2, [pc, #284]	; (8009374 <HAL_DMA_Abort+0x5f0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d059      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a46      	ldr	r2, [pc, #280]	; (8009378 <HAL_DMA_Abort+0x5f4>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d054      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a44      	ldr	r2, [pc, #272]	; (800937c <HAL_DMA_Abort+0x5f8>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d04f      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a43      	ldr	r2, [pc, #268]	; (8009380 <HAL_DMA_Abort+0x5fc>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d04a      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a41      	ldr	r2, [pc, #260]	; (8009384 <HAL_DMA_Abort+0x600>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d045      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a40      	ldr	r2, [pc, #256]	; (8009388 <HAL_DMA_Abort+0x604>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d040      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a3e      	ldr	r2, [pc, #248]	; (800938c <HAL_DMA_Abort+0x608>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d03b      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a3d      	ldr	r2, [pc, #244]	; (8009390 <HAL_DMA_Abort+0x60c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d036      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a3b      	ldr	r2, [pc, #236]	; (8009394 <HAL_DMA_Abort+0x610>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d031      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a3a      	ldr	r2, [pc, #232]	; (8009398 <HAL_DMA_Abort+0x614>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d02c      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a38      	ldr	r2, [pc, #224]	; (800939c <HAL_DMA_Abort+0x618>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d027      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a37      	ldr	r2, [pc, #220]	; (80093a0 <HAL_DMA_Abort+0x61c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d022      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a35      	ldr	r2, [pc, #212]	; (80093a4 <HAL_DMA_Abort+0x620>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d01d      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a34      	ldr	r2, [pc, #208]	; (80093a8 <HAL_DMA_Abort+0x624>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d018      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a32      	ldr	r2, [pc, #200]	; (80093ac <HAL_DMA_Abort+0x628>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d013      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a31      	ldr	r2, [pc, #196]	; (80093b0 <HAL_DMA_Abort+0x62c>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d00e      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a2f      	ldr	r2, [pc, #188]	; (80093b4 <HAL_DMA_Abort+0x630>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d009      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a2e      	ldr	r2, [pc, #184]	; (80093b8 <HAL_DMA_Abort+0x634>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d004      	beq.n	800930e <HAL_DMA_Abort+0x58a>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a2c      	ldr	r2, [pc, #176]	; (80093bc <HAL_DMA_Abort+0x638>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d101      	bne.n	8009312 <HAL_DMA_Abort+0x58e>
 800930e:	2301      	movs	r3, #1
 8009310:	e000      	b.n	8009314 <HAL_DMA_Abort+0x590>
 8009312:	2300      	movs	r3, #0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d015      	beq.n	8009344 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009320:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00c      	beq.n	8009344 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009338:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009342:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	40020010 	.word	0x40020010
 8009364:	40020028 	.word	0x40020028
 8009368:	40020040 	.word	0x40020040
 800936c:	40020058 	.word	0x40020058
 8009370:	40020070 	.word	0x40020070
 8009374:	40020088 	.word	0x40020088
 8009378:	400200a0 	.word	0x400200a0
 800937c:	400200b8 	.word	0x400200b8
 8009380:	40020410 	.word	0x40020410
 8009384:	40020428 	.word	0x40020428
 8009388:	40020440 	.word	0x40020440
 800938c:	40020458 	.word	0x40020458
 8009390:	40020470 	.word	0x40020470
 8009394:	40020488 	.word	0x40020488
 8009398:	400204a0 	.word	0x400204a0
 800939c:	400204b8 	.word	0x400204b8
 80093a0:	58025408 	.word	0x58025408
 80093a4:	5802541c 	.word	0x5802541c
 80093a8:	58025430 	.word	0x58025430
 80093ac:	58025444 	.word	0x58025444
 80093b0:	58025458 	.word	0x58025458
 80093b4:	5802546c 	.word	0x5802546c
 80093b8:	58025480 	.word	0x58025480
 80093bc:	58025494 	.word	0x58025494

080093c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e237      	b.n	8009842 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d004      	beq.n	80093e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2280      	movs	r2, #128	; 0x80
 80093e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e22c      	b.n	8009842 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a5c      	ldr	r2, [pc, #368]	; (8009560 <HAL_DMA_Abort_IT+0x1a0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d04a      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a5b      	ldr	r2, [pc, #364]	; (8009564 <HAL_DMA_Abort_IT+0x1a4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d045      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a59      	ldr	r2, [pc, #356]	; (8009568 <HAL_DMA_Abort_IT+0x1a8>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d040      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a58      	ldr	r2, [pc, #352]	; (800956c <HAL_DMA_Abort_IT+0x1ac>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d03b      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a56      	ldr	r2, [pc, #344]	; (8009570 <HAL_DMA_Abort_IT+0x1b0>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d036      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a55      	ldr	r2, [pc, #340]	; (8009574 <HAL_DMA_Abort_IT+0x1b4>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d031      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a53      	ldr	r2, [pc, #332]	; (8009578 <HAL_DMA_Abort_IT+0x1b8>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d02c      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a52      	ldr	r2, [pc, #328]	; (800957c <HAL_DMA_Abort_IT+0x1bc>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d027      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a50      	ldr	r2, [pc, #320]	; (8009580 <HAL_DMA_Abort_IT+0x1c0>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d022      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a4f      	ldr	r2, [pc, #316]	; (8009584 <HAL_DMA_Abort_IT+0x1c4>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d01d      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a4d      	ldr	r2, [pc, #308]	; (8009588 <HAL_DMA_Abort_IT+0x1c8>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d018      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a4c      	ldr	r2, [pc, #304]	; (800958c <HAL_DMA_Abort_IT+0x1cc>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d013      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a4a      	ldr	r2, [pc, #296]	; (8009590 <HAL_DMA_Abort_IT+0x1d0>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00e      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a49      	ldr	r2, [pc, #292]	; (8009594 <HAL_DMA_Abort_IT+0x1d4>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d009      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a47      	ldr	r2, [pc, #284]	; (8009598 <HAL_DMA_Abort_IT+0x1d8>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d004      	beq.n	8009488 <HAL_DMA_Abort_IT+0xc8>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a46      	ldr	r2, [pc, #280]	; (800959c <HAL_DMA_Abort_IT+0x1dc>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d101      	bne.n	800948c <HAL_DMA_Abort_IT+0xcc>
 8009488:	2301      	movs	r3, #1
 800948a:	e000      	b.n	800948e <HAL_DMA_Abort_IT+0xce>
 800948c:	2300      	movs	r3, #0
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 8086 	beq.w	80095a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2204      	movs	r2, #4
 8009498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a2f      	ldr	r2, [pc, #188]	; (8009560 <HAL_DMA_Abort_IT+0x1a0>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d04a      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a2e      	ldr	r2, [pc, #184]	; (8009564 <HAL_DMA_Abort_IT+0x1a4>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d045      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a2c      	ldr	r2, [pc, #176]	; (8009568 <HAL_DMA_Abort_IT+0x1a8>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d040      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a2b      	ldr	r2, [pc, #172]	; (800956c <HAL_DMA_Abort_IT+0x1ac>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d03b      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a29      	ldr	r2, [pc, #164]	; (8009570 <HAL_DMA_Abort_IT+0x1b0>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d036      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a28      	ldr	r2, [pc, #160]	; (8009574 <HAL_DMA_Abort_IT+0x1b4>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d031      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a26      	ldr	r2, [pc, #152]	; (8009578 <HAL_DMA_Abort_IT+0x1b8>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d02c      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a25      	ldr	r2, [pc, #148]	; (800957c <HAL_DMA_Abort_IT+0x1bc>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d027      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a23      	ldr	r2, [pc, #140]	; (8009580 <HAL_DMA_Abort_IT+0x1c0>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d022      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a22      	ldr	r2, [pc, #136]	; (8009584 <HAL_DMA_Abort_IT+0x1c4>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d01d      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a20      	ldr	r2, [pc, #128]	; (8009588 <HAL_DMA_Abort_IT+0x1c8>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d018      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a1f      	ldr	r2, [pc, #124]	; (800958c <HAL_DMA_Abort_IT+0x1cc>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d013      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a1d      	ldr	r2, [pc, #116]	; (8009590 <HAL_DMA_Abort_IT+0x1d0>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d00e      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a1c      	ldr	r2, [pc, #112]	; (8009594 <HAL_DMA_Abort_IT+0x1d4>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d009      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a1a      	ldr	r2, [pc, #104]	; (8009598 <HAL_DMA_Abort_IT+0x1d8>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d004      	beq.n	800953c <HAL_DMA_Abort_IT+0x17c>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a19      	ldr	r2, [pc, #100]	; (800959c <HAL_DMA_Abort_IT+0x1dc>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d108      	bne.n	800954e <HAL_DMA_Abort_IT+0x18e>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0201 	bic.w	r2, r2, #1
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	e178      	b.n	8009840 <HAL_DMA_Abort_IT+0x480>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0201 	bic.w	r2, r2, #1
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e16f      	b.n	8009840 <HAL_DMA_Abort_IT+0x480>
 8009560:	40020010 	.word	0x40020010
 8009564:	40020028 	.word	0x40020028
 8009568:	40020040 	.word	0x40020040
 800956c:	40020058 	.word	0x40020058
 8009570:	40020070 	.word	0x40020070
 8009574:	40020088 	.word	0x40020088
 8009578:	400200a0 	.word	0x400200a0
 800957c:	400200b8 	.word	0x400200b8
 8009580:	40020410 	.word	0x40020410
 8009584:	40020428 	.word	0x40020428
 8009588:	40020440 	.word	0x40020440
 800958c:	40020458 	.word	0x40020458
 8009590:	40020470 	.word	0x40020470
 8009594:	40020488 	.word	0x40020488
 8009598:	400204a0 	.word	0x400204a0
 800959c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 020e 	bic.w	r2, r2, #14
 80095ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a6c      	ldr	r2, [pc, #432]	; (8009768 <HAL_DMA_Abort_IT+0x3a8>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d04a      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a6b      	ldr	r2, [pc, #428]	; (800976c <HAL_DMA_Abort_IT+0x3ac>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d045      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a69      	ldr	r2, [pc, #420]	; (8009770 <HAL_DMA_Abort_IT+0x3b0>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d040      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a68      	ldr	r2, [pc, #416]	; (8009774 <HAL_DMA_Abort_IT+0x3b4>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d03b      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a66      	ldr	r2, [pc, #408]	; (8009778 <HAL_DMA_Abort_IT+0x3b8>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d036      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a65      	ldr	r2, [pc, #404]	; (800977c <HAL_DMA_Abort_IT+0x3bc>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d031      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a63      	ldr	r2, [pc, #396]	; (8009780 <HAL_DMA_Abort_IT+0x3c0>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d02c      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a62      	ldr	r2, [pc, #392]	; (8009784 <HAL_DMA_Abort_IT+0x3c4>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d027      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a60      	ldr	r2, [pc, #384]	; (8009788 <HAL_DMA_Abort_IT+0x3c8>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d022      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a5f      	ldr	r2, [pc, #380]	; (800978c <HAL_DMA_Abort_IT+0x3cc>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d01d      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a5d      	ldr	r2, [pc, #372]	; (8009790 <HAL_DMA_Abort_IT+0x3d0>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d018      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a5c      	ldr	r2, [pc, #368]	; (8009794 <HAL_DMA_Abort_IT+0x3d4>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d013      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a5a      	ldr	r2, [pc, #360]	; (8009798 <HAL_DMA_Abort_IT+0x3d8>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d00e      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a59      	ldr	r2, [pc, #356]	; (800979c <HAL_DMA_Abort_IT+0x3dc>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d009      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a57      	ldr	r2, [pc, #348]	; (80097a0 <HAL_DMA_Abort_IT+0x3e0>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d004      	beq.n	8009650 <HAL_DMA_Abort_IT+0x290>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a56      	ldr	r2, [pc, #344]	; (80097a4 <HAL_DMA_Abort_IT+0x3e4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d108      	bne.n	8009662 <HAL_DMA_Abort_IT+0x2a2>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0201 	bic.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	e007      	b.n	8009672 <HAL_DMA_Abort_IT+0x2b2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0201 	bic.w	r2, r2, #1
 8009670:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a3c      	ldr	r2, [pc, #240]	; (8009768 <HAL_DMA_Abort_IT+0x3a8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d072      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a3a      	ldr	r2, [pc, #232]	; (800976c <HAL_DMA_Abort_IT+0x3ac>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d06d      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a39      	ldr	r2, [pc, #228]	; (8009770 <HAL_DMA_Abort_IT+0x3b0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d068      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a37      	ldr	r2, [pc, #220]	; (8009774 <HAL_DMA_Abort_IT+0x3b4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d063      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a36      	ldr	r2, [pc, #216]	; (8009778 <HAL_DMA_Abort_IT+0x3b8>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d05e      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a34      	ldr	r2, [pc, #208]	; (800977c <HAL_DMA_Abort_IT+0x3bc>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d059      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a33      	ldr	r2, [pc, #204]	; (8009780 <HAL_DMA_Abort_IT+0x3c0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d054      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a31      	ldr	r2, [pc, #196]	; (8009784 <HAL_DMA_Abort_IT+0x3c4>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d04f      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a30      	ldr	r2, [pc, #192]	; (8009788 <HAL_DMA_Abort_IT+0x3c8>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d04a      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a2e      	ldr	r2, [pc, #184]	; (800978c <HAL_DMA_Abort_IT+0x3cc>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d045      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a2d      	ldr	r2, [pc, #180]	; (8009790 <HAL_DMA_Abort_IT+0x3d0>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d040      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a2b      	ldr	r2, [pc, #172]	; (8009794 <HAL_DMA_Abort_IT+0x3d4>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d03b      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a2a      	ldr	r2, [pc, #168]	; (8009798 <HAL_DMA_Abort_IT+0x3d8>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d036      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a28      	ldr	r2, [pc, #160]	; (800979c <HAL_DMA_Abort_IT+0x3dc>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d031      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a27      	ldr	r2, [pc, #156]	; (80097a0 <HAL_DMA_Abort_IT+0x3e0>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d02c      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a25      	ldr	r2, [pc, #148]	; (80097a4 <HAL_DMA_Abort_IT+0x3e4>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d027      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a24      	ldr	r2, [pc, #144]	; (80097a8 <HAL_DMA_Abort_IT+0x3e8>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d022      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a22      	ldr	r2, [pc, #136]	; (80097ac <HAL_DMA_Abort_IT+0x3ec>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d01d      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a21      	ldr	r2, [pc, #132]	; (80097b0 <HAL_DMA_Abort_IT+0x3f0>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d018      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a1f      	ldr	r2, [pc, #124]	; (80097b4 <HAL_DMA_Abort_IT+0x3f4>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d013      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a1e      	ldr	r2, [pc, #120]	; (80097b8 <HAL_DMA_Abort_IT+0x3f8>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d00e      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a1c      	ldr	r2, [pc, #112]	; (80097bc <HAL_DMA_Abort_IT+0x3fc>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d009      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a1b      	ldr	r2, [pc, #108]	; (80097c0 <HAL_DMA_Abort_IT+0x400>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d004      	beq.n	8009762 <HAL_DMA_Abort_IT+0x3a2>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a19      	ldr	r2, [pc, #100]	; (80097c4 <HAL_DMA_Abort_IT+0x404>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d132      	bne.n	80097c8 <HAL_DMA_Abort_IT+0x408>
 8009762:	2301      	movs	r3, #1
 8009764:	e031      	b.n	80097ca <HAL_DMA_Abort_IT+0x40a>
 8009766:	bf00      	nop
 8009768:	40020010 	.word	0x40020010
 800976c:	40020028 	.word	0x40020028
 8009770:	40020040 	.word	0x40020040
 8009774:	40020058 	.word	0x40020058
 8009778:	40020070 	.word	0x40020070
 800977c:	40020088 	.word	0x40020088
 8009780:	400200a0 	.word	0x400200a0
 8009784:	400200b8 	.word	0x400200b8
 8009788:	40020410 	.word	0x40020410
 800978c:	40020428 	.word	0x40020428
 8009790:	40020440 	.word	0x40020440
 8009794:	40020458 	.word	0x40020458
 8009798:	40020470 	.word	0x40020470
 800979c:	40020488 	.word	0x40020488
 80097a0:	400204a0 	.word	0x400204a0
 80097a4:	400204b8 	.word	0x400204b8
 80097a8:	58025408 	.word	0x58025408
 80097ac:	5802541c 	.word	0x5802541c
 80097b0:	58025430 	.word	0x58025430
 80097b4:	58025444 	.word	0x58025444
 80097b8:	58025458 	.word	0x58025458
 80097bc:	5802546c 	.word	0x5802546c
 80097c0:	58025480 	.word	0x58025480
 80097c4:	58025494 	.word	0x58025494
 80097c8:	2300      	movs	r3, #0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d028      	beq.n	8009820 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097e8:	f003 031f 	and.w	r3, r3, #31
 80097ec:	2201      	movs	r2, #1
 80097ee:	409a      	lsls	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80097fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00c      	beq.n	8009820 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009814:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800981e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop

0800984c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	; 0x28
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009858:	4b67      	ldr	r3, [pc, #412]	; (80099f8 <HAL_DMA_IRQHandler+0x1ac>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a67      	ldr	r2, [pc, #412]	; (80099fc <HAL_DMA_IRQHandler+0x1b0>)
 800985e:	fba2 2303 	umull	r2, r3, r2, r3
 8009862:	0a9b      	lsrs	r3, r3, #10
 8009864:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800986a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009870:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a5f      	ldr	r2, [pc, #380]	; (8009a00 <HAL_DMA_IRQHandler+0x1b4>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d04a      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a5d      	ldr	r2, [pc, #372]	; (8009a04 <HAL_DMA_IRQHandler+0x1b8>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d045      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a5c      	ldr	r2, [pc, #368]	; (8009a08 <HAL_DMA_IRQHandler+0x1bc>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d040      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a5a      	ldr	r2, [pc, #360]	; (8009a0c <HAL_DMA_IRQHandler+0x1c0>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d03b      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a59      	ldr	r2, [pc, #356]	; (8009a10 <HAL_DMA_IRQHandler+0x1c4>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d036      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a57      	ldr	r2, [pc, #348]	; (8009a14 <HAL_DMA_IRQHandler+0x1c8>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d031      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a56      	ldr	r2, [pc, #344]	; (8009a18 <HAL_DMA_IRQHandler+0x1cc>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d02c      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a54      	ldr	r2, [pc, #336]	; (8009a1c <HAL_DMA_IRQHandler+0x1d0>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d027      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a53      	ldr	r2, [pc, #332]	; (8009a20 <HAL_DMA_IRQHandler+0x1d4>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d022      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a51      	ldr	r2, [pc, #324]	; (8009a24 <HAL_DMA_IRQHandler+0x1d8>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d01d      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a50      	ldr	r2, [pc, #320]	; (8009a28 <HAL_DMA_IRQHandler+0x1dc>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d018      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a4e      	ldr	r2, [pc, #312]	; (8009a2c <HAL_DMA_IRQHandler+0x1e0>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d013      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a4d      	ldr	r2, [pc, #308]	; (8009a30 <HAL_DMA_IRQHandler+0x1e4>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d00e      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a4b      	ldr	r2, [pc, #300]	; (8009a34 <HAL_DMA_IRQHandler+0x1e8>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d009      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a4a      	ldr	r2, [pc, #296]	; (8009a38 <HAL_DMA_IRQHandler+0x1ec>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d004      	beq.n	800991e <HAL_DMA_IRQHandler+0xd2>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a48      	ldr	r2, [pc, #288]	; (8009a3c <HAL_DMA_IRQHandler+0x1f0>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d101      	bne.n	8009922 <HAL_DMA_IRQHandler+0xd6>
 800991e:	2301      	movs	r3, #1
 8009920:	e000      	b.n	8009924 <HAL_DMA_IRQHandler+0xd8>
 8009922:	2300      	movs	r3, #0
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 842b 	beq.w	800a180 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800992e:	f003 031f 	and.w	r3, r3, #31
 8009932:	2208      	movs	r2, #8
 8009934:	409a      	lsls	r2, r3
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	4013      	ands	r3, r2
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 80a2 	beq.w	8009a84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a2e      	ldr	r2, [pc, #184]	; (8009a00 <HAL_DMA_IRQHandler+0x1b4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d04a      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a2d      	ldr	r2, [pc, #180]	; (8009a04 <HAL_DMA_IRQHandler+0x1b8>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d045      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a2b      	ldr	r2, [pc, #172]	; (8009a08 <HAL_DMA_IRQHandler+0x1bc>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d040      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a2a      	ldr	r2, [pc, #168]	; (8009a0c <HAL_DMA_IRQHandler+0x1c0>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d03b      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a28      	ldr	r2, [pc, #160]	; (8009a10 <HAL_DMA_IRQHandler+0x1c4>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d036      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a27      	ldr	r2, [pc, #156]	; (8009a14 <HAL_DMA_IRQHandler+0x1c8>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d031      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a25      	ldr	r2, [pc, #148]	; (8009a18 <HAL_DMA_IRQHandler+0x1cc>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d02c      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a24      	ldr	r2, [pc, #144]	; (8009a1c <HAL_DMA_IRQHandler+0x1d0>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d027      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a22      	ldr	r2, [pc, #136]	; (8009a20 <HAL_DMA_IRQHandler+0x1d4>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d022      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a21      	ldr	r2, [pc, #132]	; (8009a24 <HAL_DMA_IRQHandler+0x1d8>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d01d      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a1f      	ldr	r2, [pc, #124]	; (8009a28 <HAL_DMA_IRQHandler+0x1dc>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d018      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a1e      	ldr	r2, [pc, #120]	; (8009a2c <HAL_DMA_IRQHandler+0x1e0>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d013      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a1c      	ldr	r2, [pc, #112]	; (8009a30 <HAL_DMA_IRQHandler+0x1e4>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d00e      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a1b      	ldr	r2, [pc, #108]	; (8009a34 <HAL_DMA_IRQHandler+0x1e8>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d009      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a19      	ldr	r2, [pc, #100]	; (8009a38 <HAL_DMA_IRQHandler+0x1ec>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d004      	beq.n	80099e0 <HAL_DMA_IRQHandler+0x194>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a18      	ldr	r2, [pc, #96]	; (8009a3c <HAL_DMA_IRQHandler+0x1f0>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d12f      	bne.n	8009a40 <HAL_DMA_IRQHandler+0x1f4>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0304 	and.w	r3, r3, #4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bf14      	ite	ne
 80099ee:	2301      	movne	r3, #1
 80099f0:	2300      	moveq	r3, #0
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	e02e      	b.n	8009a54 <HAL_DMA_IRQHandler+0x208>
 80099f6:	bf00      	nop
 80099f8:	240000c0 	.word	0x240000c0
 80099fc:	1b4e81b5 	.word	0x1b4e81b5
 8009a00:	40020010 	.word	0x40020010
 8009a04:	40020028 	.word	0x40020028
 8009a08:	40020040 	.word	0x40020040
 8009a0c:	40020058 	.word	0x40020058
 8009a10:	40020070 	.word	0x40020070
 8009a14:	40020088 	.word	0x40020088
 8009a18:	400200a0 	.word	0x400200a0
 8009a1c:	400200b8 	.word	0x400200b8
 8009a20:	40020410 	.word	0x40020410
 8009a24:	40020428 	.word	0x40020428
 8009a28:	40020440 	.word	0x40020440
 8009a2c:	40020458 	.word	0x40020458
 8009a30:	40020470 	.word	0x40020470
 8009a34:	40020488 	.word	0x40020488
 8009a38:	400204a0 	.word	0x400204a0
 8009a3c:	400204b8 	.word	0x400204b8
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bf14      	ite	ne
 8009a4e:	2301      	movne	r3, #1
 8009a50:	2300      	moveq	r3, #0
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d015      	beq.n	8009a84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 0204 	bic.w	r2, r2, #4
 8009a66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6c:	f003 031f 	and.w	r3, r3, #31
 8009a70:	2208      	movs	r2, #8
 8009a72:	409a      	lsls	r2, r3
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a7c:	f043 0201 	orr.w	r2, r3, #1
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a88:	f003 031f 	and.w	r3, r3, #31
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d06e      	beq.n	8009b78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a69      	ldr	r2, [pc, #420]	; (8009c44 <HAL_DMA_IRQHandler+0x3f8>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d04a      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a67      	ldr	r2, [pc, #412]	; (8009c48 <HAL_DMA_IRQHandler+0x3fc>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d045      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a66      	ldr	r2, [pc, #408]	; (8009c4c <HAL_DMA_IRQHandler+0x400>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d040      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a64      	ldr	r2, [pc, #400]	; (8009c50 <HAL_DMA_IRQHandler+0x404>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d03b      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a63      	ldr	r2, [pc, #396]	; (8009c54 <HAL_DMA_IRQHandler+0x408>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d036      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a61      	ldr	r2, [pc, #388]	; (8009c58 <HAL_DMA_IRQHandler+0x40c>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d031      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a60      	ldr	r2, [pc, #384]	; (8009c5c <HAL_DMA_IRQHandler+0x410>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d02c      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a5e      	ldr	r2, [pc, #376]	; (8009c60 <HAL_DMA_IRQHandler+0x414>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d027      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a5d      	ldr	r2, [pc, #372]	; (8009c64 <HAL_DMA_IRQHandler+0x418>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d022      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a5b      	ldr	r2, [pc, #364]	; (8009c68 <HAL_DMA_IRQHandler+0x41c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d01d      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a5a      	ldr	r2, [pc, #360]	; (8009c6c <HAL_DMA_IRQHandler+0x420>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d018      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a58      	ldr	r2, [pc, #352]	; (8009c70 <HAL_DMA_IRQHandler+0x424>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d013      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a57      	ldr	r2, [pc, #348]	; (8009c74 <HAL_DMA_IRQHandler+0x428>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d00e      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a55      	ldr	r2, [pc, #340]	; (8009c78 <HAL_DMA_IRQHandler+0x42c>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d009      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a54      	ldr	r2, [pc, #336]	; (8009c7c <HAL_DMA_IRQHandler+0x430>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d004      	beq.n	8009b3a <HAL_DMA_IRQHandler+0x2ee>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a52      	ldr	r2, [pc, #328]	; (8009c80 <HAL_DMA_IRQHandler+0x434>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d10a      	bne.n	8009b50 <HAL_DMA_IRQHandler+0x304>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	bf14      	ite	ne
 8009b48:	2301      	movne	r3, #1
 8009b4a:	2300      	moveq	r3, #0
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	e003      	b.n	8009b58 <HAL_DMA_IRQHandler+0x30c>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2300      	movs	r3, #0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00d      	beq.n	8009b78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b60:	f003 031f 	and.w	r3, r3, #31
 8009b64:	2201      	movs	r2, #1
 8009b66:	409a      	lsls	r2, r3
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b70:	f043 0202 	orr.w	r2, r3, #2
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b7c:	f003 031f 	and.w	r3, r3, #31
 8009b80:	2204      	movs	r2, #4
 8009b82:	409a      	lsls	r2, r3
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	4013      	ands	r3, r2
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 808f 	beq.w	8009cac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a2c      	ldr	r2, [pc, #176]	; (8009c44 <HAL_DMA_IRQHandler+0x3f8>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d04a      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a2a      	ldr	r2, [pc, #168]	; (8009c48 <HAL_DMA_IRQHandler+0x3fc>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d045      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a29      	ldr	r2, [pc, #164]	; (8009c4c <HAL_DMA_IRQHandler+0x400>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d040      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a27      	ldr	r2, [pc, #156]	; (8009c50 <HAL_DMA_IRQHandler+0x404>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d03b      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a26      	ldr	r2, [pc, #152]	; (8009c54 <HAL_DMA_IRQHandler+0x408>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d036      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a24      	ldr	r2, [pc, #144]	; (8009c58 <HAL_DMA_IRQHandler+0x40c>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d031      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a23      	ldr	r2, [pc, #140]	; (8009c5c <HAL_DMA_IRQHandler+0x410>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d02c      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a21      	ldr	r2, [pc, #132]	; (8009c60 <HAL_DMA_IRQHandler+0x414>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d027      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a20      	ldr	r2, [pc, #128]	; (8009c64 <HAL_DMA_IRQHandler+0x418>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d022      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a1e      	ldr	r2, [pc, #120]	; (8009c68 <HAL_DMA_IRQHandler+0x41c>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d01d      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a1d      	ldr	r2, [pc, #116]	; (8009c6c <HAL_DMA_IRQHandler+0x420>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d018      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a1b      	ldr	r2, [pc, #108]	; (8009c70 <HAL_DMA_IRQHandler+0x424>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d013      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a1a      	ldr	r2, [pc, #104]	; (8009c74 <HAL_DMA_IRQHandler+0x428>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00e      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a18      	ldr	r2, [pc, #96]	; (8009c78 <HAL_DMA_IRQHandler+0x42c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d009      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a17      	ldr	r2, [pc, #92]	; (8009c7c <HAL_DMA_IRQHandler+0x430>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d004      	beq.n	8009c2e <HAL_DMA_IRQHandler+0x3e2>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a15      	ldr	r2, [pc, #84]	; (8009c80 <HAL_DMA_IRQHandler+0x434>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d12a      	bne.n	8009c84 <HAL_DMA_IRQHandler+0x438>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bf14      	ite	ne
 8009c3c:	2301      	movne	r3, #1
 8009c3e:	2300      	moveq	r3, #0
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	e023      	b.n	8009c8c <HAL_DMA_IRQHandler+0x440>
 8009c44:	40020010 	.word	0x40020010
 8009c48:	40020028 	.word	0x40020028
 8009c4c:	40020040 	.word	0x40020040
 8009c50:	40020058 	.word	0x40020058
 8009c54:	40020070 	.word	0x40020070
 8009c58:	40020088 	.word	0x40020088
 8009c5c:	400200a0 	.word	0x400200a0
 8009c60:	400200b8 	.word	0x400200b8
 8009c64:	40020410 	.word	0x40020410
 8009c68:	40020428 	.word	0x40020428
 8009c6c:	40020440 	.word	0x40020440
 8009c70:	40020458 	.word	0x40020458
 8009c74:	40020470 	.word	0x40020470
 8009c78:	40020488 	.word	0x40020488
 8009c7c:	400204a0 	.word	0x400204a0
 8009c80:	400204b8 	.word	0x400204b8
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00d      	beq.n	8009cac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c94:	f003 031f 	and.w	r3, r3, #31
 8009c98:	2204      	movs	r2, #4
 8009c9a:	409a      	lsls	r2, r3
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca4:	f043 0204 	orr.w	r2, r3, #4
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb0:	f003 031f 	and.w	r3, r3, #31
 8009cb4:	2210      	movs	r2, #16
 8009cb6:	409a      	lsls	r2, r3
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	4013      	ands	r3, r2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 80a6 	beq.w	8009e0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a85      	ldr	r2, [pc, #532]	; (8009edc <HAL_DMA_IRQHandler+0x690>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d04a      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a83      	ldr	r2, [pc, #524]	; (8009ee0 <HAL_DMA_IRQHandler+0x694>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d045      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a82      	ldr	r2, [pc, #520]	; (8009ee4 <HAL_DMA_IRQHandler+0x698>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d040      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a80      	ldr	r2, [pc, #512]	; (8009ee8 <HAL_DMA_IRQHandler+0x69c>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d03b      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a7f      	ldr	r2, [pc, #508]	; (8009eec <HAL_DMA_IRQHandler+0x6a0>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d036      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a7d      	ldr	r2, [pc, #500]	; (8009ef0 <HAL_DMA_IRQHandler+0x6a4>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d031      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a7c      	ldr	r2, [pc, #496]	; (8009ef4 <HAL_DMA_IRQHandler+0x6a8>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d02c      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a7a      	ldr	r2, [pc, #488]	; (8009ef8 <HAL_DMA_IRQHandler+0x6ac>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d027      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a79      	ldr	r2, [pc, #484]	; (8009efc <HAL_DMA_IRQHandler+0x6b0>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d022      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a77      	ldr	r2, [pc, #476]	; (8009f00 <HAL_DMA_IRQHandler+0x6b4>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d01d      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a76      	ldr	r2, [pc, #472]	; (8009f04 <HAL_DMA_IRQHandler+0x6b8>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d018      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a74      	ldr	r2, [pc, #464]	; (8009f08 <HAL_DMA_IRQHandler+0x6bc>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d013      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a73      	ldr	r2, [pc, #460]	; (8009f0c <HAL_DMA_IRQHandler+0x6c0>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d00e      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a71      	ldr	r2, [pc, #452]	; (8009f10 <HAL_DMA_IRQHandler+0x6c4>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d009      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a70      	ldr	r2, [pc, #448]	; (8009f14 <HAL_DMA_IRQHandler+0x6c8>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d004      	beq.n	8009d62 <HAL_DMA_IRQHandler+0x516>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a6e      	ldr	r2, [pc, #440]	; (8009f18 <HAL_DMA_IRQHandler+0x6cc>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d10a      	bne.n	8009d78 <HAL_DMA_IRQHandler+0x52c>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0308 	and.w	r3, r3, #8
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	e009      	b.n	8009d8c <HAL_DMA_IRQHandler+0x540>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0304 	and.w	r3, r3, #4
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bf14      	ite	ne
 8009d86:	2301      	movne	r3, #1
 8009d88:	2300      	moveq	r3, #0
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d03e      	beq.n	8009e0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d94:	f003 031f 	and.w	r3, r3, #31
 8009d98:	2210      	movs	r2, #16
 8009d9a:	409a      	lsls	r2, r3
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d018      	beq.n	8009de0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d108      	bne.n	8009dce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d024      	beq.n	8009e0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	4798      	blx	r3
 8009dcc:	e01f      	b.n	8009e0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d01b      	beq.n	8009e0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	4798      	blx	r3
 8009dde:	e016      	b.n	8009e0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d107      	bne.n	8009dfe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0208 	bic.w	r2, r2, #8
 8009dfc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e12:	f003 031f 	and.w	r3, r3, #31
 8009e16:	2220      	movs	r2, #32
 8009e18:	409a      	lsls	r2, r3
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 8110 	beq.w	800a044 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a2c      	ldr	r2, [pc, #176]	; (8009edc <HAL_DMA_IRQHandler+0x690>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d04a      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a2b      	ldr	r2, [pc, #172]	; (8009ee0 <HAL_DMA_IRQHandler+0x694>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d045      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a29      	ldr	r2, [pc, #164]	; (8009ee4 <HAL_DMA_IRQHandler+0x698>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d040      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a28      	ldr	r2, [pc, #160]	; (8009ee8 <HAL_DMA_IRQHandler+0x69c>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d03b      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a26      	ldr	r2, [pc, #152]	; (8009eec <HAL_DMA_IRQHandler+0x6a0>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d036      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a25      	ldr	r2, [pc, #148]	; (8009ef0 <HAL_DMA_IRQHandler+0x6a4>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d031      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a23      	ldr	r2, [pc, #140]	; (8009ef4 <HAL_DMA_IRQHandler+0x6a8>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d02c      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a22      	ldr	r2, [pc, #136]	; (8009ef8 <HAL_DMA_IRQHandler+0x6ac>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d027      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a20      	ldr	r2, [pc, #128]	; (8009efc <HAL_DMA_IRQHandler+0x6b0>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d022      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a1f      	ldr	r2, [pc, #124]	; (8009f00 <HAL_DMA_IRQHandler+0x6b4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d01d      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a1d      	ldr	r2, [pc, #116]	; (8009f04 <HAL_DMA_IRQHandler+0x6b8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d018      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a1c      	ldr	r2, [pc, #112]	; (8009f08 <HAL_DMA_IRQHandler+0x6bc>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d013      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1a      	ldr	r2, [pc, #104]	; (8009f0c <HAL_DMA_IRQHandler+0x6c0>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00e      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a19      	ldr	r2, [pc, #100]	; (8009f10 <HAL_DMA_IRQHandler+0x6c4>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d009      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a17      	ldr	r2, [pc, #92]	; (8009f14 <HAL_DMA_IRQHandler+0x6c8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d004      	beq.n	8009ec4 <HAL_DMA_IRQHandler+0x678>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a16      	ldr	r2, [pc, #88]	; (8009f18 <HAL_DMA_IRQHandler+0x6cc>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d12b      	bne.n	8009f1c <HAL_DMA_IRQHandler+0x6d0>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0310 	and.w	r3, r3, #16
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	bf14      	ite	ne
 8009ed2:	2301      	movne	r3, #1
 8009ed4:	2300      	moveq	r3, #0
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	e02a      	b.n	8009f30 <HAL_DMA_IRQHandler+0x6e4>
 8009eda:	bf00      	nop
 8009edc:	40020010 	.word	0x40020010
 8009ee0:	40020028 	.word	0x40020028
 8009ee4:	40020040 	.word	0x40020040
 8009ee8:	40020058 	.word	0x40020058
 8009eec:	40020070 	.word	0x40020070
 8009ef0:	40020088 	.word	0x40020088
 8009ef4:	400200a0 	.word	0x400200a0
 8009ef8:	400200b8 	.word	0x400200b8
 8009efc:	40020410 	.word	0x40020410
 8009f00:	40020428 	.word	0x40020428
 8009f04:	40020440 	.word	0x40020440
 8009f08:	40020458 	.word	0x40020458
 8009f0c:	40020470 	.word	0x40020470
 8009f10:	40020488 	.word	0x40020488
 8009f14:	400204a0 	.word	0x400204a0
 8009f18:	400204b8 	.word	0x400204b8
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0302 	and.w	r3, r3, #2
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bf14      	ite	ne
 8009f2a:	2301      	movne	r3, #1
 8009f2c:	2300      	moveq	r3, #0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 8087 	beq.w	800a044 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f3a:	f003 031f 	and.w	r3, r3, #31
 8009f3e:	2220      	movs	r2, #32
 8009f40:	409a      	lsls	r2, r3
 8009f42:	6a3b      	ldr	r3, [r7, #32]
 8009f44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	d139      	bne.n	8009fc6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 0216 	bic.w	r2, r2, #22
 8009f60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	695a      	ldr	r2, [r3, #20]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d103      	bne.n	8009f82 <HAL_DMA_IRQHandler+0x736>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d007      	beq.n	8009f92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 0208 	bic.w	r2, r2, #8
 8009f90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f96:	f003 031f 	and.w	r3, r3, #31
 8009f9a:	223f      	movs	r2, #63	; 0x3f
 8009f9c:	409a      	lsls	r2, r3
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 834a 	beq.w	800a650 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	4798      	blx	r3
          }
          return;
 8009fc4:	e344      	b.n	800a650 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d018      	beq.n	800a006 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d108      	bne.n	8009ff4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d02c      	beq.n	800a044 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	4798      	blx	r3
 8009ff2:	e027      	b.n	800a044 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d023      	beq.n	800a044 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
 800a004:	e01e      	b.n	800a044 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10f      	bne.n	800a034 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f022 0210 	bic.w	r2, r2, #16
 800a022:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 8306 	beq.w	800a65a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	f000 8088 	beq.w	800a16c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2204      	movs	r2, #4
 800a060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a7a      	ldr	r2, [pc, #488]	; (800a254 <HAL_DMA_IRQHandler+0xa08>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d04a      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a79      	ldr	r2, [pc, #484]	; (800a258 <HAL_DMA_IRQHandler+0xa0c>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d045      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a77      	ldr	r2, [pc, #476]	; (800a25c <HAL_DMA_IRQHandler+0xa10>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d040      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a76      	ldr	r2, [pc, #472]	; (800a260 <HAL_DMA_IRQHandler+0xa14>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d03b      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a74      	ldr	r2, [pc, #464]	; (800a264 <HAL_DMA_IRQHandler+0xa18>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d036      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a73      	ldr	r2, [pc, #460]	; (800a268 <HAL_DMA_IRQHandler+0xa1c>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d031      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a71      	ldr	r2, [pc, #452]	; (800a26c <HAL_DMA_IRQHandler+0xa20>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d02c      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a70      	ldr	r2, [pc, #448]	; (800a270 <HAL_DMA_IRQHandler+0xa24>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d027      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a6e      	ldr	r2, [pc, #440]	; (800a274 <HAL_DMA_IRQHandler+0xa28>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d022      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a6d      	ldr	r2, [pc, #436]	; (800a278 <HAL_DMA_IRQHandler+0xa2c>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d01d      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a6b      	ldr	r2, [pc, #428]	; (800a27c <HAL_DMA_IRQHandler+0xa30>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d018      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a6a      	ldr	r2, [pc, #424]	; (800a280 <HAL_DMA_IRQHandler+0xa34>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d013      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a68      	ldr	r2, [pc, #416]	; (800a284 <HAL_DMA_IRQHandler+0xa38>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d00e      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a67      	ldr	r2, [pc, #412]	; (800a288 <HAL_DMA_IRQHandler+0xa3c>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d009      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a65      	ldr	r2, [pc, #404]	; (800a28c <HAL_DMA_IRQHandler+0xa40>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d004      	beq.n	800a104 <HAL_DMA_IRQHandler+0x8b8>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a64      	ldr	r2, [pc, #400]	; (800a290 <HAL_DMA_IRQHandler+0xa44>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d108      	bne.n	800a116 <HAL_DMA_IRQHandler+0x8ca>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f022 0201 	bic.w	r2, r2, #1
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	e007      	b.n	800a126 <HAL_DMA_IRQHandler+0x8da>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0201 	bic.w	r2, r2, #1
 800a124:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3301      	adds	r3, #1
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12e:	429a      	cmp	r2, r3
 800a130:	d307      	bcc.n	800a142 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0301 	and.w	r3, r3, #1
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1f2      	bne.n	800a126 <HAL_DMA_IRQHandler+0x8da>
 800a140:	e000      	b.n	800a144 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a142:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d004      	beq.n	800a15c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2203      	movs	r2, #3
 800a156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800a15a:	e003      	b.n	800a164 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 8272 	beq.w	800a65a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	4798      	blx	r3
 800a17e:	e26c      	b.n	800a65a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a43      	ldr	r2, [pc, #268]	; (800a294 <HAL_DMA_IRQHandler+0xa48>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d022      	beq.n	800a1d0 <HAL_DMA_IRQHandler+0x984>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a42      	ldr	r2, [pc, #264]	; (800a298 <HAL_DMA_IRQHandler+0xa4c>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d01d      	beq.n	800a1d0 <HAL_DMA_IRQHandler+0x984>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a40      	ldr	r2, [pc, #256]	; (800a29c <HAL_DMA_IRQHandler+0xa50>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d018      	beq.n	800a1d0 <HAL_DMA_IRQHandler+0x984>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a3f      	ldr	r2, [pc, #252]	; (800a2a0 <HAL_DMA_IRQHandler+0xa54>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d013      	beq.n	800a1d0 <HAL_DMA_IRQHandler+0x984>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a3d      	ldr	r2, [pc, #244]	; (800a2a4 <HAL_DMA_IRQHandler+0xa58>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d00e      	beq.n	800a1d0 <HAL_DMA_IRQHandler+0x984>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a3c      	ldr	r2, [pc, #240]	; (800a2a8 <HAL_DMA_IRQHandler+0xa5c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d009      	beq.n	800a1d0 <HAL_DMA_IRQHandler+0x984>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a3a      	ldr	r2, [pc, #232]	; (800a2ac <HAL_DMA_IRQHandler+0xa60>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d004      	beq.n	800a1d0 <HAL_DMA_IRQHandler+0x984>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a39      	ldr	r2, [pc, #228]	; (800a2b0 <HAL_DMA_IRQHandler+0xa64>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d101      	bne.n	800a1d4 <HAL_DMA_IRQHandler+0x988>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e000      	b.n	800a1d6 <HAL_DMA_IRQHandler+0x98a>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 823f 	beq.w	800a65a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e8:	f003 031f 	and.w	r3, r3, #31
 800a1ec:	2204      	movs	r2, #4
 800a1ee:	409a      	lsls	r2, r3
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 80cd 	beq.w	800a394 <HAL_DMA_IRQHandler+0xb48>
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	f003 0304 	and.w	r3, r3, #4
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 80c7 	beq.w	800a394 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a20a:	f003 031f 	and.w	r3, r3, #31
 800a20e:	2204      	movs	r2, #4
 800a210:	409a      	lsls	r2, r3
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d049      	beq.n	800a2b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a226:	2b00      	cmp	r3, #0
 800a228:	d109      	bne.n	800a23e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f000 8210 	beq.w	800a654 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a23c:	e20a      	b.n	800a654 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 8206 	beq.w	800a654 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a250:	e200      	b.n	800a654 <HAL_DMA_IRQHandler+0xe08>
 800a252:	bf00      	nop
 800a254:	40020010 	.word	0x40020010
 800a258:	40020028 	.word	0x40020028
 800a25c:	40020040 	.word	0x40020040
 800a260:	40020058 	.word	0x40020058
 800a264:	40020070 	.word	0x40020070
 800a268:	40020088 	.word	0x40020088
 800a26c:	400200a0 	.word	0x400200a0
 800a270:	400200b8 	.word	0x400200b8
 800a274:	40020410 	.word	0x40020410
 800a278:	40020428 	.word	0x40020428
 800a27c:	40020440 	.word	0x40020440
 800a280:	40020458 	.word	0x40020458
 800a284:	40020470 	.word	0x40020470
 800a288:	40020488 	.word	0x40020488
 800a28c:	400204a0 	.word	0x400204a0
 800a290:	400204b8 	.word	0x400204b8
 800a294:	58025408 	.word	0x58025408
 800a298:	5802541c 	.word	0x5802541c
 800a29c:	58025430 	.word	0x58025430
 800a2a0:	58025444 	.word	0x58025444
 800a2a4:	58025458 	.word	0x58025458
 800a2a8:	5802546c 	.word	0x5802546c
 800a2ac:	58025480 	.word	0x58025480
 800a2b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	f003 0320 	and.w	r3, r3, #32
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d160      	bne.n	800a380 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a7f      	ldr	r2, [pc, #508]	; (800a4c0 <HAL_DMA_IRQHandler+0xc74>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d04a      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a7d      	ldr	r2, [pc, #500]	; (800a4c4 <HAL_DMA_IRQHandler+0xc78>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d045      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a7c      	ldr	r2, [pc, #496]	; (800a4c8 <HAL_DMA_IRQHandler+0xc7c>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d040      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a7a      	ldr	r2, [pc, #488]	; (800a4cc <HAL_DMA_IRQHandler+0xc80>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d03b      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a79      	ldr	r2, [pc, #484]	; (800a4d0 <HAL_DMA_IRQHandler+0xc84>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d036      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a77      	ldr	r2, [pc, #476]	; (800a4d4 <HAL_DMA_IRQHandler+0xc88>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d031      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a76      	ldr	r2, [pc, #472]	; (800a4d8 <HAL_DMA_IRQHandler+0xc8c>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d02c      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a74      	ldr	r2, [pc, #464]	; (800a4dc <HAL_DMA_IRQHandler+0xc90>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d027      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a73      	ldr	r2, [pc, #460]	; (800a4e0 <HAL_DMA_IRQHandler+0xc94>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d022      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a71      	ldr	r2, [pc, #452]	; (800a4e4 <HAL_DMA_IRQHandler+0xc98>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d01d      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a70      	ldr	r2, [pc, #448]	; (800a4e8 <HAL_DMA_IRQHandler+0xc9c>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d018      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a6e      	ldr	r2, [pc, #440]	; (800a4ec <HAL_DMA_IRQHandler+0xca0>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d013      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a6d      	ldr	r2, [pc, #436]	; (800a4f0 <HAL_DMA_IRQHandler+0xca4>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d00e      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a6b      	ldr	r2, [pc, #428]	; (800a4f4 <HAL_DMA_IRQHandler+0xca8>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d009      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a6a      	ldr	r2, [pc, #424]	; (800a4f8 <HAL_DMA_IRQHandler+0xcac>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d004      	beq.n	800a35e <HAL_DMA_IRQHandler+0xb12>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a68      	ldr	r2, [pc, #416]	; (800a4fc <HAL_DMA_IRQHandler+0xcb0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d108      	bne.n	800a370 <HAL_DMA_IRQHandler+0xb24>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f022 0208 	bic.w	r2, r2, #8
 800a36c:	601a      	str	r2, [r3, #0]
 800a36e:	e007      	b.n	800a380 <HAL_DMA_IRQHandler+0xb34>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0204 	bic.w	r2, r2, #4
 800a37e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8165 	beq.w	800a654 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a392:	e15f      	b.n	800a654 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a398:	f003 031f 	and.w	r3, r3, #31
 800a39c:	2202      	movs	r2, #2
 800a39e:	409a      	lsls	r2, r3
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 80c5 	beq.w	800a534 <HAL_DMA_IRQHandler+0xce8>
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	f003 0302 	and.w	r3, r3, #2
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 80bf 	beq.w	800a534 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ba:	f003 031f 	and.w	r3, r3, #31
 800a3be:	2202      	movs	r2, #2
 800a3c0:	409a      	lsls	r2, r3
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d018      	beq.n	800a402 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d109      	bne.n	800a3ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f000 813a 	beq.w	800a658 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a3ec:	e134      	b.n	800a658 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f000 8130 	beq.w	800a658 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a400:	e12a      	b.n	800a658 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	f003 0320 	and.w	r3, r3, #32
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f040 8089 	bne.w	800a520 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a2b      	ldr	r2, [pc, #172]	; (800a4c0 <HAL_DMA_IRQHandler+0xc74>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d04a      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a29      	ldr	r2, [pc, #164]	; (800a4c4 <HAL_DMA_IRQHandler+0xc78>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d045      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a28      	ldr	r2, [pc, #160]	; (800a4c8 <HAL_DMA_IRQHandler+0xc7c>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d040      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a26      	ldr	r2, [pc, #152]	; (800a4cc <HAL_DMA_IRQHandler+0xc80>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d03b      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a25      	ldr	r2, [pc, #148]	; (800a4d0 <HAL_DMA_IRQHandler+0xc84>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d036      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a23      	ldr	r2, [pc, #140]	; (800a4d4 <HAL_DMA_IRQHandler+0xc88>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d031      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a22      	ldr	r2, [pc, #136]	; (800a4d8 <HAL_DMA_IRQHandler+0xc8c>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d02c      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a20      	ldr	r2, [pc, #128]	; (800a4dc <HAL_DMA_IRQHandler+0xc90>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d027      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a1f      	ldr	r2, [pc, #124]	; (800a4e0 <HAL_DMA_IRQHandler+0xc94>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d022      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a1d      	ldr	r2, [pc, #116]	; (800a4e4 <HAL_DMA_IRQHandler+0xc98>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d01d      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a1c      	ldr	r2, [pc, #112]	; (800a4e8 <HAL_DMA_IRQHandler+0xc9c>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d018      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a1a      	ldr	r2, [pc, #104]	; (800a4ec <HAL_DMA_IRQHandler+0xca0>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d013      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a19      	ldr	r2, [pc, #100]	; (800a4f0 <HAL_DMA_IRQHandler+0xca4>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d00e      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a17      	ldr	r2, [pc, #92]	; (800a4f4 <HAL_DMA_IRQHandler+0xca8>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d009      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a16      	ldr	r2, [pc, #88]	; (800a4f8 <HAL_DMA_IRQHandler+0xcac>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d004      	beq.n	800a4ae <HAL_DMA_IRQHandler+0xc62>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a14      	ldr	r2, [pc, #80]	; (800a4fc <HAL_DMA_IRQHandler+0xcb0>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d128      	bne.n	800a500 <HAL_DMA_IRQHandler+0xcb4>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0214 	bic.w	r2, r2, #20
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	e027      	b.n	800a510 <HAL_DMA_IRQHandler+0xcc4>
 800a4c0:	40020010 	.word	0x40020010
 800a4c4:	40020028 	.word	0x40020028
 800a4c8:	40020040 	.word	0x40020040
 800a4cc:	40020058 	.word	0x40020058
 800a4d0:	40020070 	.word	0x40020070
 800a4d4:	40020088 	.word	0x40020088
 800a4d8:	400200a0 	.word	0x400200a0
 800a4dc:	400200b8 	.word	0x400200b8
 800a4e0:	40020410 	.word	0x40020410
 800a4e4:	40020428 	.word	0x40020428
 800a4e8:	40020440 	.word	0x40020440
 800a4ec:	40020458 	.word	0x40020458
 800a4f0:	40020470 	.word	0x40020470
 800a4f4:	40020488 	.word	0x40020488
 800a4f8:	400204a0 	.word	0x400204a0
 800a4fc:	400204b8 	.word	0x400204b8
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 020a 	bic.w	r2, r2, #10
 800a50e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a524:	2b00      	cmp	r3, #0
 800a526:	f000 8097 	beq.w	800a658 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a532:	e091      	b.n	800a658 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a538:	f003 031f 	and.w	r3, r3, #31
 800a53c:	2208      	movs	r2, #8
 800a53e:	409a      	lsls	r2, r3
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	4013      	ands	r3, r2
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 8088 	beq.w	800a65a <HAL_DMA_IRQHandler+0xe0e>
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	f003 0308 	and.w	r3, r3, #8
 800a550:	2b00      	cmp	r3, #0
 800a552:	f000 8082 	beq.w	800a65a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a41      	ldr	r2, [pc, #260]	; (800a660 <HAL_DMA_IRQHandler+0xe14>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d04a      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a3f      	ldr	r2, [pc, #252]	; (800a664 <HAL_DMA_IRQHandler+0xe18>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d045      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a3e      	ldr	r2, [pc, #248]	; (800a668 <HAL_DMA_IRQHandler+0xe1c>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d040      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a3c      	ldr	r2, [pc, #240]	; (800a66c <HAL_DMA_IRQHandler+0xe20>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d03b      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a3b      	ldr	r2, [pc, #236]	; (800a670 <HAL_DMA_IRQHandler+0xe24>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d036      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a39      	ldr	r2, [pc, #228]	; (800a674 <HAL_DMA_IRQHandler+0xe28>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d031      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a38      	ldr	r2, [pc, #224]	; (800a678 <HAL_DMA_IRQHandler+0xe2c>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d02c      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a36      	ldr	r2, [pc, #216]	; (800a67c <HAL_DMA_IRQHandler+0xe30>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d027      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a35      	ldr	r2, [pc, #212]	; (800a680 <HAL_DMA_IRQHandler+0xe34>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d022      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a33      	ldr	r2, [pc, #204]	; (800a684 <HAL_DMA_IRQHandler+0xe38>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d01d      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a32      	ldr	r2, [pc, #200]	; (800a688 <HAL_DMA_IRQHandler+0xe3c>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d018      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a30      	ldr	r2, [pc, #192]	; (800a68c <HAL_DMA_IRQHandler+0xe40>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d013      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a2f      	ldr	r2, [pc, #188]	; (800a690 <HAL_DMA_IRQHandler+0xe44>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d00e      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a2d      	ldr	r2, [pc, #180]	; (800a694 <HAL_DMA_IRQHandler+0xe48>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d009      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a2c      	ldr	r2, [pc, #176]	; (800a698 <HAL_DMA_IRQHandler+0xe4c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d004      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0xdaa>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a2a      	ldr	r2, [pc, #168]	; (800a69c <HAL_DMA_IRQHandler+0xe50>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d108      	bne.n	800a608 <HAL_DMA_IRQHandler+0xdbc>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f022 021c 	bic.w	r2, r2, #28
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	e007      	b.n	800a618 <HAL_DMA_IRQHandler+0xdcc>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 020e 	bic.w	r2, r2, #14
 800a616:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a61c:	f003 031f 	and.w	r3, r3, #31
 800a620:	2201      	movs	r2, #1
 800a622:	409a      	lsls	r2, r3
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a642:	2b00      	cmp	r3, #0
 800a644:	d009      	beq.n	800a65a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	4798      	blx	r3
 800a64e:	e004      	b.n	800a65a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a650:	bf00      	nop
 800a652:	e002      	b.n	800a65a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a654:	bf00      	nop
 800a656:	e000      	b.n	800a65a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a658:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a65a:	3728      	adds	r7, #40	; 0x28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	40020010 	.word	0x40020010
 800a664:	40020028 	.word	0x40020028
 800a668:	40020040 	.word	0x40020040
 800a66c:	40020058 	.word	0x40020058
 800a670:	40020070 	.word	0x40020070
 800a674:	40020088 	.word	0x40020088
 800a678:	400200a0 	.word	0x400200a0
 800a67c:	400200b8 	.word	0x400200b8
 800a680:	40020410 	.word	0x40020410
 800a684:	40020428 	.word	0x40020428
 800a688:	40020440 	.word	0x40020440
 800a68c:	40020458 	.word	0x40020458
 800a690:	40020470 	.word	0x40020470
 800a694:	40020488 	.word	0x40020488
 800a698:	400204a0 	.word	0x400204a0
 800a69c:	400204b8 	.word	0x400204b8

0800a6a0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a6ae:	b2db      	uxtb	r3, r3
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b087      	sub	sp, #28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a7f      	ldr	r2, [pc, #508]	; (800a8f0 <DMA_SetConfig+0x21c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d072      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a7d      	ldr	r2, [pc, #500]	; (800a8f4 <DMA_SetConfig+0x220>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d06d      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a7c      	ldr	r2, [pc, #496]	; (800a8f8 <DMA_SetConfig+0x224>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d068      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a7a      	ldr	r2, [pc, #488]	; (800a8fc <DMA_SetConfig+0x228>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d063      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a79      	ldr	r2, [pc, #484]	; (800a900 <DMA_SetConfig+0x22c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d05e      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a77      	ldr	r2, [pc, #476]	; (800a904 <DMA_SetConfig+0x230>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d059      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a76      	ldr	r2, [pc, #472]	; (800a908 <DMA_SetConfig+0x234>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d054      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a74      	ldr	r2, [pc, #464]	; (800a90c <DMA_SetConfig+0x238>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d04f      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a73      	ldr	r2, [pc, #460]	; (800a910 <DMA_SetConfig+0x23c>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d04a      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a71      	ldr	r2, [pc, #452]	; (800a914 <DMA_SetConfig+0x240>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d045      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a70      	ldr	r2, [pc, #448]	; (800a918 <DMA_SetConfig+0x244>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d040      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a6e      	ldr	r2, [pc, #440]	; (800a91c <DMA_SetConfig+0x248>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d03b      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a6d      	ldr	r2, [pc, #436]	; (800a920 <DMA_SetConfig+0x24c>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d036      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a6b      	ldr	r2, [pc, #428]	; (800a924 <DMA_SetConfig+0x250>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d031      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a6a      	ldr	r2, [pc, #424]	; (800a928 <DMA_SetConfig+0x254>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d02c      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a68      	ldr	r2, [pc, #416]	; (800a92c <DMA_SetConfig+0x258>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d027      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a67      	ldr	r2, [pc, #412]	; (800a930 <DMA_SetConfig+0x25c>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d022      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a65      	ldr	r2, [pc, #404]	; (800a934 <DMA_SetConfig+0x260>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d01d      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a64      	ldr	r2, [pc, #400]	; (800a938 <DMA_SetConfig+0x264>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d018      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a62      	ldr	r2, [pc, #392]	; (800a93c <DMA_SetConfig+0x268>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d013      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a61      	ldr	r2, [pc, #388]	; (800a940 <DMA_SetConfig+0x26c>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d00e      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a5f      	ldr	r2, [pc, #380]	; (800a944 <DMA_SetConfig+0x270>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d009      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a5e      	ldr	r2, [pc, #376]	; (800a948 <DMA_SetConfig+0x274>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d004      	beq.n	800a7de <DMA_SetConfig+0x10a>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a5c      	ldr	r2, [pc, #368]	; (800a94c <DMA_SetConfig+0x278>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d101      	bne.n	800a7e2 <DMA_SetConfig+0x10e>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e000      	b.n	800a7e4 <DMA_SetConfig+0x110>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00d      	beq.n	800a804 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a7f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d004      	beq.n	800a804 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a802:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a39      	ldr	r2, [pc, #228]	; (800a8f0 <DMA_SetConfig+0x21c>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d04a      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a38      	ldr	r2, [pc, #224]	; (800a8f4 <DMA_SetConfig+0x220>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d045      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a36      	ldr	r2, [pc, #216]	; (800a8f8 <DMA_SetConfig+0x224>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d040      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a35      	ldr	r2, [pc, #212]	; (800a8fc <DMA_SetConfig+0x228>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d03b      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a33      	ldr	r2, [pc, #204]	; (800a900 <DMA_SetConfig+0x22c>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d036      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a32      	ldr	r2, [pc, #200]	; (800a904 <DMA_SetConfig+0x230>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d031      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a30      	ldr	r2, [pc, #192]	; (800a908 <DMA_SetConfig+0x234>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d02c      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a2f      	ldr	r2, [pc, #188]	; (800a90c <DMA_SetConfig+0x238>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d027      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a2d      	ldr	r2, [pc, #180]	; (800a910 <DMA_SetConfig+0x23c>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d022      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a2c      	ldr	r2, [pc, #176]	; (800a914 <DMA_SetConfig+0x240>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d01d      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a2a      	ldr	r2, [pc, #168]	; (800a918 <DMA_SetConfig+0x244>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d018      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a29      	ldr	r2, [pc, #164]	; (800a91c <DMA_SetConfig+0x248>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d013      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a27      	ldr	r2, [pc, #156]	; (800a920 <DMA_SetConfig+0x24c>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d00e      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a26      	ldr	r2, [pc, #152]	; (800a924 <DMA_SetConfig+0x250>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d009      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a24      	ldr	r2, [pc, #144]	; (800a928 <DMA_SetConfig+0x254>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d004      	beq.n	800a8a4 <DMA_SetConfig+0x1d0>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a23      	ldr	r2, [pc, #140]	; (800a92c <DMA_SetConfig+0x258>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d101      	bne.n	800a8a8 <DMA_SetConfig+0x1d4>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e000      	b.n	800a8aa <DMA_SetConfig+0x1d6>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d059      	beq.n	800a962 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b2:	f003 031f 	and.w	r3, r3, #31
 800a8b6:	223f      	movs	r2, #63	; 0x3f
 800a8b8:	409a      	lsls	r2, r3
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	2b40      	cmp	r3, #64	; 0x40
 800a8dc:	d138      	bne.n	800a950 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a8ee:	e086      	b.n	800a9fe <DMA_SetConfig+0x32a>
 800a8f0:	40020010 	.word	0x40020010
 800a8f4:	40020028 	.word	0x40020028
 800a8f8:	40020040 	.word	0x40020040
 800a8fc:	40020058 	.word	0x40020058
 800a900:	40020070 	.word	0x40020070
 800a904:	40020088 	.word	0x40020088
 800a908:	400200a0 	.word	0x400200a0
 800a90c:	400200b8 	.word	0x400200b8
 800a910:	40020410 	.word	0x40020410
 800a914:	40020428 	.word	0x40020428
 800a918:	40020440 	.word	0x40020440
 800a91c:	40020458 	.word	0x40020458
 800a920:	40020470 	.word	0x40020470
 800a924:	40020488 	.word	0x40020488
 800a928:	400204a0 	.word	0x400204a0
 800a92c:	400204b8 	.word	0x400204b8
 800a930:	58025408 	.word	0x58025408
 800a934:	5802541c 	.word	0x5802541c
 800a938:	58025430 	.word	0x58025430
 800a93c:	58025444 	.word	0x58025444
 800a940:	58025458 	.word	0x58025458
 800a944:	5802546c 	.word	0x5802546c
 800a948:	58025480 	.word	0x58025480
 800a94c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	60da      	str	r2, [r3, #12]
}
 800a960:	e04d      	b.n	800a9fe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a29      	ldr	r2, [pc, #164]	; (800aa0c <DMA_SetConfig+0x338>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d022      	beq.n	800a9b2 <DMA_SetConfig+0x2de>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a27      	ldr	r2, [pc, #156]	; (800aa10 <DMA_SetConfig+0x33c>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d01d      	beq.n	800a9b2 <DMA_SetConfig+0x2de>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a26      	ldr	r2, [pc, #152]	; (800aa14 <DMA_SetConfig+0x340>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d018      	beq.n	800a9b2 <DMA_SetConfig+0x2de>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a24      	ldr	r2, [pc, #144]	; (800aa18 <DMA_SetConfig+0x344>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d013      	beq.n	800a9b2 <DMA_SetConfig+0x2de>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a23      	ldr	r2, [pc, #140]	; (800aa1c <DMA_SetConfig+0x348>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d00e      	beq.n	800a9b2 <DMA_SetConfig+0x2de>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a21      	ldr	r2, [pc, #132]	; (800aa20 <DMA_SetConfig+0x34c>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d009      	beq.n	800a9b2 <DMA_SetConfig+0x2de>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a20      	ldr	r2, [pc, #128]	; (800aa24 <DMA_SetConfig+0x350>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d004      	beq.n	800a9b2 <DMA_SetConfig+0x2de>
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a1e      	ldr	r2, [pc, #120]	; (800aa28 <DMA_SetConfig+0x354>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d101      	bne.n	800a9b6 <DMA_SetConfig+0x2e2>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e000      	b.n	800a9b8 <DMA_SetConfig+0x2e4>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d020      	beq.n	800a9fe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9c0:	f003 031f 	and.w	r3, r3, #31
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	409a      	lsls	r2, r3
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	2b40      	cmp	r3, #64	; 0x40
 800a9da:	d108      	bne.n	800a9ee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	60da      	str	r2, [r3, #12]
}
 800a9ec:	e007      	b.n	800a9fe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	60da      	str	r2, [r3, #12]
}
 800a9fe:	bf00      	nop
 800aa00:	371c      	adds	r7, #28
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	58025408 	.word	0x58025408
 800aa10:	5802541c 	.word	0x5802541c
 800aa14:	58025430 	.word	0x58025430
 800aa18:	58025444 	.word	0x58025444
 800aa1c:	58025458 	.word	0x58025458
 800aa20:	5802546c 	.word	0x5802546c
 800aa24:	58025480 	.word	0x58025480
 800aa28:	58025494 	.word	0x58025494

0800aa2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a42      	ldr	r2, [pc, #264]	; (800ab44 <DMA_CalcBaseAndBitshift+0x118>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d04a      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a41      	ldr	r2, [pc, #260]	; (800ab48 <DMA_CalcBaseAndBitshift+0x11c>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d045      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a3f      	ldr	r2, [pc, #252]	; (800ab4c <DMA_CalcBaseAndBitshift+0x120>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d040      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a3e      	ldr	r2, [pc, #248]	; (800ab50 <DMA_CalcBaseAndBitshift+0x124>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d03b      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a3c      	ldr	r2, [pc, #240]	; (800ab54 <DMA_CalcBaseAndBitshift+0x128>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d036      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a3b      	ldr	r2, [pc, #236]	; (800ab58 <DMA_CalcBaseAndBitshift+0x12c>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d031      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a39      	ldr	r2, [pc, #228]	; (800ab5c <DMA_CalcBaseAndBitshift+0x130>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d02c      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a38      	ldr	r2, [pc, #224]	; (800ab60 <DMA_CalcBaseAndBitshift+0x134>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d027      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a36      	ldr	r2, [pc, #216]	; (800ab64 <DMA_CalcBaseAndBitshift+0x138>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d022      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a35      	ldr	r2, [pc, #212]	; (800ab68 <DMA_CalcBaseAndBitshift+0x13c>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d01d      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a33      	ldr	r2, [pc, #204]	; (800ab6c <DMA_CalcBaseAndBitshift+0x140>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d018      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a32      	ldr	r2, [pc, #200]	; (800ab70 <DMA_CalcBaseAndBitshift+0x144>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d013      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a30      	ldr	r2, [pc, #192]	; (800ab74 <DMA_CalcBaseAndBitshift+0x148>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d00e      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a2f      	ldr	r2, [pc, #188]	; (800ab78 <DMA_CalcBaseAndBitshift+0x14c>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d009      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a2d      	ldr	r2, [pc, #180]	; (800ab7c <DMA_CalcBaseAndBitshift+0x150>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d004      	beq.n	800aad4 <DMA_CalcBaseAndBitshift+0xa8>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a2c      	ldr	r2, [pc, #176]	; (800ab80 <DMA_CalcBaseAndBitshift+0x154>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d101      	bne.n	800aad8 <DMA_CalcBaseAndBitshift+0xac>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e000      	b.n	800aada <DMA_CalcBaseAndBitshift+0xae>
 800aad8:	2300      	movs	r3, #0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d024      	beq.n	800ab28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	3b10      	subs	r3, #16
 800aae6:	4a27      	ldr	r2, [pc, #156]	; (800ab84 <DMA_CalcBaseAndBitshift+0x158>)
 800aae8:	fba2 2303 	umull	r2, r3, r2, r3
 800aaec:	091b      	lsrs	r3, r3, #4
 800aaee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	4a24      	ldr	r2, [pc, #144]	; (800ab88 <DMA_CalcBaseAndBitshift+0x15c>)
 800aaf8:	5cd3      	ldrb	r3, [r2, r3]
 800aafa:	461a      	mov	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d908      	bls.n	800ab18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	4b1f      	ldr	r3, [pc, #124]	; (800ab8c <DMA_CalcBaseAndBitshift+0x160>)
 800ab0e:	4013      	ands	r3, r2
 800ab10:	1d1a      	adds	r2, r3, #4
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	659a      	str	r2, [r3, #88]	; 0x58
 800ab16:	e00d      	b.n	800ab34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	4b1b      	ldr	r3, [pc, #108]	; (800ab8c <DMA_CalcBaseAndBitshift+0x160>)
 800ab20:	4013      	ands	r3, r2
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	6593      	str	r3, [r2, #88]	; 0x58
 800ab26:	e005      	b.n	800ab34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3714      	adds	r7, #20
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	40020010 	.word	0x40020010
 800ab48:	40020028 	.word	0x40020028
 800ab4c:	40020040 	.word	0x40020040
 800ab50:	40020058 	.word	0x40020058
 800ab54:	40020070 	.word	0x40020070
 800ab58:	40020088 	.word	0x40020088
 800ab5c:	400200a0 	.word	0x400200a0
 800ab60:	400200b8 	.word	0x400200b8
 800ab64:	40020410 	.word	0x40020410
 800ab68:	40020428 	.word	0x40020428
 800ab6c:	40020440 	.word	0x40020440
 800ab70:	40020458 	.word	0x40020458
 800ab74:	40020470 	.word	0x40020470
 800ab78:	40020488 	.word	0x40020488
 800ab7c:	400204a0 	.word	0x400204a0
 800ab80:	400204b8 	.word	0x400204b8
 800ab84:	aaaaaaab 	.word	0xaaaaaaab
 800ab88:	0801b574 	.word	0x0801b574
 800ab8c:	fffffc00 	.word	0xfffffc00

0800ab90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d120      	bne.n	800abe6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d858      	bhi.n	800ac5e <DMA_CheckFifoParam+0xce>
 800abac:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <DMA_CheckFifoParam+0x24>)
 800abae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb2:	bf00      	nop
 800abb4:	0800abc5 	.word	0x0800abc5
 800abb8:	0800abd7 	.word	0x0800abd7
 800abbc:	0800abc5 	.word	0x0800abc5
 800abc0:	0800ac5f 	.word	0x0800ac5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d048      	beq.n	800ac62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abd4:	e045      	b.n	800ac62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800abde:	d142      	bne.n	800ac66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800abe4:	e03f      	b.n	800ac66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abee:	d123      	bne.n	800ac38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d838      	bhi.n	800ac6a <DMA_CheckFifoParam+0xda>
 800abf8:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <DMA_CheckFifoParam+0x70>)
 800abfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfe:	bf00      	nop
 800ac00:	0800ac11 	.word	0x0800ac11
 800ac04:	0800ac17 	.word	0x0800ac17
 800ac08:	0800ac11 	.word	0x0800ac11
 800ac0c:	0800ac29 	.word	0x0800ac29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	73fb      	strb	r3, [r7, #15]
        break;
 800ac14:	e030      	b.n	800ac78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d025      	beq.n	800ac6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ac26:	e022      	b.n	800ac6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ac30:	d11f      	bne.n	800ac72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ac36:	e01c      	b.n	800ac72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d902      	bls.n	800ac46 <DMA_CheckFifoParam+0xb6>
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d003      	beq.n	800ac4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800ac44:	e018      	b.n	800ac78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	73fb      	strb	r3, [r7, #15]
        break;
 800ac4a:	e015      	b.n	800ac78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00e      	beq.n	800ac76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ac5c:	e00b      	b.n	800ac76 <DMA_CheckFifoParam+0xe6>
        break;
 800ac5e:	bf00      	nop
 800ac60:	e00a      	b.n	800ac78 <DMA_CheckFifoParam+0xe8>
        break;
 800ac62:	bf00      	nop
 800ac64:	e008      	b.n	800ac78 <DMA_CheckFifoParam+0xe8>
        break;
 800ac66:	bf00      	nop
 800ac68:	e006      	b.n	800ac78 <DMA_CheckFifoParam+0xe8>
        break;
 800ac6a:	bf00      	nop
 800ac6c:	e004      	b.n	800ac78 <DMA_CheckFifoParam+0xe8>
        break;
 800ac6e:	bf00      	nop
 800ac70:	e002      	b.n	800ac78 <DMA_CheckFifoParam+0xe8>
        break;
 800ac72:	bf00      	nop
 800ac74:	e000      	b.n	800ac78 <DMA_CheckFifoParam+0xe8>
    break;
 800ac76:	bf00      	nop
    }
  }

  return status;
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop

0800ac88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a38      	ldr	r2, [pc, #224]	; (800ad7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d022      	beq.n	800ace6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a36      	ldr	r2, [pc, #216]	; (800ad80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d01d      	beq.n	800ace6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a35      	ldr	r2, [pc, #212]	; (800ad84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d018      	beq.n	800ace6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a33      	ldr	r2, [pc, #204]	; (800ad88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d013      	beq.n	800ace6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a32      	ldr	r2, [pc, #200]	; (800ad8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00e      	beq.n	800ace6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a30      	ldr	r2, [pc, #192]	; (800ad90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d009      	beq.n	800ace6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a2f      	ldr	r2, [pc, #188]	; (800ad94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d004      	beq.n	800ace6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a2d      	ldr	r2, [pc, #180]	; (800ad98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d101      	bne.n	800acea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800ace6:	2301      	movs	r3, #1
 800ace8:	e000      	b.n	800acec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800acea:	2300      	movs	r3, #0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01a      	beq.n	800ad26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	3b08      	subs	r3, #8
 800acf8:	4a28      	ldr	r2, [pc, #160]	; (800ad9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800acfa:	fba2 2303 	umull	r2, r3, r2, r3
 800acfe:	091b      	lsrs	r3, r3, #4
 800ad00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	4b26      	ldr	r3, [pc, #152]	; (800ada0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800ad06:	4413      	add	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a24      	ldr	r2, [pc, #144]	; (800ada4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800ad14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f003 031f 	and.w	r3, r3, #31
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	409a      	lsls	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800ad24:	e024      	b.n	800ad70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	3b10      	subs	r3, #16
 800ad2e:	4a1e      	ldr	r2, [pc, #120]	; (800ada8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800ad30:	fba2 2303 	umull	r2, r3, r2, r3
 800ad34:	091b      	lsrs	r3, r3, #4
 800ad36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	4a1c      	ldr	r2, [pc, #112]	; (800adac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d806      	bhi.n	800ad4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	4a1b      	ldr	r2, [pc, #108]	; (800adb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d902      	bls.n	800ad4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	4b18      	ldr	r3, [pc, #96]	; (800adb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	461a      	mov	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a16      	ldr	r2, [pc, #88]	; (800adb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800ad60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f003 031f 	and.w	r3, r3, #31
 800ad68:	2201      	movs	r2, #1
 800ad6a:	409a      	lsls	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ad70:	bf00      	nop
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	58025408 	.word	0x58025408
 800ad80:	5802541c 	.word	0x5802541c
 800ad84:	58025430 	.word	0x58025430
 800ad88:	58025444 	.word	0x58025444
 800ad8c:	58025458 	.word	0x58025458
 800ad90:	5802546c 	.word	0x5802546c
 800ad94:	58025480 	.word	0x58025480
 800ad98:	58025494 	.word	0x58025494
 800ad9c:	cccccccd 	.word	0xcccccccd
 800ada0:	16009600 	.word	0x16009600
 800ada4:	58025880 	.word	0x58025880
 800ada8:	aaaaaaab 	.word	0xaaaaaaab
 800adac:	400204b8 	.word	0x400204b8
 800adb0:	4002040f 	.word	0x4002040f
 800adb4:	10008200 	.word	0x10008200
 800adb8:	40020880 	.word	0x40020880

0800adbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d04a      	beq.n	800ae68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b08      	cmp	r3, #8
 800add6:	d847      	bhi.n	800ae68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a25      	ldr	r2, [pc, #148]	; (800ae74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d022      	beq.n	800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a24      	ldr	r2, [pc, #144]	; (800ae78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d01d      	beq.n	800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a22      	ldr	r2, [pc, #136]	; (800ae7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d018      	beq.n	800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a21      	ldr	r2, [pc, #132]	; (800ae80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d013      	beq.n	800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a1f      	ldr	r2, [pc, #124]	; (800ae84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d00e      	beq.n	800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a1e      	ldr	r2, [pc, #120]	; (800ae88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d009      	beq.n	800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a1c      	ldr	r2, [pc, #112]	; (800ae8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d004      	beq.n	800ae28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a1b      	ldr	r2, [pc, #108]	; (800ae90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d101      	bne.n	800ae2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e000      	b.n	800ae2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00a      	beq.n	800ae48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	4b17      	ldr	r3, [pc, #92]	; (800ae94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ae36:	4413      	add	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a15      	ldr	r2, [pc, #84]	; (800ae98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ae44:	671a      	str	r2, [r3, #112]	; 0x70
 800ae46:	e009      	b.n	800ae5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	4b14      	ldr	r3, [pc, #80]	; (800ae9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ae4c:	4413      	add	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	461a      	mov	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a11      	ldr	r2, [pc, #68]	; (800aea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ae5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	2201      	movs	r2, #1
 800ae62:	409a      	lsls	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800ae68:	bf00      	nop
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	58025408 	.word	0x58025408
 800ae78:	5802541c 	.word	0x5802541c
 800ae7c:	58025430 	.word	0x58025430
 800ae80:	58025444 	.word	0x58025444
 800ae84:	58025458 	.word	0x58025458
 800ae88:	5802546c 	.word	0x5802546c
 800ae8c:	58025480 	.word	0x58025480
 800ae90:	58025494 	.word	0x58025494
 800ae94:	1600963f 	.word	0x1600963f
 800ae98:	58025940 	.word	0x58025940
 800ae9c:	1000823f 	.word	0x1000823f
 800aea0:	40020940 	.word	0x40020940

0800aea4 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b08a      	sub	sp, #40	; 0x28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800aeb8:	2308      	movs	r3, #8
 800aeba:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aebc:	4b40      	ldr	r3, [pc, #256]	; (800afc0 <HAL_FLASH_Program+0x11c>)
 800aebe:	7d1b      	ldrb	r3, [r3, #20]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d101      	bne.n	800aec8 <HAL_FLASH_Program+0x24>
 800aec4:	2302      	movs	r3, #2
 800aec6:	e076      	b.n	800afb6 <HAL_FLASH_Program+0x112>
 800aec8:	4b3d      	ldr	r3, [pc, #244]	; (800afc0 <HAL_FLASH_Program+0x11c>)
 800aeca:	2201      	movs	r2, #1
 800aecc:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aed4:	d306      	bcc.n	800aee4 <HAL_FLASH_Program+0x40>
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aedc:	d202      	bcs.n	800aee4 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800aede:	2301      	movs	r3, #1
 800aee0:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800aee2:	e00c      	b.n	800aefe <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aeea:	d306      	bcc.n	800aefa <HAL_FLASH_Program+0x56>
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800aef2:	d202      	bcs.n	800aefa <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800aef4:	2302      	movs	r3, #2
 800aef6:	61bb      	str	r3, [r7, #24]
 800aef8:	e001      	b.n	800aefe <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e05b      	b.n	800afb6 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aefe:	4b30      	ldr	r3, [pc, #192]	; (800afc0 <HAL_FLASH_Program+0x11c>)
 800af00:	2200      	movs	r2, #0
 800af02:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800af04:	69b9      	ldr	r1, [r7, #24]
 800af06:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af0a:	f000 f897 	bl	800b03c <FLASH_WaitForLastOperation>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800af14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d147      	bne.n	800afac <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d106      	bne.n	800af30 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800af22:	4b28      	ldr	r3, [pc, #160]	; (800afc4 <HAL_FLASH_Program+0x120>)
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	4a27      	ldr	r2, [pc, #156]	; (800afc4 <HAL_FLASH_Program+0x120>)
 800af28:	f043 0302 	orr.w	r3, r3, #2
 800af2c:	60d3      	str	r3, [r2, #12]
 800af2e:	e007      	b.n	800af40 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800af30:	4b24      	ldr	r3, [pc, #144]	; (800afc4 <HAL_FLASH_Program+0x120>)
 800af32:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af36:	4a23      	ldr	r2, [pc, #140]	; (800afc4 <HAL_FLASH_Program+0x120>)
 800af38:	f043 0302 	orr.w	r3, r3, #2
 800af3c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800af40:	f3bf 8f6f 	isb	sy
}
 800af44:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800af46:	f3bf 8f4f 	dsb	sy
}
 800af4a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	3304      	adds	r3, #4
 800af58:	623b      	str	r3, [r7, #32]
        src_addr++;
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	3304      	adds	r3, #4
 800af5e:	61fb      	str	r3, [r7, #28]
        row_index--;
 800af60:	7dfb      	ldrb	r3, [r7, #23]
 800af62:	3b01      	subs	r3, #1
 800af64:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1ef      	bne.n	800af4c <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800af6c:	f3bf 8f6f 	isb	sy
}
 800af70:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800af72:	f3bf 8f4f 	dsb	sy
}
 800af76:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800af78:	69b9      	ldr	r1, [r7, #24]
 800af7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af7e:	f000 f85d 	bl	800b03c <FLASH_WaitForLastOperation>
 800af82:	4603      	mov	r3, r0
 800af84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d106      	bne.n	800af9c <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800af8e:	4b0d      	ldr	r3, [pc, #52]	; (800afc4 <HAL_FLASH_Program+0x120>)
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	4a0c      	ldr	r2, [pc, #48]	; (800afc4 <HAL_FLASH_Program+0x120>)
 800af94:	f023 0302 	bic.w	r3, r3, #2
 800af98:	60d3      	str	r3, [r2, #12]
 800af9a:	e007      	b.n	800afac <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800af9c:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <HAL_FLASH_Program+0x120>)
 800af9e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800afa2:	4a08      	ldr	r2, [pc, #32]	; (800afc4 <HAL_FLASH_Program+0x120>)
 800afa4:	f023 0302 	bic.w	r3, r3, #2
 800afa8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800afac:	4b04      	ldr	r3, [pc, #16]	; (800afc0 <HAL_FLASH_Program+0x11c>)
 800afae:	2200      	movs	r2, #0
 800afb0:	751a      	strb	r2, [r3, #20]

  return status;
 800afb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3728      	adds	r7, #40	; 0x28
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	24002000 	.word	0x24002000
 800afc4:	52002000 	.word	0x52002000

0800afc8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800afc8:	b480      	push	{r7}
 800afca:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800afcc:	4b18      	ldr	r3, [pc, #96]	; (800b030 <HAL_FLASH_Unlock+0x68>)
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00d      	beq.n	800aff4 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800afd8:	4b15      	ldr	r3, [pc, #84]	; (800b030 <HAL_FLASH_Unlock+0x68>)
 800afda:	4a16      	ldr	r2, [pc, #88]	; (800b034 <HAL_FLASH_Unlock+0x6c>)
 800afdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800afde:	4b14      	ldr	r3, [pc, #80]	; (800b030 <HAL_FLASH_Unlock+0x68>)
 800afe0:	4a15      	ldr	r2, [pc, #84]	; (800b038 <HAL_FLASH_Unlock+0x70>)
 800afe2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800afe4:	4b12      	ldr	r3, [pc, #72]	; (800b030 <HAL_FLASH_Unlock+0x68>)
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	f003 0301 	and.w	r3, r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e018      	b.n	800b026 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800aff4:	4b0e      	ldr	r3, [pc, #56]	; (800b030 <HAL_FLASH_Unlock+0x68>)
 800aff6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d010      	beq.n	800b024 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800b002:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <HAL_FLASH_Unlock+0x68>)
 800b004:	4a0b      	ldr	r2, [pc, #44]	; (800b034 <HAL_FLASH_Unlock+0x6c>)
 800b006:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800b00a:	4b09      	ldr	r3, [pc, #36]	; (800b030 <HAL_FLASH_Unlock+0x68>)
 800b00c:	4a0a      	ldr	r2, [pc, #40]	; (800b038 <HAL_FLASH_Unlock+0x70>)
 800b00e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800b012:	4b07      	ldr	r3, [pc, #28]	; (800b030 <HAL_FLASH_Unlock+0x68>)
 800b014:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b018:	f003 0301 	and.w	r3, r3, #1
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e000      	b.n	800b026 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	52002000 	.word	0x52002000
 800b034:	45670123 	.word	0x45670123
 800b038:	cdef89ab 	.word	0xcdef89ab

0800b03c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800b046:	2304      	movs	r3, #4
 800b048:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800b04e:	f7fa ffab 	bl	8005fa8 <HAL_GetTick>
 800b052:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	2b02      	cmp	r3, #2
 800b058:	d113      	bne.n	800b082 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800b05a:	4b41      	ldr	r3, [pc, #260]	; (800b160 <FLASH_WaitForLastOperation+0x124>)
 800b05c:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b05e:	e010      	b.n	800b082 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b066:	d00c      	beq.n	800b082 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b068:	f7fa ff9e 	bl	8005fa8 <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d302      	bcc.n	800b07e <FLASH_WaitForLastOperation+0x42>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e06a      	b.n	800b158 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	4b37      	ldr	r3, [pc, #220]	; (800b164 <FLASH_WaitForLastOperation+0x128>)
 800b086:	4013      	ands	r3, r2
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d10a      	bne.n	800b0a4 <FLASH_WaitForLastOperation+0x68>
 800b08e:	4b36      	ldr	r3, [pc, #216]	; (800b168 <FLASH_WaitForLastOperation+0x12c>)
 800b090:	691a      	ldr	r2, [r3, #16]
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	4013      	ands	r3, r2
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	429a      	cmp	r2, r3
 800b09a:	bf0c      	ite	eq
 800b09c:	2301      	moveq	r3, #1
 800b09e:	2300      	movne	r3, #0
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	e00c      	b.n	800b0be <FLASH_WaitForLastOperation+0x82>
 800b0a4:	4b30      	ldr	r3, [pc, #192]	; (800b168 <FLASH_WaitForLastOperation+0x12c>)
 800b0a6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b0aa:	43da      	mvns	r2, r3
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bf0c      	ite	eq
 800b0b8:	2301      	moveq	r3, #1
 800b0ba:	2300      	movne	r3, #0
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1ce      	bne.n	800b060 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d105      	bne.n	800b0d4 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800b0c8:	4b27      	ldr	r3, [pc, #156]	; (800b168 <FLASH_WaitForLastOperation+0x12c>)
 800b0ca:	691a      	ldr	r2, [r3, #16]
 800b0cc:	4b27      	ldr	r3, [pc, #156]	; (800b16c <FLASH_WaitForLastOperation+0x130>)
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]
 800b0d2:	e007      	b.n	800b0e4 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800b0d4:	4b24      	ldr	r3, [pc, #144]	; (800b168 <FLASH_WaitForLastOperation+0x12c>)
 800b0d6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800b0da:	4b24      	ldr	r3, [pc, #144]	; (800b16c <FLASH_WaitForLastOperation+0x130>)
 800b0dc:	4013      	ands	r3, r2
 800b0de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0e2:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d017      	beq.n	800b11e <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800b0ee:	4b20      	ldr	r3, [pc, #128]	; (800b170 <FLASH_WaitForLastOperation+0x134>)
 800b0f0:	699a      	ldr	r2, [r3, #24]
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	4a1e      	ldr	r2, [pc, #120]	; (800b170 <FLASH_WaitForLastOperation+0x134>)
 800b0f8:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	4b19      	ldr	r3, [pc, #100]	; (800b164 <FLASH_WaitForLastOperation+0x128>)
 800b0fe:	4013      	ands	r3, r2
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	429a      	cmp	r2, r3
 800b104:	d103      	bne.n	800b10e <FLASH_WaitForLastOperation+0xd2>
 800b106:	4a18      	ldr	r2, [pc, #96]	; (800b168 <FLASH_WaitForLastOperation+0x12c>)
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	6153      	str	r3, [r2, #20]
 800b10c:	e005      	b.n	800b11a <FLASH_WaitForLastOperation+0xde>
 800b10e:	4a16      	ldr	r2, [pc, #88]	; (800b168 <FLASH_WaitForLastOperation+0x12c>)
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b116:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e01c      	b.n	800b158 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d10b      	bne.n	800b13c <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800b124:	4b10      	ldr	r3, [pc, #64]	; (800b168 <FLASH_WaitForLastOperation+0x12c>)
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b130:	d111      	bne.n	800b156 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800b132:	4b0d      	ldr	r3, [pc, #52]	; (800b168 <FLASH_WaitForLastOperation+0x12c>)
 800b134:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b138:	615a      	str	r2, [r3, #20]
 800b13a:	e00c      	b.n	800b156 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800b13c:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <FLASH_WaitForLastOperation+0x12c>)
 800b13e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b14a:	d104      	bne.n	800b156 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800b14c:	4b06      	ldr	r3, [pc, #24]	; (800b168 <FLASH_WaitForLastOperation+0x12c>)
 800b14e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b152:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3718      	adds	r7, #24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	80000004 	.word	0x80000004
 800b164:	1fef000f 	.word	0x1fef000f
 800b168:	52002000 	.word	0x52002000
 800b16c:	17ee0000 	.word	0x17ee0000
 800b170:	24002000 	.word	0x24002000

0800b174 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b17e:	2300      	movs	r3, #0
 800b180:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b182:	4b5e      	ldr	r3, [pc, #376]	; (800b2fc <HAL_FLASHEx_Erase+0x188>)
 800b184:	7d1b      	ldrb	r3, [r3, #20]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d101      	bne.n	800b18e <HAL_FLASHEx_Erase+0x1a>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e0b2      	b.n	800b2f4 <HAL_FLASHEx_Erase+0x180>
 800b18e:	4b5b      	ldr	r3, [pc, #364]	; (800b2fc <HAL_FLASHEx_Erase+0x188>)
 800b190:	2201      	movs	r2, #1
 800b192:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b194:	4b59      	ldr	r3, [pc, #356]	; (800b2fc <HAL_FLASHEx_Erase+0x188>)
 800b196:	2200      	movs	r2, #0
 800b198:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d009      	beq.n	800b1ba <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b1ac:	f7ff ff46 	bl	800b03c <FLASH_WaitForLastOperation>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	f003 0302 	and.w	r3, r3, #2
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d009      	beq.n	800b1da <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b1c6:	2102      	movs	r1, #2
 800b1c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b1cc:	f7ff ff36 	bl	800b03c <FLASH_WaitForLastOperation>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f040 8085 	bne.w	800b2ec <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d136      	bne.n	800b258 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	691a      	ldr	r2, [r3, #16]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	f000 f887 	bl	800b308 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00f      	beq.n	800b226 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b206:	2101      	movs	r1, #1
 800b208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b20c:	f7ff ff16 	bl	800b03c <FLASH_WaitForLastOperation>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d001      	beq.n	800b21a <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800b21a:	4b39      	ldr	r3, [pc, #228]	; (800b300 <HAL_FLASHEx_Erase+0x18c>)
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	4a38      	ldr	r2, [pc, #224]	; (800b300 <HAL_FLASHEx_Erase+0x18c>)
 800b220:	f023 0308 	bic.w	r3, r3, #8
 800b224:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f003 0302 	and.w	r3, r3, #2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d05c      	beq.n	800b2ec <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b232:	2102      	movs	r1, #2
 800b234:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b238:	f7ff ff00 	bl	800b03c <FLASH_WaitForLastOperation>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800b246:	4b2e      	ldr	r3, [pc, #184]	; (800b300 <HAL_FLASHEx_Erase+0x18c>)
 800b248:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b24c:	4a2c      	ldr	r2, [pc, #176]	; (800b300 <HAL_FLASHEx_Erase+0x18c>)
 800b24e:	f023 0308 	bic.w	r3, r3, #8
 800b252:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800b256:	e049      	b.n	800b2ec <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b25e:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	60bb      	str	r3, [r7, #8]
 800b266:	e039      	b.n	800b2dc <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6859      	ldr	r1, [r3, #4]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	461a      	mov	r2, r3
 800b272:	68b8      	ldr	r0, [r7, #8]
 800b274:	f000 f8b2 	bl	800b3dc <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00c      	beq.n	800b29e <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800b284:	2101      	movs	r1, #1
 800b286:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b28a:	f7ff fed7 	bl	800b03c <FLASH_WaitForLastOperation>
 800b28e:	4603      	mov	r3, r0
 800b290:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b292:	4b1b      	ldr	r3, [pc, #108]	; (800b300 <HAL_FLASHEx_Erase+0x18c>)
 800b294:	68da      	ldr	r2, [r3, #12]
 800b296:	491a      	ldr	r1, [pc, #104]	; (800b300 <HAL_FLASHEx_Erase+0x18c>)
 800b298:	4b1a      	ldr	r3, [pc, #104]	; (800b304 <HAL_FLASHEx_Erase+0x190>)
 800b29a:	4013      	ands	r3, r2
 800b29c:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	f003 0302 	and.w	r3, r3, #2
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00e      	beq.n	800b2c8 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800b2aa:	2102      	movs	r1, #2
 800b2ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b2b0:	f7ff fec4 	bl	800b03c <FLASH_WaitForLastOperation>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b2b8:	4b11      	ldr	r3, [pc, #68]	; (800b300 <HAL_FLASHEx_Erase+0x18c>)
 800b2ba:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b2be:	4910      	ldr	r1, [pc, #64]	; (800b300 <HAL_FLASHEx_Erase+0x18c>)
 800b2c0:	4b10      	ldr	r3, [pc, #64]	; (800b304 <HAL_FLASHEx_Erase+0x190>)
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d003      	beq.n	800b2d6 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	601a      	str	r2, [r3, #0]
          break;
 800b2d4:	e00a      	b.n	800b2ec <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	60bb      	str	r3, [r7, #8]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68da      	ldr	r2, [r3, #12]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d3bd      	bcc.n	800b268 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b2ec:	4b03      	ldr	r3, [pc, #12]	; (800b2fc <HAL_FLASHEx_Erase+0x188>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	751a      	strb	r2, [r3, #20]

  return status;
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	24002000 	.word	0x24002000
 800b300:	52002000 	.word	0x52002000
 800b304:	fffff8fb 	.word	0xfffff8fb

0800b308 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	f003 0303 	and.w	r3, r3, #3
 800b318:	2b03      	cmp	r3, #3
 800b31a:	d122      	bne.n	800b362 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b31c:	4b2e      	ldr	r3, [pc, #184]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	4a2d      	ldr	r2, [pc, #180]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b322:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b326:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b328:	4b2b      	ldr	r3, [pc, #172]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b32a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b32e:	4a2a      	ldr	r2, [pc, #168]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b330:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b334:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800b338:	4b27      	ldr	r3, [pc, #156]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b33a:	68da      	ldr	r2, [r3, #12]
 800b33c:	4926      	ldr	r1, [pc, #152]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4313      	orrs	r3, r2
 800b342:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800b344:	4b24      	ldr	r3, [pc, #144]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b346:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b34a:	4923      	ldr	r1, [pc, #140]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4313      	orrs	r3, r2
 800b350:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800b354:	4b20      	ldr	r3, [pc, #128]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	4a1f      	ldr	r2, [pc, #124]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b35a:	f043 0310 	orr.w	r3, r3, #16
 800b35e:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800b360:	e033      	b.n	800b3ca <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	f003 0301 	and.w	r3, r3, #1
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d011      	beq.n	800b390 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b36c:	4b1a      	ldr	r3, [pc, #104]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	4a19      	ldr	r2, [pc, #100]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b372:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b376:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800b378:	4b17      	ldr	r3, [pc, #92]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b37a:	68da      	ldr	r2, [r3, #12]
 800b37c:	4916      	ldr	r1, [pc, #88]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4313      	orrs	r3, r2
 800b382:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800b384:	4b14      	ldr	r3, [pc, #80]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	4a13      	ldr	r2, [pc, #76]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b38a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b38e:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	f003 0302 	and.w	r3, r3, #2
 800b396:	2b00      	cmp	r3, #0
 800b398:	d017      	beq.n	800b3ca <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b39a:	4b0f      	ldr	r3, [pc, #60]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b39c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3a0:	4a0d      	ldr	r2, [pc, #52]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b3a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b3a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800b3aa:	4b0b      	ldr	r3, [pc, #44]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b3ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b3b0:	4909      	ldr	r1, [pc, #36]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800b3ba:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b3bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3c0:	4a05      	ldr	r2, [pc, #20]	; (800b3d8 <FLASH_MassErase+0xd0>)
 800b3c2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b3c6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800b3ca:	bf00      	nop
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	52002000 	.word	0x52002000

0800b3dc <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d010      	beq.n	800b414 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b3f2:	4b18      	ldr	r3, [pc, #96]	; (800b454 <FLASH_Erase_Sector+0x78>)
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	4a17      	ldr	r2, [pc, #92]	; (800b454 <FLASH_Erase_Sector+0x78>)
 800b3f8:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b3fc:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b3fe:	4b15      	ldr	r3, [pc, #84]	; (800b454 <FLASH_Erase_Sector+0x78>)
 800b400:	68da      	ldr	r2, [r3, #12]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	0219      	lsls	r1, r3, #8
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	430b      	orrs	r3, r1
 800b40a:	4313      	orrs	r3, r2
 800b40c:	4a11      	ldr	r2, [pc, #68]	; (800b454 <FLASH_Erase_Sector+0x78>)
 800b40e:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b412:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	f003 0302 	and.w	r3, r3, #2
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d014      	beq.n	800b448 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b41e:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <FLASH_Erase_Sector+0x78>)
 800b420:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b424:	4a0b      	ldr	r2, [pc, #44]	; (800b454 <FLASH_Erase_Sector+0x78>)
 800b426:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b42a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b42e:	4b09      	ldr	r3, [pc, #36]	; (800b454 <FLASH_Erase_Sector+0x78>)
 800b430:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	0219      	lsls	r1, r3, #8
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	430b      	orrs	r3, r1
 800b43c:	4313      	orrs	r3, r2
 800b43e:	4a05      	ldr	r2, [pc, #20]	; (800b454 <FLASH_Erase_Sector+0x78>)
 800b440:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b444:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800b448:	bf00      	nop
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr
 800b454:	52002000 	.word	0x52002000

0800b458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b458:	b480      	push	{r7}
 800b45a:	b089      	sub	sp, #36	; 0x24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b462:	2300      	movs	r3, #0
 800b464:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b466:	4b89      	ldr	r3, [pc, #548]	; (800b68c <HAL_GPIO_Init+0x234>)
 800b468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b46a:	e194      	b.n	800b796 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	2101      	movs	r1, #1
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	fa01 f303 	lsl.w	r3, r1, r3
 800b478:	4013      	ands	r3, r2
 800b47a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f000 8186 	beq.w	800b790 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	f003 0303 	and.w	r3, r3, #3
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d005      	beq.n	800b49c <HAL_GPIO_Init+0x44>
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	f003 0303 	and.w	r3, r3, #3
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d130      	bne.n	800b4fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	2203      	movs	r2, #3
 800b4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ac:	43db      	mvns	r3, r3
 800b4ae:	69ba      	ldr	r2, [r7, #24]
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	68da      	ldr	r2, [r3, #12]
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	005b      	lsls	r3, r3, #1
 800b4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	69ba      	ldr	r2, [r7, #24]
 800b4ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4da:	43db      	mvns	r3, r3
 800b4dc:	69ba      	ldr	r2, [r7, #24]
 800b4de:	4013      	ands	r3, r2
 800b4e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	091b      	lsrs	r3, r3, #4
 800b4e8:	f003 0201 	and.w	r2, r3, #1
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f2:	69ba      	ldr	r2, [r7, #24]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	69ba      	ldr	r2, [r7, #24]
 800b4fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	2b03      	cmp	r3, #3
 800b508:	d017      	beq.n	800b53a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	2203      	movs	r2, #3
 800b516:	fa02 f303 	lsl.w	r3, r2, r3
 800b51a:	43db      	mvns	r3, r3
 800b51c:	69ba      	ldr	r2, [r7, #24]
 800b51e:	4013      	ands	r3, r2
 800b520:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	689a      	ldr	r2, [r3, #8]
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	005b      	lsls	r3, r3, #1
 800b52a:	fa02 f303 	lsl.w	r3, r2, r3
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	4313      	orrs	r3, r2
 800b532:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	f003 0303 	and.w	r3, r3, #3
 800b542:	2b02      	cmp	r3, #2
 800b544:	d123      	bne.n	800b58e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	08da      	lsrs	r2, r3, #3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3208      	adds	r2, #8
 800b54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	f003 0307 	and.w	r3, r3, #7
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	220f      	movs	r2, #15
 800b55e:	fa02 f303 	lsl.w	r3, r2, r3
 800b562:	43db      	mvns	r3, r3
 800b564:	69ba      	ldr	r2, [r7, #24]
 800b566:	4013      	ands	r3, r2
 800b568:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	691a      	ldr	r2, [r3, #16]
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	f003 0307 	and.w	r3, r3, #7
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	fa02 f303 	lsl.w	r3, r2, r3
 800b57a:	69ba      	ldr	r2, [r7, #24]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	08da      	lsrs	r2, r3, #3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3208      	adds	r2, #8
 800b588:	69b9      	ldr	r1, [r7, #24]
 800b58a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	005b      	lsls	r3, r3, #1
 800b598:	2203      	movs	r2, #3
 800b59a:	fa02 f303 	lsl.w	r3, r2, r3
 800b59e:	43db      	mvns	r3, r3
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f003 0203 	and.w	r2, r3, #3
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 80e0 	beq.w	800b790 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b5d0:	4b2f      	ldr	r3, [pc, #188]	; (800b690 <HAL_GPIO_Init+0x238>)
 800b5d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b5d6:	4a2e      	ldr	r2, [pc, #184]	; (800b690 <HAL_GPIO_Init+0x238>)
 800b5d8:	f043 0302 	orr.w	r3, r3, #2
 800b5dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b5e0:	4b2b      	ldr	r3, [pc, #172]	; (800b690 <HAL_GPIO_Init+0x238>)
 800b5e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b5e6:	f003 0302 	and.w	r3, r3, #2
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b5ee:	4a29      	ldr	r2, [pc, #164]	; (800b694 <HAL_GPIO_Init+0x23c>)
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	089b      	lsrs	r3, r3, #2
 800b5f4:	3302      	adds	r3, #2
 800b5f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	f003 0303 	and.w	r3, r3, #3
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	220f      	movs	r2, #15
 800b606:	fa02 f303 	lsl.w	r3, r2, r3
 800b60a:	43db      	mvns	r3, r3
 800b60c:	69ba      	ldr	r2, [r7, #24]
 800b60e:	4013      	ands	r3, r2
 800b610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a20      	ldr	r2, [pc, #128]	; (800b698 <HAL_GPIO_Init+0x240>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d052      	beq.n	800b6c0 <HAL_GPIO_Init+0x268>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a1f      	ldr	r2, [pc, #124]	; (800b69c <HAL_GPIO_Init+0x244>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d031      	beq.n	800b686 <HAL_GPIO_Init+0x22e>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a1e      	ldr	r2, [pc, #120]	; (800b6a0 <HAL_GPIO_Init+0x248>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d02b      	beq.n	800b682 <HAL_GPIO_Init+0x22a>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <HAL_GPIO_Init+0x24c>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d025      	beq.n	800b67e <HAL_GPIO_Init+0x226>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a1c      	ldr	r2, [pc, #112]	; (800b6a8 <HAL_GPIO_Init+0x250>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d01f      	beq.n	800b67a <HAL_GPIO_Init+0x222>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a1b      	ldr	r2, [pc, #108]	; (800b6ac <HAL_GPIO_Init+0x254>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d019      	beq.n	800b676 <HAL_GPIO_Init+0x21e>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a1a      	ldr	r2, [pc, #104]	; (800b6b0 <HAL_GPIO_Init+0x258>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d013      	beq.n	800b672 <HAL_GPIO_Init+0x21a>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a19      	ldr	r2, [pc, #100]	; (800b6b4 <HAL_GPIO_Init+0x25c>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d00d      	beq.n	800b66e <HAL_GPIO_Init+0x216>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a18      	ldr	r2, [pc, #96]	; (800b6b8 <HAL_GPIO_Init+0x260>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d007      	beq.n	800b66a <HAL_GPIO_Init+0x212>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a17      	ldr	r2, [pc, #92]	; (800b6bc <HAL_GPIO_Init+0x264>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d101      	bne.n	800b666 <HAL_GPIO_Init+0x20e>
 800b662:	2309      	movs	r3, #9
 800b664:	e02d      	b.n	800b6c2 <HAL_GPIO_Init+0x26a>
 800b666:	230a      	movs	r3, #10
 800b668:	e02b      	b.n	800b6c2 <HAL_GPIO_Init+0x26a>
 800b66a:	2308      	movs	r3, #8
 800b66c:	e029      	b.n	800b6c2 <HAL_GPIO_Init+0x26a>
 800b66e:	2307      	movs	r3, #7
 800b670:	e027      	b.n	800b6c2 <HAL_GPIO_Init+0x26a>
 800b672:	2306      	movs	r3, #6
 800b674:	e025      	b.n	800b6c2 <HAL_GPIO_Init+0x26a>
 800b676:	2305      	movs	r3, #5
 800b678:	e023      	b.n	800b6c2 <HAL_GPIO_Init+0x26a>
 800b67a:	2304      	movs	r3, #4
 800b67c:	e021      	b.n	800b6c2 <HAL_GPIO_Init+0x26a>
 800b67e:	2303      	movs	r3, #3
 800b680:	e01f      	b.n	800b6c2 <HAL_GPIO_Init+0x26a>
 800b682:	2302      	movs	r3, #2
 800b684:	e01d      	b.n	800b6c2 <HAL_GPIO_Init+0x26a>
 800b686:	2301      	movs	r3, #1
 800b688:	e01b      	b.n	800b6c2 <HAL_GPIO_Init+0x26a>
 800b68a:	bf00      	nop
 800b68c:	58000080 	.word	0x58000080
 800b690:	58024400 	.word	0x58024400
 800b694:	58000400 	.word	0x58000400
 800b698:	58020000 	.word	0x58020000
 800b69c:	58020400 	.word	0x58020400
 800b6a0:	58020800 	.word	0x58020800
 800b6a4:	58020c00 	.word	0x58020c00
 800b6a8:	58021000 	.word	0x58021000
 800b6ac:	58021400 	.word	0x58021400
 800b6b0:	58021800 	.word	0x58021800
 800b6b4:	58021c00 	.word	0x58021c00
 800b6b8:	58022000 	.word	0x58022000
 800b6bc:	58022400 	.word	0x58022400
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	69fa      	ldr	r2, [r7, #28]
 800b6c4:	f002 0203 	and.w	r2, r2, #3
 800b6c8:	0092      	lsls	r2, r2, #2
 800b6ca:	4093      	lsls	r3, r2
 800b6cc:	69ba      	ldr	r2, [r7, #24]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b6d2:	4938      	ldr	r1, [pc, #224]	; (800b7b4 <HAL_GPIO_Init+0x35c>)
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	089b      	lsrs	r3, r3, #2
 800b6d8:	3302      	adds	r3, #2
 800b6da:	69ba      	ldr	r2, [r7, #24]
 800b6dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b6e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	43db      	mvns	r3, r3
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d003      	beq.n	800b706 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b6fe:	69ba      	ldr	r2, [r7, #24]
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	4313      	orrs	r3, r2
 800b704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b70e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	43db      	mvns	r3, r3
 800b71a:	69ba      	ldr	r2, [r7, #24]
 800b71c:	4013      	ands	r3, r2
 800b71e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d003      	beq.n	800b734 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b72c:	69ba      	ldr	r2, [r7, #24]
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	4313      	orrs	r3, r2
 800b732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	43db      	mvns	r3, r3
 800b746:	69ba      	ldr	r2, [r7, #24]
 800b748:	4013      	ands	r3, r2
 800b74a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b754:	2b00      	cmp	r3, #0
 800b756:	d003      	beq.n	800b760 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b758:	69ba      	ldr	r2, [r7, #24]
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	69ba      	ldr	r2, [r7, #24]
 800b764:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	43db      	mvns	r3, r3
 800b770:	69ba      	ldr	r2, [r7, #24]
 800b772:	4013      	ands	r3, r2
 800b774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b782:	69ba      	ldr	r2, [r7, #24]
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	4313      	orrs	r3, r2
 800b788:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	69ba      	ldr	r2, [r7, #24]
 800b78e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	3301      	adds	r3, #1
 800b794:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	fa22 f303 	lsr.w	r3, r2, r3
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f47f ae63 	bne.w	800b46c <HAL_GPIO_Init+0x14>
  }
}
 800b7a6:	bf00      	nop
 800b7a8:	bf00      	nop
 800b7aa:	3724      	adds	r7, #36	; 0x24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	58000400 	.word	0x58000400

0800b7b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	691a      	ldr	r2, [r3, #16]
 800b7c8:	887b      	ldrh	r3, [r7, #2]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	73fb      	strb	r3, [r7, #15]
 800b7d4:	e001      	b.n	800b7da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3714      	adds	r7, #20
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	807b      	strh	r3, [r7, #2]
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b7f8:	787b      	ldrb	r3, [r7, #1]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b7fe:	887a      	ldrh	r2, [r7, #2]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b804:	e003      	b.n	800b80e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b806:	887b      	ldrh	r3, [r7, #2]
 800b808:	041a      	lsls	r2, r3, #16
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	619a      	str	r2, [r3, #24]
}
 800b80e:	bf00      	nop
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
	...

0800b81c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d101      	bne.n	800b82e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e08b      	b.n	800b946 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b00      	cmp	r3, #0
 800b838:	d106      	bne.n	800b848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7f7 f968 	bl	8002b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2224      	movs	r2, #36	; 0x24
 800b84c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f022 0201 	bic.w	r2, r2, #1
 800b85e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685a      	ldr	r2, [r3, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b86c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	689a      	ldr	r2, [r3, #8]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b87c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d107      	bne.n	800b896 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	689a      	ldr	r2, [r3, #8]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b892:	609a      	str	r2, [r3, #8]
 800b894:	e006      	b.n	800b8a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689a      	ldr	r2, [r3, #8]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b8a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d108      	bne.n	800b8be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8ba:	605a      	str	r2, [r3, #4]
 800b8bc:	e007      	b.n	800b8ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	685a      	ldr	r2, [r3, #4]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	6859      	ldr	r1, [r3, #4]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	4b1d      	ldr	r3, [pc, #116]	; (800b950 <HAL_I2C_Init+0x134>)
 800b8da:	430b      	orrs	r3, r1
 800b8dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68da      	ldr	r2, [r3, #12]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b8ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	691a      	ldr	r2, [r3, #16]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	69d9      	ldr	r1, [r3, #28]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a1a      	ldr	r2, [r3, #32]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	430a      	orrs	r2, r1
 800b916:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f042 0201 	orr.w	r2, r2, #1
 800b926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2220      	movs	r2, #32
 800b932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	02008000 	.word	0x02008000

0800b954 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08a      	sub	sp, #40	; 0x28
 800b958:	af02      	add	r7, sp, #8
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	607a      	str	r2, [r7, #4]
 800b95e:	461a      	mov	r2, r3
 800b960:	460b      	mov	r3, r1
 800b962:	817b      	strh	r3, [r7, #10]
 800b964:	4613      	mov	r3, r2
 800b966:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b968:	2300      	movs	r3, #0
 800b96a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b972:	b2db      	uxtb	r3, r3
 800b974:	2b20      	cmp	r3, #32
 800b976:	f040 80ef 	bne.w	800bb58 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b988:	d101      	bne.n	800b98e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b98a:	2302      	movs	r3, #2
 800b98c:	e0e5      	b.n	800bb5a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b994:	2b01      	cmp	r3, #1
 800b996:	d101      	bne.n	800b99c <HAL_I2C_Master_Transmit_DMA+0x48>
 800b998:	2302      	movs	r3, #2
 800b99a:	e0de      	b.n	800bb5a <HAL_I2C_Master_Transmit_DMA+0x206>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2221      	movs	r2, #33	; 0x21
 800b9a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2210      	movs	r2, #16
 800b9b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	893a      	ldrh	r2, [r7, #8]
 800b9c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	4a66      	ldr	r2, [pc, #408]	; (800bb64 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b9ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4a66      	ldr	r2, [pc, #408]	; (800bb68 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b9d0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	2bff      	cmp	r3, #255	; 0xff
 800b9da:	d906      	bls.n	800b9ea <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	22ff      	movs	r2, #255	; 0xff
 800b9e0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b9e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9e6:	61fb      	str	r3, [r7, #28]
 800b9e8:	e007      	b.n	800b9fa <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b9f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9f8:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d01a      	beq.n	800ba38 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba06:	781a      	ldrb	r2, [r3, #0]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba12:	1c5a      	adds	r2, r3, #1
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba1c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	3b01      	subs	r3, #1
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba30:	3b01      	subs	r3, #1
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d074      	beq.n	800bb2a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d022      	beq.n	800ba8e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4c:	4a47      	ldr	r2, [pc, #284]	; (800bb6c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800ba4e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba54:	4a46      	ldr	r2, [pc, #280]	; (800bb70 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800ba56:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba64:	2200      	movs	r2, #0
 800ba66:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba78:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ba7e:	f7fc ff17 	bl	80088b0 <HAL_DMA_Start_IT>
 800ba82:	4603      	mov	r3, r0
 800ba84:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ba86:	7dfb      	ldrb	r3, [r7, #23]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d13a      	bne.n	800bb02 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800ba8c:	e013      	b.n	800bab6 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2220      	movs	r2, #32
 800ba92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	e051      	b.n	800bb5a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baba:	b2db      	uxtb	r3, r3
 800babc:	3301      	adds	r3, #1
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	8979      	ldrh	r1, [r7, #10]
 800bac2:	4b2c      	ldr	r3, [pc, #176]	; (800bb74 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f002 f83b 	bl	800db44 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	b29a      	uxth	r2, r3
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bae8:	2110      	movs	r1, #16
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f002 f85c 	bl	800dba8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bafe:	601a      	str	r2, [r3, #0]
 800bb00:	e028      	b.n	800bb54 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2220      	movs	r2, #32
 800bb06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb16:	f043 0210 	orr.w	r2, r3, #16
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e017      	b.n	800bb5a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	4a12      	ldr	r2, [pc, #72]	; (800bb78 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800bb2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	8979      	ldrh	r1, [r7, #10]
 800bb36:	4b0f      	ldr	r3, [pc, #60]	; (800bb74 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f002 f800 	bl	800db44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bb4c:	2101      	movs	r1, #1
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f002 f82a 	bl	800dba8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e000      	b.n	800bb5a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800bb58:	2302      	movs	r3, #2
  }
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3720      	adds	r7, #32
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	ffff0000 	.word	0xffff0000
 800bb68:	0800c3af 	.word	0x0800c3af
 800bb6c:	0800d767 	.word	0x0800d767
 800bb70:	0800d895 	.word	0x0800d895
 800bb74:	80002000 	.word	0x80002000
 800bb78:	0800bf3f 	.word	0x0800bf3f

0800bb7c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af02      	add	r7, sp, #8
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	607a      	str	r2, [r7, #4]
 800bb86:	461a      	mov	r2, r3
 800bb88:	460b      	mov	r3, r1
 800bb8a:	817b      	strh	r3, [r7, #10]
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	2b20      	cmp	r3, #32
 800bb9a:	f040 80cd 	bne.w	800bd38 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bbac:	d101      	bne.n	800bbb2 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800bbae:	2302      	movs	r3, #2
 800bbb0:	e0c3      	b.n	800bd3a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d101      	bne.n	800bbc0 <HAL_I2C_Master_Receive_DMA+0x44>
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	e0bc      	b.n	800bd3a <HAL_I2C_Master_Receive_DMA+0x1be>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2222      	movs	r2, #34	; 0x22
 800bbcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2210      	movs	r2, #16
 800bbd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	893a      	ldrh	r2, [r7, #8]
 800bbe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	4a55      	ldr	r2, [pc, #340]	; (800bd44 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800bbee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4a55      	ldr	r2, [pc, #340]	; (800bd48 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800bbf4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	2bff      	cmp	r3, #255	; 0xff
 800bbfe:	d906      	bls.n	800bc0e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	22ff      	movs	r2, #255	; 0xff
 800bc04:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800bc06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc0a:	617b      	str	r3, [r7, #20]
 800bc0c:	e007      	b.n	800bc1e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bc18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc1c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d070      	beq.n	800bd08 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d020      	beq.n	800bc70 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc32:	4a46      	ldr	r2, [pc, #280]	; (800bd4c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800bc34:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3a:	4a45      	ldr	r2, [pc, #276]	; (800bd50 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800bc3c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc42:	2200      	movs	r2, #0
 800bc44:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3324      	adds	r3, #36	; 0x24
 800bc58:	4619      	mov	r1, r3
 800bc5a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bc60:	f7fc fe26 	bl	80088b0 <HAL_DMA_Start_IT>
 800bc64:	4603      	mov	r3, r0
 800bc66:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bc68:	7cfb      	ldrb	r3, [r7, #19]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d138      	bne.n	800bce0 <HAL_I2C_Master_Receive_DMA+0x164>
 800bc6e:	e013      	b.n	800bc98 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2220      	movs	r2, #32
 800bc74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	e050      	b.n	800bd3a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc9c:	b2da      	uxtb	r2, r3
 800bc9e:	8979      	ldrh	r1, [r7, #10]
 800bca0:	4b2c      	ldr	r3, [pc, #176]	; (800bd54 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f001 ff4c 	bl	800db44 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bcc6:	2110      	movs	r1, #16
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f001 ff6d 	bl	800dba8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	e029      	b.n	800bd34 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2220      	movs	r2, #32
 800bce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf4:	f043 0210 	orr.w	r2, r3, #16
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e018      	b.n	800bd3a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4a13      	ldr	r2, [pc, #76]	; (800bd58 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800bd0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	8979      	ldrh	r1, [r7, #10]
 800bd16:	4b0f      	ldr	r3, [pc, #60]	; (800bd54 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f001 ff10 	bl	800db44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bd2c:	2102      	movs	r1, #2
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f001 ff3a 	bl	800dba8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	e000      	b.n	800bd3a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800bd38:	2302      	movs	r3, #2
  }
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	ffff0000 	.word	0xffff0000
 800bd48:	0800c3af 	.word	0x0800c3af
 800bd4c:	0800d7fd 	.word	0x0800d7fd
 800bd50:	0800d895 	.word	0x0800d895
 800bd54:	80002400 	.word	0x80002400
 800bd58:	0800bf3f 	.word	0x0800bf3f

0800bd5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d005      	beq.n	800bd88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	4798      	blx	r3
  }
}
 800bd88:	bf00      	nop
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	0a1b      	lsrs	r3, r3, #8
 800bdac:	f003 0301 	and.w	r3, r3, #1
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d010      	beq.n	800bdd6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	09db      	lsrs	r3, r3, #7
 800bdb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00a      	beq.n	800bdd6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdc4:	f043 0201 	orr.w	r2, r3, #1
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdd4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	0a9b      	lsrs	r3, r3, #10
 800bdda:	f003 0301 	and.w	r3, r3, #1
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d010      	beq.n	800be04 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	09db      	lsrs	r3, r3, #7
 800bde6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00a      	beq.n	800be04 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdf2:	f043 0208 	orr.w	r2, r3, #8
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	0a5b      	lsrs	r3, r3, #9
 800be08:	f003 0301 	and.w	r3, r3, #1
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d010      	beq.n	800be32 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	09db      	lsrs	r3, r3, #7
 800be14:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00a      	beq.n	800be32 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be20:	f043 0202 	orr.w	r2, r3, #2
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be30:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be36:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f003 030b 	and.w	r3, r3, #11
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800be42:	68f9      	ldr	r1, [r7, #12]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f001 fb53 	bl	800d4f0 <I2C_ITError>
  }
}
 800be4a:	bf00      	nop
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be52:	b480      	push	{r7}
 800be54:	b083      	sub	sp, #12
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800be5a:	bf00      	nop
 800be5c:	370c      	adds	r7, #12
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr

0800be66 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be66:	b480      	push	{r7}
 800be68:	b083      	sub	sp, #12
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800be6e:	bf00      	nop
 800be70:	370c      	adds	r7, #12
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr

0800be7a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be7a:	b480      	push	{r7}
 800be7c:	b083      	sub	sp, #12
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800be82:	bf00      	nop
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be8e:	b480      	push	{r7}
 800be90:	b083      	sub	sp, #12
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800be96:	bf00      	nop
 800be98:	370c      	adds	r7, #12
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b083      	sub	sp, #12
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	460b      	mov	r3, r1
 800beac:	70fb      	strb	r3, [r7, #3]
 800beae:	4613      	mov	r3, r2
 800beb0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800beb2:	bf00      	nop
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bebe:	b480      	push	{r7}
 800bec0:	b083      	sub	sp, #12
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b083      	sub	sp, #12
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800beda:	bf00      	nop
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bee6:	b480      	push	{r7}
 800bee8:	b083      	sub	sp, #12
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800beee:	bf00      	nop
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800befa:	b480      	push	{r7}
 800befc:	b083      	sub	sp, #12
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bf02:	bf00      	nop
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bf0e:	b480      	push	{r7}
 800bf10:	b083      	sub	sp, #12
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bf16:	bf00      	nop
 800bf18:	370c      	adds	r7, #12
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800bf22:	b480      	push	{r7}
 800bf24:	b083      	sub	sp, #12
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf30:	b2db      	uxtb	r3, r3
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b088      	sub	sp, #32
 800bf42:	af02      	add	r7, sp, #8
 800bf44:	60f8      	str	r0, [r7, #12]
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d101      	bne.n	800bf5c <I2C_Master_ISR_IT+0x1e>
 800bf58:	2302      	movs	r3, #2
 800bf5a:	e120      	b.n	800c19e <I2C_Master_ISR_IT+0x260>
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	091b      	lsrs	r3, r3, #4
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d013      	beq.n	800bf98 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	091b      	lsrs	r3, r3, #4
 800bf74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00d      	beq.n	800bf98 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2210      	movs	r2, #16
 800bf82:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf88:	f043 0204 	orr.w	r2, r3, #4
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f001 fbc4 	bl	800d71e <I2C_Flush_TXDR>
 800bf96:	e0ed      	b.n	800c174 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	089b      	lsrs	r3, r3, #2
 800bf9c:	f003 0301 	and.w	r3, r3, #1
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d023      	beq.n	800bfec <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	089b      	lsrs	r3, r3, #2
 800bfa8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d01d      	beq.n	800bfec <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	f023 0304 	bic.w	r3, r3, #4
 800bfb6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc2:	b2d2      	uxtb	r2, r2
 800bfc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bfea:	e0c3      	b.n	800c174 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	099b      	lsrs	r3, r3, #6
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d12a      	bne.n	800c04e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	085b      	lsrs	r3, r3, #1
 800bffc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800c000:	2b00      	cmp	r3, #0
 800c002:	d024      	beq.n	800c04e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	085b      	lsrs	r3, r3, #1
 800c008:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d01e      	beq.n	800c04e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c014:	b29b      	uxth	r3, r3
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 80ac 	beq.w	800c174 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c020:	781a      	ldrb	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c036:	3b01      	subs	r3, #1
 800c038:	b29a      	uxth	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c042:	b29b      	uxth	r3, r3
 800c044:	3b01      	subs	r3, #1
 800c046:	b29a      	uxth	r2, r3
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800c04c:	e092      	b.n	800c174 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	09db      	lsrs	r3, r3, #7
 800c052:	f003 0301 	and.w	r3, r3, #1
 800c056:	2b00      	cmp	r3, #0
 800c058:	d05d      	beq.n	800c116 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	099b      	lsrs	r3, r3, #6
 800c05e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c062:	2b00      	cmp	r3, #0
 800c064:	d057      	beq.n	800c116 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d040      	beq.n	800c0f2 <I2C_Master_ISR_IT+0x1b4>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c074:	2b00      	cmp	r3, #0
 800c076:	d13c      	bne.n	800c0f2 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	b29b      	uxth	r3, r3
 800c080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c084:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	2bff      	cmp	r3, #255	; 0xff
 800c08e:	d90e      	bls.n	800c0ae <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	22ff      	movs	r2, #255	; 0xff
 800c094:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	8a79      	ldrh	r1, [r7, #18]
 800c09e:	2300      	movs	r3, #0
 800c0a0:	9300      	str	r3, [sp, #0]
 800c0a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f001 fd4c 	bl	800db44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0ac:	e032      	b.n	800c114 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c0c0:	d00b      	beq.n	800c0da <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0cc:	8a79      	ldrh	r1, [r7, #18]
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	9000      	str	r0, [sp, #0]
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f001 fd36 	bl	800db44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0d8:	e01c      	b.n	800c114 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	8a79      	ldrh	r1, [r7, #18]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f001 fd2a 	bl	800db44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0f0:	e010      	b.n	800c114 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c100:	d003      	beq.n	800c10a <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f000 fdde 	bl	800ccc4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c108:	e034      	b.n	800c174 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c10a:	2140      	movs	r1, #64	; 0x40
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f001 f9ef 	bl	800d4f0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c112:	e02f      	b.n	800c174 <I2C_Master_ISR_IT+0x236>
 800c114:	e02e      	b.n	800c174 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	099b      	lsrs	r3, r3, #6
 800c11a:	f003 0301 	and.w	r3, r3, #1
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d028      	beq.n	800c174 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	099b      	lsrs	r3, r3, #6
 800c126:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d022      	beq.n	800c174 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c132:	b29b      	uxth	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	d119      	bne.n	800c16c <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c146:	d015      	beq.n	800c174 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c150:	d108      	bne.n	800c164 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c160:	605a      	str	r2, [r3, #4]
 800c162:	e007      	b.n	800c174 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 fdad 	bl	800ccc4 <I2C_ITMasterSeqCplt>
 800c16a:	e003      	b.n	800c174 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c16c:	2140      	movs	r1, #64	; 0x40
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f001 f9be 	bl	800d4f0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	095b      	lsrs	r3, r3, #5
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d009      	beq.n	800c194 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	095b      	lsrs	r3, r3, #5
 800c184:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c18c:	6979      	ldr	r1, [r7, #20]
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f000 fe34 	bl	800cdfc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3718      	adds	r7, #24
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b086      	sub	sp, #24
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	60f8      	str	r0, [r7, #12]
 800c1ae:	60b9      	str	r1, [r7, #8]
 800c1b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d101      	bne.n	800c1ca <I2C_Slave_ISR_IT+0x24>
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	e0ed      	b.n	800c3a6 <I2C_Slave_ISR_IT+0x200>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	095b      	lsrs	r3, r3, #5
 800c1d6:	f003 0301 	and.w	r3, r3, #1
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00a      	beq.n	800c1f4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	095b      	lsrs	r3, r3, #5
 800c1e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c1ea:	6939      	ldr	r1, [r7, #16]
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f000 fecf 	bl	800cf90 <I2C_ITSlaveCplt>
 800c1f2:	e0d3      	b.n	800c39c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	091b      	lsrs	r3, r3, #4
 800c1f8:	f003 0301 	and.w	r3, r3, #1
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d04d      	beq.n	800c29c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	091b      	lsrs	r3, r3, #4
 800c204:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d047      	beq.n	800c29c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c210:	b29b      	uxth	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	d128      	bne.n	800c268 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b28      	cmp	r3, #40	; 0x28
 800c220:	d108      	bne.n	800c234 <I2C_Slave_ISR_IT+0x8e>
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c228:	d104      	bne.n	800c234 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c22a:	6939      	ldr	r1, [r7, #16]
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f001 f909 	bl	800d444 <I2C_ITListenCplt>
 800c232:	e032      	b.n	800c29a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	2b29      	cmp	r3, #41	; 0x29
 800c23e:	d10e      	bne.n	800c25e <I2C_Slave_ISR_IT+0xb8>
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c246:	d00a      	beq.n	800c25e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2210      	movs	r2, #16
 800c24e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f001 fa64 	bl	800d71e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f000 fd71 	bl	800cd3e <I2C_ITSlaveSeqCplt>
 800c25c:	e01d      	b.n	800c29a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2210      	movs	r2, #16
 800c264:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c266:	e096      	b.n	800c396 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2210      	movs	r2, #16
 800c26e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c274:	f043 0204 	orr.w	r2, r3, #4
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d004      	beq.n	800c28c <I2C_Slave_ISR_IT+0xe6>
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c288:	f040 8085 	bne.w	800c396 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c290:	4619      	mov	r1, r3
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f001 f92c 	bl	800d4f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c298:	e07d      	b.n	800c396 <I2C_Slave_ISR_IT+0x1f0>
 800c29a:	e07c      	b.n	800c396 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	089b      	lsrs	r3, r3, #2
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d030      	beq.n	800c30a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	089b      	lsrs	r3, r3, #2
 800c2ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d02a      	beq.n	800c30a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d018      	beq.n	800c2f0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c8:	b2d2      	uxtb	r2, r2
 800c2ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d0:	1c5a      	adds	r2, r3, #1
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	b29a      	uxth	r2, r3
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d14f      	bne.n	800c39a <I2C_Slave_ISR_IT+0x1f4>
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c300:	d04b      	beq.n	800c39a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c302:	68f8      	ldr	r0, [r7, #12]
 800c304:	f000 fd1b 	bl	800cd3e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c308:	e047      	b.n	800c39a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	08db      	lsrs	r3, r3, #3
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00a      	beq.n	800c32c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	08db      	lsrs	r3, r3, #3
 800c31a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d004      	beq.n	800c32c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c322:	6939      	ldr	r1, [r7, #16]
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f000 fc49 	bl	800cbbc <I2C_ITAddrCplt>
 800c32a:	e037      	b.n	800c39c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	085b      	lsrs	r3, r3, #1
 800c330:	f003 0301 	and.w	r3, r3, #1
 800c334:	2b00      	cmp	r3, #0
 800c336:	d031      	beq.n	800c39c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	085b      	lsrs	r3, r3, #1
 800c33c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c340:	2b00      	cmp	r3, #0
 800c342:	d02b      	beq.n	800c39c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c348:	b29b      	uxth	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d018      	beq.n	800c380 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c352:	781a      	ldrb	r2, [r3, #0]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35e:	1c5a      	adds	r2, r3, #1
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c368:	b29b      	uxth	r3, r3
 800c36a:	3b01      	subs	r3, #1
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c376:	3b01      	subs	r3, #1
 800c378:	b29a      	uxth	r2, r3
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	851a      	strh	r2, [r3, #40]	; 0x28
 800c37e:	e00d      	b.n	800c39c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c386:	d002      	beq.n	800c38e <I2C_Slave_ISR_IT+0x1e8>
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d106      	bne.n	800c39c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f000 fcd5 	bl	800cd3e <I2C_ITSlaveSeqCplt>
 800c394:	e002      	b.n	800c39c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800c396:	bf00      	nop
 800c398:	e000      	b.n	800c39c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800c39a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b088      	sub	sp, #32
 800c3b2:	af02      	add	r7, sp, #8
 800c3b4:	60f8      	str	r0, [r7, #12]
 800c3b6:	60b9      	str	r1, [r7, #8]
 800c3b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d101      	bne.n	800c3c8 <I2C_Master_ISR_DMA+0x1a>
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	e0e1      	b.n	800c58c <I2C_Master_ISR_DMA+0x1de>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	091b      	lsrs	r3, r3, #4
 800c3d4:	f003 0301 	and.w	r3, r3, #1
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d017      	beq.n	800c40c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	091b      	lsrs	r3, r3, #4
 800c3e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d011      	beq.n	800c40c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2210      	movs	r2, #16
 800c3ee:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3f4:	f043 0204 	orr.w	r2, r3, #4
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c3fc:	2120      	movs	r1, #32
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f001 fbd2 	bl	800dba8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f001 f98a 	bl	800d71e <I2C_Flush_TXDR>
 800c40a:	e0ba      	b.n	800c582 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	09db      	lsrs	r3, r3, #7
 800c410:	f003 0301 	and.w	r3, r3, #1
 800c414:	2b00      	cmp	r3, #0
 800c416:	d072      	beq.n	800c4fe <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	099b      	lsrs	r3, r3, #6
 800c41c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c420:	2b00      	cmp	r3, #0
 800c422:	d06c      	beq.n	800c4fe <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c432:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c438:	b29b      	uxth	r3, r3
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d04e      	beq.n	800c4dc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	b29b      	uxth	r3, r3
 800c446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c44a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c450:	b29b      	uxth	r3, r3
 800c452:	2bff      	cmp	r3, #255	; 0xff
 800c454:	d906      	bls.n	800c464 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	22ff      	movs	r2, #255	; 0xff
 800c45a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800c45c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c460:	617b      	str	r3, [r7, #20]
 800c462:	e010      	b.n	800c486 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c468:	b29a      	uxth	r2, r3
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c472:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c476:	d003      	beq.n	800c480 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c47c:	617b      	str	r3, [r7, #20]
 800c47e:	e002      	b.n	800c486 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c484:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	8a79      	ldrh	r1, [r7, #18]
 800c48e:	2300      	movs	r3, #0
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f001 fb55 	bl	800db44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c49e:	b29a      	uxth	r2, r3
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4a4:	1ad3      	subs	r3, r2, r3
 800c4a6:	b29a      	uxth	r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	2b22      	cmp	r3, #34	; 0x22
 800c4b6:	d108      	bne.n	800c4ca <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4c6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c4c8:	e05b      	b.n	800c582 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c4d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c4da:	e052      	b.n	800c582 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ea:	d003      	beq.n	800c4f4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f000 fbe9 	bl	800ccc4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c4f2:	e046      	b.n	800c582 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c4f4:	2140      	movs	r1, #64	; 0x40
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f000 fffa 	bl	800d4f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c4fc:	e041      	b.n	800c582 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	099b      	lsrs	r3, r3, #6
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	2b00      	cmp	r3, #0
 800c508:	d029      	beq.n	800c55e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	099b      	lsrs	r3, r3, #6
 800c50e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c512:	2b00      	cmp	r3, #0
 800c514:	d023      	beq.n	800c55e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d119      	bne.n	800c554 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c52a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c52e:	d027      	beq.n	800c580 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c534:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c538:	d108      	bne.n	800c54c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c548:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c54a:	e019      	b.n	800c580 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	f000 fbb9 	bl	800ccc4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c552:	e015      	b.n	800c580 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c554:	2140      	movs	r1, #64	; 0x40
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f000 ffca 	bl	800d4f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c55c:	e010      	b.n	800c580 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	095b      	lsrs	r3, r3, #5
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00b      	beq.n	800c582 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	095b      	lsrs	r3, r3, #5
 800c56e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c572:	2b00      	cmp	r3, #0
 800c574:	d005      	beq.n	800c582 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c576:	68b9      	ldr	r1, [r7, #8]
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f000 fc3f 	bl	800cdfc <I2C_ITMasterCplt>
 800c57e:	e000      	b.n	800c582 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c580:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af02      	add	r7, sp, #8
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c5a0:	4b92      	ldr	r3, [pc, #584]	; (800c7ec <I2C_Mem_ISR_DMA+0x258>)
 800c5a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d101      	bne.n	800c5b2 <I2C_Mem_ISR_DMA+0x1e>
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	e118      	b.n	800c7e4 <I2C_Mem_ISR_DMA+0x250>
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	091b      	lsrs	r3, r3, #4
 800c5be:	f003 0301 	and.w	r3, r3, #1
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d017      	beq.n	800c5f6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	091b      	lsrs	r3, r3, #4
 800c5ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d011      	beq.n	800c5f6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2210      	movs	r2, #16
 800c5d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5de:	f043 0204 	orr.w	r2, r3, #4
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c5e6:	2120      	movs	r1, #32
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f001 fadd 	bl	800dba8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	f001 f895 	bl	800d71e <I2C_Flush_TXDR>
 800c5f4:	e0f1      	b.n	800c7da <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	085b      	lsrs	r3, r3, #1
 800c5fa:	f003 0301 	and.w	r3, r3, #1
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00f      	beq.n	800c622 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	085b      	lsrs	r3, r3, #1
 800c606:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d009      	beq.n	800c622 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c616:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c61e:	651a      	str	r2, [r3, #80]	; 0x50
 800c620:	e0db      	b.n	800c7da <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	09db      	lsrs	r3, r3, #7
 800c626:	f003 0301 	and.w	r3, r3, #1
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d060      	beq.n	800c6f0 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	099b      	lsrs	r3, r3, #6
 800c632:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c636:	2b00      	cmp	r3, #0
 800c638:	d05a      	beq.n	800c6f0 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c63a:	2101      	movs	r1, #1
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f001 fb37 	bl	800dcb0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c642:	2110      	movs	r1, #16
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f001 faaf 	bl	800dba8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c64e:	b29b      	uxth	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	d048      	beq.n	800c6e6 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c658:	b29b      	uxth	r3, r3
 800c65a:	2bff      	cmp	r3, #255	; 0xff
 800c65c:	d910      	bls.n	800c680 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	22ff      	movs	r2, #255	; 0xff
 800c662:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c668:	b299      	uxth	r1, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	2300      	movs	r3, #0
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f001 fa63 	bl	800db44 <I2C_TransferConfig>
 800c67e:	e011      	b.n	800c6a4 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c684:	b29a      	uxth	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c68e:	b299      	uxth	r1, r3
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c694:	b2da      	uxtb	r2, r3
 800c696:	2300      	movs	r3, #0
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f001 fa50 	bl	800db44 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	2b22      	cmp	r3, #34	; 0x22
 800c6c0:	d108      	bne.n	800c6d4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c6d2:	e082      	b.n	800c7da <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6e2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c6e4:	e079      	b.n	800c7da <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c6e6:	2140      	movs	r1, #64	; 0x40
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f000 ff01 	bl	800d4f0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c6ee:	e074      	b.n	800c7da <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	099b      	lsrs	r3, r3, #6
 800c6f4:	f003 0301 	and.w	r3, r3, #1
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d05e      	beq.n	800c7ba <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	099b      	lsrs	r3, r3, #6
 800c700:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c704:	2b00      	cmp	r3, #0
 800c706:	d058      	beq.n	800c7ba <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c708:	2101      	movs	r1, #1
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f001 fad0 	bl	800dcb0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c710:	2110      	movs	r1, #16
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f001 fa48 	bl	800dba8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b22      	cmp	r3, #34	; 0x22
 800c722:	d101      	bne.n	800c728 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c724:	4b32      	ldr	r3, [pc, #200]	; (800c7f0 <I2C_Mem_ISR_DMA+0x25c>)
 800c726:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	2bff      	cmp	r3, #255	; 0xff
 800c730:	d910      	bls.n	800c754 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	22ff      	movs	r2, #255	; 0xff
 800c736:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c73c:	b299      	uxth	r1, r3
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c742:	b2da      	uxtb	r2, r3
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f001 f9f9 	bl	800db44 <I2C_TransferConfig>
 800c752:	e011      	b.n	800c778 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c758:	b29a      	uxth	r2, r3
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c762:	b299      	uxth	r1, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f001 f9e6 	bl	800db44 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	b29a      	uxth	r2, r3
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b22      	cmp	r3, #34	; 0x22
 800c794:	d108      	bne.n	800c7a8 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c7a4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c7a6:	e018      	b.n	800c7da <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c7b6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c7b8:	e00f      	b.n	800c7da <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	095b      	lsrs	r3, r3, #5
 800c7be:	f003 0301 	and.w	r3, r3, #1
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d009      	beq.n	800c7da <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	095b      	lsrs	r3, r3, #5
 800c7ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c7d2:	68b9      	ldr	r1, [r7, #8]
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f000 fb11 	bl	800cdfc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	80002000 	.word	0x80002000
 800c7f0:	80002400 	.word	0x80002400

0800c7f4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b088      	sub	sp, #32
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c804:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c806:	2300      	movs	r3, #0
 800c808:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c810:	2b01      	cmp	r3, #1
 800c812:	d101      	bne.n	800c818 <I2C_Slave_ISR_DMA+0x24>
 800c814:	2302      	movs	r3, #2
 800c816:	e1cc      	b.n	800cbb2 <I2C_Slave_ISR_DMA+0x3be>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	095b      	lsrs	r3, r3, #5
 800c824:	f003 0301 	and.w	r3, r3, #1
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00a      	beq.n	800c842 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	095b      	lsrs	r3, r3, #5
 800c830:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c834:	2b00      	cmp	r3, #0
 800c836:	d004      	beq.n	800c842 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c838:	68b9      	ldr	r1, [r7, #8]
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f000 fba8 	bl	800cf90 <I2C_ITSlaveCplt>
 800c840:	e1b2      	b.n	800cba8 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	091b      	lsrs	r3, r3, #4
 800c846:	f003 0301 	and.w	r3, r3, #1
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 819c 	beq.w	800cb88 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	091b      	lsrs	r3, r3, #4
 800c854:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f000 8195 	beq.w	800cb88 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	0b9b      	lsrs	r3, r3, #14
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	2b00      	cmp	r3, #0
 800c868:	d106      	bne.n	800c878 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	0bdb      	lsrs	r3, r3, #15
 800c86e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c872:	2b00      	cmp	r3, #0
 800c874:	f000 8181 	beq.w	800cb7a <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d07c      	beq.n	800c97a <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	0bdb      	lsrs	r3, r3, #15
 800c884:	f003 0301 	and.w	r3, r3, #1
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d076      	beq.n	800c97a <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a75      	ldr	r2, [pc, #468]	; (800ca68 <I2C_Slave_ISR_DMA+0x274>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d059      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a73      	ldr	r2, [pc, #460]	; (800ca6c <I2C_Slave_ISR_DMA+0x278>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d053      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a71      	ldr	r2, [pc, #452]	; (800ca70 <I2C_Slave_ISR_DMA+0x27c>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d04d      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a6f      	ldr	r2, [pc, #444]	; (800ca74 <I2C_Slave_ISR_DMA+0x280>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d047      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a6d      	ldr	r2, [pc, #436]	; (800ca78 <I2C_Slave_ISR_DMA+0x284>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d041      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a6b      	ldr	r2, [pc, #428]	; (800ca7c <I2C_Slave_ISR_DMA+0x288>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d03b      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a69      	ldr	r2, [pc, #420]	; (800ca80 <I2C_Slave_ISR_DMA+0x28c>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d035      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a67      	ldr	r2, [pc, #412]	; (800ca84 <I2C_Slave_ISR_DMA+0x290>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d02f      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a65      	ldr	r2, [pc, #404]	; (800ca88 <I2C_Slave_ISR_DMA+0x294>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d029      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a63      	ldr	r2, [pc, #396]	; (800ca8c <I2C_Slave_ISR_DMA+0x298>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d023      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a61      	ldr	r2, [pc, #388]	; (800ca90 <I2C_Slave_ISR_DMA+0x29c>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d01d      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a5f      	ldr	r2, [pc, #380]	; (800ca94 <I2C_Slave_ISR_DMA+0x2a0>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d017      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a5d      	ldr	r2, [pc, #372]	; (800ca98 <I2C_Slave_ISR_DMA+0x2a4>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d011      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a5b      	ldr	r2, [pc, #364]	; (800ca9c <I2C_Slave_ISR_DMA+0x2a8>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d00b      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a59      	ldr	r2, [pc, #356]	; (800caa0 <I2C_Slave_ISR_DMA+0x2ac>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d005      	beq.n	800c94c <I2C_Slave_ISR_DMA+0x158>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a57      	ldr	r2, [pc, #348]	; (800caa4 <I2C_Slave_ISR_DMA+0x2b0>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d109      	bne.n	800c960 <I2C_Slave_ISR_DMA+0x16c>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	bf0c      	ite	eq
 800c958:	2301      	moveq	r3, #1
 800c95a:	2300      	movne	r3, #0
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	e008      	b.n	800c972 <I2C_Slave_ISR_DMA+0x17e>
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	bf0c      	ite	eq
 800c96c:	2301      	moveq	r3, #1
 800c96e:	2300      	movne	r3, #0
 800c970:	b2db      	uxtb	r3, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	d001      	beq.n	800c97a <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c976:	2301      	movs	r3, #1
 800c978:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f000 809f 	beq.w	800cac2 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	0b9b      	lsrs	r3, r3, #14
 800c988:	f003 0301 	and.w	r3, r3, #1
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 8098 	beq.w	800cac2 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a33      	ldr	r2, [pc, #204]	; (800ca68 <I2C_Slave_ISR_DMA+0x274>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d059      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a31      	ldr	r2, [pc, #196]	; (800ca6c <I2C_Slave_ISR_DMA+0x278>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d053      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a2f      	ldr	r2, [pc, #188]	; (800ca70 <I2C_Slave_ISR_DMA+0x27c>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d04d      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a2d      	ldr	r2, [pc, #180]	; (800ca74 <I2C_Slave_ISR_DMA+0x280>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d047      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a2b      	ldr	r2, [pc, #172]	; (800ca78 <I2C_Slave_ISR_DMA+0x284>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d041      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a29      	ldr	r2, [pc, #164]	; (800ca7c <I2C_Slave_ISR_DMA+0x288>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d03b      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a27      	ldr	r2, [pc, #156]	; (800ca80 <I2C_Slave_ISR_DMA+0x28c>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d035      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a25      	ldr	r2, [pc, #148]	; (800ca84 <I2C_Slave_ISR_DMA+0x290>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d02f      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a23      	ldr	r2, [pc, #140]	; (800ca88 <I2C_Slave_ISR_DMA+0x294>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d029      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a21      	ldr	r2, [pc, #132]	; (800ca8c <I2C_Slave_ISR_DMA+0x298>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d023      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a1f      	ldr	r2, [pc, #124]	; (800ca90 <I2C_Slave_ISR_DMA+0x29c>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d01d      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a1d      	ldr	r2, [pc, #116]	; (800ca94 <I2C_Slave_ISR_DMA+0x2a0>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d017      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a1b      	ldr	r2, [pc, #108]	; (800ca98 <I2C_Slave_ISR_DMA+0x2a4>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d011      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a19      	ldr	r2, [pc, #100]	; (800ca9c <I2C_Slave_ISR_DMA+0x2a8>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d00b      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a17      	ldr	r2, [pc, #92]	; (800caa0 <I2C_Slave_ISR_DMA+0x2ac>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d005      	beq.n	800ca52 <I2C_Slave_ISR_DMA+0x25e>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a15      	ldr	r2, [pc, #84]	; (800caa4 <I2C_Slave_ISR_DMA+0x2b0>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d12a      	bne.n	800caa8 <I2C_Slave_ISR_DMA+0x2b4>
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	bf0c      	ite	eq
 800ca5e:	2301      	moveq	r3, #1
 800ca60:	2300      	movne	r3, #0
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	e029      	b.n	800caba <I2C_Slave_ISR_DMA+0x2c6>
 800ca66:	bf00      	nop
 800ca68:	40020010 	.word	0x40020010
 800ca6c:	40020028 	.word	0x40020028
 800ca70:	40020040 	.word	0x40020040
 800ca74:	40020058 	.word	0x40020058
 800ca78:	40020070 	.word	0x40020070
 800ca7c:	40020088 	.word	0x40020088
 800ca80:	400200a0 	.word	0x400200a0
 800ca84:	400200b8 	.word	0x400200b8
 800ca88:	40020410 	.word	0x40020410
 800ca8c:	40020428 	.word	0x40020428
 800ca90:	40020440 	.word	0x40020440
 800ca94:	40020458 	.word	0x40020458
 800ca98:	40020470 	.word	0x40020470
 800ca9c:	40020488 	.word	0x40020488
 800caa0:	400204a0 	.word	0x400204a0
 800caa4:	400204b8 	.word	0x400204b8
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	bf0c      	ite	eq
 800cab4:	2301      	moveq	r3, #1
 800cab6:	2300      	movne	r3, #0
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800cabe:	2301      	movs	r3, #1
 800cac0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d128      	bne.n	800cb1a <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b28      	cmp	r3, #40	; 0x28
 800cad2:	d108      	bne.n	800cae6 <I2C_Slave_ISR_DMA+0x2f2>
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cada:	d104      	bne.n	800cae6 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800cadc:	68b9      	ldr	r1, [r7, #8]
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f000 fcb0 	bl	800d444 <I2C_ITListenCplt>
 800cae4:	e048      	b.n	800cb78 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caec:	b2db      	uxtb	r3, r3
 800caee:	2b29      	cmp	r3, #41	; 0x29
 800caf0:	d10e      	bne.n	800cb10 <I2C_Slave_ISR_DMA+0x31c>
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800caf8:	d00a      	beq.n	800cb10 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2210      	movs	r2, #16
 800cb00:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f000 fe0b 	bl	800d71e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f000 f918 	bl	800cd3e <I2C_ITSlaveSeqCplt>
 800cb0e:	e033      	b.n	800cb78 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2210      	movs	r2, #16
 800cb16:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800cb18:	e034      	b.n	800cb84 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2210      	movs	r2, #16
 800cb20:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb26:	f043 0204 	orr.w	r2, r3, #4
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb34:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <I2C_Slave_ISR_DMA+0x350>
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cb42:	d11f      	bne.n	800cb84 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cb44:	7dfb      	ldrb	r3, [r7, #23]
 800cb46:	2b21      	cmp	r3, #33	; 0x21
 800cb48:	d002      	beq.n	800cb50 <I2C_Slave_ISR_DMA+0x35c>
 800cb4a:	7dfb      	ldrb	r3, [r7, #23]
 800cb4c:	2b29      	cmp	r3, #41	; 0x29
 800cb4e:	d103      	bne.n	800cb58 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2221      	movs	r2, #33	; 0x21
 800cb54:	631a      	str	r2, [r3, #48]	; 0x30
 800cb56:	e008      	b.n	800cb6a <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	2b22      	cmp	r3, #34	; 0x22
 800cb5c:	d002      	beq.n	800cb64 <I2C_Slave_ISR_DMA+0x370>
 800cb5e:	7dfb      	ldrb	r3, [r7, #23]
 800cb60:	2b2a      	cmp	r3, #42	; 0x2a
 800cb62:	d102      	bne.n	800cb6a <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2222      	movs	r2, #34	; 0x22
 800cb68:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb6e:	4619      	mov	r1, r3
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f000 fcbd 	bl	800d4f0 <I2C_ITError>
      if (treatdmanack == 1U)
 800cb76:	e005      	b.n	800cb84 <I2C_Slave_ISR_DMA+0x390>
 800cb78:	e004      	b.n	800cb84 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2210      	movs	r2, #16
 800cb80:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb82:	e011      	b.n	800cba8 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800cb84:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb86:	e00f      	b.n	800cba8 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	08db      	lsrs	r3, r3, #3
 800cb8c:	f003 0301 	and.w	r3, r3, #1
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d009      	beq.n	800cba8 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	08db      	lsrs	r3, r3, #3
 800cb98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d003      	beq.n	800cba8 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800cba0:	68b9      	ldr	r1, [r7, #8]
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f000 f80a 	bl	800cbbc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3720      	adds	r7, #32
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop

0800cbbc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cbd2:	2b28      	cmp	r3, #40	; 0x28
 800cbd4:	d16a      	bne.n	800ccac <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	699b      	ldr	r3, [r3, #24]
 800cbdc:	0c1b      	lsrs	r3, r3, #16
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	0c1b      	lsrs	r3, r3, #16
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cbf4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc02:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cc10:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d138      	bne.n	800cc8c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cc1a:	897b      	ldrh	r3, [r7, #10]
 800cc1c:	09db      	lsrs	r3, r3, #7
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	89bb      	ldrh	r3, [r7, #12]
 800cc22:	4053      	eors	r3, r2
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	f003 0306 	and.w	r3, r3, #6
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d11c      	bne.n	800cc68 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800cc2e:	897b      	ldrh	r3, [r7, #10]
 800cc30:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d13b      	bne.n	800ccbc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2208      	movs	r2, #8
 800cc50:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc5a:	89ba      	ldrh	r2, [r7, #12]
 800cc5c:	7bfb      	ldrb	r3, [r7, #15]
 800cc5e:	4619      	mov	r1, r3
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff f91e 	bl	800bea2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cc66:	e029      	b.n	800ccbc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800cc68:	893b      	ldrh	r3, [r7, #8]
 800cc6a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cc6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f001 f81d 	bl	800dcb0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc7e:	89ba      	ldrh	r2, [r7, #12]
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
 800cc82:	4619      	mov	r1, r3
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff f90c 	bl	800bea2 <HAL_I2C_AddrCallback>
}
 800cc8a:	e017      	b.n	800ccbc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cc8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f001 f80d 	bl	800dcb0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc9e:	89ba      	ldrh	r2, [r7, #12]
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	4619      	mov	r1, r3
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f7ff f8fc 	bl	800bea2 <HAL_I2C_AddrCallback>
}
 800ccaa:	e007      	b.n	800ccbc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2208      	movs	r2, #8
 800ccb2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800ccbc:	bf00      	nop
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	2b21      	cmp	r3, #33	; 0x21
 800ccde:	d115      	bne.n	800cd0c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2220      	movs	r2, #32
 800cce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2211      	movs	r2, #17
 800ccec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 ffda 	bl	800dcb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff f8a4 	bl	800be52 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cd0a:	e014      	b.n	800cd36 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2220      	movs	r2, #32
 800cd10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2212      	movs	r2, #18
 800cd18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cd20:	2102      	movs	r1, #2
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 ffc4 	bl	800dcb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f7ff f898 	bl	800be66 <HAL_I2C_MasterRxCpltCallback>
}
 800cd36:	bf00      	nop
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b084      	sub	sp, #16
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	0b9b      	lsrs	r3, r3, #14
 800cd5a:	f003 0301 	and.w	r3, r3, #1
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d008      	beq.n	800cd74 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cd70:	601a      	str	r2, [r3, #0]
 800cd72:	e00d      	b.n	800cd90 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	0bdb      	lsrs	r3, r3, #15
 800cd78:	f003 0301 	and.w	r3, r3, #1
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d007      	beq.n	800cd90 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd8e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	2b29      	cmp	r3, #41	; 0x29
 800cd9a:	d112      	bne.n	800cdc2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2228      	movs	r2, #40	; 0x28
 800cda0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2221      	movs	r2, #33	; 0x21
 800cda8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cdaa:	2101      	movs	r1, #1
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 ff7f 	bl	800dcb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7ff f85d 	bl	800be7a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cdc0:	e017      	b.n	800cdf2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b2a      	cmp	r3, #42	; 0x2a
 800cdcc:	d111      	bne.n	800cdf2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2228      	movs	r2, #40	; 0x28
 800cdd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2222      	movs	r2, #34	; 0x22
 800cdda:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cddc:	2102      	movs	r1, #2
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 ff66 	bl	800dcb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f7ff f84e 	bl	800be8e <HAL_I2C_SlaveRxCpltCallback>
}
 800cdf2:	bf00      	nop
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
	...

0800cdfc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2220      	movs	r2, #32
 800ce10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b21      	cmp	r3, #33	; 0x21
 800ce1c:	d107      	bne.n	800ce2e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ce1e:	2101      	movs	r1, #1
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 ff45 	bl	800dcb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2211      	movs	r2, #17
 800ce2a:	631a      	str	r2, [r3, #48]	; 0x30
 800ce2c:	e00c      	b.n	800ce48 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b22      	cmp	r3, #34	; 0x22
 800ce38:	d106      	bne.n	800ce48 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ce3a:	2102      	movs	r1, #2
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 ff37 	bl	800dcb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2212      	movs	r2, #18
 800ce46:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6859      	ldr	r1, [r3, #4]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	4b4d      	ldr	r3, [pc, #308]	; (800cf88 <I2C_ITMasterCplt+0x18c>)
 800ce54:	400b      	ands	r3, r1
 800ce56:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4a4a      	ldr	r2, [pc, #296]	; (800cf8c <I2C_ITMasterCplt+0x190>)
 800ce62:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	091b      	lsrs	r3, r3, #4
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d009      	beq.n	800ce84 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2210      	movs	r2, #16
 800ce76:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce7c:	f043 0204 	orr.w	r2, r3, #4
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b60      	cmp	r3, #96	; 0x60
 800ce8e:	d10b      	bne.n	800cea8 <I2C_ITMasterCplt+0xac>
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	089b      	lsrs	r3, r3, #2
 800ce94:	f003 0301 	and.w	r3, r3, #1
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d005      	beq.n	800cea8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800cea6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 fc38 	bl	800d71e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b60      	cmp	r3, #96	; 0x60
 800cebe:	d002      	beq.n	800cec6 <I2C_ITMasterCplt+0xca>
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d006      	beq.n	800ced4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceca:	4619      	mov	r1, r3
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 fb0f 	bl	800d4f0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ced2:	e054      	b.n	800cf7e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	2b21      	cmp	r3, #33	; 0x21
 800cede:	d124      	bne.n	800cf2a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2220      	movs	r2, #32
 800cee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	2b40      	cmp	r3, #64	; 0x40
 800cef8:	d10b      	bne.n	800cf12 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7fe ffe1 	bl	800bed2 <HAL_I2C_MemTxCpltCallback>
}
 800cf10:	e035      	b.n	800cf7e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7fe ff95 	bl	800be52 <HAL_I2C_MasterTxCpltCallback>
}
 800cf28:	e029      	b.n	800cf7e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	2b22      	cmp	r3, #34	; 0x22
 800cf34:	d123      	bne.n	800cf7e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2220      	movs	r2, #32
 800cf3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b40      	cmp	r3, #64	; 0x40
 800cf4e:	d10b      	bne.n	800cf68 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7fe ffc0 	bl	800bee6 <HAL_I2C_MemRxCpltCallback>
}
 800cf66:	e00a      	b.n	800cf7e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7fe ff74 	bl	800be66 <HAL_I2C_MasterRxCpltCallback>
}
 800cf7e:	bf00      	nop
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	fe00e800 	.word	0xfe00e800
 800cf8c:	ffff0000 	.word	0xffff0000

0800cf90 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfaa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfb2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2220      	movs	r2, #32
 800cfba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cfbc:	7afb      	ldrb	r3, [r7, #11]
 800cfbe:	2b21      	cmp	r3, #33	; 0x21
 800cfc0:	d002      	beq.n	800cfc8 <I2C_ITSlaveCplt+0x38>
 800cfc2:	7afb      	ldrb	r3, [r7, #11]
 800cfc4:	2b29      	cmp	r3, #41	; 0x29
 800cfc6:	d108      	bne.n	800cfda <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cfc8:	f248 0101 	movw	r1, #32769	; 0x8001
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fe6f 	bl	800dcb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2221      	movs	r2, #33	; 0x21
 800cfd6:	631a      	str	r2, [r3, #48]	; 0x30
 800cfd8:	e019      	b.n	800d00e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cfda:	7afb      	ldrb	r3, [r7, #11]
 800cfdc:	2b22      	cmp	r3, #34	; 0x22
 800cfde:	d002      	beq.n	800cfe6 <I2C_ITSlaveCplt+0x56>
 800cfe0:	7afb      	ldrb	r3, [r7, #11]
 800cfe2:	2b2a      	cmp	r3, #42	; 0x2a
 800cfe4:	d108      	bne.n	800cff8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cfe6:	f248 0102 	movw	r1, #32770	; 0x8002
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 fe60 	bl	800dcb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2222      	movs	r2, #34	; 0x22
 800cff4:	631a      	str	r2, [r3, #48]	; 0x30
 800cff6:	e00a      	b.n	800d00e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800cff8:	7afb      	ldrb	r3, [r7, #11]
 800cffa:	2b28      	cmp	r3, #40	; 0x28
 800cffc:	d107      	bne.n	800d00e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cffe:	f248 0103 	movw	r1, #32771	; 0x8003
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 fe54 	bl	800dcb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	685a      	ldr	r2, [r3, #4]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d01c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	6859      	ldr	r1, [r3, #4]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	4b80      	ldr	r3, [pc, #512]	; (800d22c <I2C_ITSlaveCplt+0x29c>)
 800d02a:	400b      	ands	r3, r1
 800d02c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fb75 	bl	800d71e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	0b9b      	lsrs	r3, r3, #14
 800d038:	f003 0301 	and.w	r3, r3, #1
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d07a      	beq.n	800d136 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d04e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d054:	2b00      	cmp	r3, #0
 800d056:	f000 8112 	beq.w	800d27e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a73      	ldr	r2, [pc, #460]	; (800d230 <I2C_ITSlaveCplt+0x2a0>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d059      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a71      	ldr	r2, [pc, #452]	; (800d234 <I2C_ITSlaveCplt+0x2a4>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d053      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a6f      	ldr	r2, [pc, #444]	; (800d238 <I2C_ITSlaveCplt+0x2a8>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d04d      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a6d      	ldr	r2, [pc, #436]	; (800d23c <I2C_ITSlaveCplt+0x2ac>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d047      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a6b      	ldr	r2, [pc, #428]	; (800d240 <I2C_ITSlaveCplt+0x2b0>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d041      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a69      	ldr	r2, [pc, #420]	; (800d244 <I2C_ITSlaveCplt+0x2b4>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d03b      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a67      	ldr	r2, [pc, #412]	; (800d248 <I2C_ITSlaveCplt+0x2b8>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d035      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a65      	ldr	r2, [pc, #404]	; (800d24c <I2C_ITSlaveCplt+0x2bc>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d02f      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a63      	ldr	r2, [pc, #396]	; (800d250 <I2C_ITSlaveCplt+0x2c0>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d029      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a61      	ldr	r2, [pc, #388]	; (800d254 <I2C_ITSlaveCplt+0x2c4>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d023      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a5f      	ldr	r2, [pc, #380]	; (800d258 <I2C_ITSlaveCplt+0x2c8>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d01d      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a5d      	ldr	r2, [pc, #372]	; (800d25c <I2C_ITSlaveCplt+0x2cc>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d017      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a5b      	ldr	r2, [pc, #364]	; (800d260 <I2C_ITSlaveCplt+0x2d0>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d011      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a59      	ldr	r2, [pc, #356]	; (800d264 <I2C_ITSlaveCplt+0x2d4>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d00b      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a57      	ldr	r2, [pc, #348]	; (800d268 <I2C_ITSlaveCplt+0x2d8>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d005      	beq.n	800d11a <I2C_ITSlaveCplt+0x18a>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a55      	ldr	r2, [pc, #340]	; (800d26c <I2C_ITSlaveCplt+0x2dc>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d105      	bne.n	800d126 <I2C_ITSlaveCplt+0x196>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	b29b      	uxth	r3, r3
 800d124:	e004      	b.n	800d130 <I2C_ITSlaveCplt+0x1a0>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	b29b      	uxth	r3, r3
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	8553      	strh	r3, [r2, #42]	; 0x2a
 800d134:	e0a3      	b.n	800d27e <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	0bdb      	lsrs	r3, r3, #15
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f000 809d 	beq.w	800d27e <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d152:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 8090 	beq.w	800d27e <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a32      	ldr	r2, [pc, #200]	; (800d230 <I2C_ITSlaveCplt+0x2a0>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d059      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a30      	ldr	r2, [pc, #192]	; (800d234 <I2C_ITSlaveCplt+0x2a4>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d053      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a2e      	ldr	r2, [pc, #184]	; (800d238 <I2C_ITSlaveCplt+0x2a8>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d04d      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a2c      	ldr	r2, [pc, #176]	; (800d23c <I2C_ITSlaveCplt+0x2ac>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d047      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a2a      	ldr	r2, [pc, #168]	; (800d240 <I2C_ITSlaveCplt+0x2b0>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d041      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a28      	ldr	r2, [pc, #160]	; (800d244 <I2C_ITSlaveCplt+0x2b4>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d03b      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a26      	ldr	r2, [pc, #152]	; (800d248 <I2C_ITSlaveCplt+0x2b8>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d035      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a24      	ldr	r2, [pc, #144]	; (800d24c <I2C_ITSlaveCplt+0x2bc>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d02f      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a22      	ldr	r2, [pc, #136]	; (800d250 <I2C_ITSlaveCplt+0x2c0>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d029      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a20      	ldr	r2, [pc, #128]	; (800d254 <I2C_ITSlaveCplt+0x2c4>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d023      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a1e      	ldr	r2, [pc, #120]	; (800d258 <I2C_ITSlaveCplt+0x2c8>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d01d      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a1c      	ldr	r2, [pc, #112]	; (800d25c <I2C_ITSlaveCplt+0x2cc>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d017      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a1a      	ldr	r2, [pc, #104]	; (800d260 <I2C_ITSlaveCplt+0x2d0>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d011      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a18      	ldr	r2, [pc, #96]	; (800d264 <I2C_ITSlaveCplt+0x2d4>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d00b      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a16      	ldr	r2, [pc, #88]	; (800d268 <I2C_ITSlaveCplt+0x2d8>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d005      	beq.n	800d21e <I2C_ITSlaveCplt+0x28e>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a14      	ldr	r2, [pc, #80]	; (800d26c <I2C_ITSlaveCplt+0x2dc>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d128      	bne.n	800d270 <I2C_ITSlaveCplt+0x2e0>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	b29b      	uxth	r3, r3
 800d228:	e027      	b.n	800d27a <I2C_ITSlaveCplt+0x2ea>
 800d22a:	bf00      	nop
 800d22c:	fe00e800 	.word	0xfe00e800
 800d230:	40020010 	.word	0x40020010
 800d234:	40020028 	.word	0x40020028
 800d238:	40020040 	.word	0x40020040
 800d23c:	40020058 	.word	0x40020058
 800d240:	40020070 	.word	0x40020070
 800d244:	40020088 	.word	0x40020088
 800d248:	400200a0 	.word	0x400200a0
 800d24c:	400200b8 	.word	0x400200b8
 800d250:	40020410 	.word	0x40020410
 800d254:	40020428 	.word	0x40020428
 800d258:	40020440 	.word	0x40020440
 800d25c:	40020458 	.word	0x40020458
 800d260:	40020470 	.word	0x40020470
 800d264:	40020488 	.word	0x40020488
 800d268:	400204a0 	.word	0x400204a0
 800d26c:	400204b8 	.word	0x400204b8
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	b29b      	uxth	r3, r3
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	089b      	lsrs	r3, r3, #2
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b00      	cmp	r3, #0
 800d288:	d020      	beq.n	800d2cc <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	f023 0304 	bic.w	r3, r3, #4
 800d290:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29c:	b2d2      	uxtb	r2, r2
 800d29e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00c      	beq.n	800d2cc <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d005      	beq.n	800d2e2 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2da:	f043 0204 	orr.w	r2, r3, #4
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	091b      	lsrs	r3, r3, #4
 800d2e6:	f003 0301 	and.w	r3, r3, #1
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d04a      	beq.n	800d384 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	091b      	lsrs	r3, r3, #4
 800d2f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d044      	beq.n	800d384 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	2b00      	cmp	r3, #0
 800d302:	d128      	bne.n	800d356 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	2b28      	cmp	r3, #40	; 0x28
 800d30e:	d108      	bne.n	800d322 <I2C_ITSlaveCplt+0x392>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d316:	d104      	bne.n	800d322 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d318:	6979      	ldr	r1, [r7, #20]
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f892 	bl	800d444 <I2C_ITListenCplt>
 800d320:	e030      	b.n	800d384 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	2b29      	cmp	r3, #41	; 0x29
 800d32c:	d10e      	bne.n	800d34c <I2C_ITSlaveCplt+0x3bc>
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d334:	d00a      	beq.n	800d34c <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2210      	movs	r2, #16
 800d33c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f9ed 	bl	800d71e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff fcfa 	bl	800cd3e <I2C_ITSlaveSeqCplt>
 800d34a:	e01b      	b.n	800d384 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2210      	movs	r2, #16
 800d352:	61da      	str	r2, [r3, #28]
 800d354:	e016      	b.n	800d384 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2210      	movs	r2, #16
 800d35c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d362:	f043 0204 	orr.w	r2, r3, #4
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d003      	beq.n	800d378 <I2C_ITSlaveCplt+0x3e8>
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d376:	d105      	bne.n	800d384 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f8b6 	bl	800d4f0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d396:	2b00      	cmp	r3, #0
 800d398:	d010      	beq.n	800d3bc <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 f8a5 	bl	800d4f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	2b28      	cmp	r3, #40	; 0x28
 800d3b0:	d141      	bne.n	800d436 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d3b2:	6979      	ldr	r1, [r7, #20]
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f000 f845 	bl	800d444 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d3ba:	e03c      	b.n	800d436 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d3c4:	d014      	beq.n	800d3f0 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7ff fcb9 	bl	800cd3e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a1c      	ldr	r2, [pc, #112]	; (800d440 <I2C_ITSlaveCplt+0x4b0>)
 800d3d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2220      	movs	r2, #32
 800d3d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f7fe fd68 	bl	800bebe <HAL_I2C_ListenCpltCallback>
}
 800d3ee:	e022      	b.n	800d436 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	2b22      	cmp	r3, #34	; 0x22
 800d3fa:	d10e      	bne.n	800d41a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2220      	movs	r2, #32
 800d400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7fe fd3b 	bl	800be8e <HAL_I2C_SlaveRxCpltCallback>
}
 800d418:	e00d      	b.n	800d436 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2220      	movs	r2, #32
 800d41e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7fe fd22 	bl	800be7a <HAL_I2C_SlaveTxCpltCallback>
}
 800d436:	bf00      	nop
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	ffff0000 	.word	0xffff0000

0800d444 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a26      	ldr	r2, [pc, #152]	; (800d4ec <I2C_ITListenCplt+0xa8>)
 800d452:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2220      	movs	r2, #32
 800d45e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	089b      	lsrs	r3, r3, #2
 800d474:	f003 0301 	and.w	r3, r3, #1
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d022      	beq.n	800d4c2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d486:	b2d2      	uxtb	r2, r2
 800d488:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48e:	1c5a      	adds	r2, r3, #1
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d012      	beq.n	800d4c2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	3b01      	subs	r3, #1
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ba:	f043 0204 	orr.w	r2, r3, #4
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d4c2:	f248 0103 	movw	r1, #32771	; 0x8003
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fbf2 	bl	800dcb0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2210      	movs	r2, #16
 800d4d2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f7fe fcee 	bl	800bebe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d4e2:	bf00      	nop
 800d4e4:	3708      	adds	r7, #8
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	ffff0000 	.word	0xffff0000

0800d4f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d500:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4a6d      	ldr	r2, [pc, #436]	; (800d6c4 <I2C_ITError+0x1d4>)
 800d50e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	431a      	orrs	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d522:	7bfb      	ldrb	r3, [r7, #15]
 800d524:	2b28      	cmp	r3, #40	; 0x28
 800d526:	d005      	beq.n	800d534 <I2C_ITError+0x44>
 800d528:	7bfb      	ldrb	r3, [r7, #15]
 800d52a:	2b29      	cmp	r3, #41	; 0x29
 800d52c:	d002      	beq.n	800d534 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d52e:	7bfb      	ldrb	r3, [r7, #15]
 800d530:	2b2a      	cmp	r3, #42	; 0x2a
 800d532:	d10b      	bne.n	800d54c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d534:	2103      	movs	r1, #3
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fbba 	bl	800dcb0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2228      	movs	r2, #40	; 0x28
 800d540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4a60      	ldr	r2, [pc, #384]	; (800d6c8 <I2C_ITError+0x1d8>)
 800d548:	635a      	str	r2, [r3, #52]	; 0x34
 800d54a:	e030      	b.n	800d5ae <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d54c:	f248 0103 	movw	r1, #32771	; 0x8003
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 fbad 	bl	800dcb0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 f8e1 	bl	800d71e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d562:	b2db      	uxtb	r3, r3
 800d564:	2b60      	cmp	r3, #96	; 0x60
 800d566:	d01f      	beq.n	800d5a8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2220      	movs	r2, #32
 800d56c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	699b      	ldr	r3, [r3, #24]
 800d576:	f003 0320 	and.w	r3, r3, #32
 800d57a:	2b20      	cmp	r3, #32
 800d57c:	d114      	bne.n	800d5a8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	699b      	ldr	r3, [r3, #24]
 800d584:	f003 0310 	and.w	r3, r3, #16
 800d588:	2b10      	cmp	r3, #16
 800d58a:	d109      	bne.n	800d5a0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2210      	movs	r2, #16
 800d592:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d598:	f043 0204 	orr.w	r2, r3, #4
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2220      	movs	r2, #32
 800d5a6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d039      	beq.n	800d630 <I2C_ITError+0x140>
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	2b11      	cmp	r3, #17
 800d5c0:	d002      	beq.n	800d5c8 <I2C_ITError+0xd8>
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	2b21      	cmp	r3, #33	; 0x21
 800d5c6:	d133      	bne.n	800d630 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5d6:	d107      	bne.n	800d5e8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d5e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fd f857 	bl	800a6a0 <HAL_DMA_GetState>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d017      	beq.n	800d628 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fc:	4a33      	ldr	r2, [pc, #204]	; (800d6cc <I2C_ITError+0x1dc>)
 800d5fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fb fed7 	bl	80093c0 <HAL_DMA_Abort_IT>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d04d      	beq.n	800d6b4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d622:	4610      	mov	r0, r2
 800d624:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d626:	e045      	b.n	800d6b4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f851 	bl	800d6d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d62e:	e041      	b.n	800d6b4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d634:	2b00      	cmp	r3, #0
 800d636:	d039      	beq.n	800d6ac <I2C_ITError+0x1bc>
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	2b12      	cmp	r3, #18
 800d63c:	d002      	beq.n	800d644 <I2C_ITError+0x154>
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	2b22      	cmp	r3, #34	; 0x22
 800d642:	d133      	bne.n	800d6ac <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d64e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d652:	d107      	bne.n	800d664 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d662:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fd f819 	bl	800a6a0 <HAL_DMA_GetState>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b01      	cmp	r3, #1
 800d672:	d017      	beq.n	800d6a4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d678:	4a14      	ldr	r2, [pc, #80]	; (800d6cc <I2C_ITError+0x1dc>)
 800d67a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d688:	4618      	mov	r0, r3
 800d68a:	f7fb fe99 	bl	80093c0 <HAL_DMA_Abort_IT>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d011      	beq.n	800d6b8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d69e:	4610      	mov	r0, r2
 800d6a0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d6a2:	e009      	b.n	800d6b8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 f813 	bl	800d6d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d6aa:	e005      	b.n	800d6b8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f80f 	bl	800d6d0 <I2C_TreatErrorCallback>
  }
}
 800d6b2:	e002      	b.n	800d6ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d6b4:	bf00      	nop
 800d6b6:	e000      	b.n	800d6ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d6b8:	bf00      	nop
}
 800d6ba:	bf00      	nop
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	ffff0000 	.word	0xffff0000
 800d6c8:	0800c1a7 	.word	0x0800c1a7
 800d6cc:	0800db09 	.word	0x0800db09

0800d6d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	2b60      	cmp	r3, #96	; 0x60
 800d6e2:	d10e      	bne.n	800d702 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2220      	movs	r2, #32
 800d6e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f7fe fc07 	bl	800bf0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d700:	e009      	b.n	800d716 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7fe fbf2 	bl	800befa <HAL_I2C_ErrorCallback>
}
 800d716:	bf00      	nop
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d71e:	b480      	push	{r7}
 800d720:	b083      	sub	sp, #12
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	699b      	ldr	r3, [r3, #24]
 800d72c:	f003 0302 	and.w	r3, r3, #2
 800d730:	2b02      	cmp	r3, #2
 800d732:	d103      	bne.n	800d73c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2200      	movs	r2, #0
 800d73a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	f003 0301 	and.w	r3, r3, #1
 800d746:	2b01      	cmp	r3, #1
 800d748:	d007      	beq.n	800d75a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	699a      	ldr	r2, [r3, #24]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f042 0201 	orr.w	r2, r2, #1
 800d758:	619a      	str	r2, [r3, #24]
  }
}
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b084      	sub	sp, #16
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d772:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d782:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d788:	b29b      	uxth	r3, r3
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d104      	bne.n	800d798 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d78e:	2120      	movs	r1, #32
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f000 fa09 	bl	800dba8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d796:	e02d      	b.n	800d7f4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d7a0:	441a      	add	r2, r3
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	2bff      	cmp	r3, #255	; 0xff
 800d7ae:	d903      	bls.n	800d7b8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	22ff      	movs	r2, #255	; 0xff
 800d7b4:	851a      	strh	r2, [r3, #40]	; 0x28
 800d7b6:	e004      	b.n	800d7c2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3328      	adds	r3, #40	; 0x28
 800d7d2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d7d8:	f7fb f86a 	bl	80088b0 <HAL_DMA_Start_IT>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d004      	beq.n	800d7ec <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d7e2:	2110      	movs	r1, #16
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f7ff fe83 	bl	800d4f0 <I2C_ITError>
}
 800d7ea:	e003      	b.n	800d7f4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d7ec:	2140      	movs	r1, #64	; 0x40
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f000 f9da 	bl	800dba8 <I2C_Enable_IRQ>
}
 800d7f4:	bf00      	nop
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d808:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d818:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d81e:	b29b      	uxth	r3, r3
 800d820:	2b00      	cmp	r3, #0
 800d822:	d104      	bne.n	800d82e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d824:	2120      	movs	r1, #32
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f000 f9be 	bl	800dba8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d82c:	e02d      	b.n	800d88a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d836:	441a      	add	r2, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d840:	b29b      	uxth	r3, r3
 800d842:	2bff      	cmp	r3, #255	; 0xff
 800d844:	d903      	bls.n	800d84e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	22ff      	movs	r2, #255	; 0xff
 800d84a:	851a      	strh	r2, [r3, #40]	; 0x28
 800d84c:	e004      	b.n	800d858 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d852:	b29a      	uxth	r2, r3
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	3324      	adds	r3, #36	; 0x24
 800d862:	4619      	mov	r1, r3
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d868:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d86e:	f7fb f81f 	bl	80088b0 <HAL_DMA_Start_IT>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d004      	beq.n	800d882 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d878:	2110      	movs	r1, #16
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f7ff fe38 	bl	800d4f0 <I2C_ITError>
}
 800d880:	e003      	b.n	800d88a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d882:	2140      	movs	r1, #64	; 0x40
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f000 f98f 	bl	800dba8 <I2C_Enable_IRQ>
}
 800d88a:	bf00      	nop
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
	...

0800d894 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b084      	sub	sp, #16
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d89c:	2300      	movs	r3, #0
 800d89e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d076      	beq.n	800d99c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a71      	ldr	r2, [pc, #452]	; (800da7c <I2C_DMAError+0x1e8>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d059      	beq.n	800d96e <I2C_DMAError+0xda>
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a6f      	ldr	r2, [pc, #444]	; (800da80 <I2C_DMAError+0x1ec>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d053      	beq.n	800d96e <I2C_DMAError+0xda>
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a6d      	ldr	r2, [pc, #436]	; (800da84 <I2C_DMAError+0x1f0>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d04d      	beq.n	800d96e <I2C_DMAError+0xda>
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a6b      	ldr	r2, [pc, #428]	; (800da88 <I2C_DMAError+0x1f4>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d047      	beq.n	800d96e <I2C_DMAError+0xda>
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a69      	ldr	r2, [pc, #420]	; (800da8c <I2C_DMAError+0x1f8>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d041      	beq.n	800d96e <I2C_DMAError+0xda>
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a67      	ldr	r2, [pc, #412]	; (800da90 <I2C_DMAError+0x1fc>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d03b      	beq.n	800d96e <I2C_DMAError+0xda>
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a65      	ldr	r2, [pc, #404]	; (800da94 <I2C_DMAError+0x200>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d035      	beq.n	800d96e <I2C_DMAError+0xda>
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a63      	ldr	r2, [pc, #396]	; (800da98 <I2C_DMAError+0x204>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d02f      	beq.n	800d96e <I2C_DMAError+0xda>
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a61      	ldr	r2, [pc, #388]	; (800da9c <I2C_DMAError+0x208>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d029      	beq.n	800d96e <I2C_DMAError+0xda>
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4a5f      	ldr	r2, [pc, #380]	; (800daa0 <I2C_DMAError+0x20c>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d023      	beq.n	800d96e <I2C_DMAError+0xda>
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a5d      	ldr	r2, [pc, #372]	; (800daa4 <I2C_DMAError+0x210>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d01d      	beq.n	800d96e <I2C_DMAError+0xda>
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a5b      	ldr	r2, [pc, #364]	; (800daa8 <I2C_DMAError+0x214>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d017      	beq.n	800d96e <I2C_DMAError+0xda>
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a59      	ldr	r2, [pc, #356]	; (800daac <I2C_DMAError+0x218>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d011      	beq.n	800d96e <I2C_DMAError+0xda>
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a57      	ldr	r2, [pc, #348]	; (800dab0 <I2C_DMAError+0x21c>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d00b      	beq.n	800d96e <I2C_DMAError+0xda>
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a55      	ldr	r2, [pc, #340]	; (800dab4 <I2C_DMAError+0x220>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d005      	beq.n	800d96e <I2C_DMAError+0xda>
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a53      	ldr	r2, [pc, #332]	; (800dab8 <I2C_DMAError+0x224>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d109      	bne.n	800d982 <I2C_DMAError+0xee>
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	2b00      	cmp	r3, #0
 800d978:	bf0c      	ite	eq
 800d97a:	2301      	moveq	r3, #1
 800d97c:	2300      	movne	r3, #0
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	e008      	b.n	800d994 <I2C_DMAError+0x100>
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	bf0c      	ite	eq
 800d98e:	2301      	moveq	r3, #1
 800d990:	2300      	movne	r3, #0
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b00      	cmp	r3, #0
 800d996:	d001      	beq.n	800d99c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d998:	2301      	movs	r3, #1
 800d99a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f000 8098 	beq.w	800dad6 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a33      	ldr	r2, [pc, #204]	; (800da7c <I2C_DMAError+0x1e8>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d059      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a31      	ldr	r2, [pc, #196]	; (800da80 <I2C_DMAError+0x1ec>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d053      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a2f      	ldr	r2, [pc, #188]	; (800da84 <I2C_DMAError+0x1f0>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d04d      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a2d      	ldr	r2, [pc, #180]	; (800da88 <I2C_DMAError+0x1f4>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d047      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a2b      	ldr	r2, [pc, #172]	; (800da8c <I2C_DMAError+0x1f8>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d041      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a29      	ldr	r2, [pc, #164]	; (800da90 <I2C_DMAError+0x1fc>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d03b      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a27      	ldr	r2, [pc, #156]	; (800da94 <I2C_DMAError+0x200>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d035      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a25      	ldr	r2, [pc, #148]	; (800da98 <I2C_DMAError+0x204>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d02f      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a23      	ldr	r2, [pc, #140]	; (800da9c <I2C_DMAError+0x208>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d029      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a21      	ldr	r2, [pc, #132]	; (800daa0 <I2C_DMAError+0x20c>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d023      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a1f      	ldr	r2, [pc, #124]	; (800daa4 <I2C_DMAError+0x210>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d01d      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a1d      	ldr	r2, [pc, #116]	; (800daa8 <I2C_DMAError+0x214>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d017      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a1b      	ldr	r2, [pc, #108]	; (800daac <I2C_DMAError+0x218>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d011      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a19      	ldr	r2, [pc, #100]	; (800dab0 <I2C_DMAError+0x21c>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d00b      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a17      	ldr	r2, [pc, #92]	; (800dab4 <I2C_DMAError+0x220>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d005      	beq.n	800da66 <I2C_DMAError+0x1d2>
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a15      	ldr	r2, [pc, #84]	; (800dab8 <I2C_DMAError+0x224>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d12a      	bne.n	800dabc <I2C_DMAError+0x228>
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	bf0c      	ite	eq
 800da72:	2301      	moveq	r3, #1
 800da74:	2300      	movne	r3, #0
 800da76:	b2db      	uxtb	r3, r3
 800da78:	e029      	b.n	800dace <I2C_DMAError+0x23a>
 800da7a:	bf00      	nop
 800da7c:	40020010 	.word	0x40020010
 800da80:	40020028 	.word	0x40020028
 800da84:	40020040 	.word	0x40020040
 800da88:	40020058 	.word	0x40020058
 800da8c:	40020070 	.word	0x40020070
 800da90:	40020088 	.word	0x40020088
 800da94:	400200a0 	.word	0x400200a0
 800da98:	400200b8 	.word	0x400200b8
 800da9c:	40020410 	.word	0x40020410
 800daa0:	40020428 	.word	0x40020428
 800daa4:	40020440 	.word	0x40020440
 800daa8:	40020458 	.word	0x40020458
 800daac:	40020470 	.word	0x40020470
 800dab0:	40020488 	.word	0x40020488
 800dab4:	400204a0 	.word	0x400204a0
 800dab8:	400204b8 	.word	0x400204b8
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	bf0c      	ite	eq
 800dac8:	2301      	moveq	r3, #1
 800daca:	2300      	movne	r3, #0
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d001      	beq.n	800dad6 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800dad2:	2301      	movs	r3, #1
 800dad4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7fc fdf0 	bl	800a6bc <HAL_DMA_GetError>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d00e      	beq.n	800db00 <I2C_DMAError+0x26c>
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00b      	beq.n	800db00 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800daf6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800daf8:	2110      	movs	r1, #16
 800dafa:	68b8      	ldr	r0, [r7, #8]
 800dafc:	f7ff fcf8 	bl	800d4f0 <I2C_ITError>
  }
}
 800db00:	bf00      	nop
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db14:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d003      	beq.n	800db26 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db22:	2200      	movs	r2, #0
 800db24:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d003      	beq.n	800db36 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db32:	2200      	movs	r2, #0
 800db34:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f7ff fdca 	bl	800d6d0 <I2C_TreatErrorCallback>
}
 800db3c:	bf00      	nop
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800db44:	b480      	push	{r7}
 800db46:	b087      	sub	sp, #28
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	607b      	str	r3, [r7, #4]
 800db4e:	460b      	mov	r3, r1
 800db50:	817b      	strh	r3, [r7, #10]
 800db52:	4613      	mov	r3, r2
 800db54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db56:	897b      	ldrh	r3, [r7, #10]
 800db58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800db5c:	7a7b      	ldrb	r3, [r7, #9]
 800db5e:	041b      	lsls	r3, r3, #16
 800db60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	685a      	ldr	r2, [r3, #4]
 800db7a:	6a3b      	ldr	r3, [r7, #32]
 800db7c:	0d5b      	lsrs	r3, r3, #21
 800db7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800db82:	4b08      	ldr	r3, [pc, #32]	; (800dba4 <I2C_TransferConfig+0x60>)
 800db84:	430b      	orrs	r3, r1
 800db86:	43db      	mvns	r3, r3
 800db88:	ea02 0103 	and.w	r1, r2, r3
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	430a      	orrs	r2, r1
 800db94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800db96:	bf00      	nop
 800db98:	371c      	adds	r7, #28
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	03ff63ff 	.word	0x03ff63ff

0800dba8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b085      	sub	sp, #20
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbbc:	4a39      	ldr	r2, [pc, #228]	; (800dca4 <I2C_Enable_IRQ+0xfc>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d032      	beq.n	800dc28 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800dbc6:	4a38      	ldr	r2, [pc, #224]	; (800dca8 <I2C_Enable_IRQ+0x100>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d02d      	beq.n	800dc28 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800dbd0:	4a36      	ldr	r2, [pc, #216]	; (800dcac <I2C_Enable_IRQ+0x104>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d028      	beq.n	800dc28 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dbd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	da03      	bge.n	800dbe6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dbe4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dbe6:	887b      	ldrh	r3, [r7, #2]
 800dbe8:	f003 0301 	and.w	r3, r3, #1
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d003      	beq.n	800dbf8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dbf6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dbf8:	887b      	ldrh	r3, [r7, #2]
 800dbfa:	f003 0302 	and.w	r3, r3, #2
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dc08:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dc0a:	887b      	ldrh	r3, [r7, #2]
 800dc0c:	2b10      	cmp	r3, #16
 800dc0e:	d103      	bne.n	800dc18 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dc16:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dc18:	887b      	ldrh	r3, [r7, #2]
 800dc1a:	2b20      	cmp	r3, #32
 800dc1c:	d133      	bne.n	800dc86 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f043 0320 	orr.w	r3, r3, #32
 800dc24:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dc26:	e02e      	b.n	800dc86 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dc28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	da03      	bge.n	800dc38 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dc36:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dc38:	887b      	ldrh	r3, [r7, #2]
 800dc3a:	f003 0301 	and.w	r3, r3, #1
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dc48:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dc4a:	887b      	ldrh	r3, [r7, #2]
 800dc4c:	f003 0302 	and.w	r3, r3, #2
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d003      	beq.n	800dc5c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dc5a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dc5c:	887b      	ldrh	r3, [r7, #2]
 800dc5e:	2b10      	cmp	r3, #16
 800dc60:	d103      	bne.n	800dc6a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dc68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dc6a:	887b      	ldrh	r3, [r7, #2]
 800dc6c:	2b20      	cmp	r3, #32
 800dc6e:	d103      	bne.n	800dc78 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dc76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dc78:	887b      	ldrh	r3, [r7, #2]
 800dc7a:	2b40      	cmp	r3, #64	; 0x40
 800dc7c:	d103      	bne.n	800dc86 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc84:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	6819      	ldr	r1, [r3, #0]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	430a      	orrs	r2, r1
 800dc94:	601a      	str	r2, [r3, #0]
}
 800dc96:	bf00      	nop
 800dc98:	3714      	adds	r7, #20
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	0800c3af 	.word	0x0800c3af
 800dca8:	0800c7f5 	.word	0x0800c7f5
 800dcac:	0800c595 	.word	0x0800c595

0800dcb0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dcc0:	887b      	ldrh	r3, [r7, #2]
 800dcc2:	f003 0301 	and.w	r3, r3, #1
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00f      	beq.n	800dcea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800dcd0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dcde:	2b28      	cmp	r3, #40	; 0x28
 800dce0:	d003      	beq.n	800dcea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800dce8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dcea:	887b      	ldrh	r3, [r7, #2]
 800dcec:	f003 0302 	and.w	r3, r3, #2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00f      	beq.n	800dd14 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800dcfa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dd08:	2b28      	cmp	r3, #40	; 0x28
 800dd0a:	d003      	beq.n	800dd14 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800dd12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dd14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	da03      	bge.n	800dd24 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dd22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dd24:	887b      	ldrh	r3, [r7, #2]
 800dd26:	2b10      	cmp	r3, #16
 800dd28:	d103      	bne.n	800dd32 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dd30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dd32:	887b      	ldrh	r3, [r7, #2]
 800dd34:	2b20      	cmp	r3, #32
 800dd36:	d103      	bne.n	800dd40 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f043 0320 	orr.w	r3, r3, #32
 800dd3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800dd40:	887b      	ldrh	r3, [r7, #2]
 800dd42:	2b40      	cmp	r3, #64	; 0x40
 800dd44:	d103      	bne.n	800dd4e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd4c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	6819      	ldr	r1, [r3, #0]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	43da      	mvns	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	400a      	ands	r2, r1
 800dd5e:	601a      	str	r2, [r3, #0]
}
 800dd60:	bf00      	nop
 800dd62:	3714      	adds	r7, #20
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b20      	cmp	r3, #32
 800dd80:	d138      	bne.n	800ddf4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d101      	bne.n	800dd90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	e032      	b.n	800ddf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2201      	movs	r2, #1
 800dd94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2224      	movs	r2, #36	; 0x24
 800dd9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f022 0201 	bic.w	r2, r2, #1
 800ddae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ddbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	6819      	ldr	r1, [r3, #0]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	430a      	orrs	r2, r1
 800ddce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f042 0201 	orr.w	r2, r2, #1
 800ddde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2220      	movs	r2, #32
 800dde4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	e000      	b.n	800ddf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ddf4:	2302      	movs	r3, #2
  }
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	370c      	adds	r7, #12
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr

0800de02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800de02:	b480      	push	{r7}
 800de04:	b085      	sub	sp, #20
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de12:	b2db      	uxtb	r3, r3
 800de14:	2b20      	cmp	r3, #32
 800de16:	d139      	bne.n	800de8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d101      	bne.n	800de26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800de22:	2302      	movs	r3, #2
 800de24:	e033      	b.n	800de8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2201      	movs	r2, #1
 800de2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2224      	movs	r2, #36	; 0x24
 800de32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f022 0201 	bic.w	r2, r2, #1
 800de44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800de54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	021b      	lsls	r3, r3, #8
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f042 0201 	orr.w	r2, r2, #1
 800de76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2220      	movs	r2, #32
 800de7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800de88:	2300      	movs	r3, #0
 800de8a:	e000      	b.n	800de8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800de8c:	2302      	movs	r3, #2
  }
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3714      	adds	r7, #20
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
	...

0800de9c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dea4:	4b0d      	ldr	r3, [pc, #52]	; (800dedc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800dea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800deaa:	4a0c      	ldr	r2, [pc, #48]	; (800dedc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800deac:	f043 0302 	orr.w	r3, r3, #2
 800deb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800deb4:	4b09      	ldr	r3, [pc, #36]	; (800dedc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800deb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800deba:	f003 0302 	and.w	r3, r3, #2
 800debe:	60fb      	str	r3, [r7, #12]
 800dec0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800dec2:	4b07      	ldr	r3, [pc, #28]	; (800dee0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800dec4:	685a      	ldr	r2, [r3, #4]
 800dec6:	4906      	ldr	r1, [pc, #24]	; (800dee0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4313      	orrs	r3, r2
 800decc:	604b      	str	r3, [r1, #4]
}
 800dece:	bf00      	nop
 800ded0:	3714      	adds	r7, #20
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	58024400 	.word	0x58024400
 800dee0:	58000400 	.word	0x58000400

0800dee4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800def4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800def6:	2300      	movs	r3, #0
}
 800def8:	4618      	mov	r0, r3
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	460b      	mov	r3, r1
 800df0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800df10:	4b18      	ldr	r3, [pc, #96]	; (800df74 <HAL_PWR_EnterSTOPMode+0x70>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f023 0201 	bic.w	r2, r3, #1
 800df18:	4916      	ldr	r1, [pc, #88]	; (800df74 <HAL_PWR_EnterSTOPMode+0x70>)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800df20:	4b14      	ldr	r3, [pc, #80]	; (800df74 <HAL_PWR_EnterSTOPMode+0x70>)
 800df22:	691b      	ldr	r3, [r3, #16]
 800df24:	4a13      	ldr	r2, [pc, #76]	; (800df74 <HAL_PWR_EnterSTOPMode+0x70>)
 800df26:	f023 0305 	bic.w	r3, r3, #5
 800df2a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800df2c:	4b11      	ldr	r3, [pc, #68]	; (800df74 <HAL_PWR_EnterSTOPMode+0x70>)
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	4a10      	ldr	r2, [pc, #64]	; (800df74 <HAL_PWR_EnterSTOPMode+0x70>)
 800df32:	f023 0302 	bic.w	r3, r3, #2
 800df36:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800df38:	4b0f      	ldr	r3, [pc, #60]	; (800df78 <HAL_PWR_EnterSTOPMode+0x74>)
 800df3a:	691b      	ldr	r3, [r3, #16]
 800df3c:	4a0e      	ldr	r2, [pc, #56]	; (800df78 <HAL_PWR_EnterSTOPMode+0x74>)
 800df3e:	f043 0304 	orr.w	r3, r3, #4
 800df42:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800df44:	f3bf 8f4f 	dsb	sy
}
 800df48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800df4a:	f3bf 8f6f 	isb	sy
}
 800df4e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800df50:	78fb      	ldrb	r3, [r7, #3]
 800df52:	2b01      	cmp	r3, #1
 800df54:	d101      	bne.n	800df5a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800df56:	bf30      	wfi
 800df58:	e000      	b.n	800df5c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800df5a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800df5c:	4b06      	ldr	r3, [pc, #24]	; (800df78 <HAL_PWR_EnterSTOPMode+0x74>)
 800df5e:	691b      	ldr	r3, [r3, #16]
 800df60:	4a05      	ldr	r2, [pc, #20]	; (800df78 <HAL_PWR_EnterSTOPMode+0x74>)
 800df62:	f023 0304 	bic.w	r3, r3, #4
 800df66:	6113      	str	r3, [r2, #16]
}
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	58024800 	.word	0x58024800
 800df78:	e000ed00 	.word	0xe000ed00

0800df7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800df84:	4b19      	ldr	r3, [pc, #100]	; (800dfec <HAL_PWREx_ConfigSupply+0x70>)
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	f003 0304 	and.w	r3, r3, #4
 800df8c:	2b04      	cmp	r3, #4
 800df8e:	d00a      	beq.n	800dfa6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800df90:	4b16      	ldr	r3, [pc, #88]	; (800dfec <HAL_PWREx_ConfigSupply+0x70>)
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	f003 0307 	and.w	r3, r3, #7
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d001      	beq.n	800dfa2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e01f      	b.n	800dfe2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	e01d      	b.n	800dfe2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800dfa6:	4b11      	ldr	r3, [pc, #68]	; (800dfec <HAL_PWREx_ConfigSupply+0x70>)
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	f023 0207 	bic.w	r2, r3, #7
 800dfae:	490f      	ldr	r1, [pc, #60]	; (800dfec <HAL_PWREx_ConfigSupply+0x70>)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800dfb6:	f7f7 fff7 	bl	8005fa8 <HAL_GetTick>
 800dfba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dfbc:	e009      	b.n	800dfd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800dfbe:	f7f7 fff3 	bl	8005fa8 <HAL_GetTick>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfcc:	d901      	bls.n	800dfd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e007      	b.n	800dfe2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dfd2:	4b06      	ldr	r3, [pc, #24]	; (800dfec <HAL_PWREx_ConfigSupply+0x70>)
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dfda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfde:	d1ee      	bne.n	800dfbe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800dfe0:	2300      	movs	r3, #0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	58024800 	.word	0x58024800

0800dff0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b08c      	sub	sp, #48	; 0x30
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d102      	bne.n	800e004 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dffe:	2301      	movs	r3, #1
 800e000:	f000 bc48 	b.w	800e894 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 8088 	beq.w	800e122 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e012:	4b99      	ldr	r3, [pc, #612]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e01a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e01c:	4b96      	ldr	r3, [pc, #600]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e020:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e024:	2b10      	cmp	r3, #16
 800e026:	d007      	beq.n	800e038 <HAL_RCC_OscConfig+0x48>
 800e028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02a:	2b18      	cmp	r3, #24
 800e02c:	d111      	bne.n	800e052 <HAL_RCC_OscConfig+0x62>
 800e02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e030:	f003 0303 	and.w	r3, r3, #3
 800e034:	2b02      	cmp	r3, #2
 800e036:	d10c      	bne.n	800e052 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e038:	4b8f      	ldr	r3, [pc, #572]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e040:	2b00      	cmp	r3, #0
 800e042:	d06d      	beq.n	800e120 <HAL_RCC_OscConfig+0x130>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d169      	bne.n	800e120 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e04c:	2301      	movs	r3, #1
 800e04e:	f000 bc21 	b.w	800e894 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e05a:	d106      	bne.n	800e06a <HAL_RCC_OscConfig+0x7a>
 800e05c:	4b86      	ldr	r3, [pc, #536]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a85      	ldr	r2, [pc, #532]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e066:	6013      	str	r3, [r2, #0]
 800e068:	e02e      	b.n	800e0c8 <HAL_RCC_OscConfig+0xd8>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10c      	bne.n	800e08c <HAL_RCC_OscConfig+0x9c>
 800e072:	4b81      	ldr	r3, [pc, #516]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a80      	ldr	r2, [pc, #512]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e07c:	6013      	str	r3, [r2, #0]
 800e07e:	4b7e      	ldr	r3, [pc, #504]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a7d      	ldr	r2, [pc, #500]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e088:	6013      	str	r3, [r2, #0]
 800e08a:	e01d      	b.n	800e0c8 <HAL_RCC_OscConfig+0xd8>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e094:	d10c      	bne.n	800e0b0 <HAL_RCC_OscConfig+0xc0>
 800e096:	4b78      	ldr	r3, [pc, #480]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a77      	ldr	r2, [pc, #476]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e09c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e0a0:	6013      	str	r3, [r2, #0]
 800e0a2:	4b75      	ldr	r3, [pc, #468]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4a74      	ldr	r2, [pc, #464]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e0a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0ac:	6013      	str	r3, [r2, #0]
 800e0ae:	e00b      	b.n	800e0c8 <HAL_RCC_OscConfig+0xd8>
 800e0b0:	4b71      	ldr	r3, [pc, #452]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a70      	ldr	r2, [pc, #448]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e0b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0ba:	6013      	str	r3, [r2, #0]
 800e0bc:	4b6e      	ldr	r3, [pc, #440]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4a6d      	ldr	r2, [pc, #436]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e0c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e0c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d013      	beq.n	800e0f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0d0:	f7f7 ff6a 	bl	8005fa8 <HAL_GetTick>
 800e0d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e0d6:	e008      	b.n	800e0ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e0d8:	f7f7 ff66 	bl	8005fa8 <HAL_GetTick>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	2b64      	cmp	r3, #100	; 0x64
 800e0e4:	d901      	bls.n	800e0ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	e3d4      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e0ea:	4b63      	ldr	r3, [pc, #396]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d0f0      	beq.n	800e0d8 <HAL_RCC_OscConfig+0xe8>
 800e0f6:	e014      	b.n	800e122 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0f8:	f7f7 ff56 	bl	8005fa8 <HAL_GetTick>
 800e0fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e0fe:	e008      	b.n	800e112 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e100:	f7f7 ff52 	bl	8005fa8 <HAL_GetTick>
 800e104:	4602      	mov	r2, r0
 800e106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	2b64      	cmp	r3, #100	; 0x64
 800e10c:	d901      	bls.n	800e112 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e10e:	2303      	movs	r3, #3
 800e110:	e3c0      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e112:	4b59      	ldr	r3, [pc, #356]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1f0      	bne.n	800e100 <HAL_RCC_OscConfig+0x110>
 800e11e:	e000      	b.n	800e122 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f003 0302 	and.w	r3, r3, #2
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f000 80ca 	beq.w	800e2c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e130:	4b51      	ldr	r3, [pc, #324]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e138:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e13a:	4b4f      	ldr	r3, [pc, #316]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e13e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d007      	beq.n	800e156 <HAL_RCC_OscConfig+0x166>
 800e146:	6a3b      	ldr	r3, [r7, #32]
 800e148:	2b18      	cmp	r3, #24
 800e14a:	d156      	bne.n	800e1fa <HAL_RCC_OscConfig+0x20a>
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	f003 0303 	and.w	r3, r3, #3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d151      	bne.n	800e1fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e156:	4b48      	ldr	r3, [pc, #288]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f003 0304 	and.w	r3, r3, #4
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d005      	beq.n	800e16e <HAL_RCC_OscConfig+0x17e>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d101      	bne.n	800e16e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	e392      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e16e:	4b42      	ldr	r3, [pc, #264]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f023 0219 	bic.w	r2, r3, #25
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	493f      	ldr	r1, [pc, #252]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e17c:	4313      	orrs	r3, r2
 800e17e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e180:	f7f7 ff12 	bl	8005fa8 <HAL_GetTick>
 800e184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e186:	e008      	b.n	800e19a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e188:	f7f7 ff0e 	bl	8005fa8 <HAL_GetTick>
 800e18c:	4602      	mov	r2, r0
 800e18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e190:	1ad3      	subs	r3, r2, r3
 800e192:	2b02      	cmp	r3, #2
 800e194:	d901      	bls.n	800e19a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e196:	2303      	movs	r3, #3
 800e198:	e37c      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e19a:	4b37      	ldr	r3, [pc, #220]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f003 0304 	and.w	r3, r3, #4
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d0f0      	beq.n	800e188 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1a6:	f7f7 ff0b 	bl	8005fc0 <HAL_GetREVID>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	f241 0203 	movw	r2, #4099	; 0x1003
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d817      	bhi.n	800e1e4 <HAL_RCC_OscConfig+0x1f4>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	2b40      	cmp	r3, #64	; 0x40
 800e1ba:	d108      	bne.n	800e1ce <HAL_RCC_OscConfig+0x1de>
 800e1bc:	4b2e      	ldr	r3, [pc, #184]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e1c4:	4a2c      	ldr	r2, [pc, #176]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e1c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1cc:	e07a      	b.n	800e2c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1ce:	4b2a      	ldr	r3, [pc, #168]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	691b      	ldr	r3, [r3, #16]
 800e1da:	031b      	lsls	r3, r3, #12
 800e1dc:	4926      	ldr	r1, [pc, #152]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1e2:	e06f      	b.n	800e2c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1e4:	4b24      	ldr	r3, [pc, #144]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	061b      	lsls	r3, r3, #24
 800e1f2:	4921      	ldr	r1, [pc, #132]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1f8:	e064      	b.n	800e2c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d047      	beq.n	800e292 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e202:	4b1d      	ldr	r3, [pc, #116]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f023 0219 	bic.w	r2, r3, #25
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	491a      	ldr	r1, [pc, #104]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e210:	4313      	orrs	r3, r2
 800e212:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e214:	f7f7 fec8 	bl	8005fa8 <HAL_GetTick>
 800e218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e21a:	e008      	b.n	800e22e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e21c:	f7f7 fec4 	bl	8005fa8 <HAL_GetTick>
 800e220:	4602      	mov	r2, r0
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	2b02      	cmp	r3, #2
 800e228:	d901      	bls.n	800e22e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e22a:	2303      	movs	r3, #3
 800e22c:	e332      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e22e:	4b12      	ldr	r3, [pc, #72]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 0304 	and.w	r3, r3, #4
 800e236:	2b00      	cmp	r3, #0
 800e238:	d0f0      	beq.n	800e21c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e23a:	f7f7 fec1 	bl	8005fc0 <HAL_GetREVID>
 800e23e:	4603      	mov	r3, r0
 800e240:	f241 0203 	movw	r2, #4099	; 0x1003
 800e244:	4293      	cmp	r3, r2
 800e246:	d819      	bhi.n	800e27c <HAL_RCC_OscConfig+0x28c>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	2b40      	cmp	r3, #64	; 0x40
 800e24e:	d108      	bne.n	800e262 <HAL_RCC_OscConfig+0x272>
 800e250:	4b09      	ldr	r3, [pc, #36]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e258:	4a07      	ldr	r2, [pc, #28]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e25a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e25e:	6053      	str	r3, [r2, #4]
 800e260:	e030      	b.n	800e2c4 <HAL_RCC_OscConfig+0x2d4>
 800e262:	4b05      	ldr	r3, [pc, #20]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	691b      	ldr	r3, [r3, #16]
 800e26e:	031b      	lsls	r3, r3, #12
 800e270:	4901      	ldr	r1, [pc, #4]	; (800e278 <HAL_RCC_OscConfig+0x288>)
 800e272:	4313      	orrs	r3, r2
 800e274:	604b      	str	r3, [r1, #4]
 800e276:	e025      	b.n	800e2c4 <HAL_RCC_OscConfig+0x2d4>
 800e278:	58024400 	.word	0x58024400
 800e27c:	4b9a      	ldr	r3, [pc, #616]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	061b      	lsls	r3, r3, #24
 800e28a:	4997      	ldr	r1, [pc, #604]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e28c:	4313      	orrs	r3, r2
 800e28e:	604b      	str	r3, [r1, #4]
 800e290:	e018      	b.n	800e2c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e292:	4b95      	ldr	r3, [pc, #596]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a94      	ldr	r2, [pc, #592]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e298:	f023 0301 	bic.w	r3, r3, #1
 800e29c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e29e:	f7f7 fe83 	bl	8005fa8 <HAL_GetTick>
 800e2a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e2a4:	e008      	b.n	800e2b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e2a6:	f7f7 fe7f 	bl	8005fa8 <HAL_GetTick>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ae:	1ad3      	subs	r3, r2, r3
 800e2b0:	2b02      	cmp	r3, #2
 800e2b2:	d901      	bls.n	800e2b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e2b4:	2303      	movs	r3, #3
 800e2b6:	e2ed      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e2b8:	4b8b      	ldr	r3, [pc, #556]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f003 0304 	and.w	r3, r3, #4
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1f0      	bne.n	800e2a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f003 0310 	and.w	r3, r3, #16
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f000 80a9 	beq.w	800e424 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e2d2:	4b85      	ldr	r3, [pc, #532]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e2d4:	691b      	ldr	r3, [r3, #16]
 800e2d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e2dc:	4b82      	ldr	r3, [pc, #520]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	2b08      	cmp	r3, #8
 800e2e6:	d007      	beq.n	800e2f8 <HAL_RCC_OscConfig+0x308>
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	2b18      	cmp	r3, #24
 800e2ec:	d13a      	bne.n	800e364 <HAL_RCC_OscConfig+0x374>
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	f003 0303 	and.w	r3, r3, #3
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d135      	bne.n	800e364 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e2f8:	4b7b      	ldr	r3, [pc, #492]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e300:	2b00      	cmp	r3, #0
 800e302:	d005      	beq.n	800e310 <HAL_RCC_OscConfig+0x320>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	69db      	ldr	r3, [r3, #28]
 800e308:	2b80      	cmp	r3, #128	; 0x80
 800e30a:	d001      	beq.n	800e310 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e30c:	2301      	movs	r3, #1
 800e30e:	e2c1      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e310:	f7f7 fe56 	bl	8005fc0 <HAL_GetREVID>
 800e314:	4603      	mov	r3, r0
 800e316:	f241 0203 	movw	r2, #4099	; 0x1003
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d817      	bhi.n	800e34e <HAL_RCC_OscConfig+0x35e>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6a1b      	ldr	r3, [r3, #32]
 800e322:	2b20      	cmp	r3, #32
 800e324:	d108      	bne.n	800e338 <HAL_RCC_OscConfig+0x348>
 800e326:	4b70      	ldr	r3, [pc, #448]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e32e:	4a6e      	ldr	r2, [pc, #440]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e334:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e336:	e075      	b.n	800e424 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e338:	4b6b      	ldr	r3, [pc, #428]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6a1b      	ldr	r3, [r3, #32]
 800e344:	069b      	lsls	r3, r3, #26
 800e346:	4968      	ldr	r1, [pc, #416]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e348:	4313      	orrs	r3, r2
 800e34a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e34c:	e06a      	b.n	800e424 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e34e:	4b66      	ldr	r3, [pc, #408]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6a1b      	ldr	r3, [r3, #32]
 800e35a:	061b      	lsls	r3, r3, #24
 800e35c:	4962      	ldr	r1, [pc, #392]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e35e:	4313      	orrs	r3, r2
 800e360:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e362:	e05f      	b.n	800e424 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	69db      	ldr	r3, [r3, #28]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d042      	beq.n	800e3f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e36c:	4b5e      	ldr	r3, [pc, #376]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a5d      	ldr	r2, [pc, #372]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e378:	f7f7 fe16 	bl	8005fa8 <HAL_GetTick>
 800e37c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e37e:	e008      	b.n	800e392 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e380:	f7f7 fe12 	bl	8005fa8 <HAL_GetTick>
 800e384:	4602      	mov	r2, r0
 800e386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d901      	bls.n	800e392 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e38e:	2303      	movs	r3, #3
 800e390:	e280      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e392:	4b55      	ldr	r3, [pc, #340]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d0f0      	beq.n	800e380 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e39e:	f7f7 fe0f 	bl	8005fc0 <HAL_GetREVID>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	f241 0203 	movw	r2, #4099	; 0x1003
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d817      	bhi.n	800e3dc <HAL_RCC_OscConfig+0x3ec>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6a1b      	ldr	r3, [r3, #32]
 800e3b0:	2b20      	cmp	r3, #32
 800e3b2:	d108      	bne.n	800e3c6 <HAL_RCC_OscConfig+0x3d6>
 800e3b4:	4b4c      	ldr	r3, [pc, #304]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e3bc:	4a4a      	ldr	r2, [pc, #296]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e3be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e3c2:	6053      	str	r3, [r2, #4]
 800e3c4:	e02e      	b.n	800e424 <HAL_RCC_OscConfig+0x434>
 800e3c6:	4b48      	ldr	r3, [pc, #288]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	069b      	lsls	r3, r3, #26
 800e3d4:	4944      	ldr	r1, [pc, #272]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	604b      	str	r3, [r1, #4]
 800e3da:	e023      	b.n	800e424 <HAL_RCC_OscConfig+0x434>
 800e3dc:	4b42      	ldr	r3, [pc, #264]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a1b      	ldr	r3, [r3, #32]
 800e3e8:	061b      	lsls	r3, r3, #24
 800e3ea:	493f      	ldr	r1, [pc, #252]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	60cb      	str	r3, [r1, #12]
 800e3f0:	e018      	b.n	800e424 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e3f2:	4b3d      	ldr	r3, [pc, #244]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a3c      	ldr	r2, [pc, #240]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e3f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3fe:	f7f7 fdd3 	bl	8005fa8 <HAL_GetTick>
 800e402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e404:	e008      	b.n	800e418 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e406:	f7f7 fdcf 	bl	8005fa8 <HAL_GetTick>
 800e40a:	4602      	mov	r2, r0
 800e40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40e:	1ad3      	subs	r3, r2, r3
 800e410:	2b02      	cmp	r3, #2
 800e412:	d901      	bls.n	800e418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e414:	2303      	movs	r3, #3
 800e416:	e23d      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e418:	4b33      	ldr	r3, [pc, #204]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e420:	2b00      	cmp	r3, #0
 800e422:	d1f0      	bne.n	800e406 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f003 0308 	and.w	r3, r3, #8
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d036      	beq.n	800e49e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	695b      	ldr	r3, [r3, #20]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d019      	beq.n	800e46c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e438:	4b2b      	ldr	r3, [pc, #172]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e43a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e43c:	4a2a      	ldr	r2, [pc, #168]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e43e:	f043 0301 	orr.w	r3, r3, #1
 800e442:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e444:	f7f7 fdb0 	bl	8005fa8 <HAL_GetTick>
 800e448:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e44a:	e008      	b.n	800e45e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e44c:	f7f7 fdac 	bl	8005fa8 <HAL_GetTick>
 800e450:	4602      	mov	r2, r0
 800e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e454:	1ad3      	subs	r3, r2, r3
 800e456:	2b02      	cmp	r3, #2
 800e458:	d901      	bls.n	800e45e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e45a:	2303      	movs	r3, #3
 800e45c:	e21a      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e45e:	4b22      	ldr	r3, [pc, #136]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e462:	f003 0302 	and.w	r3, r3, #2
 800e466:	2b00      	cmp	r3, #0
 800e468:	d0f0      	beq.n	800e44c <HAL_RCC_OscConfig+0x45c>
 800e46a:	e018      	b.n	800e49e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e46c:	4b1e      	ldr	r3, [pc, #120]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e46e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e470:	4a1d      	ldr	r2, [pc, #116]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e472:	f023 0301 	bic.w	r3, r3, #1
 800e476:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e478:	f7f7 fd96 	bl	8005fa8 <HAL_GetTick>
 800e47c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e47e:	e008      	b.n	800e492 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e480:	f7f7 fd92 	bl	8005fa8 <HAL_GetTick>
 800e484:	4602      	mov	r2, r0
 800e486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	2b02      	cmp	r3, #2
 800e48c:	d901      	bls.n	800e492 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e48e:	2303      	movs	r3, #3
 800e490:	e200      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e492:	4b15      	ldr	r3, [pc, #84]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e496:	f003 0302 	and.w	r3, r3, #2
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1f0      	bne.n	800e480 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f003 0320 	and.w	r3, r3, #32
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d039      	beq.n	800e51e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	699b      	ldr	r3, [r3, #24]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d01c      	beq.n	800e4ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e4b2:	4b0d      	ldr	r3, [pc, #52]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4a0c      	ldr	r2, [pc, #48]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e4b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e4bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e4be:	f7f7 fd73 	bl	8005fa8 <HAL_GetTick>
 800e4c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e4c4:	e008      	b.n	800e4d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e4c6:	f7f7 fd6f 	bl	8005fa8 <HAL_GetTick>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	1ad3      	subs	r3, r2, r3
 800e4d0:	2b02      	cmp	r3, #2
 800e4d2:	d901      	bls.n	800e4d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e4d4:	2303      	movs	r3, #3
 800e4d6:	e1dd      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e4d8:	4b03      	ldr	r3, [pc, #12]	; (800e4e8 <HAL_RCC_OscConfig+0x4f8>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d0f0      	beq.n	800e4c6 <HAL_RCC_OscConfig+0x4d6>
 800e4e4:	e01b      	b.n	800e51e <HAL_RCC_OscConfig+0x52e>
 800e4e6:	bf00      	nop
 800e4e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e4ec:	4b9b      	ldr	r3, [pc, #620]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a9a      	ldr	r2, [pc, #616]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e4f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e4f8:	f7f7 fd56 	bl	8005fa8 <HAL_GetTick>
 800e4fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e4fe:	e008      	b.n	800e512 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e500:	f7f7 fd52 	bl	8005fa8 <HAL_GetTick>
 800e504:	4602      	mov	r2, r0
 800e506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	d901      	bls.n	800e512 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e50e:	2303      	movs	r3, #3
 800e510:	e1c0      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e512:	4b92      	ldr	r3, [pc, #584]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1f0      	bne.n	800e500 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f003 0304 	and.w	r3, r3, #4
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 8081 	beq.w	800e62e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e52c:	4b8c      	ldr	r3, [pc, #560]	; (800e760 <HAL_RCC_OscConfig+0x770>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a8b      	ldr	r2, [pc, #556]	; (800e760 <HAL_RCC_OscConfig+0x770>)
 800e532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e536:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e538:	f7f7 fd36 	bl	8005fa8 <HAL_GetTick>
 800e53c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e53e:	e008      	b.n	800e552 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e540:	f7f7 fd32 	bl	8005fa8 <HAL_GetTick>
 800e544:	4602      	mov	r2, r0
 800e546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	2b64      	cmp	r3, #100	; 0x64
 800e54c:	d901      	bls.n	800e552 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e54e:	2303      	movs	r3, #3
 800e550:	e1a0      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e552:	4b83      	ldr	r3, [pc, #524]	; (800e760 <HAL_RCC_OscConfig+0x770>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d0f0      	beq.n	800e540 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	2b01      	cmp	r3, #1
 800e564:	d106      	bne.n	800e574 <HAL_RCC_OscConfig+0x584>
 800e566:	4b7d      	ldr	r3, [pc, #500]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e56a:	4a7c      	ldr	r2, [pc, #496]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e56c:	f043 0301 	orr.w	r3, r3, #1
 800e570:	6713      	str	r3, [r2, #112]	; 0x70
 800e572:	e02d      	b.n	800e5d0 <HAL_RCC_OscConfig+0x5e0>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10c      	bne.n	800e596 <HAL_RCC_OscConfig+0x5a6>
 800e57c:	4b77      	ldr	r3, [pc, #476]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e57e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e580:	4a76      	ldr	r2, [pc, #472]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e582:	f023 0301 	bic.w	r3, r3, #1
 800e586:	6713      	str	r3, [r2, #112]	; 0x70
 800e588:	4b74      	ldr	r3, [pc, #464]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58c:	4a73      	ldr	r2, [pc, #460]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e58e:	f023 0304 	bic.w	r3, r3, #4
 800e592:	6713      	str	r3, [r2, #112]	; 0x70
 800e594:	e01c      	b.n	800e5d0 <HAL_RCC_OscConfig+0x5e0>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	2b05      	cmp	r3, #5
 800e59c:	d10c      	bne.n	800e5b8 <HAL_RCC_OscConfig+0x5c8>
 800e59e:	4b6f      	ldr	r3, [pc, #444]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5a2:	4a6e      	ldr	r2, [pc, #440]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e5a4:	f043 0304 	orr.w	r3, r3, #4
 800e5a8:	6713      	str	r3, [r2, #112]	; 0x70
 800e5aa:	4b6c      	ldr	r3, [pc, #432]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ae:	4a6b      	ldr	r2, [pc, #428]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e5b0:	f043 0301 	orr.w	r3, r3, #1
 800e5b4:	6713      	str	r3, [r2, #112]	; 0x70
 800e5b6:	e00b      	b.n	800e5d0 <HAL_RCC_OscConfig+0x5e0>
 800e5b8:	4b68      	ldr	r3, [pc, #416]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e5ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5bc:	4a67      	ldr	r2, [pc, #412]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e5be:	f023 0301 	bic.w	r3, r3, #1
 800e5c2:	6713      	str	r3, [r2, #112]	; 0x70
 800e5c4:	4b65      	ldr	r3, [pc, #404]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5c8:	4a64      	ldr	r2, [pc, #400]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e5ca:	f023 0304 	bic.w	r3, r3, #4
 800e5ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	689b      	ldr	r3, [r3, #8]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d015      	beq.n	800e604 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5d8:	f7f7 fce6 	bl	8005fa8 <HAL_GetTick>
 800e5dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e5de:	e00a      	b.n	800e5f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e5e0:	f7f7 fce2 	bl	8005fa8 <HAL_GetTick>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d901      	bls.n	800e5f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e5f2:	2303      	movs	r3, #3
 800e5f4:	e14e      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e5f6:	4b59      	ldr	r3, [pc, #356]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d0ee      	beq.n	800e5e0 <HAL_RCC_OscConfig+0x5f0>
 800e602:	e014      	b.n	800e62e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e604:	f7f7 fcd0 	bl	8005fa8 <HAL_GetTick>
 800e608:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e60a:	e00a      	b.n	800e622 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e60c:	f7f7 fccc 	bl	8005fa8 <HAL_GetTick>
 800e610:	4602      	mov	r2, r0
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	1ad3      	subs	r3, r2, r3
 800e616:	f241 3288 	movw	r2, #5000	; 0x1388
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d901      	bls.n	800e622 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e61e:	2303      	movs	r3, #3
 800e620:	e138      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e622:	4b4e      	ldr	r3, [pc, #312]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e626:	f003 0302 	and.w	r3, r3, #2
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d1ee      	bne.n	800e60c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e632:	2b00      	cmp	r3, #0
 800e634:	f000 812d 	beq.w	800e892 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e638:	4b48      	ldr	r3, [pc, #288]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e640:	2b18      	cmp	r3, #24
 800e642:	f000 80bd 	beq.w	800e7c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64a:	2b02      	cmp	r3, #2
 800e64c:	f040 809e 	bne.w	800e78c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e650:	4b42      	ldr	r3, [pc, #264]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a41      	ldr	r2, [pc, #260]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e65a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e65c:	f7f7 fca4 	bl	8005fa8 <HAL_GetTick>
 800e660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e662:	e008      	b.n	800e676 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e664:	f7f7 fca0 	bl	8005fa8 <HAL_GetTick>
 800e668:	4602      	mov	r2, r0
 800e66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	2b02      	cmp	r3, #2
 800e670:	d901      	bls.n	800e676 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e672:	2303      	movs	r3, #3
 800e674:	e10e      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e676:	4b39      	ldr	r3, [pc, #228]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1f0      	bne.n	800e664 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e682:	4b36      	ldr	r3, [pc, #216]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e686:	4b37      	ldr	r3, [pc, #220]	; (800e764 <HAL_RCC_OscConfig+0x774>)
 800e688:	4013      	ands	r3, r2
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e692:	0112      	lsls	r2, r2, #4
 800e694:	430a      	orrs	r2, r1
 800e696:	4931      	ldr	r1, [pc, #196]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e698:	4313      	orrs	r3, r2
 800e69a:	628b      	str	r3, [r1, #40]	; 0x28
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	025b      	lsls	r3, r3, #9
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	431a      	orrs	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6b6:	3b01      	subs	r3, #1
 800e6b8:	041b      	lsls	r3, r3, #16
 800e6ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e6be:	431a      	orrs	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c4:	3b01      	subs	r3, #1
 800e6c6:	061b      	lsls	r3, r3, #24
 800e6c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e6cc:	4923      	ldr	r1, [pc, #140]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e6ce:	4313      	orrs	r3, r2
 800e6d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e6d2:	4b22      	ldr	r3, [pc, #136]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d6:	4a21      	ldr	r2, [pc, #132]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e6d8:	f023 0301 	bic.w	r3, r3, #1
 800e6dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e6de:	4b1f      	ldr	r3, [pc, #124]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e6e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6e2:	4b21      	ldr	r3, [pc, #132]	; (800e768 <HAL_RCC_OscConfig+0x778>)
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e6ea:	00d2      	lsls	r2, r2, #3
 800e6ec:	491b      	ldr	r1, [pc, #108]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e6f2:	4b1a      	ldr	r3, [pc, #104]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f6:	f023 020c 	bic.w	r2, r3, #12
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6fe:	4917      	ldr	r1, [pc, #92]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e700:	4313      	orrs	r3, r2
 800e702:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e704:	4b15      	ldr	r3, [pc, #84]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e708:	f023 0202 	bic.w	r2, r3, #2
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e710:	4912      	ldr	r1, [pc, #72]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e712:	4313      	orrs	r3, r2
 800e714:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e716:	4b11      	ldr	r3, [pc, #68]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71a:	4a10      	ldr	r2, [pc, #64]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e71c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e720:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e722:	4b0e      	ldr	r3, [pc, #56]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e726:	4a0d      	ldr	r2, [pc, #52]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e72c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e72e:	4b0b      	ldr	r3, [pc, #44]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e732:	4a0a      	ldr	r2, [pc, #40]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e73a:	4b08      	ldr	r3, [pc, #32]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e73e:	4a07      	ldr	r2, [pc, #28]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e740:	f043 0301 	orr.w	r3, r3, #1
 800e744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e746:	4b05      	ldr	r3, [pc, #20]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4a04      	ldr	r2, [pc, #16]	; (800e75c <HAL_RCC_OscConfig+0x76c>)
 800e74c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e752:	f7f7 fc29 	bl	8005fa8 <HAL_GetTick>
 800e756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e758:	e011      	b.n	800e77e <HAL_RCC_OscConfig+0x78e>
 800e75a:	bf00      	nop
 800e75c:	58024400 	.word	0x58024400
 800e760:	58024800 	.word	0x58024800
 800e764:	fffffc0c 	.word	0xfffffc0c
 800e768:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e76c:	f7f7 fc1c 	bl	8005fa8 <HAL_GetTick>
 800e770:	4602      	mov	r2, r0
 800e772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	2b02      	cmp	r3, #2
 800e778:	d901      	bls.n	800e77e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e77a:	2303      	movs	r3, #3
 800e77c:	e08a      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e77e:	4b47      	ldr	r3, [pc, #284]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e786:	2b00      	cmp	r3, #0
 800e788:	d0f0      	beq.n	800e76c <HAL_RCC_OscConfig+0x77c>
 800e78a:	e082      	b.n	800e892 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e78c:	4b43      	ldr	r3, [pc, #268]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a42      	ldr	r2, [pc, #264]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e798:	f7f7 fc06 	bl	8005fa8 <HAL_GetTick>
 800e79c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e79e:	e008      	b.n	800e7b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e7a0:	f7f7 fc02 	bl	8005fa8 <HAL_GetTick>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	2b02      	cmp	r3, #2
 800e7ac:	d901      	bls.n	800e7b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	e070      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e7b2:	4b3a      	ldr	r3, [pc, #232]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d1f0      	bne.n	800e7a0 <HAL_RCC_OscConfig+0x7b0>
 800e7be:	e068      	b.n	800e892 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e7c0:	4b36      	ldr	r3, [pc, #216]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e7c6:	4b35      	ldr	r3, [pc, #212]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d031      	beq.n	800e838 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	f003 0203 	and.w	r2, r3, #3
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d12a      	bne.n	800e838 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	091b      	lsrs	r3, r3, #4
 800e7e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d122      	bne.n	800e838 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d11a      	bne.n	800e838 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	0a5b      	lsrs	r3, r3, #9
 800e806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e80e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e810:	429a      	cmp	r2, r3
 800e812:	d111      	bne.n	800e838 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	0c1b      	lsrs	r3, r3, #16
 800e818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e820:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e822:	429a      	cmp	r2, r3
 800e824:	d108      	bne.n	800e838 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	0e1b      	lsrs	r3, r3, #24
 800e82a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e832:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e834:	429a      	cmp	r2, r3
 800e836:	d001      	beq.n	800e83c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e838:	2301      	movs	r3, #1
 800e83a:	e02b      	b.n	800e894 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e83c:	4b17      	ldr	r3, [pc, #92]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e840:	08db      	lsrs	r3, r3, #3
 800e842:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e846:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e84c:	693a      	ldr	r2, [r7, #16]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d01f      	beq.n	800e892 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e852:	4b12      	ldr	r3, [pc, #72]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e856:	4a11      	ldr	r2, [pc, #68]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e858:	f023 0301 	bic.w	r3, r3, #1
 800e85c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e85e:	f7f7 fba3 	bl	8005fa8 <HAL_GetTick>
 800e862:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e864:	bf00      	nop
 800e866:	f7f7 fb9f 	bl	8005fa8 <HAL_GetTick>
 800e86a:	4602      	mov	r2, r0
 800e86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86e:	4293      	cmp	r3, r2
 800e870:	d0f9      	beq.n	800e866 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e872:	4b0a      	ldr	r3, [pc, #40]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e876:	4b0a      	ldr	r3, [pc, #40]	; (800e8a0 <HAL_RCC_OscConfig+0x8b0>)
 800e878:	4013      	ands	r3, r2
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e87e:	00d2      	lsls	r2, r2, #3
 800e880:	4906      	ldr	r1, [pc, #24]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e882:	4313      	orrs	r3, r2
 800e884:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e886:	4b05      	ldr	r3, [pc, #20]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88a:	4a04      	ldr	r2, [pc, #16]	; (800e89c <HAL_RCC_OscConfig+0x8ac>)
 800e88c:	f043 0301 	orr.w	r3, r3, #1
 800e890:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e892:	2300      	movs	r3, #0
}
 800e894:	4618      	mov	r0, r3
 800e896:	3730      	adds	r7, #48	; 0x30
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	58024400 	.word	0x58024400
 800e8a0:	ffff0007 	.word	0xffff0007

0800e8a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b086      	sub	sp, #24
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e19c      	b.n	800ebf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e8b8:	4b8a      	ldr	r3, [pc, #552]	; (800eae4 <HAL_RCC_ClockConfig+0x240>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f003 030f 	and.w	r3, r3, #15
 800e8c0:	683a      	ldr	r2, [r7, #0]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d910      	bls.n	800e8e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e8c6:	4b87      	ldr	r3, [pc, #540]	; (800eae4 <HAL_RCC_ClockConfig+0x240>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f023 020f 	bic.w	r2, r3, #15
 800e8ce:	4985      	ldr	r1, [pc, #532]	; (800eae4 <HAL_RCC_ClockConfig+0x240>)
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e8d6:	4b83      	ldr	r3, [pc, #524]	; (800eae4 <HAL_RCC_ClockConfig+0x240>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f003 030f 	and.w	r3, r3, #15
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d001      	beq.n	800e8e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e184      	b.n	800ebf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	f003 0304 	and.w	r3, r3, #4
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d010      	beq.n	800e916 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	691a      	ldr	r2, [r3, #16]
 800e8f8:	4b7b      	ldr	r3, [pc, #492]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e8fa:	699b      	ldr	r3, [r3, #24]
 800e8fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e900:	429a      	cmp	r2, r3
 800e902:	d908      	bls.n	800e916 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e904:	4b78      	ldr	r3, [pc, #480]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e906:	699b      	ldr	r3, [r3, #24]
 800e908:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	4975      	ldr	r1, [pc, #468]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e912:	4313      	orrs	r3, r2
 800e914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f003 0308 	and.w	r3, r3, #8
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d010      	beq.n	800e944 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	695a      	ldr	r2, [r3, #20]
 800e926:	4b70      	ldr	r3, [pc, #448]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e928:	69db      	ldr	r3, [r3, #28]
 800e92a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e92e:	429a      	cmp	r2, r3
 800e930:	d908      	bls.n	800e944 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e932:	4b6d      	ldr	r3, [pc, #436]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e934:	69db      	ldr	r3, [r3, #28]
 800e936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	695b      	ldr	r3, [r3, #20]
 800e93e:	496a      	ldr	r1, [pc, #424]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e940:	4313      	orrs	r3, r2
 800e942:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f003 0310 	and.w	r3, r3, #16
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d010      	beq.n	800e972 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	699a      	ldr	r2, [r3, #24]
 800e954:	4b64      	ldr	r3, [pc, #400]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e956:	69db      	ldr	r3, [r3, #28]
 800e958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d908      	bls.n	800e972 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e960:	4b61      	ldr	r3, [pc, #388]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	495e      	ldr	r1, [pc, #376]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e96e:	4313      	orrs	r3, r2
 800e970:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f003 0320 	and.w	r3, r3, #32
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d010      	beq.n	800e9a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	69da      	ldr	r2, [r3, #28]
 800e982:	4b59      	ldr	r3, [pc, #356]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d908      	bls.n	800e9a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e98e:	4b56      	ldr	r3, [pc, #344]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	69db      	ldr	r3, [r3, #28]
 800e99a:	4953      	ldr	r1, [pc, #332]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e99c:	4313      	orrs	r3, r2
 800e99e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f003 0302 	and.w	r3, r3, #2
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d010      	beq.n	800e9ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	68da      	ldr	r2, [r3, #12]
 800e9b0:	4b4d      	ldr	r3, [pc, #308]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e9b2:	699b      	ldr	r3, [r3, #24]
 800e9b4:	f003 030f 	and.w	r3, r3, #15
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d908      	bls.n	800e9ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e9bc:	4b4a      	ldr	r3, [pc, #296]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	f023 020f 	bic.w	r2, r3, #15
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	4947      	ldr	r1, [pc, #284]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f003 0301 	and.w	r3, r3, #1
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d055      	beq.n	800ea86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e9da:	4b43      	ldr	r3, [pc, #268]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e9dc:	699b      	ldr	r3, [r3, #24]
 800e9de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	4940      	ldr	r1, [pc, #256]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	2b02      	cmp	r3, #2
 800e9f2:	d107      	bne.n	800ea04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e9f4:	4b3c      	ldr	r3, [pc, #240]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d121      	bne.n	800ea44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea00:	2301      	movs	r3, #1
 800ea02:	e0f6      	b.n	800ebf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	2b03      	cmp	r3, #3
 800ea0a:	d107      	bne.n	800ea1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ea0c:	4b36      	ldr	r3, [pc, #216]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d115      	bne.n	800ea44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	e0ea      	b.n	800ebf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d107      	bne.n	800ea34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ea24:	4b30      	ldr	r3, [pc, #192]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d109      	bne.n	800ea44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea30:	2301      	movs	r3, #1
 800ea32:	e0de      	b.n	800ebf2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ea34:	4b2c      	ldr	r3, [pc, #176]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f003 0304 	and.w	r3, r3, #4
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d101      	bne.n	800ea44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ea40:	2301      	movs	r3, #1
 800ea42:	e0d6      	b.n	800ebf2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ea44:	4b28      	ldr	r3, [pc, #160]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800ea46:	691b      	ldr	r3, [r3, #16]
 800ea48:	f023 0207 	bic.w	r2, r3, #7
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	4925      	ldr	r1, [pc, #148]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800ea52:	4313      	orrs	r3, r2
 800ea54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea56:	f7f7 faa7 	bl	8005fa8 <HAL_GetTick>
 800ea5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea5c:	e00a      	b.n	800ea74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ea5e:	f7f7 faa3 	bl	8005fa8 <HAL_GetTick>
 800ea62:	4602      	mov	r2, r0
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d901      	bls.n	800ea74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ea70:	2303      	movs	r3, #3
 800ea72:	e0be      	b.n	800ebf2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ea74:	4b1c      	ldr	r3, [pc, #112]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	00db      	lsls	r3, r3, #3
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d1eb      	bne.n	800ea5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d010      	beq.n	800eab4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	68da      	ldr	r2, [r3, #12]
 800ea96:	4b14      	ldr	r3, [pc, #80]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800ea98:	699b      	ldr	r3, [r3, #24]
 800ea9a:	f003 030f 	and.w	r3, r3, #15
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d208      	bcs.n	800eab4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eaa2:	4b11      	ldr	r3, [pc, #68]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800eaa4:	699b      	ldr	r3, [r3, #24]
 800eaa6:	f023 020f 	bic.w	r2, r3, #15
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	490e      	ldr	r1, [pc, #56]	; (800eae8 <HAL_RCC_ClockConfig+0x244>)
 800eab0:	4313      	orrs	r3, r2
 800eab2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eab4:	4b0b      	ldr	r3, [pc, #44]	; (800eae4 <HAL_RCC_ClockConfig+0x240>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f003 030f 	and.w	r3, r3, #15
 800eabc:	683a      	ldr	r2, [r7, #0]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d214      	bcs.n	800eaec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eac2:	4b08      	ldr	r3, [pc, #32]	; (800eae4 <HAL_RCC_ClockConfig+0x240>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f023 020f 	bic.w	r2, r3, #15
 800eaca:	4906      	ldr	r1, [pc, #24]	; (800eae4 <HAL_RCC_ClockConfig+0x240>)
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	4313      	orrs	r3, r2
 800ead0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ead2:	4b04      	ldr	r3, [pc, #16]	; (800eae4 <HAL_RCC_ClockConfig+0x240>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f003 030f 	and.w	r3, r3, #15
 800eada:	683a      	ldr	r2, [r7, #0]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d005      	beq.n	800eaec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800eae0:	2301      	movs	r3, #1
 800eae2:	e086      	b.n	800ebf2 <HAL_RCC_ClockConfig+0x34e>
 800eae4:	52002000 	.word	0x52002000
 800eae8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f003 0304 	and.w	r3, r3, #4
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d010      	beq.n	800eb1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	691a      	ldr	r2, [r3, #16]
 800eafc:	4b3f      	ldr	r3, [pc, #252]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eafe:	699b      	ldr	r3, [r3, #24]
 800eb00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d208      	bcs.n	800eb1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800eb08:	4b3c      	ldr	r3, [pc, #240]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eb0a:	699b      	ldr	r3, [r3, #24]
 800eb0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	691b      	ldr	r3, [r3, #16]
 800eb14:	4939      	ldr	r1, [pc, #228]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eb16:	4313      	orrs	r3, r2
 800eb18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f003 0308 	and.w	r3, r3, #8
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d010      	beq.n	800eb48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	695a      	ldr	r2, [r3, #20]
 800eb2a:	4b34      	ldr	r3, [pc, #208]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eb2c:	69db      	ldr	r3, [r3, #28]
 800eb2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d208      	bcs.n	800eb48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800eb36:	4b31      	ldr	r3, [pc, #196]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eb38:	69db      	ldr	r3, [r3, #28]
 800eb3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	695b      	ldr	r3, [r3, #20]
 800eb42:	492e      	ldr	r1, [pc, #184]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eb44:	4313      	orrs	r3, r2
 800eb46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f003 0310 	and.w	r3, r3, #16
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d010      	beq.n	800eb76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	699a      	ldr	r2, [r3, #24]
 800eb58:	4b28      	ldr	r3, [pc, #160]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eb5a:	69db      	ldr	r3, [r3, #28]
 800eb5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d208      	bcs.n	800eb76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eb64:	4b25      	ldr	r3, [pc, #148]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eb66:	69db      	ldr	r3, [r3, #28]
 800eb68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	4922      	ldr	r1, [pc, #136]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eb72:	4313      	orrs	r3, r2
 800eb74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f003 0320 	and.w	r3, r3, #32
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d010      	beq.n	800eba4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	69da      	ldr	r2, [r3, #28]
 800eb86:	4b1d      	ldr	r3, [pc, #116]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eb88:	6a1b      	ldr	r3, [r3, #32]
 800eb8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d208      	bcs.n	800eba4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800eb92:	4b1a      	ldr	r3, [pc, #104]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	69db      	ldr	r3, [r3, #28]
 800eb9e:	4917      	ldr	r1, [pc, #92]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800eba0:	4313      	orrs	r3, r2
 800eba2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800eba4:	f000 f834 	bl	800ec10 <HAL_RCC_GetSysClockFreq>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	4b14      	ldr	r3, [pc, #80]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800ebac:	699b      	ldr	r3, [r3, #24]
 800ebae:	0a1b      	lsrs	r3, r3, #8
 800ebb0:	f003 030f 	and.w	r3, r3, #15
 800ebb4:	4912      	ldr	r1, [pc, #72]	; (800ec00 <HAL_RCC_ClockConfig+0x35c>)
 800ebb6:	5ccb      	ldrb	r3, [r1, r3]
 800ebb8:	f003 031f 	and.w	r3, r3, #31
 800ebbc:	fa22 f303 	lsr.w	r3, r2, r3
 800ebc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ebc2:	4b0e      	ldr	r3, [pc, #56]	; (800ebfc <HAL_RCC_ClockConfig+0x358>)
 800ebc4:	699b      	ldr	r3, [r3, #24]
 800ebc6:	f003 030f 	and.w	r3, r3, #15
 800ebca:	4a0d      	ldr	r2, [pc, #52]	; (800ec00 <HAL_RCC_ClockConfig+0x35c>)
 800ebcc:	5cd3      	ldrb	r3, [r2, r3]
 800ebce:	f003 031f 	and.w	r3, r3, #31
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	fa22 f303 	lsr.w	r3, r2, r3
 800ebd8:	4a0a      	ldr	r2, [pc, #40]	; (800ec04 <HAL_RCC_ClockConfig+0x360>)
 800ebda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ebdc:	4a0a      	ldr	r2, [pc, #40]	; (800ec08 <HAL_RCC_ClockConfig+0x364>)
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ebe2:	4b0a      	ldr	r3, [pc, #40]	; (800ec0c <HAL_RCC_ClockConfig+0x368>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7f5 fd9c 	bl	8004724 <HAL_InitTick>
 800ebec:	4603      	mov	r3, r0
 800ebee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3718      	adds	r7, #24
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	58024400 	.word	0x58024400
 800ec00:	0801b564 	.word	0x0801b564
 800ec04:	240000c4 	.word	0x240000c4
 800ec08:	240000c0 	.word	0x240000c0
 800ec0c:	240000c8 	.word	0x240000c8

0800ec10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b089      	sub	sp, #36	; 0x24
 800ec14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ec16:	4bb3      	ldr	r3, [pc, #716]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec1e:	2b18      	cmp	r3, #24
 800ec20:	f200 8155 	bhi.w	800eece <HAL_RCC_GetSysClockFreq+0x2be>
 800ec24:	a201      	add	r2, pc, #4	; (adr r2, 800ec2c <HAL_RCC_GetSysClockFreq+0x1c>)
 800ec26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec2a:	bf00      	nop
 800ec2c:	0800ec91 	.word	0x0800ec91
 800ec30:	0800eecf 	.word	0x0800eecf
 800ec34:	0800eecf 	.word	0x0800eecf
 800ec38:	0800eecf 	.word	0x0800eecf
 800ec3c:	0800eecf 	.word	0x0800eecf
 800ec40:	0800eecf 	.word	0x0800eecf
 800ec44:	0800eecf 	.word	0x0800eecf
 800ec48:	0800eecf 	.word	0x0800eecf
 800ec4c:	0800ecb7 	.word	0x0800ecb7
 800ec50:	0800eecf 	.word	0x0800eecf
 800ec54:	0800eecf 	.word	0x0800eecf
 800ec58:	0800eecf 	.word	0x0800eecf
 800ec5c:	0800eecf 	.word	0x0800eecf
 800ec60:	0800eecf 	.word	0x0800eecf
 800ec64:	0800eecf 	.word	0x0800eecf
 800ec68:	0800eecf 	.word	0x0800eecf
 800ec6c:	0800ecbd 	.word	0x0800ecbd
 800ec70:	0800eecf 	.word	0x0800eecf
 800ec74:	0800eecf 	.word	0x0800eecf
 800ec78:	0800eecf 	.word	0x0800eecf
 800ec7c:	0800eecf 	.word	0x0800eecf
 800ec80:	0800eecf 	.word	0x0800eecf
 800ec84:	0800eecf 	.word	0x0800eecf
 800ec88:	0800eecf 	.word	0x0800eecf
 800ec8c:	0800ecc3 	.word	0x0800ecc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec90:	4b94      	ldr	r3, [pc, #592]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f003 0320 	and.w	r3, r3, #32
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d009      	beq.n	800ecb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec9c:	4b91      	ldr	r3, [pc, #580]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	08db      	lsrs	r3, r3, #3
 800eca2:	f003 0303 	and.w	r3, r3, #3
 800eca6:	4a90      	ldr	r2, [pc, #576]	; (800eee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800eca8:	fa22 f303 	lsr.w	r3, r2, r3
 800ecac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ecae:	e111      	b.n	800eed4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ecb0:	4b8d      	ldr	r3, [pc, #564]	; (800eee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ecb2:	61bb      	str	r3, [r7, #24]
      break;
 800ecb4:	e10e      	b.n	800eed4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ecb6:	4b8d      	ldr	r3, [pc, #564]	; (800eeec <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ecb8:	61bb      	str	r3, [r7, #24]
      break;
 800ecba:	e10b      	b.n	800eed4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ecbc:	4b8c      	ldr	r3, [pc, #560]	; (800eef0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ecbe:	61bb      	str	r3, [r7, #24]
      break;
 800ecc0:	e108      	b.n	800eed4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ecc2:	4b88      	ldr	r3, [pc, #544]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc6:	f003 0303 	and.w	r3, r3, #3
 800ecca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800eccc:	4b85      	ldr	r3, [pc, #532]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd0:	091b      	lsrs	r3, r3, #4
 800ecd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ecd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ecd8:	4b82      	ldr	r3, [pc, #520]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecdc:	f003 0301 	and.w	r3, r3, #1
 800ece0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ece2:	4b80      	ldr	r3, [pc, #512]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ece4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece6:	08db      	lsrs	r3, r3, #3
 800ece8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	fb02 f303 	mul.w	r3, r2, r3
 800ecf2:	ee07 3a90 	vmov	s15, r3
 800ecf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecfa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f000 80e1 	beq.w	800eec8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	2b02      	cmp	r3, #2
 800ed0a:	f000 8083 	beq.w	800ee14 <HAL_RCC_GetSysClockFreq+0x204>
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	f200 80a1 	bhi.w	800ee58 <HAL_RCC_GetSysClockFreq+0x248>
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d003      	beq.n	800ed24 <HAL_RCC_GetSysClockFreq+0x114>
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d056      	beq.n	800edd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ed22:	e099      	b.n	800ee58 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed24:	4b6f      	ldr	r3, [pc, #444]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f003 0320 	and.w	r3, r3, #32
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d02d      	beq.n	800ed8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed30:	4b6c      	ldr	r3, [pc, #432]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	08db      	lsrs	r3, r3, #3
 800ed36:	f003 0303 	and.w	r3, r3, #3
 800ed3a:	4a6b      	ldr	r2, [pc, #428]	; (800eee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ed3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ed40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	ee07 3a90 	vmov	s15, r3
 800ed48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	ee07 3a90 	vmov	s15, r3
 800ed52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed5a:	4b62      	ldr	r3, [pc, #392]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed62:	ee07 3a90 	vmov	s15, r3
 800ed66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed6a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800eef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ed72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ed8a:	e087      	b.n	800ee9c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	ee07 3a90 	vmov	s15, r3
 800ed92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed96:	eddf 6a58 	vldr	s13, [pc, #352]	; 800eef8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ed9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed9e:	4b51      	ldr	r3, [pc, #324]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eda6:	ee07 3a90 	vmov	s15, r3
 800edaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edae:	ed97 6a02 	vldr	s12, [r7, #8]
 800edb2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800eef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800edb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800edba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800edbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800edc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800edce:	e065      	b.n	800ee9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	ee07 3a90 	vmov	s15, r3
 800edd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edda:	eddf 6a48 	vldr	s13, [pc, #288]	; 800eefc <HAL_RCC_GetSysClockFreq+0x2ec>
 800edde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ede2:	4b40      	ldr	r3, [pc, #256]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ede4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edea:	ee07 3a90 	vmov	s15, r3
 800edee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800edf6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800eef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800edfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800edfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ee12:	e043      	b.n	800ee9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	ee07 3a90 	vmov	s15, r3
 800ee1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ef00 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ee22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee26:	4b2f      	ldr	r3, [pc, #188]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee2e:	ee07 3a90 	vmov	s15, r3
 800ee32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee36:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee3a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800eef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ee3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ee56:	e021      	b.n	800ee9c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	ee07 3a90 	vmov	s15, r3
 800ee5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee62:	eddf 6a26 	vldr	s13, [pc, #152]	; 800eefc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ee66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ee6a:	4b1e      	ldr	r3, [pc, #120]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee72:	ee07 3a90 	vmov	s15, r3
 800ee76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ee7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ee7e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800eef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ee82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ee9a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ee9c:	4b11      	ldr	r3, [pc, #68]	; (800eee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eea0:	0a5b      	lsrs	r3, r3, #9
 800eea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eea6:	3301      	adds	r3, #1
 800eea8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	ee07 3a90 	vmov	s15, r3
 800eeb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eeb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800eeb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eec0:	ee17 3a90 	vmov	r3, s15
 800eec4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800eec6:	e005      	b.n	800eed4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800eec8:	2300      	movs	r3, #0
 800eeca:	61bb      	str	r3, [r7, #24]
      break;
 800eecc:	e002      	b.n	800eed4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800eece:	4b07      	ldr	r3, [pc, #28]	; (800eeec <HAL_RCC_GetSysClockFreq+0x2dc>)
 800eed0:	61bb      	str	r3, [r7, #24]
      break;
 800eed2:	bf00      	nop
  }

  return sysclockfreq;
 800eed4:	69bb      	ldr	r3, [r7, #24]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3724      	adds	r7, #36	; 0x24
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	58024400 	.word	0x58024400
 800eee8:	03d09000 	.word	0x03d09000
 800eeec:	003d0900 	.word	0x003d0900
 800eef0:	017d7840 	.word	0x017d7840
 800eef4:	46000000 	.word	0x46000000
 800eef8:	4c742400 	.word	0x4c742400
 800eefc:	4a742400 	.word	0x4a742400
 800ef00:	4bbebc20 	.word	0x4bbebc20

0800ef04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ef0a:	f7ff fe81 	bl	800ec10 <HAL_RCC_GetSysClockFreq>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	4b10      	ldr	r3, [pc, #64]	; (800ef54 <HAL_RCC_GetHCLKFreq+0x50>)
 800ef12:	699b      	ldr	r3, [r3, #24]
 800ef14:	0a1b      	lsrs	r3, r3, #8
 800ef16:	f003 030f 	and.w	r3, r3, #15
 800ef1a:	490f      	ldr	r1, [pc, #60]	; (800ef58 <HAL_RCC_GetHCLKFreq+0x54>)
 800ef1c:	5ccb      	ldrb	r3, [r1, r3]
 800ef1e:	f003 031f 	and.w	r3, r3, #31
 800ef22:	fa22 f303 	lsr.w	r3, r2, r3
 800ef26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ef28:	4b0a      	ldr	r3, [pc, #40]	; (800ef54 <HAL_RCC_GetHCLKFreq+0x50>)
 800ef2a:	699b      	ldr	r3, [r3, #24]
 800ef2c:	f003 030f 	and.w	r3, r3, #15
 800ef30:	4a09      	ldr	r2, [pc, #36]	; (800ef58 <HAL_RCC_GetHCLKFreq+0x54>)
 800ef32:	5cd3      	ldrb	r3, [r2, r3]
 800ef34:	f003 031f 	and.w	r3, r3, #31
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef3e:	4a07      	ldr	r2, [pc, #28]	; (800ef5c <HAL_RCC_GetHCLKFreq+0x58>)
 800ef40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ef42:	4a07      	ldr	r2, [pc, #28]	; (800ef60 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ef48:	4b04      	ldr	r3, [pc, #16]	; (800ef5c <HAL_RCC_GetHCLKFreq+0x58>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	58024400 	.word	0x58024400
 800ef58:	0801b564 	.word	0x0801b564
 800ef5c:	240000c4 	.word	0x240000c4
 800ef60:	240000c0 	.word	0x240000c0

0800ef64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ef68:	f7ff ffcc 	bl	800ef04 <HAL_RCC_GetHCLKFreq>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	4b06      	ldr	r3, [pc, #24]	; (800ef88 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ef70:	69db      	ldr	r3, [r3, #28]
 800ef72:	091b      	lsrs	r3, r3, #4
 800ef74:	f003 0307 	and.w	r3, r3, #7
 800ef78:	4904      	ldr	r1, [pc, #16]	; (800ef8c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ef7a:	5ccb      	ldrb	r3, [r1, r3]
 800ef7c:	f003 031f 	and.w	r3, r3, #31
 800ef80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	58024400 	.word	0x58024400
 800ef8c:	0801b564 	.word	0x0801b564

0800ef90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ef94:	f7ff ffb6 	bl	800ef04 <HAL_RCC_GetHCLKFreq>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	4b06      	ldr	r3, [pc, #24]	; (800efb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ef9c:	69db      	ldr	r3, [r3, #28]
 800ef9e:	0a1b      	lsrs	r3, r3, #8
 800efa0:	f003 0307 	and.w	r3, r3, #7
 800efa4:	4904      	ldr	r1, [pc, #16]	; (800efb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800efa6:	5ccb      	ldrb	r3, [r1, r3]
 800efa8:	f003 031f 	and.w	r3, r3, #31
 800efac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	58024400 	.word	0x58024400
 800efb8:	0801b564 	.word	0x0801b564

0800efbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	223f      	movs	r2, #63	; 0x3f
 800efca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800efcc:	4b1a      	ldr	r3, [pc, #104]	; (800f038 <HAL_RCC_GetClockConfig+0x7c>)
 800efce:	691b      	ldr	r3, [r3, #16]
 800efd0:	f003 0207 	and.w	r2, r3, #7
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800efd8:	4b17      	ldr	r3, [pc, #92]	; (800f038 <HAL_RCC_GetClockConfig+0x7c>)
 800efda:	699b      	ldr	r3, [r3, #24]
 800efdc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800efe4:	4b14      	ldr	r3, [pc, #80]	; (800f038 <HAL_RCC_GetClockConfig+0x7c>)
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	f003 020f 	and.w	r2, r3, #15
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800eff0:	4b11      	ldr	r3, [pc, #68]	; (800f038 <HAL_RCC_GetClockConfig+0x7c>)
 800eff2:	699b      	ldr	r3, [r3, #24]
 800eff4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800effc:	4b0e      	ldr	r3, [pc, #56]	; (800f038 <HAL_RCC_GetClockConfig+0x7c>)
 800effe:	69db      	ldr	r3, [r3, #28]
 800f000:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800f008:	4b0b      	ldr	r3, [pc, #44]	; (800f038 <HAL_RCC_GetClockConfig+0x7c>)
 800f00a:	69db      	ldr	r3, [r3, #28]
 800f00c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800f014:	4b08      	ldr	r3, [pc, #32]	; (800f038 <HAL_RCC_GetClockConfig+0x7c>)
 800f016:	6a1b      	ldr	r3, [r3, #32]
 800f018:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f020:	4b06      	ldr	r3, [pc, #24]	; (800f03c <HAL_RCC_GetClockConfig+0x80>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f003 020f 	and.w	r2, r3, #15
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	601a      	str	r2, [r3, #0]
}
 800f02c:	bf00      	nop
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr
 800f038:	58024400 	.word	0x58024400
 800f03c:	52002000 	.word	0x52002000

0800f040 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f044:	b0ca      	sub	sp, #296	; 0x128
 800f046:	af00      	add	r7, sp, #0
 800f048:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f04c:	2300      	movs	r3, #0
 800f04e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f052:	2300      	movs	r3, #0
 800f054:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f060:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800f064:	2500      	movs	r5, #0
 800f066:	ea54 0305 	orrs.w	r3, r4, r5
 800f06a:	d049      	beq.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f072:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f076:	d02f      	beq.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f078:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f07c:	d828      	bhi.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f07e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f082:	d01a      	beq.n	800f0ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f088:	d822      	bhi.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d003      	beq.n	800f096 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f08e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f092:	d007      	beq.n	800f0a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f094:	e01c      	b.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f096:	4bb8      	ldr	r3, [pc, #736]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f09a:	4ab7      	ldr	r2, [pc, #732]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f09c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f0a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f0a2:	e01a      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0a8:	3308      	adds	r3, #8
 800f0aa:	2102      	movs	r1, #2
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f002 fb61 	bl	8011774 <RCCEx_PLL2_Config>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f0b8:	e00f      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0be:	3328      	adds	r3, #40	; 0x28
 800f0c0:	2102      	movs	r1, #2
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f002 fc08 	bl	80118d8 <RCCEx_PLL3_Config>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f0ce:	e004      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f0d6:	e000      	b.n	800f0da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f0d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d10a      	bne.n	800f0f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f0e2:	4ba5      	ldr	r3, [pc, #660]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0f0:	4aa1      	ldr	r2, [pc, #644]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f0f2:	430b      	orrs	r3, r1
 800f0f4:	6513      	str	r3, [r2, #80]	; 0x50
 800f0f6:	e003      	b.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f108:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800f10c:	f04f 0900 	mov.w	r9, #0
 800f110:	ea58 0309 	orrs.w	r3, r8, r9
 800f114:	d047      	beq.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800f116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f11c:	2b04      	cmp	r3, #4
 800f11e:	d82a      	bhi.n	800f176 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f120:	a201      	add	r2, pc, #4	; (adr r2, 800f128 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800f122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f126:	bf00      	nop
 800f128:	0800f13d 	.word	0x0800f13d
 800f12c:	0800f14b 	.word	0x0800f14b
 800f130:	0800f161 	.word	0x0800f161
 800f134:	0800f17f 	.word	0x0800f17f
 800f138:	0800f17f 	.word	0x0800f17f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f13c:	4b8e      	ldr	r3, [pc, #568]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f140:	4a8d      	ldr	r2, [pc, #564]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f148:	e01a      	b.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f14e:	3308      	adds	r3, #8
 800f150:	2100      	movs	r1, #0
 800f152:	4618      	mov	r0, r3
 800f154:	f002 fb0e 	bl	8011774 <RCCEx_PLL2_Config>
 800f158:	4603      	mov	r3, r0
 800f15a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f15e:	e00f      	b.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f164:	3328      	adds	r3, #40	; 0x28
 800f166:	2100      	movs	r1, #0
 800f168:	4618      	mov	r0, r3
 800f16a:	f002 fbb5 	bl	80118d8 <RCCEx_PLL3_Config>
 800f16e:	4603      	mov	r3, r0
 800f170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f174:	e004      	b.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f176:	2301      	movs	r3, #1
 800f178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f17c:	e000      	b.n	800f180 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f17e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f184:	2b00      	cmp	r3, #0
 800f186:	d10a      	bne.n	800f19e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f188:	4b7b      	ldr	r3, [pc, #492]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f18a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f18c:	f023 0107 	bic.w	r1, r3, #7
 800f190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f196:	4a78      	ldr	r2, [pc, #480]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f198:	430b      	orrs	r3, r1
 800f19a:	6513      	str	r3, [r2, #80]	; 0x50
 800f19c:	e003      	b.n	800f1a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f19e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ae:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800f1b2:	f04f 0b00 	mov.w	fp, #0
 800f1b6:	ea5a 030b 	orrs.w	r3, sl, fp
 800f1ba:	d04c      	beq.n	800f256 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1c6:	d030      	beq.n	800f22a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f1c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1cc:	d829      	bhi.n	800f222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f1ce:	2bc0      	cmp	r3, #192	; 0xc0
 800f1d0:	d02d      	beq.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f1d2:	2bc0      	cmp	r3, #192	; 0xc0
 800f1d4:	d825      	bhi.n	800f222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f1d6:	2b80      	cmp	r3, #128	; 0x80
 800f1d8:	d018      	beq.n	800f20c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f1da:	2b80      	cmp	r3, #128	; 0x80
 800f1dc:	d821      	bhi.n	800f222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d002      	beq.n	800f1e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f1e2:	2b40      	cmp	r3, #64	; 0x40
 800f1e4:	d007      	beq.n	800f1f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f1e6:	e01c      	b.n	800f222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f1e8:	4b63      	ldr	r3, [pc, #396]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ec:	4a62      	ldr	r2, [pc, #392]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f1ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f1f4:	e01c      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1fa:	3308      	adds	r3, #8
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	4618      	mov	r0, r3
 800f200:	f002 fab8 	bl	8011774 <RCCEx_PLL2_Config>
 800f204:	4603      	mov	r3, r0
 800f206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f20a:	e011      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f210:	3328      	adds	r3, #40	; 0x28
 800f212:	2100      	movs	r1, #0
 800f214:	4618      	mov	r0, r3
 800f216:	f002 fb5f 	bl	80118d8 <RCCEx_PLL3_Config>
 800f21a:	4603      	mov	r3, r0
 800f21c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f220:	e006      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f222:	2301      	movs	r3, #1
 800f224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f228:	e002      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f22a:	bf00      	nop
 800f22c:	e000      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f22e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f234:	2b00      	cmp	r3, #0
 800f236:	d10a      	bne.n	800f24e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f238:	4b4f      	ldr	r3, [pc, #316]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f23c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800f240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f246:	4a4c      	ldr	r2, [pc, #304]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f248:	430b      	orrs	r3, r1
 800f24a:	6513      	str	r3, [r2, #80]	; 0x50
 800f24c:	e003      	b.n	800f256 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f24e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f252:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800f262:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f266:	2300      	movs	r3, #0
 800f268:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f26c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800f270:	460b      	mov	r3, r1
 800f272:	4313      	orrs	r3, r2
 800f274:	d053      	beq.n	800f31e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f27a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f27e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f282:	d035      	beq.n	800f2f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f284:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f288:	d82e      	bhi.n	800f2e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f28a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f28e:	d031      	beq.n	800f2f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f290:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f294:	d828      	bhi.n	800f2e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f29a:	d01a      	beq.n	800f2d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f29c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f2a0:	d822      	bhi.n	800f2e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d003      	beq.n	800f2ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f2a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f2aa:	d007      	beq.n	800f2bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f2ac:	e01c      	b.n	800f2e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f2ae:	4b32      	ldr	r3, [pc, #200]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b2:	4a31      	ldr	r2, [pc, #196]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f2b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f2ba:	e01c      	b.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2c0:	3308      	adds	r3, #8
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f002 fa55 	bl	8011774 <RCCEx_PLL2_Config>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f2d0:	e011      	b.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2d6:	3328      	adds	r3, #40	; 0x28
 800f2d8:	2100      	movs	r1, #0
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f002 fafc 	bl	80118d8 <RCCEx_PLL3_Config>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f2e6:	e006      	b.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f2ee:	e002      	b.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f2f0:	bf00      	nop
 800f2f2:	e000      	b.n	800f2f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f2f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d10b      	bne.n	800f316 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f2fe:	4b1e      	ldr	r3, [pc, #120]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f302:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800f306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f30a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f30e:	4a1a      	ldr	r2, [pc, #104]	; (800f378 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f310:	430b      	orrs	r3, r1
 800f312:	6593      	str	r3, [r2, #88]	; 0x58
 800f314:	e003      	b.n	800f31e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f31a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f326:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800f32a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f32e:	2300      	movs	r3, #0
 800f330:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f334:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800f338:	460b      	mov	r3, r1
 800f33a:	4313      	orrs	r3, r2
 800f33c:	d056      	beq.n	800f3ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f346:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f34a:	d038      	beq.n	800f3be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f34c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f350:	d831      	bhi.n	800f3b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f352:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f356:	d034      	beq.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f358:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f35c:	d82b      	bhi.n	800f3b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f35e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f362:	d01d      	beq.n	800f3a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f368:	d825      	bhi.n	800f3b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d006      	beq.n	800f37c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f36e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f372:	d00a      	beq.n	800f38a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f374:	e01f      	b.n	800f3b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f376:	bf00      	nop
 800f378:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f37c:	4ba2      	ldr	r3, [pc, #648]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f380:	4aa1      	ldr	r2, [pc, #644]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f388:	e01c      	b.n	800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f38e:	3308      	adds	r3, #8
 800f390:	2100      	movs	r1, #0
 800f392:	4618      	mov	r0, r3
 800f394:	f002 f9ee 	bl	8011774 <RCCEx_PLL2_Config>
 800f398:	4603      	mov	r3, r0
 800f39a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f39e:	e011      	b.n	800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3a4:	3328      	adds	r3, #40	; 0x28
 800f3a6:	2100      	movs	r1, #0
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f002 fa95 	bl	80118d8 <RCCEx_PLL3_Config>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f3b4:	e006      	b.n	800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f3bc:	e002      	b.n	800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f3be:	bf00      	nop
 800f3c0:	e000      	b.n	800f3c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f3c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d10b      	bne.n	800f3e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f3cc:	4b8e      	ldr	r3, [pc, #568]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800f3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f3dc:	4a8a      	ldr	r2, [pc, #552]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f3de:	430b      	orrs	r3, r1
 800f3e0:	6593      	str	r3, [r2, #88]	; 0x58
 800f3e2:	e003      	b.n	800f3ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800f3f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f402:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800f406:	460b      	mov	r3, r1
 800f408:	4313      	orrs	r3, r2
 800f40a:	d03a      	beq.n	800f482 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f412:	2b30      	cmp	r3, #48	; 0x30
 800f414:	d01f      	beq.n	800f456 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f416:	2b30      	cmp	r3, #48	; 0x30
 800f418:	d819      	bhi.n	800f44e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f41a:	2b20      	cmp	r3, #32
 800f41c:	d00c      	beq.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f41e:	2b20      	cmp	r3, #32
 800f420:	d815      	bhi.n	800f44e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f422:	2b00      	cmp	r3, #0
 800f424:	d019      	beq.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f426:	2b10      	cmp	r3, #16
 800f428:	d111      	bne.n	800f44e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f42a:	4b77      	ldr	r3, [pc, #476]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f42e:	4a76      	ldr	r2, [pc, #472]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f434:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f436:	e011      	b.n	800f45c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f43c:	3308      	adds	r3, #8
 800f43e:	2102      	movs	r1, #2
 800f440:	4618      	mov	r0, r3
 800f442:	f002 f997 	bl	8011774 <RCCEx_PLL2_Config>
 800f446:	4603      	mov	r3, r0
 800f448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f44c:	e006      	b.n	800f45c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f44e:	2301      	movs	r3, #1
 800f450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f454:	e002      	b.n	800f45c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f456:	bf00      	nop
 800f458:	e000      	b.n	800f45c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f45a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f45c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f460:	2b00      	cmp	r3, #0
 800f462:	d10a      	bne.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f464:	4b68      	ldr	r3, [pc, #416]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f468:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f472:	4a65      	ldr	r2, [pc, #404]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f474:	430b      	orrs	r3, r1
 800f476:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f478:	e003      	b.n	800f482 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f47a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f47e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f48e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f492:	2300      	movs	r3, #0
 800f494:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f498:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f49c:	460b      	mov	r3, r1
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	d051      	beq.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4ac:	d035      	beq.n	800f51a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f4ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4b2:	d82e      	bhi.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f4b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f4b8:	d031      	beq.n	800f51e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f4ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f4be:	d828      	bhi.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f4c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4c4:	d01a      	beq.n	800f4fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f4c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4ca:	d822      	bhi.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d003      	beq.n	800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f4d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4d4:	d007      	beq.n	800f4e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f4d6:	e01c      	b.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4d8:	4b4b      	ldr	r3, [pc, #300]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4dc:	4a4a      	ldr	r2, [pc, #296]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f4de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f4e4:	e01c      	b.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4ea:	3308      	adds	r3, #8
 800f4ec:	2100      	movs	r1, #0
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f002 f940 	bl	8011774 <RCCEx_PLL2_Config>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f4fa:	e011      	b.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f500:	3328      	adds	r3, #40	; 0x28
 800f502:	2100      	movs	r1, #0
 800f504:	4618      	mov	r0, r3
 800f506:	f002 f9e7 	bl	80118d8 <RCCEx_PLL3_Config>
 800f50a:	4603      	mov	r3, r0
 800f50c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f510:	e006      	b.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f512:	2301      	movs	r3, #1
 800f514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f518:	e002      	b.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f51a:	bf00      	nop
 800f51c:	e000      	b.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f51e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f524:	2b00      	cmp	r3, #0
 800f526:	d10a      	bne.n	800f53e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f528:	4b37      	ldr	r3, [pc, #220]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f52c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f536:	4a34      	ldr	r2, [pc, #208]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f538:	430b      	orrs	r3, r1
 800f53a:	6513      	str	r3, [r2, #80]	; 0x50
 800f53c:	e003      	b.n	800f546 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f53e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f542:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f552:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f556:	2300      	movs	r3, #0
 800f558:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f55c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f560:	460b      	mov	r3, r1
 800f562:	4313      	orrs	r3, r2
 800f564:	d056      	beq.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f56a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f56c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f570:	d033      	beq.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f572:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f576:	d82c      	bhi.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f578:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f57c:	d02f      	beq.n	800f5de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f57e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f582:	d826      	bhi.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f584:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f588:	d02b      	beq.n	800f5e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f58a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f58e:	d820      	bhi.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f594:	d012      	beq.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f59a:	d81a      	bhi.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d022      	beq.n	800f5e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5a4:	d115      	bne.n	800f5d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5aa:	3308      	adds	r3, #8
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f002 f8e0 	bl	8011774 <RCCEx_PLL2_Config>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f5ba:	e015      	b.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5c0:	3328      	adds	r3, #40	; 0x28
 800f5c2:	2101      	movs	r1, #1
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f002 f987 	bl	80118d8 <RCCEx_PLL3_Config>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f5d0:	e00a      	b.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f5d8:	e006      	b.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f5da:	bf00      	nop
 800f5dc:	e004      	b.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f5de:	bf00      	nop
 800f5e0:	e002      	b.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f5e2:	bf00      	nop
 800f5e4:	e000      	b.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f5e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d10d      	bne.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f5f0:	4b05      	ldr	r3, [pc, #20]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f5f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5fe:	4a02      	ldr	r2, [pc, #8]	; (800f608 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f600:	430b      	orrs	r3, r1
 800f602:	6513      	str	r3, [r2, #80]	; 0x50
 800f604:	e006      	b.n	800f614 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f606:	bf00      	nop
 800f608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f60c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f610:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f624:	2300      	movs	r3, #0
 800f626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f62a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f62e:	460b      	mov	r3, r1
 800f630:	4313      	orrs	r3, r2
 800f632:	d055      	beq.n	800f6e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f63c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f640:	d033      	beq.n	800f6aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f646:	d82c      	bhi.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f64c:	d02f      	beq.n	800f6ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f64e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f652:	d826      	bhi.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f654:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f658:	d02b      	beq.n	800f6b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f65a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f65e:	d820      	bhi.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f664:	d012      	beq.n	800f68c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f66a:	d81a      	bhi.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d022      	beq.n	800f6b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f674:	d115      	bne.n	800f6a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f67a:	3308      	adds	r3, #8
 800f67c:	2101      	movs	r1, #1
 800f67e:	4618      	mov	r0, r3
 800f680:	f002 f878 	bl	8011774 <RCCEx_PLL2_Config>
 800f684:	4603      	mov	r3, r0
 800f686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f68a:	e015      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f690:	3328      	adds	r3, #40	; 0x28
 800f692:	2101      	movs	r1, #1
 800f694:	4618      	mov	r0, r3
 800f696:	f002 f91f 	bl	80118d8 <RCCEx_PLL3_Config>
 800f69a:	4603      	mov	r3, r0
 800f69c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f6a0:	e00a      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f6a8:	e006      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f6aa:	bf00      	nop
 800f6ac:	e004      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f6ae:	bf00      	nop
 800f6b0:	e002      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f6b2:	bf00      	nop
 800f6b4:	e000      	b.n	800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f6b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d10b      	bne.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f6c0:	4ba3      	ldr	r3, [pc, #652]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6c4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f6d0:	4a9f      	ldr	r2, [pc, #636]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f6d2:	430b      	orrs	r3, r1
 800f6d4:	6593      	str	r3, [r2, #88]	; 0x58
 800f6d6:	e003      	b.n	800f6e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f6ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f6f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	d037      	beq.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f70a:	d00e      	beq.n	800f72a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f70c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f710:	d816      	bhi.n	800f740 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f712:	2b00      	cmp	r3, #0
 800f714:	d018      	beq.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f71a:	d111      	bne.n	800f740 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f71c:	4b8c      	ldr	r3, [pc, #560]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f720:	4a8b      	ldr	r2, [pc, #556]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f728:	e00f      	b.n	800f74a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f72e:	3308      	adds	r3, #8
 800f730:	2101      	movs	r1, #1
 800f732:	4618      	mov	r0, r3
 800f734:	f002 f81e 	bl	8011774 <RCCEx_PLL2_Config>
 800f738:	4603      	mov	r3, r0
 800f73a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f73e:	e004      	b.n	800f74a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f740:	2301      	movs	r3, #1
 800f742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f746:	e000      	b.n	800f74a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f74a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d10a      	bne.n	800f768 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f752:	4b7f      	ldr	r3, [pc, #508]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f756:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f75a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f760:	4a7b      	ldr	r2, [pc, #492]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f762:	430b      	orrs	r3, r1
 800f764:	6513      	str	r3, [r2, #80]	; 0x50
 800f766:	e003      	b.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f76c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f778:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f77c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f780:	2300      	movs	r3, #0
 800f782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f786:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f78a:	460b      	mov	r3, r1
 800f78c:	4313      	orrs	r3, r2
 800f78e:	d039      	beq.n	800f804 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f796:	2b03      	cmp	r3, #3
 800f798:	d81c      	bhi.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f79a:	a201      	add	r2, pc, #4	; (adr r2, 800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a0:	0800f7dd 	.word	0x0800f7dd
 800f7a4:	0800f7b1 	.word	0x0800f7b1
 800f7a8:	0800f7bf 	.word	0x0800f7bf
 800f7ac:	0800f7dd 	.word	0x0800f7dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7b0:	4b67      	ldr	r3, [pc, #412]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b4:	4a66      	ldr	r2, [pc, #408]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f7bc:	e00f      	b.n	800f7de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7c2:	3308      	adds	r3, #8
 800f7c4:	2102      	movs	r1, #2
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f001 ffd4 	bl	8011774 <RCCEx_PLL2_Config>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f7d2:	e004      	b.n	800f7de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f7da:	e000      	b.n	800f7de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f7dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d10a      	bne.n	800f7fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f7e6:	4b5a      	ldr	r3, [pc, #360]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ea:	f023 0103 	bic.w	r1, r3, #3
 800f7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7f4:	4a56      	ldr	r2, [pc, #344]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f7f6:	430b      	orrs	r3, r1
 800f7f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f7fa:	e003      	b.n	800f804 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f800:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f814:	2300      	movs	r3, #0
 800f816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f81a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f81e:	460b      	mov	r3, r1
 800f820:	4313      	orrs	r3, r2
 800f822:	f000 809f 	beq.w	800f964 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f826:	4b4b      	ldr	r3, [pc, #300]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4a4a      	ldr	r2, [pc, #296]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f82c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f830:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f832:	f7f6 fbb9 	bl	8005fa8 <HAL_GetTick>
 800f836:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f83a:	e00b      	b.n	800f854 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f83c:	f7f6 fbb4 	bl	8005fa8 <HAL_GetTick>
 800f840:	4602      	mov	r2, r0
 800f842:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f846:	1ad3      	subs	r3, r2, r3
 800f848:	2b64      	cmp	r3, #100	; 0x64
 800f84a:	d903      	bls.n	800f854 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f84c:	2303      	movs	r3, #3
 800f84e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f852:	e005      	b.n	800f860 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f854:	4b3f      	ldr	r3, [pc, #252]	; (800f954 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d0ed      	beq.n	800f83c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f864:	2b00      	cmp	r3, #0
 800f866:	d179      	bne.n	800f95c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f868:	4b39      	ldr	r3, [pc, #228]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f86a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f870:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f874:	4053      	eors	r3, r2
 800f876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d015      	beq.n	800f8aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f87e:	4b34      	ldr	r3, [pc, #208]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f886:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f88a:	4b31      	ldr	r3, [pc, #196]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f88e:	4a30      	ldr	r2, [pc, #192]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f894:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f896:	4b2e      	ldr	r3, [pc, #184]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f89a:	4a2d      	ldr	r2, [pc, #180]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f89c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f8a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f8a2:	4a2b      	ldr	r2, [pc, #172]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f8a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8b6:	d118      	bne.n	800f8ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8b8:	f7f6 fb76 	bl	8005fa8 <HAL_GetTick>
 800f8bc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f8c0:	e00d      	b.n	800f8de <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8c2:	f7f6 fb71 	bl	8005fa8 <HAL_GetTick>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f8cc:	1ad2      	subs	r2, r2, r3
 800f8ce:	f241 3388 	movw	r3, #5000	; 0x1388
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d903      	bls.n	800f8de <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f8d6:	2303      	movs	r3, #3
 800f8d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f8dc:	e005      	b.n	800f8ea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f8de:	4b1c      	ldr	r3, [pc, #112]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8e2:	f003 0302 	and.w	r3, r3, #2
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d0eb      	beq.n	800f8c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d129      	bne.n	800f946 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f8fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f902:	d10e      	bne.n	800f922 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f904:	4b12      	ldr	r3, [pc, #72]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f906:	691b      	ldr	r3, [r3, #16]
 800f908:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f910:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f914:	091a      	lsrs	r2, r3, #4
 800f916:	4b10      	ldr	r3, [pc, #64]	; (800f958 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f918:	4013      	ands	r3, r2
 800f91a:	4a0d      	ldr	r2, [pc, #52]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f91c:	430b      	orrs	r3, r1
 800f91e:	6113      	str	r3, [r2, #16]
 800f920:	e005      	b.n	800f92e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f922:	4b0b      	ldr	r3, [pc, #44]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f924:	691b      	ldr	r3, [r3, #16]
 800f926:	4a0a      	ldr	r2, [pc, #40]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f928:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f92c:	6113      	str	r3, [r2, #16]
 800f92e:	4b08      	ldr	r3, [pc, #32]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f930:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f936:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f93a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f93e:	4a04      	ldr	r2, [pc, #16]	; (800f950 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f940:	430b      	orrs	r3, r1
 800f942:	6713      	str	r3, [r2, #112]	; 0x70
 800f944:	e00e      	b.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f94a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f94e:	e009      	b.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f950:	58024400 	.word	0x58024400
 800f954:	58024800 	.word	0x58024800
 800f958:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f95c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f960:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96c:	f002 0301 	and.w	r3, r2, #1
 800f970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f974:	2300      	movs	r3, #0
 800f976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f97a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f97e:	460b      	mov	r3, r1
 800f980:	4313      	orrs	r3, r2
 800f982:	f000 8089 	beq.w	800fa98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f98a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f98c:	2b28      	cmp	r3, #40	; 0x28
 800f98e:	d86b      	bhi.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f990:	a201      	add	r2, pc, #4	; (adr r2, 800f998 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f996:	bf00      	nop
 800f998:	0800fa71 	.word	0x0800fa71
 800f99c:	0800fa69 	.word	0x0800fa69
 800f9a0:	0800fa69 	.word	0x0800fa69
 800f9a4:	0800fa69 	.word	0x0800fa69
 800f9a8:	0800fa69 	.word	0x0800fa69
 800f9ac:	0800fa69 	.word	0x0800fa69
 800f9b0:	0800fa69 	.word	0x0800fa69
 800f9b4:	0800fa69 	.word	0x0800fa69
 800f9b8:	0800fa3d 	.word	0x0800fa3d
 800f9bc:	0800fa69 	.word	0x0800fa69
 800f9c0:	0800fa69 	.word	0x0800fa69
 800f9c4:	0800fa69 	.word	0x0800fa69
 800f9c8:	0800fa69 	.word	0x0800fa69
 800f9cc:	0800fa69 	.word	0x0800fa69
 800f9d0:	0800fa69 	.word	0x0800fa69
 800f9d4:	0800fa69 	.word	0x0800fa69
 800f9d8:	0800fa53 	.word	0x0800fa53
 800f9dc:	0800fa69 	.word	0x0800fa69
 800f9e0:	0800fa69 	.word	0x0800fa69
 800f9e4:	0800fa69 	.word	0x0800fa69
 800f9e8:	0800fa69 	.word	0x0800fa69
 800f9ec:	0800fa69 	.word	0x0800fa69
 800f9f0:	0800fa69 	.word	0x0800fa69
 800f9f4:	0800fa69 	.word	0x0800fa69
 800f9f8:	0800fa71 	.word	0x0800fa71
 800f9fc:	0800fa69 	.word	0x0800fa69
 800fa00:	0800fa69 	.word	0x0800fa69
 800fa04:	0800fa69 	.word	0x0800fa69
 800fa08:	0800fa69 	.word	0x0800fa69
 800fa0c:	0800fa69 	.word	0x0800fa69
 800fa10:	0800fa69 	.word	0x0800fa69
 800fa14:	0800fa69 	.word	0x0800fa69
 800fa18:	0800fa71 	.word	0x0800fa71
 800fa1c:	0800fa69 	.word	0x0800fa69
 800fa20:	0800fa69 	.word	0x0800fa69
 800fa24:	0800fa69 	.word	0x0800fa69
 800fa28:	0800fa69 	.word	0x0800fa69
 800fa2c:	0800fa69 	.word	0x0800fa69
 800fa30:	0800fa69 	.word	0x0800fa69
 800fa34:	0800fa69 	.word	0x0800fa69
 800fa38:	0800fa71 	.word	0x0800fa71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fa3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa40:	3308      	adds	r3, #8
 800fa42:	2101      	movs	r1, #1
 800fa44:	4618      	mov	r0, r3
 800fa46:	f001 fe95 	bl	8011774 <RCCEx_PLL2_Config>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fa50:	e00f      	b.n	800fa72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa56:	3328      	adds	r3, #40	; 0x28
 800fa58:	2101      	movs	r1, #1
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f001 ff3c 	bl	80118d8 <RCCEx_PLL3_Config>
 800fa60:	4603      	mov	r3, r0
 800fa62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fa66:	e004      	b.n	800fa72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa6e:	e000      	b.n	800fa72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800fa70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d10a      	bne.n	800fa90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fa7a:	4bbf      	ldr	r3, [pc, #764]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800fa82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa88:	4abb      	ldr	r2, [pc, #748]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fa8a:	430b      	orrs	r3, r1
 800fa8c:	6553      	str	r3, [r2, #84]	; 0x54
 800fa8e:	e003      	b.n	800fa98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fa98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa0:	f002 0302 	and.w	r3, r2, #2
 800faa4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800faa8:	2300      	movs	r3, #0
 800faaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800faae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800fab2:	460b      	mov	r3, r1
 800fab4:	4313      	orrs	r3, r2
 800fab6:	d041      	beq.n	800fb3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800fab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fabc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fabe:	2b05      	cmp	r3, #5
 800fac0:	d824      	bhi.n	800fb0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800fac2:	a201      	add	r2, pc, #4	; (adr r2, 800fac8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800fac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fac8:	0800fb15 	.word	0x0800fb15
 800facc:	0800fae1 	.word	0x0800fae1
 800fad0:	0800faf7 	.word	0x0800faf7
 800fad4:	0800fb15 	.word	0x0800fb15
 800fad8:	0800fb15 	.word	0x0800fb15
 800fadc:	0800fb15 	.word	0x0800fb15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fae4:	3308      	adds	r3, #8
 800fae6:	2101      	movs	r1, #1
 800fae8:	4618      	mov	r0, r3
 800faea:	f001 fe43 	bl	8011774 <RCCEx_PLL2_Config>
 800faee:	4603      	mov	r3, r0
 800faf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800faf4:	e00f      	b.n	800fb16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800faf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fafa:	3328      	adds	r3, #40	; 0x28
 800fafc:	2101      	movs	r1, #1
 800fafe:	4618      	mov	r0, r3
 800fb00:	f001 feea 	bl	80118d8 <RCCEx_PLL3_Config>
 800fb04:	4603      	mov	r3, r0
 800fb06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800fb0a:	e004      	b.n	800fb16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb12:	e000      	b.n	800fb16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800fb14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d10a      	bne.n	800fb34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800fb1e:	4b96      	ldr	r3, [pc, #600]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb22:	f023 0107 	bic.w	r1, r3, #7
 800fb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb2c:	4a92      	ldr	r2, [pc, #584]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fb2e:	430b      	orrs	r3, r1
 800fb30:	6553      	str	r3, [r2, #84]	; 0x54
 800fb32:	e003      	b.n	800fb3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fb3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb44:	f002 0304 	and.w	r3, r2, #4
 800fb48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fb52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800fb56:	460b      	mov	r3, r1
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	d044      	beq.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800fb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb64:	2b05      	cmp	r3, #5
 800fb66:	d825      	bhi.n	800fbb4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800fb68:	a201      	add	r2, pc, #4	; (adr r2, 800fb70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800fb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb6e:	bf00      	nop
 800fb70:	0800fbbd 	.word	0x0800fbbd
 800fb74:	0800fb89 	.word	0x0800fb89
 800fb78:	0800fb9f 	.word	0x0800fb9f
 800fb7c:	0800fbbd 	.word	0x0800fbbd
 800fb80:	0800fbbd 	.word	0x0800fbbd
 800fb84:	0800fbbd 	.word	0x0800fbbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fb88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb8c:	3308      	adds	r3, #8
 800fb8e:	2101      	movs	r1, #1
 800fb90:	4618      	mov	r0, r3
 800fb92:	f001 fdef 	bl	8011774 <RCCEx_PLL2_Config>
 800fb96:	4603      	mov	r3, r0
 800fb98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fb9c:	e00f      	b.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fba2:	3328      	adds	r3, #40	; 0x28
 800fba4:	2101      	movs	r1, #1
 800fba6:	4618      	mov	r0, r3
 800fba8:	f001 fe96 	bl	80118d8 <RCCEx_PLL3_Config>
 800fbac:	4603      	mov	r3, r0
 800fbae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fbb2:	e004      	b.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fbba:	e000      	b.n	800fbbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800fbbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d10b      	bne.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fbc6:	4b6c      	ldr	r3, [pc, #432]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fbc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbca:	f023 0107 	bic.w	r1, r3, #7
 800fbce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbd6:	4a68      	ldr	r2, [pc, #416]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fbd8:	430b      	orrs	r3, r1
 800fbda:	6593      	str	r3, [r2, #88]	; 0x58
 800fbdc:	e003      	b.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fbe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbee:	f002 0320 	and.w	r3, r2, #32
 800fbf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fbfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800fc00:	460b      	mov	r3, r1
 800fc02:	4313      	orrs	r3, r2
 800fc04:	d055      	beq.n	800fcb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800fc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc12:	d033      	beq.n	800fc7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800fc14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fc18:	d82c      	bhi.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc1e:	d02f      	beq.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800fc20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc24:	d826      	bhi.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fc2a:	d02b      	beq.n	800fc84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800fc2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fc30:	d820      	bhi.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc36:	d012      	beq.n	800fc5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800fc38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc3c:	d81a      	bhi.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d022      	beq.n	800fc88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800fc42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc46:	d115      	bne.n	800fc74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc4c:	3308      	adds	r3, #8
 800fc4e:	2100      	movs	r1, #0
 800fc50:	4618      	mov	r0, r3
 800fc52:	f001 fd8f 	bl	8011774 <RCCEx_PLL2_Config>
 800fc56:	4603      	mov	r3, r0
 800fc58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fc5c:	e015      	b.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc62:	3328      	adds	r3, #40	; 0x28
 800fc64:	2102      	movs	r1, #2
 800fc66:	4618      	mov	r0, r3
 800fc68:	f001 fe36 	bl	80118d8 <RCCEx_PLL3_Config>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800fc72:	e00a      	b.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fc74:	2301      	movs	r3, #1
 800fc76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc7a:	e006      	b.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc7c:	bf00      	nop
 800fc7e:	e004      	b.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc80:	bf00      	nop
 800fc82:	e002      	b.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc84:	bf00      	nop
 800fc86:	e000      	b.n	800fc8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800fc88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d10b      	bne.n	800fcaa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fc92:	4b39      	ldr	r3, [pc, #228]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fc94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800fc9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fca2:	4a35      	ldr	r2, [pc, #212]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fca4:	430b      	orrs	r3, r1
 800fca6:	6553      	str	r3, [r2, #84]	; 0x54
 800fca8:	e003      	b.n	800fcb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800fcbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fcc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800fccc:	460b      	mov	r3, r1
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	d058      	beq.n	800fd84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800fcd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fcda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fcde:	d033      	beq.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800fce0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fce4:	d82c      	bhi.n	800fd40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcea:	d02f      	beq.n	800fd4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800fcec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcf0:	d826      	bhi.n	800fd40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fcf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fcf6:	d02b      	beq.n	800fd50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800fcf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fcfc:	d820      	bhi.n	800fd40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fcfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd02:	d012      	beq.n	800fd2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800fd04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd08:	d81a      	bhi.n	800fd40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d022      	beq.n	800fd54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800fd0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd12:	d115      	bne.n	800fd40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fd14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd18:	3308      	adds	r3, #8
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f001 fd29 	bl	8011774 <RCCEx_PLL2_Config>
 800fd22:	4603      	mov	r3, r0
 800fd24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fd28:	e015      	b.n	800fd56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd2e:	3328      	adds	r3, #40	; 0x28
 800fd30:	2102      	movs	r1, #2
 800fd32:	4618      	mov	r0, r3
 800fd34:	f001 fdd0 	bl	80118d8 <RCCEx_PLL3_Config>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800fd3e:	e00a      	b.n	800fd56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd40:	2301      	movs	r3, #1
 800fd42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fd46:	e006      	b.n	800fd56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd48:	bf00      	nop
 800fd4a:	e004      	b.n	800fd56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd4c:	bf00      	nop
 800fd4e:	e002      	b.n	800fd56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd50:	bf00      	nop
 800fd52:	e000      	b.n	800fd56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800fd54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d10e      	bne.n	800fd7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fd5e:	4b06      	ldr	r3, [pc, #24]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fd60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd62:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800fd66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fd6e:	4a02      	ldr	r2, [pc, #8]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fd70:	430b      	orrs	r3, r1
 800fd72:	6593      	str	r3, [r2, #88]	; 0x58
 800fd74:	e006      	b.n	800fd84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800fd76:	bf00      	nop
 800fd78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fd84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800fd90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fd94:	2300      	movs	r3, #0
 800fd96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fd9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800fd9e:	460b      	mov	r3, r1
 800fda0:	4313      	orrs	r3, r2
 800fda2:	d055      	beq.n	800fe50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800fda4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fda8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fdac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fdb0:	d033      	beq.n	800fe1a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800fdb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fdb6:	d82c      	bhi.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fdb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdbc:	d02f      	beq.n	800fe1e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800fdbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdc2:	d826      	bhi.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fdc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fdc8:	d02b      	beq.n	800fe22 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800fdca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fdce:	d820      	bhi.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fdd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fdd4:	d012      	beq.n	800fdfc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800fdd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fdda:	d81a      	bhi.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d022      	beq.n	800fe26 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800fde0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fde4:	d115      	bne.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdea:	3308      	adds	r3, #8
 800fdec:	2100      	movs	r1, #0
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f001 fcc0 	bl	8011774 <RCCEx_PLL2_Config>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fdfa:	e015      	b.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fdfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe00:	3328      	adds	r3, #40	; 0x28
 800fe02:	2102      	movs	r1, #2
 800fe04:	4618      	mov	r0, r3
 800fe06:	f001 fd67 	bl	80118d8 <RCCEx_PLL3_Config>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800fe10:	e00a      	b.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe12:	2301      	movs	r3, #1
 800fe14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fe18:	e006      	b.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fe1a:	bf00      	nop
 800fe1c:	e004      	b.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fe1e:	bf00      	nop
 800fe20:	e002      	b.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fe22:	bf00      	nop
 800fe24:	e000      	b.n	800fe28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fe26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d10b      	bne.n	800fe48 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fe30:	4ba1      	ldr	r3, [pc, #644]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe34:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800fe38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fe40:	4a9d      	ldr	r2, [pc, #628]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe42:	430b      	orrs	r3, r1
 800fe44:	6593      	str	r3, [r2, #88]	; 0x58
 800fe46:	e003      	b.n	800fe50 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fe50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe58:	f002 0308 	and.w	r3, r2, #8
 800fe5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fe60:	2300      	movs	r3, #0
 800fe62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fe66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	d01e      	beq.n	800feae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800fe70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe7c:	d10c      	bne.n	800fe98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fe7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe82:	3328      	adds	r3, #40	; 0x28
 800fe84:	2102      	movs	r1, #2
 800fe86:	4618      	mov	r0, r3
 800fe88:	f001 fd26 	bl	80118d8 <RCCEx_PLL3_Config>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d002      	beq.n	800fe98 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800fe92:	2301      	movs	r3, #1
 800fe94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fe98:	4b87      	ldr	r3, [pc, #540]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fe9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fea8:	4a83      	ldr	r2, [pc, #524]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800feaa:	430b      	orrs	r3, r1
 800feac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800feae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb6:	f002 0310 	and.w	r3, r2, #16
 800feba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800febe:	2300      	movs	r3, #0
 800fec0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fec4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800fec8:	460b      	mov	r3, r1
 800feca:	4313      	orrs	r3, r2
 800fecc:	d01e      	beq.n	800ff0c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800feda:	d10c      	bne.n	800fef6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fee0:	3328      	adds	r3, #40	; 0x28
 800fee2:	2102      	movs	r1, #2
 800fee4:	4618      	mov	r0, r3
 800fee6:	f001 fcf7 	bl	80118d8 <RCCEx_PLL3_Config>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d002      	beq.n	800fef6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800fef0:	2301      	movs	r3, #1
 800fef2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fef6:	4b70      	ldr	r3, [pc, #448]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fefa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ff06:	4a6c      	ldr	r2, [pc, #432]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff08:	430b      	orrs	r3, r1
 800ff0a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ff0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff14:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ff18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ff22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ff26:	460b      	mov	r3, r1
 800ff28:	4313      	orrs	r3, r2
 800ff2a:	d03e      	beq.n	800ffaa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ff2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ff34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff38:	d022      	beq.n	800ff80 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ff3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ff3e:	d81b      	bhi.n	800ff78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d003      	beq.n	800ff4c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ff44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff48:	d00b      	beq.n	800ff62 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ff4a:	e015      	b.n	800ff78 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ff4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff50:	3308      	adds	r3, #8
 800ff52:	2100      	movs	r1, #0
 800ff54:	4618      	mov	r0, r3
 800ff56:	f001 fc0d 	bl	8011774 <RCCEx_PLL2_Config>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ff60:	e00f      	b.n	800ff82 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ff62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff66:	3328      	adds	r3, #40	; 0x28
 800ff68:	2102      	movs	r1, #2
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f001 fcb4 	bl	80118d8 <RCCEx_PLL3_Config>
 800ff70:	4603      	mov	r3, r0
 800ff72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ff76:	e004      	b.n	800ff82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ff7e:	e000      	b.n	800ff82 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ff80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10b      	bne.n	800ffa2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ff8a:	4b4b      	ldr	r3, [pc, #300]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff8e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ff92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ff9a:	4a47      	ldr	r2, [pc, #284]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ff9c:	430b      	orrs	r3, r1
 800ff9e:	6593      	str	r3, [r2, #88]	; 0x58
 800ffa0:	e003      	b.n	800ffaa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ffa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ffaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ffb6:	67bb      	str	r3, [r7, #120]	; 0x78
 800ffb8:	2300      	movs	r3, #0
 800ffba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ffbc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	d03b      	beq.n	801003e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ffc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ffd2:	d01f      	beq.n	8010014 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ffd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ffd8:	d818      	bhi.n	801000c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ffda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffde:	d003      	beq.n	800ffe8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ffe0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ffe4:	d007      	beq.n	800fff6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ffe6:	e011      	b.n	801000c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ffe8:	4b33      	ldr	r3, [pc, #204]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ffea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffec:	4a32      	ldr	r2, [pc, #200]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ffee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800fff4:	e00f      	b.n	8010016 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fffa:	3328      	adds	r3, #40	; 0x28
 800fffc:	2101      	movs	r1, #1
 800fffe:	4618      	mov	r0, r3
 8010000:	f001 fc6a 	bl	80118d8 <RCCEx_PLL3_Config>
 8010004:	4603      	mov	r3, r0
 8010006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801000a:	e004      	b.n	8010016 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801000c:	2301      	movs	r3, #1
 801000e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010012:	e000      	b.n	8010016 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8010014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801001a:	2b00      	cmp	r3, #0
 801001c:	d10b      	bne.n	8010036 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801001e:	4b26      	ldr	r3, [pc, #152]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010022:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8010026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801002a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801002e:	4a22      	ldr	r2, [pc, #136]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010030:	430b      	orrs	r3, r1
 8010032:	6553      	str	r3, [r2, #84]	; 0x54
 8010034:	e003      	b.n	801003e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801003a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801003e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010046:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801004a:	673b      	str	r3, [r7, #112]	; 0x70
 801004c:	2300      	movs	r3, #0
 801004e:	677b      	str	r3, [r7, #116]	; 0x74
 8010050:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010054:	460b      	mov	r3, r1
 8010056:	4313      	orrs	r3, r2
 8010058:	d034      	beq.n	80100c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801005a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801005e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010060:	2b00      	cmp	r3, #0
 8010062:	d003      	beq.n	801006c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8010064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010068:	d007      	beq.n	801007a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801006a:	e011      	b.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801006c:	4b12      	ldr	r3, [pc, #72]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801006e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010070:	4a11      	ldr	r2, [pc, #68]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010078:	e00e      	b.n	8010098 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801007a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801007e:	3308      	adds	r3, #8
 8010080:	2102      	movs	r1, #2
 8010082:	4618      	mov	r0, r3
 8010084:	f001 fb76 	bl	8011774 <RCCEx_PLL2_Config>
 8010088:	4603      	mov	r3, r0
 801008a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801008e:	e003      	b.n	8010098 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8010090:	2301      	movs	r3, #1
 8010092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801009c:	2b00      	cmp	r3, #0
 801009e:	d10d      	bne.n	80100bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80100a0:	4b05      	ldr	r3, [pc, #20]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80100a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80100a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100ae:	4a02      	ldr	r2, [pc, #8]	; (80100b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80100b0:	430b      	orrs	r3, r1
 80100b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80100b4:	e006      	b.n	80100c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80100b6:	bf00      	nop
 80100b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80100c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80100c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100cc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80100d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80100d2:	2300      	movs	r3, #0
 80100d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80100d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80100da:	460b      	mov	r3, r1
 80100dc:	4313      	orrs	r3, r2
 80100de:	d00c      	beq.n	80100fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80100e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100e4:	3328      	adds	r3, #40	; 0x28
 80100e6:	2102      	movs	r1, #2
 80100e8:	4618      	mov	r0, r3
 80100ea:	f001 fbf5 	bl	80118d8 <RCCEx_PLL3_Config>
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d002      	beq.n	80100fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80100f4:	2301      	movs	r3, #1
 80100f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80100fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010102:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8010106:	663b      	str	r3, [r7, #96]	; 0x60
 8010108:	2300      	movs	r3, #0
 801010a:	667b      	str	r3, [r7, #100]	; 0x64
 801010c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8010110:	460b      	mov	r3, r1
 8010112:	4313      	orrs	r3, r2
 8010114:	d038      	beq.n	8010188 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8010116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801011a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801011e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010122:	d018      	beq.n	8010156 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8010124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010128:	d811      	bhi.n	801014e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801012a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801012e:	d014      	beq.n	801015a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8010130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010134:	d80b      	bhi.n	801014e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8010136:	2b00      	cmp	r3, #0
 8010138:	d011      	beq.n	801015e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801013a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801013e:	d106      	bne.n	801014e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010140:	4bc3      	ldr	r3, [pc, #780]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010144:	4ac2      	ldr	r2, [pc, #776]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801014a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801014c:	e008      	b.n	8010160 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801014e:	2301      	movs	r3, #1
 8010150:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010154:	e004      	b.n	8010160 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010156:	bf00      	nop
 8010158:	e002      	b.n	8010160 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801015a:	bf00      	nop
 801015c:	e000      	b.n	8010160 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801015e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010164:	2b00      	cmp	r3, #0
 8010166:	d10b      	bne.n	8010180 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010168:	4bb9      	ldr	r3, [pc, #740]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801016a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801016c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010178:	4ab5      	ldr	r2, [pc, #724]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801017a:	430b      	orrs	r3, r1
 801017c:	6553      	str	r3, [r2, #84]	; 0x54
 801017e:	e003      	b.n	8010188 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010184:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801018c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010190:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8010194:	65bb      	str	r3, [r7, #88]	; 0x58
 8010196:	2300      	movs	r3, #0
 8010198:	65fb      	str	r3, [r7, #92]	; 0x5c
 801019a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801019e:	460b      	mov	r3, r1
 80101a0:	4313      	orrs	r3, r2
 80101a2:	d009      	beq.n	80101b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80101a4:	4baa      	ldr	r3, [pc, #680]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80101ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101b2:	4aa7      	ldr	r2, [pc, #668]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101b4:	430b      	orrs	r3, r1
 80101b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80101b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80101c4:	653b      	str	r3, [r7, #80]	; 0x50
 80101c6:	2300      	movs	r3, #0
 80101c8:	657b      	str	r3, [r7, #84]	; 0x54
 80101ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80101ce:	460b      	mov	r3, r1
 80101d0:	4313      	orrs	r3, r2
 80101d2:	d00a      	beq.n	80101ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80101d4:	4b9e      	ldr	r3, [pc, #632]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101d6:	691b      	ldr	r3, [r3, #16]
 80101d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80101dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80101e4:	4a9a      	ldr	r2, [pc, #616]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80101e6:	430b      	orrs	r3, r1
 80101e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80101ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80101f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80101f8:	2300      	movs	r3, #0
 80101fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80101fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010200:	460b      	mov	r3, r1
 8010202:	4313      	orrs	r3, r2
 8010204:	d009      	beq.n	801021a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010206:	4b92      	ldr	r3, [pc, #584]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801020a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801020e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010214:	4a8e      	ldr	r2, [pc, #568]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010216:	430b      	orrs	r3, r1
 8010218:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801021a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801021e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010222:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8010226:	643b      	str	r3, [r7, #64]	; 0x40
 8010228:	2300      	movs	r3, #0
 801022a:	647b      	str	r3, [r7, #68]	; 0x44
 801022c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010230:	460b      	mov	r3, r1
 8010232:	4313      	orrs	r3, r2
 8010234:	d00e      	beq.n	8010254 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010236:	4b86      	ldr	r3, [pc, #536]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010238:	691b      	ldr	r3, [r3, #16]
 801023a:	4a85      	ldr	r2, [pc, #532]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801023c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010240:	6113      	str	r3, [r2, #16]
 8010242:	4b83      	ldr	r3, [pc, #524]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010244:	6919      	ldr	r1, [r3, #16]
 8010246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801024a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801024e:	4a80      	ldr	r2, [pc, #512]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010250:	430b      	orrs	r3, r1
 8010252:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8010260:	63bb      	str	r3, [r7, #56]	; 0x38
 8010262:	2300      	movs	r3, #0
 8010264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010266:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801026a:	460b      	mov	r3, r1
 801026c:	4313      	orrs	r3, r2
 801026e:	d009      	beq.n	8010284 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010270:	4b77      	ldr	r3, [pc, #476]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010274:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8010278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801027c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801027e:	4a74      	ldr	r2, [pc, #464]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010280:	430b      	orrs	r3, r1
 8010282:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8010290:	633b      	str	r3, [r7, #48]	; 0x30
 8010292:	2300      	movs	r3, #0
 8010294:	637b      	str	r3, [r7, #52]	; 0x34
 8010296:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801029a:	460b      	mov	r3, r1
 801029c:	4313      	orrs	r3, r2
 801029e:	d00a      	beq.n	80102b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80102a0:	4b6b      	ldr	r3, [pc, #428]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80102a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80102a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102b0:	4a67      	ldr	r2, [pc, #412]	; (8010450 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80102b2:	430b      	orrs	r3, r1
 80102b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80102b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102be:	2100      	movs	r1, #0
 80102c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80102c2:	f003 0301 	and.w	r3, r3, #1
 80102c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80102cc:	460b      	mov	r3, r1
 80102ce:	4313      	orrs	r3, r2
 80102d0:	d011      	beq.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80102d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102d6:	3308      	adds	r3, #8
 80102d8:	2100      	movs	r1, #0
 80102da:	4618      	mov	r0, r3
 80102dc:	f001 fa4a 	bl	8011774 <RCCEx_PLL2_Config>
 80102e0:	4603      	mov	r3, r0
 80102e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80102e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d003      	beq.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80102f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	2100      	movs	r1, #0
 8010300:	6239      	str	r1, [r7, #32]
 8010302:	f003 0302 	and.w	r3, r3, #2
 8010306:	627b      	str	r3, [r7, #36]	; 0x24
 8010308:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801030c:	460b      	mov	r3, r1
 801030e:	4313      	orrs	r3, r2
 8010310:	d011      	beq.n	8010336 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010316:	3308      	adds	r3, #8
 8010318:	2101      	movs	r1, #1
 801031a:	4618      	mov	r0, r3
 801031c:	f001 fa2a 	bl	8011774 <RCCEx_PLL2_Config>
 8010320:	4603      	mov	r3, r0
 8010322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801032a:	2b00      	cmp	r3, #0
 801032c:	d003      	beq.n	8010336 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801032e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8010336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033e:	2100      	movs	r1, #0
 8010340:	61b9      	str	r1, [r7, #24]
 8010342:	f003 0304 	and.w	r3, r3, #4
 8010346:	61fb      	str	r3, [r7, #28]
 8010348:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801034c:	460b      	mov	r3, r1
 801034e:	4313      	orrs	r3, r2
 8010350:	d011      	beq.n	8010376 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010356:	3308      	adds	r3, #8
 8010358:	2102      	movs	r1, #2
 801035a:	4618      	mov	r0, r3
 801035c:	f001 fa0a 	bl	8011774 <RCCEx_PLL2_Config>
 8010360:	4603      	mov	r3, r0
 8010362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801036a:	2b00      	cmp	r3, #0
 801036c:	d003      	beq.n	8010376 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801036e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801037a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037e:	2100      	movs	r1, #0
 8010380:	6139      	str	r1, [r7, #16]
 8010382:	f003 0308 	and.w	r3, r3, #8
 8010386:	617b      	str	r3, [r7, #20]
 8010388:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801038c:	460b      	mov	r3, r1
 801038e:	4313      	orrs	r3, r2
 8010390:	d011      	beq.n	80103b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010396:	3328      	adds	r3, #40	; 0x28
 8010398:	2100      	movs	r1, #0
 801039a:	4618      	mov	r0, r3
 801039c:	f001 fa9c 	bl	80118d8 <RCCEx_PLL3_Config>
 80103a0:	4603      	mov	r3, r0
 80103a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80103a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d003      	beq.n	80103b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80103b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	2100      	movs	r1, #0
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	f003 0310 	and.w	r3, r3, #16
 80103c6:	60fb      	str	r3, [r7, #12]
 80103c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80103cc:	460b      	mov	r3, r1
 80103ce:	4313      	orrs	r3, r2
 80103d0:	d011      	beq.n	80103f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80103d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103d6:	3328      	adds	r3, #40	; 0x28
 80103d8:	2101      	movs	r1, #1
 80103da:	4618      	mov	r0, r3
 80103dc:	f001 fa7c 	bl	80118d8 <RCCEx_PLL3_Config>
 80103e0:	4603      	mov	r3, r0
 80103e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80103e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d003      	beq.n	80103f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80103f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fe:	2100      	movs	r1, #0
 8010400:	6039      	str	r1, [r7, #0]
 8010402:	f003 0320 	and.w	r3, r3, #32
 8010406:	607b      	str	r3, [r7, #4]
 8010408:	e9d7 1200 	ldrd	r1, r2, [r7]
 801040c:	460b      	mov	r3, r1
 801040e:	4313      	orrs	r3, r2
 8010410:	d011      	beq.n	8010436 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010416:	3328      	adds	r3, #40	; 0x28
 8010418:	2102      	movs	r1, #2
 801041a:	4618      	mov	r0, r3
 801041c:	f001 fa5c 	bl	80118d8 <RCCEx_PLL3_Config>
 8010420:	4603      	mov	r3, r0
 8010422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8010426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801042a:	2b00      	cmp	r3, #0
 801042c:	d003      	beq.n	8010436 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801042e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8010436:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 801043a:	2b00      	cmp	r3, #0
 801043c:	d101      	bne.n	8010442 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801043e:	2300      	movs	r3, #0
 8010440:	e000      	b.n	8010444 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8010442:	2301      	movs	r3, #1
}
 8010444:	4618      	mov	r0, r3
 8010446:	f507 7794 	add.w	r7, r7, #296	; 0x128
 801044a:	46bd      	mov	sp, r7
 801044c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010450:	58024400 	.word	0x58024400

08010454 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b090      	sub	sp, #64	; 0x40
 8010458:	af00      	add	r7, sp, #0
 801045a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801045e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010462:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8010466:	430b      	orrs	r3, r1
 8010468:	f040 8094 	bne.w	8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801046c:	4b9e      	ldr	r3, [pc, #632]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801046e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010470:	f003 0307 	and.w	r3, r3, #7
 8010474:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010478:	2b04      	cmp	r3, #4
 801047a:	f200 8087 	bhi.w	801058c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801047e:	a201      	add	r2, pc, #4	; (adr r2, 8010484 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010484:	08010499 	.word	0x08010499
 8010488:	080104c1 	.word	0x080104c1
 801048c:	080104e9 	.word	0x080104e9
 8010490:	08010585 	.word	0x08010585
 8010494:	08010511 	.word	0x08010511
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010498:	4b93      	ldr	r3, [pc, #588]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104a4:	d108      	bne.n	80104b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80104a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104aa:	4618      	mov	r0, r3
 80104ac:	f001 f810 	bl	80114d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80104b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104b4:	f000 bd45 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104b8:	2300      	movs	r3, #0
 80104ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104bc:	f000 bd41 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80104c0:	4b89      	ldr	r3, [pc, #548]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80104cc:	d108      	bne.n	80104e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104ce:	f107 0318 	add.w	r3, r7, #24
 80104d2:	4618      	mov	r0, r3
 80104d4:	f000 fd54 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104dc:	f000 bd31 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104e0:	2300      	movs	r3, #0
 80104e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104e4:	f000 bd2d 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104e8:	4b7f      	ldr	r3, [pc, #508]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104f4:	d108      	bne.n	8010508 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104f6:	f107 030c 	add.w	r3, r7, #12
 80104fa:	4618      	mov	r0, r3
 80104fc:	f000 fe94 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010504:	f000 bd1d 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010508:	2300      	movs	r3, #0
 801050a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801050c:	f000 bd19 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010510:	4b75      	ldr	r3, [pc, #468]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010518:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801051a:	4b73      	ldr	r3, [pc, #460]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f003 0304 	and.w	r3, r3, #4
 8010522:	2b04      	cmp	r3, #4
 8010524:	d10c      	bne.n	8010540 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8010526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010528:	2b00      	cmp	r3, #0
 801052a:	d109      	bne.n	8010540 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801052c:	4b6e      	ldr	r3, [pc, #440]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	08db      	lsrs	r3, r3, #3
 8010532:	f003 0303 	and.w	r3, r3, #3
 8010536:	4a6d      	ldr	r2, [pc, #436]	; (80106ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010538:	fa22 f303 	lsr.w	r3, r2, r3
 801053c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801053e:	e01f      	b.n	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010540:	4b69      	ldr	r3, [pc, #420]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801054c:	d106      	bne.n	801055c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801054e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010554:	d102      	bne.n	801055c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010556:	4b66      	ldr	r3, [pc, #408]	; (80106f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010558:	63fb      	str	r3, [r7, #60]	; 0x3c
 801055a:	e011      	b.n	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801055c:	4b62      	ldr	r3, [pc, #392]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010568:	d106      	bne.n	8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801056a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010570:	d102      	bne.n	8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010572:	4b60      	ldr	r3, [pc, #384]	; (80106f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010576:	e003      	b.n	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010578:	2300      	movs	r3, #0
 801057a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801057c:	f000 bce1 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010580:	f000 bcdf 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010584:	4b5c      	ldr	r3, [pc, #368]	; (80106f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010588:	f000 bcdb 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801058c:	2300      	movs	r3, #0
 801058e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010590:	f000 bcd7 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010598:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 801059c:	430b      	orrs	r3, r1
 801059e:	f040 80ad 	bne.w	80106fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80105a2:	4b51      	ldr	r3, [pc, #324]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80105a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105a6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80105aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80105ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105b2:	d056      	beq.n	8010662 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80105b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105ba:	f200 8090 	bhi.w	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80105be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c0:	2bc0      	cmp	r3, #192	; 0xc0
 80105c2:	f000 8088 	beq.w	80106d6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80105c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c8:	2bc0      	cmp	r3, #192	; 0xc0
 80105ca:	f200 8088 	bhi.w	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80105ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d0:	2b80      	cmp	r3, #128	; 0x80
 80105d2:	d032      	beq.n	801063a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80105d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d6:	2b80      	cmp	r3, #128	; 0x80
 80105d8:	f200 8081 	bhi.w	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80105dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d003      	beq.n	80105ea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80105e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e4:	2b40      	cmp	r3, #64	; 0x40
 80105e6:	d014      	beq.n	8010612 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80105e8:	e079      	b.n	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80105ea:	4b3f      	ldr	r3, [pc, #252]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105f6:	d108      	bne.n	801060a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80105f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105fc:	4618      	mov	r0, r3
 80105fe:	f000 ff67 	bl	80114d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010606:	f000 bc9c 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801060a:	2300      	movs	r3, #0
 801060c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801060e:	f000 bc98 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010612:	4b35      	ldr	r3, [pc, #212]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801061a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801061e:	d108      	bne.n	8010632 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010620:	f107 0318 	add.w	r3, r7, #24
 8010624:	4618      	mov	r0, r3
 8010626:	f000 fcab 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801062a:	69bb      	ldr	r3, [r7, #24]
 801062c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801062e:	f000 bc88 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010632:	2300      	movs	r3, #0
 8010634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010636:	f000 bc84 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801063a:	4b2b      	ldr	r3, [pc, #172]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010646:	d108      	bne.n	801065a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010648:	f107 030c 	add.w	r3, r7, #12
 801064c:	4618      	mov	r0, r3
 801064e:	f000 fdeb 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010656:	f000 bc74 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801065a:	2300      	movs	r3, #0
 801065c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801065e:	f000 bc70 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010662:	4b21      	ldr	r3, [pc, #132]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010666:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801066a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801066c:	4b1e      	ldr	r3, [pc, #120]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f003 0304 	and.w	r3, r3, #4
 8010674:	2b04      	cmp	r3, #4
 8010676:	d10c      	bne.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801067a:	2b00      	cmp	r3, #0
 801067c:	d109      	bne.n	8010692 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801067e:	4b1a      	ldr	r3, [pc, #104]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	08db      	lsrs	r3, r3, #3
 8010684:	f003 0303 	and.w	r3, r3, #3
 8010688:	4a18      	ldr	r2, [pc, #96]	; (80106ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801068a:	fa22 f303 	lsr.w	r3, r2, r3
 801068e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010690:	e01f      	b.n	80106d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010692:	4b15      	ldr	r3, [pc, #84]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801069a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801069e:	d106      	bne.n	80106ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80106a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106a6:	d102      	bne.n	80106ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80106a8:	4b11      	ldr	r3, [pc, #68]	; (80106f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80106aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106ac:	e011      	b.n	80106d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80106ae:	4b0e      	ldr	r3, [pc, #56]	; (80106e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106ba:	d106      	bne.n	80106ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80106bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106c2:	d102      	bne.n	80106ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80106c4:	4b0b      	ldr	r3, [pc, #44]	; (80106f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80106c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106c8:	e003      	b.n	80106d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80106ca:	2300      	movs	r3, #0
 80106cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80106ce:	f000 bc38 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106d2:	f000 bc36 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80106d6:	4b08      	ldr	r3, [pc, #32]	; (80106f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80106d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106da:	f000 bc32 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80106de:	2300      	movs	r3, #0
 80106e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106e2:	f000 bc2e 	b.w	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106e6:	bf00      	nop
 80106e8:	58024400 	.word	0x58024400
 80106ec:	03d09000 	.word	0x03d09000
 80106f0:	003d0900 	.word	0x003d0900
 80106f4:	017d7840 	.word	0x017d7840
 80106f8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80106fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010700:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8010704:	430b      	orrs	r3, r1
 8010706:	f040 809c 	bne.w	8010842 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801070a:	4b9e      	ldr	r3, [pc, #632]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801070e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8010712:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010716:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801071a:	d054      	beq.n	80107c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 801071c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010722:	f200 808b 	bhi.w	801083c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010728:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801072c:	f000 8083 	beq.w	8010836 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010732:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010736:	f200 8081 	bhi.w	801083c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801073a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010740:	d02f      	beq.n	80107a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010748:	d878      	bhi.n	801083c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801074a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074c:	2b00      	cmp	r3, #0
 801074e:	d004      	beq.n	801075a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010756:	d012      	beq.n	801077e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010758:	e070      	b.n	801083c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801075a:	4b8a      	ldr	r3, [pc, #552]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010766:	d107      	bne.n	8010778 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801076c:	4618      	mov	r0, r3
 801076e:	f000 feaf 	bl	80114d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010774:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010776:	e3e4      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010778:	2300      	movs	r3, #0
 801077a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801077c:	e3e1      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801077e:	4b81      	ldr	r3, [pc, #516]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801078a:	d107      	bne.n	801079c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801078c:	f107 0318 	add.w	r3, r7, #24
 8010790:	4618      	mov	r0, r3
 8010792:	f000 fbf5 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801079a:	e3d2      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801079c:	2300      	movs	r3, #0
 801079e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107a0:	e3cf      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80107a2:	4b78      	ldr	r3, [pc, #480]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107ae:	d107      	bne.n	80107c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80107b0:	f107 030c 	add.w	r3, r7, #12
 80107b4:	4618      	mov	r0, r3
 80107b6:	f000 fd37 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107be:	e3c0      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107c0:	2300      	movs	r3, #0
 80107c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107c4:	e3bd      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80107c6:	4b6f      	ldr	r3, [pc, #444]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80107ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80107d0:	4b6c      	ldr	r3, [pc, #432]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f003 0304 	and.w	r3, r3, #4
 80107d8:	2b04      	cmp	r3, #4
 80107da:	d10c      	bne.n	80107f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80107dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d109      	bne.n	80107f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80107e2:	4b68      	ldr	r3, [pc, #416]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	08db      	lsrs	r3, r3, #3
 80107e8:	f003 0303 	and.w	r3, r3, #3
 80107ec:	4a66      	ldr	r2, [pc, #408]	; (8010988 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80107ee:	fa22 f303 	lsr.w	r3, r2, r3
 80107f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107f4:	e01e      	b.n	8010834 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80107f6:	4b63      	ldr	r3, [pc, #396]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010802:	d106      	bne.n	8010812 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801080a:	d102      	bne.n	8010812 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801080c:	4b5f      	ldr	r3, [pc, #380]	; (801098c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801080e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010810:	e010      	b.n	8010834 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010812:	4b5c      	ldr	r3, [pc, #368]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801081a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801081e:	d106      	bne.n	801082e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010826:	d102      	bne.n	801082e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010828:	4b59      	ldr	r3, [pc, #356]	; (8010990 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801082a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801082c:	e002      	b.n	8010834 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010832:	e386      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010834:	e385      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010836:	4b57      	ldr	r3, [pc, #348]	; (8010994 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801083a:	e382      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801083c:	2300      	movs	r3, #0
 801083e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010840:	e37f      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010846:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801084a:	430b      	orrs	r3, r1
 801084c:	f040 80a7 	bne.w	801099e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010850:	4b4c      	ldr	r3, [pc, #304]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010854:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8010858:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010860:	d055      	beq.n	801090e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010868:	f200 8096 	bhi.w	8010998 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801086c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010872:	f000 8084 	beq.w	801097e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8010876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010878:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801087c:	f200 808c 	bhi.w	8010998 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010882:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010886:	d030      	beq.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801088e:	f200 8083 	bhi.w	8010998 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801089e:	d012      	beq.n	80108c6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80108a0:	e07a      	b.n	8010998 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80108a2:	4b38      	ldr	r3, [pc, #224]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80108ae:	d107      	bne.n	80108c0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80108b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108b4:	4618      	mov	r0, r3
 80108b6:	f000 fe0b 	bl	80114d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80108ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108be:	e340      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108c0:	2300      	movs	r3, #0
 80108c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108c4:	e33d      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80108c6:	4b2f      	ldr	r3, [pc, #188]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80108d2:	d107      	bne.n	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108d4:	f107 0318 	add.w	r3, r7, #24
 80108d8:	4618      	mov	r0, r3
 80108da:	f000 fb51 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108e2:	e32e      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108e4:	2300      	movs	r3, #0
 80108e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108e8:	e32b      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80108ea:	4b26      	ldr	r3, [pc, #152]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108f6:	d107      	bne.n	8010908 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108f8:	f107 030c 	add.w	r3, r7, #12
 80108fc:	4618      	mov	r0, r3
 80108fe:	f000 fc93 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010906:	e31c      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010908:	2300      	movs	r3, #0
 801090a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801090c:	e319      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801090e:	4b1d      	ldr	r3, [pc, #116]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010912:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010916:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010918:	4b1a      	ldr	r3, [pc, #104]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	f003 0304 	and.w	r3, r3, #4
 8010920:	2b04      	cmp	r3, #4
 8010922:	d10c      	bne.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010926:	2b00      	cmp	r3, #0
 8010928:	d109      	bne.n	801093e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801092a:	4b16      	ldr	r3, [pc, #88]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	08db      	lsrs	r3, r3, #3
 8010930:	f003 0303 	and.w	r3, r3, #3
 8010934:	4a14      	ldr	r2, [pc, #80]	; (8010988 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010936:	fa22 f303 	lsr.w	r3, r2, r3
 801093a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801093c:	e01e      	b.n	801097c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801093e:	4b11      	ldr	r3, [pc, #68]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801094a:	d106      	bne.n	801095a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801094c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801094e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010952:	d102      	bne.n	801095a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010954:	4b0d      	ldr	r3, [pc, #52]	; (801098c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010958:	e010      	b.n	801097c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801095a:	4b0a      	ldr	r3, [pc, #40]	; (8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010966:	d106      	bne.n	8010976 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801096a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801096e:	d102      	bne.n	8010976 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010970:	4b07      	ldr	r3, [pc, #28]	; (8010990 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010974:	e002      	b.n	801097c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010976:	2300      	movs	r3, #0
 8010978:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801097a:	e2e2      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801097c:	e2e1      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801097e:	4b05      	ldr	r3, [pc, #20]	; (8010994 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010982:	e2de      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010984:	58024400 	.word	0x58024400
 8010988:	03d09000 	.word	0x03d09000
 801098c:	003d0900 	.word	0x003d0900
 8010990:	017d7840 	.word	0x017d7840
 8010994:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010998:	2300      	movs	r3, #0
 801099a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801099c:	e2d1      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801099e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109a2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80109a6:	430b      	orrs	r3, r1
 80109a8:	f040 809c 	bne.w	8010ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80109ac:	4b93      	ldr	r3, [pc, #588]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80109ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80109b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80109b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80109bc:	d054      	beq.n	8010a68 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80109be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80109c4:	f200 808b 	bhi.w	8010ade <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80109c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80109ce:	f000 8083 	beq.w	8010ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80109d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80109d8:	f200 8081 	bhi.w	8010ade <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80109dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109e2:	d02f      	beq.n	8010a44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80109e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109ea:	d878      	bhi.n	8010ade <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80109ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d004      	beq.n	80109fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80109f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109f8:	d012      	beq.n	8010a20 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80109fa:	e070      	b.n	8010ade <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80109fc:	4b7f      	ldr	r3, [pc, #508]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010a08:	d107      	bne.n	8010a1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f000 fd5e 	bl	80114d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a18:	e293      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a1e:	e290      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a20:	4b76      	ldr	r3, [pc, #472]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a2c:	d107      	bne.n	8010a3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a2e:	f107 0318 	add.w	r3, r7, #24
 8010a32:	4618      	mov	r0, r3
 8010a34:	f000 faa4 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010a38:	69bb      	ldr	r3, [r7, #24]
 8010a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a3c:	e281      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a42:	e27e      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a44:	4b6d      	ldr	r3, [pc, #436]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a50:	d107      	bne.n	8010a62 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a52:	f107 030c 	add.w	r3, r7, #12
 8010a56:	4618      	mov	r0, r3
 8010a58:	f000 fbe6 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a60:	e26f      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a62:	2300      	movs	r3, #0
 8010a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a66:	e26c      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010a68:	4b64      	ldr	r3, [pc, #400]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010a70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010a72:	4b62      	ldr	r3, [pc, #392]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	f003 0304 	and.w	r3, r3, #4
 8010a7a:	2b04      	cmp	r3, #4
 8010a7c:	d10c      	bne.n	8010a98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d109      	bne.n	8010a98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010a84:	4b5d      	ldr	r3, [pc, #372]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	08db      	lsrs	r3, r3, #3
 8010a8a:	f003 0303 	and.w	r3, r3, #3
 8010a8e:	4a5c      	ldr	r2, [pc, #368]	; (8010c00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010a90:	fa22 f303 	lsr.w	r3, r2, r3
 8010a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a96:	e01e      	b.n	8010ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010a98:	4b58      	ldr	r3, [pc, #352]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010aa4:	d106      	bne.n	8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8010aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010aac:	d102      	bne.n	8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010aae:	4b55      	ldr	r3, [pc, #340]	; (8010c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ab2:	e010      	b.n	8010ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010ab4:	4b51      	ldr	r3, [pc, #324]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ac0:	d106      	bne.n	8010ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8010ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ac8:	d102      	bne.n	8010ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010aca:	4b4f      	ldr	r3, [pc, #316]	; (8010c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ace:	e002      	b.n	8010ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010ad4:	e235      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010ad6:	e234      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010ad8:	4b4c      	ldr	r3, [pc, #304]	; (8010c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010adc:	e231      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ae2:	e22e      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ae8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010aec:	430b      	orrs	r3, r1
 8010aee:	f040 808f 	bne.w	8010c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8010af2:	4b42      	ldr	r3, [pc, #264]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010af6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010afa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010b02:	d06b      	beq.n	8010bdc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8010b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010b0a:	d874      	bhi.n	8010bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010b12:	d056      	beq.n	8010bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010b1a:	d86c      	bhi.n	8010bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010b22:	d03b      	beq.n	8010b9c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010b2a:	d864      	bhi.n	8010bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b32:	d021      	beq.n	8010b78 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b3a:	d85c      	bhi.n	8010bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d004      	beq.n	8010b4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8010b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b48:	d004      	beq.n	8010b54 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010b4a:	e054      	b.n	8010bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010b4c:	f7fe fa0a 	bl	800ef64 <HAL_RCC_GetPCLK1Freq>
 8010b50:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010b52:	e1f6      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010b54:	4b29      	ldr	r3, [pc, #164]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010b60:	d107      	bne.n	8010b72 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b62:	f107 0318 	add.w	r3, r7, #24
 8010b66:	4618      	mov	r0, r3
 8010b68:	f000 fa0a 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b70:	e1e7      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b72:	2300      	movs	r3, #0
 8010b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b76:	e1e4      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010b78:	4b20      	ldr	r3, [pc, #128]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b84:	d107      	bne.n	8010b96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b86:	f107 030c 	add.w	r3, r7, #12
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f000 fb4c 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b94:	e1d5      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b96:	2300      	movs	r3, #0
 8010b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b9a:	e1d2      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010b9c:	4b17      	ldr	r3, [pc, #92]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f003 0304 	and.w	r3, r3, #4
 8010ba4:	2b04      	cmp	r3, #4
 8010ba6:	d109      	bne.n	8010bbc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ba8:	4b14      	ldr	r3, [pc, #80]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	08db      	lsrs	r3, r3, #3
 8010bae:	f003 0303 	and.w	r3, r3, #3
 8010bb2:	4a13      	ldr	r2, [pc, #76]	; (8010c00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8010bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bba:	e1c2      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bc0:	e1bf      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010bc2:	4b0e      	ldr	r3, [pc, #56]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bce:	d102      	bne.n	8010bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010bd0:	4b0c      	ldr	r3, [pc, #48]	; (8010c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bd4:	e1b5      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bda:	e1b2      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010bdc:	4b07      	ldr	r3, [pc, #28]	; (8010bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010be8:	d102      	bne.n	8010bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010bea:	4b07      	ldr	r3, [pc, #28]	; (8010c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bee:	e1a8      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bf4:	e1a5      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bfa:	e1a2      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010bfc:	58024400 	.word	0x58024400
 8010c00:	03d09000 	.word	0x03d09000
 8010c04:	003d0900 	.word	0x003d0900
 8010c08:	017d7840 	.word	0x017d7840
 8010c0c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c14:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010c18:	430b      	orrs	r3, r1
 8010c1a:	d173      	bne.n	8010d04 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010c1c:	4b9c      	ldr	r3, [pc, #624]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010c24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c2c:	d02f      	beq.n	8010c8e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c34:	d863      	bhi.n	8010cfe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8010c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d004      	beq.n	8010c46 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c42:	d012      	beq.n	8010c6a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8010c44:	e05b      	b.n	8010cfe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010c46:	4b92      	ldr	r3, [pc, #584]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010c52:	d107      	bne.n	8010c64 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c54:	f107 0318 	add.w	r3, r7, #24
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f000 f991 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010c5e:	69bb      	ldr	r3, [r7, #24]
 8010c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c62:	e16e      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c64:	2300      	movs	r3, #0
 8010c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c68:	e16b      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010c6a:	4b89      	ldr	r3, [pc, #548]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c76:	d107      	bne.n	8010c88 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c78:	f107 030c 	add.w	r3, r7, #12
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f000 fad3 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c86:	e15c      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c8c:	e159      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010c8e:	4b80      	ldr	r3, [pc, #512]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010c96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010c98:	4b7d      	ldr	r3, [pc, #500]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f003 0304 	and.w	r3, r3, #4
 8010ca0:	2b04      	cmp	r3, #4
 8010ca2:	d10c      	bne.n	8010cbe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d109      	bne.n	8010cbe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010caa:	4b79      	ldr	r3, [pc, #484]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	08db      	lsrs	r3, r3, #3
 8010cb0:	f003 0303 	and.w	r3, r3, #3
 8010cb4:	4a77      	ldr	r2, [pc, #476]	; (8010e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8010cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cbc:	e01e      	b.n	8010cfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010cbe:	4b74      	ldr	r3, [pc, #464]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cca:	d106      	bne.n	8010cda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010cd2:	d102      	bne.n	8010cda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010cd4:	4b70      	ldr	r3, [pc, #448]	; (8010e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cd8:	e010      	b.n	8010cfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010cda:	4b6d      	ldr	r3, [pc, #436]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ce6:	d106      	bne.n	8010cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010cee:	d102      	bne.n	8010cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010cf0:	4b6a      	ldr	r3, [pc, #424]	; (8010e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cf4:	e002      	b.n	8010cfc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010cfa:	e122      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010cfc:	e121      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d02:	e11e      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d08:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010d0c:	430b      	orrs	r3, r1
 8010d0e:	d133      	bne.n	8010d78 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010d10:	4b5f      	ldr	r3, [pc, #380]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d004      	beq.n	8010d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d26:	d012      	beq.n	8010d4e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010d28:	e023      	b.n	8010d72 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010d2a:	4b59      	ldr	r3, [pc, #356]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010d36:	d107      	bne.n	8010d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f000 fbc7 	bl	80114d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d46:	e0fc      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d4c:	e0f9      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010d4e:	4b50      	ldr	r3, [pc, #320]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010d5a:	d107      	bne.n	8010d6c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d5c:	f107 0318 	add.w	r3, r7, #24
 8010d60:	4618      	mov	r0, r3
 8010d62:	f000 f90d 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010d66:	6a3b      	ldr	r3, [r7, #32]
 8010d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d6a:	e0ea      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d70:	e0e7      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010d72:	2300      	movs	r3, #0
 8010d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d76:	e0e4      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d7c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010d80:	430b      	orrs	r3, r1
 8010d82:	f040 808d 	bne.w	8010ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010d86:	4b42      	ldr	r3, [pc, #264]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d8a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010d8e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d96:	d06b      	beq.n	8010e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d9e:	d874      	bhi.n	8010e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010da6:	d056      	beq.n	8010e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010dae:	d86c      	bhi.n	8010e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010db6:	d03b      	beq.n	8010e30 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010dbe:	d864      	bhi.n	8010e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010dc6:	d021      	beq.n	8010e0c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010dce:	d85c      	bhi.n	8010e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d004      	beq.n	8010de0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010ddc:	d004      	beq.n	8010de8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8010dde:	e054      	b.n	8010e8a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010de0:	f000 f8b8 	bl	8010f54 <HAL_RCCEx_GetD3PCLK1Freq>
 8010de4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010de6:	e0ac      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010de8:	4b29      	ldr	r3, [pc, #164]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010df4:	d107      	bne.n	8010e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010df6:	f107 0318 	add.w	r3, r7, #24
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f000 f8c0 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e04:	e09d      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e06:	2300      	movs	r3, #0
 8010e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e0a:	e09a      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010e0c:	4b20      	ldr	r3, [pc, #128]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e18:	d107      	bne.n	8010e2a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e1a:	f107 030c 	add.w	r3, r7, #12
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f000 fa02 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e28:	e08b      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e2e:	e088      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010e30:	4b17      	ldr	r3, [pc, #92]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f003 0304 	and.w	r3, r3, #4
 8010e38:	2b04      	cmp	r3, #4
 8010e3a:	d109      	bne.n	8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e3c:	4b14      	ldr	r3, [pc, #80]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	08db      	lsrs	r3, r3, #3
 8010e42:	f003 0303 	and.w	r3, r3, #3
 8010e46:	4a13      	ldr	r2, [pc, #76]	; (8010e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010e48:	fa22 f303 	lsr.w	r3, r2, r3
 8010e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e4e:	e078      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e50:	2300      	movs	r3, #0
 8010e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e54:	e075      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010e56:	4b0e      	ldr	r3, [pc, #56]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e62:	d102      	bne.n	8010e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010e64:	4b0c      	ldr	r3, [pc, #48]	; (8010e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e68:	e06b      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e6e:	e068      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010e70:	4b07      	ldr	r3, [pc, #28]	; (8010e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010e7c:	d102      	bne.n	8010e84 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010e7e:	4b07      	ldr	r3, [pc, #28]	; (8010e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e82:	e05e      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e84:	2300      	movs	r3, #0
 8010e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e88:	e05b      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e8e:	e058      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010e90:	58024400 	.word	0x58024400
 8010e94:	03d09000 	.word	0x03d09000
 8010e98:	003d0900 	.word	0x003d0900
 8010e9c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ea4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010ea8:	430b      	orrs	r3, r1
 8010eaa:	d148      	bne.n	8010f3e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010eac:	4b27      	ldr	r3, [pc, #156]	; (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010eb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ebc:	d02a      	beq.n	8010f14 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ec4:	d838      	bhi.n	8010f38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d004      	beq.n	8010ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010ed2:	d00d      	beq.n	8010ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010ed4:	e030      	b.n	8010f38 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010ed6:	4b1d      	ldr	r3, [pc, #116]	; (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010ee2:	d102      	bne.n	8010eea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010ee4:	4b1a      	ldr	r3, [pc, #104]	; (8010f50 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ee8:	e02b      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010eee:	e028      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010ef0:	4b16      	ldr	r3, [pc, #88]	; (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010efc:	d107      	bne.n	8010f0e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f02:	4618      	mov	r0, r3
 8010f04:	f000 fae4 	bl	80114d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f0c:	e019      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f12:	e016      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010f14:	4b0d      	ldr	r3, [pc, #52]	; (8010f4c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010f20:	d107      	bne.n	8010f32 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f22:	f107 0318 	add.w	r3, r7, #24
 8010f26:	4618      	mov	r0, r3
 8010f28:	f000 f82a 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f30:	e007      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f32:	2300      	movs	r3, #0
 8010f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f36:	e004      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f3c:	e001      	b.n	8010f42 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3740      	adds	r7, #64	; 0x40
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	58024400 	.word	0x58024400
 8010f50:	017d7840 	.word	0x017d7840

08010f54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010f58:	f7fd ffd4 	bl	800ef04 <HAL_RCC_GetHCLKFreq>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	4b06      	ldr	r3, [pc, #24]	; (8010f78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010f60:	6a1b      	ldr	r3, [r3, #32]
 8010f62:	091b      	lsrs	r3, r3, #4
 8010f64:	f003 0307 	and.w	r3, r3, #7
 8010f68:	4904      	ldr	r1, [pc, #16]	; (8010f7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010f6a:	5ccb      	ldrb	r3, [r1, r3]
 8010f6c:	f003 031f 	and.w	r3, r3, #31
 8010f70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	58024400 	.word	0x58024400
 8010f7c:	0801b564 	.word	0x0801b564

08010f80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010f80:	b480      	push	{r7}
 8010f82:	b089      	sub	sp, #36	; 0x24
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010f88:	4ba1      	ldr	r3, [pc, #644]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f8c:	f003 0303 	and.w	r3, r3, #3
 8010f90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010f92:	4b9f      	ldr	r3, [pc, #636]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f96:	0b1b      	lsrs	r3, r3, #12
 8010f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010f9e:	4b9c      	ldr	r3, [pc, #624]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa2:	091b      	lsrs	r3, r3, #4
 8010fa4:	f003 0301 	and.w	r3, r3, #1
 8010fa8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010faa:	4b99      	ldr	r3, [pc, #612]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fae:	08db      	lsrs	r3, r3, #3
 8010fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010fb4:	693a      	ldr	r2, [r7, #16]
 8010fb6:	fb02 f303 	mul.w	r3, r2, r3
 8010fba:	ee07 3a90 	vmov	s15, r3
 8010fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	f000 8111 	beq.w	80111f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	f000 8083 	beq.w	80110dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010fd6:	69bb      	ldr	r3, [r7, #24]
 8010fd8:	2b02      	cmp	r3, #2
 8010fda:	f200 80a1 	bhi.w	8011120 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d003      	beq.n	8010fec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010fe4:	69bb      	ldr	r3, [r7, #24]
 8010fe6:	2b01      	cmp	r3, #1
 8010fe8:	d056      	beq.n	8011098 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010fea:	e099      	b.n	8011120 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fec:	4b88      	ldr	r3, [pc, #544]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f003 0320 	and.w	r3, r3, #32
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d02d      	beq.n	8011054 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ff8:	4b85      	ldr	r3, [pc, #532]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	08db      	lsrs	r3, r3, #3
 8010ffe:	f003 0303 	and.w	r3, r3, #3
 8011002:	4a84      	ldr	r2, [pc, #528]	; (8011214 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8011004:	fa22 f303 	lsr.w	r3, r2, r3
 8011008:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	ee07 3a90 	vmov	s15, r3
 8011010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	ee07 3a90 	vmov	s15, r3
 801101a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801101e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011022:	4b7b      	ldr	r3, [pc, #492]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801102a:	ee07 3a90 	vmov	s15, r3
 801102e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011032:	ed97 6a03 	vldr	s12, [r7, #12]
 8011036:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801103a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801103e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801104a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801104e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011052:	e087      	b.n	8011164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	ee07 3a90 	vmov	s15, r3
 801105a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801105e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801121c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8011062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011066:	4b6a      	ldr	r3, [pc, #424]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801106a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801106e:	ee07 3a90 	vmov	s15, r3
 8011072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011076:	ed97 6a03 	vldr	s12, [r7, #12]
 801107a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801107e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801108a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801108e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011096:	e065      	b.n	8011164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	ee07 3a90 	vmov	s15, r3
 801109e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011220 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80110a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110aa:	4b59      	ldr	r3, [pc, #356]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80110ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110b2:	ee07 3a90 	vmov	s15, r3
 80110b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80110be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80110c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80110c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80110ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80110d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80110da:	e043      	b.n	8011164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	ee07 3a90 	vmov	s15, r3
 80110e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011224 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80110ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110ee:	4b48      	ldr	r3, [pc, #288]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80110f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110f6:	ee07 3a90 	vmov	s15, r3
 80110fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8011102:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801110a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801110e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011116:	ee67 7a27 	vmul.f32	s15, s14, s15
 801111a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801111e:	e021      	b.n	8011164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	ee07 3a90 	vmov	s15, r3
 8011126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801112a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011220 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801112e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011132:	4b37      	ldr	r3, [pc, #220]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801113a:	ee07 3a90 	vmov	s15, r3
 801113e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011142:	ed97 6a03 	vldr	s12, [r7, #12]
 8011146:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801114a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801114e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801115e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011162:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8011164:	4b2a      	ldr	r3, [pc, #168]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011168:	0a5b      	lsrs	r3, r3, #9
 801116a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801116e:	ee07 3a90 	vmov	s15, r3
 8011172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801117a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801117e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801118a:	ee17 2a90 	vmov	r2, s15
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8011192:	4b1f      	ldr	r3, [pc, #124]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011196:	0c1b      	lsrs	r3, r3, #16
 8011198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801119c:	ee07 3a90 	vmov	s15, r3
 80111a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80111b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111b8:	ee17 2a90 	vmov	r2, s15
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80111c0:	4b13      	ldr	r3, [pc, #76]	; (8011210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80111c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111c4:	0e1b      	lsrs	r3, r3, #24
 80111c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111ca:	ee07 3a90 	vmov	s15, r3
 80111ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80111da:	edd7 6a07 	vldr	s13, [r7, #28]
 80111de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80111e6:	ee17 2a90 	vmov	r2, s15
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80111ee:	e008      	b.n	8011202 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2200      	movs	r2, #0
 80111f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2200      	movs	r2, #0
 80111fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2200      	movs	r2, #0
 8011200:	609a      	str	r2, [r3, #8]
}
 8011202:	bf00      	nop
 8011204:	3724      	adds	r7, #36	; 0x24
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	58024400 	.word	0x58024400
 8011214:	03d09000 	.word	0x03d09000
 8011218:	46000000 	.word	0x46000000
 801121c:	4c742400 	.word	0x4c742400
 8011220:	4a742400 	.word	0x4a742400
 8011224:	4bbebc20 	.word	0x4bbebc20

08011228 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8011228:	b480      	push	{r7}
 801122a:	b089      	sub	sp, #36	; 0x24
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011230:	4ba1      	ldr	r3, [pc, #644]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011234:	f003 0303 	and.w	r3, r3, #3
 8011238:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801123a:	4b9f      	ldr	r3, [pc, #636]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801123e:	0d1b      	lsrs	r3, r3, #20
 8011240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011244:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8011246:	4b9c      	ldr	r3, [pc, #624]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801124a:	0a1b      	lsrs	r3, r3, #8
 801124c:	f003 0301 	and.w	r3, r3, #1
 8011250:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8011252:	4b99      	ldr	r3, [pc, #612]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011256:	08db      	lsrs	r3, r3, #3
 8011258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801125c:	693a      	ldr	r2, [r7, #16]
 801125e:	fb02 f303 	mul.w	r3, r2, r3
 8011262:	ee07 3a90 	vmov	s15, r3
 8011266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801126a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	2b00      	cmp	r3, #0
 8011272:	f000 8111 	beq.w	8011498 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	2b02      	cmp	r3, #2
 801127a:	f000 8083 	beq.w	8011384 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801127e:	69bb      	ldr	r3, [r7, #24]
 8011280:	2b02      	cmp	r3, #2
 8011282:	f200 80a1 	bhi.w	80113c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8011286:	69bb      	ldr	r3, [r7, #24]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d003      	beq.n	8011294 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801128c:	69bb      	ldr	r3, [r7, #24]
 801128e:	2b01      	cmp	r3, #1
 8011290:	d056      	beq.n	8011340 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8011292:	e099      	b.n	80113c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011294:	4b88      	ldr	r3, [pc, #544]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	f003 0320 	and.w	r3, r3, #32
 801129c:	2b00      	cmp	r3, #0
 801129e:	d02d      	beq.n	80112fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80112a0:	4b85      	ldr	r3, [pc, #532]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	08db      	lsrs	r3, r3, #3
 80112a6:	f003 0303 	and.w	r3, r3, #3
 80112aa:	4a84      	ldr	r2, [pc, #528]	; (80114bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80112ac:	fa22 f303 	lsr.w	r3, r2, r3
 80112b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	ee07 3a90 	vmov	s15, r3
 80112b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	ee07 3a90 	vmov	s15, r3
 80112c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112ca:	4b7b      	ldr	r3, [pc, #492]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80112cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112d2:	ee07 3a90 	vmov	s15, r3
 80112d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112da:	ed97 6a03 	vldr	s12, [r7, #12]
 80112de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80114c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80112e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80112fa:	e087      	b.n	801140c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	ee07 3a90 	vmov	s15, r3
 8011302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011306:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80114c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801130a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801130e:	4b6a      	ldr	r3, [pc, #424]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011316:	ee07 3a90 	vmov	s15, r3
 801131a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801131e:	ed97 6a03 	vldr	s12, [r7, #12]
 8011322:	eddf 5a67 	vldr	s11, [pc, #412]	; 80114c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801132a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801132e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011336:	ee67 7a27 	vmul.f32	s15, s14, s15
 801133a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801133e:	e065      	b.n	801140c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	ee07 3a90 	vmov	s15, r3
 8011346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801134a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80114c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801134e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011352:	4b59      	ldr	r3, [pc, #356]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801135a:	ee07 3a90 	vmov	s15, r3
 801135e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011362:	ed97 6a03 	vldr	s12, [r7, #12]
 8011366:	eddf 5a56 	vldr	s11, [pc, #344]	; 80114c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801136a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801136e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801137e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011382:	e043      	b.n	801140c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	ee07 3a90 	vmov	s15, r3
 801138a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801138e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80114cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8011392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011396:	4b48      	ldr	r3, [pc, #288]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801139a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801139e:	ee07 3a90 	vmov	s15, r3
 80113a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80113aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80114c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80113ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80113b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80113c6:	e021      	b.n	801140c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	ee07 3a90 	vmov	s15, r3
 80113ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80113d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80114c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80113d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80113da:	4b37      	ldr	r3, [pc, #220]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80113dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80113e2:	ee07 3a90 	vmov	s15, r3
 80113e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80113ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80113ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80114c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80113f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80113f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80113fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801140a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801140c:	4b2a      	ldr	r3, [pc, #168]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011410:	0a5b      	lsrs	r3, r3, #9
 8011412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011416:	ee07 3a90 	vmov	s15, r3
 801141a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801141e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011426:	edd7 6a07 	vldr	s13, [r7, #28]
 801142a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801142e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011432:	ee17 2a90 	vmov	r2, s15
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801143a:	4b1f      	ldr	r3, [pc, #124]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801143e:	0c1b      	lsrs	r3, r3, #16
 8011440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011444:	ee07 3a90 	vmov	s15, r3
 8011448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801144c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011454:	edd7 6a07 	vldr	s13, [r7, #28]
 8011458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801145c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011460:	ee17 2a90 	vmov	r2, s15
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011468:	4b13      	ldr	r3, [pc, #76]	; (80114b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801146c:	0e1b      	lsrs	r3, r3, #24
 801146e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011472:	ee07 3a90 	vmov	s15, r3
 8011476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801147a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801147e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011482:	edd7 6a07 	vldr	s13, [r7, #28]
 8011486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801148a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801148e:	ee17 2a90 	vmov	r2, s15
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8011496:	e008      	b.n	80114aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2200      	movs	r2, #0
 801149c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2200      	movs	r2, #0
 80114a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2200      	movs	r2, #0
 80114a8:	609a      	str	r2, [r3, #8]
}
 80114aa:	bf00      	nop
 80114ac:	3724      	adds	r7, #36	; 0x24
 80114ae:	46bd      	mov	sp, r7
 80114b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b4:	4770      	bx	lr
 80114b6:	bf00      	nop
 80114b8:	58024400 	.word	0x58024400
 80114bc:	03d09000 	.word	0x03d09000
 80114c0:	46000000 	.word	0x46000000
 80114c4:	4c742400 	.word	0x4c742400
 80114c8:	4a742400 	.word	0x4a742400
 80114cc:	4bbebc20 	.word	0x4bbebc20

080114d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b089      	sub	sp, #36	; 0x24
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80114d8:	4ba0      	ldr	r3, [pc, #640]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114dc:	f003 0303 	and.w	r3, r3, #3
 80114e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80114e2:	4b9e      	ldr	r3, [pc, #632]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114e6:	091b      	lsrs	r3, r3, #4
 80114e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80114ee:	4b9b      	ldr	r3, [pc, #620]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f2:	f003 0301 	and.w	r3, r3, #1
 80114f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80114f8:	4b98      	ldr	r3, [pc, #608]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80114fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114fc:	08db      	lsrs	r3, r3, #3
 80114fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011502:	693a      	ldr	r2, [r7, #16]
 8011504:	fb02 f303 	mul.w	r3, r2, r3
 8011508:	ee07 3a90 	vmov	s15, r3
 801150c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011510:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	2b00      	cmp	r3, #0
 8011518:	f000 8111 	beq.w	801173e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801151c:	69bb      	ldr	r3, [r7, #24]
 801151e:	2b02      	cmp	r3, #2
 8011520:	f000 8083 	beq.w	801162a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	2b02      	cmp	r3, #2
 8011528:	f200 80a1 	bhi.w	801166e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801152c:	69bb      	ldr	r3, [r7, #24]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d003      	beq.n	801153a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8011532:	69bb      	ldr	r3, [r7, #24]
 8011534:	2b01      	cmp	r3, #1
 8011536:	d056      	beq.n	80115e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011538:	e099      	b.n	801166e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801153a:	4b88      	ldr	r3, [pc, #544]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f003 0320 	and.w	r3, r3, #32
 8011542:	2b00      	cmp	r3, #0
 8011544:	d02d      	beq.n	80115a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011546:	4b85      	ldr	r3, [pc, #532]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	08db      	lsrs	r3, r3, #3
 801154c:	f003 0303 	and.w	r3, r3, #3
 8011550:	4a83      	ldr	r2, [pc, #524]	; (8011760 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011552:	fa22 f303 	lsr.w	r3, r2, r3
 8011556:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	ee07 3a90 	vmov	s15, r3
 801155e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	ee07 3a90 	vmov	s15, r3
 8011568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801156c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011570:	4b7a      	ldr	r3, [pc, #488]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011578:	ee07 3a90 	vmov	s15, r3
 801157c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011580:	ed97 6a03 	vldr	s12, [r7, #12]
 8011584:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011764 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801158c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011598:	ee67 7a27 	vmul.f32	s15, s14, s15
 801159c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80115a0:	e087      	b.n	80116b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	ee07 3a90 	vmov	s15, r3
 80115a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011768 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80115b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115b4:	4b69      	ldr	r3, [pc, #420]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80115b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115bc:	ee07 3a90 	vmov	s15, r3
 80115c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80115c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011764 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80115cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80115d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80115d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80115e4:	e065      	b.n	80116b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	ee07 3a90 	vmov	s15, r3
 80115ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801176c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80115f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80115f8:	4b58      	ldr	r3, [pc, #352]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80115fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011600:	ee07 3a90 	vmov	s15, r3
 8011604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011608:	ed97 6a03 	vldr	s12, [r7, #12]
 801160c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011764 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801161c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011624:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011628:	e043      	b.n	80116b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	ee07 3a90 	vmov	s15, r3
 8011630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011634:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011770 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801163c:	4b47      	ldr	r3, [pc, #284]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011644:	ee07 3a90 	vmov	s15, r3
 8011648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801164c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011650:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011764 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801165c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011668:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801166c:	e021      	b.n	80116b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	ee07 3a90 	vmov	s15, r3
 8011674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011678:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011768 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801167c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011680:	4b36      	ldr	r3, [pc, #216]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011688:	ee07 3a90 	vmov	s15, r3
 801168c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011690:	ed97 6a03 	vldr	s12, [r7, #12]
 8011694:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011764 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801169c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80116a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80116a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80116b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80116b2:	4b2a      	ldr	r3, [pc, #168]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116b6:	0a5b      	lsrs	r3, r3, #9
 80116b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116bc:	ee07 3a90 	vmov	s15, r3
 80116c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80116cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80116d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80116d8:	ee17 2a90 	vmov	r2, s15
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80116e0:	4b1e      	ldr	r3, [pc, #120]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80116e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e4:	0c1b      	lsrs	r3, r3, #16
 80116e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116ea:	ee07 3a90 	vmov	s15, r3
 80116ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80116fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80116fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011706:	ee17 2a90 	vmov	r2, s15
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801170e:	4b13      	ldr	r3, [pc, #76]	; (801175c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011712:	0e1b      	lsrs	r3, r3, #24
 8011714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011718:	ee07 3a90 	vmov	s15, r3
 801171c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011720:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011724:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011728:	edd7 6a07 	vldr	s13, [r7, #28]
 801172c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011734:	ee17 2a90 	vmov	r2, s15
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801173c:	e008      	b.n	8011750 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2200      	movs	r2, #0
 8011742:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2200      	movs	r2, #0
 8011748:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2200      	movs	r2, #0
 801174e:	609a      	str	r2, [r3, #8]
}
 8011750:	bf00      	nop
 8011752:	3724      	adds	r7, #36	; 0x24
 8011754:	46bd      	mov	sp, r7
 8011756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175a:	4770      	bx	lr
 801175c:	58024400 	.word	0x58024400
 8011760:	03d09000 	.word	0x03d09000
 8011764:	46000000 	.word	0x46000000
 8011768:	4c742400 	.word	0x4c742400
 801176c:	4a742400 	.word	0x4a742400
 8011770:	4bbebc20 	.word	0x4bbebc20

08011774 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b084      	sub	sp, #16
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801177e:	2300      	movs	r3, #0
 8011780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011782:	4b53      	ldr	r3, [pc, #332]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011786:	f003 0303 	and.w	r3, r3, #3
 801178a:	2b03      	cmp	r3, #3
 801178c:	d101      	bne.n	8011792 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801178e:	2301      	movs	r3, #1
 8011790:	e099      	b.n	80118c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011792:	4b4f      	ldr	r3, [pc, #316]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	4a4e      	ldr	r2, [pc, #312]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011798:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801179c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801179e:	f7f4 fc03 	bl	8005fa8 <HAL_GetTick>
 80117a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80117a4:	e008      	b.n	80117b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80117a6:	f7f4 fbff 	bl	8005fa8 <HAL_GetTick>
 80117aa:	4602      	mov	r2, r0
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	2b02      	cmp	r3, #2
 80117b2:	d901      	bls.n	80117b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80117b4:	2303      	movs	r3, #3
 80117b6:	e086      	b.n	80118c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80117b8:	4b45      	ldr	r3, [pc, #276]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d1f0      	bne.n	80117a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80117c4:	4b42      	ldr	r3, [pc, #264]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 80117c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	031b      	lsls	r3, r3, #12
 80117d2:	493f      	ldr	r1, [pc, #252]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 80117d4:	4313      	orrs	r3, r2
 80117d6:	628b      	str	r3, [r1, #40]	; 0x28
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	3b01      	subs	r3, #1
 80117de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	3b01      	subs	r3, #1
 80117e8:	025b      	lsls	r3, r3, #9
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	431a      	orrs	r2, r3
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	3b01      	subs	r3, #1
 80117f4:	041b      	lsls	r3, r3, #16
 80117f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80117fa:	431a      	orrs	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	691b      	ldr	r3, [r3, #16]
 8011800:	3b01      	subs	r3, #1
 8011802:	061b      	lsls	r3, r3, #24
 8011804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011808:	4931      	ldr	r1, [pc, #196]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 801180a:	4313      	orrs	r3, r2
 801180c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801180e:	4b30      	ldr	r3, [pc, #192]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011812:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	695b      	ldr	r3, [r3, #20]
 801181a:	492d      	ldr	r1, [pc, #180]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 801181c:	4313      	orrs	r3, r2
 801181e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011820:	4b2b      	ldr	r3, [pc, #172]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011824:	f023 0220 	bic.w	r2, r3, #32
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	699b      	ldr	r3, [r3, #24]
 801182c:	4928      	ldr	r1, [pc, #160]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 801182e:	4313      	orrs	r3, r2
 8011830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011832:	4b27      	ldr	r3, [pc, #156]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011836:	4a26      	ldr	r2, [pc, #152]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011838:	f023 0310 	bic.w	r3, r3, #16
 801183c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801183e:	4b24      	ldr	r3, [pc, #144]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011842:	4b24      	ldr	r3, [pc, #144]	; (80118d4 <RCCEx_PLL2_Config+0x160>)
 8011844:	4013      	ands	r3, r2
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	69d2      	ldr	r2, [r2, #28]
 801184a:	00d2      	lsls	r2, r2, #3
 801184c:	4920      	ldr	r1, [pc, #128]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 801184e:	4313      	orrs	r3, r2
 8011850:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011852:	4b1f      	ldr	r3, [pc, #124]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011856:	4a1e      	ldr	r2, [pc, #120]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011858:	f043 0310 	orr.w	r3, r3, #16
 801185c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d106      	bne.n	8011872 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011864:	4b1a      	ldr	r3, [pc, #104]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011868:	4a19      	ldr	r2, [pc, #100]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 801186a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801186e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011870:	e00f      	b.n	8011892 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	2b01      	cmp	r3, #1
 8011876:	d106      	bne.n	8011886 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011878:	4b15      	ldr	r3, [pc, #84]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 801187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801187c:	4a14      	ldr	r2, [pc, #80]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 801187e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011884:	e005      	b.n	8011892 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011886:	4b12      	ldr	r3, [pc, #72]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801188a:	4a11      	ldr	r2, [pc, #68]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 801188c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011892:	4b0f      	ldr	r3, [pc, #60]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	4a0e      	ldr	r2, [pc, #56]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 8011898:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801189c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801189e:	f7f4 fb83 	bl	8005fa8 <HAL_GetTick>
 80118a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80118a4:	e008      	b.n	80118b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80118a6:	f7f4 fb7f 	bl	8005fa8 <HAL_GetTick>
 80118aa:	4602      	mov	r2, r0
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	1ad3      	subs	r3, r2, r3
 80118b0:	2b02      	cmp	r3, #2
 80118b2:	d901      	bls.n	80118b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80118b4:	2303      	movs	r3, #3
 80118b6:	e006      	b.n	80118c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80118b8:	4b05      	ldr	r3, [pc, #20]	; (80118d0 <RCCEx_PLL2_Config+0x15c>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d0f0      	beq.n	80118a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80118c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3710      	adds	r7, #16
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	58024400 	.word	0x58024400
 80118d4:	ffff0007 	.word	0xffff0007

080118d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80118e2:	2300      	movs	r3, #0
 80118e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80118e6:	4b53      	ldr	r3, [pc, #332]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80118e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ea:	f003 0303 	and.w	r3, r3, #3
 80118ee:	2b03      	cmp	r3, #3
 80118f0:	d101      	bne.n	80118f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80118f2:	2301      	movs	r3, #1
 80118f4:	e099      	b.n	8011a2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80118f6:	4b4f      	ldr	r3, [pc, #316]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	4a4e      	ldr	r2, [pc, #312]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80118fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011902:	f7f4 fb51 	bl	8005fa8 <HAL_GetTick>
 8011906:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011908:	e008      	b.n	801191c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801190a:	f7f4 fb4d 	bl	8005fa8 <HAL_GetTick>
 801190e:	4602      	mov	r2, r0
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	1ad3      	subs	r3, r2, r3
 8011914:	2b02      	cmp	r3, #2
 8011916:	d901      	bls.n	801191c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011918:	2303      	movs	r3, #3
 801191a:	e086      	b.n	8011a2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801191c:	4b45      	ldr	r3, [pc, #276]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011924:	2b00      	cmp	r3, #0
 8011926:	d1f0      	bne.n	801190a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011928:	4b42      	ldr	r3, [pc, #264]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 801192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801192c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	051b      	lsls	r3, r3, #20
 8011936:	493f      	ldr	r1, [pc, #252]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 8011938:	4313      	orrs	r3, r2
 801193a:	628b      	str	r3, [r1, #40]	; 0x28
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	3b01      	subs	r3, #1
 8011942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	689b      	ldr	r3, [r3, #8]
 801194a:	3b01      	subs	r3, #1
 801194c:	025b      	lsls	r3, r3, #9
 801194e:	b29b      	uxth	r3, r3
 8011950:	431a      	orrs	r2, r3
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	68db      	ldr	r3, [r3, #12]
 8011956:	3b01      	subs	r3, #1
 8011958:	041b      	lsls	r3, r3, #16
 801195a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801195e:	431a      	orrs	r2, r3
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	691b      	ldr	r3, [r3, #16]
 8011964:	3b01      	subs	r3, #1
 8011966:	061b      	lsls	r3, r3, #24
 8011968:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801196c:	4931      	ldr	r1, [pc, #196]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 801196e:	4313      	orrs	r3, r2
 8011970:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011972:	4b30      	ldr	r3, [pc, #192]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 8011974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011976:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	695b      	ldr	r3, [r3, #20]
 801197e:	492d      	ldr	r1, [pc, #180]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 8011980:	4313      	orrs	r3, r2
 8011982:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011984:	4b2b      	ldr	r3, [pc, #172]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 8011986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011988:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	699b      	ldr	r3, [r3, #24]
 8011990:	4928      	ldr	r1, [pc, #160]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 8011992:	4313      	orrs	r3, r2
 8011994:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011996:	4b27      	ldr	r3, [pc, #156]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 8011998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801199a:	4a26      	ldr	r2, [pc, #152]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 801199c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80119a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80119a2:	4b24      	ldr	r3, [pc, #144]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119a6:	4b24      	ldr	r3, [pc, #144]	; (8011a38 <RCCEx_PLL3_Config+0x160>)
 80119a8:	4013      	ands	r3, r2
 80119aa:	687a      	ldr	r2, [r7, #4]
 80119ac:	69d2      	ldr	r2, [r2, #28]
 80119ae:	00d2      	lsls	r2, r2, #3
 80119b0:	4920      	ldr	r1, [pc, #128]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119b2:	4313      	orrs	r3, r2
 80119b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80119b6:	4b1f      	ldr	r3, [pc, #124]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ba:	4a1e      	ldr	r2, [pc, #120]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d106      	bne.n	80119d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80119c8:	4b1a      	ldr	r3, [pc, #104]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119cc:	4a19      	ldr	r2, [pc, #100]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80119d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80119d4:	e00f      	b.n	80119f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d106      	bne.n	80119ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80119dc:	4b15      	ldr	r3, [pc, #84]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e0:	4a14      	ldr	r2, [pc, #80]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80119e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80119e8:	e005      	b.n	80119f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80119ea:	4b12      	ldr	r3, [pc, #72]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ee:	4a11      	ldr	r2, [pc, #68]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80119f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80119f6:	4b0f      	ldr	r3, [pc, #60]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4a0e      	ldr	r2, [pc, #56]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 80119fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011a02:	f7f4 fad1 	bl	8005fa8 <HAL_GetTick>
 8011a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011a08:	e008      	b.n	8011a1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011a0a:	f7f4 facd 	bl	8005fa8 <HAL_GetTick>
 8011a0e:	4602      	mov	r2, r0
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	1ad3      	subs	r3, r2, r3
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	d901      	bls.n	8011a1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011a18:	2303      	movs	r3, #3
 8011a1a:	e006      	b.n	8011a2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011a1c:	4b05      	ldr	r3, [pc, #20]	; (8011a34 <RCCEx_PLL3_Config+0x15c>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d0f0      	beq.n	8011a0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3710      	adds	r7, #16
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	58024400 	.word	0x58024400
 8011a38:	ffff0007 	.word	0xffff0007

08011a3c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011a44:	2301      	movs	r3, #1
 8011a46:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d071      	beq.n	8011b32 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011a54:	b2db      	uxtb	r3, r3
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d106      	bne.n	8011a68 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f7f2 fa90 	bl	8003f88 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2202      	movs	r2, #2
 8011a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	f003 0310 	and.w	r3, r3, #16
 8011a7a:	2b10      	cmp	r3, #16
 8011a7c:	d050      	beq.n	8011b20 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	22ca      	movs	r2, #202	; 0xca
 8011a84:	625a      	str	r2, [r3, #36]	; 0x24
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2253      	movs	r2, #83	; 0x53
 8011a8c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f000 fa4a 	bl	8011f28 <RTC_EnterInitMode>
 8011a94:	4603      	mov	r3, r0
 8011a96:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011a98:	7bfb      	ldrb	r3, [r7, #15]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d124      	bne.n	8011ae8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	6899      	ldr	r1, [r3, #8]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	4b24      	ldr	r3, [pc, #144]	; (8011b3c <HAL_RTC_Init+0x100>)
 8011aaa:	400b      	ands	r3, r1
 8011aac:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	6899      	ldr	r1, [r3, #8]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	685a      	ldr	r2, [r3, #4]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	431a      	orrs	r2, r3
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	699b      	ldr	r3, [r3, #24]
 8011ac2:	431a      	orrs	r2, r3
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	430a      	orrs	r2, r1
 8011aca:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	689b      	ldr	r3, [r3, #8]
 8011ad0:	0419      	lsls	r1, r3, #16
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	68da      	ldr	r2, [r3, #12]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	430a      	orrs	r2, r1
 8011adc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f000 fa56 	bl	8011f90 <RTC_ExitInitMode>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011ae8:	7bfb      	ldrb	r3, [r7, #15]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d113      	bne.n	8011b16 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	f022 0203 	bic.w	r2, r2, #3
 8011afc:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	69da      	ldr	r2, [r3, #28]
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	695b      	ldr	r3, [r3, #20]
 8011b0c:	431a      	orrs	r2, r3
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	430a      	orrs	r2, r1
 8011b14:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	22ff      	movs	r2, #255	; 0xff
 8011b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8011b1e:	e001      	b.n	8011b24 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011b20:	2300      	movs	r3, #0
 8011b22:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011b24:	7bfb      	ldrb	r3, [r7, #15]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d103      	bne.n	8011b32 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2201      	movs	r2, #1
 8011b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8011b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3710      	adds	r7, #16
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	ff8fffbf 	.word	0xff8fffbf

08011b40 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011b40:	b590      	push	{r4, r7, lr}
 8011b42:	b087      	sub	sp, #28
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	60b9      	str	r1, [r7, #8]
 8011b4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d101      	bne.n	8011b5a <HAL_RTC_SetTime+0x1a>
 8011b56:	2302      	movs	r3, #2
 8011b58:	e089      	b.n	8011c6e <HAL_RTC_SetTime+0x12e>
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	2202      	movs	r2, #2
 8011b66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	22ca      	movs	r2, #202	; 0xca
 8011b70:	625a      	str	r2, [r3, #36]	; 0x24
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	2253      	movs	r2, #83	; 0x53
 8011b78:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f000 f9d4 	bl	8011f28 <RTC_EnterInitMode>
 8011b80:	4603      	mov	r3, r0
 8011b82:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011b84:	7cfb      	ldrb	r3, [r7, #19]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d161      	bne.n	8011c4e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d126      	bne.n	8011bde <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	689b      	ldr	r3, [r3, #8]
 8011b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d102      	bne.n	8011ba4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f000 fa2f 	bl	801200c <RTC_ByteToBcd2>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	785b      	ldrb	r3, [r3, #1]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f000 fa28 	bl	801200c <RTC_ByteToBcd2>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bc0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	789b      	ldrb	r3, [r3, #2]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f000 fa20 	bl	801200c <RTC_ByteToBcd2>
 8011bcc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bce:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	78db      	ldrb	r3, [r3, #3]
 8011bd6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bd8:	4313      	orrs	r3, r2
 8011bda:	617b      	str	r3, [r7, #20]
 8011bdc:	e018      	b.n	8011c10 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	689b      	ldr	r3, [r3, #8]
 8011be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d102      	bne.n	8011bf2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	785b      	ldrb	r3, [r3, #1]
 8011bfc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011bfe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011c00:	68ba      	ldr	r2, [r7, #8]
 8011c02:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011c04:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	78db      	ldrb	r3, [r3, #3]
 8011c0a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011c0c:	4313      	orrs	r3, r2
 8011c0e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	6979      	ldr	r1, [r7, #20]
 8011c16:	4b18      	ldr	r3, [pc, #96]	; (8011c78 <HAL_RTC_SetTime+0x138>)
 8011c18:	400b      	ands	r3, r1
 8011c1a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	689a      	ldr	r2, [r3, #8]
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011c2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	6899      	ldr	r1, [r3, #8]
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	68da      	ldr	r2, [r3, #12]
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	691b      	ldr	r3, [r3, #16]
 8011c3a:	431a      	orrs	r2, r3
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	430a      	orrs	r2, r1
 8011c42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f000 f9a3 	bl	8011f90 <RTC_ExitInitMode>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	22ff      	movs	r2, #255	; 0xff
 8011c54:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011c56:	7cfb      	ldrb	r3, [r7, #19]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d103      	bne.n	8011c64 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	2201      	movs	r2, #1
 8011c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2200      	movs	r2, #0
 8011c68:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011c6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	371c      	adds	r7, #28
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd90      	pop	{r4, r7, pc}
 8011c76:	bf00      	nop
 8011c78:	007f7f7f 	.word	0x007f7f7f

08011c7c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b086      	sub	sp, #24
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	691b      	ldr	r3, [r3, #16]
 8011c98:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	681a      	ldr	r2, [r3, #0]
 8011ca6:	4b22      	ldr	r3, [pc, #136]	; (8011d30 <HAL_RTC_GetTime+0xb4>)
 8011ca8:	4013      	ands	r3, r2
 8011caa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	0c1b      	lsrs	r3, r3, #16
 8011cb0:	b2db      	uxtb	r3, r3
 8011cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011cb6:	b2da      	uxtb	r2, r3
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	0a1b      	lsrs	r3, r3, #8
 8011cc0:	b2db      	uxtb	r3, r3
 8011cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cc6:	b2da      	uxtb	r2, r3
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cd4:	b2da      	uxtb	r2, r3
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	0d9b      	lsrs	r3, r3, #22
 8011cde:	b2db      	uxtb	r3, r3
 8011ce0:	f003 0301 	and.w	r3, r3, #1
 8011ce4:	b2da      	uxtb	r2, r3
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d11a      	bne.n	8011d26 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f000 f9a9 	bl	801204c <RTC_Bcd2ToByte>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	785b      	ldrb	r3, [r3, #1]
 8011d06:	4618      	mov	r0, r3
 8011d08:	f000 f9a0 	bl	801204c <RTC_Bcd2ToByte>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	461a      	mov	r2, r3
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	789b      	ldrb	r3, [r3, #2]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f000 f997 	bl	801204c <RTC_Bcd2ToByte>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	461a      	mov	r2, r3
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8011d26:	2300      	movs	r3, #0
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3718      	adds	r7, #24
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}
 8011d30:	007f7f7f 	.word	0x007f7f7f

08011d34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011d34:	b590      	push	{r4, r7, lr}
 8011d36:	b087      	sub	sp, #28
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	60f8      	str	r0, [r7, #12]
 8011d3c:	60b9      	str	r1, [r7, #8]
 8011d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011d46:	2b01      	cmp	r3, #1
 8011d48:	d101      	bne.n	8011d4e <HAL_RTC_SetDate+0x1a>
 8011d4a:	2302      	movs	r3, #2
 8011d4c:	e073      	b.n	8011e36 <HAL_RTC_SetDate+0x102>
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2201      	movs	r2, #1
 8011d52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2202      	movs	r2, #2
 8011d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10e      	bne.n	8011d82 <HAL_RTC_SetDate+0x4e>
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	785b      	ldrb	r3, [r3, #1]
 8011d68:	f003 0310 	and.w	r3, r3, #16
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d008      	beq.n	8011d82 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	785b      	ldrb	r3, [r3, #1]
 8011d74:	f023 0310 	bic.w	r3, r3, #16
 8011d78:	b2db      	uxtb	r3, r3
 8011d7a:	330a      	adds	r3, #10
 8011d7c:	b2da      	uxtb	r2, r3
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d11c      	bne.n	8011dc2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	78db      	ldrb	r3, [r3, #3]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f000 f93d 	bl	801200c <RTC_ByteToBcd2>
 8011d92:	4603      	mov	r3, r0
 8011d94:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	785b      	ldrb	r3, [r3, #1]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f000 f936 	bl	801200c <RTC_ByteToBcd2>
 8011da0:	4603      	mov	r3, r0
 8011da2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011da4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	789b      	ldrb	r3, [r3, #2]
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 f92e 	bl	801200c <RTC_ByteToBcd2>
 8011db0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8011db2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011dbc:	4313      	orrs	r3, r2
 8011dbe:	617b      	str	r3, [r7, #20]
 8011dc0:	e00e      	b.n	8011de0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	78db      	ldrb	r3, [r3, #3]
 8011dc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	785b      	ldrb	r3, [r3, #1]
 8011dcc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011dce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8011dd0:	68ba      	ldr	r2, [r7, #8]
 8011dd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011dd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011ddc:	4313      	orrs	r3, r2
 8011dde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	22ca      	movs	r2, #202	; 0xca
 8011de6:	625a      	str	r2, [r3, #36]	; 0x24
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2253      	movs	r2, #83	; 0x53
 8011dee:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011df0:	68f8      	ldr	r0, [r7, #12]
 8011df2:	f000 f899 	bl	8011f28 <RTC_EnterInitMode>
 8011df6:	4603      	mov	r3, r0
 8011df8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011dfa:	7cfb      	ldrb	r3, [r7, #19]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d10a      	bne.n	8011e16 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	681a      	ldr	r2, [r3, #0]
 8011e04:	6979      	ldr	r1, [r7, #20]
 8011e06:	4b0e      	ldr	r3, [pc, #56]	; (8011e40 <HAL_RTC_SetDate+0x10c>)
 8011e08:	400b      	ands	r3, r1
 8011e0a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011e0c:	68f8      	ldr	r0, [r7, #12]
 8011e0e:	f000 f8bf 	bl	8011f90 <RTC_ExitInitMode>
 8011e12:	4603      	mov	r3, r0
 8011e14:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	22ff      	movs	r2, #255	; 0xff
 8011e1c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011e1e:	7cfb      	ldrb	r3, [r7, #19]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d103      	bne.n	8011e2c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2201      	movs	r2, #1
 8011e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011e34:	7cfb      	ldrb	r3, [r7, #19]


}
 8011e36:	4618      	mov	r0, r3
 8011e38:	371c      	adds	r7, #28
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd90      	pop	{r4, r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	00ffff3f 	.word	0x00ffff3f

08011e44 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b086      	sub	sp, #24
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	60f8      	str	r0, [r7, #12]
 8011e4c:	60b9      	str	r1, [r7, #8]
 8011e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	685a      	ldr	r2, [r3, #4]
 8011e56:	4b21      	ldr	r3, [pc, #132]	; (8011edc <HAL_RTC_GetDate+0x98>)
 8011e58:	4013      	ands	r3, r2
 8011e5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	0c1b      	lsrs	r3, r3, #16
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	0a1b      	lsrs	r3, r3, #8
 8011e6a:	b2db      	uxtb	r3, r3
 8011e6c:	f003 031f 	and.w	r3, r3, #31
 8011e70:	b2da      	uxtb	r2, r3
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e7e:	b2da      	uxtb	r2, r3
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	0b5b      	lsrs	r3, r3, #13
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	f003 0307 	and.w	r3, r3, #7
 8011e8e:	b2da      	uxtb	r2, r3
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d11a      	bne.n	8011ed0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	78db      	ldrb	r3, [r3, #3]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f000 f8d4 	bl	801204c <RTC_Bcd2ToByte>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	785b      	ldrb	r3, [r3, #1]
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f000 f8cb 	bl	801204c <RTC_Bcd2ToByte>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	461a      	mov	r2, r3
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	789b      	ldrb	r3, [r3, #2]
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f000 f8c2 	bl	801204c <RTC_Bcd2ToByte>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	461a      	mov	r2, r3
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011ed0:	2300      	movs	r3, #0
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3718      	adds	r7, #24
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	00ffff3f 	.word	0x00ffff3f

08011ee0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b084      	sub	sp, #16
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	4a0d      	ldr	r2, [pc, #52]	; (8011f24 <HAL_RTC_WaitForSynchro+0x44>)
 8011eee:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8011ef0:	f7f4 f85a 	bl	8005fa8 <HAL_GetTick>
 8011ef4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011ef6:	e009      	b.n	8011f0c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011ef8:	f7f4 f856 	bl	8005fa8 <HAL_GetTick>
 8011efc:	4602      	mov	r2, r0
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	1ad3      	subs	r3, r2, r3
 8011f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f06:	d901      	bls.n	8011f0c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8011f08:	2303      	movs	r3, #3
 8011f0a:	e007      	b.n	8011f1c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	68db      	ldr	r3, [r3, #12]
 8011f12:	f003 0320 	and.w	r3, r3, #32
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d0ee      	beq.n	8011ef8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011f1a:	2300      	movs	r3, #0
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3710      	adds	r7, #16
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}
 8011f24:	0003ff5f 	.word	0x0003ff5f

08011f28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	68db      	ldr	r3, [r3, #12]
 8011f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d120      	bne.n	8011f84 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011f4c:	f7f4 f82c 	bl	8005fa8 <HAL_GetTick>
 8011f50:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f52:	e00d      	b.n	8011f70 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011f54:	f7f4 f828 	bl	8005fa8 <HAL_GetTick>
 8011f58:	4602      	mov	r2, r0
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f62:	d905      	bls.n	8011f70 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011f64:	2303      	movs	r3, #3
 8011f66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2203      	movs	r2, #3
 8011f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d102      	bne.n	8011f84 <RTC_EnterInitMode+0x5c>
 8011f7e:	7bfb      	ldrb	r3, [r7, #15]
 8011f80:	2b03      	cmp	r3, #3
 8011f82:	d1e7      	bne.n	8011f54 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
	...

08011f90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011f9c:	4b1a      	ldr	r3, [pc, #104]	; (8012008 <RTC_ExitInitMode+0x78>)
 8011f9e:	68db      	ldr	r3, [r3, #12]
 8011fa0:	4a19      	ldr	r2, [pc, #100]	; (8012008 <RTC_ExitInitMode+0x78>)
 8011fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011fa6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011fa8:	4b17      	ldr	r3, [pc, #92]	; (8012008 <RTC_ExitInitMode+0x78>)
 8011faa:	689b      	ldr	r3, [r3, #8]
 8011fac:	f003 0320 	and.w	r3, r3, #32
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d10c      	bne.n	8011fce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f7ff ff93 	bl	8011ee0 <HAL_RTC_WaitForSynchro>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d01e      	beq.n	8011ffe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2203      	movs	r2, #3
 8011fc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011fc8:	2303      	movs	r3, #3
 8011fca:	73fb      	strb	r3, [r7, #15]
 8011fcc:	e017      	b.n	8011ffe <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011fce:	4b0e      	ldr	r3, [pc, #56]	; (8012008 <RTC_ExitInitMode+0x78>)
 8011fd0:	689b      	ldr	r3, [r3, #8]
 8011fd2:	4a0d      	ldr	r2, [pc, #52]	; (8012008 <RTC_ExitInitMode+0x78>)
 8011fd4:	f023 0320 	bic.w	r3, r3, #32
 8011fd8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7ff ff80 	bl	8011ee0 <HAL_RTC_WaitForSynchro>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d005      	beq.n	8011ff2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2203      	movs	r2, #3
 8011fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011fee:	2303      	movs	r3, #3
 8011ff0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011ff2:	4b05      	ldr	r3, [pc, #20]	; (8012008 <RTC_ExitInitMode+0x78>)
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	4a04      	ldr	r2, [pc, #16]	; (8012008 <RTC_ExitInitMode+0x78>)
 8011ff8:	f043 0320 	orr.w	r3, r3, #32
 8011ffc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012000:	4618      	mov	r0, r3
 8012002:	3710      	adds	r7, #16
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}
 8012008:	58004000 	.word	0x58004000

0801200c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 801200c:	b480      	push	{r7}
 801200e:	b085      	sub	sp, #20
 8012010:	af00      	add	r7, sp, #0
 8012012:	4603      	mov	r3, r0
 8012014:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8012016:	2300      	movs	r3, #0
 8012018:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 801201a:	79fb      	ldrb	r3, [r7, #7]
 801201c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 801201e:	e005      	b.n	801202c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	3301      	adds	r3, #1
 8012024:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8012026:	7afb      	ldrb	r3, [r7, #11]
 8012028:	3b0a      	subs	r3, #10
 801202a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 801202c:	7afb      	ldrb	r3, [r7, #11]
 801202e:	2b09      	cmp	r3, #9
 8012030:	d8f6      	bhi.n	8012020 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	b2db      	uxtb	r3, r3
 8012036:	011b      	lsls	r3, r3, #4
 8012038:	b2da      	uxtb	r2, r3
 801203a:	7afb      	ldrb	r3, [r7, #11]
 801203c:	4313      	orrs	r3, r2
 801203e:	b2db      	uxtb	r3, r3
}
 8012040:	4618      	mov	r0, r3
 8012042:	3714      	adds	r7, #20
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr

0801204c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 801204c:	b480      	push	{r7}
 801204e:	b085      	sub	sp, #20
 8012050:	af00      	add	r7, sp, #0
 8012052:	4603      	mov	r3, r0
 8012054:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8012056:	79fb      	ldrb	r3, [r7, #7]
 8012058:	091b      	lsrs	r3, r3, #4
 801205a:	b2db      	uxtb	r3, r3
 801205c:	461a      	mov	r2, r3
 801205e:	0092      	lsls	r2, r2, #2
 8012060:	4413      	add	r3, r2
 8012062:	005b      	lsls	r3, r3, #1
 8012064:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8012066:	79fb      	ldrb	r3, [r7, #7]
 8012068:	f003 030f 	and.w	r3, r3, #15
 801206c:	b2da      	uxtb	r2, r3
 801206e:	7bfb      	ldrb	r3, [r7, #15]
 8012070:	4413      	add	r3, r2
 8012072:	b2db      	uxtb	r3, r3
}
 8012074:	4618      	mov	r0, r3
 8012076:	3714      	adds	r7, #20
 8012078:	46bd      	mov	sp, r7
 801207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207e:	4770      	bx	lr

08012080 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b084      	sub	sp, #16
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d101      	bne.n	8012092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801208e:	2301      	movs	r3, #1
 8012090:	e10f      	b.n	80122b2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2200      	movs	r2, #0
 8012096:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	4a87      	ldr	r2, [pc, #540]	; (80122bc <HAL_SPI_Init+0x23c>)
 801209e:	4293      	cmp	r3, r2
 80120a0:	d00f      	beq.n	80120c2 <HAL_SPI_Init+0x42>
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	4a86      	ldr	r2, [pc, #536]	; (80122c0 <HAL_SPI_Init+0x240>)
 80120a8:	4293      	cmp	r3, r2
 80120aa:	d00a      	beq.n	80120c2 <HAL_SPI_Init+0x42>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	4a84      	ldr	r2, [pc, #528]	; (80122c4 <HAL_SPI_Init+0x244>)
 80120b2:	4293      	cmp	r3, r2
 80120b4:	d005      	beq.n	80120c2 <HAL_SPI_Init+0x42>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	68db      	ldr	r3, [r3, #12]
 80120ba:	2b0f      	cmp	r3, #15
 80120bc:	d901      	bls.n	80120c2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80120be:	2301      	movs	r3, #1
 80120c0:	e0f7      	b.n	80122b2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 fd60 	bl	8012b88 <SPI_GetPacketSize>
 80120c8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	4a7b      	ldr	r2, [pc, #492]	; (80122bc <HAL_SPI_Init+0x23c>)
 80120d0:	4293      	cmp	r3, r2
 80120d2:	d00c      	beq.n	80120ee <HAL_SPI_Init+0x6e>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4a79      	ldr	r2, [pc, #484]	; (80122c0 <HAL_SPI_Init+0x240>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	d007      	beq.n	80120ee <HAL_SPI_Init+0x6e>
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	4a78      	ldr	r2, [pc, #480]	; (80122c4 <HAL_SPI_Init+0x244>)
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d002      	beq.n	80120ee <HAL_SPI_Init+0x6e>
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	2b08      	cmp	r3, #8
 80120ec:	d811      	bhi.n	8012112 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80120f2:	4a72      	ldr	r2, [pc, #456]	; (80122bc <HAL_SPI_Init+0x23c>)
 80120f4:	4293      	cmp	r3, r2
 80120f6:	d009      	beq.n	801210c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	4a70      	ldr	r2, [pc, #448]	; (80122c0 <HAL_SPI_Init+0x240>)
 80120fe:	4293      	cmp	r3, r2
 8012100:	d004      	beq.n	801210c <HAL_SPI_Init+0x8c>
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4a6f      	ldr	r2, [pc, #444]	; (80122c4 <HAL_SPI_Init+0x244>)
 8012108:	4293      	cmp	r3, r2
 801210a:	d104      	bne.n	8012116 <HAL_SPI_Init+0x96>
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	2b10      	cmp	r3, #16
 8012110:	d901      	bls.n	8012116 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8012112:	2301      	movs	r3, #1
 8012114:	e0cd      	b.n	80122b2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801211c:	b2db      	uxtb	r3, r3
 801211e:	2b00      	cmp	r3, #0
 8012120:	d106      	bne.n	8012130 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2200      	movs	r2, #0
 8012126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f7f2 f9b0 	bl	8004490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2202      	movs	r2, #2
 8012134:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	681a      	ldr	r2, [r3, #0]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	f022 0201 	bic.w	r2, r2, #1
 8012146:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	689b      	ldr	r3, [r3, #8]
 801214e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8012152:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	699b      	ldr	r3, [r3, #24]
 8012158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801215c:	d119      	bne.n	8012192 <HAL_SPI_Init+0x112>
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012166:	d103      	bne.n	8012170 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801216c:	2b00      	cmp	r3, #0
 801216e:	d008      	beq.n	8012182 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012174:	2b00      	cmp	r3, #0
 8012176:	d10c      	bne.n	8012192 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801217c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012180:	d107      	bne.n	8012192 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012190:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801219a:	2b00      	cmp	r3, #0
 801219c:	d00f      	beq.n	80121be <HAL_SPI_Init+0x13e>
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	68db      	ldr	r3, [r3, #12]
 80121a2:	2b06      	cmp	r3, #6
 80121a4:	d90b      	bls.n	80121be <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	430a      	orrs	r2, r1
 80121ba:	601a      	str	r2, [r3, #0]
 80121bc:	e007      	b.n	80121ce <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	681a      	ldr	r2, [r3, #0]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80121cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	69da      	ldr	r2, [r3, #28]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121d6:	431a      	orrs	r2, r3
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	431a      	orrs	r2, r3
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121e0:	ea42 0103 	orr.w	r1, r2, r3
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	68da      	ldr	r2, [r3, #12]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	430a      	orrs	r2, r1
 80121ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121f8:	431a      	orrs	r2, r3
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121fe:	431a      	orrs	r2, r3
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	699b      	ldr	r3, [r3, #24]
 8012204:	431a      	orrs	r2, r3
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	691b      	ldr	r3, [r3, #16]
 801220a:	431a      	orrs	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	695b      	ldr	r3, [r3, #20]
 8012210:	431a      	orrs	r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6a1b      	ldr	r3, [r3, #32]
 8012216:	431a      	orrs	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	431a      	orrs	r2, r3
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012222:	431a      	orrs	r2, r3
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	689b      	ldr	r3, [r3, #8]
 8012228:	431a      	orrs	r2, r3
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801222e:	ea42 0103 	orr.w	r1, r2, r3
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	430a      	orrs	r2, r1
 801223c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d113      	bne.n	801226e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	689b      	ldr	r3, [r3, #8]
 801224c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012258:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	689b      	ldr	r3, [r3, #8]
 8012260:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801226c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	f022 0201 	bic.w	r2, r2, #1
 801227c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012286:	2b00      	cmp	r3, #0
 8012288:	d00a      	beq.n	80122a0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	430a      	orrs	r2, r1
 801229e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2201      	movs	r2, #1
 80122ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80122b0:	2300      	movs	r3, #0
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3710      	adds	r7, #16
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	40013000 	.word	0x40013000
 80122c0:	40003800 	.word	0x40003800
 80122c4:	40003c00 	.word	0x40003c00

080122c8 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	60b9      	str	r1, [r7, #8]
 80122d2:	4613      	mov	r3, r2
 80122d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80122dc:	b2db      	uxtb	r3, r3
 80122de:	2b01      	cmp	r3, #1
 80122e0:	d005      	beq.n	80122ee <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2200      	movs	r2, #0
 80122e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 80122ea:	2302      	movs	r3, #2
 80122ec:	e127      	b.n	801253e <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d002      	beq.n	80122fa <HAL_SPI_Receive_DMA+0x32>
 80122f4:	88fb      	ldrh	r3, [r7, #6]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d105      	bne.n	8012306 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	2200      	movs	r2, #0
 80122fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8012302:	2301      	movs	r3, #1
 8012304:	e11b      	b.n	801253e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801230c:	2b01      	cmp	r3, #1
 801230e:	d101      	bne.n	8012314 <HAL_SPI_Receive_DMA+0x4c>
 8012310:	2302      	movs	r3, #2
 8012312:	e114      	b.n	801253e <HAL_SPI_Receive_DMA+0x276>
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2201      	movs	r2, #1
 8012318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2204      	movs	r2, #4
 8012320:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2200      	movs	r2, #0
 8012328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	68ba      	ldr	r2, [r7, #8]
 8012330:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	88fa      	ldrh	r2, [r7, #6]
 8012336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	88fa      	ldrh	r2, [r7, #6]
 801233e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	2200      	movs	r2, #0
 8012346:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	2200      	movs	r2, #0
 801234c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	2200      	movs	r2, #0
 8012352:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	2200      	movs	r2, #0
 801235a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	689b      	ldr	r3, [r3, #8]
 8012362:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8012366:	d108      	bne.n	801237a <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	681a      	ldr	r2, [r3, #0]
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012376:	601a      	str	r2, [r3, #0]
 8012378:	e009      	b.n	801238e <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 801238c:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	68db      	ldr	r3, [r3, #12]
 8012392:	2b0f      	cmp	r3, #15
 8012394:	d905      	bls.n	80123a2 <HAL_SPI_Receive_DMA+0xda>
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801239a:	699b      	ldr	r3, [r3, #24]
 801239c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80123a0:	d10f      	bne.n	80123c2 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80123a6:	2b07      	cmp	r3, #7
 80123a8:	d911      	bls.n	80123ce <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123ae:	699b      	ldr	r3, [r3, #24]
 80123b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123b4:	d00b      	beq.n	80123ce <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123ba:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80123bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80123c0:	d005      	beq.n	80123ce <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2200      	movs	r2, #0
 80123c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80123ca:	2301      	movs	r3, #1
 80123cc:	e0b7      	b.n	801253e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	689a      	ldr	r2, [r3, #8]
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80123dc:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	68db      	ldr	r3, [r3, #12]
 80123e2:	2b07      	cmp	r3, #7
 80123e4:	d820      	bhi.n	8012428 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123ea:	699b      	ldr	r3, [r3, #24]
 80123ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123f0:	d109      	bne.n	8012406 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80123f8:	b29b      	uxth	r3, r3
 80123fa:	3301      	adds	r3, #1
 80123fc:	105b      	asrs	r3, r3, #1
 80123fe:	b29a      	uxth	r2, r3
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801240a:	699b      	ldr	r3, [r3, #24]
 801240c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012410:	d11e      	bne.n	8012450 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012418:	b29b      	uxth	r3, r3
 801241a:	3303      	adds	r3, #3
 801241c:	109b      	asrs	r3, r3, #2
 801241e:	b29a      	uxth	r2, r3
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012426:	e013      	b.n	8012450 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	68db      	ldr	r3, [r3, #12]
 801242c:	2b0f      	cmp	r3, #15
 801242e:	d80f      	bhi.n	8012450 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012434:	699b      	ldr	r3, [r3, #24]
 8012436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801243a:	d109      	bne.n	8012450 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012442:	b29b      	uxth	r3, r3
 8012444:	3301      	adds	r3, #1
 8012446:	105b      	asrs	r3, r3, #1
 8012448:	b29a      	uxth	r2, r3
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012454:	4a3c      	ldr	r2, [pc, #240]	; (8012548 <HAL_SPI_Receive_DMA+0x280>)
 8012456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801245c:	4a3b      	ldr	r2, [pc, #236]	; (801254c <HAL_SPI_Receive_DMA+0x284>)
 801245e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012464:	4a3a      	ldr	r2, [pc, #232]	; (8012550 <HAL_SPI_Receive_DMA+0x288>)
 8012466:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801246c:	2200      	movs	r2, #0
 801246e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	3330      	adds	r3, #48	; 0x30
 801247a:	4619      	mov	r1, r3
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012480:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012488:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801248a:	f7f6 fa11 	bl	80088b0 <HAL_DMA_Start_IT>
 801248e:	4603      	mov	r3, r0
 8012490:	2b00      	cmp	r3, #0
 8012492:	d011      	beq.n	80124b8 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801249a:	f043 0210 	orr.w	r2, r3, #16
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2201      	movs	r2, #1
 80124a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2200      	movs	r2, #0
 80124b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 80124b4:	2301      	movs	r3, #1
 80124b6:	e042      	b.n	801253e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80124bc:	69db      	ldr	r3, [r3, #28]
 80124be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124c2:	d108      	bne.n	80124d6 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	6859      	ldr	r1, [r3, #4]
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	4b21      	ldr	r3, [pc, #132]	; (8012554 <HAL_SPI_Receive_DMA+0x28c>)
 80124d0:	400b      	ands	r3, r1
 80124d2:	6053      	str	r3, [r2, #4]
 80124d4:	e009      	b.n	80124ea <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	685a      	ldr	r2, [r3, #4]
 80124dc:	4b1d      	ldr	r3, [pc, #116]	; (8012554 <HAL_SPI_Receive_DMA+0x28c>)
 80124de:	4013      	ands	r3, r2
 80124e0:	88f9      	ldrh	r1, [r7, #6]
 80124e2:	68fa      	ldr	r2, [r7, #12]
 80124e4:	6812      	ldr	r2, [r2, #0]
 80124e6:	430b      	orrs	r3, r1
 80124e8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	689a      	ldr	r2, [r3, #8]
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80124f8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	691a      	ldr	r2, [r3, #16]
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8012508:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	681a      	ldr	r2, [r3, #0]
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	f042 0201 	orr.w	r2, r2, #1
 8012518:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012522:	d107      	bne.n	8012534 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	681a      	ldr	r2, [r3, #0]
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012532:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	2200      	movs	r2, #0
 8012538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801253c:	2300      	movs	r3, #0
}
 801253e:	4618      	mov	r0, r3
 8012540:	3710      	adds	r7, #16
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	080129b3 	.word	0x080129b3
 801254c:	0801296d 	.word	0x0801296d
 8012550:	080129cf 	.word	0x080129cf
 8012554:	ffff0000 	.word	0xffff0000

08012558 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b08a      	sub	sp, #40	; 0x28
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	691b      	ldr	r3, [r3, #16]
 8012566:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	695b      	ldr	r3, [r3, #20]
 801256e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8012570:	6a3a      	ldr	r2, [r7, #32]
 8012572:	69fb      	ldr	r3, [r7, #28]
 8012574:	4013      	ands	r3, r2
 8012576:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	689b      	ldr	r3, [r3, #8]
 801257e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8012580:	2300      	movs	r3, #0
 8012582:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801258a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	3330      	adds	r3, #48	; 0x30
 8012592:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8012594:	69fb      	ldr	r3, [r7, #28]
 8012596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801259a:	2b00      	cmp	r3, #0
 801259c:	d010      	beq.n	80125c0 <HAL_SPI_IRQHandler+0x68>
 801259e:	6a3b      	ldr	r3, [r7, #32]
 80125a0:	f003 0308 	and.w	r3, r3, #8
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00b      	beq.n	80125c0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	699a      	ldr	r2, [r3, #24]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80125b6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f000 f9cd 	bl	8012958 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80125be:	e192      	b.n	80128e6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d113      	bne.n	80125f2 <HAL_SPI_IRQHandler+0x9a>
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	f003 0320 	and.w	r3, r3, #32
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d10e      	bne.n	80125f2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d009      	beq.n	80125f2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	4798      	blx	r3
    handled = 1UL;
 80125ee:	2301      	movs	r3, #1
 80125f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d10f      	bne.n	801261c <HAL_SPI_IRQHandler+0xc4>
 80125fc:	69bb      	ldr	r3, [r7, #24]
 80125fe:	f003 0301 	and.w	r3, r3, #1
 8012602:	2b00      	cmp	r3, #0
 8012604:	d00a      	beq.n	801261c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801260c:	2b00      	cmp	r3, #0
 801260e:	d105      	bne.n	801261c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	4798      	blx	r3
    handled = 1UL;
 8012618:	2301      	movs	r3, #1
 801261a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	f003 0320 	and.w	r3, r3, #32
 8012622:	2b00      	cmp	r3, #0
 8012624:	d10f      	bne.n	8012646 <HAL_SPI_IRQHandler+0xee>
 8012626:	69bb      	ldr	r3, [r7, #24]
 8012628:	f003 0302 	and.w	r3, r3, #2
 801262c:	2b00      	cmp	r3, #0
 801262e:	d00a      	beq.n	8012646 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012630:	69bb      	ldr	r3, [r7, #24]
 8012632:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012636:	2b00      	cmp	r3, #0
 8012638:	d105      	bne.n	8012646 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	4798      	blx	r3
    handled = 1UL;
 8012642:	2301      	movs	r3, #1
 8012644:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8012646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012648:	2b00      	cmp	r3, #0
 801264a:	f040 8147 	bne.w	80128dc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	f003 0308 	and.w	r3, r3, #8
 8012654:	2b00      	cmp	r3, #0
 8012656:	f000 808b 	beq.w	8012770 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	699a      	ldr	r2, [r3, #24]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f042 0208 	orr.w	r2, r2, #8
 8012668:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	699a      	ldr	r2, [r3, #24]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	f042 0210 	orr.w	r2, r2, #16
 8012678:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	699a      	ldr	r2, [r3, #24]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012688:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	691a      	ldr	r2, [r3, #16]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f022 0208 	bic.w	r2, r2, #8
 8012698:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	689b      	ldr	r3, [r3, #8]
 80126a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d13d      	bne.n	8012724 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80126a8:	e036      	b.n	8012718 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	68db      	ldr	r3, [r3, #12]
 80126ae:	2b0f      	cmp	r3, #15
 80126b0:	d90b      	bls.n	80126ca <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80126bc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126c2:	1d1a      	adds	r2, r3, #4
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	665a      	str	r2, [r3, #100]	; 0x64
 80126c8:	e01d      	b.n	8012706 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	2b07      	cmp	r3, #7
 80126d0:	d90b      	bls.n	80126ea <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126d6:	68fa      	ldr	r2, [r7, #12]
 80126d8:	8812      	ldrh	r2, [r2, #0]
 80126da:	b292      	uxth	r2, r2
 80126dc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126e2:	1c9a      	adds	r2, r3, #2
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	665a      	str	r2, [r3, #100]	; 0x64
 80126e8:	e00d      	b.n	8012706 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126f6:	7812      	ldrb	r2, [r2, #0]
 80126f8:	b2d2      	uxtb	r2, r2
 80126fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012700:	1c5a      	adds	r2, r3, #1
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801270c:	b29b      	uxth	r3, r3
 801270e:	3b01      	subs	r3, #1
 8012710:	b29a      	uxth	r2, r3
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801271e:	b29b      	uxth	r3, r3
 8012720:	2b00      	cmp	r3, #0
 8012722:	d1c2      	bne.n	80126aa <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f000 f98f 	bl	8012a48 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2201      	movs	r2, #1
 801272e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012738:	2b00      	cmp	r3, #0
 801273a:	d003      	beq.n	8012744 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f000 f901 	bl	8012944 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012742:	e0d0      	b.n	80128e6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012744:	7cfb      	ldrb	r3, [r7, #19]
 8012746:	2b05      	cmp	r3, #5
 8012748:	d103      	bne.n	8012752 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 f8e6 	bl	801291c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012750:	e0c6      	b.n	80128e0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012752:	7cfb      	ldrb	r3, [r7, #19]
 8012754:	2b04      	cmp	r3, #4
 8012756:	d103      	bne.n	8012760 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f000 f8d5 	bl	8012908 <HAL_SPI_RxCpltCallback>
    return;
 801275e:	e0bf      	b.n	80128e0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012760:	7cfb      	ldrb	r3, [r7, #19]
 8012762:	2b03      	cmp	r3, #3
 8012764:	f040 80bc 	bne.w	80128e0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f000 f8c3 	bl	80128f4 <HAL_SPI_TxCpltCallback>
    return;
 801276e:	e0b7      	b.n	80128e0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012770:	69bb      	ldr	r3, [r7, #24]
 8012772:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8012776:	2b00      	cmp	r3, #0
 8012778:	f000 80b5 	beq.w	80128e6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801277c:	69bb      	ldr	r3, [r7, #24]
 801277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012782:	2b00      	cmp	r3, #0
 8012784:	d00f      	beq.n	80127a6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801278c:	f043 0204 	orr.w	r2, r3, #4
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	699a      	ldr	r2, [r3, #24]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80127a4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d00f      	beq.n	80127d0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127b6:	f043 0201 	orr.w	r2, r3, #1
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	699a      	ldr	r2, [r3, #24]
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80127ce:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80127d0:	69bb      	ldr	r3, [r7, #24]
 80127d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00f      	beq.n	80127fa <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127e0:	f043 0208 	orr.w	r2, r3, #8
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	699a      	ldr	r2, [r3, #24]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80127f8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80127fa:	69bb      	ldr	r3, [r7, #24]
 80127fc:	f003 0320 	and.w	r3, r3, #32
 8012800:	2b00      	cmp	r3, #0
 8012802:	d00f      	beq.n	8012824 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801280a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	699a      	ldr	r2, [r3, #24]
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	f042 0220 	orr.w	r2, r2, #32
 8012822:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801282a:	2b00      	cmp	r3, #0
 801282c:	d05a      	beq.n	80128e4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f022 0201 	bic.w	r2, r2, #1
 801283c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	6919      	ldr	r1, [r3, #16]
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	4b28      	ldr	r3, [pc, #160]	; (80128ec <HAL_SPI_IRQHandler+0x394>)
 801284a:	400b      	ands	r3, r1
 801284c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012854:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012858:	d138      	bne.n	80128cc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	689a      	ldr	r2, [r3, #8]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012868:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801286e:	2b00      	cmp	r3, #0
 8012870:	d013      	beq.n	801289a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012876:	4a1e      	ldr	r2, [pc, #120]	; (80128f0 <HAL_SPI_IRQHandler+0x398>)
 8012878:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801287e:	4618      	mov	r0, r3
 8012880:	f7f6 fd9e 	bl	80093c0 <HAL_DMA_Abort_IT>
 8012884:	4603      	mov	r3, r0
 8012886:	2b00      	cmp	r3, #0
 8012888:	d007      	beq.n	801289a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012890:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d020      	beq.n	80128e4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128a6:	4a12      	ldr	r2, [pc, #72]	; (80128f0 <HAL_SPI_IRQHandler+0x398>)
 80128a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7f6 fd86 	bl	80093c0 <HAL_DMA_Abort_IT>
 80128b4:	4603      	mov	r3, r0
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d014      	beq.n	80128e4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80128ca:	e00b      	b.n	80128e4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2201      	movs	r2, #1
 80128d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 f835 	bl	8012944 <HAL_SPI_ErrorCallback>
    return;
 80128da:	e003      	b.n	80128e4 <HAL_SPI_IRQHandler+0x38c>
    return;
 80128dc:	bf00      	nop
 80128de:	e002      	b.n	80128e6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80128e0:	bf00      	nop
 80128e2:	e000      	b.n	80128e6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80128e4:	bf00      	nop
  }
}
 80128e6:	3728      	adds	r7, #40	; 0x28
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	fffffc94 	.word	0xfffffc94
 80128f0:	08012a15 	.word	0x08012a15

080128f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80128fc:	bf00      	nop
 80128fe:	370c      	adds	r7, #12
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr

08012908 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012908:	b480      	push	{r7}
 801290a:	b083      	sub	sp, #12
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012910:	bf00      	nop
 8012912:	370c      	adds	r7, #12
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr

0801291c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012924:	bf00      	nop
 8012926:	370c      	adds	r7, #12
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012930:	b480      	push	{r7}
 8012932:	b083      	sub	sp, #12
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012938:	bf00      	nop
 801293a:	370c      	adds	r7, #12
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr

08012944 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012944:	b480      	push	{r7}
 8012946:	b083      	sub	sp, #12
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801294c:	bf00      	nop
 801294e:	370c      	adds	r7, #12
 8012950:	46bd      	mov	sp, r7
 8012952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012956:	4770      	bx	lr

08012958 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012958:	b480      	push	{r7}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012960:	bf00      	nop
 8012962:	370c      	adds	r7, #12
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr

0801296c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012978:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012980:	b2db      	uxtb	r3, r3
 8012982:	2b07      	cmp	r3, #7
 8012984:	d011      	beq.n	80129aa <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801298a:	69db      	ldr	r3, [r3, #28]
 801298c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012990:	d103      	bne.n	801299a <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8012992:	68f8      	ldr	r0, [r7, #12]
 8012994:	f7ff ffb8 	bl	8012908 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012998:	e007      	b.n	80129aa <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	691a      	ldr	r2, [r3, #16]
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	f042 0208 	orr.w	r2, r2, #8
 80129a8:	611a      	str	r2, [r3, #16]
}
 80129aa:	bf00      	nop
 80129ac:	3710      	adds	r7, #16
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}

080129b2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80129b2:	b580      	push	{r7, lr}
 80129b4:	b084      	sub	sp, #16
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129be:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80129c0:	68f8      	ldr	r0, [r7, #12]
 80129c2:	f7ff ffb5 	bl	8012930 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80129c6:	bf00      	nop
 80129c8:	3710      	adds	r7, #16
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}

080129ce <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b084      	sub	sp, #16
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129da:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f7f7 fe6d 	bl	800a6bc <HAL_DMA_GetError>
 80129e2:	4603      	mov	r3, r0
 80129e4:	2b02      	cmp	r3, #2
 80129e6:	d011      	beq.n	8012a0c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80129e8:	68f8      	ldr	r0, [r7, #12]
 80129ea:	f000 f82d 	bl	8012a48 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80129f4:	f043 0210 	orr.w	r2, r3, #16
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2201      	movs	r2, #1
 8012a02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8012a06:	68f8      	ldr	r0, [r7, #12]
 8012a08:	f7ff ff9c 	bl	8012944 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012a0c:	bf00      	nop
 8012a0e:	3710      	adds	r7, #16
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b084      	sub	sp, #16
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	2200      	movs	r2, #0
 8012a26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	2201      	movs	r2, #1
 8012a36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012a3a:	68f8      	ldr	r0, [r7, #12]
 8012a3c:	f7ff ff82 	bl	8012944 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012a40:	bf00      	nop
 8012a42:	3710      	adds	r7, #16
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b085      	sub	sp, #20
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	695b      	ldr	r3, [r3, #20]
 8012a56:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	699a      	ldr	r2, [r3, #24]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	f042 0208 	orr.w	r2, r2, #8
 8012a66:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	699a      	ldr	r2, [r3, #24]
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f042 0210 	orr.w	r2, r2, #16
 8012a76:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	681a      	ldr	r2, [r3, #0]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	f022 0201 	bic.w	r2, r2, #1
 8012a86:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	6919      	ldr	r1, [r3, #16]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681a      	ldr	r2, [r3, #0]
 8012a92:	4b3c      	ldr	r3, [pc, #240]	; (8012b84 <SPI_CloseTransfer+0x13c>)
 8012a94:	400b      	ands	r3, r1
 8012a96:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	689a      	ldr	r2, [r3, #8]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012aa6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012aae:	b2db      	uxtb	r3, r3
 8012ab0:	2b04      	cmp	r3, #4
 8012ab2:	d014      	beq.n	8012ade <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f003 0320 	and.w	r3, r3, #32
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d00f      	beq.n	8012ade <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ac4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	699a      	ldr	r2, [r3, #24]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f042 0220 	orr.w	r2, r2, #32
 8012adc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012ae4:	b2db      	uxtb	r3, r3
 8012ae6:	2b03      	cmp	r3, #3
 8012ae8:	d014      	beq.n	8012b14 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d00f      	beq.n	8012b14 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012afa:	f043 0204 	orr.w	r2, r3, #4
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	699a      	ldr	r2, [r3, #24]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012b12:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d00f      	beq.n	8012b3e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b24:	f043 0201 	orr.w	r2, r3, #1
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	699a      	ldr	r2, [r3, #24]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b3c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d00f      	beq.n	8012b68 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b4e:	f043 0208 	orr.w	r2, r3, #8
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	699a      	ldr	r2, [r3, #24]
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b66:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2200      	movs	r2, #0
 8012b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012b78:	bf00      	nop
 8012b7a:	3714      	adds	r7, #20
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr
 8012b84:	fffffc90 	.word	0xfffffc90

08012b88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b085      	sub	sp, #20
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b94:	095b      	lsrs	r3, r3, #5
 8012b96:	3301      	adds	r3, #1
 8012b98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	68db      	ldr	r3, [r3, #12]
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	3307      	adds	r3, #7
 8012ba6:	08db      	lsrs	r3, r3, #3
 8012ba8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	68fa      	ldr	r2, [r7, #12]
 8012bae:	fb02 f303 	mul.w	r3, r2, r3
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3714      	adds	r7, #20
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbc:	4770      	bx	lr

08012bbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012bbe:	b580      	push	{r7, lr}
 8012bc0:	b082      	sub	sp, #8
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d101      	bne.n	8012bd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e049      	b.n	8012c64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012bd6:	b2db      	uxtb	r3, r3
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d106      	bne.n	8012bea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2200      	movs	r2, #0
 8012be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f7f2 f95f 	bl	8004ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2202      	movs	r2, #2
 8012bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681a      	ldr	r2, [r3, #0]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	3304      	adds	r3, #4
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	4610      	mov	r0, r2
 8012bfe:	f000 fe7d 	bl	80138fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2201      	movs	r2, #1
 8012c06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2201      	movs	r2, #1
 8012c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2201      	movs	r2, #1
 8012c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2201      	movs	r2, #1
 8012c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2201      	movs	r2, #1
 8012c36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2201      	movs	r2, #1
 8012c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2201      	movs	r2, #1
 8012c4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2201      	movs	r2, #1
 8012c56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012c62:	2300      	movs	r3, #0
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3708      	adds	r7, #8
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}

08012c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b085      	sub	sp, #20
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d001      	beq.n	8012c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012c80:	2301      	movs	r3, #1
 8012c82:	e054      	b.n	8012d2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2202      	movs	r2, #2
 8012c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	68da      	ldr	r2, [r3, #12]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f042 0201 	orr.w	r2, r2, #1
 8012c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4a26      	ldr	r2, [pc, #152]	; (8012d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	d022      	beq.n	8012cec <HAL_TIM_Base_Start_IT+0x80>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012cae:	d01d      	beq.n	8012cec <HAL_TIM_Base_Start_IT+0x80>
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4a22      	ldr	r2, [pc, #136]	; (8012d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d018      	beq.n	8012cec <HAL_TIM_Base_Start_IT+0x80>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4a21      	ldr	r2, [pc, #132]	; (8012d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d013      	beq.n	8012cec <HAL_TIM_Base_Start_IT+0x80>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	4a1f      	ldr	r2, [pc, #124]	; (8012d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	d00e      	beq.n	8012cec <HAL_TIM_Base_Start_IT+0x80>
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	4a1e      	ldr	r2, [pc, #120]	; (8012d4c <HAL_TIM_Base_Start_IT+0xe0>)
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	d009      	beq.n	8012cec <HAL_TIM_Base_Start_IT+0x80>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	4a1c      	ldr	r2, [pc, #112]	; (8012d50 <HAL_TIM_Base_Start_IT+0xe4>)
 8012cde:	4293      	cmp	r3, r2
 8012ce0:	d004      	beq.n	8012cec <HAL_TIM_Base_Start_IT+0x80>
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	4a1b      	ldr	r2, [pc, #108]	; (8012d54 <HAL_TIM_Base_Start_IT+0xe8>)
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	d115      	bne.n	8012d18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	689a      	ldr	r2, [r3, #8]
 8012cf2:	4b19      	ldr	r3, [pc, #100]	; (8012d58 <HAL_TIM_Base_Start_IT+0xec>)
 8012cf4:	4013      	ands	r3, r2
 8012cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	2b06      	cmp	r3, #6
 8012cfc:	d015      	beq.n	8012d2a <HAL_TIM_Base_Start_IT+0xbe>
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d04:	d011      	beq.n	8012d2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	681a      	ldr	r2, [r3, #0]
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	f042 0201 	orr.w	r2, r2, #1
 8012d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d16:	e008      	b.n	8012d2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	681a      	ldr	r2, [r3, #0]
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	f042 0201 	orr.w	r2, r2, #1
 8012d26:	601a      	str	r2, [r3, #0]
 8012d28:	e000      	b.n	8012d2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012d2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012d2c:	2300      	movs	r3, #0
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3714      	adds	r7, #20
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop
 8012d3c:	40010000 	.word	0x40010000
 8012d40:	40000400 	.word	0x40000400
 8012d44:	40000800 	.word	0x40000800
 8012d48:	40000c00 	.word	0x40000c00
 8012d4c:	40010400 	.word	0x40010400
 8012d50:	40001800 	.word	0x40001800
 8012d54:	40014000 	.word	0x40014000
 8012d58:	00010007 	.word	0x00010007

08012d5c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b084      	sub	sp, #16
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012d66:	2300      	movs	r3, #0
 8012d68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d109      	bne.n	8012d84 <HAL_TIM_OC_Start_IT+0x28>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012d76:	b2db      	uxtb	r3, r3
 8012d78:	2b01      	cmp	r3, #1
 8012d7a:	bf14      	ite	ne
 8012d7c:	2301      	movne	r3, #1
 8012d7e:	2300      	moveq	r3, #0
 8012d80:	b2db      	uxtb	r3, r3
 8012d82:	e03c      	b.n	8012dfe <HAL_TIM_OC_Start_IT+0xa2>
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	2b04      	cmp	r3, #4
 8012d88:	d109      	bne.n	8012d9e <HAL_TIM_OC_Start_IT+0x42>
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	2b01      	cmp	r3, #1
 8012d94:	bf14      	ite	ne
 8012d96:	2301      	movne	r3, #1
 8012d98:	2300      	moveq	r3, #0
 8012d9a:	b2db      	uxtb	r3, r3
 8012d9c:	e02f      	b.n	8012dfe <HAL_TIM_OC_Start_IT+0xa2>
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	2b08      	cmp	r3, #8
 8012da2:	d109      	bne.n	8012db8 <HAL_TIM_OC_Start_IT+0x5c>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	bf14      	ite	ne
 8012db0:	2301      	movne	r3, #1
 8012db2:	2300      	moveq	r3, #0
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	e022      	b.n	8012dfe <HAL_TIM_OC_Start_IT+0xa2>
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	2b0c      	cmp	r3, #12
 8012dbc:	d109      	bne.n	8012dd2 <HAL_TIM_OC_Start_IT+0x76>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	bf14      	ite	ne
 8012dca:	2301      	movne	r3, #1
 8012dcc:	2300      	moveq	r3, #0
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	e015      	b.n	8012dfe <HAL_TIM_OC_Start_IT+0xa2>
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	2b10      	cmp	r3, #16
 8012dd6:	d109      	bne.n	8012dec <HAL_TIM_OC_Start_IT+0x90>
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	bf14      	ite	ne
 8012de4:	2301      	movne	r3, #1
 8012de6:	2300      	moveq	r3, #0
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	e008      	b.n	8012dfe <HAL_TIM_OC_Start_IT+0xa2>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	2b01      	cmp	r3, #1
 8012df6:	bf14      	ite	ne
 8012df8:	2301      	movne	r3, #1
 8012dfa:	2300      	moveq	r3, #0
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8012e02:	2301      	movs	r3, #1
 8012e04:	e0ec      	b.n	8012fe0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d104      	bne.n	8012e16 <HAL_TIM_OC_Start_IT+0xba>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2202      	movs	r2, #2
 8012e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012e14:	e023      	b.n	8012e5e <HAL_TIM_OC_Start_IT+0x102>
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	2b04      	cmp	r3, #4
 8012e1a:	d104      	bne.n	8012e26 <HAL_TIM_OC_Start_IT+0xca>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2202      	movs	r2, #2
 8012e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012e24:	e01b      	b.n	8012e5e <HAL_TIM_OC_Start_IT+0x102>
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	2b08      	cmp	r3, #8
 8012e2a:	d104      	bne.n	8012e36 <HAL_TIM_OC_Start_IT+0xda>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2202      	movs	r2, #2
 8012e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012e34:	e013      	b.n	8012e5e <HAL_TIM_OC_Start_IT+0x102>
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	2b0c      	cmp	r3, #12
 8012e3a:	d104      	bne.n	8012e46 <HAL_TIM_OC_Start_IT+0xea>
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2202      	movs	r2, #2
 8012e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012e44:	e00b      	b.n	8012e5e <HAL_TIM_OC_Start_IT+0x102>
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	2b10      	cmp	r3, #16
 8012e4a:	d104      	bne.n	8012e56 <HAL_TIM_OC_Start_IT+0xfa>
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2202      	movs	r2, #2
 8012e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012e54:	e003      	b.n	8012e5e <HAL_TIM_OC_Start_IT+0x102>
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2202      	movs	r2, #2
 8012e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	2b0c      	cmp	r3, #12
 8012e62:	d841      	bhi.n	8012ee8 <HAL_TIM_OC_Start_IT+0x18c>
 8012e64:	a201      	add	r2, pc, #4	; (adr r2, 8012e6c <HAL_TIM_OC_Start_IT+0x110>)
 8012e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e6a:	bf00      	nop
 8012e6c:	08012ea1 	.word	0x08012ea1
 8012e70:	08012ee9 	.word	0x08012ee9
 8012e74:	08012ee9 	.word	0x08012ee9
 8012e78:	08012ee9 	.word	0x08012ee9
 8012e7c:	08012eb3 	.word	0x08012eb3
 8012e80:	08012ee9 	.word	0x08012ee9
 8012e84:	08012ee9 	.word	0x08012ee9
 8012e88:	08012ee9 	.word	0x08012ee9
 8012e8c:	08012ec5 	.word	0x08012ec5
 8012e90:	08012ee9 	.word	0x08012ee9
 8012e94:	08012ee9 	.word	0x08012ee9
 8012e98:	08012ee9 	.word	0x08012ee9
 8012e9c:	08012ed7 	.word	0x08012ed7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	68da      	ldr	r2, [r3, #12]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	f042 0202 	orr.w	r2, r2, #2
 8012eae:	60da      	str	r2, [r3, #12]
      break;
 8012eb0:	e01d      	b.n	8012eee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	68da      	ldr	r2, [r3, #12]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	f042 0204 	orr.w	r2, r2, #4
 8012ec0:	60da      	str	r2, [r3, #12]
      break;
 8012ec2:	e014      	b.n	8012eee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	68da      	ldr	r2, [r3, #12]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	f042 0208 	orr.w	r2, r2, #8
 8012ed2:	60da      	str	r2, [r3, #12]
      break;
 8012ed4:	e00b      	b.n	8012eee <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	68da      	ldr	r2, [r3, #12]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	f042 0210 	orr.w	r2, r2, #16
 8012ee4:	60da      	str	r2, [r3, #12]
      break;
 8012ee6:	e002      	b.n	8012eee <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012ee8:	2301      	movs	r3, #1
 8012eea:	73fb      	strb	r3, [r7, #15]
      break;
 8012eec:	bf00      	nop
  }

  if (status == HAL_OK)
 8012eee:	7bfb      	ldrb	r3, [r7, #15]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d174      	bne.n	8012fde <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2201      	movs	r2, #1
 8012efa:	6839      	ldr	r1, [r7, #0]
 8012efc:	4618      	mov	r0, r3
 8012efe:	f001 f917 	bl	8014130 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	4a38      	ldr	r2, [pc, #224]	; (8012fe8 <HAL_TIM_OC_Start_IT+0x28c>)
 8012f08:	4293      	cmp	r3, r2
 8012f0a:	d013      	beq.n	8012f34 <HAL_TIM_OC_Start_IT+0x1d8>
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	4a36      	ldr	r2, [pc, #216]	; (8012fec <HAL_TIM_OC_Start_IT+0x290>)
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d00e      	beq.n	8012f34 <HAL_TIM_OC_Start_IT+0x1d8>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	4a35      	ldr	r2, [pc, #212]	; (8012ff0 <HAL_TIM_OC_Start_IT+0x294>)
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d009      	beq.n	8012f34 <HAL_TIM_OC_Start_IT+0x1d8>
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	4a33      	ldr	r2, [pc, #204]	; (8012ff4 <HAL_TIM_OC_Start_IT+0x298>)
 8012f26:	4293      	cmp	r3, r2
 8012f28:	d004      	beq.n	8012f34 <HAL_TIM_OC_Start_IT+0x1d8>
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	4a32      	ldr	r2, [pc, #200]	; (8012ff8 <HAL_TIM_OC_Start_IT+0x29c>)
 8012f30:	4293      	cmp	r3, r2
 8012f32:	d101      	bne.n	8012f38 <HAL_TIM_OC_Start_IT+0x1dc>
 8012f34:	2301      	movs	r3, #1
 8012f36:	e000      	b.n	8012f3a <HAL_TIM_OC_Start_IT+0x1de>
 8012f38:	2300      	movs	r3, #0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d007      	beq.n	8012f4e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012f4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	4a25      	ldr	r2, [pc, #148]	; (8012fe8 <HAL_TIM_OC_Start_IT+0x28c>)
 8012f54:	4293      	cmp	r3, r2
 8012f56:	d022      	beq.n	8012f9e <HAL_TIM_OC_Start_IT+0x242>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f60:	d01d      	beq.n	8012f9e <HAL_TIM_OC_Start_IT+0x242>
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	4a25      	ldr	r2, [pc, #148]	; (8012ffc <HAL_TIM_OC_Start_IT+0x2a0>)
 8012f68:	4293      	cmp	r3, r2
 8012f6a:	d018      	beq.n	8012f9e <HAL_TIM_OC_Start_IT+0x242>
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	4a23      	ldr	r2, [pc, #140]	; (8013000 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012f72:	4293      	cmp	r3, r2
 8012f74:	d013      	beq.n	8012f9e <HAL_TIM_OC_Start_IT+0x242>
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	4a22      	ldr	r2, [pc, #136]	; (8013004 <HAL_TIM_OC_Start_IT+0x2a8>)
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d00e      	beq.n	8012f9e <HAL_TIM_OC_Start_IT+0x242>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	4a19      	ldr	r2, [pc, #100]	; (8012fec <HAL_TIM_OC_Start_IT+0x290>)
 8012f86:	4293      	cmp	r3, r2
 8012f88:	d009      	beq.n	8012f9e <HAL_TIM_OC_Start_IT+0x242>
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4a1e      	ldr	r2, [pc, #120]	; (8013008 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d004      	beq.n	8012f9e <HAL_TIM_OC_Start_IT+0x242>
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	4a15      	ldr	r2, [pc, #84]	; (8012ff0 <HAL_TIM_OC_Start_IT+0x294>)
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d115      	bne.n	8012fca <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	689a      	ldr	r2, [r3, #8]
 8012fa4:	4b19      	ldr	r3, [pc, #100]	; (801300c <HAL_TIM_OC_Start_IT+0x2b0>)
 8012fa6:	4013      	ands	r3, r2
 8012fa8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	2b06      	cmp	r3, #6
 8012fae:	d015      	beq.n	8012fdc <HAL_TIM_OC_Start_IT+0x280>
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fb6:	d011      	beq.n	8012fdc <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	f042 0201 	orr.w	r2, r2, #1
 8012fc6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fc8:	e008      	b.n	8012fdc <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	681a      	ldr	r2, [r3, #0]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	f042 0201 	orr.w	r2, r2, #1
 8012fd8:	601a      	str	r2, [r3, #0]
 8012fda:	e000      	b.n	8012fde <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fdc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3710      	adds	r7, #16
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	40010000 	.word	0x40010000
 8012fec:	40010400 	.word	0x40010400
 8012ff0:	40014000 	.word	0x40014000
 8012ff4:	40014400 	.word	0x40014400
 8012ff8:	40014800 	.word	0x40014800
 8012ffc:	40000400 	.word	0x40000400
 8013000:	40000800 	.word	0x40000800
 8013004:	40000c00 	.word	0x40000c00
 8013008:	40001800 	.word	0x40001800
 801300c:	00010007 	.word	0x00010007

08013010 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801301a:	2300      	movs	r3, #0
 801301c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	2b0c      	cmp	r3, #12
 8013022:	d841      	bhi.n	80130a8 <HAL_TIM_OC_Stop_IT+0x98>
 8013024:	a201      	add	r2, pc, #4	; (adr r2, 801302c <HAL_TIM_OC_Stop_IT+0x1c>)
 8013026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801302a:	bf00      	nop
 801302c:	08013061 	.word	0x08013061
 8013030:	080130a9 	.word	0x080130a9
 8013034:	080130a9 	.word	0x080130a9
 8013038:	080130a9 	.word	0x080130a9
 801303c:	08013073 	.word	0x08013073
 8013040:	080130a9 	.word	0x080130a9
 8013044:	080130a9 	.word	0x080130a9
 8013048:	080130a9 	.word	0x080130a9
 801304c:	08013085 	.word	0x08013085
 8013050:	080130a9 	.word	0x080130a9
 8013054:	080130a9 	.word	0x080130a9
 8013058:	080130a9 	.word	0x080130a9
 801305c:	08013097 	.word	0x08013097
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	68da      	ldr	r2, [r3, #12]
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	f022 0202 	bic.w	r2, r2, #2
 801306e:	60da      	str	r2, [r3, #12]
      break;
 8013070:	e01d      	b.n	80130ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	68da      	ldr	r2, [r3, #12]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	f022 0204 	bic.w	r2, r2, #4
 8013080:	60da      	str	r2, [r3, #12]
      break;
 8013082:	e014      	b.n	80130ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	68da      	ldr	r2, [r3, #12]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	f022 0208 	bic.w	r2, r2, #8
 8013092:	60da      	str	r2, [r3, #12]
      break;
 8013094:	e00b      	b.n	80130ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	68da      	ldr	r2, [r3, #12]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	f022 0210 	bic.w	r2, r2, #16
 80130a4:	60da      	str	r2, [r3, #12]
      break;
 80130a6:	e002      	b.n	80130ae <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80130a8:	2301      	movs	r3, #1
 80130aa:	73fb      	strb	r3, [r7, #15]
      break;
 80130ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80130ae:	7bfb      	ldrb	r3, [r7, #15]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	f040 8081 	bne.w	80131b8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	2200      	movs	r2, #0
 80130bc:	6839      	ldr	r1, [r7, #0]
 80130be:	4618      	mov	r0, r3
 80130c0:	f001 f836 	bl	8014130 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	4a3e      	ldr	r2, [pc, #248]	; (80131c4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80130ca:	4293      	cmp	r3, r2
 80130cc:	d013      	beq.n	80130f6 <HAL_TIM_OC_Stop_IT+0xe6>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	4a3d      	ldr	r2, [pc, #244]	; (80131c8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 80130d4:	4293      	cmp	r3, r2
 80130d6:	d00e      	beq.n	80130f6 <HAL_TIM_OC_Stop_IT+0xe6>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	4a3b      	ldr	r2, [pc, #236]	; (80131cc <HAL_TIM_OC_Stop_IT+0x1bc>)
 80130de:	4293      	cmp	r3, r2
 80130e0:	d009      	beq.n	80130f6 <HAL_TIM_OC_Stop_IT+0xe6>
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	4a3a      	ldr	r2, [pc, #232]	; (80131d0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 80130e8:	4293      	cmp	r3, r2
 80130ea:	d004      	beq.n	80130f6 <HAL_TIM_OC_Stop_IT+0xe6>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	4a38      	ldr	r2, [pc, #224]	; (80131d4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80130f2:	4293      	cmp	r3, r2
 80130f4:	d101      	bne.n	80130fa <HAL_TIM_OC_Stop_IT+0xea>
 80130f6:	2301      	movs	r3, #1
 80130f8:	e000      	b.n	80130fc <HAL_TIM_OC_Stop_IT+0xec>
 80130fa:	2300      	movs	r3, #0
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d017      	beq.n	8013130 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	6a1a      	ldr	r2, [r3, #32]
 8013106:	f241 1311 	movw	r3, #4369	; 0x1111
 801310a:	4013      	ands	r3, r2
 801310c:	2b00      	cmp	r3, #0
 801310e:	d10f      	bne.n	8013130 <HAL_TIM_OC_Stop_IT+0x120>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	6a1a      	ldr	r2, [r3, #32]
 8013116:	f240 4344 	movw	r3, #1092	; 0x444
 801311a:	4013      	ands	r3, r2
 801311c:	2b00      	cmp	r3, #0
 801311e:	d107      	bne.n	8013130 <HAL_TIM_OC_Stop_IT+0x120>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801312e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	6a1a      	ldr	r2, [r3, #32]
 8013136:	f241 1311 	movw	r3, #4369	; 0x1111
 801313a:	4013      	ands	r3, r2
 801313c:	2b00      	cmp	r3, #0
 801313e:	d10f      	bne.n	8013160 <HAL_TIM_OC_Stop_IT+0x150>
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	6a1a      	ldr	r2, [r3, #32]
 8013146:	f240 4344 	movw	r3, #1092	; 0x444
 801314a:	4013      	ands	r3, r2
 801314c:	2b00      	cmp	r3, #0
 801314e:	d107      	bne.n	8013160 <HAL_TIM_OC_Stop_IT+0x150>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	f022 0201 	bic.w	r2, r2, #1
 801315e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d104      	bne.n	8013170 <HAL_TIM_OC_Stop_IT+0x160>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2201      	movs	r2, #1
 801316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801316e:	e023      	b.n	80131b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	2b04      	cmp	r3, #4
 8013174:	d104      	bne.n	8013180 <HAL_TIM_OC_Stop_IT+0x170>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2201      	movs	r2, #1
 801317a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801317e:	e01b      	b.n	80131b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	2b08      	cmp	r3, #8
 8013184:	d104      	bne.n	8013190 <HAL_TIM_OC_Stop_IT+0x180>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2201      	movs	r2, #1
 801318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801318e:	e013      	b.n	80131b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	2b0c      	cmp	r3, #12
 8013194:	d104      	bne.n	80131a0 <HAL_TIM_OC_Stop_IT+0x190>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2201      	movs	r2, #1
 801319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801319e:	e00b      	b.n	80131b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	2b10      	cmp	r3, #16
 80131a4:	d104      	bne.n	80131b0 <HAL_TIM_OC_Stop_IT+0x1a0>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	2201      	movs	r2, #1
 80131aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80131ae:	e003      	b.n	80131b8 <HAL_TIM_OC_Stop_IT+0x1a8>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2201      	movs	r2, #1
 80131b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80131b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ba:	4618      	mov	r0, r3
 80131bc:	3710      	adds	r7, #16
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	40010000 	.word	0x40010000
 80131c8:	40010400 	.word	0x40010400
 80131cc:	40014000 	.word	0x40014000
 80131d0:	40014400 	.word	0x40014400
 80131d4:	40014800 	.word	0x40014800

080131d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b082      	sub	sp, #8
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d101      	bne.n	80131ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80131e6:	2301      	movs	r3, #1
 80131e8:	e049      	b.n	801327e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80131f0:	b2db      	uxtb	r3, r3
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d106      	bne.n	8013204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2200      	movs	r2, #0
 80131fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f000 f841 	bl	8013286 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2202      	movs	r2, #2
 8013208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	3304      	adds	r3, #4
 8013214:	4619      	mov	r1, r3
 8013216:	4610      	mov	r0, r2
 8013218:	f000 fb70 	bl	80138fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2201      	movs	r2, #1
 8013220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2201      	movs	r2, #1
 8013228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2201      	movs	r2, #1
 8013230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2201      	movs	r2, #1
 8013238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2201      	movs	r2, #1
 8013240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2201      	movs	r2, #1
 8013248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2201      	movs	r2, #1
 8013250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2201      	movs	r2, #1
 8013258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2201      	movs	r2, #1
 8013260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2201      	movs	r2, #1
 8013268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2201      	movs	r2, #1
 8013270:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2201      	movs	r2, #1
 8013278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801327c:	2300      	movs	r3, #0
}
 801327e:	4618      	mov	r0, r3
 8013280:	3708      	adds	r7, #8
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}

08013286 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8013286:	b480      	push	{r7}
 8013288:	b083      	sub	sp, #12
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801328e:	bf00      	nop
 8013290:	370c      	adds	r7, #12
 8013292:	46bd      	mov	sp, r7
 8013294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013298:	4770      	bx	lr

0801329a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801329a:	b580      	push	{r7, lr}
 801329c:	b084      	sub	sp, #16
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	68db      	ldr	r3, [r3, #12]
 80132a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	691b      	ldr	r3, [r3, #16]
 80132b0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	f003 0302 	and.w	r3, r3, #2
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d020      	beq.n	80132fe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f003 0302 	and.w	r3, r3, #2
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d01b      	beq.n	80132fe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f06f 0202 	mvn.w	r2, #2
 80132ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2201      	movs	r2, #1
 80132d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	699b      	ldr	r3, [r3, #24]
 80132dc:	f003 0303 	and.w	r3, r3, #3
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d003      	beq.n	80132ec <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f000 faeb 	bl	80138c0 <HAL_TIM_IC_CaptureCallback>
 80132ea:	e005      	b.n	80132f8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7ef fd07 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	f000 faee 	bl	80138d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2200      	movs	r2, #0
 80132fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	f003 0304 	and.w	r3, r3, #4
 8013304:	2b00      	cmp	r3, #0
 8013306:	d020      	beq.n	801334a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	f003 0304 	and.w	r3, r3, #4
 801330e:	2b00      	cmp	r3, #0
 8013310:	d01b      	beq.n	801334a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f06f 0204 	mvn.w	r2, #4
 801331a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2202      	movs	r2, #2
 8013320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	699b      	ldr	r3, [r3, #24]
 8013328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801332c:	2b00      	cmp	r3, #0
 801332e:	d003      	beq.n	8013338 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f000 fac5 	bl	80138c0 <HAL_TIM_IC_CaptureCallback>
 8013336:	e005      	b.n	8013344 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f7ef fce1 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f000 fac8 	bl	80138d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2200      	movs	r2, #0
 8013348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	f003 0308 	and.w	r3, r3, #8
 8013350:	2b00      	cmp	r3, #0
 8013352:	d020      	beq.n	8013396 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	f003 0308 	and.w	r3, r3, #8
 801335a:	2b00      	cmp	r3, #0
 801335c:	d01b      	beq.n	8013396 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	f06f 0208 	mvn.w	r2, #8
 8013366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2204      	movs	r2, #4
 801336c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	69db      	ldr	r3, [r3, #28]
 8013374:	f003 0303 	and.w	r3, r3, #3
 8013378:	2b00      	cmp	r3, #0
 801337a:	d003      	beq.n	8013384 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f000 fa9f 	bl	80138c0 <HAL_TIM_IC_CaptureCallback>
 8013382:	e005      	b.n	8013390 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7ef fcbb 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f000 faa2 	bl	80138d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2200      	movs	r2, #0
 8013394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	f003 0310 	and.w	r3, r3, #16
 801339c:	2b00      	cmp	r3, #0
 801339e:	d020      	beq.n	80133e2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	f003 0310 	and.w	r3, r3, #16
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d01b      	beq.n	80133e2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	f06f 0210 	mvn.w	r2, #16
 80133b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2208      	movs	r2, #8
 80133b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	69db      	ldr	r3, [r3, #28]
 80133c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d003      	beq.n	80133d0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f000 fa79 	bl	80138c0 <HAL_TIM_IC_CaptureCallback>
 80133ce:	e005      	b.n	80133dc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	f7ef fc95 	bl	8002d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80133d6:	6878      	ldr	r0, [r7, #4]
 80133d8:	f000 fa7c 	bl	80138d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2200      	movs	r2, #0
 80133e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	f003 0301 	and.w	r3, r3, #1
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d00c      	beq.n	8013406 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	f003 0301 	and.w	r3, r3, #1
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d007      	beq.n	8013406 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f06f 0201 	mvn.w	r2, #1
 80133fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7f0 fb4b 	bl	8003a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801340c:	2b00      	cmp	r3, #0
 801340e:	d104      	bne.n	801341a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013416:	2b00      	cmp	r3, #0
 8013418:	d00c      	beq.n	8013434 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013420:	2b00      	cmp	r3, #0
 8013422:	d007      	beq.n	8013434 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 801342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f000 ffba 	bl	80143a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801343a:	2b00      	cmp	r3, #0
 801343c:	d00c      	beq.n	8013458 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013444:	2b00      	cmp	r3, #0
 8013446:	d007      	beq.n	8013458 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8013450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	f000 ffb2 	bl	80143bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801345e:	2b00      	cmp	r3, #0
 8013460:	d00c      	beq.n	801347c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013468:	2b00      	cmp	r3, #0
 801346a:	d007      	beq.n	801347c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f000 fa36 	bl	80138e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	f003 0320 	and.w	r3, r3, #32
 8013482:	2b00      	cmp	r3, #0
 8013484:	d00c      	beq.n	80134a0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	f003 0320 	and.w	r3, r3, #32
 801348c:	2b00      	cmp	r3, #0
 801348e:	d007      	beq.n	80134a0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f06f 0220 	mvn.w	r2, #32
 8013498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f000 ff7a 	bl	8014394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80134a0:	bf00      	nop
 80134a2:	3710      	adds	r7, #16
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}

080134a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b086      	sub	sp, #24
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80134b4:	2300      	movs	r3, #0
 80134b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d101      	bne.n	80134c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80134c2:	2302      	movs	r3, #2
 80134c4:	e0ff      	b.n	80136c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2201      	movs	r2, #1
 80134ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2b14      	cmp	r3, #20
 80134d2:	f200 80f0 	bhi.w	80136b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80134d6:	a201      	add	r2, pc, #4	; (adr r2, 80134dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80134d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134dc:	08013531 	.word	0x08013531
 80134e0:	080136b7 	.word	0x080136b7
 80134e4:	080136b7 	.word	0x080136b7
 80134e8:	080136b7 	.word	0x080136b7
 80134ec:	08013571 	.word	0x08013571
 80134f0:	080136b7 	.word	0x080136b7
 80134f4:	080136b7 	.word	0x080136b7
 80134f8:	080136b7 	.word	0x080136b7
 80134fc:	080135b3 	.word	0x080135b3
 8013500:	080136b7 	.word	0x080136b7
 8013504:	080136b7 	.word	0x080136b7
 8013508:	080136b7 	.word	0x080136b7
 801350c:	080135f3 	.word	0x080135f3
 8013510:	080136b7 	.word	0x080136b7
 8013514:	080136b7 	.word	0x080136b7
 8013518:	080136b7 	.word	0x080136b7
 801351c:	08013635 	.word	0x08013635
 8013520:	080136b7 	.word	0x080136b7
 8013524:	080136b7 	.word	0x080136b7
 8013528:	080136b7 	.word	0x080136b7
 801352c:	08013675 	.word	0x08013675
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	68b9      	ldr	r1, [r7, #8]
 8013536:	4618      	mov	r0, r3
 8013538:	f000 fa86 	bl	8013a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	699a      	ldr	r2, [r3, #24]
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	f042 0208 	orr.w	r2, r2, #8
 801354a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	699a      	ldr	r2, [r3, #24]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f022 0204 	bic.w	r2, r2, #4
 801355a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	6999      	ldr	r1, [r3, #24]
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	691a      	ldr	r2, [r3, #16]
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	430a      	orrs	r2, r1
 801356c:	619a      	str	r2, [r3, #24]
      break;
 801356e:	e0a5      	b.n	80136bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	68b9      	ldr	r1, [r7, #8]
 8013576:	4618      	mov	r0, r3
 8013578:	f000 faf6 	bl	8013b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	699a      	ldr	r2, [r3, #24]
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801358a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	699a      	ldr	r2, [r3, #24]
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801359a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	6999      	ldr	r1, [r3, #24]
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	691b      	ldr	r3, [r3, #16]
 80135a6:	021a      	lsls	r2, r3, #8
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	430a      	orrs	r2, r1
 80135ae:	619a      	str	r2, [r3, #24]
      break;
 80135b0:	e084      	b.n	80136bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	68b9      	ldr	r1, [r7, #8]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f000 fb5f 	bl	8013c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	69da      	ldr	r2, [r3, #28]
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	f042 0208 	orr.w	r2, r2, #8
 80135cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	69da      	ldr	r2, [r3, #28]
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f022 0204 	bic.w	r2, r2, #4
 80135dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	69d9      	ldr	r1, [r3, #28]
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	691a      	ldr	r2, [r3, #16]
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	430a      	orrs	r2, r1
 80135ee:	61da      	str	r2, [r3, #28]
      break;
 80135f0:	e064      	b.n	80136bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	68b9      	ldr	r1, [r7, #8]
 80135f8:	4618      	mov	r0, r3
 80135fa:	f000 fbc7 	bl	8013d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	69da      	ldr	r2, [r3, #28]
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801360c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	69da      	ldr	r2, [r3, #28]
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801361c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	69d9      	ldr	r1, [r3, #28]
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	691b      	ldr	r3, [r3, #16]
 8013628:	021a      	lsls	r2, r3, #8
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	430a      	orrs	r2, r1
 8013630:	61da      	str	r2, [r3, #28]
      break;
 8013632:	e043      	b.n	80136bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	68b9      	ldr	r1, [r7, #8]
 801363a:	4618      	mov	r0, r3
 801363c:	f000 fc10 	bl	8013e60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	f042 0208 	orr.w	r2, r2, #8
 801364e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	f022 0204 	bic.w	r2, r2, #4
 801365e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	691a      	ldr	r2, [r3, #16]
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	430a      	orrs	r2, r1
 8013670:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013672:	e023      	b.n	80136bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	68b9      	ldr	r1, [r7, #8]
 801367a:	4618      	mov	r0, r3
 801367c:	f000 fc54 	bl	8013f28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801368e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801369e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	691b      	ldr	r3, [r3, #16]
 80136aa:	021a      	lsls	r2, r3, #8
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	430a      	orrs	r2, r1
 80136b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80136b4:	e002      	b.n	80136bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80136b6:	2301      	movs	r3, #1
 80136b8:	75fb      	strb	r3, [r7, #23]
      break;
 80136ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	2200      	movs	r2, #0
 80136c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80136c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3718      	adds	r7, #24
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop

080136d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b084      	sub	sp, #16
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80136da:	2300      	movs	r3, #0
 80136dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	d101      	bne.n	80136ec <HAL_TIM_ConfigClockSource+0x1c>
 80136e8:	2302      	movs	r3, #2
 80136ea:	e0dc      	b.n	80138a6 <HAL_TIM_ConfigClockSource+0x1d6>
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2201      	movs	r2, #1
 80136f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2202      	movs	r2, #2
 80136f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	689b      	ldr	r3, [r3, #8]
 8013702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013704:	68ba      	ldr	r2, [r7, #8]
 8013706:	4b6a      	ldr	r3, [pc, #424]	; (80138b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013708:	4013      	ands	r3, r2
 801370a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	68ba      	ldr	r2, [r7, #8]
 801371a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	4a64      	ldr	r2, [pc, #400]	; (80138b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013722:	4293      	cmp	r3, r2
 8013724:	f000 80a9 	beq.w	801387a <HAL_TIM_ConfigClockSource+0x1aa>
 8013728:	4a62      	ldr	r2, [pc, #392]	; (80138b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801372a:	4293      	cmp	r3, r2
 801372c:	f200 80ae 	bhi.w	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 8013730:	4a61      	ldr	r2, [pc, #388]	; (80138b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013732:	4293      	cmp	r3, r2
 8013734:	f000 80a1 	beq.w	801387a <HAL_TIM_ConfigClockSource+0x1aa>
 8013738:	4a5f      	ldr	r2, [pc, #380]	; (80138b8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801373a:	4293      	cmp	r3, r2
 801373c:	f200 80a6 	bhi.w	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 8013740:	4a5e      	ldr	r2, [pc, #376]	; (80138bc <HAL_TIM_ConfigClockSource+0x1ec>)
 8013742:	4293      	cmp	r3, r2
 8013744:	f000 8099 	beq.w	801387a <HAL_TIM_ConfigClockSource+0x1aa>
 8013748:	4a5c      	ldr	r2, [pc, #368]	; (80138bc <HAL_TIM_ConfigClockSource+0x1ec>)
 801374a:	4293      	cmp	r3, r2
 801374c:	f200 809e 	bhi.w	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 8013750:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013754:	f000 8091 	beq.w	801387a <HAL_TIM_ConfigClockSource+0x1aa>
 8013758:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801375c:	f200 8096 	bhi.w	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 8013760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013764:	f000 8089 	beq.w	801387a <HAL_TIM_ConfigClockSource+0x1aa>
 8013768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801376c:	f200 808e 	bhi.w	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 8013770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013774:	d03e      	beq.n	80137f4 <HAL_TIM_ConfigClockSource+0x124>
 8013776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801377a:	f200 8087 	bhi.w	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 801377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013782:	f000 8086 	beq.w	8013892 <HAL_TIM_ConfigClockSource+0x1c2>
 8013786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801378a:	d87f      	bhi.n	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 801378c:	2b70      	cmp	r3, #112	; 0x70
 801378e:	d01a      	beq.n	80137c6 <HAL_TIM_ConfigClockSource+0xf6>
 8013790:	2b70      	cmp	r3, #112	; 0x70
 8013792:	d87b      	bhi.n	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 8013794:	2b60      	cmp	r3, #96	; 0x60
 8013796:	d050      	beq.n	801383a <HAL_TIM_ConfigClockSource+0x16a>
 8013798:	2b60      	cmp	r3, #96	; 0x60
 801379a:	d877      	bhi.n	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 801379c:	2b50      	cmp	r3, #80	; 0x50
 801379e:	d03c      	beq.n	801381a <HAL_TIM_ConfigClockSource+0x14a>
 80137a0:	2b50      	cmp	r3, #80	; 0x50
 80137a2:	d873      	bhi.n	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 80137a4:	2b40      	cmp	r3, #64	; 0x40
 80137a6:	d058      	beq.n	801385a <HAL_TIM_ConfigClockSource+0x18a>
 80137a8:	2b40      	cmp	r3, #64	; 0x40
 80137aa:	d86f      	bhi.n	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 80137ac:	2b30      	cmp	r3, #48	; 0x30
 80137ae:	d064      	beq.n	801387a <HAL_TIM_ConfigClockSource+0x1aa>
 80137b0:	2b30      	cmp	r3, #48	; 0x30
 80137b2:	d86b      	bhi.n	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 80137b4:	2b20      	cmp	r3, #32
 80137b6:	d060      	beq.n	801387a <HAL_TIM_ConfigClockSource+0x1aa>
 80137b8:	2b20      	cmp	r3, #32
 80137ba:	d867      	bhi.n	801388c <HAL_TIM_ConfigClockSource+0x1bc>
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d05c      	beq.n	801387a <HAL_TIM_ConfigClockSource+0x1aa>
 80137c0:	2b10      	cmp	r3, #16
 80137c2:	d05a      	beq.n	801387a <HAL_TIM_ConfigClockSource+0x1aa>
 80137c4:	e062      	b.n	801388c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	6818      	ldr	r0, [r3, #0]
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	6899      	ldr	r1, [r3, #8]
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	685a      	ldr	r2, [r3, #4]
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	f000 fc8b 	bl	80140f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	689b      	ldr	r3, [r3, #8]
 80137e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80137e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	68ba      	ldr	r2, [r7, #8]
 80137f0:	609a      	str	r2, [r3, #8]
      break;
 80137f2:	e04f      	b.n	8013894 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6818      	ldr	r0, [r3, #0]
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	6899      	ldr	r1, [r3, #8]
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	685a      	ldr	r2, [r3, #4]
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	68db      	ldr	r3, [r3, #12]
 8013804:	f000 fc74 	bl	80140f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	689a      	ldr	r2, [r3, #8]
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013816:	609a      	str	r2, [r3, #8]
      break;
 8013818:	e03c      	b.n	8013894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6818      	ldr	r0, [r3, #0]
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	6859      	ldr	r1, [r3, #4]
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	68db      	ldr	r3, [r3, #12]
 8013826:	461a      	mov	r2, r3
 8013828:	f000 fbe4 	bl	8013ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	2150      	movs	r1, #80	; 0x50
 8013832:	4618      	mov	r0, r3
 8013834:	f000 fc3e 	bl	80140b4 <TIM_ITRx_SetConfig>
      break;
 8013838:	e02c      	b.n	8013894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6818      	ldr	r0, [r3, #0]
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	6859      	ldr	r1, [r3, #4]
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	461a      	mov	r2, r3
 8013848:	f000 fc03 	bl	8014052 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	2160      	movs	r1, #96	; 0x60
 8013852:	4618      	mov	r0, r3
 8013854:	f000 fc2e 	bl	80140b4 <TIM_ITRx_SetConfig>
      break;
 8013858:	e01c      	b.n	8013894 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6818      	ldr	r0, [r3, #0]
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	6859      	ldr	r1, [r3, #4]
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	68db      	ldr	r3, [r3, #12]
 8013866:	461a      	mov	r2, r3
 8013868:	f000 fbc4 	bl	8013ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	2140      	movs	r1, #64	; 0x40
 8013872:	4618      	mov	r0, r3
 8013874:	f000 fc1e 	bl	80140b4 <TIM_ITRx_SetConfig>
      break;
 8013878:	e00c      	b.n	8013894 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681a      	ldr	r2, [r3, #0]
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	4619      	mov	r1, r3
 8013884:	4610      	mov	r0, r2
 8013886:	f000 fc15 	bl	80140b4 <TIM_ITRx_SetConfig>
      break;
 801388a:	e003      	b.n	8013894 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801388c:	2301      	movs	r3, #1
 801388e:	73fb      	strb	r3, [r7, #15]
      break;
 8013890:	e000      	b.n	8013894 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2201      	movs	r2, #1
 8013898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2200      	movs	r2, #0
 80138a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80138a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3710      	adds	r7, #16
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}
 80138ae:	bf00      	nop
 80138b0:	ffceff88 	.word	0xffceff88
 80138b4:	00100040 	.word	0x00100040
 80138b8:	00100030 	.word	0x00100030
 80138bc:	00100020 	.word	0x00100020

080138c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80138c0:	b480      	push	{r7}
 80138c2:	b083      	sub	sp, #12
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80138c8:	bf00      	nop
 80138ca:	370c      	adds	r7, #12
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr

080138d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80138d4:	b480      	push	{r7}
 80138d6:	b083      	sub	sp, #12
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80138dc:	bf00      	nop
 80138de:	370c      	adds	r7, #12
 80138e0:	46bd      	mov	sp, r7
 80138e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e6:	4770      	bx	lr

080138e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80138e8:	b480      	push	{r7}
 80138ea:	b083      	sub	sp, #12
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80138f0:	bf00      	nop
 80138f2:	370c      	adds	r7, #12
 80138f4:	46bd      	mov	sp, r7
 80138f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fa:	4770      	bx	lr

080138fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80138fc:	b480      	push	{r7}
 80138fe:	b085      	sub	sp, #20
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	4a46      	ldr	r2, [pc, #280]	; (8013a28 <TIM_Base_SetConfig+0x12c>)
 8013910:	4293      	cmp	r3, r2
 8013912:	d013      	beq.n	801393c <TIM_Base_SetConfig+0x40>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801391a:	d00f      	beq.n	801393c <TIM_Base_SetConfig+0x40>
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	4a43      	ldr	r2, [pc, #268]	; (8013a2c <TIM_Base_SetConfig+0x130>)
 8013920:	4293      	cmp	r3, r2
 8013922:	d00b      	beq.n	801393c <TIM_Base_SetConfig+0x40>
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	4a42      	ldr	r2, [pc, #264]	; (8013a30 <TIM_Base_SetConfig+0x134>)
 8013928:	4293      	cmp	r3, r2
 801392a:	d007      	beq.n	801393c <TIM_Base_SetConfig+0x40>
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	4a41      	ldr	r2, [pc, #260]	; (8013a34 <TIM_Base_SetConfig+0x138>)
 8013930:	4293      	cmp	r3, r2
 8013932:	d003      	beq.n	801393c <TIM_Base_SetConfig+0x40>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	4a40      	ldr	r2, [pc, #256]	; (8013a38 <TIM_Base_SetConfig+0x13c>)
 8013938:	4293      	cmp	r3, r2
 801393a:	d108      	bne.n	801394e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	68fa      	ldr	r2, [r7, #12]
 801394a:	4313      	orrs	r3, r2
 801394c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	4a35      	ldr	r2, [pc, #212]	; (8013a28 <TIM_Base_SetConfig+0x12c>)
 8013952:	4293      	cmp	r3, r2
 8013954:	d01f      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801395c:	d01b      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	4a32      	ldr	r2, [pc, #200]	; (8013a2c <TIM_Base_SetConfig+0x130>)
 8013962:	4293      	cmp	r3, r2
 8013964:	d017      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	4a31      	ldr	r2, [pc, #196]	; (8013a30 <TIM_Base_SetConfig+0x134>)
 801396a:	4293      	cmp	r3, r2
 801396c:	d013      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	4a30      	ldr	r2, [pc, #192]	; (8013a34 <TIM_Base_SetConfig+0x138>)
 8013972:	4293      	cmp	r3, r2
 8013974:	d00f      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	4a2f      	ldr	r2, [pc, #188]	; (8013a38 <TIM_Base_SetConfig+0x13c>)
 801397a:	4293      	cmp	r3, r2
 801397c:	d00b      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	4a2e      	ldr	r2, [pc, #184]	; (8013a3c <TIM_Base_SetConfig+0x140>)
 8013982:	4293      	cmp	r3, r2
 8013984:	d007      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4a2d      	ldr	r2, [pc, #180]	; (8013a40 <TIM_Base_SetConfig+0x144>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d003      	beq.n	8013996 <TIM_Base_SetConfig+0x9a>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	4a2c      	ldr	r2, [pc, #176]	; (8013a44 <TIM_Base_SetConfig+0x148>)
 8013992:	4293      	cmp	r3, r2
 8013994:	d108      	bne.n	80139a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801399c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	68db      	ldr	r3, [r3, #12]
 80139a2:	68fa      	ldr	r2, [r7, #12]
 80139a4:	4313      	orrs	r3, r2
 80139a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	695b      	ldr	r3, [r3, #20]
 80139b2:	4313      	orrs	r3, r2
 80139b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	68fa      	ldr	r2, [r7, #12]
 80139ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	689a      	ldr	r2, [r3, #8]
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	4a16      	ldr	r2, [pc, #88]	; (8013a28 <TIM_Base_SetConfig+0x12c>)
 80139d0:	4293      	cmp	r3, r2
 80139d2:	d00f      	beq.n	80139f4 <TIM_Base_SetConfig+0xf8>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	4a18      	ldr	r2, [pc, #96]	; (8013a38 <TIM_Base_SetConfig+0x13c>)
 80139d8:	4293      	cmp	r3, r2
 80139da:	d00b      	beq.n	80139f4 <TIM_Base_SetConfig+0xf8>
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	4a17      	ldr	r2, [pc, #92]	; (8013a3c <TIM_Base_SetConfig+0x140>)
 80139e0:	4293      	cmp	r3, r2
 80139e2:	d007      	beq.n	80139f4 <TIM_Base_SetConfig+0xf8>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	4a16      	ldr	r2, [pc, #88]	; (8013a40 <TIM_Base_SetConfig+0x144>)
 80139e8:	4293      	cmp	r3, r2
 80139ea:	d003      	beq.n	80139f4 <TIM_Base_SetConfig+0xf8>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	4a15      	ldr	r2, [pc, #84]	; (8013a44 <TIM_Base_SetConfig+0x148>)
 80139f0:	4293      	cmp	r3, r2
 80139f2:	d103      	bne.n	80139fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	691a      	ldr	r2, [r3, #16]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2201      	movs	r2, #1
 8013a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	691b      	ldr	r3, [r3, #16]
 8013a06:	f003 0301 	and.w	r3, r3, #1
 8013a0a:	2b01      	cmp	r3, #1
 8013a0c:	d105      	bne.n	8013a1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	691b      	ldr	r3, [r3, #16]
 8013a12:	f023 0201 	bic.w	r2, r3, #1
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	611a      	str	r2, [r3, #16]
  }
}
 8013a1a:	bf00      	nop
 8013a1c:	3714      	adds	r7, #20
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a24:	4770      	bx	lr
 8013a26:	bf00      	nop
 8013a28:	40010000 	.word	0x40010000
 8013a2c:	40000400 	.word	0x40000400
 8013a30:	40000800 	.word	0x40000800
 8013a34:	40000c00 	.word	0x40000c00
 8013a38:	40010400 	.word	0x40010400
 8013a3c:	40014000 	.word	0x40014000
 8013a40:	40014400 	.word	0x40014400
 8013a44:	40014800 	.word	0x40014800

08013a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b087      	sub	sp, #28
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6a1b      	ldr	r3, [r3, #32]
 8013a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	6a1b      	ldr	r3, [r3, #32]
 8013a5c:	f023 0201 	bic.w	r2, r3, #1
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	685b      	ldr	r3, [r3, #4]
 8013a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	699b      	ldr	r3, [r3, #24]
 8013a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013a70:	68fa      	ldr	r2, [r7, #12]
 8013a72:	4b37      	ldr	r3, [pc, #220]	; (8013b50 <TIM_OC1_SetConfig+0x108>)
 8013a74:	4013      	ands	r3, r2
 8013a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	f023 0303 	bic.w	r3, r3, #3
 8013a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	68fa      	ldr	r2, [r7, #12]
 8013a86:	4313      	orrs	r3, r2
 8013a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013a8a:	697b      	ldr	r3, [r7, #20]
 8013a8c:	f023 0302 	bic.w	r3, r3, #2
 8013a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	689b      	ldr	r3, [r3, #8]
 8013a96:	697a      	ldr	r2, [r7, #20]
 8013a98:	4313      	orrs	r3, r2
 8013a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	4a2d      	ldr	r2, [pc, #180]	; (8013b54 <TIM_OC1_SetConfig+0x10c>)
 8013aa0:	4293      	cmp	r3, r2
 8013aa2:	d00f      	beq.n	8013ac4 <TIM_OC1_SetConfig+0x7c>
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	4a2c      	ldr	r2, [pc, #176]	; (8013b58 <TIM_OC1_SetConfig+0x110>)
 8013aa8:	4293      	cmp	r3, r2
 8013aaa:	d00b      	beq.n	8013ac4 <TIM_OC1_SetConfig+0x7c>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	4a2b      	ldr	r2, [pc, #172]	; (8013b5c <TIM_OC1_SetConfig+0x114>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d007      	beq.n	8013ac4 <TIM_OC1_SetConfig+0x7c>
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	4a2a      	ldr	r2, [pc, #168]	; (8013b60 <TIM_OC1_SetConfig+0x118>)
 8013ab8:	4293      	cmp	r3, r2
 8013aba:	d003      	beq.n	8013ac4 <TIM_OC1_SetConfig+0x7c>
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	4a29      	ldr	r2, [pc, #164]	; (8013b64 <TIM_OC1_SetConfig+0x11c>)
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	d10c      	bne.n	8013ade <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	f023 0308 	bic.w	r3, r3, #8
 8013aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	68db      	ldr	r3, [r3, #12]
 8013ad0:	697a      	ldr	r2, [r7, #20]
 8013ad2:	4313      	orrs	r3, r2
 8013ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	f023 0304 	bic.w	r3, r3, #4
 8013adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	4a1c      	ldr	r2, [pc, #112]	; (8013b54 <TIM_OC1_SetConfig+0x10c>)
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	d00f      	beq.n	8013b06 <TIM_OC1_SetConfig+0xbe>
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	4a1b      	ldr	r2, [pc, #108]	; (8013b58 <TIM_OC1_SetConfig+0x110>)
 8013aea:	4293      	cmp	r3, r2
 8013aec:	d00b      	beq.n	8013b06 <TIM_OC1_SetConfig+0xbe>
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	4a1a      	ldr	r2, [pc, #104]	; (8013b5c <TIM_OC1_SetConfig+0x114>)
 8013af2:	4293      	cmp	r3, r2
 8013af4:	d007      	beq.n	8013b06 <TIM_OC1_SetConfig+0xbe>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	4a19      	ldr	r2, [pc, #100]	; (8013b60 <TIM_OC1_SetConfig+0x118>)
 8013afa:	4293      	cmp	r3, r2
 8013afc:	d003      	beq.n	8013b06 <TIM_OC1_SetConfig+0xbe>
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	4a18      	ldr	r2, [pc, #96]	; (8013b64 <TIM_OC1_SetConfig+0x11c>)
 8013b02:	4293      	cmp	r3, r2
 8013b04:	d111      	bne.n	8013b2a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013b0e:	693b      	ldr	r3, [r7, #16]
 8013b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	695b      	ldr	r3, [r3, #20]
 8013b1a:	693a      	ldr	r2, [r7, #16]
 8013b1c:	4313      	orrs	r3, r2
 8013b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	699b      	ldr	r3, [r3, #24]
 8013b24:	693a      	ldr	r2, [r7, #16]
 8013b26:	4313      	orrs	r3, r2
 8013b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	693a      	ldr	r2, [r7, #16]
 8013b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	68fa      	ldr	r2, [r7, #12]
 8013b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	685a      	ldr	r2, [r3, #4]
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	697a      	ldr	r2, [r7, #20]
 8013b42:	621a      	str	r2, [r3, #32]
}
 8013b44:	bf00      	nop
 8013b46:	371c      	adds	r7, #28
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4e:	4770      	bx	lr
 8013b50:	fffeff8f 	.word	0xfffeff8f
 8013b54:	40010000 	.word	0x40010000
 8013b58:	40010400 	.word	0x40010400
 8013b5c:	40014000 	.word	0x40014000
 8013b60:	40014400 	.word	0x40014400
 8013b64:	40014800 	.word	0x40014800

08013b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b087      	sub	sp, #28
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6a1b      	ldr	r3, [r3, #32]
 8013b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6a1b      	ldr	r3, [r3, #32]
 8013b7c:	f023 0210 	bic.w	r2, r3, #16
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	685b      	ldr	r3, [r3, #4]
 8013b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	699b      	ldr	r3, [r3, #24]
 8013b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013b90:	68fa      	ldr	r2, [r7, #12]
 8013b92:	4b34      	ldr	r3, [pc, #208]	; (8013c64 <TIM_OC2_SetConfig+0xfc>)
 8013b94:	4013      	ands	r3, r2
 8013b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	021b      	lsls	r3, r3, #8
 8013ba6:	68fa      	ldr	r2, [r7, #12]
 8013ba8:	4313      	orrs	r3, r2
 8013baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	f023 0320 	bic.w	r3, r3, #32
 8013bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	689b      	ldr	r3, [r3, #8]
 8013bb8:	011b      	lsls	r3, r3, #4
 8013bba:	697a      	ldr	r2, [r7, #20]
 8013bbc:	4313      	orrs	r3, r2
 8013bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	4a29      	ldr	r2, [pc, #164]	; (8013c68 <TIM_OC2_SetConfig+0x100>)
 8013bc4:	4293      	cmp	r3, r2
 8013bc6:	d003      	beq.n	8013bd0 <TIM_OC2_SetConfig+0x68>
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	4a28      	ldr	r2, [pc, #160]	; (8013c6c <TIM_OC2_SetConfig+0x104>)
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	d10d      	bne.n	8013bec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	68db      	ldr	r3, [r3, #12]
 8013bdc:	011b      	lsls	r3, r3, #4
 8013bde:	697a      	ldr	r2, [r7, #20]
 8013be0:	4313      	orrs	r3, r2
 8013be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013bea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	4a1e      	ldr	r2, [pc, #120]	; (8013c68 <TIM_OC2_SetConfig+0x100>)
 8013bf0:	4293      	cmp	r3, r2
 8013bf2:	d00f      	beq.n	8013c14 <TIM_OC2_SetConfig+0xac>
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	4a1d      	ldr	r2, [pc, #116]	; (8013c6c <TIM_OC2_SetConfig+0x104>)
 8013bf8:	4293      	cmp	r3, r2
 8013bfa:	d00b      	beq.n	8013c14 <TIM_OC2_SetConfig+0xac>
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	4a1c      	ldr	r2, [pc, #112]	; (8013c70 <TIM_OC2_SetConfig+0x108>)
 8013c00:	4293      	cmp	r3, r2
 8013c02:	d007      	beq.n	8013c14 <TIM_OC2_SetConfig+0xac>
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	4a1b      	ldr	r2, [pc, #108]	; (8013c74 <TIM_OC2_SetConfig+0x10c>)
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d003      	beq.n	8013c14 <TIM_OC2_SetConfig+0xac>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	4a1a      	ldr	r2, [pc, #104]	; (8013c78 <TIM_OC2_SetConfig+0x110>)
 8013c10:	4293      	cmp	r3, r2
 8013c12:	d113      	bne.n	8013c3c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013c14:	693b      	ldr	r3, [r7, #16]
 8013c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	695b      	ldr	r3, [r3, #20]
 8013c28:	009b      	lsls	r3, r3, #2
 8013c2a:	693a      	ldr	r2, [r7, #16]
 8013c2c:	4313      	orrs	r3, r2
 8013c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	699b      	ldr	r3, [r3, #24]
 8013c34:	009b      	lsls	r3, r3, #2
 8013c36:	693a      	ldr	r2, [r7, #16]
 8013c38:	4313      	orrs	r3, r2
 8013c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	693a      	ldr	r2, [r7, #16]
 8013c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	68fa      	ldr	r2, [r7, #12]
 8013c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	685a      	ldr	r2, [r3, #4]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	697a      	ldr	r2, [r7, #20]
 8013c54:	621a      	str	r2, [r3, #32]
}
 8013c56:	bf00      	nop
 8013c58:	371c      	adds	r7, #28
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr
 8013c62:	bf00      	nop
 8013c64:	feff8fff 	.word	0xfeff8fff
 8013c68:	40010000 	.word	0x40010000
 8013c6c:	40010400 	.word	0x40010400
 8013c70:	40014000 	.word	0x40014000
 8013c74:	40014400 	.word	0x40014400
 8013c78:	40014800 	.word	0x40014800

08013c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b087      	sub	sp, #28
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6a1b      	ldr	r3, [r3, #32]
 8013c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6a1b      	ldr	r3, [r3, #32]
 8013c90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	685b      	ldr	r3, [r3, #4]
 8013c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	69db      	ldr	r3, [r3, #28]
 8013ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013ca4:	68fa      	ldr	r2, [r7, #12]
 8013ca6:	4b33      	ldr	r3, [pc, #204]	; (8013d74 <TIM_OC3_SetConfig+0xf8>)
 8013ca8:	4013      	ands	r3, r2
 8013caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	f023 0303 	bic.w	r3, r3, #3
 8013cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	68fa      	ldr	r2, [r7, #12]
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	689b      	ldr	r3, [r3, #8]
 8013cca:	021b      	lsls	r3, r3, #8
 8013ccc:	697a      	ldr	r2, [r7, #20]
 8013cce:	4313      	orrs	r3, r2
 8013cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	4a28      	ldr	r2, [pc, #160]	; (8013d78 <TIM_OC3_SetConfig+0xfc>)
 8013cd6:	4293      	cmp	r3, r2
 8013cd8:	d003      	beq.n	8013ce2 <TIM_OC3_SetConfig+0x66>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	4a27      	ldr	r2, [pc, #156]	; (8013d7c <TIM_OC3_SetConfig+0x100>)
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d10d      	bne.n	8013cfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	68db      	ldr	r3, [r3, #12]
 8013cee:	021b      	lsls	r3, r3, #8
 8013cf0:	697a      	ldr	r2, [r7, #20]
 8013cf2:	4313      	orrs	r3, r2
 8013cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	4a1d      	ldr	r2, [pc, #116]	; (8013d78 <TIM_OC3_SetConfig+0xfc>)
 8013d02:	4293      	cmp	r3, r2
 8013d04:	d00f      	beq.n	8013d26 <TIM_OC3_SetConfig+0xaa>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	4a1c      	ldr	r2, [pc, #112]	; (8013d7c <TIM_OC3_SetConfig+0x100>)
 8013d0a:	4293      	cmp	r3, r2
 8013d0c:	d00b      	beq.n	8013d26 <TIM_OC3_SetConfig+0xaa>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	4a1b      	ldr	r2, [pc, #108]	; (8013d80 <TIM_OC3_SetConfig+0x104>)
 8013d12:	4293      	cmp	r3, r2
 8013d14:	d007      	beq.n	8013d26 <TIM_OC3_SetConfig+0xaa>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	4a1a      	ldr	r2, [pc, #104]	; (8013d84 <TIM_OC3_SetConfig+0x108>)
 8013d1a:	4293      	cmp	r3, r2
 8013d1c:	d003      	beq.n	8013d26 <TIM_OC3_SetConfig+0xaa>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4a19      	ldr	r2, [pc, #100]	; (8013d88 <TIM_OC3_SetConfig+0x10c>)
 8013d22:	4293      	cmp	r3, r2
 8013d24:	d113      	bne.n	8013d4e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	695b      	ldr	r3, [r3, #20]
 8013d3a:	011b      	lsls	r3, r3, #4
 8013d3c:	693a      	ldr	r2, [r7, #16]
 8013d3e:	4313      	orrs	r3, r2
 8013d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	699b      	ldr	r3, [r3, #24]
 8013d46:	011b      	lsls	r3, r3, #4
 8013d48:	693a      	ldr	r2, [r7, #16]
 8013d4a:	4313      	orrs	r3, r2
 8013d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	693a      	ldr	r2, [r7, #16]
 8013d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	68fa      	ldr	r2, [r7, #12]
 8013d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	685a      	ldr	r2, [r3, #4]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	697a      	ldr	r2, [r7, #20]
 8013d66:	621a      	str	r2, [r3, #32]
}
 8013d68:	bf00      	nop
 8013d6a:	371c      	adds	r7, #28
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr
 8013d74:	fffeff8f 	.word	0xfffeff8f
 8013d78:	40010000 	.word	0x40010000
 8013d7c:	40010400 	.word	0x40010400
 8013d80:	40014000 	.word	0x40014000
 8013d84:	40014400 	.word	0x40014400
 8013d88:	40014800 	.word	0x40014800

08013d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b087      	sub	sp, #28
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6a1b      	ldr	r3, [r3, #32]
 8013d9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6a1b      	ldr	r3, [r3, #32]
 8013da0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	685b      	ldr	r3, [r3, #4]
 8013dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	69db      	ldr	r3, [r3, #28]
 8013db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013db4:	68fa      	ldr	r2, [r7, #12]
 8013db6:	4b24      	ldr	r3, [pc, #144]	; (8013e48 <TIM_OC4_SetConfig+0xbc>)
 8013db8:	4013      	ands	r3, r2
 8013dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	021b      	lsls	r3, r3, #8
 8013dca:	68fa      	ldr	r2, [r7, #12]
 8013dcc:	4313      	orrs	r3, r2
 8013dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	689b      	ldr	r3, [r3, #8]
 8013ddc:	031b      	lsls	r3, r3, #12
 8013dde:	693a      	ldr	r2, [r7, #16]
 8013de0:	4313      	orrs	r3, r2
 8013de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	4a19      	ldr	r2, [pc, #100]	; (8013e4c <TIM_OC4_SetConfig+0xc0>)
 8013de8:	4293      	cmp	r3, r2
 8013dea:	d00f      	beq.n	8013e0c <TIM_OC4_SetConfig+0x80>
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	4a18      	ldr	r2, [pc, #96]	; (8013e50 <TIM_OC4_SetConfig+0xc4>)
 8013df0:	4293      	cmp	r3, r2
 8013df2:	d00b      	beq.n	8013e0c <TIM_OC4_SetConfig+0x80>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	4a17      	ldr	r2, [pc, #92]	; (8013e54 <TIM_OC4_SetConfig+0xc8>)
 8013df8:	4293      	cmp	r3, r2
 8013dfa:	d007      	beq.n	8013e0c <TIM_OC4_SetConfig+0x80>
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	4a16      	ldr	r2, [pc, #88]	; (8013e58 <TIM_OC4_SetConfig+0xcc>)
 8013e00:	4293      	cmp	r3, r2
 8013e02:	d003      	beq.n	8013e0c <TIM_OC4_SetConfig+0x80>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	4a15      	ldr	r2, [pc, #84]	; (8013e5c <TIM_OC4_SetConfig+0xd0>)
 8013e08:	4293      	cmp	r3, r2
 8013e0a:	d109      	bne.n	8013e20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	695b      	ldr	r3, [r3, #20]
 8013e18:	019b      	lsls	r3, r3, #6
 8013e1a:	697a      	ldr	r2, [r7, #20]
 8013e1c:	4313      	orrs	r3, r2
 8013e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	697a      	ldr	r2, [r7, #20]
 8013e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	68fa      	ldr	r2, [r7, #12]
 8013e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	685a      	ldr	r2, [r3, #4]
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	693a      	ldr	r2, [r7, #16]
 8013e38:	621a      	str	r2, [r3, #32]
}
 8013e3a:	bf00      	nop
 8013e3c:	371c      	adds	r7, #28
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e44:	4770      	bx	lr
 8013e46:	bf00      	nop
 8013e48:	feff8fff 	.word	0xfeff8fff
 8013e4c:	40010000 	.word	0x40010000
 8013e50:	40010400 	.word	0x40010400
 8013e54:	40014000 	.word	0x40014000
 8013e58:	40014400 	.word	0x40014400
 8013e5c:	40014800 	.word	0x40014800

08013e60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013e60:	b480      	push	{r7}
 8013e62:	b087      	sub	sp, #28
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6a1b      	ldr	r3, [r3, #32]
 8013e6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6a1b      	ldr	r3, [r3, #32]
 8013e74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013e88:	68fa      	ldr	r2, [r7, #12]
 8013e8a:	4b21      	ldr	r3, [pc, #132]	; (8013f10 <TIM_OC5_SetConfig+0xb0>)
 8013e8c:	4013      	ands	r3, r2
 8013e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	68fa      	ldr	r2, [r7, #12]
 8013e96:	4313      	orrs	r3, r2
 8013e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013e9a:	693b      	ldr	r3, [r7, #16]
 8013e9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013ea0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	689b      	ldr	r3, [r3, #8]
 8013ea6:	041b      	lsls	r3, r3, #16
 8013ea8:	693a      	ldr	r2, [r7, #16]
 8013eaa:	4313      	orrs	r3, r2
 8013eac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	4a18      	ldr	r2, [pc, #96]	; (8013f14 <TIM_OC5_SetConfig+0xb4>)
 8013eb2:	4293      	cmp	r3, r2
 8013eb4:	d00f      	beq.n	8013ed6 <TIM_OC5_SetConfig+0x76>
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	4a17      	ldr	r2, [pc, #92]	; (8013f18 <TIM_OC5_SetConfig+0xb8>)
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	d00b      	beq.n	8013ed6 <TIM_OC5_SetConfig+0x76>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	4a16      	ldr	r2, [pc, #88]	; (8013f1c <TIM_OC5_SetConfig+0xbc>)
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	d007      	beq.n	8013ed6 <TIM_OC5_SetConfig+0x76>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	4a15      	ldr	r2, [pc, #84]	; (8013f20 <TIM_OC5_SetConfig+0xc0>)
 8013eca:	4293      	cmp	r3, r2
 8013ecc:	d003      	beq.n	8013ed6 <TIM_OC5_SetConfig+0x76>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	4a14      	ldr	r2, [pc, #80]	; (8013f24 <TIM_OC5_SetConfig+0xc4>)
 8013ed2:	4293      	cmp	r3, r2
 8013ed4:	d109      	bne.n	8013eea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013edc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	695b      	ldr	r3, [r3, #20]
 8013ee2:	021b      	lsls	r3, r3, #8
 8013ee4:	697a      	ldr	r2, [r7, #20]
 8013ee6:	4313      	orrs	r3, r2
 8013ee8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	697a      	ldr	r2, [r7, #20]
 8013eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	68fa      	ldr	r2, [r7, #12]
 8013ef4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	685a      	ldr	r2, [r3, #4]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	693a      	ldr	r2, [r7, #16]
 8013f02:	621a      	str	r2, [r3, #32]
}
 8013f04:	bf00      	nop
 8013f06:	371c      	adds	r7, #28
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0e:	4770      	bx	lr
 8013f10:	fffeff8f 	.word	0xfffeff8f
 8013f14:	40010000 	.word	0x40010000
 8013f18:	40010400 	.word	0x40010400
 8013f1c:	40014000 	.word	0x40014000
 8013f20:	40014400 	.word	0x40014400
 8013f24:	40014800 	.word	0x40014800

08013f28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013f28:	b480      	push	{r7}
 8013f2a:	b087      	sub	sp, #28
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
 8013f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6a1b      	ldr	r3, [r3, #32]
 8013f36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6a1b      	ldr	r3, [r3, #32]
 8013f3c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013f50:	68fa      	ldr	r2, [r7, #12]
 8013f52:	4b22      	ldr	r3, [pc, #136]	; (8013fdc <TIM_OC6_SetConfig+0xb4>)
 8013f54:	4013      	ands	r3, r2
 8013f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	021b      	lsls	r3, r3, #8
 8013f5e:	68fa      	ldr	r2, [r7, #12]
 8013f60:	4313      	orrs	r3, r2
 8013f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013f64:	693b      	ldr	r3, [r7, #16]
 8013f66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	689b      	ldr	r3, [r3, #8]
 8013f70:	051b      	lsls	r3, r3, #20
 8013f72:	693a      	ldr	r2, [r7, #16]
 8013f74:	4313      	orrs	r3, r2
 8013f76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	4a19      	ldr	r2, [pc, #100]	; (8013fe0 <TIM_OC6_SetConfig+0xb8>)
 8013f7c:	4293      	cmp	r3, r2
 8013f7e:	d00f      	beq.n	8013fa0 <TIM_OC6_SetConfig+0x78>
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	4a18      	ldr	r2, [pc, #96]	; (8013fe4 <TIM_OC6_SetConfig+0xbc>)
 8013f84:	4293      	cmp	r3, r2
 8013f86:	d00b      	beq.n	8013fa0 <TIM_OC6_SetConfig+0x78>
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	4a17      	ldr	r2, [pc, #92]	; (8013fe8 <TIM_OC6_SetConfig+0xc0>)
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	d007      	beq.n	8013fa0 <TIM_OC6_SetConfig+0x78>
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	4a16      	ldr	r2, [pc, #88]	; (8013fec <TIM_OC6_SetConfig+0xc4>)
 8013f94:	4293      	cmp	r3, r2
 8013f96:	d003      	beq.n	8013fa0 <TIM_OC6_SetConfig+0x78>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	4a15      	ldr	r2, [pc, #84]	; (8013ff0 <TIM_OC6_SetConfig+0xc8>)
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	d109      	bne.n	8013fb4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	695b      	ldr	r3, [r3, #20]
 8013fac:	029b      	lsls	r3, r3, #10
 8013fae:	697a      	ldr	r2, [r7, #20]
 8013fb0:	4313      	orrs	r3, r2
 8013fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	697a      	ldr	r2, [r7, #20]
 8013fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	68fa      	ldr	r2, [r7, #12]
 8013fbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	685a      	ldr	r2, [r3, #4]
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	693a      	ldr	r2, [r7, #16]
 8013fcc:	621a      	str	r2, [r3, #32]
}
 8013fce:	bf00      	nop
 8013fd0:	371c      	adds	r7, #28
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd8:	4770      	bx	lr
 8013fda:	bf00      	nop
 8013fdc:	feff8fff 	.word	0xfeff8fff
 8013fe0:	40010000 	.word	0x40010000
 8013fe4:	40010400 	.word	0x40010400
 8013fe8:	40014000 	.word	0x40014000
 8013fec:	40014400 	.word	0x40014400
 8013ff0:	40014800 	.word	0x40014800

08013ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b087      	sub	sp, #28
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	60f8      	str	r0, [r7, #12]
 8013ffc:	60b9      	str	r1, [r7, #8]
 8013ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	6a1b      	ldr	r3, [r3, #32]
 8014004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	6a1b      	ldr	r3, [r3, #32]
 801400a:	f023 0201 	bic.w	r2, r3, #1
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	699b      	ldr	r3, [r3, #24]
 8014016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801401e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	011b      	lsls	r3, r3, #4
 8014024:	693a      	ldr	r2, [r7, #16]
 8014026:	4313      	orrs	r3, r2
 8014028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	f023 030a 	bic.w	r3, r3, #10
 8014030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014032:	697a      	ldr	r2, [r7, #20]
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	4313      	orrs	r3, r2
 8014038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	693a      	ldr	r2, [r7, #16]
 801403e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	697a      	ldr	r2, [r7, #20]
 8014044:	621a      	str	r2, [r3, #32]
}
 8014046:	bf00      	nop
 8014048:	371c      	adds	r7, #28
 801404a:	46bd      	mov	sp, r7
 801404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014050:	4770      	bx	lr

08014052 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014052:	b480      	push	{r7}
 8014054:	b087      	sub	sp, #28
 8014056:	af00      	add	r7, sp, #0
 8014058:	60f8      	str	r0, [r7, #12]
 801405a:	60b9      	str	r1, [r7, #8]
 801405c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	6a1b      	ldr	r3, [r3, #32]
 8014062:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	6a1b      	ldr	r3, [r3, #32]
 8014068:	f023 0210 	bic.w	r2, r3, #16
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	699b      	ldr	r3, [r3, #24]
 8014074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801407c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	031b      	lsls	r3, r3, #12
 8014082:	693a      	ldr	r2, [r7, #16]
 8014084:	4313      	orrs	r3, r2
 8014086:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801408e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	011b      	lsls	r3, r3, #4
 8014094:	697a      	ldr	r2, [r7, #20]
 8014096:	4313      	orrs	r3, r2
 8014098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	693a      	ldr	r2, [r7, #16]
 801409e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	697a      	ldr	r2, [r7, #20]
 80140a4:	621a      	str	r2, [r3, #32]
}
 80140a6:	bf00      	nop
 80140a8:	371c      	adds	r7, #28
 80140aa:	46bd      	mov	sp, r7
 80140ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b0:	4770      	bx	lr
	...

080140b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80140b4:	b480      	push	{r7}
 80140b6:	b085      	sub	sp, #20
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	689b      	ldr	r3, [r3, #8]
 80140c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80140c4:	68fa      	ldr	r2, [r7, #12]
 80140c6:	4b09      	ldr	r3, [pc, #36]	; (80140ec <TIM_ITRx_SetConfig+0x38>)
 80140c8:	4013      	ands	r3, r2
 80140ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80140cc:	683a      	ldr	r2, [r7, #0]
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	4313      	orrs	r3, r2
 80140d2:	f043 0307 	orr.w	r3, r3, #7
 80140d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	68fa      	ldr	r2, [r7, #12]
 80140dc:	609a      	str	r2, [r3, #8]
}
 80140de:	bf00      	nop
 80140e0:	3714      	adds	r7, #20
 80140e2:	46bd      	mov	sp, r7
 80140e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e8:	4770      	bx	lr
 80140ea:	bf00      	nop
 80140ec:	ffcfff8f 	.word	0xffcfff8f

080140f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80140f0:	b480      	push	{r7}
 80140f2:	b087      	sub	sp, #28
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	60f8      	str	r0, [r7, #12]
 80140f8:	60b9      	str	r1, [r7, #8]
 80140fa:	607a      	str	r2, [r7, #4]
 80140fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	689b      	ldr	r3, [r3, #8]
 8014102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801410a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	021a      	lsls	r2, r3, #8
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	431a      	orrs	r2, r3
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	4313      	orrs	r3, r2
 8014118:	697a      	ldr	r2, [r7, #20]
 801411a:	4313      	orrs	r3, r2
 801411c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	697a      	ldr	r2, [r7, #20]
 8014122:	609a      	str	r2, [r3, #8]
}
 8014124:	bf00      	nop
 8014126:	371c      	adds	r7, #28
 8014128:	46bd      	mov	sp, r7
 801412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412e:	4770      	bx	lr

08014130 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014130:	b480      	push	{r7}
 8014132:	b087      	sub	sp, #28
 8014134:	af00      	add	r7, sp, #0
 8014136:	60f8      	str	r0, [r7, #12]
 8014138:	60b9      	str	r1, [r7, #8]
 801413a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	f003 031f 	and.w	r3, r3, #31
 8014142:	2201      	movs	r2, #1
 8014144:	fa02 f303 	lsl.w	r3, r2, r3
 8014148:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	6a1a      	ldr	r2, [r3, #32]
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	43db      	mvns	r3, r3
 8014152:	401a      	ands	r2, r3
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	6a1a      	ldr	r2, [r3, #32]
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	f003 031f 	and.w	r3, r3, #31
 8014162:	6879      	ldr	r1, [r7, #4]
 8014164:	fa01 f303 	lsl.w	r3, r1, r3
 8014168:	431a      	orrs	r2, r3
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	621a      	str	r2, [r3, #32]
}
 801416e:	bf00      	nop
 8014170:	371c      	adds	r7, #28
 8014172:	46bd      	mov	sp, r7
 8014174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014178:	4770      	bx	lr
	...

0801417c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801417c:	b480      	push	{r7}
 801417e:	b085      	sub	sp, #20
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801418c:	2b01      	cmp	r3, #1
 801418e:	d101      	bne.n	8014194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014190:	2302      	movs	r3, #2
 8014192:	e06d      	b.n	8014270 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2201      	movs	r2, #1
 8014198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2202      	movs	r2, #2
 80141a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	689b      	ldr	r3, [r3, #8]
 80141b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	4a30      	ldr	r2, [pc, #192]	; (801427c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d004      	beq.n	80141c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	4a2f      	ldr	r2, [pc, #188]	; (8014280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80141c4:	4293      	cmp	r3, r2
 80141c6:	d108      	bne.n	80141da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80141ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	685b      	ldr	r3, [r3, #4]
 80141d4:	68fa      	ldr	r2, [r7, #12]
 80141d6:	4313      	orrs	r3, r2
 80141d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80141e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	68fa      	ldr	r2, [r7, #12]
 80141e8:	4313      	orrs	r3, r2
 80141ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	68fa      	ldr	r2, [r7, #12]
 80141f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	4a20      	ldr	r2, [pc, #128]	; (801427c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d022      	beq.n	8014244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014206:	d01d      	beq.n	8014244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	4a1d      	ldr	r2, [pc, #116]	; (8014284 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801420e:	4293      	cmp	r3, r2
 8014210:	d018      	beq.n	8014244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	4a1c      	ldr	r2, [pc, #112]	; (8014288 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014218:	4293      	cmp	r3, r2
 801421a:	d013      	beq.n	8014244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	4a1a      	ldr	r2, [pc, #104]	; (801428c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8014222:	4293      	cmp	r3, r2
 8014224:	d00e      	beq.n	8014244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	4a15      	ldr	r2, [pc, #84]	; (8014280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801422c:	4293      	cmp	r3, r2
 801422e:	d009      	beq.n	8014244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	4a16      	ldr	r2, [pc, #88]	; (8014290 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8014236:	4293      	cmp	r3, r2
 8014238:	d004      	beq.n	8014244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	4a15      	ldr	r2, [pc, #84]	; (8014294 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014240:	4293      	cmp	r3, r2
 8014242:	d10c      	bne.n	801425e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801424a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	689b      	ldr	r3, [r3, #8]
 8014250:	68ba      	ldr	r2, [r7, #8]
 8014252:	4313      	orrs	r3, r2
 8014254:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	68ba      	ldr	r2, [r7, #8]
 801425c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2201      	movs	r2, #1
 8014262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	2200      	movs	r2, #0
 801426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801426e:	2300      	movs	r3, #0
}
 8014270:	4618      	mov	r0, r3
 8014272:	3714      	adds	r7, #20
 8014274:	46bd      	mov	sp, r7
 8014276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427a:	4770      	bx	lr
 801427c:	40010000 	.word	0x40010000
 8014280:	40010400 	.word	0x40010400
 8014284:	40000400 	.word	0x40000400
 8014288:	40000800 	.word	0x40000800
 801428c:	40000c00 	.word	0x40000c00
 8014290:	40001800 	.word	0x40001800
 8014294:	40014000 	.word	0x40014000

08014298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014298:	b480      	push	{r7}
 801429a:	b085      	sub	sp, #20
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80142a2:	2300      	movs	r3, #0
 80142a4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80142ac:	2b01      	cmp	r3, #1
 80142ae:	d101      	bne.n	80142b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80142b0:	2302      	movs	r3, #2
 80142b2:	e065      	b.n	8014380 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2201      	movs	r2, #1
 80142b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80142c2:	683b      	ldr	r3, [r7, #0]
 80142c4:	68db      	ldr	r3, [r3, #12]
 80142c6:	4313      	orrs	r3, r2
 80142c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	689b      	ldr	r3, [r3, #8]
 80142d4:	4313      	orrs	r3, r2
 80142d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	685b      	ldr	r3, [r3, #4]
 80142e2:	4313      	orrs	r3, r2
 80142e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80142ec:	683b      	ldr	r3, [r7, #0]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	4313      	orrs	r3, r2
 80142f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	691b      	ldr	r3, [r3, #16]
 80142fe:	4313      	orrs	r3, r2
 8014300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014308:	683b      	ldr	r3, [r7, #0]
 801430a:	695b      	ldr	r3, [r3, #20]
 801430c:	4313      	orrs	r3, r2
 801430e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801431a:	4313      	orrs	r3, r2
 801431c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	699b      	ldr	r3, [r3, #24]
 8014328:	041b      	lsls	r3, r3, #16
 801432a:	4313      	orrs	r3, r2
 801432c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	4a16      	ldr	r2, [pc, #88]	; (801438c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8014334:	4293      	cmp	r3, r2
 8014336:	d004      	beq.n	8014342 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	4a14      	ldr	r2, [pc, #80]	; (8014390 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801433e:	4293      	cmp	r3, r2
 8014340:	d115      	bne.n	801436e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801434c:	051b      	lsls	r3, r3, #20
 801434e:	4313      	orrs	r3, r2
 8014350:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	69db      	ldr	r3, [r3, #28]
 801435c:	4313      	orrs	r3, r2
 801435e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	6a1b      	ldr	r3, [r3, #32]
 801436a:	4313      	orrs	r3, r2
 801436c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	68fa      	ldr	r2, [r7, #12]
 8014374:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	2200      	movs	r2, #0
 801437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801437e:	2300      	movs	r3, #0
}
 8014380:	4618      	mov	r0, r3
 8014382:	3714      	adds	r7, #20
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr
 801438c:	40010000 	.word	0x40010000
 8014390:	40010400 	.word	0x40010400

08014394 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014394:	b480      	push	{r7}
 8014396:	b083      	sub	sp, #12
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801439c:	bf00      	nop
 801439e:	370c      	adds	r7, #12
 80143a0:	46bd      	mov	sp, r7
 80143a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a6:	4770      	bx	lr

080143a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80143a8:	b480      	push	{r7}
 80143aa:	b083      	sub	sp, #12
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80143b0:	bf00      	nop
 80143b2:	370c      	adds	r7, #12
 80143b4:	46bd      	mov	sp, r7
 80143b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ba:	4770      	bx	lr

080143bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80143c4:	bf00      	nop
 80143c6:	370c      	adds	r7, #12
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr

080143d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d101      	bne.n	80143e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80143de:	2301      	movs	r3, #1
 80143e0:	e042      	b.n	8014468 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d106      	bne.n	80143fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2200      	movs	r2, #0
 80143f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f7f1 f925 	bl	8005644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2224      	movs	r2, #36	; 0x24
 80143fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	f022 0201 	bic.w	r2, r2, #1
 8014410:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014416:	2b00      	cmp	r3, #0
 8014418:	d002      	beq.n	8014420 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f001 fbc2 	bl	8015ba4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f000 fe57 	bl	80150d4 <UART_SetConfig>
 8014426:	4603      	mov	r3, r0
 8014428:	2b01      	cmp	r3, #1
 801442a:	d101      	bne.n	8014430 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801442c:	2301      	movs	r3, #1
 801442e:	e01b      	b.n	8014468 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	685a      	ldr	r2, [r3, #4]
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801443e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	689a      	ldr	r2, [r3, #8]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801444e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	681a      	ldr	r2, [r3, #0]
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	f042 0201 	orr.w	r2, r2, #1
 801445e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f001 fc41 	bl	8015ce8 <UART_CheckIdleState>
 8014466:	4603      	mov	r3, r0
}
 8014468:	4618      	mov	r0, r3
 801446a:	3708      	adds	r7, #8
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}

08014470 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b08a      	sub	sp, #40	; 0x28
 8014474:	af02      	add	r7, sp, #8
 8014476:	60f8      	str	r0, [r7, #12]
 8014478:	60b9      	str	r1, [r7, #8]
 801447a:	603b      	str	r3, [r7, #0]
 801447c:	4613      	mov	r3, r2
 801447e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014486:	2b20      	cmp	r3, #32
 8014488:	d17b      	bne.n	8014582 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d002      	beq.n	8014496 <HAL_UART_Transmit+0x26>
 8014490:	88fb      	ldrh	r3, [r7, #6]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d101      	bne.n	801449a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8014496:	2301      	movs	r3, #1
 8014498:	e074      	b.n	8014584 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	2200      	movs	r2, #0
 801449e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2221      	movs	r2, #33	; 0x21
 80144a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80144aa:	f7f1 fd7d 	bl	8005fa8 <HAL_GetTick>
 80144ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	88fa      	ldrh	r2, [r7, #6]
 80144b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	88fa      	ldrh	r2, [r7, #6]
 80144bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	689b      	ldr	r3, [r3, #8]
 80144c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80144c8:	d108      	bne.n	80144dc <HAL_UART_Transmit+0x6c>
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	691b      	ldr	r3, [r3, #16]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d104      	bne.n	80144dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80144d2:	2300      	movs	r3, #0
 80144d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	61bb      	str	r3, [r7, #24]
 80144da:	e003      	b.n	80144e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80144e0:	2300      	movs	r3, #0
 80144e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80144e4:	e030      	b.n	8014548 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80144e6:	683b      	ldr	r3, [r7, #0]
 80144e8:	9300      	str	r3, [sp, #0]
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	2200      	movs	r2, #0
 80144ee:	2180      	movs	r1, #128	; 0x80
 80144f0:	68f8      	ldr	r0, [r7, #12]
 80144f2:	f001 fca3 	bl	8015e3c <UART_WaitOnFlagUntilTimeout>
 80144f6:	4603      	mov	r3, r0
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d005      	beq.n	8014508 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	2220      	movs	r2, #32
 8014500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8014504:	2303      	movs	r3, #3
 8014506:	e03d      	b.n	8014584 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8014508:	69fb      	ldr	r3, [r7, #28]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d10b      	bne.n	8014526 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801450e:	69bb      	ldr	r3, [r7, #24]
 8014510:	881b      	ldrh	r3, [r3, #0]
 8014512:	461a      	mov	r2, r3
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801451c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	3302      	adds	r3, #2
 8014522:	61bb      	str	r3, [r7, #24]
 8014524:	e007      	b.n	8014536 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014526:	69fb      	ldr	r3, [r7, #28]
 8014528:	781a      	ldrb	r2, [r3, #0]
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8014530:	69fb      	ldr	r3, [r7, #28]
 8014532:	3301      	adds	r3, #1
 8014534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801453c:	b29b      	uxth	r3, r3
 801453e:	3b01      	subs	r3, #1
 8014540:	b29a      	uxth	r2, r3
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801454e:	b29b      	uxth	r3, r3
 8014550:	2b00      	cmp	r3, #0
 8014552:	d1c8      	bne.n	80144e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	9300      	str	r3, [sp, #0]
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	2200      	movs	r2, #0
 801455c:	2140      	movs	r1, #64	; 0x40
 801455e:	68f8      	ldr	r0, [r7, #12]
 8014560:	f001 fc6c 	bl	8015e3c <UART_WaitOnFlagUntilTimeout>
 8014564:	4603      	mov	r3, r0
 8014566:	2b00      	cmp	r3, #0
 8014568:	d005      	beq.n	8014576 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	2220      	movs	r2, #32
 801456e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8014572:	2303      	movs	r3, #3
 8014574:	e006      	b.n	8014584 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	2220      	movs	r2, #32
 801457a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801457e:	2300      	movs	r3, #0
 8014580:	e000      	b.n	8014584 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8014582:	2302      	movs	r3, #2
  }
}
 8014584:	4618      	mov	r0, r3
 8014586:	3720      	adds	r7, #32
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}

0801458c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b08a      	sub	sp, #40	; 0x28
 8014590:	af02      	add	r7, sp, #8
 8014592:	60f8      	str	r0, [r7, #12]
 8014594:	60b9      	str	r1, [r7, #8]
 8014596:	603b      	str	r3, [r7, #0]
 8014598:	4613      	mov	r3, r2
 801459a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80145a2:	2b20      	cmp	r3, #32
 80145a4:	f040 80b5 	bne.w	8014712 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d002      	beq.n	80145b4 <HAL_UART_Receive+0x28>
 80145ae:	88fb      	ldrh	r3, [r7, #6]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d101      	bne.n	80145b8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80145b4:	2301      	movs	r3, #1
 80145b6:	e0ad      	b.n	8014714 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	2200      	movs	r2, #0
 80145bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	2222      	movs	r2, #34	; 0x22
 80145c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	2200      	movs	r2, #0
 80145cc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80145ce:	f7f1 fceb 	bl	8005fa8 <HAL_GetTick>
 80145d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	88fa      	ldrh	r2, [r7, #6]
 80145d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	88fa      	ldrh	r2, [r7, #6]
 80145e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	689b      	ldr	r3, [r3, #8]
 80145e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80145ec:	d10e      	bne.n	801460c <HAL_UART_Receive+0x80>
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	691b      	ldr	r3, [r3, #16]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d105      	bne.n	8014602 <HAL_UART_Receive+0x76>
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80145fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014600:	e02d      	b.n	801465e <HAL_UART_Receive+0xd2>
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	22ff      	movs	r2, #255	; 0xff
 8014606:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801460a:	e028      	b.n	801465e <HAL_UART_Receive+0xd2>
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	689b      	ldr	r3, [r3, #8]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d10d      	bne.n	8014630 <HAL_UART_Receive+0xa4>
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	691b      	ldr	r3, [r3, #16]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d104      	bne.n	8014626 <HAL_UART_Receive+0x9a>
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	22ff      	movs	r2, #255	; 0xff
 8014620:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014624:	e01b      	b.n	801465e <HAL_UART_Receive+0xd2>
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	227f      	movs	r2, #127	; 0x7f
 801462a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801462e:	e016      	b.n	801465e <HAL_UART_Receive+0xd2>
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	689b      	ldr	r3, [r3, #8]
 8014634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014638:	d10d      	bne.n	8014656 <HAL_UART_Receive+0xca>
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	691b      	ldr	r3, [r3, #16]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d104      	bne.n	801464c <HAL_UART_Receive+0xc0>
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	227f      	movs	r2, #127	; 0x7f
 8014646:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801464a:	e008      	b.n	801465e <HAL_UART_Receive+0xd2>
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	223f      	movs	r2, #63	; 0x3f
 8014650:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014654:	e003      	b.n	801465e <HAL_UART_Receive+0xd2>
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	2200      	movs	r2, #0
 801465a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014664:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	689b      	ldr	r3, [r3, #8]
 801466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801466e:	d108      	bne.n	8014682 <HAL_UART_Receive+0xf6>
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	691b      	ldr	r3, [r3, #16]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d104      	bne.n	8014682 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014678:	2300      	movs	r3, #0
 801467a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	61bb      	str	r3, [r7, #24]
 8014680:	e003      	b.n	801468a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014686:	2300      	movs	r3, #0
 8014688:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801468a:	e036      	b.n	80146fa <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	9300      	str	r3, [sp, #0]
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	2200      	movs	r2, #0
 8014694:	2120      	movs	r1, #32
 8014696:	68f8      	ldr	r0, [r7, #12]
 8014698:	f001 fbd0 	bl	8015e3c <UART_WaitOnFlagUntilTimeout>
 801469c:	4603      	mov	r3, r0
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d005      	beq.n	80146ae <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	2220      	movs	r2, #32
 80146a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80146aa:	2303      	movs	r3, #3
 80146ac:	e032      	b.n	8014714 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80146ae:	69fb      	ldr	r3, [r7, #28]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d10c      	bne.n	80146ce <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146ba:	b29a      	uxth	r2, r3
 80146bc:	8a7b      	ldrh	r3, [r7, #18]
 80146be:	4013      	ands	r3, r2
 80146c0:	b29a      	uxth	r2, r3
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80146c6:	69bb      	ldr	r3, [r7, #24]
 80146c8:	3302      	adds	r3, #2
 80146ca:	61bb      	str	r3, [r7, #24]
 80146cc:	e00c      	b.n	80146e8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146d4:	b2da      	uxtb	r2, r3
 80146d6:	8a7b      	ldrh	r3, [r7, #18]
 80146d8:	b2db      	uxtb	r3, r3
 80146da:	4013      	ands	r3, r2
 80146dc:	b2da      	uxtb	r2, r3
 80146de:	69fb      	ldr	r3, [r7, #28]
 80146e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80146e2:	69fb      	ldr	r3, [r7, #28]
 80146e4:	3301      	adds	r3, #1
 80146e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146ee:	b29b      	uxth	r3, r3
 80146f0:	3b01      	subs	r3, #1
 80146f2:	b29a      	uxth	r2, r3
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014700:	b29b      	uxth	r3, r3
 8014702:	2b00      	cmp	r3, #0
 8014704:	d1c2      	bne.n	801468c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	2220      	movs	r2, #32
 801470a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801470e:	2300      	movs	r3, #0
 8014710:	e000      	b.n	8014714 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8014712:	2302      	movs	r3, #2
  }
}
 8014714:	4618      	mov	r0, r3
 8014716:	3720      	adds	r7, #32
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}

0801471c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b08a      	sub	sp, #40	; 0x28
 8014720:	af00      	add	r7, sp, #0
 8014722:	60f8      	str	r0, [r7, #12]
 8014724:	60b9      	str	r1, [r7, #8]
 8014726:	4613      	mov	r3, r2
 8014728:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014730:	2b20      	cmp	r3, #32
 8014732:	d137      	bne.n	80147a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d002      	beq.n	8014740 <HAL_UART_Receive_IT+0x24>
 801473a:	88fb      	ldrh	r3, [r7, #6]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d101      	bne.n	8014744 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014740:	2301      	movs	r3, #1
 8014742:	e030      	b.n	80147a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	2200      	movs	r2, #0
 8014748:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	4a18      	ldr	r2, [pc, #96]	; (80147b0 <HAL_UART_Receive_IT+0x94>)
 8014750:	4293      	cmp	r3, r2
 8014752:	d01f      	beq.n	8014794 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801475e:	2b00      	cmp	r3, #0
 8014760:	d018      	beq.n	8014794 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	e853 3f00 	ldrex	r3, [r3]
 801476e:	613b      	str	r3, [r7, #16]
   return(result);
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014776:	627b      	str	r3, [r7, #36]	; 0x24
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	461a      	mov	r2, r3
 801477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014780:	623b      	str	r3, [r7, #32]
 8014782:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014784:	69f9      	ldr	r1, [r7, #28]
 8014786:	6a3a      	ldr	r2, [r7, #32]
 8014788:	e841 2300 	strex	r3, r2, [r1]
 801478c:	61bb      	str	r3, [r7, #24]
   return(result);
 801478e:	69bb      	ldr	r3, [r7, #24]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d1e6      	bne.n	8014762 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014794:	88fb      	ldrh	r3, [r7, #6]
 8014796:	461a      	mov	r2, r3
 8014798:	68b9      	ldr	r1, [r7, #8]
 801479a:	68f8      	ldr	r0, [r7, #12]
 801479c:	f001 fbbc 	bl	8015f18 <UART_Start_Receive_IT>
 80147a0:	4603      	mov	r3, r0
 80147a2:	e000      	b.n	80147a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80147a4:	2302      	movs	r3, #2
  }
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	3728      	adds	r7, #40	; 0x28
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bd80      	pop	{r7, pc}
 80147ae:	bf00      	nop
 80147b0:	58000c00 	.word	0x58000c00

080147b4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b09a      	sub	sp, #104	; 0x68
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147c4:	e853 3f00 	ldrex	r3, [r3]
 80147c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80147ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80147cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80147d0:	667b      	str	r3, [r7, #100]	; 0x64
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	461a      	mov	r2, r3
 80147d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80147da:	657b      	str	r3, [r7, #84]	; 0x54
 80147dc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80147e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80147e2:	e841 2300 	strex	r3, r2, [r1]
 80147e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80147e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d1e6      	bne.n	80147bc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	3308      	adds	r3, #8
 80147f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147f8:	e853 3f00 	ldrex	r3, [r3]
 80147fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80147fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014800:	4b46      	ldr	r3, [pc, #280]	; (801491c <HAL_UART_AbortReceive+0x168>)
 8014802:	4013      	ands	r3, r2
 8014804:	663b      	str	r3, [r7, #96]	; 0x60
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	3308      	adds	r3, #8
 801480c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801480e:	643a      	str	r2, [r7, #64]	; 0x40
 8014810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014814:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014816:	e841 2300 	strex	r3, r2, [r1]
 801481a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801481e:	2b00      	cmp	r3, #0
 8014820:	d1e5      	bne.n	80147ee <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014826:	2b01      	cmp	r3, #1
 8014828:	d118      	bne.n	801485c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014830:	6a3b      	ldr	r3, [r7, #32]
 8014832:	e853 3f00 	ldrex	r3, [r3]
 8014836:	61fb      	str	r3, [r7, #28]
   return(result);
 8014838:	69fb      	ldr	r3, [r7, #28]
 801483a:	f023 0310 	bic.w	r3, r3, #16
 801483e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	461a      	mov	r2, r3
 8014846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014848:	62fb      	str	r3, [r7, #44]	; 0x2c
 801484a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801484c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801484e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014850:	e841 2300 	strex	r3, r2, [r1]
 8014854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014858:	2b00      	cmp	r3, #0
 801485a:	d1e6      	bne.n	801482a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	689b      	ldr	r3, [r3, #8]
 8014862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014866:	2b40      	cmp	r3, #64	; 0x40
 8014868:	d13b      	bne.n	80148e2 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	3308      	adds	r3, #8
 8014870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	e853 3f00 	ldrex	r3, [r3]
 8014878:	60bb      	str	r3, [r7, #8]
   return(result);
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014880:	65bb      	str	r3, [r7, #88]	; 0x58
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	3308      	adds	r3, #8
 8014888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801488a:	61ba      	str	r2, [r7, #24]
 801488c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801488e:	6979      	ldr	r1, [r7, #20]
 8014890:	69ba      	ldr	r2, [r7, #24]
 8014892:	e841 2300 	strex	r3, r2, [r1]
 8014896:	613b      	str	r3, [r7, #16]
   return(result);
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d1e5      	bne.n	801486a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d01c      	beq.n	80148e2 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148ae:	2200      	movs	r2, #0
 80148b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148b8:	4618      	mov	r0, r3
 80148ba:	f7f4 fa63 	bl	8008d84 <HAL_DMA_Abort>
 80148be:	4603      	mov	r3, r0
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d00e      	beq.n	80148e2 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148ca:	4618      	mov	r0, r3
 80148cc:	f7f5 fef6 	bl	800a6bc <HAL_DMA_GetError>
 80148d0:	4603      	mov	r3, r0
 80148d2:	2b20      	cmp	r3, #32
 80148d4:	d105      	bne.n	80148e2 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2210      	movs	r2, #16
 80148da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80148de:	2303      	movs	r3, #3
 80148e0:	e017      	b.n	8014912 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	2200      	movs	r2, #0
 80148e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	220f      	movs	r2, #15
 80148f0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	699a      	ldr	r2, [r3, #24]
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	f042 0208 	orr.w	r2, r2, #8
 8014900:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	2220      	movs	r2, #32
 8014906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2200      	movs	r2, #0
 801490e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8014910:	2300      	movs	r3, #0
}
 8014912:	4618      	mov	r0, r3
 8014914:	3768      	adds	r7, #104	; 0x68
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}
 801491a:	bf00      	nop
 801491c:	effffffe 	.word	0xeffffffe

08014920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b0ba      	sub	sp, #232	; 0xe8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	69db      	ldr	r3, [r3, #28]
 801492e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	689b      	ldr	r3, [r3, #8]
 8014942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801494a:	f640 030f 	movw	r3, #2063	; 0x80f
 801494e:	4013      	ands	r3, r2
 8014950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014958:	2b00      	cmp	r3, #0
 801495a:	d11b      	bne.n	8014994 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014960:	f003 0320 	and.w	r3, r3, #32
 8014964:	2b00      	cmp	r3, #0
 8014966:	d015      	beq.n	8014994 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801496c:	f003 0320 	and.w	r3, r3, #32
 8014970:	2b00      	cmp	r3, #0
 8014972:	d105      	bne.n	8014980 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801497c:	2b00      	cmp	r3, #0
 801497e:	d009      	beq.n	8014994 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014984:	2b00      	cmp	r3, #0
 8014986:	f000 8377 	beq.w	8015078 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	4798      	blx	r3
      }
      return;
 8014992:	e371      	b.n	8015078 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014998:	2b00      	cmp	r3, #0
 801499a:	f000 8123 	beq.w	8014be4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801499e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80149a2:	4b8d      	ldr	r3, [pc, #564]	; (8014bd8 <HAL_UART_IRQHandler+0x2b8>)
 80149a4:	4013      	ands	r3, r2
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d106      	bne.n	80149b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80149aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80149ae:	4b8b      	ldr	r3, [pc, #556]	; (8014bdc <HAL_UART_IRQHandler+0x2bc>)
 80149b0:	4013      	ands	r3, r2
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	f000 8116 	beq.w	8014be4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80149b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80149bc:	f003 0301 	and.w	r3, r3, #1
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d011      	beq.n	80149e8 <HAL_UART_IRQHandler+0xc8>
 80149c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80149c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d00b      	beq.n	80149e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	2201      	movs	r2, #1
 80149d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80149de:	f043 0201 	orr.w	r2, r3, #1
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80149e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80149ec:	f003 0302 	and.w	r3, r3, #2
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d011      	beq.n	8014a18 <HAL_UART_IRQHandler+0xf8>
 80149f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80149f8:	f003 0301 	and.w	r3, r3, #1
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d00b      	beq.n	8014a18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2202      	movs	r2, #2
 8014a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a0e:	f043 0204 	orr.w	r2, r3, #4
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a1c:	f003 0304 	and.w	r3, r3, #4
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d011      	beq.n	8014a48 <HAL_UART_IRQHandler+0x128>
 8014a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a28:	f003 0301 	and.w	r3, r3, #1
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d00b      	beq.n	8014a48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2204      	movs	r2, #4
 8014a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a3e:	f043 0202 	orr.w	r2, r3, #2
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a4c:	f003 0308 	and.w	r3, r3, #8
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d017      	beq.n	8014a84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a58:	f003 0320 	and.w	r3, r3, #32
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d105      	bne.n	8014a6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014a60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014a64:	4b5c      	ldr	r3, [pc, #368]	; (8014bd8 <HAL_UART_IRQHandler+0x2b8>)
 8014a66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d00b      	beq.n	8014a84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	2208      	movs	r2, #8
 8014a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014a7a:	f043 0208 	orr.w	r2, r3, #8
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d012      	beq.n	8014ab6 <HAL_UART_IRQHandler+0x196>
 8014a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00c      	beq.n	8014ab6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014aac:	f043 0220 	orr.w	r2, r3, #32
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	f000 82dd 	beq.w	801507c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ac6:	f003 0320 	and.w	r3, r3, #32
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d013      	beq.n	8014af6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ad2:	f003 0320 	and.w	r3, r3, #32
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d105      	bne.n	8014ae6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d007      	beq.n	8014af6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d003      	beq.n	8014af6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014af2:	6878      	ldr	r0, [r7, #4]
 8014af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	689b      	ldr	r3, [r3, #8]
 8014b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b0a:	2b40      	cmp	r3, #64	; 0x40
 8014b0c:	d005      	beq.n	8014b1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d054      	beq.n	8014bc4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f001 fb1e 	bl	801615c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	689b      	ldr	r3, [r3, #8]
 8014b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b2a:	2b40      	cmp	r3, #64	; 0x40
 8014b2c:	d146      	bne.n	8014bbc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	3308      	adds	r3, #8
 8014b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014b3c:	e853 3f00 	ldrex	r3, [r3]
 8014b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	3308      	adds	r3, #8
 8014b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014b6a:	e841 2300 	strex	r3, r2, [r1]
 8014b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d1d9      	bne.n	8014b2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d017      	beq.n	8014bb4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b8a:	4a15      	ldr	r2, [pc, #84]	; (8014be0 <HAL_UART_IRQHandler+0x2c0>)
 8014b8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7f4 fc13 	bl	80093c0 <HAL_DMA_Abort_IT>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d019      	beq.n	8014bd4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ba8:	687a      	ldr	r2, [r7, #4]
 8014baa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014bae:	4610      	mov	r0, r2
 8014bb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bb2:	e00f      	b.n	8014bd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f000 fa77 	bl	80150a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bba:	e00b      	b.n	8014bd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f000 fa73 	bl	80150a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bc2:	e007      	b.n	8014bd4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f000 fa6f 	bl	80150a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2200      	movs	r2, #0
 8014bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8014bd2:	e253      	b.n	801507c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bd4:	bf00      	nop
    return;
 8014bd6:	e251      	b.n	801507c <HAL_UART_IRQHandler+0x75c>
 8014bd8:	10000001 	.word	0x10000001
 8014bdc:	04000120 	.word	0x04000120
 8014be0:	08016229 	.word	0x08016229

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014be8:	2b01      	cmp	r3, #1
 8014bea:	f040 81e7 	bne.w	8014fbc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bf2:	f003 0310 	and.w	r3, r3, #16
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	f000 81e0 	beq.w	8014fbc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014c00:	f003 0310 	and.w	r3, r3, #16
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	f000 81d9 	beq.w	8014fbc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	2210      	movs	r2, #16
 8014c10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	689b      	ldr	r3, [r3, #8]
 8014c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c1c:	2b40      	cmp	r3, #64	; 0x40
 8014c1e:	f040 8151 	bne.w	8014ec4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	4a96      	ldr	r2, [pc, #600]	; (8014e84 <HAL_UART_IRQHandler+0x564>)
 8014c2c:	4293      	cmp	r3, r2
 8014c2e:	d068      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	4a93      	ldr	r2, [pc, #588]	; (8014e88 <HAL_UART_IRQHandler+0x568>)
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	d061      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	4a91      	ldr	r2, [pc, #580]	; (8014e8c <HAL_UART_IRQHandler+0x56c>)
 8014c48:	4293      	cmp	r3, r2
 8014c4a:	d05a      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	4a8e      	ldr	r2, [pc, #568]	; (8014e90 <HAL_UART_IRQHandler+0x570>)
 8014c56:	4293      	cmp	r3, r2
 8014c58:	d053      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	4a8c      	ldr	r2, [pc, #560]	; (8014e94 <HAL_UART_IRQHandler+0x574>)
 8014c64:	4293      	cmp	r3, r2
 8014c66:	d04c      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	4a89      	ldr	r2, [pc, #548]	; (8014e98 <HAL_UART_IRQHandler+0x578>)
 8014c72:	4293      	cmp	r3, r2
 8014c74:	d045      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	4a87      	ldr	r2, [pc, #540]	; (8014e9c <HAL_UART_IRQHandler+0x57c>)
 8014c80:	4293      	cmp	r3, r2
 8014c82:	d03e      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	4a84      	ldr	r2, [pc, #528]	; (8014ea0 <HAL_UART_IRQHandler+0x580>)
 8014c8e:	4293      	cmp	r3, r2
 8014c90:	d037      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	4a82      	ldr	r2, [pc, #520]	; (8014ea4 <HAL_UART_IRQHandler+0x584>)
 8014c9c:	4293      	cmp	r3, r2
 8014c9e:	d030      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	4a7f      	ldr	r2, [pc, #508]	; (8014ea8 <HAL_UART_IRQHandler+0x588>)
 8014caa:	4293      	cmp	r3, r2
 8014cac:	d029      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	4a7d      	ldr	r2, [pc, #500]	; (8014eac <HAL_UART_IRQHandler+0x58c>)
 8014cb8:	4293      	cmp	r3, r2
 8014cba:	d022      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	4a7a      	ldr	r2, [pc, #488]	; (8014eb0 <HAL_UART_IRQHandler+0x590>)
 8014cc6:	4293      	cmp	r3, r2
 8014cc8:	d01b      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	4a78      	ldr	r2, [pc, #480]	; (8014eb4 <HAL_UART_IRQHandler+0x594>)
 8014cd4:	4293      	cmp	r3, r2
 8014cd6:	d014      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	4a75      	ldr	r2, [pc, #468]	; (8014eb8 <HAL_UART_IRQHandler+0x598>)
 8014ce2:	4293      	cmp	r3, r2
 8014ce4:	d00d      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	4a73      	ldr	r2, [pc, #460]	; (8014ebc <HAL_UART_IRQHandler+0x59c>)
 8014cf0:	4293      	cmp	r3, r2
 8014cf2:	d006      	beq.n	8014d02 <HAL_UART_IRQHandler+0x3e2>
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	4a70      	ldr	r2, [pc, #448]	; (8014ec0 <HAL_UART_IRQHandler+0x5a0>)
 8014cfe:	4293      	cmp	r3, r2
 8014d00:	d106      	bne.n	8014d10 <HAL_UART_IRQHandler+0x3f0>
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	685b      	ldr	r3, [r3, #4]
 8014d0c:	b29b      	uxth	r3, r3
 8014d0e:	e005      	b.n	8014d1c <HAL_UART_IRQHandler+0x3fc>
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f000 81ab 	beq.w	8015080 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014d30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d34:	429a      	cmp	r2, r3
 8014d36:	f080 81a3 	bcs.w	8015080 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d4a:	69db      	ldr	r3, [r3, #28]
 8014d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d50:	f000 8087 	beq.w	8014e62 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014d60:	e853 3f00 	ldrex	r3, [r3]
 8014d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	461a      	mov	r2, r3
 8014d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014d82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014d8e:	e841 2300 	strex	r3, r2, [r1]
 8014d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d1da      	bne.n	8014d54 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	3308      	adds	r3, #8
 8014da4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014da8:	e853 3f00 	ldrex	r3, [r3]
 8014dac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014db0:	f023 0301 	bic.w	r3, r3, #1
 8014db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	3308      	adds	r3, #8
 8014dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014dc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014dce:	e841 2300 	strex	r3, r2, [r1]
 8014dd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d1e1      	bne.n	8014d9e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	3308      	adds	r3, #8
 8014de0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014de4:	e853 3f00 	ldrex	r3, [r3]
 8014de8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	3308      	adds	r3, #8
 8014dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014dfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014e00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014e04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014e06:	e841 2300 	strex	r3, r2, [r1]
 8014e0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d1e3      	bne.n	8014dda <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	2220      	movs	r2, #32
 8014e16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e28:	e853 3f00 	ldrex	r3, [r3]
 8014e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e30:	f023 0310 	bic.w	r3, r3, #16
 8014e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	461a      	mov	r2, r3
 8014e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e42:	65bb      	str	r3, [r7, #88]	; 0x58
 8014e44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e4a:	e841 2300 	strex	r3, r2, [r1]
 8014e4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d1e4      	bne.n	8014e20 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7f3 ff91 	bl	8008d84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	2202      	movs	r2, #2
 8014e66:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014e74:	b29b      	uxth	r3, r3
 8014e76:	1ad3      	subs	r3, r2, r3
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f000 f91d 	bl	80150bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014e82:	e0fd      	b.n	8015080 <HAL_UART_IRQHandler+0x760>
 8014e84:	40020010 	.word	0x40020010
 8014e88:	40020028 	.word	0x40020028
 8014e8c:	40020040 	.word	0x40020040
 8014e90:	40020058 	.word	0x40020058
 8014e94:	40020070 	.word	0x40020070
 8014e98:	40020088 	.word	0x40020088
 8014e9c:	400200a0 	.word	0x400200a0
 8014ea0:	400200b8 	.word	0x400200b8
 8014ea4:	40020410 	.word	0x40020410
 8014ea8:	40020428 	.word	0x40020428
 8014eac:	40020440 	.word	0x40020440
 8014eb0:	40020458 	.word	0x40020458
 8014eb4:	40020470 	.word	0x40020470
 8014eb8:	40020488 	.word	0x40020488
 8014ebc:	400204a0 	.word	0x400204a0
 8014ec0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	1ad3      	subs	r3, r2, r3
 8014ed4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	f000 80cf 	beq.w	8015084 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8014ee6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	f000 80ca 	beq.w	8015084 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ef8:	e853 3f00 	ldrex	r3, [r3]
 8014efc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014f04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014f12:	647b      	str	r3, [r7, #68]	; 0x44
 8014f14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014f18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f1a:	e841 2300 	strex	r3, r2, [r1]
 8014f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d1e4      	bne.n	8014ef0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	3308      	adds	r3, #8
 8014f2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f30:	e853 3f00 	ldrex	r3, [r3]
 8014f34:	623b      	str	r3, [r7, #32]
   return(result);
 8014f36:	6a3a      	ldr	r2, [r7, #32]
 8014f38:	4b55      	ldr	r3, [pc, #340]	; (8015090 <HAL_UART_IRQHandler+0x770>)
 8014f3a:	4013      	ands	r3, r2
 8014f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	3308      	adds	r3, #8
 8014f46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014f4a:	633a      	str	r2, [r7, #48]	; 0x30
 8014f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f52:	e841 2300 	strex	r3, r2, [r1]
 8014f56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d1e3      	bne.n	8014f26 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	2220      	movs	r2, #32
 8014f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	2200      	movs	r2, #0
 8014f70:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	e853 3f00 	ldrex	r3, [r3]
 8014f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	f023 0310 	bic.w	r3, r3, #16
 8014f86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	461a      	mov	r2, r3
 8014f90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f94:	61fb      	str	r3, [r7, #28]
 8014f96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f98:	69b9      	ldr	r1, [r7, #24]
 8014f9a:	69fa      	ldr	r2, [r7, #28]
 8014f9c:	e841 2300 	strex	r3, r2, [r1]
 8014fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8014fa2:	697b      	ldr	r3, [r7, #20]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d1e4      	bne.n	8014f72 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2202      	movs	r2, #2
 8014fac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014fb2:	4619      	mov	r1, r3
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f000 f881 	bl	80150bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014fba:	e063      	b.n	8015084 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d00e      	beq.n	8014fe6 <HAL_UART_IRQHandler+0x6c6>
 8014fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d008      	beq.n	8014fe6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014fdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f001 fe80 	bl	8016ce4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014fe4:	e051      	b.n	801508a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d014      	beq.n	801501c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d105      	bne.n	801500a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015006:	2b00      	cmp	r3, #0
 8015008:	d008      	beq.n	801501c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801500e:	2b00      	cmp	r3, #0
 8015010:	d03a      	beq.n	8015088 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015016:	6878      	ldr	r0, [r7, #4]
 8015018:	4798      	blx	r3
    }
    return;
 801501a:	e035      	b.n	8015088 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801501c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015024:	2b00      	cmp	r3, #0
 8015026:	d009      	beq.n	801503c <HAL_UART_IRQHandler+0x71c>
 8015028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801502c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015030:	2b00      	cmp	r3, #0
 8015032:	d003      	beq.n	801503c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f001 f90d 	bl	8016254 <UART_EndTransmit_IT>
    return;
 801503a:	e026      	b.n	801508a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801503c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015044:	2b00      	cmp	r3, #0
 8015046:	d009      	beq.n	801505c <HAL_UART_IRQHandler+0x73c>
 8015048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801504c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015050:	2b00      	cmp	r3, #0
 8015052:	d003      	beq.n	801505c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f001 fe59 	bl	8016d0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801505a:	e016      	b.n	801508a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015064:	2b00      	cmp	r3, #0
 8015066:	d010      	beq.n	801508a <HAL_UART_IRQHandler+0x76a>
 8015068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801506c:	2b00      	cmp	r3, #0
 801506e:	da0c      	bge.n	801508a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f001 fe41 	bl	8016cf8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015076:	e008      	b.n	801508a <HAL_UART_IRQHandler+0x76a>
      return;
 8015078:	bf00      	nop
 801507a:	e006      	b.n	801508a <HAL_UART_IRQHandler+0x76a>
    return;
 801507c:	bf00      	nop
 801507e:	e004      	b.n	801508a <HAL_UART_IRQHandler+0x76a>
      return;
 8015080:	bf00      	nop
 8015082:	e002      	b.n	801508a <HAL_UART_IRQHandler+0x76a>
      return;
 8015084:	bf00      	nop
 8015086:	e000      	b.n	801508a <HAL_UART_IRQHandler+0x76a>
    return;
 8015088:	bf00      	nop
  }
}
 801508a:	37e8      	adds	r7, #232	; 0xe8
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}
 8015090:	effffffe 	.word	0xeffffffe

08015094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8015094:	b480      	push	{r7}
 8015096:	b083      	sub	sp, #12
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801509c:	bf00      	nop
 801509e:	370c      	adds	r7, #12
 80150a0:	46bd      	mov	sp, r7
 80150a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a6:	4770      	bx	lr

080150a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80150a8:	b480      	push	{r7}
 80150aa:	b083      	sub	sp, #12
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80150b0:	bf00      	nop
 80150b2:	370c      	adds	r7, #12
 80150b4:	46bd      	mov	sp, r7
 80150b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ba:	4770      	bx	lr

080150bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80150bc:	b480      	push	{r7}
 80150be:	b083      	sub	sp, #12
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	460b      	mov	r3, r1
 80150c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80150c8:	bf00      	nop
 80150ca:	370c      	adds	r7, #12
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr

080150d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80150d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80150d8:	b092      	sub	sp, #72	; 0x48
 80150da:	af00      	add	r7, sp, #0
 80150dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80150de:	2300      	movs	r3, #0
 80150e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	689a      	ldr	r2, [r3, #8]
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	691b      	ldr	r3, [r3, #16]
 80150ec:	431a      	orrs	r2, r3
 80150ee:	697b      	ldr	r3, [r7, #20]
 80150f0:	695b      	ldr	r3, [r3, #20]
 80150f2:	431a      	orrs	r2, r3
 80150f4:	697b      	ldr	r3, [r7, #20]
 80150f6:	69db      	ldr	r3, [r3, #28]
 80150f8:	4313      	orrs	r3, r2
 80150fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80150fc:	697b      	ldr	r3, [r7, #20]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	681a      	ldr	r2, [r3, #0]
 8015102:	4bbe      	ldr	r3, [pc, #760]	; (80153fc <UART_SetConfig+0x328>)
 8015104:	4013      	ands	r3, r2
 8015106:	697a      	ldr	r2, [r7, #20]
 8015108:	6812      	ldr	r2, [r2, #0]
 801510a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801510c:	430b      	orrs	r3, r1
 801510e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	68da      	ldr	r2, [r3, #12]
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	430a      	orrs	r2, r1
 8015124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	699b      	ldr	r3, [r3, #24]
 801512a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801512c:	697b      	ldr	r3, [r7, #20]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	4ab3      	ldr	r2, [pc, #716]	; (8015400 <UART_SetConfig+0x32c>)
 8015132:	4293      	cmp	r3, r2
 8015134:	d004      	beq.n	8015140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	6a1b      	ldr	r3, [r3, #32]
 801513a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801513c:	4313      	orrs	r3, r2
 801513e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	689a      	ldr	r2, [r3, #8]
 8015146:	4baf      	ldr	r3, [pc, #700]	; (8015404 <UART_SetConfig+0x330>)
 8015148:	4013      	ands	r3, r2
 801514a:	697a      	ldr	r2, [r7, #20]
 801514c:	6812      	ldr	r2, [r2, #0]
 801514e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015150:	430b      	orrs	r3, r1
 8015152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801515a:	f023 010f 	bic.w	r1, r3, #15
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	430a      	orrs	r2, r1
 8015168:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801516a:	697b      	ldr	r3, [r7, #20]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	4aa6      	ldr	r2, [pc, #664]	; (8015408 <UART_SetConfig+0x334>)
 8015170:	4293      	cmp	r3, r2
 8015172:	d177      	bne.n	8015264 <UART_SetConfig+0x190>
 8015174:	4ba5      	ldr	r3, [pc, #660]	; (801540c <UART_SetConfig+0x338>)
 8015176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801517c:	2b28      	cmp	r3, #40	; 0x28
 801517e:	d86d      	bhi.n	801525c <UART_SetConfig+0x188>
 8015180:	a201      	add	r2, pc, #4	; (adr r2, 8015188 <UART_SetConfig+0xb4>)
 8015182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015186:	bf00      	nop
 8015188:	0801522d 	.word	0x0801522d
 801518c:	0801525d 	.word	0x0801525d
 8015190:	0801525d 	.word	0x0801525d
 8015194:	0801525d 	.word	0x0801525d
 8015198:	0801525d 	.word	0x0801525d
 801519c:	0801525d 	.word	0x0801525d
 80151a0:	0801525d 	.word	0x0801525d
 80151a4:	0801525d 	.word	0x0801525d
 80151a8:	08015235 	.word	0x08015235
 80151ac:	0801525d 	.word	0x0801525d
 80151b0:	0801525d 	.word	0x0801525d
 80151b4:	0801525d 	.word	0x0801525d
 80151b8:	0801525d 	.word	0x0801525d
 80151bc:	0801525d 	.word	0x0801525d
 80151c0:	0801525d 	.word	0x0801525d
 80151c4:	0801525d 	.word	0x0801525d
 80151c8:	0801523d 	.word	0x0801523d
 80151cc:	0801525d 	.word	0x0801525d
 80151d0:	0801525d 	.word	0x0801525d
 80151d4:	0801525d 	.word	0x0801525d
 80151d8:	0801525d 	.word	0x0801525d
 80151dc:	0801525d 	.word	0x0801525d
 80151e0:	0801525d 	.word	0x0801525d
 80151e4:	0801525d 	.word	0x0801525d
 80151e8:	08015245 	.word	0x08015245
 80151ec:	0801525d 	.word	0x0801525d
 80151f0:	0801525d 	.word	0x0801525d
 80151f4:	0801525d 	.word	0x0801525d
 80151f8:	0801525d 	.word	0x0801525d
 80151fc:	0801525d 	.word	0x0801525d
 8015200:	0801525d 	.word	0x0801525d
 8015204:	0801525d 	.word	0x0801525d
 8015208:	0801524d 	.word	0x0801524d
 801520c:	0801525d 	.word	0x0801525d
 8015210:	0801525d 	.word	0x0801525d
 8015214:	0801525d 	.word	0x0801525d
 8015218:	0801525d 	.word	0x0801525d
 801521c:	0801525d 	.word	0x0801525d
 8015220:	0801525d 	.word	0x0801525d
 8015224:	0801525d 	.word	0x0801525d
 8015228:	08015255 	.word	0x08015255
 801522c:	2301      	movs	r3, #1
 801522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015232:	e222      	b.n	801567a <UART_SetConfig+0x5a6>
 8015234:	2304      	movs	r3, #4
 8015236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801523a:	e21e      	b.n	801567a <UART_SetConfig+0x5a6>
 801523c:	2308      	movs	r3, #8
 801523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015242:	e21a      	b.n	801567a <UART_SetConfig+0x5a6>
 8015244:	2310      	movs	r3, #16
 8015246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801524a:	e216      	b.n	801567a <UART_SetConfig+0x5a6>
 801524c:	2320      	movs	r3, #32
 801524e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015252:	e212      	b.n	801567a <UART_SetConfig+0x5a6>
 8015254:	2340      	movs	r3, #64	; 0x40
 8015256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801525a:	e20e      	b.n	801567a <UART_SetConfig+0x5a6>
 801525c:	2380      	movs	r3, #128	; 0x80
 801525e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015262:	e20a      	b.n	801567a <UART_SetConfig+0x5a6>
 8015264:	697b      	ldr	r3, [r7, #20]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	4a69      	ldr	r2, [pc, #420]	; (8015410 <UART_SetConfig+0x33c>)
 801526a:	4293      	cmp	r3, r2
 801526c:	d130      	bne.n	80152d0 <UART_SetConfig+0x1fc>
 801526e:	4b67      	ldr	r3, [pc, #412]	; (801540c <UART_SetConfig+0x338>)
 8015270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015272:	f003 0307 	and.w	r3, r3, #7
 8015276:	2b05      	cmp	r3, #5
 8015278:	d826      	bhi.n	80152c8 <UART_SetConfig+0x1f4>
 801527a:	a201      	add	r2, pc, #4	; (adr r2, 8015280 <UART_SetConfig+0x1ac>)
 801527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015280:	08015299 	.word	0x08015299
 8015284:	080152a1 	.word	0x080152a1
 8015288:	080152a9 	.word	0x080152a9
 801528c:	080152b1 	.word	0x080152b1
 8015290:	080152b9 	.word	0x080152b9
 8015294:	080152c1 	.word	0x080152c1
 8015298:	2300      	movs	r3, #0
 801529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801529e:	e1ec      	b.n	801567a <UART_SetConfig+0x5a6>
 80152a0:	2304      	movs	r3, #4
 80152a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152a6:	e1e8      	b.n	801567a <UART_SetConfig+0x5a6>
 80152a8:	2308      	movs	r3, #8
 80152aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ae:	e1e4      	b.n	801567a <UART_SetConfig+0x5a6>
 80152b0:	2310      	movs	r3, #16
 80152b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152b6:	e1e0      	b.n	801567a <UART_SetConfig+0x5a6>
 80152b8:	2320      	movs	r3, #32
 80152ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152be:	e1dc      	b.n	801567a <UART_SetConfig+0x5a6>
 80152c0:	2340      	movs	r3, #64	; 0x40
 80152c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152c6:	e1d8      	b.n	801567a <UART_SetConfig+0x5a6>
 80152c8:	2380      	movs	r3, #128	; 0x80
 80152ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ce:	e1d4      	b.n	801567a <UART_SetConfig+0x5a6>
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	4a4f      	ldr	r2, [pc, #316]	; (8015414 <UART_SetConfig+0x340>)
 80152d6:	4293      	cmp	r3, r2
 80152d8:	d130      	bne.n	801533c <UART_SetConfig+0x268>
 80152da:	4b4c      	ldr	r3, [pc, #304]	; (801540c <UART_SetConfig+0x338>)
 80152dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152de:	f003 0307 	and.w	r3, r3, #7
 80152e2:	2b05      	cmp	r3, #5
 80152e4:	d826      	bhi.n	8015334 <UART_SetConfig+0x260>
 80152e6:	a201      	add	r2, pc, #4	; (adr r2, 80152ec <UART_SetConfig+0x218>)
 80152e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152ec:	08015305 	.word	0x08015305
 80152f0:	0801530d 	.word	0x0801530d
 80152f4:	08015315 	.word	0x08015315
 80152f8:	0801531d 	.word	0x0801531d
 80152fc:	08015325 	.word	0x08015325
 8015300:	0801532d 	.word	0x0801532d
 8015304:	2300      	movs	r3, #0
 8015306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801530a:	e1b6      	b.n	801567a <UART_SetConfig+0x5a6>
 801530c:	2304      	movs	r3, #4
 801530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015312:	e1b2      	b.n	801567a <UART_SetConfig+0x5a6>
 8015314:	2308      	movs	r3, #8
 8015316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801531a:	e1ae      	b.n	801567a <UART_SetConfig+0x5a6>
 801531c:	2310      	movs	r3, #16
 801531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015322:	e1aa      	b.n	801567a <UART_SetConfig+0x5a6>
 8015324:	2320      	movs	r3, #32
 8015326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801532a:	e1a6      	b.n	801567a <UART_SetConfig+0x5a6>
 801532c:	2340      	movs	r3, #64	; 0x40
 801532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015332:	e1a2      	b.n	801567a <UART_SetConfig+0x5a6>
 8015334:	2380      	movs	r3, #128	; 0x80
 8015336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801533a:	e19e      	b.n	801567a <UART_SetConfig+0x5a6>
 801533c:	697b      	ldr	r3, [r7, #20]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	4a35      	ldr	r2, [pc, #212]	; (8015418 <UART_SetConfig+0x344>)
 8015342:	4293      	cmp	r3, r2
 8015344:	d130      	bne.n	80153a8 <UART_SetConfig+0x2d4>
 8015346:	4b31      	ldr	r3, [pc, #196]	; (801540c <UART_SetConfig+0x338>)
 8015348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801534a:	f003 0307 	and.w	r3, r3, #7
 801534e:	2b05      	cmp	r3, #5
 8015350:	d826      	bhi.n	80153a0 <UART_SetConfig+0x2cc>
 8015352:	a201      	add	r2, pc, #4	; (adr r2, 8015358 <UART_SetConfig+0x284>)
 8015354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015358:	08015371 	.word	0x08015371
 801535c:	08015379 	.word	0x08015379
 8015360:	08015381 	.word	0x08015381
 8015364:	08015389 	.word	0x08015389
 8015368:	08015391 	.word	0x08015391
 801536c:	08015399 	.word	0x08015399
 8015370:	2300      	movs	r3, #0
 8015372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015376:	e180      	b.n	801567a <UART_SetConfig+0x5a6>
 8015378:	2304      	movs	r3, #4
 801537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801537e:	e17c      	b.n	801567a <UART_SetConfig+0x5a6>
 8015380:	2308      	movs	r3, #8
 8015382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015386:	e178      	b.n	801567a <UART_SetConfig+0x5a6>
 8015388:	2310      	movs	r3, #16
 801538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801538e:	e174      	b.n	801567a <UART_SetConfig+0x5a6>
 8015390:	2320      	movs	r3, #32
 8015392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015396:	e170      	b.n	801567a <UART_SetConfig+0x5a6>
 8015398:	2340      	movs	r3, #64	; 0x40
 801539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801539e:	e16c      	b.n	801567a <UART_SetConfig+0x5a6>
 80153a0:	2380      	movs	r3, #128	; 0x80
 80153a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153a6:	e168      	b.n	801567a <UART_SetConfig+0x5a6>
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	4a1b      	ldr	r2, [pc, #108]	; (801541c <UART_SetConfig+0x348>)
 80153ae:	4293      	cmp	r3, r2
 80153b0:	d142      	bne.n	8015438 <UART_SetConfig+0x364>
 80153b2:	4b16      	ldr	r3, [pc, #88]	; (801540c <UART_SetConfig+0x338>)
 80153b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153b6:	f003 0307 	and.w	r3, r3, #7
 80153ba:	2b05      	cmp	r3, #5
 80153bc:	d838      	bhi.n	8015430 <UART_SetConfig+0x35c>
 80153be:	a201      	add	r2, pc, #4	; (adr r2, 80153c4 <UART_SetConfig+0x2f0>)
 80153c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153c4:	080153dd 	.word	0x080153dd
 80153c8:	080153e5 	.word	0x080153e5
 80153cc:	080153ed 	.word	0x080153ed
 80153d0:	080153f5 	.word	0x080153f5
 80153d4:	08015421 	.word	0x08015421
 80153d8:	08015429 	.word	0x08015429
 80153dc:	2300      	movs	r3, #0
 80153de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153e2:	e14a      	b.n	801567a <UART_SetConfig+0x5a6>
 80153e4:	2304      	movs	r3, #4
 80153e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ea:	e146      	b.n	801567a <UART_SetConfig+0x5a6>
 80153ec:	2308      	movs	r3, #8
 80153ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153f2:	e142      	b.n	801567a <UART_SetConfig+0x5a6>
 80153f4:	2310      	movs	r3, #16
 80153f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153fa:	e13e      	b.n	801567a <UART_SetConfig+0x5a6>
 80153fc:	cfff69f3 	.word	0xcfff69f3
 8015400:	58000c00 	.word	0x58000c00
 8015404:	11fff4ff 	.word	0x11fff4ff
 8015408:	40011000 	.word	0x40011000
 801540c:	58024400 	.word	0x58024400
 8015410:	40004400 	.word	0x40004400
 8015414:	40004800 	.word	0x40004800
 8015418:	40004c00 	.word	0x40004c00
 801541c:	40005000 	.word	0x40005000
 8015420:	2320      	movs	r3, #32
 8015422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015426:	e128      	b.n	801567a <UART_SetConfig+0x5a6>
 8015428:	2340      	movs	r3, #64	; 0x40
 801542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801542e:	e124      	b.n	801567a <UART_SetConfig+0x5a6>
 8015430:	2380      	movs	r3, #128	; 0x80
 8015432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015436:	e120      	b.n	801567a <UART_SetConfig+0x5a6>
 8015438:	697b      	ldr	r3, [r7, #20]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	4acb      	ldr	r2, [pc, #812]	; (801576c <UART_SetConfig+0x698>)
 801543e:	4293      	cmp	r3, r2
 8015440:	d176      	bne.n	8015530 <UART_SetConfig+0x45c>
 8015442:	4bcb      	ldr	r3, [pc, #812]	; (8015770 <UART_SetConfig+0x69c>)
 8015444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801544a:	2b28      	cmp	r3, #40	; 0x28
 801544c:	d86c      	bhi.n	8015528 <UART_SetConfig+0x454>
 801544e:	a201      	add	r2, pc, #4	; (adr r2, 8015454 <UART_SetConfig+0x380>)
 8015450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015454:	080154f9 	.word	0x080154f9
 8015458:	08015529 	.word	0x08015529
 801545c:	08015529 	.word	0x08015529
 8015460:	08015529 	.word	0x08015529
 8015464:	08015529 	.word	0x08015529
 8015468:	08015529 	.word	0x08015529
 801546c:	08015529 	.word	0x08015529
 8015470:	08015529 	.word	0x08015529
 8015474:	08015501 	.word	0x08015501
 8015478:	08015529 	.word	0x08015529
 801547c:	08015529 	.word	0x08015529
 8015480:	08015529 	.word	0x08015529
 8015484:	08015529 	.word	0x08015529
 8015488:	08015529 	.word	0x08015529
 801548c:	08015529 	.word	0x08015529
 8015490:	08015529 	.word	0x08015529
 8015494:	08015509 	.word	0x08015509
 8015498:	08015529 	.word	0x08015529
 801549c:	08015529 	.word	0x08015529
 80154a0:	08015529 	.word	0x08015529
 80154a4:	08015529 	.word	0x08015529
 80154a8:	08015529 	.word	0x08015529
 80154ac:	08015529 	.word	0x08015529
 80154b0:	08015529 	.word	0x08015529
 80154b4:	08015511 	.word	0x08015511
 80154b8:	08015529 	.word	0x08015529
 80154bc:	08015529 	.word	0x08015529
 80154c0:	08015529 	.word	0x08015529
 80154c4:	08015529 	.word	0x08015529
 80154c8:	08015529 	.word	0x08015529
 80154cc:	08015529 	.word	0x08015529
 80154d0:	08015529 	.word	0x08015529
 80154d4:	08015519 	.word	0x08015519
 80154d8:	08015529 	.word	0x08015529
 80154dc:	08015529 	.word	0x08015529
 80154e0:	08015529 	.word	0x08015529
 80154e4:	08015529 	.word	0x08015529
 80154e8:	08015529 	.word	0x08015529
 80154ec:	08015529 	.word	0x08015529
 80154f0:	08015529 	.word	0x08015529
 80154f4:	08015521 	.word	0x08015521
 80154f8:	2301      	movs	r3, #1
 80154fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154fe:	e0bc      	b.n	801567a <UART_SetConfig+0x5a6>
 8015500:	2304      	movs	r3, #4
 8015502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015506:	e0b8      	b.n	801567a <UART_SetConfig+0x5a6>
 8015508:	2308      	movs	r3, #8
 801550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801550e:	e0b4      	b.n	801567a <UART_SetConfig+0x5a6>
 8015510:	2310      	movs	r3, #16
 8015512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015516:	e0b0      	b.n	801567a <UART_SetConfig+0x5a6>
 8015518:	2320      	movs	r3, #32
 801551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801551e:	e0ac      	b.n	801567a <UART_SetConfig+0x5a6>
 8015520:	2340      	movs	r3, #64	; 0x40
 8015522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015526:	e0a8      	b.n	801567a <UART_SetConfig+0x5a6>
 8015528:	2380      	movs	r3, #128	; 0x80
 801552a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801552e:	e0a4      	b.n	801567a <UART_SetConfig+0x5a6>
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	4a8f      	ldr	r2, [pc, #572]	; (8015774 <UART_SetConfig+0x6a0>)
 8015536:	4293      	cmp	r3, r2
 8015538:	d130      	bne.n	801559c <UART_SetConfig+0x4c8>
 801553a:	4b8d      	ldr	r3, [pc, #564]	; (8015770 <UART_SetConfig+0x69c>)
 801553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801553e:	f003 0307 	and.w	r3, r3, #7
 8015542:	2b05      	cmp	r3, #5
 8015544:	d826      	bhi.n	8015594 <UART_SetConfig+0x4c0>
 8015546:	a201      	add	r2, pc, #4	; (adr r2, 801554c <UART_SetConfig+0x478>)
 8015548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801554c:	08015565 	.word	0x08015565
 8015550:	0801556d 	.word	0x0801556d
 8015554:	08015575 	.word	0x08015575
 8015558:	0801557d 	.word	0x0801557d
 801555c:	08015585 	.word	0x08015585
 8015560:	0801558d 	.word	0x0801558d
 8015564:	2300      	movs	r3, #0
 8015566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801556a:	e086      	b.n	801567a <UART_SetConfig+0x5a6>
 801556c:	2304      	movs	r3, #4
 801556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015572:	e082      	b.n	801567a <UART_SetConfig+0x5a6>
 8015574:	2308      	movs	r3, #8
 8015576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801557a:	e07e      	b.n	801567a <UART_SetConfig+0x5a6>
 801557c:	2310      	movs	r3, #16
 801557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015582:	e07a      	b.n	801567a <UART_SetConfig+0x5a6>
 8015584:	2320      	movs	r3, #32
 8015586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801558a:	e076      	b.n	801567a <UART_SetConfig+0x5a6>
 801558c:	2340      	movs	r3, #64	; 0x40
 801558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015592:	e072      	b.n	801567a <UART_SetConfig+0x5a6>
 8015594:	2380      	movs	r3, #128	; 0x80
 8015596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801559a:	e06e      	b.n	801567a <UART_SetConfig+0x5a6>
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	4a75      	ldr	r2, [pc, #468]	; (8015778 <UART_SetConfig+0x6a4>)
 80155a2:	4293      	cmp	r3, r2
 80155a4:	d130      	bne.n	8015608 <UART_SetConfig+0x534>
 80155a6:	4b72      	ldr	r3, [pc, #456]	; (8015770 <UART_SetConfig+0x69c>)
 80155a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155aa:	f003 0307 	and.w	r3, r3, #7
 80155ae:	2b05      	cmp	r3, #5
 80155b0:	d826      	bhi.n	8015600 <UART_SetConfig+0x52c>
 80155b2:	a201      	add	r2, pc, #4	; (adr r2, 80155b8 <UART_SetConfig+0x4e4>)
 80155b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155b8:	080155d1 	.word	0x080155d1
 80155bc:	080155d9 	.word	0x080155d9
 80155c0:	080155e1 	.word	0x080155e1
 80155c4:	080155e9 	.word	0x080155e9
 80155c8:	080155f1 	.word	0x080155f1
 80155cc:	080155f9 	.word	0x080155f9
 80155d0:	2300      	movs	r3, #0
 80155d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155d6:	e050      	b.n	801567a <UART_SetConfig+0x5a6>
 80155d8:	2304      	movs	r3, #4
 80155da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155de:	e04c      	b.n	801567a <UART_SetConfig+0x5a6>
 80155e0:	2308      	movs	r3, #8
 80155e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155e6:	e048      	b.n	801567a <UART_SetConfig+0x5a6>
 80155e8:	2310      	movs	r3, #16
 80155ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155ee:	e044      	b.n	801567a <UART_SetConfig+0x5a6>
 80155f0:	2320      	movs	r3, #32
 80155f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155f6:	e040      	b.n	801567a <UART_SetConfig+0x5a6>
 80155f8:	2340      	movs	r3, #64	; 0x40
 80155fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155fe:	e03c      	b.n	801567a <UART_SetConfig+0x5a6>
 8015600:	2380      	movs	r3, #128	; 0x80
 8015602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015606:	e038      	b.n	801567a <UART_SetConfig+0x5a6>
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	4a5b      	ldr	r2, [pc, #364]	; (801577c <UART_SetConfig+0x6a8>)
 801560e:	4293      	cmp	r3, r2
 8015610:	d130      	bne.n	8015674 <UART_SetConfig+0x5a0>
 8015612:	4b57      	ldr	r3, [pc, #348]	; (8015770 <UART_SetConfig+0x69c>)
 8015614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015616:	f003 0307 	and.w	r3, r3, #7
 801561a:	2b05      	cmp	r3, #5
 801561c:	d826      	bhi.n	801566c <UART_SetConfig+0x598>
 801561e:	a201      	add	r2, pc, #4	; (adr r2, 8015624 <UART_SetConfig+0x550>)
 8015620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015624:	0801563d 	.word	0x0801563d
 8015628:	08015645 	.word	0x08015645
 801562c:	0801564d 	.word	0x0801564d
 8015630:	08015655 	.word	0x08015655
 8015634:	0801565d 	.word	0x0801565d
 8015638:	08015665 	.word	0x08015665
 801563c:	2302      	movs	r3, #2
 801563e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015642:	e01a      	b.n	801567a <UART_SetConfig+0x5a6>
 8015644:	2304      	movs	r3, #4
 8015646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801564a:	e016      	b.n	801567a <UART_SetConfig+0x5a6>
 801564c:	2308      	movs	r3, #8
 801564e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015652:	e012      	b.n	801567a <UART_SetConfig+0x5a6>
 8015654:	2310      	movs	r3, #16
 8015656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801565a:	e00e      	b.n	801567a <UART_SetConfig+0x5a6>
 801565c:	2320      	movs	r3, #32
 801565e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015662:	e00a      	b.n	801567a <UART_SetConfig+0x5a6>
 8015664:	2340      	movs	r3, #64	; 0x40
 8015666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801566a:	e006      	b.n	801567a <UART_SetConfig+0x5a6>
 801566c:	2380      	movs	r3, #128	; 0x80
 801566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015672:	e002      	b.n	801567a <UART_SetConfig+0x5a6>
 8015674:	2380      	movs	r3, #128	; 0x80
 8015676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	4a3f      	ldr	r2, [pc, #252]	; (801577c <UART_SetConfig+0x6a8>)
 8015680:	4293      	cmp	r3, r2
 8015682:	f040 80f8 	bne.w	8015876 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015686:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801568a:	2b20      	cmp	r3, #32
 801568c:	dc46      	bgt.n	801571c <UART_SetConfig+0x648>
 801568e:	2b02      	cmp	r3, #2
 8015690:	f2c0 8082 	blt.w	8015798 <UART_SetConfig+0x6c4>
 8015694:	3b02      	subs	r3, #2
 8015696:	2b1e      	cmp	r3, #30
 8015698:	d87e      	bhi.n	8015798 <UART_SetConfig+0x6c4>
 801569a:	a201      	add	r2, pc, #4	; (adr r2, 80156a0 <UART_SetConfig+0x5cc>)
 801569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156a0:	08015723 	.word	0x08015723
 80156a4:	08015799 	.word	0x08015799
 80156a8:	0801572b 	.word	0x0801572b
 80156ac:	08015799 	.word	0x08015799
 80156b0:	08015799 	.word	0x08015799
 80156b4:	08015799 	.word	0x08015799
 80156b8:	0801573b 	.word	0x0801573b
 80156bc:	08015799 	.word	0x08015799
 80156c0:	08015799 	.word	0x08015799
 80156c4:	08015799 	.word	0x08015799
 80156c8:	08015799 	.word	0x08015799
 80156cc:	08015799 	.word	0x08015799
 80156d0:	08015799 	.word	0x08015799
 80156d4:	08015799 	.word	0x08015799
 80156d8:	0801574b 	.word	0x0801574b
 80156dc:	08015799 	.word	0x08015799
 80156e0:	08015799 	.word	0x08015799
 80156e4:	08015799 	.word	0x08015799
 80156e8:	08015799 	.word	0x08015799
 80156ec:	08015799 	.word	0x08015799
 80156f0:	08015799 	.word	0x08015799
 80156f4:	08015799 	.word	0x08015799
 80156f8:	08015799 	.word	0x08015799
 80156fc:	08015799 	.word	0x08015799
 8015700:	08015799 	.word	0x08015799
 8015704:	08015799 	.word	0x08015799
 8015708:	08015799 	.word	0x08015799
 801570c:	08015799 	.word	0x08015799
 8015710:	08015799 	.word	0x08015799
 8015714:	08015799 	.word	0x08015799
 8015718:	0801578b 	.word	0x0801578b
 801571c:	2b40      	cmp	r3, #64	; 0x40
 801571e:	d037      	beq.n	8015790 <UART_SetConfig+0x6bc>
 8015720:	e03a      	b.n	8015798 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8015722:	f7fb fc17 	bl	8010f54 <HAL_RCCEx_GetD3PCLK1Freq>
 8015726:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015728:	e03c      	b.n	80157a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801572a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801572e:	4618      	mov	r0, r3
 8015730:	f7fb fc26 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015738:	e034      	b.n	80157a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801573a:	f107 0318 	add.w	r3, r7, #24
 801573e:	4618      	mov	r0, r3
 8015740:	f7fb fd72 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015744:	69fb      	ldr	r3, [r7, #28]
 8015746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015748:	e02c      	b.n	80157a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801574a:	4b09      	ldr	r3, [pc, #36]	; (8015770 <UART_SetConfig+0x69c>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	f003 0320 	and.w	r3, r3, #32
 8015752:	2b00      	cmp	r3, #0
 8015754:	d016      	beq.n	8015784 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015756:	4b06      	ldr	r3, [pc, #24]	; (8015770 <UART_SetConfig+0x69c>)
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	08db      	lsrs	r3, r3, #3
 801575c:	f003 0303 	and.w	r3, r3, #3
 8015760:	4a07      	ldr	r2, [pc, #28]	; (8015780 <UART_SetConfig+0x6ac>)
 8015762:	fa22 f303 	lsr.w	r3, r2, r3
 8015766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015768:	e01c      	b.n	80157a4 <UART_SetConfig+0x6d0>
 801576a:	bf00      	nop
 801576c:	40011400 	.word	0x40011400
 8015770:	58024400 	.word	0x58024400
 8015774:	40007800 	.word	0x40007800
 8015778:	40007c00 	.word	0x40007c00
 801577c:	58000c00 	.word	0x58000c00
 8015780:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015784:	4b9d      	ldr	r3, [pc, #628]	; (80159fc <UART_SetConfig+0x928>)
 8015786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015788:	e00c      	b.n	80157a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801578a:	4b9d      	ldr	r3, [pc, #628]	; (8015a00 <UART_SetConfig+0x92c>)
 801578c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801578e:	e009      	b.n	80157a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015796:	e005      	b.n	80157a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015798:	2300      	movs	r3, #0
 801579a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801579c:	2301      	movs	r3, #1
 801579e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80157a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80157a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	f000 81de 	beq.w	8015b68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157b0:	4a94      	ldr	r2, [pc, #592]	; (8015a04 <UART_SetConfig+0x930>)
 80157b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80157b6:	461a      	mov	r2, r3
 80157b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80157be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	685a      	ldr	r2, [r3, #4]
 80157c4:	4613      	mov	r3, r2
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	4413      	add	r3, r2
 80157ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d305      	bcc.n	80157dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	685b      	ldr	r3, [r3, #4]
 80157d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80157d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157d8:	429a      	cmp	r2, r3
 80157da:	d903      	bls.n	80157e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80157dc:	2301      	movs	r3, #1
 80157de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80157e2:	e1c1      	b.n	8015b68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80157e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157e6:	2200      	movs	r2, #0
 80157e8:	60bb      	str	r3, [r7, #8]
 80157ea:	60fa      	str	r2, [r7, #12]
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157f0:	4a84      	ldr	r2, [pc, #528]	; (8015a04 <UART_SetConfig+0x930>)
 80157f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80157f6:	b29b      	uxth	r3, r3
 80157f8:	2200      	movs	r2, #0
 80157fa:	603b      	str	r3, [r7, #0]
 80157fc:	607a      	str	r2, [r7, #4]
 80157fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015802:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015806:	f7ea fd6b 	bl	80002e0 <__aeabi_uldivmod>
 801580a:	4602      	mov	r2, r0
 801580c:	460b      	mov	r3, r1
 801580e:	4610      	mov	r0, r2
 8015810:	4619      	mov	r1, r3
 8015812:	f04f 0200 	mov.w	r2, #0
 8015816:	f04f 0300 	mov.w	r3, #0
 801581a:	020b      	lsls	r3, r1, #8
 801581c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015820:	0202      	lsls	r2, r0, #8
 8015822:	6979      	ldr	r1, [r7, #20]
 8015824:	6849      	ldr	r1, [r1, #4]
 8015826:	0849      	lsrs	r1, r1, #1
 8015828:	2000      	movs	r0, #0
 801582a:	460c      	mov	r4, r1
 801582c:	4605      	mov	r5, r0
 801582e:	eb12 0804 	adds.w	r8, r2, r4
 8015832:	eb43 0905 	adc.w	r9, r3, r5
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	2200      	movs	r2, #0
 801583c:	469a      	mov	sl, r3
 801583e:	4693      	mov	fp, r2
 8015840:	4652      	mov	r2, sl
 8015842:	465b      	mov	r3, fp
 8015844:	4640      	mov	r0, r8
 8015846:	4649      	mov	r1, r9
 8015848:	f7ea fd4a 	bl	80002e0 <__aeabi_uldivmod>
 801584c:	4602      	mov	r2, r0
 801584e:	460b      	mov	r3, r1
 8015850:	4613      	mov	r3, r2
 8015852:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801585a:	d308      	bcc.n	801586e <UART_SetConfig+0x79a>
 801585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801585e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015862:	d204      	bcs.n	801586e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801586a:	60da      	str	r2, [r3, #12]
 801586c:	e17c      	b.n	8015b68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801586e:	2301      	movs	r3, #1
 8015870:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015874:	e178      	b.n	8015b68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015876:	697b      	ldr	r3, [r7, #20]
 8015878:	69db      	ldr	r3, [r3, #28]
 801587a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801587e:	f040 80c5 	bne.w	8015a0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8015882:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015886:	2b20      	cmp	r3, #32
 8015888:	dc48      	bgt.n	801591c <UART_SetConfig+0x848>
 801588a:	2b00      	cmp	r3, #0
 801588c:	db7b      	blt.n	8015986 <UART_SetConfig+0x8b2>
 801588e:	2b20      	cmp	r3, #32
 8015890:	d879      	bhi.n	8015986 <UART_SetConfig+0x8b2>
 8015892:	a201      	add	r2, pc, #4	; (adr r2, 8015898 <UART_SetConfig+0x7c4>)
 8015894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015898:	08015923 	.word	0x08015923
 801589c:	0801592b 	.word	0x0801592b
 80158a0:	08015987 	.word	0x08015987
 80158a4:	08015987 	.word	0x08015987
 80158a8:	08015933 	.word	0x08015933
 80158ac:	08015987 	.word	0x08015987
 80158b0:	08015987 	.word	0x08015987
 80158b4:	08015987 	.word	0x08015987
 80158b8:	08015943 	.word	0x08015943
 80158bc:	08015987 	.word	0x08015987
 80158c0:	08015987 	.word	0x08015987
 80158c4:	08015987 	.word	0x08015987
 80158c8:	08015987 	.word	0x08015987
 80158cc:	08015987 	.word	0x08015987
 80158d0:	08015987 	.word	0x08015987
 80158d4:	08015987 	.word	0x08015987
 80158d8:	08015953 	.word	0x08015953
 80158dc:	08015987 	.word	0x08015987
 80158e0:	08015987 	.word	0x08015987
 80158e4:	08015987 	.word	0x08015987
 80158e8:	08015987 	.word	0x08015987
 80158ec:	08015987 	.word	0x08015987
 80158f0:	08015987 	.word	0x08015987
 80158f4:	08015987 	.word	0x08015987
 80158f8:	08015987 	.word	0x08015987
 80158fc:	08015987 	.word	0x08015987
 8015900:	08015987 	.word	0x08015987
 8015904:	08015987 	.word	0x08015987
 8015908:	08015987 	.word	0x08015987
 801590c:	08015987 	.word	0x08015987
 8015910:	08015987 	.word	0x08015987
 8015914:	08015987 	.word	0x08015987
 8015918:	08015979 	.word	0x08015979
 801591c:	2b40      	cmp	r3, #64	; 0x40
 801591e:	d02e      	beq.n	801597e <UART_SetConfig+0x8aa>
 8015920:	e031      	b.n	8015986 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015922:	f7f9 fb1f 	bl	800ef64 <HAL_RCC_GetPCLK1Freq>
 8015926:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015928:	e033      	b.n	8015992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801592a:	f7f9 fb31 	bl	800ef90 <HAL_RCC_GetPCLK2Freq>
 801592e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015930:	e02f      	b.n	8015992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015936:	4618      	mov	r0, r3
 8015938:	f7fb fb22 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801593e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015940:	e027      	b.n	8015992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015942:	f107 0318 	add.w	r3, r7, #24
 8015946:	4618      	mov	r0, r3
 8015948:	f7fb fc6e 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801594c:	69fb      	ldr	r3, [r7, #28]
 801594e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015950:	e01f      	b.n	8015992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015952:	4b2d      	ldr	r3, [pc, #180]	; (8015a08 <UART_SetConfig+0x934>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	f003 0320 	and.w	r3, r3, #32
 801595a:	2b00      	cmp	r3, #0
 801595c:	d009      	beq.n	8015972 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801595e:	4b2a      	ldr	r3, [pc, #168]	; (8015a08 <UART_SetConfig+0x934>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	08db      	lsrs	r3, r3, #3
 8015964:	f003 0303 	and.w	r3, r3, #3
 8015968:	4a24      	ldr	r2, [pc, #144]	; (80159fc <UART_SetConfig+0x928>)
 801596a:	fa22 f303 	lsr.w	r3, r2, r3
 801596e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015970:	e00f      	b.n	8015992 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8015972:	4b22      	ldr	r3, [pc, #136]	; (80159fc <UART_SetConfig+0x928>)
 8015974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015976:	e00c      	b.n	8015992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015978:	4b21      	ldr	r3, [pc, #132]	; (8015a00 <UART_SetConfig+0x92c>)
 801597a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801597c:	e009      	b.n	8015992 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801597e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015984:	e005      	b.n	8015992 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8015986:	2300      	movs	r3, #0
 8015988:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801598a:	2301      	movs	r3, #1
 801598c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015990:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015994:	2b00      	cmp	r3, #0
 8015996:	f000 80e7 	beq.w	8015b68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801599e:	4a19      	ldr	r2, [pc, #100]	; (8015a04 <UART_SetConfig+0x930>)
 80159a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80159a4:	461a      	mov	r2, r3
 80159a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80159ac:	005a      	lsls	r2, r3, #1
 80159ae:	697b      	ldr	r3, [r7, #20]
 80159b0:	685b      	ldr	r3, [r3, #4]
 80159b2:	085b      	lsrs	r3, r3, #1
 80159b4:	441a      	add	r2, r3
 80159b6:	697b      	ldr	r3, [r7, #20]
 80159b8:	685b      	ldr	r3, [r3, #4]
 80159ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80159be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80159c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159c2:	2b0f      	cmp	r3, #15
 80159c4:	d916      	bls.n	80159f4 <UART_SetConfig+0x920>
 80159c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159cc:	d212      	bcs.n	80159f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80159ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159d0:	b29b      	uxth	r3, r3
 80159d2:	f023 030f 	bic.w	r3, r3, #15
 80159d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80159d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159da:	085b      	lsrs	r3, r3, #1
 80159dc:	b29b      	uxth	r3, r3
 80159de:	f003 0307 	and.w	r3, r3, #7
 80159e2:	b29a      	uxth	r2, r3
 80159e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80159e6:	4313      	orrs	r3, r2
 80159e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80159ea:	697b      	ldr	r3, [r7, #20]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80159f0:	60da      	str	r2, [r3, #12]
 80159f2:	e0b9      	b.n	8015b68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80159f4:	2301      	movs	r3, #1
 80159f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80159fa:	e0b5      	b.n	8015b68 <UART_SetConfig+0xa94>
 80159fc:	03d09000 	.word	0x03d09000
 8015a00:	003d0900 	.word	0x003d0900
 8015a04:	0801b57c 	.word	0x0801b57c
 8015a08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015a0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015a10:	2b20      	cmp	r3, #32
 8015a12:	dc49      	bgt.n	8015aa8 <UART_SetConfig+0x9d4>
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	db7c      	blt.n	8015b12 <UART_SetConfig+0xa3e>
 8015a18:	2b20      	cmp	r3, #32
 8015a1a:	d87a      	bhi.n	8015b12 <UART_SetConfig+0xa3e>
 8015a1c:	a201      	add	r2, pc, #4	; (adr r2, 8015a24 <UART_SetConfig+0x950>)
 8015a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a22:	bf00      	nop
 8015a24:	08015aaf 	.word	0x08015aaf
 8015a28:	08015ab7 	.word	0x08015ab7
 8015a2c:	08015b13 	.word	0x08015b13
 8015a30:	08015b13 	.word	0x08015b13
 8015a34:	08015abf 	.word	0x08015abf
 8015a38:	08015b13 	.word	0x08015b13
 8015a3c:	08015b13 	.word	0x08015b13
 8015a40:	08015b13 	.word	0x08015b13
 8015a44:	08015acf 	.word	0x08015acf
 8015a48:	08015b13 	.word	0x08015b13
 8015a4c:	08015b13 	.word	0x08015b13
 8015a50:	08015b13 	.word	0x08015b13
 8015a54:	08015b13 	.word	0x08015b13
 8015a58:	08015b13 	.word	0x08015b13
 8015a5c:	08015b13 	.word	0x08015b13
 8015a60:	08015b13 	.word	0x08015b13
 8015a64:	08015adf 	.word	0x08015adf
 8015a68:	08015b13 	.word	0x08015b13
 8015a6c:	08015b13 	.word	0x08015b13
 8015a70:	08015b13 	.word	0x08015b13
 8015a74:	08015b13 	.word	0x08015b13
 8015a78:	08015b13 	.word	0x08015b13
 8015a7c:	08015b13 	.word	0x08015b13
 8015a80:	08015b13 	.word	0x08015b13
 8015a84:	08015b13 	.word	0x08015b13
 8015a88:	08015b13 	.word	0x08015b13
 8015a8c:	08015b13 	.word	0x08015b13
 8015a90:	08015b13 	.word	0x08015b13
 8015a94:	08015b13 	.word	0x08015b13
 8015a98:	08015b13 	.word	0x08015b13
 8015a9c:	08015b13 	.word	0x08015b13
 8015aa0:	08015b13 	.word	0x08015b13
 8015aa4:	08015b05 	.word	0x08015b05
 8015aa8:	2b40      	cmp	r3, #64	; 0x40
 8015aaa:	d02e      	beq.n	8015b0a <UART_SetConfig+0xa36>
 8015aac:	e031      	b.n	8015b12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015aae:	f7f9 fa59 	bl	800ef64 <HAL_RCC_GetPCLK1Freq>
 8015ab2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015ab4:	e033      	b.n	8015b1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015ab6:	f7f9 fa6b 	bl	800ef90 <HAL_RCC_GetPCLK2Freq>
 8015aba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015abc:	e02f      	b.n	8015b1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7fb fa5c 	bl	8010f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015acc:	e027      	b.n	8015b1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015ace:	f107 0318 	add.w	r3, r7, #24
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7fb fba8 	bl	8011228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015ad8:	69fb      	ldr	r3, [r7, #28]
 8015ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015adc:	e01f      	b.n	8015b1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015ade:	4b2d      	ldr	r3, [pc, #180]	; (8015b94 <UART_SetConfig+0xac0>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	f003 0320 	and.w	r3, r3, #32
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d009      	beq.n	8015afe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015aea:	4b2a      	ldr	r3, [pc, #168]	; (8015b94 <UART_SetConfig+0xac0>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	08db      	lsrs	r3, r3, #3
 8015af0:	f003 0303 	and.w	r3, r3, #3
 8015af4:	4a28      	ldr	r2, [pc, #160]	; (8015b98 <UART_SetConfig+0xac4>)
 8015af6:	fa22 f303 	lsr.w	r3, r2, r3
 8015afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015afc:	e00f      	b.n	8015b1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015afe:	4b26      	ldr	r3, [pc, #152]	; (8015b98 <UART_SetConfig+0xac4>)
 8015b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b02:	e00c      	b.n	8015b1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015b04:	4b25      	ldr	r3, [pc, #148]	; (8015b9c <UART_SetConfig+0xac8>)
 8015b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b08:	e009      	b.n	8015b1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b10:	e005      	b.n	8015b1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8015b12:	2300      	movs	r3, #0
 8015b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015b16:	2301      	movs	r3, #1
 8015b18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015b1c:	bf00      	nop
    }

    if (pclk != 0U)
 8015b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d021      	beq.n	8015b68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b28:	4a1d      	ldr	r2, [pc, #116]	; (8015ba0 <UART_SetConfig+0xacc>)
 8015b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b2e:	461a      	mov	r2, r3
 8015b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b32:	fbb3 f2f2 	udiv	r2, r3, r2
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	685b      	ldr	r3, [r3, #4]
 8015b3a:	085b      	lsrs	r3, r3, #1
 8015b3c:	441a      	add	r2, r3
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	685b      	ldr	r3, [r3, #4]
 8015b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b4a:	2b0f      	cmp	r3, #15
 8015b4c:	d909      	bls.n	8015b62 <UART_SetConfig+0xa8e>
 8015b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b54:	d205      	bcs.n	8015b62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b58:	b29a      	uxth	r2, r3
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	60da      	str	r2, [r3, #12]
 8015b60:	e002      	b.n	8015b68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015b62:	2301      	movs	r3, #1
 8015b64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	2201      	movs	r2, #1
 8015b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	2201      	movs	r2, #1
 8015b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015b78:	697b      	ldr	r3, [r7, #20]
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015b7e:	697b      	ldr	r3, [r7, #20]
 8015b80:	2200      	movs	r2, #0
 8015b82:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015b84:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3748      	adds	r7, #72	; 0x48
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015b92:	bf00      	nop
 8015b94:	58024400 	.word	0x58024400
 8015b98:	03d09000 	.word	0x03d09000
 8015b9c:	003d0900 	.word	0x003d0900
 8015ba0:	0801b57c 	.word	0x0801b57c

08015ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015ba4:	b480      	push	{r7}
 8015ba6:	b083      	sub	sp, #12
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bb0:	f003 0308 	and.w	r3, r3, #8
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d00a      	beq.n	8015bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	430a      	orrs	r2, r1
 8015bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bd2:	f003 0301 	and.w	r3, r3, #1
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d00a      	beq.n	8015bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	685b      	ldr	r3, [r3, #4]
 8015be0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	430a      	orrs	r2, r1
 8015bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bf4:	f003 0302 	and.w	r3, r3, #2
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d00a      	beq.n	8015c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	685b      	ldr	r3, [r3, #4]
 8015c02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	430a      	orrs	r2, r1
 8015c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c16:	f003 0304 	and.w	r3, r3, #4
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d00a      	beq.n	8015c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	430a      	orrs	r2, r1
 8015c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c38:	f003 0310 	and.w	r3, r3, #16
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d00a      	beq.n	8015c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	689b      	ldr	r3, [r3, #8]
 8015c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	430a      	orrs	r2, r1
 8015c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c5a:	f003 0320 	and.w	r3, r3, #32
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d00a      	beq.n	8015c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	689b      	ldr	r3, [r3, #8]
 8015c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	430a      	orrs	r2, r1
 8015c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d01a      	beq.n	8015cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	685b      	ldr	r3, [r3, #4]
 8015c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	430a      	orrs	r2, r1
 8015c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015ca2:	d10a      	bne.n	8015cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	685b      	ldr	r3, [r3, #4]
 8015caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	430a      	orrs	r2, r1
 8015cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d00a      	beq.n	8015cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	685b      	ldr	r3, [r3, #4]
 8015ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	430a      	orrs	r2, r1
 8015cda:	605a      	str	r2, [r3, #4]
  }
}
 8015cdc:	bf00      	nop
 8015cde:	370c      	adds	r7, #12
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce6:	4770      	bx	lr

08015ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b098      	sub	sp, #96	; 0x60
 8015cec:	af02      	add	r7, sp, #8
 8015cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015cf8:	f7f0 f956 	bl	8005fa8 <HAL_GetTick>
 8015cfc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	f003 0308 	and.w	r3, r3, #8
 8015d08:	2b08      	cmp	r3, #8
 8015d0a:	d12f      	bne.n	8015d6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015d10:	9300      	str	r3, [sp, #0]
 8015d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d14:	2200      	movs	r2, #0
 8015d16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015d1a:	6878      	ldr	r0, [r7, #4]
 8015d1c:	f000 f88e 	bl	8015e3c <UART_WaitOnFlagUntilTimeout>
 8015d20:	4603      	mov	r3, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d022      	beq.n	8015d6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d2e:	e853 3f00 	ldrex	r3, [r3]
 8015d32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	461a      	mov	r2, r3
 8015d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d44:	647b      	str	r3, [r7, #68]	; 0x44
 8015d46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d4c:	e841 2300 	strex	r3, r2, [r1]
 8015d50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d1e6      	bne.n	8015d26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2220      	movs	r2, #32
 8015d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2200      	movs	r2, #0
 8015d64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015d68:	2303      	movs	r3, #3
 8015d6a:	e063      	b.n	8015e34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	f003 0304 	and.w	r3, r3, #4
 8015d76:	2b04      	cmp	r3, #4
 8015d78:	d149      	bne.n	8015e0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015d7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015d7e:	9300      	str	r3, [sp, #0]
 8015d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d82:	2200      	movs	r2, #0
 8015d84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	f000 f857 	bl	8015e3c <UART_WaitOnFlagUntilTimeout>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d03c      	beq.n	8015e0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d9c:	e853 3f00 	ldrex	r3, [r3]
 8015da0:	623b      	str	r3, [r7, #32]
   return(result);
 8015da2:	6a3b      	ldr	r3, [r7, #32]
 8015da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	461a      	mov	r2, r3
 8015db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015db2:	633b      	str	r3, [r7, #48]	; 0x30
 8015db4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dba:	e841 2300 	strex	r3, r2, [r1]
 8015dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d1e6      	bne.n	8015d94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	3308      	adds	r3, #8
 8015dcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	e853 3f00 	ldrex	r3, [r3]
 8015dd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	f023 0301 	bic.w	r3, r3, #1
 8015ddc:	64bb      	str	r3, [r7, #72]	; 0x48
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	3308      	adds	r3, #8
 8015de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015de6:	61fa      	str	r2, [r7, #28]
 8015de8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dea:	69b9      	ldr	r1, [r7, #24]
 8015dec:	69fa      	ldr	r2, [r7, #28]
 8015dee:	e841 2300 	strex	r3, r2, [r1]
 8015df2:	617b      	str	r3, [r7, #20]
   return(result);
 8015df4:	697b      	ldr	r3, [r7, #20]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d1e5      	bne.n	8015dc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2220      	movs	r2, #32
 8015dfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2200      	movs	r2, #0
 8015e06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015e0a:	2303      	movs	r3, #3
 8015e0c:	e012      	b.n	8015e34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2220      	movs	r2, #32
 8015e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	2220      	movs	r2, #32
 8015e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	2200      	movs	r2, #0
 8015e22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	2200      	movs	r2, #0
 8015e28:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015e32:	2300      	movs	r3, #0
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3758      	adds	r7, #88	; 0x58
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}

08015e3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b084      	sub	sp, #16
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	603b      	str	r3, [r7, #0]
 8015e48:	4613      	mov	r3, r2
 8015e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015e4c:	e04f      	b.n	8015eee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015e4e:	69bb      	ldr	r3, [r7, #24]
 8015e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e54:	d04b      	beq.n	8015eee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015e56:	f7f0 f8a7 	bl	8005fa8 <HAL_GetTick>
 8015e5a:	4602      	mov	r2, r0
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	1ad3      	subs	r3, r2, r3
 8015e60:	69ba      	ldr	r2, [r7, #24]
 8015e62:	429a      	cmp	r2, r3
 8015e64:	d302      	bcc.n	8015e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8015e66:	69bb      	ldr	r3, [r7, #24]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d101      	bne.n	8015e70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015e6c:	2303      	movs	r3, #3
 8015e6e:	e04e      	b.n	8015f0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	f003 0304 	and.w	r3, r3, #4
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d037      	beq.n	8015eee <UART_WaitOnFlagUntilTimeout+0xb2>
 8015e7e:	68bb      	ldr	r3, [r7, #8]
 8015e80:	2b80      	cmp	r3, #128	; 0x80
 8015e82:	d034      	beq.n	8015eee <UART_WaitOnFlagUntilTimeout+0xb2>
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	2b40      	cmp	r3, #64	; 0x40
 8015e88:	d031      	beq.n	8015eee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	69db      	ldr	r3, [r3, #28]
 8015e90:	f003 0308 	and.w	r3, r3, #8
 8015e94:	2b08      	cmp	r3, #8
 8015e96:	d110      	bne.n	8015eba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	2208      	movs	r2, #8
 8015e9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015ea0:	68f8      	ldr	r0, [r7, #12]
 8015ea2:	f000 f95b 	bl	801615c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2208      	movs	r2, #8
 8015eaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	e029      	b.n	8015f0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	69db      	ldr	r3, [r3, #28]
 8015ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015ec8:	d111      	bne.n	8015eee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ed2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015ed4:	68f8      	ldr	r0, [r7, #12]
 8015ed6:	f000 f941 	bl	801615c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	2220      	movs	r2, #32
 8015ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015eea:	2303      	movs	r3, #3
 8015eec:	e00f      	b.n	8015f0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	69da      	ldr	r2, [r3, #28]
 8015ef4:	68bb      	ldr	r3, [r7, #8]
 8015ef6:	4013      	ands	r3, r2
 8015ef8:	68ba      	ldr	r2, [r7, #8]
 8015efa:	429a      	cmp	r2, r3
 8015efc:	bf0c      	ite	eq
 8015efe:	2301      	moveq	r3, #1
 8015f00:	2300      	movne	r3, #0
 8015f02:	b2db      	uxtb	r3, r3
 8015f04:	461a      	mov	r2, r3
 8015f06:	79fb      	ldrb	r3, [r7, #7]
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d0a0      	beq.n	8015e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015f0c:	2300      	movs	r3, #0
}
 8015f0e:	4618      	mov	r0, r3
 8015f10:	3710      	adds	r7, #16
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd80      	pop	{r7, pc}
	...

08015f18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015f18:	b480      	push	{r7}
 8015f1a:	b0a3      	sub	sp, #140	; 0x8c
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	60f8      	str	r0, [r7, #12]
 8015f20:	60b9      	str	r1, [r7, #8]
 8015f22:	4613      	mov	r3, r2
 8015f24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	68ba      	ldr	r2, [r7, #8]
 8015f2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	88fa      	ldrh	r2, [r7, #6]
 8015f30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	88fa      	ldrh	r2, [r7, #6]
 8015f38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	689b      	ldr	r3, [r3, #8]
 8015f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f4a:	d10e      	bne.n	8015f6a <UART_Start_Receive_IT+0x52>
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	691b      	ldr	r3, [r3, #16]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d105      	bne.n	8015f60 <UART_Start_Receive_IT+0x48>
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015f5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f5e:	e02d      	b.n	8015fbc <UART_Start_Receive_IT+0xa4>
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	22ff      	movs	r2, #255	; 0xff
 8015f64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f68:	e028      	b.n	8015fbc <UART_Start_Receive_IT+0xa4>
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	689b      	ldr	r3, [r3, #8]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d10d      	bne.n	8015f8e <UART_Start_Receive_IT+0x76>
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	691b      	ldr	r3, [r3, #16]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d104      	bne.n	8015f84 <UART_Start_Receive_IT+0x6c>
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	22ff      	movs	r2, #255	; 0xff
 8015f7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f82:	e01b      	b.n	8015fbc <UART_Start_Receive_IT+0xa4>
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	227f      	movs	r2, #127	; 0x7f
 8015f88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015f8c:	e016      	b.n	8015fbc <UART_Start_Receive_IT+0xa4>
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	689b      	ldr	r3, [r3, #8]
 8015f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015f96:	d10d      	bne.n	8015fb4 <UART_Start_Receive_IT+0x9c>
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	691b      	ldr	r3, [r3, #16]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d104      	bne.n	8015faa <UART_Start_Receive_IT+0x92>
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	227f      	movs	r2, #127	; 0x7f
 8015fa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015fa8:	e008      	b.n	8015fbc <UART_Start_Receive_IT+0xa4>
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	223f      	movs	r2, #63	; 0x3f
 8015fae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015fb2:	e003      	b.n	8015fbc <UART_Start_Receive_IT+0xa4>
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	2222      	movs	r2, #34	; 0x22
 8015fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	3308      	adds	r3, #8
 8015fd2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015fd6:	e853 3f00 	ldrex	r3, [r3]
 8015fda:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015fde:	f043 0301 	orr.w	r3, r3, #1
 8015fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	3308      	adds	r3, #8
 8015fec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015ff0:	673a      	str	r2, [r7, #112]	; 0x70
 8015ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ff4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015ff6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015ff8:	e841 2300 	strex	r3, r2, [r1]
 8015ffc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016000:	2b00      	cmp	r3, #0
 8016002:	d1e3      	bne.n	8015fcc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801600c:	d14f      	bne.n	80160ae <UART_Start_Receive_IT+0x196>
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016014:	88fa      	ldrh	r2, [r7, #6]
 8016016:	429a      	cmp	r2, r3
 8016018:	d349      	bcc.n	80160ae <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	689b      	ldr	r3, [r3, #8]
 801601e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016022:	d107      	bne.n	8016034 <UART_Start_Receive_IT+0x11c>
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	691b      	ldr	r3, [r3, #16]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d103      	bne.n	8016034 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	4a47      	ldr	r2, [pc, #284]	; (801614c <UART_Start_Receive_IT+0x234>)
 8016030:	675a      	str	r2, [r3, #116]	; 0x74
 8016032:	e002      	b.n	801603a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	4a46      	ldr	r2, [pc, #280]	; (8016150 <UART_Start_Receive_IT+0x238>)
 8016038:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	691b      	ldr	r3, [r3, #16]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d01a      	beq.n	8016078 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801604a:	e853 3f00 	ldrex	r3, [r3]
 801604e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016056:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	461a      	mov	r2, r3
 8016060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016064:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016066:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016068:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801606a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801606c:	e841 2300 	strex	r3, r2, [r1]
 8016070:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016074:	2b00      	cmp	r3, #0
 8016076:	d1e4      	bne.n	8016042 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	3308      	adds	r3, #8
 801607e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016082:	e853 3f00 	ldrex	r3, [r3]
 8016086:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801608a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801608e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	3308      	adds	r3, #8
 8016096:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016098:	64ba      	str	r2, [r7, #72]	; 0x48
 801609a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801609c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801609e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80160a0:	e841 2300 	strex	r3, r2, [r1]
 80160a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80160a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d1e5      	bne.n	8016078 <UART_Start_Receive_IT+0x160>
 80160ac:	e046      	b.n	801613c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	689b      	ldr	r3, [r3, #8]
 80160b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80160b6:	d107      	bne.n	80160c8 <UART_Start_Receive_IT+0x1b0>
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	691b      	ldr	r3, [r3, #16]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d103      	bne.n	80160c8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	4a24      	ldr	r2, [pc, #144]	; (8016154 <UART_Start_Receive_IT+0x23c>)
 80160c4:	675a      	str	r2, [r3, #116]	; 0x74
 80160c6:	e002      	b.n	80160ce <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	4a23      	ldr	r2, [pc, #140]	; (8016158 <UART_Start_Receive_IT+0x240>)
 80160cc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	691b      	ldr	r3, [r3, #16]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d019      	beq.n	801610a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160de:	e853 3f00 	ldrex	r3, [r3]
 80160e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80160e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80160ea:	677b      	str	r3, [r7, #116]	; 0x74
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	461a      	mov	r2, r3
 80160f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160f4:	637b      	str	r3, [r7, #52]	; 0x34
 80160f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80160fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160fc:	e841 2300 	strex	r3, r2, [r1]
 8016100:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8016102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016104:	2b00      	cmp	r3, #0
 8016106:	d1e6      	bne.n	80160d6 <UART_Start_Receive_IT+0x1be>
 8016108:	e018      	b.n	801613c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016110:	697b      	ldr	r3, [r7, #20]
 8016112:	e853 3f00 	ldrex	r3, [r3]
 8016116:	613b      	str	r3, [r7, #16]
   return(result);
 8016118:	693b      	ldr	r3, [r7, #16]
 801611a:	f043 0320 	orr.w	r3, r3, #32
 801611e:	67bb      	str	r3, [r7, #120]	; 0x78
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	461a      	mov	r2, r3
 8016126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016128:	623b      	str	r3, [r7, #32]
 801612a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801612c:	69f9      	ldr	r1, [r7, #28]
 801612e:	6a3a      	ldr	r2, [r7, #32]
 8016130:	e841 2300 	strex	r3, r2, [r1]
 8016134:	61bb      	str	r3, [r7, #24]
   return(result);
 8016136:	69bb      	ldr	r3, [r7, #24]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d1e6      	bne.n	801610a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801613c:	2300      	movs	r3, #0
}
 801613e:	4618      	mov	r0, r3
 8016140:	378c      	adds	r7, #140	; 0x8c
 8016142:	46bd      	mov	sp, r7
 8016144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016148:	4770      	bx	lr
 801614a:	bf00      	nop
 801614c:	0801697d 	.word	0x0801697d
 8016150:	0801661d 	.word	0x0801661d
 8016154:	08016465 	.word	0x08016465
 8016158:	080162ad 	.word	0x080162ad

0801615c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801615c:	b480      	push	{r7}
 801615e:	b095      	sub	sp, #84	; 0x54
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801616c:	e853 3f00 	ldrex	r3, [r3]
 8016170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016178:	64fb      	str	r3, [r7, #76]	; 0x4c
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	461a      	mov	r2, r3
 8016180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016182:	643b      	str	r3, [r7, #64]	; 0x40
 8016184:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801618a:	e841 2300 	strex	r3, r2, [r1]
 801618e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016192:	2b00      	cmp	r3, #0
 8016194:	d1e6      	bne.n	8016164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	3308      	adds	r3, #8
 801619c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801619e:	6a3b      	ldr	r3, [r7, #32]
 80161a0:	e853 3f00 	ldrex	r3, [r3]
 80161a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80161a6:	69fa      	ldr	r2, [r7, #28]
 80161a8:	4b1e      	ldr	r3, [pc, #120]	; (8016224 <UART_EndRxTransfer+0xc8>)
 80161aa:	4013      	ands	r3, r2
 80161ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	3308      	adds	r3, #8
 80161b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80161b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80161b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80161bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80161be:	e841 2300 	strex	r3, r2, [r1]
 80161c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80161c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d1e5      	bne.n	8016196 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161ce:	2b01      	cmp	r3, #1
 80161d0:	d118      	bne.n	8016204 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	e853 3f00 	ldrex	r3, [r3]
 80161de:	60bb      	str	r3, [r7, #8]
   return(result);
 80161e0:	68bb      	ldr	r3, [r7, #8]
 80161e2:	f023 0310 	bic.w	r3, r3, #16
 80161e6:	647b      	str	r3, [r7, #68]	; 0x44
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	461a      	mov	r2, r3
 80161ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80161f0:	61bb      	str	r3, [r7, #24]
 80161f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161f4:	6979      	ldr	r1, [r7, #20]
 80161f6:	69ba      	ldr	r2, [r7, #24]
 80161f8:	e841 2300 	strex	r3, r2, [r1]
 80161fc:	613b      	str	r3, [r7, #16]
   return(result);
 80161fe:	693b      	ldr	r3, [r7, #16]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d1e6      	bne.n	80161d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2220      	movs	r2, #32
 8016208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2200      	movs	r2, #0
 8016210:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	2200      	movs	r2, #0
 8016216:	675a      	str	r2, [r3, #116]	; 0x74
}
 8016218:	bf00      	nop
 801621a:	3754      	adds	r7, #84	; 0x54
 801621c:	46bd      	mov	sp, r7
 801621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016222:	4770      	bx	lr
 8016224:	effffffe 	.word	0xeffffffe

08016228 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016234:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2200      	movs	r2, #0
 801623a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	2200      	movs	r2, #0
 8016242:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016246:	68f8      	ldr	r0, [r7, #12]
 8016248:	f7fe ff2e 	bl	80150a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801624c:	bf00      	nop
 801624e:	3710      	adds	r7, #16
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}

08016254 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b088      	sub	sp, #32
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	e853 3f00 	ldrex	r3, [r3]
 8016268:	60bb      	str	r3, [r7, #8]
   return(result);
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016270:	61fb      	str	r3, [r7, #28]
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	461a      	mov	r2, r3
 8016278:	69fb      	ldr	r3, [r7, #28]
 801627a:	61bb      	str	r3, [r7, #24]
 801627c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801627e:	6979      	ldr	r1, [r7, #20]
 8016280:	69ba      	ldr	r2, [r7, #24]
 8016282:	e841 2300 	strex	r3, r2, [r1]
 8016286:	613b      	str	r3, [r7, #16]
   return(result);
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d1e6      	bne.n	801625c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2220      	movs	r2, #32
 8016292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2200      	movs	r2, #0
 801629a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f7fe fef9 	bl	8015094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80162a2:	bf00      	nop
 80162a4:	3720      	adds	r7, #32
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}
	...

080162ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b09c      	sub	sp, #112	; 0x70
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80162ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80162c4:	2b22      	cmp	r3, #34	; 0x22
 80162c6:	f040 80be 	bne.w	8016446 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80162d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80162d8:	b2d9      	uxtb	r1, r3
 80162da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80162de:	b2da      	uxtb	r2, r3
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162e4:	400a      	ands	r2, r1
 80162e6:	b2d2      	uxtb	r2, r2
 80162e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162ee:	1c5a      	adds	r2, r3, #1
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162fa:	b29b      	uxth	r3, r3
 80162fc:	3b01      	subs	r3, #1
 80162fe:	b29a      	uxth	r2, r3
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801630c:	b29b      	uxth	r3, r3
 801630e:	2b00      	cmp	r3, #0
 8016310:	f040 80a1 	bne.w	8016456 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801631a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801631c:	e853 3f00 	ldrex	r3, [r3]
 8016320:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016328:	66bb      	str	r3, [r7, #104]	; 0x68
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	461a      	mov	r2, r3
 8016330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016332:	65bb      	str	r3, [r7, #88]	; 0x58
 8016334:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801633a:	e841 2300 	strex	r3, r2, [r1]
 801633e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016342:	2b00      	cmp	r3, #0
 8016344:	d1e6      	bne.n	8016314 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	3308      	adds	r3, #8
 801634c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016350:	e853 3f00 	ldrex	r3, [r3]
 8016354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016358:	f023 0301 	bic.w	r3, r3, #1
 801635c:	667b      	str	r3, [r7, #100]	; 0x64
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	3308      	adds	r3, #8
 8016364:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016366:	647a      	str	r2, [r7, #68]	; 0x44
 8016368:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801636a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801636c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801636e:	e841 2300 	strex	r3, r2, [r1]
 8016372:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016376:	2b00      	cmp	r3, #0
 8016378:	d1e5      	bne.n	8016346 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	2220      	movs	r2, #32
 801637e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2200      	movs	r2, #0
 8016386:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2200      	movs	r2, #0
 801638c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	4a33      	ldr	r2, [pc, #204]	; (8016460 <UART_RxISR_8BIT+0x1b4>)
 8016394:	4293      	cmp	r3, r2
 8016396:	d01f      	beq.n	80163d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d018      	beq.n	80163d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ae:	e853 3f00 	ldrex	r3, [r3]
 80163b2:	623b      	str	r3, [r7, #32]
   return(result);
 80163b4:	6a3b      	ldr	r3, [r7, #32]
 80163b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80163ba:	663b      	str	r3, [r7, #96]	; 0x60
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	461a      	mov	r2, r3
 80163c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80163c4:	633b      	str	r3, [r7, #48]	; 0x30
 80163c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80163ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163cc:	e841 2300 	strex	r3, r2, [r1]
 80163d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80163d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d1e6      	bne.n	80163a6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163dc:	2b01      	cmp	r3, #1
 80163de:	d12e      	bne.n	801643e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2200      	movs	r2, #0
 80163e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ec:	693b      	ldr	r3, [r7, #16]
 80163ee:	e853 3f00 	ldrex	r3, [r3]
 80163f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	f023 0310 	bic.w	r3, r3, #16
 80163fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	461a      	mov	r2, r3
 8016402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016404:	61fb      	str	r3, [r7, #28]
 8016406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016408:	69b9      	ldr	r1, [r7, #24]
 801640a:	69fa      	ldr	r2, [r7, #28]
 801640c:	e841 2300 	strex	r3, r2, [r1]
 8016410:	617b      	str	r3, [r7, #20]
   return(result);
 8016412:	697b      	ldr	r3, [r7, #20]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d1e6      	bne.n	80163e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	69db      	ldr	r3, [r3, #28]
 801641e:	f003 0310 	and.w	r3, r3, #16
 8016422:	2b10      	cmp	r3, #16
 8016424:	d103      	bne.n	801642e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	2210      	movs	r2, #16
 801642c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016434:	4619      	mov	r1, r3
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f7fe fe40 	bl	80150bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801643c:	e00b      	b.n	8016456 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f7ec fcb4 	bl	8002dac <HAL_UART_RxCpltCallback>
}
 8016444:	e007      	b.n	8016456 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	699a      	ldr	r2, [r3, #24]
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	f042 0208 	orr.w	r2, r2, #8
 8016454:	619a      	str	r2, [r3, #24]
}
 8016456:	bf00      	nop
 8016458:	3770      	adds	r7, #112	; 0x70
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	58000c00 	.word	0x58000c00

08016464 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b09c      	sub	sp, #112	; 0x70
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016472:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801647c:	2b22      	cmp	r3, #34	; 0x22
 801647e:	f040 80be 	bne.w	80165fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016488:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016490:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8016492:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8016496:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801649a:	4013      	ands	r3, r2
 801649c:	b29a      	uxth	r2, r3
 801649e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80164a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164a6:	1c9a      	adds	r2, r3, #2
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80164b2:	b29b      	uxth	r3, r3
 80164b4:	3b01      	subs	r3, #1
 80164b6:	b29a      	uxth	r2, r3
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	f040 80a1 	bne.w	801660e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164d4:	e853 3f00 	ldrex	r3, [r3]
 80164d8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80164da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80164e0:	667b      	str	r3, [r7, #100]	; 0x64
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	461a      	mov	r2, r3
 80164e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80164ea:	657b      	str	r3, [r7, #84]	; 0x54
 80164ec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80164f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80164f2:	e841 2300 	strex	r3, r2, [r1]
 80164f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80164f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d1e6      	bne.n	80164cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	3308      	adds	r3, #8
 8016504:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016508:	e853 3f00 	ldrex	r3, [r3]
 801650c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016510:	f023 0301 	bic.w	r3, r3, #1
 8016514:	663b      	str	r3, [r7, #96]	; 0x60
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	3308      	adds	r3, #8
 801651c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801651e:	643a      	str	r2, [r7, #64]	; 0x40
 8016520:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016522:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016526:	e841 2300 	strex	r3, r2, [r1]
 801652a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801652e:	2b00      	cmp	r3, #0
 8016530:	d1e5      	bne.n	80164fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	2220      	movs	r2, #32
 8016536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	2200      	movs	r2, #0
 801653e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2200      	movs	r2, #0
 8016544:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	4a33      	ldr	r2, [pc, #204]	; (8016618 <UART_RxISR_16BIT+0x1b4>)
 801654c:	4293      	cmp	r3, r2
 801654e:	d01f      	beq.n	8016590 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	685b      	ldr	r3, [r3, #4]
 8016556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801655a:	2b00      	cmp	r3, #0
 801655c:	d018      	beq.n	8016590 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016564:	6a3b      	ldr	r3, [r7, #32]
 8016566:	e853 3f00 	ldrex	r3, [r3]
 801656a:	61fb      	str	r3, [r7, #28]
   return(result);
 801656c:	69fb      	ldr	r3, [r7, #28]
 801656e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016572:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	461a      	mov	r2, r3
 801657a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801657c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801657e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016584:	e841 2300 	strex	r3, r2, [r1]
 8016588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801658c:	2b00      	cmp	r3, #0
 801658e:	d1e6      	bne.n	801655e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016594:	2b01      	cmp	r3, #1
 8016596:	d12e      	bne.n	80165f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2200      	movs	r2, #0
 801659c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	e853 3f00 	ldrex	r3, [r3]
 80165aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80165ac:	68bb      	ldr	r3, [r7, #8]
 80165ae:	f023 0310 	bic.w	r3, r3, #16
 80165b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	461a      	mov	r2, r3
 80165ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80165bc:	61bb      	str	r3, [r7, #24]
 80165be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165c0:	6979      	ldr	r1, [r7, #20]
 80165c2:	69ba      	ldr	r2, [r7, #24]
 80165c4:	e841 2300 	strex	r3, r2, [r1]
 80165c8:	613b      	str	r3, [r7, #16]
   return(result);
 80165ca:	693b      	ldr	r3, [r7, #16]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d1e6      	bne.n	801659e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	69db      	ldr	r3, [r3, #28]
 80165d6:	f003 0310 	and.w	r3, r3, #16
 80165da:	2b10      	cmp	r3, #16
 80165dc:	d103      	bne.n	80165e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	2210      	movs	r2, #16
 80165e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80165ec:	4619      	mov	r1, r3
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f7fe fd64 	bl	80150bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80165f4:	e00b      	b.n	801660e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80165f6:	6878      	ldr	r0, [r7, #4]
 80165f8:	f7ec fbd8 	bl	8002dac <HAL_UART_RxCpltCallback>
}
 80165fc:	e007      	b.n	801660e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	699a      	ldr	r2, [r3, #24]
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	f042 0208 	orr.w	r2, r2, #8
 801660c:	619a      	str	r2, [r3, #24]
}
 801660e:	bf00      	nop
 8016610:	3770      	adds	r7, #112	; 0x70
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	58000c00 	.word	0x58000c00

0801661c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b0ac      	sub	sp, #176	; 0xb0
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801662a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	69db      	ldr	r3, [r3, #28]
 8016634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	689b      	ldr	r3, [r3, #8]
 8016648:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016652:	2b22      	cmp	r3, #34	; 0x22
 8016654:	f040 8180 	bne.w	8016958 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801665e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016662:	e123      	b.n	80168ac <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801666a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801666e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8016672:	b2d9      	uxtb	r1, r3
 8016674:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8016678:	b2da      	uxtb	r2, r3
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801667e:	400a      	ands	r2, r1
 8016680:	b2d2      	uxtb	r2, r2
 8016682:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016688:	1c5a      	adds	r2, r3, #1
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016694:	b29b      	uxth	r3, r3
 8016696:	3b01      	subs	r3, #1
 8016698:	b29a      	uxth	r2, r3
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	69db      	ldr	r3, [r3, #28]
 80166a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80166aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166ae:	f003 0307 	and.w	r3, r3, #7
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d053      	beq.n	801675e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80166b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166ba:	f003 0301 	and.w	r3, r3, #1
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d011      	beq.n	80166e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80166c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80166c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d00b      	beq.n	80166e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	2201      	movs	r2, #1
 80166d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80166dc:	f043 0201 	orr.w	r2, r3, #1
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80166e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80166ea:	f003 0302 	and.w	r3, r3, #2
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d011      	beq.n	8016716 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80166f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166f6:	f003 0301 	and.w	r3, r3, #1
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d00b      	beq.n	8016716 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	2202      	movs	r2, #2
 8016704:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801670c:	f043 0204 	orr.w	r2, r3, #4
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801671a:	f003 0304 	and.w	r3, r3, #4
 801671e:	2b00      	cmp	r3, #0
 8016720:	d011      	beq.n	8016746 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016726:	f003 0301 	and.w	r3, r3, #1
 801672a:	2b00      	cmp	r3, #0
 801672c:	d00b      	beq.n	8016746 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	2204      	movs	r2, #4
 8016734:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801673c:	f043 0202 	orr.w	r2, r3, #2
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801674c:	2b00      	cmp	r3, #0
 801674e:	d006      	beq.n	801675e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016750:	6878      	ldr	r0, [r7, #4]
 8016752:	f7fe fca9 	bl	80150a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2200      	movs	r2, #0
 801675a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016764:	b29b      	uxth	r3, r3
 8016766:	2b00      	cmp	r3, #0
 8016768:	f040 80a0 	bne.w	80168ac <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016774:	e853 3f00 	ldrex	r3, [r3]
 8016778:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801677a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801677c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	461a      	mov	r2, r3
 801678a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801678e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016790:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016792:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016794:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016796:	e841 2300 	strex	r3, r2, [r1]
 801679a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801679c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d1e4      	bne.n	801676c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	3308      	adds	r3, #8
 80167a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80167ac:	e853 3f00 	ldrex	r3, [r3]
 80167b0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80167b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80167b4:	4b6e      	ldr	r3, [pc, #440]	; (8016970 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80167b6:	4013      	ands	r3, r2
 80167b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	3308      	adds	r3, #8
 80167c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80167c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80167c8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80167cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80167ce:	e841 2300 	strex	r3, r2, [r1]
 80167d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80167d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d1e3      	bne.n	80167a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	2220      	movs	r2, #32
 80167de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2200      	movs	r2, #0
 80167e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	2200      	movs	r2, #0
 80167ec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	4a60      	ldr	r2, [pc, #384]	; (8016974 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80167f4:	4293      	cmp	r3, r2
 80167f6:	d021      	beq.n	801683c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016802:	2b00      	cmp	r3, #0
 8016804:	d01a      	beq.n	801683c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801680c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801680e:	e853 3f00 	ldrex	r3, [r3]
 8016812:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016816:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801681a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	461a      	mov	r2, r3
 8016824:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016828:	657b      	str	r3, [r7, #84]	; 0x54
 801682a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801682c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801682e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016830:	e841 2300 	strex	r3, r2, [r1]
 8016834:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016838:	2b00      	cmp	r3, #0
 801683a:	d1e4      	bne.n	8016806 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016840:	2b01      	cmp	r3, #1
 8016842:	d130      	bne.n	80168a6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	2200      	movs	r2, #0
 8016848:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016852:	e853 3f00 	ldrex	r3, [r3]
 8016856:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801685a:	f023 0310 	bic.w	r3, r3, #16
 801685e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	461a      	mov	r2, r3
 8016868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801686c:	643b      	str	r3, [r7, #64]	; 0x40
 801686e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016870:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016874:	e841 2300 	strex	r3, r2, [r1]
 8016878:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801687a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801687c:	2b00      	cmp	r3, #0
 801687e:	d1e4      	bne.n	801684a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	69db      	ldr	r3, [r3, #28]
 8016886:	f003 0310 	and.w	r3, r3, #16
 801688a:	2b10      	cmp	r3, #16
 801688c:	d103      	bne.n	8016896 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	2210      	movs	r2, #16
 8016894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801689c:	4619      	mov	r1, r3
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f7fe fc0c 	bl	80150bc <HAL_UARTEx_RxEventCallback>
 80168a4:	e002      	b.n	80168ac <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80168a6:	6878      	ldr	r0, [r7, #4]
 80168a8:	f7ec fa80 	bl	8002dac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80168ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d006      	beq.n	80168c2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80168b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80168b8:	f003 0320 	and.w	r3, r3, #32
 80168bc:	2b00      	cmp	r3, #0
 80168be:	f47f aed1 	bne.w	8016664 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80168c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80168cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d049      	beq.n	8016968 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80168da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80168de:	429a      	cmp	r2, r3
 80168e0:	d242      	bcs.n	8016968 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	3308      	adds	r3, #8
 80168e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168ea:	6a3b      	ldr	r3, [r7, #32]
 80168ec:	e853 3f00 	ldrex	r3, [r3]
 80168f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80168f2:	69fb      	ldr	r3, [r7, #28]
 80168f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80168f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	3308      	adds	r3, #8
 8016902:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016908:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801690a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801690c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801690e:	e841 2300 	strex	r3, r2, [r1]
 8016912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016916:	2b00      	cmp	r3, #0
 8016918:	d1e3      	bne.n	80168e2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	4a16      	ldr	r2, [pc, #88]	; (8016978 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801691e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	e853 3f00 	ldrex	r3, [r3]
 801692c:	60bb      	str	r3, [r7, #8]
   return(result);
 801692e:	68bb      	ldr	r3, [r7, #8]
 8016930:	f043 0320 	orr.w	r3, r3, #32
 8016934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	461a      	mov	r2, r3
 801693e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016942:	61bb      	str	r3, [r7, #24]
 8016944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016946:	6979      	ldr	r1, [r7, #20]
 8016948:	69ba      	ldr	r2, [r7, #24]
 801694a:	e841 2300 	strex	r3, r2, [r1]
 801694e:	613b      	str	r3, [r7, #16]
   return(result);
 8016950:	693b      	ldr	r3, [r7, #16]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d1e4      	bne.n	8016920 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016956:	e007      	b.n	8016968 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	699a      	ldr	r2, [r3, #24]
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	f042 0208 	orr.w	r2, r2, #8
 8016966:	619a      	str	r2, [r3, #24]
}
 8016968:	bf00      	nop
 801696a:	37b0      	adds	r7, #176	; 0xb0
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}
 8016970:	effffffe 	.word	0xeffffffe
 8016974:	58000c00 	.word	0x58000c00
 8016978:	080162ad 	.word	0x080162ad

0801697c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b0ae      	sub	sp, #184	; 0xb8
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801698a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	69db      	ldr	r3, [r3, #28]
 8016994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	689b      	ldr	r3, [r3, #8]
 80169a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80169b2:	2b22      	cmp	r3, #34	; 0x22
 80169b4:	f040 8184 	bne.w	8016cc0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80169be:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80169c2:	e127      	b.n	8016c14 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80169d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80169da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80169de:	4013      	ands	r3, r2
 80169e0:	b29a      	uxth	r2, r3
 80169e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80169e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169ec:	1c9a      	adds	r2, r3, #2
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80169f8:	b29b      	uxth	r3, r3
 80169fa:	3b01      	subs	r3, #1
 80169fc:	b29a      	uxth	r2, r3
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	69db      	ldr	r3, [r3, #28]
 8016a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016a0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a12:	f003 0307 	and.w	r3, r3, #7
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d053      	beq.n	8016ac2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016a1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a1e:	f003 0301 	and.w	r3, r3, #1
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d011      	beq.n	8016a4a <UART_RxISR_16BIT_FIFOEN+0xce>
 8016a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d00b      	beq.n	8016a4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	2201      	movs	r2, #1
 8016a38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a40:	f043 0201 	orr.w	r2, r3, #1
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a4e:	f003 0302 	and.w	r3, r3, #2
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d011      	beq.n	8016a7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a5a:	f003 0301 	and.w	r3, r3, #1
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d00b      	beq.n	8016a7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	2202      	movs	r2, #2
 8016a68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016a70:	f043 0204 	orr.w	r2, r3, #4
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016a7e:	f003 0304 	and.w	r3, r3, #4
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d011      	beq.n	8016aaa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016a86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a8a:	f003 0301 	and.w	r3, r3, #1
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d00b      	beq.n	8016aaa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	2204      	movs	r2, #4
 8016a98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016aa0:	f043 0202 	orr.w	r2, r3, #2
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d006      	beq.n	8016ac2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	f7fe faf7 	bl	80150a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	2200      	movs	r2, #0
 8016abe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ac8:	b29b      	uxth	r3, r3
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	f040 80a2 	bne.w	8016c14 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016ad8:	e853 3f00 	ldrex	r3, [r3]
 8016adc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	461a      	mov	r2, r3
 8016aee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016af2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016af6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016af8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016afe:	e841 2300 	strex	r3, r2, [r1]
 8016b02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d1e2      	bne.n	8016ad0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	3308      	adds	r3, #8
 8016b10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016b14:	e853 3f00 	ldrex	r3, [r3]
 8016b18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016b1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016b1c:	4b6e      	ldr	r3, [pc, #440]	; (8016cd8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016b1e:	4013      	ands	r3, r2
 8016b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	3308      	adds	r3, #8
 8016b2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016b2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016b30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016b34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016b36:	e841 2300 	strex	r3, r2, [r1]
 8016b3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d1e3      	bne.n	8016b0a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	2220      	movs	r2, #32
 8016b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	2200      	movs	r2, #0
 8016b54:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	4a60      	ldr	r2, [pc, #384]	; (8016cdc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016b5c:	4293      	cmp	r3, r2
 8016b5e:	d021      	beq.n	8016ba4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	685b      	ldr	r3, [r3, #4]
 8016b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d01a      	beq.n	8016ba4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b76:	e853 3f00 	ldrex	r3, [r3]
 8016b7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016b82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	461a      	mov	r2, r3
 8016b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b90:	65bb      	str	r3, [r7, #88]	; 0x58
 8016b92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016b96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016b98:	e841 2300 	strex	r3, r2, [r1]
 8016b9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d1e4      	bne.n	8016b6e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	d130      	bne.n	8016c0e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2200      	movs	r2, #0
 8016bb0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bba:	e853 3f00 	ldrex	r3, [r3]
 8016bbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bc2:	f023 0310 	bic.w	r3, r3, #16
 8016bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	461a      	mov	r2, r3
 8016bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8016bd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016bdc:	e841 2300 	strex	r3, r2, [r1]
 8016be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d1e4      	bne.n	8016bb2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	69db      	ldr	r3, [r3, #28]
 8016bee:	f003 0310 	and.w	r3, r3, #16
 8016bf2:	2b10      	cmp	r3, #16
 8016bf4:	d103      	bne.n	8016bfe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	2210      	movs	r2, #16
 8016bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016c04:	4619      	mov	r1, r3
 8016c06:	6878      	ldr	r0, [r7, #4]
 8016c08:	f7fe fa58 	bl	80150bc <HAL_UARTEx_RxEventCallback>
 8016c0c:	e002      	b.n	8016c14 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	f7ec f8cc 	bl	8002dac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016c14:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d006      	beq.n	8016c2a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016c20:	f003 0320 	and.w	r3, r3, #32
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	f47f aecd 	bne.w	80169c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016c30:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016c34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d049      	beq.n	8016cd0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016c42:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d242      	bcs.n	8016cd0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	3308      	adds	r3, #8
 8016c50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c54:	e853 3f00 	ldrex	r3, [r3]
 8016c58:	623b      	str	r3, [r7, #32]
   return(result);
 8016c5a:	6a3b      	ldr	r3, [r7, #32]
 8016c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	3308      	adds	r3, #8
 8016c6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016c6e:	633a      	str	r2, [r7, #48]	; 0x30
 8016c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c76:	e841 2300 	strex	r3, r2, [r1]
 8016c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d1e3      	bne.n	8016c4a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	4a16      	ldr	r2, [pc, #88]	; (8016ce0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8016c86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c8e:	693b      	ldr	r3, [r7, #16]
 8016c90:	e853 3f00 	ldrex	r3, [r3]
 8016c94:	60fb      	str	r3, [r7, #12]
   return(result);
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	f043 0320 	orr.w	r3, r3, #32
 8016c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	461a      	mov	r2, r3
 8016ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016caa:	61fb      	str	r3, [r7, #28]
 8016cac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016cae:	69b9      	ldr	r1, [r7, #24]
 8016cb0:	69fa      	ldr	r2, [r7, #28]
 8016cb2:	e841 2300 	strex	r3, r2, [r1]
 8016cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d1e4      	bne.n	8016c88 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016cbe:	e007      	b.n	8016cd0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	699a      	ldr	r2, [r3, #24]
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	f042 0208 	orr.w	r2, r2, #8
 8016cce:	619a      	str	r2, [r3, #24]
}
 8016cd0:	bf00      	nop
 8016cd2:	37b8      	adds	r7, #184	; 0xb8
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}
 8016cd8:	effffffe 	.word	0xeffffffe
 8016cdc:	58000c00 	.word	0x58000c00
 8016ce0:	08016465 	.word	0x08016465

08016ce4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8016ce4:	b480      	push	{r7}
 8016ce6:	b083      	sub	sp, #12
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016cec:	bf00      	nop
 8016cee:	370c      	adds	r7, #12
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf6:	4770      	bx	lr

08016cf8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016cf8:	b480      	push	{r7}
 8016cfa:	b083      	sub	sp, #12
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016d00:	bf00      	nop
 8016d02:	370c      	adds	r7, #12
 8016d04:	46bd      	mov	sp, r7
 8016d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0a:	4770      	bx	lr

08016d0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016d0c:	b480      	push	{r7}
 8016d0e:	b083      	sub	sp, #12
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8016d14:	bf00      	nop
 8016d16:	370c      	adds	r7, #12
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1e:	4770      	bx	lr

08016d20 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016d20:	b480      	push	{r7}
 8016d22:	b089      	sub	sp, #36	; 0x24
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016d2e:	2b01      	cmp	r3, #1
 8016d30:	d101      	bne.n	8016d36 <HAL_UARTEx_EnableStopMode+0x16>
 8016d32:	2302      	movs	r3, #2
 8016d34:	e021      	b.n	8016d7a <HAL_UARTEx_EnableStopMode+0x5a>
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	2201      	movs	r2, #1
 8016d3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	e853 3f00 	ldrex	r3, [r3]
 8016d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8016d4c:	68bb      	ldr	r3, [r7, #8]
 8016d4e:	f043 0302 	orr.w	r3, r3, #2
 8016d52:	61fb      	str	r3, [r7, #28]
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	461a      	mov	r2, r3
 8016d5a:	69fb      	ldr	r3, [r7, #28]
 8016d5c:	61bb      	str	r3, [r7, #24]
 8016d5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d60:	6979      	ldr	r1, [r7, #20]
 8016d62:	69ba      	ldr	r2, [r7, #24]
 8016d64:	e841 2300 	strex	r3, r2, [r1]
 8016d68:	613b      	str	r3, [r7, #16]
   return(result);
 8016d6a:	693b      	ldr	r3, [r7, #16]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d1e6      	bne.n	8016d3e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	2200      	movs	r2, #0
 8016d74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016d78:	2300      	movs	r3, #0
}
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	3724      	adds	r7, #36	; 0x24
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d84:	4770      	bx	lr

08016d86 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8016d86:	b580      	push	{r7, lr}
 8016d88:	b084      	sub	sp, #16
 8016d8a:	af00      	add	r7, sp, #0
 8016d8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016d94:	2b01      	cmp	r3, #1
 8016d96:	d101      	bne.n	8016d9c <HAL_UARTEx_EnableFifoMode+0x16>
 8016d98:	2302      	movs	r3, #2
 8016d9a:	e02b      	b.n	8016df4 <HAL_UARTEx_EnableFifoMode+0x6e>
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	2201      	movs	r2, #1
 8016da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2224      	movs	r2, #36	; 0x24
 8016da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	681a      	ldr	r2, [r3, #0]
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	f022 0201 	bic.w	r2, r2, #1
 8016dc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016dca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8016dd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	68fa      	ldr	r2, [r7, #12]
 8016dda:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f000 f8c3 	bl	8016f68 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	2220      	movs	r2, #32
 8016de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2200      	movs	r2, #0
 8016dee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016df2:	2300      	movs	r3, #0
}
 8016df4:	4618      	mov	r0, r3
 8016df6:	3710      	adds	r7, #16
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}

08016dfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016dfc:	b480      	push	{r7}
 8016dfe:	b085      	sub	sp, #20
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016e0a:	2b01      	cmp	r3, #1
 8016e0c:	d101      	bne.n	8016e12 <HAL_UARTEx_DisableFifoMode+0x16>
 8016e0e:	2302      	movs	r3, #2
 8016e10:	e027      	b.n	8016e62 <HAL_UARTEx_DisableFifoMode+0x66>
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2201      	movs	r2, #1
 8016e16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	2224      	movs	r2, #36	; 0x24
 8016e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	681a      	ldr	r2, [r3, #0]
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	f022 0201 	bic.w	r2, r2, #1
 8016e38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016e40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2200      	movs	r2, #0
 8016e46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	68fa      	ldr	r2, [r7, #12]
 8016e4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	2220      	movs	r2, #32
 8016e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016e60:	2300      	movs	r3, #0
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	3714      	adds	r7, #20
 8016e66:	46bd      	mov	sp, r7
 8016e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6c:	4770      	bx	lr

08016e6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016e6e:	b580      	push	{r7, lr}
 8016e70:	b084      	sub	sp, #16
 8016e72:	af00      	add	r7, sp, #0
 8016e74:	6078      	str	r0, [r7, #4]
 8016e76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016e7e:	2b01      	cmp	r3, #1
 8016e80:	d101      	bne.n	8016e86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016e82:	2302      	movs	r3, #2
 8016e84:	e02d      	b.n	8016ee2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	2201      	movs	r2, #1
 8016e8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	2224      	movs	r2, #36	; 0x24
 8016e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	681a      	ldr	r2, [r3, #0]
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	f022 0201 	bic.w	r2, r2, #1
 8016eac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	689b      	ldr	r3, [r3, #8]
 8016eb4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	683a      	ldr	r2, [r7, #0]
 8016ebe:	430a      	orrs	r2, r1
 8016ec0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f000 f850 	bl	8016f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	68fa      	ldr	r2, [r7, #12]
 8016ece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	2220      	movs	r2, #32
 8016ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	2200      	movs	r2, #0
 8016edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016ee0:	2300      	movs	r3, #0
}
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	3710      	adds	r7, #16
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}

08016eea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016eea:	b580      	push	{r7, lr}
 8016eec:	b084      	sub	sp, #16
 8016eee:	af00      	add	r7, sp, #0
 8016ef0:	6078      	str	r0, [r7, #4]
 8016ef2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016efa:	2b01      	cmp	r3, #1
 8016efc:	d101      	bne.n	8016f02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016efe:	2302      	movs	r3, #2
 8016f00:	e02d      	b.n	8016f5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2201      	movs	r2, #1
 8016f06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2224      	movs	r2, #36	; 0x24
 8016f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	681a      	ldr	r2, [r3, #0]
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	f022 0201 	bic.w	r2, r2, #1
 8016f28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	689b      	ldr	r3, [r3, #8]
 8016f30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	683a      	ldr	r2, [r7, #0]
 8016f3a:	430a      	orrs	r2, r1
 8016f3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016f3e:	6878      	ldr	r0, [r7, #4]
 8016f40:	f000 f812 	bl	8016f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	68fa      	ldr	r2, [r7, #12]
 8016f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	2220      	movs	r2, #32
 8016f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2200      	movs	r2, #0
 8016f58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016f5c:	2300      	movs	r3, #0
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	3710      	adds	r7, #16
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd80      	pop	{r7, pc}
	...

08016f68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016f68:	b480      	push	{r7}
 8016f6a:	b085      	sub	sp, #20
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d108      	bne.n	8016f8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	2201      	movs	r2, #1
 8016f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	2201      	movs	r2, #1
 8016f84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016f88:	e031      	b.n	8016fee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016f8a:	2310      	movs	r3, #16
 8016f8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016f8e:	2310      	movs	r3, #16
 8016f90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	689b      	ldr	r3, [r3, #8]
 8016f98:	0e5b      	lsrs	r3, r3, #25
 8016f9a:	b2db      	uxtb	r3, r3
 8016f9c:	f003 0307 	and.w	r3, r3, #7
 8016fa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	689b      	ldr	r3, [r3, #8]
 8016fa8:	0f5b      	lsrs	r3, r3, #29
 8016faa:	b2db      	uxtb	r3, r3
 8016fac:	f003 0307 	and.w	r3, r3, #7
 8016fb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016fb2:	7bbb      	ldrb	r3, [r7, #14]
 8016fb4:	7b3a      	ldrb	r2, [r7, #12]
 8016fb6:	4911      	ldr	r1, [pc, #68]	; (8016ffc <UARTEx_SetNbDataToProcess+0x94>)
 8016fb8:	5c8a      	ldrb	r2, [r1, r2]
 8016fba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016fbe:	7b3a      	ldrb	r2, [r7, #12]
 8016fc0:	490f      	ldr	r1, [pc, #60]	; (8017000 <UARTEx_SetNbDataToProcess+0x98>)
 8016fc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016fc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8016fc8:	b29a      	uxth	r2, r3
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016fd0:	7bfb      	ldrb	r3, [r7, #15]
 8016fd2:	7b7a      	ldrb	r2, [r7, #13]
 8016fd4:	4909      	ldr	r1, [pc, #36]	; (8016ffc <UARTEx_SetNbDataToProcess+0x94>)
 8016fd6:	5c8a      	ldrb	r2, [r1, r2]
 8016fd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016fdc:	7b7a      	ldrb	r2, [r7, #13]
 8016fde:	4908      	ldr	r1, [pc, #32]	; (8017000 <UARTEx_SetNbDataToProcess+0x98>)
 8016fe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016fe2:	fb93 f3f2 	sdiv	r3, r3, r2
 8016fe6:	b29a      	uxth	r2, r3
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016fee:	bf00      	nop
 8016ff0:	3714      	adds	r7, #20
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff8:	4770      	bx	lr
 8016ffa:	bf00      	nop
 8016ffc:	0801b594 	.word	0x0801b594
 8017000:	0801b59c 	.word	0x0801b59c

08017004 <__NVIC_SetPriority>:
{
 8017004:	b480      	push	{r7}
 8017006:	b083      	sub	sp, #12
 8017008:	af00      	add	r7, sp, #0
 801700a:	4603      	mov	r3, r0
 801700c:	6039      	str	r1, [r7, #0]
 801700e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8017010:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017014:	2b00      	cmp	r3, #0
 8017016:	db0a      	blt.n	801702e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	b2da      	uxtb	r2, r3
 801701c:	490c      	ldr	r1, [pc, #48]	; (8017050 <__NVIC_SetPriority+0x4c>)
 801701e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017022:	0112      	lsls	r2, r2, #4
 8017024:	b2d2      	uxtb	r2, r2
 8017026:	440b      	add	r3, r1
 8017028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801702c:	e00a      	b.n	8017044 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	b2da      	uxtb	r2, r3
 8017032:	4908      	ldr	r1, [pc, #32]	; (8017054 <__NVIC_SetPriority+0x50>)
 8017034:	88fb      	ldrh	r3, [r7, #6]
 8017036:	f003 030f 	and.w	r3, r3, #15
 801703a:	3b04      	subs	r3, #4
 801703c:	0112      	lsls	r2, r2, #4
 801703e:	b2d2      	uxtb	r2, r2
 8017040:	440b      	add	r3, r1
 8017042:	761a      	strb	r2, [r3, #24]
}
 8017044:	bf00      	nop
 8017046:	370c      	adds	r7, #12
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr
 8017050:	e000e100 	.word	0xe000e100
 8017054:	e000ed00 	.word	0xe000ed00

08017058 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017058:	b580      	push	{r7, lr}
 801705a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801705c:	4b05      	ldr	r3, [pc, #20]	; (8017074 <SysTick_Handler+0x1c>)
 801705e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017060:	f002 faa0 	bl	80195a4 <xTaskGetSchedulerState>
 8017064:	4603      	mov	r3, r0
 8017066:	2b01      	cmp	r3, #1
 8017068:	d001      	beq.n	801706e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801706a:	f003 f8bd 	bl	801a1e8 <xPortSysTickHandler>
  }
}
 801706e:	bf00      	nop
 8017070:	bd80      	pop	{r7, pc}
 8017072:	bf00      	nop
 8017074:	e000e010 	.word	0xe000e010

08017078 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017078:	b580      	push	{r7, lr}
 801707a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801707c:	2100      	movs	r1, #0
 801707e:	f06f 0004 	mvn.w	r0, #4
 8017082:	f7ff ffbf 	bl	8017004 <__NVIC_SetPriority>
#endif
}
 8017086:	bf00      	nop
 8017088:	bd80      	pop	{r7, pc}
	...

0801708c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801708c:	b480      	push	{r7}
 801708e:	b083      	sub	sp, #12
 8017090:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017092:	f3ef 8305 	mrs	r3, IPSR
 8017096:	603b      	str	r3, [r7, #0]
  return(result);
 8017098:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801709a:	2b00      	cmp	r3, #0
 801709c:	d003      	beq.n	80170a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801709e:	f06f 0305 	mvn.w	r3, #5
 80170a2:	607b      	str	r3, [r7, #4]
 80170a4:	e00c      	b.n	80170c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80170a6:	4b0a      	ldr	r3, [pc, #40]	; (80170d0 <osKernelInitialize+0x44>)
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d105      	bne.n	80170ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80170ae:	4b08      	ldr	r3, [pc, #32]	; (80170d0 <osKernelInitialize+0x44>)
 80170b0:	2201      	movs	r2, #1
 80170b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80170b4:	2300      	movs	r3, #0
 80170b6:	607b      	str	r3, [r7, #4]
 80170b8:	e002      	b.n	80170c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80170ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80170c0:	687b      	ldr	r3, [r7, #4]
}
 80170c2:	4618      	mov	r0, r3
 80170c4:	370c      	adds	r7, #12
 80170c6:	46bd      	mov	sp, r7
 80170c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170cc:	4770      	bx	lr
 80170ce:	bf00      	nop
 80170d0:	2400201c 	.word	0x2400201c

080170d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b082      	sub	sp, #8
 80170d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170da:	f3ef 8305 	mrs	r3, IPSR
 80170de:	603b      	str	r3, [r7, #0]
  return(result);
 80170e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d003      	beq.n	80170ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80170e6:	f06f 0305 	mvn.w	r3, #5
 80170ea:	607b      	str	r3, [r7, #4]
 80170ec:	e010      	b.n	8017110 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80170ee:	4b0b      	ldr	r3, [pc, #44]	; (801711c <osKernelStart+0x48>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	2b01      	cmp	r3, #1
 80170f4:	d109      	bne.n	801710a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80170f6:	f7ff ffbf 	bl	8017078 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80170fa:	4b08      	ldr	r3, [pc, #32]	; (801711c <osKernelStart+0x48>)
 80170fc:	2202      	movs	r2, #2
 80170fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017100:	f001 fd54 	bl	8018bac <vTaskStartScheduler>
      stat = osOK;
 8017104:	2300      	movs	r3, #0
 8017106:	607b      	str	r3, [r7, #4]
 8017108:	e002      	b.n	8017110 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801710a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801710e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017110:	687b      	ldr	r3, [r7, #4]
}
 8017112:	4618      	mov	r0, r3
 8017114:	3708      	adds	r7, #8
 8017116:	46bd      	mov	sp, r7
 8017118:	bd80      	pop	{r7, pc}
 801711a:	bf00      	nop
 801711c:	2400201c 	.word	0x2400201c

08017120 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017120:	b580      	push	{r7, lr}
 8017122:	b08e      	sub	sp, #56	; 0x38
 8017124:	af04      	add	r7, sp, #16
 8017126:	60f8      	str	r0, [r7, #12]
 8017128:	60b9      	str	r1, [r7, #8]
 801712a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801712c:	2300      	movs	r3, #0
 801712e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017130:	f3ef 8305 	mrs	r3, IPSR
 8017134:	617b      	str	r3, [r7, #20]
  return(result);
 8017136:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8017138:	2b00      	cmp	r3, #0
 801713a:	d17e      	bne.n	801723a <osThreadNew+0x11a>
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d07b      	beq.n	801723a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017142:	2380      	movs	r3, #128	; 0x80
 8017144:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8017146:	2318      	movs	r3, #24
 8017148:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801714a:	2300      	movs	r3, #0
 801714c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801714e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017152:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d045      	beq.n	80171e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d002      	beq.n	8017168 <osThreadNew+0x48>
        name = attr->name;
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	699b      	ldr	r3, [r3, #24]
 801716c:	2b00      	cmp	r3, #0
 801716e:	d002      	beq.n	8017176 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	699b      	ldr	r3, [r3, #24]
 8017174:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017176:	69fb      	ldr	r3, [r7, #28]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d008      	beq.n	801718e <osThreadNew+0x6e>
 801717c:	69fb      	ldr	r3, [r7, #28]
 801717e:	2b38      	cmp	r3, #56	; 0x38
 8017180:	d805      	bhi.n	801718e <osThreadNew+0x6e>
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	685b      	ldr	r3, [r3, #4]
 8017186:	f003 0301 	and.w	r3, r3, #1
 801718a:	2b00      	cmp	r3, #0
 801718c:	d001      	beq.n	8017192 <osThreadNew+0x72>
        return (NULL);
 801718e:	2300      	movs	r3, #0
 8017190:	e054      	b.n	801723c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	695b      	ldr	r3, [r3, #20]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d003      	beq.n	80171a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	695b      	ldr	r3, [r3, #20]
 801719e:	089b      	lsrs	r3, r3, #2
 80171a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	689b      	ldr	r3, [r3, #8]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d00e      	beq.n	80171c8 <osThreadNew+0xa8>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	68db      	ldr	r3, [r3, #12]
 80171ae:	2b5b      	cmp	r3, #91	; 0x5b
 80171b0:	d90a      	bls.n	80171c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d006      	beq.n	80171c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	695b      	ldr	r3, [r3, #20]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d002      	beq.n	80171c8 <osThreadNew+0xa8>
        mem = 1;
 80171c2:	2301      	movs	r3, #1
 80171c4:	61bb      	str	r3, [r7, #24]
 80171c6:	e010      	b.n	80171ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	689b      	ldr	r3, [r3, #8]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d10c      	bne.n	80171ea <osThreadNew+0xca>
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	68db      	ldr	r3, [r3, #12]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d108      	bne.n	80171ea <osThreadNew+0xca>
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	691b      	ldr	r3, [r3, #16]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d104      	bne.n	80171ea <osThreadNew+0xca>
          mem = 0;
 80171e0:	2300      	movs	r3, #0
 80171e2:	61bb      	str	r3, [r7, #24]
 80171e4:	e001      	b.n	80171ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80171e6:	2300      	movs	r3, #0
 80171e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80171ea:	69bb      	ldr	r3, [r7, #24]
 80171ec:	2b01      	cmp	r3, #1
 80171ee:	d110      	bne.n	8017212 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80171f4:	687a      	ldr	r2, [r7, #4]
 80171f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80171f8:	9202      	str	r2, [sp, #8]
 80171fa:	9301      	str	r3, [sp, #4]
 80171fc:	69fb      	ldr	r3, [r7, #28]
 80171fe:	9300      	str	r3, [sp, #0]
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	6a3a      	ldr	r2, [r7, #32]
 8017204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017206:	68f8      	ldr	r0, [r7, #12]
 8017208:	f001 f9f4 	bl	80185f4 <xTaskCreateStatic>
 801720c:	4603      	mov	r3, r0
 801720e:	613b      	str	r3, [r7, #16]
 8017210:	e013      	b.n	801723a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017212:	69bb      	ldr	r3, [r7, #24]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d110      	bne.n	801723a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017218:	6a3b      	ldr	r3, [r7, #32]
 801721a:	b29a      	uxth	r2, r3
 801721c:	f107 0310 	add.w	r3, r7, #16
 8017220:	9301      	str	r3, [sp, #4]
 8017222:	69fb      	ldr	r3, [r7, #28]
 8017224:	9300      	str	r3, [sp, #0]
 8017226:	68bb      	ldr	r3, [r7, #8]
 8017228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801722a:	68f8      	ldr	r0, [r7, #12]
 801722c:	f001 fa3f 	bl	80186ae <xTaskCreate>
 8017230:	4603      	mov	r3, r0
 8017232:	2b01      	cmp	r3, #1
 8017234:	d001      	beq.n	801723a <osThreadNew+0x11a>
            hTask = NULL;
 8017236:	2300      	movs	r3, #0
 8017238:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801723a:	693b      	ldr	r3, [r7, #16]
}
 801723c:	4618      	mov	r0, r3
 801723e:	3728      	adds	r7, #40	; 0x28
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}

08017244 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8017244:	b480      	push	{r7}
 8017246:	b083      	sub	sp, #12
 8017248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801724a:	f3ef 8305 	mrs	r3, IPSR
 801724e:	603b      	str	r3, [r7, #0]
  return(result);
 8017250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017252:	2b00      	cmp	r3, #0
 8017254:	d003      	beq.n	801725e <osThreadYield+0x1a>
    stat = osErrorISR;
 8017256:	f06f 0305 	mvn.w	r3, #5
 801725a:	607b      	str	r3, [r7, #4]
 801725c:	e009      	b.n	8017272 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801725e:	2300      	movs	r3, #0
 8017260:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8017262:	4b07      	ldr	r3, [pc, #28]	; (8017280 <osThreadYield+0x3c>)
 8017264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017268:	601a      	str	r2, [r3, #0]
 801726a:	f3bf 8f4f 	dsb	sy
 801726e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8017272:	687b      	ldr	r3, [r7, #4]
}
 8017274:	4618      	mov	r0, r3
 8017276:	370c      	adds	r7, #12
 8017278:	46bd      	mov	sp, r7
 801727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727e:	4770      	bx	lr
 8017280:	e000ed04 	.word	0xe000ed04

08017284 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8017284:	b580      	push	{r7, lr}
 8017286:	b086      	sub	sp, #24
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017290:	f3ef 8305 	mrs	r3, IPSR
 8017294:	60fb      	str	r3, [r7, #12]
  return(result);
 8017296:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017298:	2b00      	cmp	r3, #0
 801729a:	d003      	beq.n	80172a4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801729c:	f06f 0305 	mvn.w	r3, #5
 80172a0:	617b      	str	r3, [r7, #20]
 80172a2:	e00b      	b.n	80172bc <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80172a4:	693b      	ldr	r3, [r7, #16]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d103      	bne.n	80172b2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80172aa:	f06f 0303 	mvn.w	r3, #3
 80172ae:	617b      	str	r3, [r7, #20]
 80172b0:	e004      	b.n	80172bc <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80172b2:	2300      	movs	r3, #0
 80172b4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80172b6:	6938      	ldr	r0, [r7, #16]
 80172b8:	f001 fb72 	bl	80189a0 <vTaskSuspend>
  }

  return (stat);
 80172bc:	697b      	ldr	r3, [r7, #20]
}
 80172be:	4618      	mov	r0, r3
 80172c0:	3718      	adds	r7, #24
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd80      	pop	{r7, pc}

080172c6 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80172c6:	b580      	push	{r7, lr}
 80172c8:	b086      	sub	sp, #24
 80172ca:	af00      	add	r7, sp, #0
 80172cc:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80172d2:	f3ef 8305 	mrs	r3, IPSR
 80172d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80172d8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d003      	beq.n	80172e6 <osThreadResume+0x20>
    stat = osErrorISR;
 80172de:	f06f 0305 	mvn.w	r3, #5
 80172e2:	617b      	str	r3, [r7, #20]
 80172e4:	e00b      	b.n	80172fe <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80172e6:	693b      	ldr	r3, [r7, #16]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d103      	bne.n	80172f4 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80172ec:	f06f 0303 	mvn.w	r3, #3
 80172f0:	617b      	str	r3, [r7, #20]
 80172f2:	e004      	b.n	80172fe <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80172f4:	2300      	movs	r3, #0
 80172f6:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80172f8:	6938      	ldr	r0, [r7, #16]
 80172fa:	f001 fbf9 	bl	8018af0 <vTaskResume>
  }

  return (stat);
 80172fe:	697b      	ldr	r3, [r7, #20]
}
 8017300:	4618      	mov	r0, r3
 8017302:	3718      	adds	r7, #24
 8017304:	46bd      	mov	sp, r7
 8017306:	bd80      	pop	{r7, pc}

08017308 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017308:	b580      	push	{r7, lr}
 801730a:	b084      	sub	sp, #16
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017310:	f3ef 8305 	mrs	r3, IPSR
 8017314:	60bb      	str	r3, [r7, #8]
  return(result);
 8017316:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017318:	2b00      	cmp	r3, #0
 801731a:	d003      	beq.n	8017324 <osDelay+0x1c>
    stat = osErrorISR;
 801731c:	f06f 0305 	mvn.w	r3, #5
 8017320:	60fb      	str	r3, [r7, #12]
 8017322:	e007      	b.n	8017334 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017324:	2300      	movs	r3, #0
 8017326:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d002      	beq.n	8017334 <osDelay+0x2c>
      vTaskDelay(ticks);
 801732e:	6878      	ldr	r0, [r7, #4]
 8017330:	f001 fb02 	bl	8018938 <vTaskDelay>
    }
  }

  return (stat);
 8017334:	68fb      	ldr	r3, [r7, #12]
}
 8017336:	4618      	mov	r0, r3
 8017338:	3710      	adds	r7, #16
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}

0801733e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801733e:	b580      	push	{r7, lr}
 8017340:	b086      	sub	sp, #24
 8017342:	af00      	add	r7, sp, #0
 8017344:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8017346:	2300      	movs	r3, #0
 8017348:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801734a:	f3ef 8305 	mrs	r3, IPSR
 801734e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017350:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8017352:	2b00      	cmp	r3, #0
 8017354:	d12d      	bne.n	80173b2 <osEventFlagsNew+0x74>
    mem = -1;
 8017356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801735a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d015      	beq.n	801738e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	689b      	ldr	r3, [r3, #8]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d006      	beq.n	8017378 <osEventFlagsNew+0x3a>
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	68db      	ldr	r3, [r3, #12]
 801736e:	2b1f      	cmp	r3, #31
 8017370:	d902      	bls.n	8017378 <osEventFlagsNew+0x3a>
        mem = 1;
 8017372:	2301      	movs	r3, #1
 8017374:	613b      	str	r3, [r7, #16]
 8017376:	e00c      	b.n	8017392 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	689b      	ldr	r3, [r3, #8]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d108      	bne.n	8017392 <osEventFlagsNew+0x54>
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	68db      	ldr	r3, [r3, #12]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d104      	bne.n	8017392 <osEventFlagsNew+0x54>
          mem = 0;
 8017388:	2300      	movs	r3, #0
 801738a:	613b      	str	r3, [r7, #16]
 801738c:	e001      	b.n	8017392 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801738e:	2300      	movs	r3, #0
 8017390:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8017392:	693b      	ldr	r3, [r7, #16]
 8017394:	2b01      	cmp	r3, #1
 8017396:	d106      	bne.n	80173a6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	689b      	ldr	r3, [r3, #8]
 801739c:	4618      	mov	r0, r3
 801739e:	f000 f91d 	bl	80175dc <xEventGroupCreateStatic>
 80173a2:	6178      	str	r0, [r7, #20]
 80173a4:	e005      	b.n	80173b2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80173a6:	693b      	ldr	r3, [r7, #16]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d102      	bne.n	80173b2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80173ac:	f000 f94d 	bl	801764a <xEventGroupCreate>
 80173b0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80173b2:	697b      	ldr	r3, [r7, #20]
}
 80173b4:	4618      	mov	r0, r3
 80173b6:	3718      	adds	r7, #24
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}

080173bc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80173bc:	b580      	push	{r7, lr}
 80173be:	b086      	sub	sp, #24
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
 80173c4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80173ca:	693b      	ldr	r3, [r7, #16]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d004      	beq.n	80173da <osEventFlagsSet+0x1e>
 80173d0:	683b      	ldr	r3, [r7, #0]
 80173d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d003      	beq.n	80173e2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80173da:	f06f 0303 	mvn.w	r3, #3
 80173de:	617b      	str	r3, [r7, #20]
 80173e0:	e028      	b.n	8017434 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80173e2:	f3ef 8305 	mrs	r3, IPSR
 80173e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80173e8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d01d      	beq.n	801742a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80173ee:	2300      	movs	r3, #0
 80173f0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80173f2:	f107 0308 	add.w	r3, r7, #8
 80173f6:	461a      	mov	r2, r3
 80173f8:	6839      	ldr	r1, [r7, #0]
 80173fa:	6938      	ldr	r0, [r7, #16]
 80173fc:	f000 fb46 	bl	8017a8c <xEventGroupSetBitsFromISR>
 8017400:	4603      	mov	r3, r0
 8017402:	2b00      	cmp	r3, #0
 8017404:	d103      	bne.n	801740e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8017406:	f06f 0302 	mvn.w	r3, #2
 801740a:	617b      	str	r3, [r7, #20]
 801740c:	e012      	b.n	8017434 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801740e:	683b      	ldr	r3, [r7, #0]
 8017410:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8017412:	68bb      	ldr	r3, [r7, #8]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d00d      	beq.n	8017434 <osEventFlagsSet+0x78>
 8017418:	4b09      	ldr	r3, [pc, #36]	; (8017440 <osEventFlagsSet+0x84>)
 801741a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801741e:	601a      	str	r2, [r3, #0]
 8017420:	f3bf 8f4f 	dsb	sy
 8017424:	f3bf 8f6f 	isb	sy
 8017428:	e004      	b.n	8017434 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801742a:	6839      	ldr	r1, [r7, #0]
 801742c:	6938      	ldr	r0, [r7, #16]
 801742e:	f000 fa65 	bl	80178fc <xEventGroupSetBits>
 8017432:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8017434:	697b      	ldr	r3, [r7, #20]
}
 8017436:	4618      	mov	r0, r3
 8017438:	3718      	adds	r7, #24
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}
 801743e:	bf00      	nop
 8017440:	e000ed04 	.word	0xe000ed04

08017444 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8017444:	b580      	push	{r7, lr}
 8017446:	b086      	sub	sp, #24
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
 801744c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8017452:	693b      	ldr	r3, [r7, #16]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d004      	beq.n	8017462 <osEventFlagsClear+0x1e>
 8017458:	683b      	ldr	r3, [r7, #0]
 801745a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801745e:	2b00      	cmp	r3, #0
 8017460:	d003      	beq.n	801746a <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8017462:	f06f 0303 	mvn.w	r3, #3
 8017466:	617b      	str	r3, [r7, #20]
 8017468:	e019      	b.n	801749e <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801746a:	f3ef 8305 	mrs	r3, IPSR
 801746e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017470:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017472:	2b00      	cmp	r3, #0
 8017474:	d00e      	beq.n	8017494 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8017476:	6938      	ldr	r0, [r7, #16]
 8017478:	f000 fa1c 	bl	80178b4 <xEventGroupGetBitsFromISR>
 801747c:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801747e:	6839      	ldr	r1, [r7, #0]
 8017480:	6938      	ldr	r0, [r7, #16]
 8017482:	f000 fa03 	bl	801788c <xEventGroupClearBitsFromISR>
 8017486:	4603      	mov	r3, r0
 8017488:	2b00      	cmp	r3, #0
 801748a:	d108      	bne.n	801749e <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 801748c:	f06f 0302 	mvn.w	r3, #2
 8017490:	617b      	str	r3, [r7, #20]
 8017492:	e004      	b.n	801749e <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8017494:	6839      	ldr	r1, [r7, #0]
 8017496:	6938      	ldr	r0, [r7, #16]
 8017498:	f000 f9c0 	bl	801781c <xEventGroupClearBits>
 801749c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801749e:	697b      	ldr	r3, [r7, #20]
}
 80174a0:	4618      	mov	r0, r3
 80174a2:	3718      	adds	r7, #24
 80174a4:	46bd      	mov	sp, r7
 80174a6:	bd80      	pop	{r7, pc}

080174a8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b08c      	sub	sp, #48	; 0x30
 80174ac:	af02      	add	r7, sp, #8
 80174ae:	60f8      	str	r0, [r7, #12]
 80174b0:	60b9      	str	r1, [r7, #8]
 80174b2:	607a      	str	r2, [r7, #4]
 80174b4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80174ba:	69bb      	ldr	r3, [r7, #24]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d004      	beq.n	80174ca <osEventFlagsWait+0x22>
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d003      	beq.n	80174d2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80174ca:	f06f 0303 	mvn.w	r3, #3
 80174ce:	61fb      	str	r3, [r7, #28]
 80174d0:	e04b      	b.n	801756a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80174d2:	f3ef 8305 	mrs	r3, IPSR
 80174d6:	617b      	str	r3, [r7, #20]
  return(result);
 80174d8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d003      	beq.n	80174e6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80174de:	f06f 0305 	mvn.w	r3, #5
 80174e2:	61fb      	str	r3, [r7, #28]
 80174e4:	e041      	b.n	801756a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	f003 0301 	and.w	r3, r3, #1
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d002      	beq.n	80174f6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80174f0:	2301      	movs	r3, #1
 80174f2:	627b      	str	r3, [r7, #36]	; 0x24
 80174f4:	e001      	b.n	80174fa <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80174f6:	2300      	movs	r3, #0
 80174f8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	f003 0302 	and.w	r3, r3, #2
 8017500:	2b00      	cmp	r3, #0
 8017502:	d002      	beq.n	801750a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8017504:	2300      	movs	r3, #0
 8017506:	623b      	str	r3, [r7, #32]
 8017508:	e001      	b.n	801750e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801750a:	2301      	movs	r3, #1
 801750c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	9300      	str	r3, [sp, #0]
 8017512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017514:	6a3a      	ldr	r2, [r7, #32]
 8017516:	68b9      	ldr	r1, [r7, #8]
 8017518:	69b8      	ldr	r0, [r7, #24]
 801751a:	f000 f8b1 	bl	8017680 <xEventGroupWaitBits>
 801751e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f003 0301 	and.w	r3, r3, #1
 8017526:	2b00      	cmp	r3, #0
 8017528:	d010      	beq.n	801754c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801752a:	68ba      	ldr	r2, [r7, #8]
 801752c:	69fb      	ldr	r3, [r7, #28]
 801752e:	4013      	ands	r3, r2
 8017530:	68ba      	ldr	r2, [r7, #8]
 8017532:	429a      	cmp	r2, r3
 8017534:	d019      	beq.n	801756a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8017536:	683b      	ldr	r3, [r7, #0]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d003      	beq.n	8017544 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801753c:	f06f 0301 	mvn.w	r3, #1
 8017540:	61fb      	str	r3, [r7, #28]
 8017542:	e012      	b.n	801756a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017544:	f06f 0302 	mvn.w	r3, #2
 8017548:	61fb      	str	r3, [r7, #28]
 801754a:	e00e      	b.n	801756a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801754c:	68ba      	ldr	r2, [r7, #8]
 801754e:	69fb      	ldr	r3, [r7, #28]
 8017550:	4013      	ands	r3, r2
 8017552:	2b00      	cmp	r3, #0
 8017554:	d109      	bne.n	801756a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8017556:	683b      	ldr	r3, [r7, #0]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d003      	beq.n	8017564 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801755c:	f06f 0301 	mvn.w	r3, #1
 8017560:	61fb      	str	r3, [r7, #28]
 8017562:	e002      	b.n	801756a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017564:	f06f 0302 	mvn.w	r3, #2
 8017568:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801756a:	69fb      	ldr	r3, [r7, #28]
}
 801756c:	4618      	mov	r0, r3
 801756e:	3728      	adds	r7, #40	; 0x28
 8017570:	46bd      	mov	sp, r7
 8017572:	bd80      	pop	{r7, pc}

08017574 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017574:	b480      	push	{r7}
 8017576:	b085      	sub	sp, #20
 8017578:	af00      	add	r7, sp, #0
 801757a:	60f8      	str	r0, [r7, #12]
 801757c:	60b9      	str	r1, [r7, #8]
 801757e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	4a07      	ldr	r2, [pc, #28]	; (80175a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8017584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017586:	68bb      	ldr	r3, [r7, #8]
 8017588:	4a06      	ldr	r2, [pc, #24]	; (80175a4 <vApplicationGetIdleTaskMemory+0x30>)
 801758a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	2280      	movs	r2, #128	; 0x80
 8017590:	601a      	str	r2, [r3, #0]
}
 8017592:	bf00      	nop
 8017594:	3714      	adds	r7, #20
 8017596:	46bd      	mov	sp, r7
 8017598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759c:	4770      	bx	lr
 801759e:	bf00      	nop
 80175a0:	24002020 	.word	0x24002020
 80175a4:	2400207c 	.word	0x2400207c

080175a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80175a8:	b480      	push	{r7}
 80175aa:	b085      	sub	sp, #20
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	60f8      	str	r0, [r7, #12]
 80175b0:	60b9      	str	r1, [r7, #8]
 80175b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	4a07      	ldr	r2, [pc, #28]	; (80175d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80175b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80175ba:	68bb      	ldr	r3, [r7, #8]
 80175bc:	4a06      	ldr	r2, [pc, #24]	; (80175d8 <vApplicationGetTimerTaskMemory+0x30>)
 80175be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80175c6:	601a      	str	r2, [r3, #0]
}
 80175c8:	bf00      	nop
 80175ca:	3714      	adds	r7, #20
 80175cc:	46bd      	mov	sp, r7
 80175ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d2:	4770      	bx	lr
 80175d4:	2400227c 	.word	0x2400227c
 80175d8:	240022d8 	.word	0x240022d8

080175dc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b086      	sub	sp, #24
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d10a      	bne.n	8017600 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80175ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ee:	f383 8811 	msr	BASEPRI, r3
 80175f2:	f3bf 8f6f 	isb	sy
 80175f6:	f3bf 8f4f 	dsb	sy
 80175fa:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80175fc:	bf00      	nop
 80175fe:	e7fe      	b.n	80175fe <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8017600:	2320      	movs	r3, #32
 8017602:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8017604:	68bb      	ldr	r3, [r7, #8]
 8017606:	2b20      	cmp	r3, #32
 8017608:	d00a      	beq.n	8017620 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801760e:	f383 8811 	msr	BASEPRI, r3
 8017612:	f3bf 8f6f 	isb	sy
 8017616:	f3bf 8f4f 	dsb	sy
 801761a:	60fb      	str	r3, [r7, #12]
}
 801761c:	bf00      	nop
 801761e:	e7fe      	b.n	801761e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8017624:	697b      	ldr	r3, [r7, #20]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d00a      	beq.n	8017640 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	2200      	movs	r2, #0
 801762e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	3304      	adds	r3, #4
 8017634:	4618      	mov	r0, r3
 8017636:	f000 fa3d 	bl	8017ab4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	2201      	movs	r2, #1
 801763e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8017640:	697b      	ldr	r3, [r7, #20]
	}
 8017642:	4618      	mov	r0, r3
 8017644:	3718      	adds	r7, #24
 8017646:	46bd      	mov	sp, r7
 8017648:	bd80      	pop	{r7, pc}

0801764a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801764a:	b580      	push	{r7, lr}
 801764c:	b082      	sub	sp, #8
 801764e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017650:	2020      	movs	r0, #32
 8017652:	f002 fe59 	bl	801a308 <pvPortMalloc>
 8017656:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d00a      	beq.n	8017674 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	2200      	movs	r2, #0
 8017662:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	3304      	adds	r3, #4
 8017668:	4618      	mov	r0, r3
 801766a:	f000 fa23 	bl	8017ab4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	2200      	movs	r2, #0
 8017672:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8017674:	687b      	ldr	r3, [r7, #4]
	}
 8017676:	4618      	mov	r0, r3
 8017678:	3708      	adds	r7, #8
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}
	...

08017680 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b090      	sub	sp, #64	; 0x40
 8017684:	af00      	add	r7, sp, #0
 8017686:	60f8      	str	r0, [r7, #12]
 8017688:	60b9      	str	r1, [r7, #8]
 801768a:	607a      	str	r2, [r7, #4]
 801768c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8017692:	2300      	movs	r3, #0
 8017694:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8017696:	2300      	movs	r3, #0
 8017698:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d10a      	bne.n	80176b6 <xEventGroupWaitBits+0x36>
	__asm volatile
 80176a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a4:	f383 8811 	msr	BASEPRI, r3
 80176a8:	f3bf 8f6f 	isb	sy
 80176ac:	f3bf 8f4f 	dsb	sy
 80176b0:	623b      	str	r3, [r7, #32]
}
 80176b2:	bf00      	nop
 80176b4:	e7fe      	b.n	80176b4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d00a      	beq.n	80176d6 <xEventGroupWaitBits+0x56>
	__asm volatile
 80176c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176c4:	f383 8811 	msr	BASEPRI, r3
 80176c8:	f3bf 8f6f 	isb	sy
 80176cc:	f3bf 8f4f 	dsb	sy
 80176d0:	61fb      	str	r3, [r7, #28]
}
 80176d2:	bf00      	nop
 80176d4:	e7fe      	b.n	80176d4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80176d6:	68bb      	ldr	r3, [r7, #8]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d10a      	bne.n	80176f2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80176dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176e0:	f383 8811 	msr	BASEPRI, r3
 80176e4:	f3bf 8f6f 	isb	sy
 80176e8:	f3bf 8f4f 	dsb	sy
 80176ec:	61bb      	str	r3, [r7, #24]
}
 80176ee:	bf00      	nop
 80176f0:	e7fe      	b.n	80176f0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80176f2:	f001 ff57 	bl	80195a4 <xTaskGetSchedulerState>
 80176f6:	4603      	mov	r3, r0
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d102      	bne.n	8017702 <xEventGroupWaitBits+0x82>
 80176fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d101      	bne.n	8017706 <xEventGroupWaitBits+0x86>
 8017702:	2301      	movs	r3, #1
 8017704:	e000      	b.n	8017708 <xEventGroupWaitBits+0x88>
 8017706:	2300      	movs	r3, #0
 8017708:	2b00      	cmp	r3, #0
 801770a:	d10a      	bne.n	8017722 <xEventGroupWaitBits+0xa2>
	__asm volatile
 801770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017710:	f383 8811 	msr	BASEPRI, r3
 8017714:	f3bf 8f6f 	isb	sy
 8017718:	f3bf 8f4f 	dsb	sy
 801771c:	617b      	str	r3, [r7, #20]
}
 801771e:	bf00      	nop
 8017720:	e7fe      	b.n	8017720 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017722:	f001 faa9 	bl	8018c78 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8017726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801772c:	683a      	ldr	r2, [r7, #0]
 801772e:	68b9      	ldr	r1, [r7, #8]
 8017730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017732:	f000 f988 	bl	8017a46 <prvTestWaitCondition>
 8017736:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8017738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801773a:	2b00      	cmp	r3, #0
 801773c:	d00e      	beq.n	801775c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017740:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8017742:	2300      	movs	r3, #0
 8017744:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d028      	beq.n	801779e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801774c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801774e:	681a      	ldr	r2, [r3, #0]
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	43db      	mvns	r3, r3
 8017754:	401a      	ands	r2, r3
 8017756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017758:	601a      	str	r2, [r3, #0]
 801775a:	e020      	b.n	801779e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801775c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801775e:	2b00      	cmp	r3, #0
 8017760:	d104      	bne.n	801776c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8017762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017764:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8017766:	2301      	movs	r3, #1
 8017768:	633b      	str	r3, [r7, #48]	; 0x30
 801776a:	e018      	b.n	801779e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d003      	beq.n	801777a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8017772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017774:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017778:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d003      	beq.n	8017788 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017786:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8017788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801778a:	1d18      	adds	r0, r3, #4
 801778c:	68ba      	ldr	r2, [r7, #8]
 801778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017790:	4313      	orrs	r3, r2
 8017792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017794:	4619      	mov	r1, r3
 8017796:	f001 fc7d 	bl	8019094 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801779a:	2300      	movs	r3, #0
 801779c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801779e:	f001 fa79 	bl	8018c94 <xTaskResumeAll>
 80177a2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80177a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d031      	beq.n	801780e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80177aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d107      	bne.n	80177c0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80177b0:	4b19      	ldr	r3, [pc, #100]	; (8017818 <xEventGroupWaitBits+0x198>)
 80177b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177b6:	601a      	str	r2, [r3, #0]
 80177b8:	f3bf 8f4f 	dsb	sy
 80177bc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80177c0:	f001 ff7c 	bl	80196bc <uxTaskResetEventItemValue>
 80177c4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80177c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d11a      	bne.n	8017806 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80177d0:	f002 fc78 	bl	801a0c4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80177d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80177da:	683a      	ldr	r2, [r7, #0]
 80177dc:	68b9      	ldr	r1, [r7, #8]
 80177de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80177e0:	f000 f931 	bl	8017a46 <prvTestWaitCondition>
 80177e4:	4603      	mov	r3, r0
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d009      	beq.n	80177fe <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d006      	beq.n	80177fe <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80177f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177f2:	681a      	ldr	r2, [r3, #0]
 80177f4:	68bb      	ldr	r3, [r7, #8]
 80177f6:	43db      	mvns	r3, r3
 80177f8:	401a      	ands	r2, r3
 80177fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177fc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80177fe:	2301      	movs	r3, #1
 8017800:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017802:	f002 fc8f 	bl	801a124 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017808:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801780c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801780e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017810:	4618      	mov	r0, r3
 8017812:	3740      	adds	r7, #64	; 0x40
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}
 8017818:	e000ed04 	.word	0xe000ed04

0801781c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b086      	sub	sp, #24
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]
 8017824:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d10a      	bne.n	8017846 <xEventGroupClearBits+0x2a>
	__asm volatile
 8017830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017834:	f383 8811 	msr	BASEPRI, r3
 8017838:	f3bf 8f6f 	isb	sy
 801783c:	f3bf 8f4f 	dsb	sy
 8017840:	60fb      	str	r3, [r7, #12]
}
 8017842:	bf00      	nop
 8017844:	e7fe      	b.n	8017844 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017846:	683b      	ldr	r3, [r7, #0]
 8017848:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801784c:	2b00      	cmp	r3, #0
 801784e:	d00a      	beq.n	8017866 <xEventGroupClearBits+0x4a>
	__asm volatile
 8017850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017854:	f383 8811 	msr	BASEPRI, r3
 8017858:	f3bf 8f6f 	isb	sy
 801785c:	f3bf 8f4f 	dsb	sy
 8017860:	60bb      	str	r3, [r7, #8]
}
 8017862:	bf00      	nop
 8017864:	e7fe      	b.n	8017864 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8017866:	f002 fc2d 	bl	801a0c4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801786a:	697b      	ldr	r3, [r7, #20]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017870:	697b      	ldr	r3, [r7, #20]
 8017872:	681a      	ldr	r2, [r3, #0]
 8017874:	683b      	ldr	r3, [r7, #0]
 8017876:	43db      	mvns	r3, r3
 8017878:	401a      	ands	r2, r3
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801787e:	f002 fc51 	bl	801a124 <vPortExitCritical>

	return uxReturn;
 8017882:	693b      	ldr	r3, [r7, #16]
}
 8017884:	4618      	mov	r0, r3
 8017886:	3718      	adds	r7, #24
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}

0801788c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 801788c:	b580      	push	{r7, lr}
 801788e:	b084      	sub	sp, #16
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
 8017894:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017896:	2300      	movs	r3, #0
 8017898:	683a      	ldr	r2, [r7, #0]
 801789a:	6879      	ldr	r1, [r7, #4]
 801789c:	4804      	ldr	r0, [pc, #16]	; (80178b0 <xEventGroupClearBitsFromISR+0x24>)
 801789e:	f002 fac7 	bl	8019e30 <xTimerPendFunctionCallFromISR>
 80178a2:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80178a4:	68fb      	ldr	r3, [r7, #12]
	}
 80178a6:	4618      	mov	r0, r3
 80178a8:	3710      	adds	r7, #16
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}
 80178ae:	bf00      	nop
 80178b0:	08017a2d 	.word	0x08017a2d

080178b4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80178b4:	b480      	push	{r7}
 80178b6:	b089      	sub	sp, #36	; 0x24
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80178c0:	f3ef 8211 	mrs	r2, BASEPRI
 80178c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178c8:	f383 8811 	msr	BASEPRI, r3
 80178cc:	f3bf 8f6f 	isb	sy
 80178d0:	f3bf 8f4f 	dsb	sy
 80178d4:	60fa      	str	r2, [r7, #12]
 80178d6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80178d8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80178da:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80178dc:	69fb      	ldr	r3, [r7, #28]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	617b      	str	r3, [r7, #20]
 80178e2:	69bb      	ldr	r3, [r7, #24]
 80178e4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80178e6:	693b      	ldr	r3, [r7, #16]
 80178e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80178ec:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80178ee:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80178f0:	4618      	mov	r0, r3
 80178f2:	3724      	adds	r7, #36	; 0x24
 80178f4:	46bd      	mov	sp, r7
 80178f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fa:	4770      	bx	lr

080178fc <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b08e      	sub	sp, #56	; 0x38
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
 8017904:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8017906:	2300      	movs	r3, #0
 8017908:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801790e:	2300      	movs	r3, #0
 8017910:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d10a      	bne.n	801792e <xEventGroupSetBits+0x32>
	__asm volatile
 8017918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801791c:	f383 8811 	msr	BASEPRI, r3
 8017920:	f3bf 8f6f 	isb	sy
 8017924:	f3bf 8f4f 	dsb	sy
 8017928:	613b      	str	r3, [r7, #16]
}
 801792a:	bf00      	nop
 801792c:	e7fe      	b.n	801792c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017934:	2b00      	cmp	r3, #0
 8017936:	d00a      	beq.n	801794e <xEventGroupSetBits+0x52>
	__asm volatile
 8017938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801793c:	f383 8811 	msr	BASEPRI, r3
 8017940:	f3bf 8f6f 	isb	sy
 8017944:	f3bf 8f4f 	dsb	sy
 8017948:	60fb      	str	r3, [r7, #12]
}
 801794a:	bf00      	nop
 801794c:	e7fe      	b.n	801794c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017950:	3304      	adds	r3, #4
 8017952:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017956:	3308      	adds	r3, #8
 8017958:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801795a:	f001 f98d 	bl	8018c78 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017960:	68db      	ldr	r3, [r3, #12]
 8017962:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017966:	681a      	ldr	r2, [r3, #0]
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	431a      	orrs	r2, r3
 801796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801796e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017970:	e03c      	b.n	80179ec <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017974:	685b      	ldr	r3, [r3, #4]
 8017976:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8017978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801797e:	2300      	movs	r3, #0
 8017980:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017982:	69bb      	ldr	r3, [r7, #24]
 8017984:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017988:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801798a:	69bb      	ldr	r3, [r7, #24]
 801798c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017990:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017992:	697b      	ldr	r3, [r7, #20]
 8017994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017998:	2b00      	cmp	r3, #0
 801799a:	d108      	bne.n	80179ae <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801799e:	681a      	ldr	r2, [r3, #0]
 80179a0:	69bb      	ldr	r3, [r7, #24]
 80179a2:	4013      	ands	r3, r2
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d00b      	beq.n	80179c0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80179a8:	2301      	movs	r3, #1
 80179aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179ac:	e008      	b.n	80179c0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80179ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b0:	681a      	ldr	r2, [r3, #0]
 80179b2:	69bb      	ldr	r3, [r7, #24]
 80179b4:	4013      	ands	r3, r2
 80179b6:	69ba      	ldr	r2, [r7, #24]
 80179b8:	429a      	cmp	r2, r3
 80179ba:	d101      	bne.n	80179c0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80179bc:	2301      	movs	r3, #1
 80179be:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80179c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d010      	beq.n	80179e8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80179c6:	697b      	ldr	r3, [r7, #20]
 80179c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d003      	beq.n	80179d8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80179d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179d2:	69bb      	ldr	r3, [r7, #24]
 80179d4:	4313      	orrs	r3, r2
 80179d6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80179d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80179e0:	4619      	mov	r1, r3
 80179e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80179e4:	f001 fc22 	bl	801922c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80179e8:	69fb      	ldr	r3, [r7, #28]
 80179ea:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80179ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80179ee:	6a3b      	ldr	r3, [r7, #32]
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d1be      	bne.n	8017972 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80179f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179f6:	681a      	ldr	r2, [r3, #0]
 80179f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179fa:	43db      	mvns	r3, r3
 80179fc:	401a      	ands	r2, r3
 80179fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a00:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017a02:	f001 f947 	bl	8018c94 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8017a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a08:	681b      	ldr	r3, [r3, #0]
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	3738      	adds	r7, #56	; 0x38
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}

08017a12 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017a12:	b580      	push	{r7, lr}
 8017a14:	b082      	sub	sp, #8
 8017a16:	af00      	add	r7, sp, #0
 8017a18:	6078      	str	r0, [r7, #4]
 8017a1a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017a1c:	6839      	ldr	r1, [r7, #0]
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f7ff ff6c 	bl	80178fc <xEventGroupSetBits>
}
 8017a24:	bf00      	nop
 8017a26:	3708      	adds	r7, #8
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd80      	pop	{r7, pc}

08017a2c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
 8017a34:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017a36:	6839      	ldr	r1, [r7, #0]
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7ff feef 	bl	801781c <xEventGroupClearBits>
}
 8017a3e:	bf00      	nop
 8017a40:	3708      	adds	r7, #8
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bd80      	pop	{r7, pc}

08017a46 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8017a46:	b480      	push	{r7}
 8017a48:	b087      	sub	sp, #28
 8017a4a:	af00      	add	r7, sp, #0
 8017a4c:	60f8      	str	r0, [r7, #12]
 8017a4e:	60b9      	str	r1, [r7, #8]
 8017a50:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017a52:	2300      	movs	r3, #0
 8017a54:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d107      	bne.n	8017a6c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017a5c:	68fa      	ldr	r2, [r7, #12]
 8017a5e:	68bb      	ldr	r3, [r7, #8]
 8017a60:	4013      	ands	r3, r2
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d00a      	beq.n	8017a7c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017a66:	2301      	movs	r3, #1
 8017a68:	617b      	str	r3, [r7, #20]
 8017a6a:	e007      	b.n	8017a7c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017a6c:	68fa      	ldr	r2, [r7, #12]
 8017a6e:	68bb      	ldr	r3, [r7, #8]
 8017a70:	4013      	ands	r3, r2
 8017a72:	68ba      	ldr	r2, [r7, #8]
 8017a74:	429a      	cmp	r2, r3
 8017a76:	d101      	bne.n	8017a7c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017a78:	2301      	movs	r3, #1
 8017a7a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017a7c:	697b      	ldr	r3, [r7, #20]
}
 8017a7e:	4618      	mov	r0, r3
 8017a80:	371c      	adds	r7, #28
 8017a82:	46bd      	mov	sp, r7
 8017a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a88:	4770      	bx	lr
	...

08017a8c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b086      	sub	sp, #24
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	60f8      	str	r0, [r7, #12]
 8017a94:	60b9      	str	r1, [r7, #8]
 8017a96:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	68ba      	ldr	r2, [r7, #8]
 8017a9c:	68f9      	ldr	r1, [r7, #12]
 8017a9e:	4804      	ldr	r0, [pc, #16]	; (8017ab0 <xEventGroupSetBitsFromISR+0x24>)
 8017aa0:	f002 f9c6 	bl	8019e30 <xTimerPendFunctionCallFromISR>
 8017aa4:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017aa6:	697b      	ldr	r3, [r7, #20]
	}
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	3718      	adds	r7, #24
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}
 8017ab0:	08017a13 	.word	0x08017a13

08017ab4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017ab4:	b480      	push	{r7}
 8017ab6:	b083      	sub	sp, #12
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f103 0208 	add.w	r2, r3, #8
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017acc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	f103 0208 	add.w	r2, r3, #8
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	f103 0208 	add.w	r2, r3, #8
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017ae8:	bf00      	nop
 8017aea:	370c      	adds	r7, #12
 8017aec:	46bd      	mov	sp, r7
 8017aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af2:	4770      	bx	lr

08017af4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017af4:	b480      	push	{r7}
 8017af6:	b083      	sub	sp, #12
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	2200      	movs	r2, #0
 8017b00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017b02:	bf00      	nop
 8017b04:	370c      	adds	r7, #12
 8017b06:	46bd      	mov	sp, r7
 8017b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0c:	4770      	bx	lr

08017b0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017b0e:	b480      	push	{r7}
 8017b10:	b085      	sub	sp, #20
 8017b12:	af00      	add	r7, sp, #0
 8017b14:	6078      	str	r0, [r7, #4]
 8017b16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	685b      	ldr	r3, [r3, #4]
 8017b1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017b1e:	683b      	ldr	r3, [r7, #0]
 8017b20:	68fa      	ldr	r2, [r7, #12]
 8017b22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	689a      	ldr	r2, [r3, #8]
 8017b28:	683b      	ldr	r3, [r7, #0]
 8017b2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	689b      	ldr	r3, [r3, #8]
 8017b30:	683a      	ldr	r2, [r7, #0]
 8017b32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	683a      	ldr	r2, [r7, #0]
 8017b38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017b3a:	683b      	ldr	r3, [r7, #0]
 8017b3c:	687a      	ldr	r2, [r7, #4]
 8017b3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	1c5a      	adds	r2, r3, #1
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	601a      	str	r2, [r3, #0]
}
 8017b4a:	bf00      	nop
 8017b4c:	3714      	adds	r7, #20
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b54:	4770      	bx	lr

08017b56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017b56:	b480      	push	{r7}
 8017b58:	b085      	sub	sp, #20
 8017b5a:	af00      	add	r7, sp, #0
 8017b5c:	6078      	str	r0, [r7, #4]
 8017b5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017b66:	68bb      	ldr	r3, [r7, #8]
 8017b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b6c:	d103      	bne.n	8017b76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	691b      	ldr	r3, [r3, #16]
 8017b72:	60fb      	str	r3, [r7, #12]
 8017b74:	e00c      	b.n	8017b90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	3308      	adds	r3, #8
 8017b7a:	60fb      	str	r3, [r7, #12]
 8017b7c:	e002      	b.n	8017b84 <vListInsert+0x2e>
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	685b      	ldr	r3, [r3, #4]
 8017b82:	60fb      	str	r3, [r7, #12]
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	685b      	ldr	r3, [r3, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	68ba      	ldr	r2, [r7, #8]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d2f6      	bcs.n	8017b7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	685a      	ldr	r2, [r3, #4]
 8017b94:	683b      	ldr	r3, [r7, #0]
 8017b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017b98:	683b      	ldr	r3, [r7, #0]
 8017b9a:	685b      	ldr	r3, [r3, #4]
 8017b9c:	683a      	ldr	r2, [r7, #0]
 8017b9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017ba0:	683b      	ldr	r3, [r7, #0]
 8017ba2:	68fa      	ldr	r2, [r7, #12]
 8017ba4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	683a      	ldr	r2, [r7, #0]
 8017baa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	1c5a      	adds	r2, r3, #1
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	601a      	str	r2, [r3, #0]
}
 8017bbc:	bf00      	nop
 8017bbe:	3714      	adds	r7, #20
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc6:	4770      	bx	lr

08017bc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017bc8:	b480      	push	{r7}
 8017bca:	b085      	sub	sp, #20
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	691b      	ldr	r3, [r3, #16]
 8017bd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	685b      	ldr	r3, [r3, #4]
 8017bda:	687a      	ldr	r2, [r7, #4]
 8017bdc:	6892      	ldr	r2, [r2, #8]
 8017bde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	689b      	ldr	r3, [r3, #8]
 8017be4:	687a      	ldr	r2, [r7, #4]
 8017be6:	6852      	ldr	r2, [r2, #4]
 8017be8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	687a      	ldr	r2, [r7, #4]
 8017bf0:	429a      	cmp	r2, r3
 8017bf2:	d103      	bne.n	8017bfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	689a      	ldr	r2, [r3, #8]
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	2200      	movs	r2, #0
 8017c00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	1e5a      	subs	r2, r3, #1
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	681b      	ldr	r3, [r3, #0]
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	3714      	adds	r7, #20
 8017c14:	46bd      	mov	sp, r7
 8017c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1a:	4770      	bx	lr

08017c1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b084      	sub	sp, #16
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
 8017c24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d10a      	bne.n	8017c46 <xQueueGenericReset+0x2a>
	__asm volatile
 8017c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c34:	f383 8811 	msr	BASEPRI, r3
 8017c38:	f3bf 8f6f 	isb	sy
 8017c3c:	f3bf 8f4f 	dsb	sy
 8017c40:	60bb      	str	r3, [r7, #8]
}
 8017c42:	bf00      	nop
 8017c44:	e7fe      	b.n	8017c44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017c46:	f002 fa3d 	bl	801a0c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	681a      	ldr	r2, [r3, #0]
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c52:	68f9      	ldr	r1, [r7, #12]
 8017c54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017c56:	fb01 f303 	mul.w	r3, r1, r3
 8017c5a:	441a      	add	r2, r3
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	2200      	movs	r2, #0
 8017c64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	681a      	ldr	r2, [r3, #0]
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	681a      	ldr	r2, [r3, #0]
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c76:	3b01      	subs	r3, #1
 8017c78:	68f9      	ldr	r1, [r7, #12]
 8017c7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017c7c:	fb01 f303 	mul.w	r3, r1, r3
 8017c80:	441a      	add	r2, r3
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	22ff      	movs	r2, #255	; 0xff
 8017c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	22ff      	movs	r2, #255	; 0xff
 8017c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d114      	bne.n	8017cc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	691b      	ldr	r3, [r3, #16]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d01a      	beq.n	8017cda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	3310      	adds	r3, #16
 8017ca8:	4618      	mov	r0, r3
 8017caa:	f001 fa5b 	bl	8019164 <xTaskRemoveFromEventList>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d012      	beq.n	8017cda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017cb4:	4b0c      	ldr	r3, [pc, #48]	; (8017ce8 <xQueueGenericReset+0xcc>)
 8017cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cba:	601a      	str	r2, [r3, #0]
 8017cbc:	f3bf 8f4f 	dsb	sy
 8017cc0:	f3bf 8f6f 	isb	sy
 8017cc4:	e009      	b.n	8017cda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	3310      	adds	r3, #16
 8017cca:	4618      	mov	r0, r3
 8017ccc:	f7ff fef2 	bl	8017ab4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	3324      	adds	r3, #36	; 0x24
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7ff feed 	bl	8017ab4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017cda:	f002 fa23 	bl	801a124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017cde:	2301      	movs	r3, #1
}
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	3710      	adds	r7, #16
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}
 8017ce8:	e000ed04 	.word	0xe000ed04

08017cec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b08e      	sub	sp, #56	; 0x38
 8017cf0:	af02      	add	r7, sp, #8
 8017cf2:	60f8      	str	r0, [r7, #12]
 8017cf4:	60b9      	str	r1, [r7, #8]
 8017cf6:	607a      	str	r2, [r7, #4]
 8017cf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d10a      	bne.n	8017d16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d04:	f383 8811 	msr	BASEPRI, r3
 8017d08:	f3bf 8f6f 	isb	sy
 8017d0c:	f3bf 8f4f 	dsb	sy
 8017d10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017d12:	bf00      	nop
 8017d14:	e7fe      	b.n	8017d14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d10a      	bne.n	8017d32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d20:	f383 8811 	msr	BASEPRI, r3
 8017d24:	f3bf 8f6f 	isb	sy
 8017d28:	f3bf 8f4f 	dsb	sy
 8017d2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017d2e:	bf00      	nop
 8017d30:	e7fe      	b.n	8017d30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d002      	beq.n	8017d3e <xQueueGenericCreateStatic+0x52>
 8017d38:	68bb      	ldr	r3, [r7, #8]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d001      	beq.n	8017d42 <xQueueGenericCreateStatic+0x56>
 8017d3e:	2301      	movs	r3, #1
 8017d40:	e000      	b.n	8017d44 <xQueueGenericCreateStatic+0x58>
 8017d42:	2300      	movs	r3, #0
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d10a      	bne.n	8017d5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d4c:	f383 8811 	msr	BASEPRI, r3
 8017d50:	f3bf 8f6f 	isb	sy
 8017d54:	f3bf 8f4f 	dsb	sy
 8017d58:	623b      	str	r3, [r7, #32]
}
 8017d5a:	bf00      	nop
 8017d5c:	e7fe      	b.n	8017d5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d102      	bne.n	8017d6a <xQueueGenericCreateStatic+0x7e>
 8017d64:	68bb      	ldr	r3, [r7, #8]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d101      	bne.n	8017d6e <xQueueGenericCreateStatic+0x82>
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	e000      	b.n	8017d70 <xQueueGenericCreateStatic+0x84>
 8017d6e:	2300      	movs	r3, #0
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d10a      	bne.n	8017d8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d78:	f383 8811 	msr	BASEPRI, r3
 8017d7c:	f3bf 8f6f 	isb	sy
 8017d80:	f3bf 8f4f 	dsb	sy
 8017d84:	61fb      	str	r3, [r7, #28]
}
 8017d86:	bf00      	nop
 8017d88:	e7fe      	b.n	8017d88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017d8a:	2350      	movs	r3, #80	; 0x50
 8017d8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017d8e:	697b      	ldr	r3, [r7, #20]
 8017d90:	2b50      	cmp	r3, #80	; 0x50
 8017d92:	d00a      	beq.n	8017daa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d98:	f383 8811 	msr	BASEPRI, r3
 8017d9c:	f3bf 8f6f 	isb	sy
 8017da0:	f3bf 8f4f 	dsb	sy
 8017da4:	61bb      	str	r3, [r7, #24]
}
 8017da6:	bf00      	nop
 8017da8:	e7fe      	b.n	8017da8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017daa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017dac:	683b      	ldr	r3, [r7, #0]
 8017dae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d00d      	beq.n	8017dd2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017db8:	2201      	movs	r2, #1
 8017dba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017dbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dc4:	9300      	str	r3, [sp, #0]
 8017dc6:	4613      	mov	r3, r2
 8017dc8:	687a      	ldr	r2, [r7, #4]
 8017dca:	68b9      	ldr	r1, [r7, #8]
 8017dcc:	68f8      	ldr	r0, [r7, #12]
 8017dce:	f000 f805 	bl	8017ddc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	3730      	adds	r7, #48	; 0x30
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}

08017ddc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b084      	sub	sp, #16
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	60f8      	str	r0, [r7, #12]
 8017de4:	60b9      	str	r1, [r7, #8]
 8017de6:	607a      	str	r2, [r7, #4]
 8017de8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d103      	bne.n	8017df8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017df0:	69bb      	ldr	r3, [r7, #24]
 8017df2:	69ba      	ldr	r2, [r7, #24]
 8017df4:	601a      	str	r2, [r3, #0]
 8017df6:	e002      	b.n	8017dfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017df8:	69bb      	ldr	r3, [r7, #24]
 8017dfa:	687a      	ldr	r2, [r7, #4]
 8017dfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017dfe:	69bb      	ldr	r3, [r7, #24]
 8017e00:	68fa      	ldr	r2, [r7, #12]
 8017e02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017e04:	69bb      	ldr	r3, [r7, #24]
 8017e06:	68ba      	ldr	r2, [r7, #8]
 8017e08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017e0a:	2101      	movs	r1, #1
 8017e0c:	69b8      	ldr	r0, [r7, #24]
 8017e0e:	f7ff ff05 	bl	8017c1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017e12:	69bb      	ldr	r3, [r7, #24]
 8017e14:	78fa      	ldrb	r2, [r7, #3]
 8017e16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017e1a:	bf00      	nop
 8017e1c:	3710      	adds	r7, #16
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	bd80      	pop	{r7, pc}
	...

08017e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b08e      	sub	sp, #56	; 0x38
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	60f8      	str	r0, [r7, #12]
 8017e2c:	60b9      	str	r1, [r7, #8]
 8017e2e:	607a      	str	r2, [r7, #4]
 8017e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017e32:	2300      	movs	r3, #0
 8017e34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d10a      	bne.n	8017e56 <xQueueGenericSend+0x32>
	__asm volatile
 8017e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e44:	f383 8811 	msr	BASEPRI, r3
 8017e48:	f3bf 8f6f 	isb	sy
 8017e4c:	f3bf 8f4f 	dsb	sy
 8017e50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017e52:	bf00      	nop
 8017e54:	e7fe      	b.n	8017e54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017e56:	68bb      	ldr	r3, [r7, #8]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d103      	bne.n	8017e64 <xQueueGenericSend+0x40>
 8017e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d101      	bne.n	8017e68 <xQueueGenericSend+0x44>
 8017e64:	2301      	movs	r3, #1
 8017e66:	e000      	b.n	8017e6a <xQueueGenericSend+0x46>
 8017e68:	2300      	movs	r3, #0
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d10a      	bne.n	8017e84 <xQueueGenericSend+0x60>
	__asm volatile
 8017e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e72:	f383 8811 	msr	BASEPRI, r3
 8017e76:	f3bf 8f6f 	isb	sy
 8017e7a:	f3bf 8f4f 	dsb	sy
 8017e7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017e80:	bf00      	nop
 8017e82:	e7fe      	b.n	8017e82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017e84:	683b      	ldr	r3, [r7, #0]
 8017e86:	2b02      	cmp	r3, #2
 8017e88:	d103      	bne.n	8017e92 <xQueueGenericSend+0x6e>
 8017e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e8e:	2b01      	cmp	r3, #1
 8017e90:	d101      	bne.n	8017e96 <xQueueGenericSend+0x72>
 8017e92:	2301      	movs	r3, #1
 8017e94:	e000      	b.n	8017e98 <xQueueGenericSend+0x74>
 8017e96:	2300      	movs	r3, #0
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d10a      	bne.n	8017eb2 <xQueueGenericSend+0x8e>
	__asm volatile
 8017e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ea0:	f383 8811 	msr	BASEPRI, r3
 8017ea4:	f3bf 8f6f 	isb	sy
 8017ea8:	f3bf 8f4f 	dsb	sy
 8017eac:	623b      	str	r3, [r7, #32]
}
 8017eae:	bf00      	nop
 8017eb0:	e7fe      	b.n	8017eb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017eb2:	f001 fb77 	bl	80195a4 <xTaskGetSchedulerState>
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d102      	bne.n	8017ec2 <xQueueGenericSend+0x9e>
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d101      	bne.n	8017ec6 <xQueueGenericSend+0xa2>
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	e000      	b.n	8017ec8 <xQueueGenericSend+0xa4>
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d10a      	bne.n	8017ee2 <xQueueGenericSend+0xbe>
	__asm volatile
 8017ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ed0:	f383 8811 	msr	BASEPRI, r3
 8017ed4:	f3bf 8f6f 	isb	sy
 8017ed8:	f3bf 8f4f 	dsb	sy
 8017edc:	61fb      	str	r3, [r7, #28]
}
 8017ede:	bf00      	nop
 8017ee0:	e7fe      	b.n	8017ee0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017ee2:	f002 f8ef 	bl	801a0c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017eee:	429a      	cmp	r2, r3
 8017ef0:	d302      	bcc.n	8017ef8 <xQueueGenericSend+0xd4>
 8017ef2:	683b      	ldr	r3, [r7, #0]
 8017ef4:	2b02      	cmp	r3, #2
 8017ef6:	d129      	bne.n	8017f4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017ef8:	683a      	ldr	r2, [r7, #0]
 8017efa:	68b9      	ldr	r1, [r7, #8]
 8017efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017efe:	f000 fa0b 	bl	8018318 <prvCopyDataToQueue>
 8017f02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d010      	beq.n	8017f2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0e:	3324      	adds	r3, #36	; 0x24
 8017f10:	4618      	mov	r0, r3
 8017f12:	f001 f927 	bl	8019164 <xTaskRemoveFromEventList>
 8017f16:	4603      	mov	r3, r0
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d013      	beq.n	8017f44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017f1c:	4b3f      	ldr	r3, [pc, #252]	; (801801c <xQueueGenericSend+0x1f8>)
 8017f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f22:	601a      	str	r2, [r3, #0]
 8017f24:	f3bf 8f4f 	dsb	sy
 8017f28:	f3bf 8f6f 	isb	sy
 8017f2c:	e00a      	b.n	8017f44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d007      	beq.n	8017f44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017f34:	4b39      	ldr	r3, [pc, #228]	; (801801c <xQueueGenericSend+0x1f8>)
 8017f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f3a:	601a      	str	r2, [r3, #0]
 8017f3c:	f3bf 8f4f 	dsb	sy
 8017f40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017f44:	f002 f8ee 	bl	801a124 <vPortExitCritical>
				return pdPASS;
 8017f48:	2301      	movs	r3, #1
 8017f4a:	e063      	b.n	8018014 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d103      	bne.n	8017f5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017f52:	f002 f8e7 	bl	801a124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017f56:	2300      	movs	r3, #0
 8017f58:	e05c      	b.n	8018014 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d106      	bne.n	8017f6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017f60:	f107 0314 	add.w	r3, r7, #20
 8017f64:	4618      	mov	r0, r3
 8017f66:	f001 f9c3 	bl	80192f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017f6a:	2301      	movs	r3, #1
 8017f6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017f6e:	f002 f8d9 	bl	801a124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017f72:	f000 fe81 	bl	8018c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017f76:	f002 f8a5 	bl	801a0c4 <vPortEnterCritical>
 8017f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f80:	b25b      	sxtb	r3, r3
 8017f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f86:	d103      	bne.n	8017f90 <xQueueGenericSend+0x16c>
 8017f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017f96:	b25b      	sxtb	r3, r3
 8017f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f9c:	d103      	bne.n	8017fa6 <xQueueGenericSend+0x182>
 8017f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017fa6:	f002 f8bd 	bl	801a124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017faa:	1d3a      	adds	r2, r7, #4
 8017fac:	f107 0314 	add.w	r3, r7, #20
 8017fb0:	4611      	mov	r1, r2
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f001 f9b2 	bl	801931c <xTaskCheckForTimeOut>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d124      	bne.n	8018008 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fc0:	f000 faa2 	bl	8018508 <prvIsQueueFull>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d018      	beq.n	8017ffc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fcc:	3310      	adds	r3, #16
 8017fce:	687a      	ldr	r2, [r7, #4]
 8017fd0:	4611      	mov	r1, r2
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f001 f83a 	bl	801904c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fda:	f000 fa2d 	bl	8018438 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017fde:	f000 fe59 	bl	8018c94 <xTaskResumeAll>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	f47f af7c 	bne.w	8017ee2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017fea:	4b0c      	ldr	r3, [pc, #48]	; (801801c <xQueueGenericSend+0x1f8>)
 8017fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ff0:	601a      	str	r2, [r3, #0]
 8017ff2:	f3bf 8f4f 	dsb	sy
 8017ff6:	f3bf 8f6f 	isb	sy
 8017ffa:	e772      	b.n	8017ee2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ffe:	f000 fa1b 	bl	8018438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018002:	f000 fe47 	bl	8018c94 <xTaskResumeAll>
 8018006:	e76c      	b.n	8017ee2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801800a:	f000 fa15 	bl	8018438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801800e:	f000 fe41 	bl	8018c94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018012:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018014:	4618      	mov	r0, r3
 8018016:	3738      	adds	r7, #56	; 0x38
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}
 801801c:	e000ed04 	.word	0xe000ed04

08018020 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b090      	sub	sp, #64	; 0x40
 8018024:	af00      	add	r7, sp, #0
 8018026:	60f8      	str	r0, [r7, #12]
 8018028:	60b9      	str	r1, [r7, #8]
 801802a:	607a      	str	r2, [r7, #4]
 801802c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8018032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018034:	2b00      	cmp	r3, #0
 8018036:	d10a      	bne.n	801804e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8018038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801803c:	f383 8811 	msr	BASEPRI, r3
 8018040:	f3bf 8f6f 	isb	sy
 8018044:	f3bf 8f4f 	dsb	sy
 8018048:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801804a:	bf00      	nop
 801804c:	e7fe      	b.n	801804c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801804e:	68bb      	ldr	r3, [r7, #8]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d103      	bne.n	801805c <xQueueGenericSendFromISR+0x3c>
 8018054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018058:	2b00      	cmp	r3, #0
 801805a:	d101      	bne.n	8018060 <xQueueGenericSendFromISR+0x40>
 801805c:	2301      	movs	r3, #1
 801805e:	e000      	b.n	8018062 <xQueueGenericSendFromISR+0x42>
 8018060:	2300      	movs	r3, #0
 8018062:	2b00      	cmp	r3, #0
 8018064:	d10a      	bne.n	801807c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8018066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801806a:	f383 8811 	msr	BASEPRI, r3
 801806e:	f3bf 8f6f 	isb	sy
 8018072:	f3bf 8f4f 	dsb	sy
 8018076:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018078:	bf00      	nop
 801807a:	e7fe      	b.n	801807a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801807c:	683b      	ldr	r3, [r7, #0]
 801807e:	2b02      	cmp	r3, #2
 8018080:	d103      	bne.n	801808a <xQueueGenericSendFromISR+0x6a>
 8018082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018086:	2b01      	cmp	r3, #1
 8018088:	d101      	bne.n	801808e <xQueueGenericSendFromISR+0x6e>
 801808a:	2301      	movs	r3, #1
 801808c:	e000      	b.n	8018090 <xQueueGenericSendFromISR+0x70>
 801808e:	2300      	movs	r3, #0
 8018090:	2b00      	cmp	r3, #0
 8018092:	d10a      	bne.n	80180aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8018094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018098:	f383 8811 	msr	BASEPRI, r3
 801809c:	f3bf 8f6f 	isb	sy
 80180a0:	f3bf 8f4f 	dsb	sy
 80180a4:	623b      	str	r3, [r7, #32]
}
 80180a6:	bf00      	nop
 80180a8:	e7fe      	b.n	80180a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80180aa:	f002 f8ed 	bl	801a288 <vPortValidateInterruptPriority>
	__asm volatile
 80180ae:	f3ef 8211 	mrs	r2, BASEPRI
 80180b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180b6:	f383 8811 	msr	BASEPRI, r3
 80180ba:	f3bf 8f6f 	isb	sy
 80180be:	f3bf 8f4f 	dsb	sy
 80180c2:	61fa      	str	r2, [r7, #28]
 80180c4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80180c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80180c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80180ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80180ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180d2:	429a      	cmp	r2, r3
 80180d4:	d302      	bcc.n	80180dc <xQueueGenericSendFromISR+0xbc>
 80180d6:	683b      	ldr	r3, [r7, #0]
 80180d8:	2b02      	cmp	r3, #2
 80180da:	d12f      	bne.n	801813c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80180dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80180e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80180e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80180ec:	683a      	ldr	r2, [r7, #0]
 80180ee:	68b9      	ldr	r1, [r7, #8]
 80180f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80180f2:	f000 f911 	bl	8018318 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80180f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80180fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80180fe:	d112      	bne.n	8018126 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018104:	2b00      	cmp	r3, #0
 8018106:	d016      	beq.n	8018136 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801810a:	3324      	adds	r3, #36	; 0x24
 801810c:	4618      	mov	r0, r3
 801810e:	f001 f829 	bl	8019164 <xTaskRemoveFromEventList>
 8018112:	4603      	mov	r3, r0
 8018114:	2b00      	cmp	r3, #0
 8018116:	d00e      	beq.n	8018136 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d00b      	beq.n	8018136 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	2201      	movs	r2, #1
 8018122:	601a      	str	r2, [r3, #0]
 8018124:	e007      	b.n	8018136 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018126:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801812a:	3301      	adds	r3, #1
 801812c:	b2db      	uxtb	r3, r3
 801812e:	b25a      	sxtb	r2, r3
 8018130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018136:	2301      	movs	r3, #1
 8018138:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801813a:	e001      	b.n	8018140 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801813c:	2300      	movs	r3, #0
 801813e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018142:	617b      	str	r3, [r7, #20]
	__asm volatile
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	f383 8811 	msr	BASEPRI, r3
}
 801814a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801814c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801814e:	4618      	mov	r0, r3
 8018150:	3740      	adds	r7, #64	; 0x40
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}
	...

08018158 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b08c      	sub	sp, #48	; 0x30
 801815c:	af00      	add	r7, sp, #0
 801815e:	60f8      	str	r0, [r7, #12]
 8018160:	60b9      	str	r1, [r7, #8]
 8018162:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018164:	2300      	movs	r3, #0
 8018166:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801816e:	2b00      	cmp	r3, #0
 8018170:	d10a      	bne.n	8018188 <xQueueReceive+0x30>
	__asm volatile
 8018172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018176:	f383 8811 	msr	BASEPRI, r3
 801817a:	f3bf 8f6f 	isb	sy
 801817e:	f3bf 8f4f 	dsb	sy
 8018182:	623b      	str	r3, [r7, #32]
}
 8018184:	bf00      	nop
 8018186:	e7fe      	b.n	8018186 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018188:	68bb      	ldr	r3, [r7, #8]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d103      	bne.n	8018196 <xQueueReceive+0x3e>
 801818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018192:	2b00      	cmp	r3, #0
 8018194:	d101      	bne.n	801819a <xQueueReceive+0x42>
 8018196:	2301      	movs	r3, #1
 8018198:	e000      	b.n	801819c <xQueueReceive+0x44>
 801819a:	2300      	movs	r3, #0
 801819c:	2b00      	cmp	r3, #0
 801819e:	d10a      	bne.n	80181b6 <xQueueReceive+0x5e>
	__asm volatile
 80181a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181a4:	f383 8811 	msr	BASEPRI, r3
 80181a8:	f3bf 8f6f 	isb	sy
 80181ac:	f3bf 8f4f 	dsb	sy
 80181b0:	61fb      	str	r3, [r7, #28]
}
 80181b2:	bf00      	nop
 80181b4:	e7fe      	b.n	80181b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80181b6:	f001 f9f5 	bl	80195a4 <xTaskGetSchedulerState>
 80181ba:	4603      	mov	r3, r0
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d102      	bne.n	80181c6 <xQueueReceive+0x6e>
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d101      	bne.n	80181ca <xQueueReceive+0x72>
 80181c6:	2301      	movs	r3, #1
 80181c8:	e000      	b.n	80181cc <xQueueReceive+0x74>
 80181ca:	2300      	movs	r3, #0
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d10a      	bne.n	80181e6 <xQueueReceive+0x8e>
	__asm volatile
 80181d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181d4:	f383 8811 	msr	BASEPRI, r3
 80181d8:	f3bf 8f6f 	isb	sy
 80181dc:	f3bf 8f4f 	dsb	sy
 80181e0:	61bb      	str	r3, [r7, #24]
}
 80181e2:	bf00      	nop
 80181e4:	e7fe      	b.n	80181e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80181e6:	f001 ff6d 	bl	801a0c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80181ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80181f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d01f      	beq.n	8018236 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80181f6:	68b9      	ldr	r1, [r7, #8]
 80181f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181fa:	f000 f8f7 	bl	80183ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80181fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018200:	1e5a      	subs	r2, r3, #1
 8018202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018204:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018208:	691b      	ldr	r3, [r3, #16]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d00f      	beq.n	801822e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018210:	3310      	adds	r3, #16
 8018212:	4618      	mov	r0, r3
 8018214:	f000 ffa6 	bl	8019164 <xTaskRemoveFromEventList>
 8018218:	4603      	mov	r3, r0
 801821a:	2b00      	cmp	r3, #0
 801821c:	d007      	beq.n	801822e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801821e:	4b3d      	ldr	r3, [pc, #244]	; (8018314 <xQueueReceive+0x1bc>)
 8018220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018224:	601a      	str	r2, [r3, #0]
 8018226:	f3bf 8f4f 	dsb	sy
 801822a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801822e:	f001 ff79 	bl	801a124 <vPortExitCritical>
				return pdPASS;
 8018232:	2301      	movs	r3, #1
 8018234:	e069      	b.n	801830a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d103      	bne.n	8018244 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801823c:	f001 ff72 	bl	801a124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018240:	2300      	movs	r3, #0
 8018242:	e062      	b.n	801830a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018246:	2b00      	cmp	r3, #0
 8018248:	d106      	bne.n	8018258 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801824a:	f107 0310 	add.w	r3, r7, #16
 801824e:	4618      	mov	r0, r3
 8018250:	f001 f84e 	bl	80192f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018254:	2301      	movs	r3, #1
 8018256:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018258:	f001 ff64 	bl	801a124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801825c:	f000 fd0c 	bl	8018c78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018260:	f001 ff30 	bl	801a0c4 <vPortEnterCritical>
 8018264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801826a:	b25b      	sxtb	r3, r3
 801826c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018270:	d103      	bne.n	801827a <xQueueReceive+0x122>
 8018272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018274:	2200      	movs	r2, #0
 8018276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801827c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018280:	b25b      	sxtb	r3, r3
 8018282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018286:	d103      	bne.n	8018290 <xQueueReceive+0x138>
 8018288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801828a:	2200      	movs	r2, #0
 801828c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018290:	f001 ff48 	bl	801a124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018294:	1d3a      	adds	r2, r7, #4
 8018296:	f107 0310 	add.w	r3, r7, #16
 801829a:	4611      	mov	r1, r2
 801829c:	4618      	mov	r0, r3
 801829e:	f001 f83d 	bl	801931c <xTaskCheckForTimeOut>
 80182a2:	4603      	mov	r3, r0
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d123      	bne.n	80182f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80182a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182aa:	f000 f917 	bl	80184dc <prvIsQueueEmpty>
 80182ae:	4603      	mov	r3, r0
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d017      	beq.n	80182e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80182b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182b6:	3324      	adds	r3, #36	; 0x24
 80182b8:	687a      	ldr	r2, [r7, #4]
 80182ba:	4611      	mov	r1, r2
 80182bc:	4618      	mov	r0, r3
 80182be:	f000 fec5 	bl	801904c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80182c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182c4:	f000 f8b8 	bl	8018438 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80182c8:	f000 fce4 	bl	8018c94 <xTaskResumeAll>
 80182cc:	4603      	mov	r3, r0
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d189      	bne.n	80181e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80182d2:	4b10      	ldr	r3, [pc, #64]	; (8018314 <xQueueReceive+0x1bc>)
 80182d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182d8:	601a      	str	r2, [r3, #0]
 80182da:	f3bf 8f4f 	dsb	sy
 80182de:	f3bf 8f6f 	isb	sy
 80182e2:	e780      	b.n	80181e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80182e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182e6:	f000 f8a7 	bl	8018438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80182ea:	f000 fcd3 	bl	8018c94 <xTaskResumeAll>
 80182ee:	e77a      	b.n	80181e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80182f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182f2:	f000 f8a1 	bl	8018438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80182f6:	f000 fccd 	bl	8018c94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80182fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182fc:	f000 f8ee 	bl	80184dc <prvIsQueueEmpty>
 8018300:	4603      	mov	r3, r0
 8018302:	2b00      	cmp	r3, #0
 8018304:	f43f af6f 	beq.w	80181e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018308:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801830a:	4618      	mov	r0, r3
 801830c:	3730      	adds	r7, #48	; 0x30
 801830e:	46bd      	mov	sp, r7
 8018310:	bd80      	pop	{r7, pc}
 8018312:	bf00      	nop
 8018314:	e000ed04 	.word	0xe000ed04

08018318 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b086      	sub	sp, #24
 801831c:	af00      	add	r7, sp, #0
 801831e:	60f8      	str	r0, [r7, #12]
 8018320:	60b9      	str	r1, [r7, #8]
 8018322:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018324:	2300      	movs	r3, #0
 8018326:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801832c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018332:	2b00      	cmp	r3, #0
 8018334:	d10d      	bne.n	8018352 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d14d      	bne.n	80183da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	689b      	ldr	r3, [r3, #8]
 8018342:	4618      	mov	r0, r3
 8018344:	f001 f94c 	bl	80195e0 <xTaskPriorityDisinherit>
 8018348:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	2200      	movs	r2, #0
 801834e:	609a      	str	r2, [r3, #8]
 8018350:	e043      	b.n	80183da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	2b00      	cmp	r3, #0
 8018356:	d119      	bne.n	801838c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	6858      	ldr	r0, [r3, #4]
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018360:	461a      	mov	r2, r3
 8018362:	68b9      	ldr	r1, [r7, #8]
 8018364:	f002 f9e4 	bl	801a730 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	685a      	ldr	r2, [r3, #4]
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018370:	441a      	add	r2, r3
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	685a      	ldr	r2, [r3, #4]
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	689b      	ldr	r3, [r3, #8]
 801837e:	429a      	cmp	r2, r3
 8018380:	d32b      	bcc.n	80183da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	681a      	ldr	r2, [r3, #0]
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	605a      	str	r2, [r3, #4]
 801838a:	e026      	b.n	80183da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	68d8      	ldr	r0, [r3, #12]
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018394:	461a      	mov	r2, r3
 8018396:	68b9      	ldr	r1, [r7, #8]
 8018398:	f002 f9ca 	bl	801a730 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	68da      	ldr	r2, [r3, #12]
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183a4:	425b      	negs	r3, r3
 80183a6:	441a      	add	r2, r3
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	68da      	ldr	r2, [r3, #12]
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d207      	bcs.n	80183c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	689a      	ldr	r2, [r3, #8]
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183c0:	425b      	negs	r3, r3
 80183c2:	441a      	add	r2, r3
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2b02      	cmp	r3, #2
 80183cc:	d105      	bne.n	80183da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80183ce:	693b      	ldr	r3, [r7, #16]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d002      	beq.n	80183da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80183d4:	693b      	ldr	r3, [r7, #16]
 80183d6:	3b01      	subs	r3, #1
 80183d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80183da:	693b      	ldr	r3, [r7, #16]
 80183dc:	1c5a      	adds	r2, r3, #1
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80183e2:	697b      	ldr	r3, [r7, #20]
}
 80183e4:	4618      	mov	r0, r3
 80183e6:	3718      	adds	r7, #24
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}

080183ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b082      	sub	sp, #8
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
 80183f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d018      	beq.n	8018430 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	68da      	ldr	r2, [r3, #12]
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018406:	441a      	add	r2, r3
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	68da      	ldr	r2, [r3, #12]
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	689b      	ldr	r3, [r3, #8]
 8018414:	429a      	cmp	r2, r3
 8018416:	d303      	bcc.n	8018420 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681a      	ldr	r2, [r3, #0]
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	68d9      	ldr	r1, [r3, #12]
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018428:	461a      	mov	r2, r3
 801842a:	6838      	ldr	r0, [r7, #0]
 801842c:	f002 f980 	bl	801a730 <memcpy>
	}
}
 8018430:	bf00      	nop
 8018432:	3708      	adds	r7, #8
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}

08018438 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018440:	f001 fe40 	bl	801a0c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801844a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801844c:	e011      	b.n	8018472 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018452:	2b00      	cmp	r3, #0
 8018454:	d012      	beq.n	801847c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	3324      	adds	r3, #36	; 0x24
 801845a:	4618      	mov	r0, r3
 801845c:	f000 fe82 	bl	8019164 <xTaskRemoveFromEventList>
 8018460:	4603      	mov	r3, r0
 8018462:	2b00      	cmp	r3, #0
 8018464:	d001      	beq.n	801846a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018466:	f000 ffbb 	bl	80193e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801846a:	7bfb      	ldrb	r3, [r7, #15]
 801846c:	3b01      	subs	r3, #1
 801846e:	b2db      	uxtb	r3, r3
 8018470:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018476:	2b00      	cmp	r3, #0
 8018478:	dce9      	bgt.n	801844e <prvUnlockQueue+0x16>
 801847a:	e000      	b.n	801847e <prvUnlockQueue+0x46>
					break;
 801847c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	22ff      	movs	r2, #255	; 0xff
 8018482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018486:	f001 fe4d 	bl	801a124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801848a:	f001 fe1b 	bl	801a0c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018494:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018496:	e011      	b.n	80184bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	691b      	ldr	r3, [r3, #16]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d012      	beq.n	80184c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	3310      	adds	r3, #16
 80184a4:	4618      	mov	r0, r3
 80184a6:	f000 fe5d 	bl	8019164 <xTaskRemoveFromEventList>
 80184aa:	4603      	mov	r3, r0
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d001      	beq.n	80184b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80184b0:	f000 ff96 	bl	80193e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80184b4:	7bbb      	ldrb	r3, [r7, #14]
 80184b6:	3b01      	subs	r3, #1
 80184b8:	b2db      	uxtb	r3, r3
 80184ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80184bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	dce9      	bgt.n	8018498 <prvUnlockQueue+0x60>
 80184c4:	e000      	b.n	80184c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80184c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	22ff      	movs	r2, #255	; 0xff
 80184cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80184d0:	f001 fe28 	bl	801a124 <vPortExitCritical>
}
 80184d4:	bf00      	nop
 80184d6:	3710      	adds	r7, #16
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd80      	pop	{r7, pc}

080184dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b084      	sub	sp, #16
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80184e4:	f001 fdee 	bl	801a0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d102      	bne.n	80184f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80184f0:	2301      	movs	r3, #1
 80184f2:	60fb      	str	r3, [r7, #12]
 80184f4:	e001      	b.n	80184fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80184f6:	2300      	movs	r3, #0
 80184f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80184fa:	f001 fe13 	bl	801a124 <vPortExitCritical>

	return xReturn;
 80184fe:	68fb      	ldr	r3, [r7, #12]
}
 8018500:	4618      	mov	r0, r3
 8018502:	3710      	adds	r7, #16
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}

08018508 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b084      	sub	sp, #16
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018510:	f001 fdd8 	bl	801a0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801851c:	429a      	cmp	r2, r3
 801851e:	d102      	bne.n	8018526 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018520:	2301      	movs	r3, #1
 8018522:	60fb      	str	r3, [r7, #12]
 8018524:	e001      	b.n	801852a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018526:	2300      	movs	r3, #0
 8018528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801852a:	f001 fdfb 	bl	801a124 <vPortExitCritical>

	return xReturn;
 801852e:	68fb      	ldr	r3, [r7, #12]
}
 8018530:	4618      	mov	r0, r3
 8018532:	3710      	adds	r7, #16
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}

08018538 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018538:	b480      	push	{r7}
 801853a:	b085      	sub	sp, #20
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
 8018540:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018542:	2300      	movs	r3, #0
 8018544:	60fb      	str	r3, [r7, #12]
 8018546:	e014      	b.n	8018572 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018548:	4a0f      	ldr	r2, [pc, #60]	; (8018588 <vQueueAddToRegistry+0x50>)
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d10b      	bne.n	801856c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018554:	490c      	ldr	r1, [pc, #48]	; (8018588 <vQueueAddToRegistry+0x50>)
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	683a      	ldr	r2, [r7, #0]
 801855a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801855e:	4a0a      	ldr	r2, [pc, #40]	; (8018588 <vQueueAddToRegistry+0x50>)
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	00db      	lsls	r3, r3, #3
 8018564:	4413      	add	r3, r2
 8018566:	687a      	ldr	r2, [r7, #4]
 8018568:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801856a:	e006      	b.n	801857a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	3301      	adds	r3, #1
 8018570:	60fb      	str	r3, [r7, #12]
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	2b07      	cmp	r3, #7
 8018576:	d9e7      	bls.n	8018548 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018578:	bf00      	nop
 801857a:	bf00      	nop
 801857c:	3714      	adds	r7, #20
 801857e:	46bd      	mov	sp, r7
 8018580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018584:	4770      	bx	lr
 8018586:	bf00      	nop
 8018588:	240026d8 	.word	0x240026d8

0801858c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801858c:	b580      	push	{r7, lr}
 801858e:	b086      	sub	sp, #24
 8018590:	af00      	add	r7, sp, #0
 8018592:	60f8      	str	r0, [r7, #12]
 8018594:	60b9      	str	r1, [r7, #8]
 8018596:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801859c:	f001 fd92 	bl	801a0c4 <vPortEnterCritical>
 80185a0:	697b      	ldr	r3, [r7, #20]
 80185a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80185a6:	b25b      	sxtb	r3, r3
 80185a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80185ac:	d103      	bne.n	80185b6 <vQueueWaitForMessageRestricted+0x2a>
 80185ae:	697b      	ldr	r3, [r7, #20]
 80185b0:	2200      	movs	r2, #0
 80185b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80185b6:	697b      	ldr	r3, [r7, #20]
 80185b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80185bc:	b25b      	sxtb	r3, r3
 80185be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80185c2:	d103      	bne.n	80185cc <vQueueWaitForMessageRestricted+0x40>
 80185c4:	697b      	ldr	r3, [r7, #20]
 80185c6:	2200      	movs	r2, #0
 80185c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80185cc:	f001 fdaa 	bl	801a124 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80185d0:	697b      	ldr	r3, [r7, #20]
 80185d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d106      	bne.n	80185e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80185d8:	697b      	ldr	r3, [r7, #20]
 80185da:	3324      	adds	r3, #36	; 0x24
 80185dc:	687a      	ldr	r2, [r7, #4]
 80185de:	68b9      	ldr	r1, [r7, #8]
 80185e0:	4618      	mov	r0, r3
 80185e2:	f000 fd93 	bl	801910c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80185e6:	6978      	ldr	r0, [r7, #20]
 80185e8:	f7ff ff26 	bl	8018438 <prvUnlockQueue>
	}
 80185ec:	bf00      	nop
 80185ee:	3718      	adds	r7, #24
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}

080185f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b08e      	sub	sp, #56	; 0x38
 80185f8:	af04      	add	r7, sp, #16
 80185fa:	60f8      	str	r0, [r7, #12]
 80185fc:	60b9      	str	r1, [r7, #8]
 80185fe:	607a      	str	r2, [r7, #4]
 8018600:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018604:	2b00      	cmp	r3, #0
 8018606:	d10a      	bne.n	801861e <xTaskCreateStatic+0x2a>
	__asm volatile
 8018608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801860c:	f383 8811 	msr	BASEPRI, r3
 8018610:	f3bf 8f6f 	isb	sy
 8018614:	f3bf 8f4f 	dsb	sy
 8018618:	623b      	str	r3, [r7, #32]
}
 801861a:	bf00      	nop
 801861c:	e7fe      	b.n	801861c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801861e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018620:	2b00      	cmp	r3, #0
 8018622:	d10a      	bne.n	801863a <xTaskCreateStatic+0x46>
	__asm volatile
 8018624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018628:	f383 8811 	msr	BASEPRI, r3
 801862c:	f3bf 8f6f 	isb	sy
 8018630:	f3bf 8f4f 	dsb	sy
 8018634:	61fb      	str	r3, [r7, #28]
}
 8018636:	bf00      	nop
 8018638:	e7fe      	b.n	8018638 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801863a:	235c      	movs	r3, #92	; 0x5c
 801863c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801863e:	693b      	ldr	r3, [r7, #16]
 8018640:	2b5c      	cmp	r3, #92	; 0x5c
 8018642:	d00a      	beq.n	801865a <xTaskCreateStatic+0x66>
	__asm volatile
 8018644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018648:	f383 8811 	msr	BASEPRI, r3
 801864c:	f3bf 8f6f 	isb	sy
 8018650:	f3bf 8f4f 	dsb	sy
 8018654:	61bb      	str	r3, [r7, #24]
}
 8018656:	bf00      	nop
 8018658:	e7fe      	b.n	8018658 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801865a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801865e:	2b00      	cmp	r3, #0
 8018660:	d01e      	beq.n	80186a0 <xTaskCreateStatic+0xac>
 8018662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018664:	2b00      	cmp	r3, #0
 8018666:	d01b      	beq.n	80186a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801866a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801866e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018670:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018674:	2202      	movs	r2, #2
 8018676:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801867a:	2300      	movs	r3, #0
 801867c:	9303      	str	r3, [sp, #12]
 801867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018680:	9302      	str	r3, [sp, #8]
 8018682:	f107 0314 	add.w	r3, r7, #20
 8018686:	9301      	str	r3, [sp, #4]
 8018688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801868a:	9300      	str	r3, [sp, #0]
 801868c:	683b      	ldr	r3, [r7, #0]
 801868e:	687a      	ldr	r2, [r7, #4]
 8018690:	68b9      	ldr	r1, [r7, #8]
 8018692:	68f8      	ldr	r0, [r7, #12]
 8018694:	f000 f850 	bl	8018738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801869a:	f000 f8dd 	bl	8018858 <prvAddNewTaskToReadyList>
 801869e:	e001      	b.n	80186a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80186a0:	2300      	movs	r3, #0
 80186a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80186a4:	697b      	ldr	r3, [r7, #20]
	}
 80186a6:	4618      	mov	r0, r3
 80186a8:	3728      	adds	r7, #40	; 0x28
 80186aa:	46bd      	mov	sp, r7
 80186ac:	bd80      	pop	{r7, pc}

080186ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80186ae:	b580      	push	{r7, lr}
 80186b0:	b08c      	sub	sp, #48	; 0x30
 80186b2:	af04      	add	r7, sp, #16
 80186b4:	60f8      	str	r0, [r7, #12]
 80186b6:	60b9      	str	r1, [r7, #8]
 80186b8:	603b      	str	r3, [r7, #0]
 80186ba:	4613      	mov	r3, r2
 80186bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80186be:	88fb      	ldrh	r3, [r7, #6]
 80186c0:	009b      	lsls	r3, r3, #2
 80186c2:	4618      	mov	r0, r3
 80186c4:	f001 fe20 	bl	801a308 <pvPortMalloc>
 80186c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80186ca:	697b      	ldr	r3, [r7, #20]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d00e      	beq.n	80186ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80186d0:	205c      	movs	r0, #92	; 0x5c
 80186d2:	f001 fe19 	bl	801a308 <pvPortMalloc>
 80186d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80186d8:	69fb      	ldr	r3, [r7, #28]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d003      	beq.n	80186e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80186de:	69fb      	ldr	r3, [r7, #28]
 80186e0:	697a      	ldr	r2, [r7, #20]
 80186e2:	631a      	str	r2, [r3, #48]	; 0x30
 80186e4:	e005      	b.n	80186f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80186e6:	6978      	ldr	r0, [r7, #20]
 80186e8:	f001 feda 	bl	801a4a0 <vPortFree>
 80186ec:	e001      	b.n	80186f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80186ee:	2300      	movs	r3, #0
 80186f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80186f2:	69fb      	ldr	r3, [r7, #28]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d017      	beq.n	8018728 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80186f8:	69fb      	ldr	r3, [r7, #28]
 80186fa:	2200      	movs	r2, #0
 80186fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018700:	88fa      	ldrh	r2, [r7, #6]
 8018702:	2300      	movs	r3, #0
 8018704:	9303      	str	r3, [sp, #12]
 8018706:	69fb      	ldr	r3, [r7, #28]
 8018708:	9302      	str	r3, [sp, #8]
 801870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801870c:	9301      	str	r3, [sp, #4]
 801870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018710:	9300      	str	r3, [sp, #0]
 8018712:	683b      	ldr	r3, [r7, #0]
 8018714:	68b9      	ldr	r1, [r7, #8]
 8018716:	68f8      	ldr	r0, [r7, #12]
 8018718:	f000 f80e 	bl	8018738 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801871c:	69f8      	ldr	r0, [r7, #28]
 801871e:	f000 f89b 	bl	8018858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018722:	2301      	movs	r3, #1
 8018724:	61bb      	str	r3, [r7, #24]
 8018726:	e002      	b.n	801872e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801872c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801872e:	69bb      	ldr	r3, [r7, #24]
	}
 8018730:	4618      	mov	r0, r3
 8018732:	3720      	adds	r7, #32
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}

08018738 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b088      	sub	sp, #32
 801873c:	af00      	add	r7, sp, #0
 801873e:	60f8      	str	r0, [r7, #12]
 8018740:	60b9      	str	r1, [r7, #8]
 8018742:	607a      	str	r2, [r7, #4]
 8018744:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018748:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	009b      	lsls	r3, r3, #2
 801874e:	461a      	mov	r2, r3
 8018750:	21a5      	movs	r1, #165	; 0xa5
 8018752:	f001 fffb 	bl	801a74c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801875a:	6879      	ldr	r1, [r7, #4]
 801875c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018760:	440b      	add	r3, r1
 8018762:	009b      	lsls	r3, r3, #2
 8018764:	4413      	add	r3, r2
 8018766:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018768:	69bb      	ldr	r3, [r7, #24]
 801876a:	f023 0307 	bic.w	r3, r3, #7
 801876e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018770:	69bb      	ldr	r3, [r7, #24]
 8018772:	f003 0307 	and.w	r3, r3, #7
 8018776:	2b00      	cmp	r3, #0
 8018778:	d00a      	beq.n	8018790 <prvInitialiseNewTask+0x58>
	__asm volatile
 801877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801877e:	f383 8811 	msr	BASEPRI, r3
 8018782:	f3bf 8f6f 	isb	sy
 8018786:	f3bf 8f4f 	dsb	sy
 801878a:	617b      	str	r3, [r7, #20]
}
 801878c:	bf00      	nop
 801878e:	e7fe      	b.n	801878e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018790:	68bb      	ldr	r3, [r7, #8]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d01f      	beq.n	80187d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018796:	2300      	movs	r3, #0
 8018798:	61fb      	str	r3, [r7, #28]
 801879a:	e012      	b.n	80187c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801879c:	68ba      	ldr	r2, [r7, #8]
 801879e:	69fb      	ldr	r3, [r7, #28]
 80187a0:	4413      	add	r3, r2
 80187a2:	7819      	ldrb	r1, [r3, #0]
 80187a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80187a6:	69fb      	ldr	r3, [r7, #28]
 80187a8:	4413      	add	r3, r2
 80187aa:	3334      	adds	r3, #52	; 0x34
 80187ac:	460a      	mov	r2, r1
 80187ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80187b0:	68ba      	ldr	r2, [r7, #8]
 80187b2:	69fb      	ldr	r3, [r7, #28]
 80187b4:	4413      	add	r3, r2
 80187b6:	781b      	ldrb	r3, [r3, #0]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d006      	beq.n	80187ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80187bc:	69fb      	ldr	r3, [r7, #28]
 80187be:	3301      	adds	r3, #1
 80187c0:	61fb      	str	r3, [r7, #28]
 80187c2:	69fb      	ldr	r3, [r7, #28]
 80187c4:	2b0f      	cmp	r3, #15
 80187c6:	d9e9      	bls.n	801879c <prvInitialiseNewTask+0x64>
 80187c8:	e000      	b.n	80187cc <prvInitialiseNewTask+0x94>
			{
				break;
 80187ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80187cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ce:	2200      	movs	r2, #0
 80187d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80187d4:	e003      	b.n	80187de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80187d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187d8:	2200      	movs	r2, #0
 80187da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80187de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e0:	2b37      	cmp	r3, #55	; 0x37
 80187e2:	d901      	bls.n	80187e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80187e4:	2337      	movs	r3, #55	; 0x37
 80187e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80187e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80187ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80187f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f6:	2200      	movs	r2, #0
 80187f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80187fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fc:	3304      	adds	r3, #4
 80187fe:	4618      	mov	r0, r3
 8018800:	f7ff f978 	bl	8017af4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018806:	3318      	adds	r3, #24
 8018808:	4618      	mov	r0, r3
 801880a:	f7ff f973 	bl	8017af4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018816:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801881c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018822:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018826:	2200      	movs	r2, #0
 8018828:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801882c:	2200      	movs	r2, #0
 801882e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018832:	683a      	ldr	r2, [r7, #0]
 8018834:	68f9      	ldr	r1, [r7, #12]
 8018836:	69b8      	ldr	r0, [r7, #24]
 8018838:	f001 fb1a 	bl	8019e70 <pxPortInitialiseStack>
 801883c:	4602      	mov	r2, r0
 801883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018840:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018844:	2b00      	cmp	r3, #0
 8018846:	d002      	beq.n	801884e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801884c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801884e:	bf00      	nop
 8018850:	3720      	adds	r7, #32
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}
	...

08018858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b082      	sub	sp, #8
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018860:	f001 fc30 	bl	801a0c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018864:	4b2d      	ldr	r3, [pc, #180]	; (801891c <prvAddNewTaskToReadyList+0xc4>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	3301      	adds	r3, #1
 801886a:	4a2c      	ldr	r2, [pc, #176]	; (801891c <prvAddNewTaskToReadyList+0xc4>)
 801886c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801886e:	4b2c      	ldr	r3, [pc, #176]	; (8018920 <prvAddNewTaskToReadyList+0xc8>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d109      	bne.n	801888a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018876:	4a2a      	ldr	r2, [pc, #168]	; (8018920 <prvAddNewTaskToReadyList+0xc8>)
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801887c:	4b27      	ldr	r3, [pc, #156]	; (801891c <prvAddNewTaskToReadyList+0xc4>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	2b01      	cmp	r3, #1
 8018882:	d110      	bne.n	80188a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018884:	f000 fdd0 	bl	8019428 <prvInitialiseTaskLists>
 8018888:	e00d      	b.n	80188a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801888a:	4b26      	ldr	r3, [pc, #152]	; (8018924 <prvAddNewTaskToReadyList+0xcc>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d109      	bne.n	80188a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018892:	4b23      	ldr	r3, [pc, #140]	; (8018920 <prvAddNewTaskToReadyList+0xc8>)
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801889c:	429a      	cmp	r2, r3
 801889e:	d802      	bhi.n	80188a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80188a0:	4a1f      	ldr	r2, [pc, #124]	; (8018920 <prvAddNewTaskToReadyList+0xc8>)
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80188a6:	4b20      	ldr	r3, [pc, #128]	; (8018928 <prvAddNewTaskToReadyList+0xd0>)
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	3301      	adds	r3, #1
 80188ac:	4a1e      	ldr	r2, [pc, #120]	; (8018928 <prvAddNewTaskToReadyList+0xd0>)
 80188ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80188b0:	4b1d      	ldr	r3, [pc, #116]	; (8018928 <prvAddNewTaskToReadyList+0xd0>)
 80188b2:	681a      	ldr	r2, [r3, #0]
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188bc:	4b1b      	ldr	r3, [pc, #108]	; (801892c <prvAddNewTaskToReadyList+0xd4>)
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d903      	bls.n	80188cc <prvAddNewTaskToReadyList+0x74>
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188c8:	4a18      	ldr	r2, [pc, #96]	; (801892c <prvAddNewTaskToReadyList+0xd4>)
 80188ca:	6013      	str	r3, [r2, #0]
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188d0:	4613      	mov	r3, r2
 80188d2:	009b      	lsls	r3, r3, #2
 80188d4:	4413      	add	r3, r2
 80188d6:	009b      	lsls	r3, r3, #2
 80188d8:	4a15      	ldr	r2, [pc, #84]	; (8018930 <prvAddNewTaskToReadyList+0xd8>)
 80188da:	441a      	add	r2, r3
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	3304      	adds	r3, #4
 80188e0:	4619      	mov	r1, r3
 80188e2:	4610      	mov	r0, r2
 80188e4:	f7ff f913 	bl	8017b0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80188e8:	f001 fc1c 	bl	801a124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80188ec:	4b0d      	ldr	r3, [pc, #52]	; (8018924 <prvAddNewTaskToReadyList+0xcc>)
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d00e      	beq.n	8018912 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80188f4:	4b0a      	ldr	r3, [pc, #40]	; (8018920 <prvAddNewTaskToReadyList+0xc8>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188fe:	429a      	cmp	r2, r3
 8018900:	d207      	bcs.n	8018912 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018902:	4b0c      	ldr	r3, [pc, #48]	; (8018934 <prvAddNewTaskToReadyList+0xdc>)
 8018904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018908:	601a      	str	r2, [r3, #0]
 801890a:	f3bf 8f4f 	dsb	sy
 801890e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018912:	bf00      	nop
 8018914:	3708      	adds	r7, #8
 8018916:	46bd      	mov	sp, r7
 8018918:	bd80      	pop	{r7, pc}
 801891a:	bf00      	nop
 801891c:	24002bec 	.word	0x24002bec
 8018920:	24002718 	.word	0x24002718
 8018924:	24002bf8 	.word	0x24002bf8
 8018928:	24002c08 	.word	0x24002c08
 801892c:	24002bf4 	.word	0x24002bf4
 8018930:	2400271c 	.word	0x2400271c
 8018934:	e000ed04 	.word	0xe000ed04

08018938 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018938:	b580      	push	{r7, lr}
 801893a:	b084      	sub	sp, #16
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018940:	2300      	movs	r3, #0
 8018942:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d017      	beq.n	801897a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801894a:	4b13      	ldr	r3, [pc, #76]	; (8018998 <vTaskDelay+0x60>)
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	2b00      	cmp	r3, #0
 8018950:	d00a      	beq.n	8018968 <vTaskDelay+0x30>
	__asm volatile
 8018952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018956:	f383 8811 	msr	BASEPRI, r3
 801895a:	f3bf 8f6f 	isb	sy
 801895e:	f3bf 8f4f 	dsb	sy
 8018962:	60bb      	str	r3, [r7, #8]
}
 8018964:	bf00      	nop
 8018966:	e7fe      	b.n	8018966 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018968:	f000 f986 	bl	8018c78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801896c:	2100      	movs	r1, #0
 801896e:	6878      	ldr	r0, [r7, #4]
 8018970:	f000 febc 	bl	80196ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018974:	f000 f98e 	bl	8018c94 <xTaskResumeAll>
 8018978:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d107      	bne.n	8018990 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018980:	4b06      	ldr	r3, [pc, #24]	; (801899c <vTaskDelay+0x64>)
 8018982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018986:	601a      	str	r2, [r3, #0]
 8018988:	f3bf 8f4f 	dsb	sy
 801898c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018990:	bf00      	nop
 8018992:	3710      	adds	r7, #16
 8018994:	46bd      	mov	sp, r7
 8018996:	bd80      	pop	{r7, pc}
 8018998:	24002c14 	.word	0x24002c14
 801899c:	e000ed04 	.word	0xe000ed04

080189a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b084      	sub	sp, #16
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80189a8:	f001 fb8c 	bl	801a0c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d102      	bne.n	80189b8 <vTaskSuspend+0x18>
 80189b2:	4b30      	ldr	r3, [pc, #192]	; (8018a74 <vTaskSuspend+0xd4>)
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	e000      	b.n	80189ba <vTaskSuspend+0x1a>
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	3304      	adds	r3, #4
 80189c0:	4618      	mov	r0, r3
 80189c2:	f7ff f901 	bl	8017bc8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d004      	beq.n	80189d8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	3318      	adds	r3, #24
 80189d2:	4618      	mov	r0, r3
 80189d4:	f7ff f8f8 	bl	8017bc8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	3304      	adds	r3, #4
 80189dc:	4619      	mov	r1, r3
 80189de:	4826      	ldr	r0, [pc, #152]	; (8018a78 <vTaskSuspend+0xd8>)
 80189e0:	f7ff f895 	bl	8017b0e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80189ea:	b2db      	uxtb	r3, r3
 80189ec:	2b01      	cmp	r3, #1
 80189ee:	d103      	bne.n	80189f8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	2200      	movs	r2, #0
 80189f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80189f8:	f001 fb94 	bl	801a124 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80189fc:	4b1f      	ldr	r3, [pc, #124]	; (8018a7c <vTaskSuspend+0xdc>)
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d005      	beq.n	8018a10 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8018a04:	f001 fb5e 	bl	801a0c4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018a08:	f000 fdac 	bl	8019564 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8018a0c:	f001 fb8a 	bl	801a124 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8018a10:	4b18      	ldr	r3, [pc, #96]	; (8018a74 <vTaskSuspend+0xd4>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	68fa      	ldr	r2, [r7, #12]
 8018a16:	429a      	cmp	r2, r3
 8018a18:	d127      	bne.n	8018a6a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8018a1a:	4b18      	ldr	r3, [pc, #96]	; (8018a7c <vTaskSuspend+0xdc>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d017      	beq.n	8018a52 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8018a22:	4b17      	ldr	r3, [pc, #92]	; (8018a80 <vTaskSuspend+0xe0>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d00a      	beq.n	8018a40 <vTaskSuspend+0xa0>
	__asm volatile
 8018a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a2e:	f383 8811 	msr	BASEPRI, r3
 8018a32:	f3bf 8f6f 	isb	sy
 8018a36:	f3bf 8f4f 	dsb	sy
 8018a3a:	60bb      	str	r3, [r7, #8]
}
 8018a3c:	bf00      	nop
 8018a3e:	e7fe      	b.n	8018a3e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8018a40:	4b10      	ldr	r3, [pc, #64]	; (8018a84 <vTaskSuspend+0xe4>)
 8018a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a46:	601a      	str	r2, [r3, #0]
 8018a48:	f3bf 8f4f 	dsb	sy
 8018a4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018a50:	e00b      	b.n	8018a6a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018a52:	4b09      	ldr	r3, [pc, #36]	; (8018a78 <vTaskSuspend+0xd8>)
 8018a54:	681a      	ldr	r2, [r3, #0]
 8018a56:	4b0c      	ldr	r3, [pc, #48]	; (8018a88 <vTaskSuspend+0xe8>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d103      	bne.n	8018a66 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8018a5e:	4b05      	ldr	r3, [pc, #20]	; (8018a74 <vTaskSuspend+0xd4>)
 8018a60:	2200      	movs	r2, #0
 8018a62:	601a      	str	r2, [r3, #0]
	}
 8018a64:	e001      	b.n	8018a6a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8018a66:	f000 fa85 	bl	8018f74 <vTaskSwitchContext>
	}
 8018a6a:	bf00      	nop
 8018a6c:	3710      	adds	r7, #16
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd80      	pop	{r7, pc}
 8018a72:	bf00      	nop
 8018a74:	24002718 	.word	0x24002718
 8018a78:	24002bd8 	.word	0x24002bd8
 8018a7c:	24002bf8 	.word	0x24002bf8
 8018a80:	24002c14 	.word	0x24002c14
 8018a84:	e000ed04 	.word	0xe000ed04
 8018a88:	24002bec 	.word	0x24002bec

08018a8c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8018a8c:	b480      	push	{r7}
 8018a8e:	b087      	sub	sp, #28
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8018a94:	2300      	movs	r3, #0
 8018a96:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d10a      	bne.n	8018ab8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8018aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aa6:	f383 8811 	msr	BASEPRI, r3
 8018aaa:	f3bf 8f6f 	isb	sy
 8018aae:	f3bf 8f4f 	dsb	sy
 8018ab2:	60fb      	str	r3, [r7, #12]
}
 8018ab4:	bf00      	nop
 8018ab6:	e7fe      	b.n	8018ab6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018ab8:	693b      	ldr	r3, [r7, #16]
 8018aba:	695b      	ldr	r3, [r3, #20]
 8018abc:	4a0a      	ldr	r2, [pc, #40]	; (8018ae8 <prvTaskIsTaskSuspended+0x5c>)
 8018abe:	4293      	cmp	r3, r2
 8018ac0:	d10a      	bne.n	8018ad8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018ac2:	693b      	ldr	r3, [r7, #16]
 8018ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ac6:	4a09      	ldr	r2, [pc, #36]	; (8018aec <prvTaskIsTaskSuspended+0x60>)
 8018ac8:	4293      	cmp	r3, r2
 8018aca:	d005      	beq.n	8018ad8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018acc:	693b      	ldr	r3, [r7, #16]
 8018ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d101      	bne.n	8018ad8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018ad8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018ada:	4618      	mov	r0, r3
 8018adc:	371c      	adds	r7, #28
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae4:	4770      	bx	lr
 8018ae6:	bf00      	nop
 8018ae8:	24002bd8 	.word	0x24002bd8
 8018aec:	24002bac 	.word	0x24002bac

08018af0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b084      	sub	sp, #16
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d10a      	bne.n	8018b18 <vTaskResume+0x28>
	__asm volatile
 8018b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b06:	f383 8811 	msr	BASEPRI, r3
 8018b0a:	f3bf 8f6f 	isb	sy
 8018b0e:	f3bf 8f4f 	dsb	sy
 8018b12:	60bb      	str	r3, [r7, #8]
}
 8018b14:	bf00      	nop
 8018b16:	e7fe      	b.n	8018b16 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018b18:	4b20      	ldr	r3, [pc, #128]	; (8018b9c <vTaskResume+0xac>)
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	68fa      	ldr	r2, [r7, #12]
 8018b1e:	429a      	cmp	r2, r3
 8018b20:	d038      	beq.n	8018b94 <vTaskResume+0xa4>
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d035      	beq.n	8018b94 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8018b28:	f001 facc 	bl	801a0c4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018b2c:	68f8      	ldr	r0, [r7, #12]
 8018b2e:	f7ff ffad 	bl	8018a8c <prvTaskIsTaskSuspended>
 8018b32:	4603      	mov	r3, r0
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d02b      	beq.n	8018b90 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	3304      	adds	r3, #4
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	f7ff f843 	bl	8017bc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b46:	4b16      	ldr	r3, [pc, #88]	; (8018ba0 <vTaskResume+0xb0>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	429a      	cmp	r2, r3
 8018b4c:	d903      	bls.n	8018b56 <vTaskResume+0x66>
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b52:	4a13      	ldr	r2, [pc, #76]	; (8018ba0 <vTaskResume+0xb0>)
 8018b54:	6013      	str	r3, [r2, #0]
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b5a:	4613      	mov	r3, r2
 8018b5c:	009b      	lsls	r3, r3, #2
 8018b5e:	4413      	add	r3, r2
 8018b60:	009b      	lsls	r3, r3, #2
 8018b62:	4a10      	ldr	r2, [pc, #64]	; (8018ba4 <vTaskResume+0xb4>)
 8018b64:	441a      	add	r2, r3
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	3304      	adds	r3, #4
 8018b6a:	4619      	mov	r1, r3
 8018b6c:	4610      	mov	r0, r2
 8018b6e:	f7fe ffce 	bl	8017b0e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b76:	4b09      	ldr	r3, [pc, #36]	; (8018b9c <vTaskResume+0xac>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b7c:	429a      	cmp	r2, r3
 8018b7e:	d307      	bcc.n	8018b90 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018b80:	4b09      	ldr	r3, [pc, #36]	; (8018ba8 <vTaskResume+0xb8>)
 8018b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b86:	601a      	str	r2, [r3, #0]
 8018b88:	f3bf 8f4f 	dsb	sy
 8018b8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018b90:	f001 fac8 	bl	801a124 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018b94:	bf00      	nop
 8018b96:	3710      	adds	r7, #16
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}
 8018b9c:	24002718 	.word	0x24002718
 8018ba0:	24002bf4 	.word	0x24002bf4
 8018ba4:	2400271c 	.word	0x2400271c
 8018ba8:	e000ed04 	.word	0xe000ed04

08018bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b08a      	sub	sp, #40	; 0x28
 8018bb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018bba:	463a      	mov	r2, r7
 8018bbc:	1d39      	adds	r1, r7, #4
 8018bbe:	f107 0308 	add.w	r3, r7, #8
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	f7fe fcd6 	bl	8017574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018bc8:	6839      	ldr	r1, [r7, #0]
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	68ba      	ldr	r2, [r7, #8]
 8018bce:	9202      	str	r2, [sp, #8]
 8018bd0:	9301      	str	r3, [sp, #4]
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	9300      	str	r3, [sp, #0]
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	460a      	mov	r2, r1
 8018bda:	4921      	ldr	r1, [pc, #132]	; (8018c60 <vTaskStartScheduler+0xb4>)
 8018bdc:	4821      	ldr	r0, [pc, #132]	; (8018c64 <vTaskStartScheduler+0xb8>)
 8018bde:	f7ff fd09 	bl	80185f4 <xTaskCreateStatic>
 8018be2:	4603      	mov	r3, r0
 8018be4:	4a20      	ldr	r2, [pc, #128]	; (8018c68 <vTaskStartScheduler+0xbc>)
 8018be6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018be8:	4b1f      	ldr	r3, [pc, #124]	; (8018c68 <vTaskStartScheduler+0xbc>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d002      	beq.n	8018bf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018bf0:	2301      	movs	r3, #1
 8018bf2:	617b      	str	r3, [r7, #20]
 8018bf4:	e001      	b.n	8018bfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018bfa:	697b      	ldr	r3, [r7, #20]
 8018bfc:	2b01      	cmp	r3, #1
 8018bfe:	d102      	bne.n	8018c06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018c00:	f000 fdc8 	bl	8019794 <xTimerCreateTimerTask>
 8018c04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	2b01      	cmp	r3, #1
 8018c0a:	d116      	bne.n	8018c3a <vTaskStartScheduler+0x8e>
	__asm volatile
 8018c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c10:	f383 8811 	msr	BASEPRI, r3
 8018c14:	f3bf 8f6f 	isb	sy
 8018c18:	f3bf 8f4f 	dsb	sy
 8018c1c:	613b      	str	r3, [r7, #16]
}
 8018c1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018c20:	4b12      	ldr	r3, [pc, #72]	; (8018c6c <vTaskStartScheduler+0xc0>)
 8018c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018c26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018c28:	4b11      	ldr	r3, [pc, #68]	; (8018c70 <vTaskStartScheduler+0xc4>)
 8018c2a:	2201      	movs	r2, #1
 8018c2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018c2e:	4b11      	ldr	r3, [pc, #68]	; (8018c74 <vTaskStartScheduler+0xc8>)
 8018c30:	2200      	movs	r2, #0
 8018c32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018c34:	f001 f9a4 	bl	8019f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018c38:	e00e      	b.n	8018c58 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018c3a:	697b      	ldr	r3, [r7, #20]
 8018c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c40:	d10a      	bne.n	8018c58 <vTaskStartScheduler+0xac>
	__asm volatile
 8018c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c46:	f383 8811 	msr	BASEPRI, r3
 8018c4a:	f3bf 8f6f 	isb	sy
 8018c4e:	f3bf 8f4f 	dsb	sy
 8018c52:	60fb      	str	r3, [r7, #12]
}
 8018c54:	bf00      	nop
 8018c56:	e7fe      	b.n	8018c56 <vTaskStartScheduler+0xaa>
}
 8018c58:	bf00      	nop
 8018c5a:	3718      	adds	r7, #24
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	0801b3c0 	.word	0x0801b3c0
 8018c64:	080193f9 	.word	0x080193f9
 8018c68:	24002c10 	.word	0x24002c10
 8018c6c:	24002c0c 	.word	0x24002c0c
 8018c70:	24002bf8 	.word	0x24002bf8
 8018c74:	24002bf0 	.word	0x24002bf0

08018c78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018c78:	b480      	push	{r7}
 8018c7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018c7c:	4b04      	ldr	r3, [pc, #16]	; (8018c90 <vTaskSuspendAll+0x18>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	3301      	adds	r3, #1
 8018c82:	4a03      	ldr	r2, [pc, #12]	; (8018c90 <vTaskSuspendAll+0x18>)
 8018c84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8018c86:	bf00      	nop
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8e:	4770      	bx	lr
 8018c90:	24002c14 	.word	0x24002c14

08018c94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b084      	sub	sp, #16
 8018c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018c9a:	2300      	movs	r3, #0
 8018c9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018ca2:	4b42      	ldr	r3, [pc, #264]	; (8018dac <xTaskResumeAll+0x118>)
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d10a      	bne.n	8018cc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8018caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cae:	f383 8811 	msr	BASEPRI, r3
 8018cb2:	f3bf 8f6f 	isb	sy
 8018cb6:	f3bf 8f4f 	dsb	sy
 8018cba:	603b      	str	r3, [r7, #0]
}
 8018cbc:	bf00      	nop
 8018cbe:	e7fe      	b.n	8018cbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018cc0:	f001 fa00 	bl	801a0c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8018cc4:	4b39      	ldr	r3, [pc, #228]	; (8018dac <xTaskResumeAll+0x118>)
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	3b01      	subs	r3, #1
 8018cca:	4a38      	ldr	r2, [pc, #224]	; (8018dac <xTaskResumeAll+0x118>)
 8018ccc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018cce:	4b37      	ldr	r3, [pc, #220]	; (8018dac <xTaskResumeAll+0x118>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d162      	bne.n	8018d9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018cd6:	4b36      	ldr	r3, [pc, #216]	; (8018db0 <xTaskResumeAll+0x11c>)
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d05e      	beq.n	8018d9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018cde:	e02f      	b.n	8018d40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ce0:	4b34      	ldr	r3, [pc, #208]	; (8018db4 <xTaskResumeAll+0x120>)
 8018ce2:	68db      	ldr	r3, [r3, #12]
 8018ce4:	68db      	ldr	r3, [r3, #12]
 8018ce6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	3318      	adds	r3, #24
 8018cec:	4618      	mov	r0, r3
 8018cee:	f7fe ff6b 	bl	8017bc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	3304      	adds	r3, #4
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7fe ff66 	bl	8017bc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d00:	4b2d      	ldr	r3, [pc, #180]	; (8018db8 <xTaskResumeAll+0x124>)
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	429a      	cmp	r2, r3
 8018d06:	d903      	bls.n	8018d10 <xTaskResumeAll+0x7c>
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d0c:	4a2a      	ldr	r2, [pc, #168]	; (8018db8 <xTaskResumeAll+0x124>)
 8018d0e:	6013      	str	r3, [r2, #0]
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d14:	4613      	mov	r3, r2
 8018d16:	009b      	lsls	r3, r3, #2
 8018d18:	4413      	add	r3, r2
 8018d1a:	009b      	lsls	r3, r3, #2
 8018d1c:	4a27      	ldr	r2, [pc, #156]	; (8018dbc <xTaskResumeAll+0x128>)
 8018d1e:	441a      	add	r2, r3
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	3304      	adds	r3, #4
 8018d24:	4619      	mov	r1, r3
 8018d26:	4610      	mov	r0, r2
 8018d28:	f7fe fef1 	bl	8017b0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d30:	4b23      	ldr	r3, [pc, #140]	; (8018dc0 <xTaskResumeAll+0x12c>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d36:	429a      	cmp	r2, r3
 8018d38:	d302      	bcc.n	8018d40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018d3a:	4b22      	ldr	r3, [pc, #136]	; (8018dc4 <xTaskResumeAll+0x130>)
 8018d3c:	2201      	movs	r2, #1
 8018d3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018d40:	4b1c      	ldr	r3, [pc, #112]	; (8018db4 <xTaskResumeAll+0x120>)
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d1cb      	bne.n	8018ce0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d001      	beq.n	8018d52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018d4e:	f000 fc09 	bl	8019564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8018d52:	4b1d      	ldr	r3, [pc, #116]	; (8018dc8 <xTaskResumeAll+0x134>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d010      	beq.n	8018d80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018d5e:	f000 f847 	bl	8018df0 <xTaskIncrementTick>
 8018d62:	4603      	mov	r3, r0
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d002      	beq.n	8018d6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018d68:	4b16      	ldr	r3, [pc, #88]	; (8018dc4 <xTaskResumeAll+0x130>)
 8018d6a:	2201      	movs	r2, #1
 8018d6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	3b01      	subs	r3, #1
 8018d72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d1f1      	bne.n	8018d5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018d7a:	4b13      	ldr	r3, [pc, #76]	; (8018dc8 <xTaskResumeAll+0x134>)
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018d80:	4b10      	ldr	r3, [pc, #64]	; (8018dc4 <xTaskResumeAll+0x130>)
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d009      	beq.n	8018d9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018d88:	2301      	movs	r3, #1
 8018d8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018d8c:	4b0f      	ldr	r3, [pc, #60]	; (8018dcc <xTaskResumeAll+0x138>)
 8018d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d92:	601a      	str	r2, [r3, #0]
 8018d94:	f3bf 8f4f 	dsb	sy
 8018d98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018d9c:	f001 f9c2 	bl	801a124 <vPortExitCritical>

	return xAlreadyYielded;
 8018da0:	68bb      	ldr	r3, [r7, #8]
}
 8018da2:	4618      	mov	r0, r3
 8018da4:	3710      	adds	r7, #16
 8018da6:	46bd      	mov	sp, r7
 8018da8:	bd80      	pop	{r7, pc}
 8018daa:	bf00      	nop
 8018dac:	24002c14 	.word	0x24002c14
 8018db0:	24002bec 	.word	0x24002bec
 8018db4:	24002bac 	.word	0x24002bac
 8018db8:	24002bf4 	.word	0x24002bf4
 8018dbc:	2400271c 	.word	0x2400271c
 8018dc0:	24002718 	.word	0x24002718
 8018dc4:	24002c00 	.word	0x24002c00
 8018dc8:	24002bfc 	.word	0x24002bfc
 8018dcc:	e000ed04 	.word	0xe000ed04

08018dd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018dd0:	b480      	push	{r7}
 8018dd2:	b083      	sub	sp, #12
 8018dd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8018dd6:	4b05      	ldr	r3, [pc, #20]	; (8018dec <xTaskGetTickCount+0x1c>)
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018ddc:	687b      	ldr	r3, [r7, #4]
}
 8018dde:	4618      	mov	r0, r3
 8018de0:	370c      	adds	r7, #12
 8018de2:	46bd      	mov	sp, r7
 8018de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de8:	4770      	bx	lr
 8018dea:	bf00      	nop
 8018dec:	24002bf0 	.word	0x24002bf0

08018df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b086      	sub	sp, #24
 8018df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018df6:	2300      	movs	r3, #0
 8018df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018dfa:	4b53      	ldr	r3, [pc, #332]	; (8018f48 <xTaskIncrementTick+0x158>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	f040 8095 	bne.w	8018f2e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018e04:	4b51      	ldr	r3, [pc, #324]	; (8018f4c <xTaskIncrementTick+0x15c>)
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	3301      	adds	r3, #1
 8018e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018e0c:	4a4f      	ldr	r2, [pc, #316]	; (8018f4c <xTaskIncrementTick+0x15c>)
 8018e0e:	693b      	ldr	r3, [r7, #16]
 8018e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8018e12:	693b      	ldr	r3, [r7, #16]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d120      	bne.n	8018e5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018e18:	4b4d      	ldr	r3, [pc, #308]	; (8018f50 <xTaskIncrementTick+0x160>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d00a      	beq.n	8018e38 <xTaskIncrementTick+0x48>
	__asm volatile
 8018e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e26:	f383 8811 	msr	BASEPRI, r3
 8018e2a:	f3bf 8f6f 	isb	sy
 8018e2e:	f3bf 8f4f 	dsb	sy
 8018e32:	603b      	str	r3, [r7, #0]
}
 8018e34:	bf00      	nop
 8018e36:	e7fe      	b.n	8018e36 <xTaskIncrementTick+0x46>
 8018e38:	4b45      	ldr	r3, [pc, #276]	; (8018f50 <xTaskIncrementTick+0x160>)
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	60fb      	str	r3, [r7, #12]
 8018e3e:	4b45      	ldr	r3, [pc, #276]	; (8018f54 <xTaskIncrementTick+0x164>)
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	4a43      	ldr	r2, [pc, #268]	; (8018f50 <xTaskIncrementTick+0x160>)
 8018e44:	6013      	str	r3, [r2, #0]
 8018e46:	4a43      	ldr	r2, [pc, #268]	; (8018f54 <xTaskIncrementTick+0x164>)
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	6013      	str	r3, [r2, #0]
 8018e4c:	4b42      	ldr	r3, [pc, #264]	; (8018f58 <xTaskIncrementTick+0x168>)
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	3301      	adds	r3, #1
 8018e52:	4a41      	ldr	r2, [pc, #260]	; (8018f58 <xTaskIncrementTick+0x168>)
 8018e54:	6013      	str	r3, [r2, #0]
 8018e56:	f000 fb85 	bl	8019564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018e5a:	4b40      	ldr	r3, [pc, #256]	; (8018f5c <xTaskIncrementTick+0x16c>)
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	693a      	ldr	r2, [r7, #16]
 8018e60:	429a      	cmp	r2, r3
 8018e62:	d349      	bcc.n	8018ef8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018e64:	4b3a      	ldr	r3, [pc, #232]	; (8018f50 <xTaskIncrementTick+0x160>)
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d104      	bne.n	8018e78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e6e:	4b3b      	ldr	r3, [pc, #236]	; (8018f5c <xTaskIncrementTick+0x16c>)
 8018e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e74:	601a      	str	r2, [r3, #0]
					break;
 8018e76:	e03f      	b.n	8018ef8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e78:	4b35      	ldr	r3, [pc, #212]	; (8018f50 <xTaskIncrementTick+0x160>)
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	68db      	ldr	r3, [r3, #12]
 8018e7e:	68db      	ldr	r3, [r3, #12]
 8018e80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018e82:	68bb      	ldr	r3, [r7, #8]
 8018e84:	685b      	ldr	r3, [r3, #4]
 8018e86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018e88:	693a      	ldr	r2, [r7, #16]
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	429a      	cmp	r2, r3
 8018e8e:	d203      	bcs.n	8018e98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018e90:	4a32      	ldr	r2, [pc, #200]	; (8018f5c <xTaskIncrementTick+0x16c>)
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018e96:	e02f      	b.n	8018ef8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018e98:	68bb      	ldr	r3, [r7, #8]
 8018e9a:	3304      	adds	r3, #4
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	f7fe fe93 	bl	8017bc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018ea2:	68bb      	ldr	r3, [r7, #8]
 8018ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d004      	beq.n	8018eb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018eaa:	68bb      	ldr	r3, [r7, #8]
 8018eac:	3318      	adds	r3, #24
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f7fe fe8a 	bl	8017bc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018eb8:	4b29      	ldr	r3, [pc, #164]	; (8018f60 <xTaskIncrementTick+0x170>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	429a      	cmp	r2, r3
 8018ebe:	d903      	bls.n	8018ec8 <xTaskIncrementTick+0xd8>
 8018ec0:	68bb      	ldr	r3, [r7, #8]
 8018ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ec4:	4a26      	ldr	r2, [pc, #152]	; (8018f60 <xTaskIncrementTick+0x170>)
 8018ec6:	6013      	str	r3, [r2, #0]
 8018ec8:	68bb      	ldr	r3, [r7, #8]
 8018eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ecc:	4613      	mov	r3, r2
 8018ece:	009b      	lsls	r3, r3, #2
 8018ed0:	4413      	add	r3, r2
 8018ed2:	009b      	lsls	r3, r3, #2
 8018ed4:	4a23      	ldr	r2, [pc, #140]	; (8018f64 <xTaskIncrementTick+0x174>)
 8018ed6:	441a      	add	r2, r3
 8018ed8:	68bb      	ldr	r3, [r7, #8]
 8018eda:	3304      	adds	r3, #4
 8018edc:	4619      	mov	r1, r3
 8018ede:	4610      	mov	r0, r2
 8018ee0:	f7fe fe15 	bl	8017b0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018ee4:	68bb      	ldr	r3, [r7, #8]
 8018ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ee8:	4b1f      	ldr	r3, [pc, #124]	; (8018f68 <xTaskIncrementTick+0x178>)
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018eee:	429a      	cmp	r2, r3
 8018ef0:	d3b8      	bcc.n	8018e64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8018ef2:	2301      	movs	r3, #1
 8018ef4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018ef6:	e7b5      	b.n	8018e64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018ef8:	4b1b      	ldr	r3, [pc, #108]	; (8018f68 <xTaskIncrementTick+0x178>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018efe:	4919      	ldr	r1, [pc, #100]	; (8018f64 <xTaskIncrementTick+0x174>)
 8018f00:	4613      	mov	r3, r2
 8018f02:	009b      	lsls	r3, r3, #2
 8018f04:	4413      	add	r3, r2
 8018f06:	009b      	lsls	r3, r3, #2
 8018f08:	440b      	add	r3, r1
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	2b01      	cmp	r3, #1
 8018f0e:	d901      	bls.n	8018f14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018f10:	2301      	movs	r3, #1
 8018f12:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8018f14:	4b15      	ldr	r3, [pc, #84]	; (8018f6c <xTaskIncrementTick+0x17c>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d101      	bne.n	8018f20 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018f1c:	f7e9 fad6 	bl	80024cc <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018f20:	4b13      	ldr	r3, [pc, #76]	; (8018f70 <xTaskIncrementTick+0x180>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d009      	beq.n	8018f3c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018f28:	2301      	movs	r3, #1
 8018f2a:	617b      	str	r3, [r7, #20]
 8018f2c:	e006      	b.n	8018f3c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018f2e:	4b0f      	ldr	r3, [pc, #60]	; (8018f6c <xTaskIncrementTick+0x17c>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	3301      	adds	r3, #1
 8018f34:	4a0d      	ldr	r2, [pc, #52]	; (8018f6c <xTaskIncrementTick+0x17c>)
 8018f36:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018f38:	f7e9 fac8 	bl	80024cc <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018f3c:	697b      	ldr	r3, [r7, #20]
}
 8018f3e:	4618      	mov	r0, r3
 8018f40:	3718      	adds	r7, #24
 8018f42:	46bd      	mov	sp, r7
 8018f44:	bd80      	pop	{r7, pc}
 8018f46:	bf00      	nop
 8018f48:	24002c14 	.word	0x24002c14
 8018f4c:	24002bf0 	.word	0x24002bf0
 8018f50:	24002ba4 	.word	0x24002ba4
 8018f54:	24002ba8 	.word	0x24002ba8
 8018f58:	24002c04 	.word	0x24002c04
 8018f5c:	24002c0c 	.word	0x24002c0c
 8018f60:	24002bf4 	.word	0x24002bf4
 8018f64:	2400271c 	.word	0x2400271c
 8018f68:	24002718 	.word	0x24002718
 8018f6c:	24002bfc 	.word	0x24002bfc
 8018f70:	24002c00 	.word	0x24002c00

08018f74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b084      	sub	sp, #16
 8018f78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018f7a:	4b2f      	ldr	r3, [pc, #188]	; (8019038 <vTaskSwitchContext+0xc4>)
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d003      	beq.n	8018f8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018f82:	4b2e      	ldr	r3, [pc, #184]	; (801903c <vTaskSwitchContext+0xc8>)
 8018f84:	2201      	movs	r2, #1
 8018f86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018f88:	e052      	b.n	8019030 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8018f8a:	4b2c      	ldr	r3, [pc, #176]	; (801903c <vTaskSwitchContext+0xc8>)
 8018f8c:	2200      	movs	r2, #0
 8018f8e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018f90:	4b2b      	ldr	r3, [pc, #172]	; (8019040 <vTaskSwitchContext+0xcc>)
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	681a      	ldr	r2, [r3, #0]
 8018f96:	4b2a      	ldr	r3, [pc, #168]	; (8019040 <vTaskSwitchContext+0xcc>)
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f9c:	429a      	cmp	r2, r3
 8018f9e:	d808      	bhi.n	8018fb2 <vTaskSwitchContext+0x3e>
 8018fa0:	4b27      	ldr	r3, [pc, #156]	; (8019040 <vTaskSwitchContext+0xcc>)
 8018fa2:	681a      	ldr	r2, [r3, #0]
 8018fa4:	4b26      	ldr	r3, [pc, #152]	; (8019040 <vTaskSwitchContext+0xcc>)
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	3334      	adds	r3, #52	; 0x34
 8018faa:	4619      	mov	r1, r3
 8018fac:	4610      	mov	r0, r2
 8018fae:	f7e9 fa9b 	bl	80024e8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018fb2:	4b24      	ldr	r3, [pc, #144]	; (8019044 <vTaskSwitchContext+0xd0>)
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	60fb      	str	r3, [r7, #12]
 8018fb8:	e010      	b.n	8018fdc <vTaskSwitchContext+0x68>
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d10a      	bne.n	8018fd6 <vTaskSwitchContext+0x62>
	__asm volatile
 8018fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fc4:	f383 8811 	msr	BASEPRI, r3
 8018fc8:	f3bf 8f6f 	isb	sy
 8018fcc:	f3bf 8f4f 	dsb	sy
 8018fd0:	607b      	str	r3, [r7, #4]
}
 8018fd2:	bf00      	nop
 8018fd4:	e7fe      	b.n	8018fd4 <vTaskSwitchContext+0x60>
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	3b01      	subs	r3, #1
 8018fda:	60fb      	str	r3, [r7, #12]
 8018fdc:	491a      	ldr	r1, [pc, #104]	; (8019048 <vTaskSwitchContext+0xd4>)
 8018fde:	68fa      	ldr	r2, [r7, #12]
 8018fe0:	4613      	mov	r3, r2
 8018fe2:	009b      	lsls	r3, r3, #2
 8018fe4:	4413      	add	r3, r2
 8018fe6:	009b      	lsls	r3, r3, #2
 8018fe8:	440b      	add	r3, r1
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d0e4      	beq.n	8018fba <vTaskSwitchContext+0x46>
 8018ff0:	68fa      	ldr	r2, [r7, #12]
 8018ff2:	4613      	mov	r3, r2
 8018ff4:	009b      	lsls	r3, r3, #2
 8018ff6:	4413      	add	r3, r2
 8018ff8:	009b      	lsls	r3, r3, #2
 8018ffa:	4a13      	ldr	r2, [pc, #76]	; (8019048 <vTaskSwitchContext+0xd4>)
 8018ffc:	4413      	add	r3, r2
 8018ffe:	60bb      	str	r3, [r7, #8]
 8019000:	68bb      	ldr	r3, [r7, #8]
 8019002:	685b      	ldr	r3, [r3, #4]
 8019004:	685a      	ldr	r2, [r3, #4]
 8019006:	68bb      	ldr	r3, [r7, #8]
 8019008:	605a      	str	r2, [r3, #4]
 801900a:	68bb      	ldr	r3, [r7, #8]
 801900c:	685a      	ldr	r2, [r3, #4]
 801900e:	68bb      	ldr	r3, [r7, #8]
 8019010:	3308      	adds	r3, #8
 8019012:	429a      	cmp	r2, r3
 8019014:	d104      	bne.n	8019020 <vTaskSwitchContext+0xac>
 8019016:	68bb      	ldr	r3, [r7, #8]
 8019018:	685b      	ldr	r3, [r3, #4]
 801901a:	685a      	ldr	r2, [r3, #4]
 801901c:	68bb      	ldr	r3, [r7, #8]
 801901e:	605a      	str	r2, [r3, #4]
 8019020:	68bb      	ldr	r3, [r7, #8]
 8019022:	685b      	ldr	r3, [r3, #4]
 8019024:	68db      	ldr	r3, [r3, #12]
 8019026:	4a06      	ldr	r2, [pc, #24]	; (8019040 <vTaskSwitchContext+0xcc>)
 8019028:	6013      	str	r3, [r2, #0]
 801902a:	4a06      	ldr	r2, [pc, #24]	; (8019044 <vTaskSwitchContext+0xd0>)
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	6013      	str	r3, [r2, #0]
}
 8019030:	bf00      	nop
 8019032:	3710      	adds	r7, #16
 8019034:	46bd      	mov	sp, r7
 8019036:	bd80      	pop	{r7, pc}
 8019038:	24002c14 	.word	0x24002c14
 801903c:	24002c00 	.word	0x24002c00
 8019040:	24002718 	.word	0x24002718
 8019044:	24002bf4 	.word	0x24002bf4
 8019048:	2400271c 	.word	0x2400271c

0801904c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b084      	sub	sp, #16
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
 8019054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	2b00      	cmp	r3, #0
 801905a:	d10a      	bne.n	8019072 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019060:	f383 8811 	msr	BASEPRI, r3
 8019064:	f3bf 8f6f 	isb	sy
 8019068:	f3bf 8f4f 	dsb	sy
 801906c:	60fb      	str	r3, [r7, #12]
}
 801906e:	bf00      	nop
 8019070:	e7fe      	b.n	8019070 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019072:	4b07      	ldr	r3, [pc, #28]	; (8019090 <vTaskPlaceOnEventList+0x44>)
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	3318      	adds	r3, #24
 8019078:	4619      	mov	r1, r3
 801907a:	6878      	ldr	r0, [r7, #4]
 801907c:	f7fe fd6b 	bl	8017b56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019080:	2101      	movs	r1, #1
 8019082:	6838      	ldr	r0, [r7, #0]
 8019084:	f000 fb32 	bl	80196ec <prvAddCurrentTaskToDelayedList>
}
 8019088:	bf00      	nop
 801908a:	3710      	adds	r7, #16
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}
 8019090:	24002718 	.word	0x24002718

08019094 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8019094:	b580      	push	{r7, lr}
 8019096:	b086      	sub	sp, #24
 8019098:	af00      	add	r7, sp, #0
 801909a:	60f8      	str	r0, [r7, #12]
 801909c:	60b9      	str	r1, [r7, #8]
 801909e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d10a      	bne.n	80190bc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80190a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190aa:	f383 8811 	msr	BASEPRI, r3
 80190ae:	f3bf 8f6f 	isb	sy
 80190b2:	f3bf 8f4f 	dsb	sy
 80190b6:	617b      	str	r3, [r7, #20]
}
 80190b8:	bf00      	nop
 80190ba:	e7fe      	b.n	80190ba <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80190bc:	4b11      	ldr	r3, [pc, #68]	; (8019104 <vTaskPlaceOnUnorderedEventList+0x70>)
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d10a      	bne.n	80190da <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80190c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190c8:	f383 8811 	msr	BASEPRI, r3
 80190cc:	f3bf 8f6f 	isb	sy
 80190d0:	f3bf 8f4f 	dsb	sy
 80190d4:	613b      	str	r3, [r7, #16]
}
 80190d6:	bf00      	nop
 80190d8:	e7fe      	b.n	80190d8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80190da:	4b0b      	ldr	r3, [pc, #44]	; (8019108 <vTaskPlaceOnUnorderedEventList+0x74>)
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	68ba      	ldr	r2, [r7, #8]
 80190e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80190e4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80190e6:	4b08      	ldr	r3, [pc, #32]	; (8019108 <vTaskPlaceOnUnorderedEventList+0x74>)
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	3318      	adds	r3, #24
 80190ec:	4619      	mov	r1, r3
 80190ee:	68f8      	ldr	r0, [r7, #12]
 80190f0:	f7fe fd0d 	bl	8017b0e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80190f4:	2101      	movs	r1, #1
 80190f6:	6878      	ldr	r0, [r7, #4]
 80190f8:	f000 faf8 	bl	80196ec <prvAddCurrentTaskToDelayedList>
}
 80190fc:	bf00      	nop
 80190fe:	3718      	adds	r7, #24
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}
 8019104:	24002c14 	.word	0x24002c14
 8019108:	24002718 	.word	0x24002718

0801910c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801910c:	b580      	push	{r7, lr}
 801910e:	b086      	sub	sp, #24
 8019110:	af00      	add	r7, sp, #0
 8019112:	60f8      	str	r0, [r7, #12]
 8019114:	60b9      	str	r1, [r7, #8]
 8019116:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d10a      	bne.n	8019134 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019122:	f383 8811 	msr	BASEPRI, r3
 8019126:	f3bf 8f6f 	isb	sy
 801912a:	f3bf 8f4f 	dsb	sy
 801912e:	617b      	str	r3, [r7, #20]
}
 8019130:	bf00      	nop
 8019132:	e7fe      	b.n	8019132 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019134:	4b0a      	ldr	r3, [pc, #40]	; (8019160 <vTaskPlaceOnEventListRestricted+0x54>)
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	3318      	adds	r3, #24
 801913a:	4619      	mov	r1, r3
 801913c:	68f8      	ldr	r0, [r7, #12]
 801913e:	f7fe fce6 	bl	8017b0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d002      	beq.n	801914e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8019148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801914c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801914e:	6879      	ldr	r1, [r7, #4]
 8019150:	68b8      	ldr	r0, [r7, #8]
 8019152:	f000 facb 	bl	80196ec <prvAddCurrentTaskToDelayedList>
	}
 8019156:	bf00      	nop
 8019158:	3718      	adds	r7, #24
 801915a:	46bd      	mov	sp, r7
 801915c:	bd80      	pop	{r7, pc}
 801915e:	bf00      	nop
 8019160:	24002718 	.word	0x24002718

08019164 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019164:	b580      	push	{r7, lr}
 8019166:	b086      	sub	sp, #24
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	68db      	ldr	r3, [r3, #12]
 8019170:	68db      	ldr	r3, [r3, #12]
 8019172:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019174:	693b      	ldr	r3, [r7, #16]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d10a      	bne.n	8019190 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801917e:	f383 8811 	msr	BASEPRI, r3
 8019182:	f3bf 8f6f 	isb	sy
 8019186:	f3bf 8f4f 	dsb	sy
 801918a:	60fb      	str	r3, [r7, #12]
}
 801918c:	bf00      	nop
 801918e:	e7fe      	b.n	801918e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	3318      	adds	r3, #24
 8019194:	4618      	mov	r0, r3
 8019196:	f7fe fd17 	bl	8017bc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801919a:	4b1e      	ldr	r3, [pc, #120]	; (8019214 <xTaskRemoveFromEventList+0xb0>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d11d      	bne.n	80191de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80191a2:	693b      	ldr	r3, [r7, #16]
 80191a4:	3304      	adds	r3, #4
 80191a6:	4618      	mov	r0, r3
 80191a8:	f7fe fd0e 	bl	8017bc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80191ac:	693b      	ldr	r3, [r7, #16]
 80191ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191b0:	4b19      	ldr	r3, [pc, #100]	; (8019218 <xTaskRemoveFromEventList+0xb4>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	429a      	cmp	r2, r3
 80191b6:	d903      	bls.n	80191c0 <xTaskRemoveFromEventList+0x5c>
 80191b8:	693b      	ldr	r3, [r7, #16]
 80191ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191bc:	4a16      	ldr	r2, [pc, #88]	; (8019218 <xTaskRemoveFromEventList+0xb4>)
 80191be:	6013      	str	r3, [r2, #0]
 80191c0:	693b      	ldr	r3, [r7, #16]
 80191c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191c4:	4613      	mov	r3, r2
 80191c6:	009b      	lsls	r3, r3, #2
 80191c8:	4413      	add	r3, r2
 80191ca:	009b      	lsls	r3, r3, #2
 80191cc:	4a13      	ldr	r2, [pc, #76]	; (801921c <xTaskRemoveFromEventList+0xb8>)
 80191ce:	441a      	add	r2, r3
 80191d0:	693b      	ldr	r3, [r7, #16]
 80191d2:	3304      	adds	r3, #4
 80191d4:	4619      	mov	r1, r3
 80191d6:	4610      	mov	r0, r2
 80191d8:	f7fe fc99 	bl	8017b0e <vListInsertEnd>
 80191dc:	e005      	b.n	80191ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80191de:	693b      	ldr	r3, [r7, #16]
 80191e0:	3318      	adds	r3, #24
 80191e2:	4619      	mov	r1, r3
 80191e4:	480e      	ldr	r0, [pc, #56]	; (8019220 <xTaskRemoveFromEventList+0xbc>)
 80191e6:	f7fe fc92 	bl	8017b0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80191ea:	693b      	ldr	r3, [r7, #16]
 80191ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191ee:	4b0d      	ldr	r3, [pc, #52]	; (8019224 <xTaskRemoveFromEventList+0xc0>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191f4:	429a      	cmp	r2, r3
 80191f6:	d905      	bls.n	8019204 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80191f8:	2301      	movs	r3, #1
 80191fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80191fc:	4b0a      	ldr	r3, [pc, #40]	; (8019228 <xTaskRemoveFromEventList+0xc4>)
 80191fe:	2201      	movs	r2, #1
 8019200:	601a      	str	r2, [r3, #0]
 8019202:	e001      	b.n	8019208 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8019204:	2300      	movs	r3, #0
 8019206:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019208:	697b      	ldr	r3, [r7, #20]
}
 801920a:	4618      	mov	r0, r3
 801920c:	3718      	adds	r7, #24
 801920e:	46bd      	mov	sp, r7
 8019210:	bd80      	pop	{r7, pc}
 8019212:	bf00      	nop
 8019214:	24002c14 	.word	0x24002c14
 8019218:	24002bf4 	.word	0x24002bf4
 801921c:	2400271c 	.word	0x2400271c
 8019220:	24002bac 	.word	0x24002bac
 8019224:	24002718 	.word	0x24002718
 8019228:	24002c00 	.word	0x24002c00

0801922c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b086      	sub	sp, #24
 8019230:	af00      	add	r7, sp, #0
 8019232:	6078      	str	r0, [r7, #4]
 8019234:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8019236:	4b29      	ldr	r3, [pc, #164]	; (80192dc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	2b00      	cmp	r3, #0
 801923c:	d10a      	bne.n	8019254 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019242:	f383 8811 	msr	BASEPRI, r3
 8019246:	f3bf 8f6f 	isb	sy
 801924a:	f3bf 8f4f 	dsb	sy
 801924e:	613b      	str	r3, [r7, #16]
}
 8019250:	bf00      	nop
 8019252:	e7fe      	b.n	8019252 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8019254:	683b      	ldr	r3, [r7, #0]
 8019256:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	68db      	ldr	r3, [r3, #12]
 8019262:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8019264:	697b      	ldr	r3, [r7, #20]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d10a      	bne.n	8019280 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801926e:	f383 8811 	msr	BASEPRI, r3
 8019272:	f3bf 8f6f 	isb	sy
 8019276:	f3bf 8f4f 	dsb	sy
 801927a:	60fb      	str	r3, [r7, #12]
}
 801927c:	bf00      	nop
 801927e:	e7fe      	b.n	801927e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8019280:	6878      	ldr	r0, [r7, #4]
 8019282:	f7fe fca1 	bl	8017bc8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019286:	697b      	ldr	r3, [r7, #20]
 8019288:	3304      	adds	r3, #4
 801928a:	4618      	mov	r0, r3
 801928c:	f7fe fc9c 	bl	8017bc8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8019290:	697b      	ldr	r3, [r7, #20]
 8019292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019294:	4b12      	ldr	r3, [pc, #72]	; (80192e0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	429a      	cmp	r2, r3
 801929a:	d903      	bls.n	80192a4 <vTaskRemoveFromUnorderedEventList+0x78>
 801929c:	697b      	ldr	r3, [r7, #20]
 801929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192a0:	4a0f      	ldr	r2, [pc, #60]	; (80192e0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80192a2:	6013      	str	r3, [r2, #0]
 80192a4:	697b      	ldr	r3, [r7, #20]
 80192a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192a8:	4613      	mov	r3, r2
 80192aa:	009b      	lsls	r3, r3, #2
 80192ac:	4413      	add	r3, r2
 80192ae:	009b      	lsls	r3, r3, #2
 80192b0:	4a0c      	ldr	r2, [pc, #48]	; (80192e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80192b2:	441a      	add	r2, r3
 80192b4:	697b      	ldr	r3, [r7, #20]
 80192b6:	3304      	adds	r3, #4
 80192b8:	4619      	mov	r1, r3
 80192ba:	4610      	mov	r0, r2
 80192bc:	f7fe fc27 	bl	8017b0e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80192c0:	697b      	ldr	r3, [r7, #20]
 80192c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192c4:	4b08      	ldr	r3, [pc, #32]	; (80192e8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192ca:	429a      	cmp	r2, r3
 80192cc:	d902      	bls.n	80192d4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80192ce:	4b07      	ldr	r3, [pc, #28]	; (80192ec <vTaskRemoveFromUnorderedEventList+0xc0>)
 80192d0:	2201      	movs	r2, #1
 80192d2:	601a      	str	r2, [r3, #0]
	}
}
 80192d4:	bf00      	nop
 80192d6:	3718      	adds	r7, #24
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}
 80192dc:	24002c14 	.word	0x24002c14
 80192e0:	24002bf4 	.word	0x24002bf4
 80192e4:	2400271c 	.word	0x2400271c
 80192e8:	24002718 	.word	0x24002718
 80192ec:	24002c00 	.word	0x24002c00

080192f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80192f0:	b480      	push	{r7}
 80192f2:	b083      	sub	sp, #12
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80192f8:	4b06      	ldr	r3, [pc, #24]	; (8019314 <vTaskInternalSetTimeOutState+0x24>)
 80192fa:	681a      	ldr	r2, [r3, #0]
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019300:	4b05      	ldr	r3, [pc, #20]	; (8019318 <vTaskInternalSetTimeOutState+0x28>)
 8019302:	681a      	ldr	r2, [r3, #0]
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	605a      	str	r2, [r3, #4]
}
 8019308:	bf00      	nop
 801930a:	370c      	adds	r7, #12
 801930c:	46bd      	mov	sp, r7
 801930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019312:	4770      	bx	lr
 8019314:	24002c04 	.word	0x24002c04
 8019318:	24002bf0 	.word	0x24002bf0

0801931c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b088      	sub	sp, #32
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
 8019324:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d10a      	bne.n	8019342 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019330:	f383 8811 	msr	BASEPRI, r3
 8019334:	f3bf 8f6f 	isb	sy
 8019338:	f3bf 8f4f 	dsb	sy
 801933c:	613b      	str	r3, [r7, #16]
}
 801933e:	bf00      	nop
 8019340:	e7fe      	b.n	8019340 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8019342:	683b      	ldr	r3, [r7, #0]
 8019344:	2b00      	cmp	r3, #0
 8019346:	d10a      	bne.n	801935e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801934c:	f383 8811 	msr	BASEPRI, r3
 8019350:	f3bf 8f6f 	isb	sy
 8019354:	f3bf 8f4f 	dsb	sy
 8019358:	60fb      	str	r3, [r7, #12]
}
 801935a:	bf00      	nop
 801935c:	e7fe      	b.n	801935c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801935e:	f000 feb1 	bl	801a0c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019362:	4b1d      	ldr	r3, [pc, #116]	; (80193d8 <xTaskCheckForTimeOut+0xbc>)
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	685b      	ldr	r3, [r3, #4]
 801936c:	69ba      	ldr	r2, [r7, #24]
 801936e:	1ad3      	subs	r3, r2, r3
 8019370:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801937a:	d102      	bne.n	8019382 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801937c:	2300      	movs	r3, #0
 801937e:	61fb      	str	r3, [r7, #28]
 8019380:	e023      	b.n	80193ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	681a      	ldr	r2, [r3, #0]
 8019386:	4b15      	ldr	r3, [pc, #84]	; (80193dc <xTaskCheckForTimeOut+0xc0>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	429a      	cmp	r2, r3
 801938c:	d007      	beq.n	801939e <xTaskCheckForTimeOut+0x82>
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	685b      	ldr	r3, [r3, #4]
 8019392:	69ba      	ldr	r2, [r7, #24]
 8019394:	429a      	cmp	r2, r3
 8019396:	d302      	bcc.n	801939e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019398:	2301      	movs	r3, #1
 801939a:	61fb      	str	r3, [r7, #28]
 801939c:	e015      	b.n	80193ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801939e:	683b      	ldr	r3, [r7, #0]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	697a      	ldr	r2, [r7, #20]
 80193a4:	429a      	cmp	r2, r3
 80193a6:	d20b      	bcs.n	80193c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80193a8:	683b      	ldr	r3, [r7, #0]
 80193aa:	681a      	ldr	r2, [r3, #0]
 80193ac:	697b      	ldr	r3, [r7, #20]
 80193ae:	1ad2      	subs	r2, r2, r3
 80193b0:	683b      	ldr	r3, [r7, #0]
 80193b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80193b4:	6878      	ldr	r0, [r7, #4]
 80193b6:	f7ff ff9b 	bl	80192f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80193ba:	2300      	movs	r3, #0
 80193bc:	61fb      	str	r3, [r7, #28]
 80193be:	e004      	b.n	80193ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80193c0:	683b      	ldr	r3, [r7, #0]
 80193c2:	2200      	movs	r2, #0
 80193c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80193c6:	2301      	movs	r3, #1
 80193c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80193ca:	f000 feab 	bl	801a124 <vPortExitCritical>

	return xReturn;
 80193ce:	69fb      	ldr	r3, [r7, #28]
}
 80193d0:	4618      	mov	r0, r3
 80193d2:	3720      	adds	r7, #32
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd80      	pop	{r7, pc}
 80193d8:	24002bf0 	.word	0x24002bf0
 80193dc:	24002c04 	.word	0x24002c04

080193e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80193e0:	b480      	push	{r7}
 80193e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80193e4:	4b03      	ldr	r3, [pc, #12]	; (80193f4 <vTaskMissedYield+0x14>)
 80193e6:	2201      	movs	r2, #1
 80193e8:	601a      	str	r2, [r3, #0]
}
 80193ea:	bf00      	nop
 80193ec:	46bd      	mov	sp, r7
 80193ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f2:	4770      	bx	lr
 80193f4:	24002c00 	.word	0x24002c00

080193f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b082      	sub	sp, #8
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019400:	f000 f852 	bl	80194a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019404:	4b06      	ldr	r3, [pc, #24]	; (8019420 <prvIdleTask+0x28>)
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	2b01      	cmp	r3, #1
 801940a:	d9f9      	bls.n	8019400 <prvIdleTask+0x8>
			{
				taskYIELD();
 801940c:	4b05      	ldr	r3, [pc, #20]	; (8019424 <prvIdleTask+0x2c>)
 801940e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019412:	601a      	str	r2, [r3, #0]
 8019414:	f3bf 8f4f 	dsb	sy
 8019418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801941c:	e7f0      	b.n	8019400 <prvIdleTask+0x8>
 801941e:	bf00      	nop
 8019420:	2400271c 	.word	0x2400271c
 8019424:	e000ed04 	.word	0xe000ed04

08019428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b082      	sub	sp, #8
 801942c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801942e:	2300      	movs	r3, #0
 8019430:	607b      	str	r3, [r7, #4]
 8019432:	e00c      	b.n	801944e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019434:	687a      	ldr	r2, [r7, #4]
 8019436:	4613      	mov	r3, r2
 8019438:	009b      	lsls	r3, r3, #2
 801943a:	4413      	add	r3, r2
 801943c:	009b      	lsls	r3, r3, #2
 801943e:	4a12      	ldr	r2, [pc, #72]	; (8019488 <prvInitialiseTaskLists+0x60>)
 8019440:	4413      	add	r3, r2
 8019442:	4618      	mov	r0, r3
 8019444:	f7fe fb36 	bl	8017ab4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	3301      	adds	r3, #1
 801944c:	607b      	str	r3, [r7, #4]
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	2b37      	cmp	r3, #55	; 0x37
 8019452:	d9ef      	bls.n	8019434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019454:	480d      	ldr	r0, [pc, #52]	; (801948c <prvInitialiseTaskLists+0x64>)
 8019456:	f7fe fb2d 	bl	8017ab4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801945a:	480d      	ldr	r0, [pc, #52]	; (8019490 <prvInitialiseTaskLists+0x68>)
 801945c:	f7fe fb2a 	bl	8017ab4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019460:	480c      	ldr	r0, [pc, #48]	; (8019494 <prvInitialiseTaskLists+0x6c>)
 8019462:	f7fe fb27 	bl	8017ab4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019466:	480c      	ldr	r0, [pc, #48]	; (8019498 <prvInitialiseTaskLists+0x70>)
 8019468:	f7fe fb24 	bl	8017ab4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801946c:	480b      	ldr	r0, [pc, #44]	; (801949c <prvInitialiseTaskLists+0x74>)
 801946e:	f7fe fb21 	bl	8017ab4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019472:	4b0b      	ldr	r3, [pc, #44]	; (80194a0 <prvInitialiseTaskLists+0x78>)
 8019474:	4a05      	ldr	r2, [pc, #20]	; (801948c <prvInitialiseTaskLists+0x64>)
 8019476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019478:	4b0a      	ldr	r3, [pc, #40]	; (80194a4 <prvInitialiseTaskLists+0x7c>)
 801947a:	4a05      	ldr	r2, [pc, #20]	; (8019490 <prvInitialiseTaskLists+0x68>)
 801947c:	601a      	str	r2, [r3, #0]
}
 801947e:	bf00      	nop
 8019480:	3708      	adds	r7, #8
 8019482:	46bd      	mov	sp, r7
 8019484:	bd80      	pop	{r7, pc}
 8019486:	bf00      	nop
 8019488:	2400271c 	.word	0x2400271c
 801948c:	24002b7c 	.word	0x24002b7c
 8019490:	24002b90 	.word	0x24002b90
 8019494:	24002bac 	.word	0x24002bac
 8019498:	24002bc0 	.word	0x24002bc0
 801949c:	24002bd8 	.word	0x24002bd8
 80194a0:	24002ba4 	.word	0x24002ba4
 80194a4:	24002ba8 	.word	0x24002ba8

080194a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b082      	sub	sp, #8
 80194ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80194ae:	e019      	b.n	80194e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80194b0:	f000 fe08 	bl	801a0c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194b4:	4b10      	ldr	r3, [pc, #64]	; (80194f8 <prvCheckTasksWaitingTermination+0x50>)
 80194b6:	68db      	ldr	r3, [r3, #12]
 80194b8:	68db      	ldr	r3, [r3, #12]
 80194ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	3304      	adds	r3, #4
 80194c0:	4618      	mov	r0, r3
 80194c2:	f7fe fb81 	bl	8017bc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80194c6:	4b0d      	ldr	r3, [pc, #52]	; (80194fc <prvCheckTasksWaitingTermination+0x54>)
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	3b01      	subs	r3, #1
 80194cc:	4a0b      	ldr	r2, [pc, #44]	; (80194fc <prvCheckTasksWaitingTermination+0x54>)
 80194ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80194d0:	4b0b      	ldr	r3, [pc, #44]	; (8019500 <prvCheckTasksWaitingTermination+0x58>)
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	3b01      	subs	r3, #1
 80194d6:	4a0a      	ldr	r2, [pc, #40]	; (8019500 <prvCheckTasksWaitingTermination+0x58>)
 80194d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80194da:	f000 fe23 	bl	801a124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80194de:	6878      	ldr	r0, [r7, #4]
 80194e0:	f000 f810 	bl	8019504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80194e4:	4b06      	ldr	r3, [pc, #24]	; (8019500 <prvCheckTasksWaitingTermination+0x58>)
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d1e1      	bne.n	80194b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80194ec:	bf00      	nop
 80194ee:	bf00      	nop
 80194f0:	3708      	adds	r7, #8
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd80      	pop	{r7, pc}
 80194f6:	bf00      	nop
 80194f8:	24002bc0 	.word	0x24002bc0
 80194fc:	24002bec 	.word	0x24002bec
 8019500:	24002bd4 	.word	0x24002bd4

08019504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019504:	b580      	push	{r7, lr}
 8019506:	b084      	sub	sp, #16
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019512:	2b00      	cmp	r3, #0
 8019514:	d108      	bne.n	8019528 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801951a:	4618      	mov	r0, r3
 801951c:	f000 ffc0 	bl	801a4a0 <vPortFree>
				vPortFree( pxTCB );
 8019520:	6878      	ldr	r0, [r7, #4]
 8019522:	f000 ffbd 	bl	801a4a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019526:	e018      	b.n	801955a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801952e:	2b01      	cmp	r3, #1
 8019530:	d103      	bne.n	801953a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8019532:	6878      	ldr	r0, [r7, #4]
 8019534:	f000 ffb4 	bl	801a4a0 <vPortFree>
	}
 8019538:	e00f      	b.n	801955a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019540:	2b02      	cmp	r3, #2
 8019542:	d00a      	beq.n	801955a <prvDeleteTCB+0x56>
	__asm volatile
 8019544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019548:	f383 8811 	msr	BASEPRI, r3
 801954c:	f3bf 8f6f 	isb	sy
 8019550:	f3bf 8f4f 	dsb	sy
 8019554:	60fb      	str	r3, [r7, #12]
}
 8019556:	bf00      	nop
 8019558:	e7fe      	b.n	8019558 <prvDeleteTCB+0x54>
	}
 801955a:	bf00      	nop
 801955c:	3710      	adds	r7, #16
 801955e:	46bd      	mov	sp, r7
 8019560:	bd80      	pop	{r7, pc}
	...

08019564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019564:	b480      	push	{r7}
 8019566:	b083      	sub	sp, #12
 8019568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801956a:	4b0c      	ldr	r3, [pc, #48]	; (801959c <prvResetNextTaskUnblockTime+0x38>)
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d104      	bne.n	801957e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019574:	4b0a      	ldr	r3, [pc, #40]	; (80195a0 <prvResetNextTaskUnblockTime+0x3c>)
 8019576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801957a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801957c:	e008      	b.n	8019590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801957e:	4b07      	ldr	r3, [pc, #28]	; (801959c <prvResetNextTaskUnblockTime+0x38>)
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	68db      	ldr	r3, [r3, #12]
 8019584:	68db      	ldr	r3, [r3, #12]
 8019586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	685b      	ldr	r3, [r3, #4]
 801958c:	4a04      	ldr	r2, [pc, #16]	; (80195a0 <prvResetNextTaskUnblockTime+0x3c>)
 801958e:	6013      	str	r3, [r2, #0]
}
 8019590:	bf00      	nop
 8019592:	370c      	adds	r7, #12
 8019594:	46bd      	mov	sp, r7
 8019596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959a:	4770      	bx	lr
 801959c:	24002ba4 	.word	0x24002ba4
 80195a0:	24002c0c 	.word	0x24002c0c

080195a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80195a4:	b480      	push	{r7}
 80195a6:	b083      	sub	sp, #12
 80195a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80195aa:	4b0b      	ldr	r3, [pc, #44]	; (80195d8 <xTaskGetSchedulerState+0x34>)
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d102      	bne.n	80195b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80195b2:	2301      	movs	r3, #1
 80195b4:	607b      	str	r3, [r7, #4]
 80195b6:	e008      	b.n	80195ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80195b8:	4b08      	ldr	r3, [pc, #32]	; (80195dc <xTaskGetSchedulerState+0x38>)
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d102      	bne.n	80195c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80195c0:	2302      	movs	r3, #2
 80195c2:	607b      	str	r3, [r7, #4]
 80195c4:	e001      	b.n	80195ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80195c6:	2300      	movs	r3, #0
 80195c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80195ca:	687b      	ldr	r3, [r7, #4]
	}
 80195cc:	4618      	mov	r0, r3
 80195ce:	370c      	adds	r7, #12
 80195d0:	46bd      	mov	sp, r7
 80195d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d6:	4770      	bx	lr
 80195d8:	24002bf8 	.word	0x24002bf8
 80195dc:	24002c14 	.word	0x24002c14

080195e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b086      	sub	sp, #24
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80195ec:	2300      	movs	r3, #0
 80195ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d056      	beq.n	80196a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80195f6:	4b2e      	ldr	r3, [pc, #184]	; (80196b0 <xTaskPriorityDisinherit+0xd0>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	693a      	ldr	r2, [r7, #16]
 80195fc:	429a      	cmp	r2, r3
 80195fe:	d00a      	beq.n	8019616 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019604:	f383 8811 	msr	BASEPRI, r3
 8019608:	f3bf 8f6f 	isb	sy
 801960c:	f3bf 8f4f 	dsb	sy
 8019610:	60fb      	str	r3, [r7, #12]
}
 8019612:	bf00      	nop
 8019614:	e7fe      	b.n	8019614 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8019616:	693b      	ldr	r3, [r7, #16]
 8019618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801961a:	2b00      	cmp	r3, #0
 801961c:	d10a      	bne.n	8019634 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019622:	f383 8811 	msr	BASEPRI, r3
 8019626:	f3bf 8f6f 	isb	sy
 801962a:	f3bf 8f4f 	dsb	sy
 801962e:	60bb      	str	r3, [r7, #8]
}
 8019630:	bf00      	nop
 8019632:	e7fe      	b.n	8019632 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019634:	693b      	ldr	r3, [r7, #16]
 8019636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019638:	1e5a      	subs	r2, r3, #1
 801963a:	693b      	ldr	r3, [r7, #16]
 801963c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801963e:	693b      	ldr	r3, [r7, #16]
 8019640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019642:	693b      	ldr	r3, [r7, #16]
 8019644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019646:	429a      	cmp	r2, r3
 8019648:	d02c      	beq.n	80196a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801964a:	693b      	ldr	r3, [r7, #16]
 801964c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801964e:	2b00      	cmp	r3, #0
 8019650:	d128      	bne.n	80196a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019652:	693b      	ldr	r3, [r7, #16]
 8019654:	3304      	adds	r3, #4
 8019656:	4618      	mov	r0, r3
 8019658:	f7fe fab6 	bl	8017bc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801965c:	693b      	ldr	r3, [r7, #16]
 801965e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019660:	693b      	ldr	r3, [r7, #16]
 8019662:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019664:	693b      	ldr	r3, [r7, #16]
 8019666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019668:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801966c:	693b      	ldr	r3, [r7, #16]
 801966e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019670:	693b      	ldr	r3, [r7, #16]
 8019672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019674:	4b0f      	ldr	r3, [pc, #60]	; (80196b4 <xTaskPriorityDisinherit+0xd4>)
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	429a      	cmp	r2, r3
 801967a:	d903      	bls.n	8019684 <xTaskPriorityDisinherit+0xa4>
 801967c:	693b      	ldr	r3, [r7, #16]
 801967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019680:	4a0c      	ldr	r2, [pc, #48]	; (80196b4 <xTaskPriorityDisinherit+0xd4>)
 8019682:	6013      	str	r3, [r2, #0]
 8019684:	693b      	ldr	r3, [r7, #16]
 8019686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019688:	4613      	mov	r3, r2
 801968a:	009b      	lsls	r3, r3, #2
 801968c:	4413      	add	r3, r2
 801968e:	009b      	lsls	r3, r3, #2
 8019690:	4a09      	ldr	r2, [pc, #36]	; (80196b8 <xTaskPriorityDisinherit+0xd8>)
 8019692:	441a      	add	r2, r3
 8019694:	693b      	ldr	r3, [r7, #16]
 8019696:	3304      	adds	r3, #4
 8019698:	4619      	mov	r1, r3
 801969a:	4610      	mov	r0, r2
 801969c:	f7fe fa37 	bl	8017b0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80196a0:	2301      	movs	r3, #1
 80196a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80196a4:	697b      	ldr	r3, [r7, #20]
	}
 80196a6:	4618      	mov	r0, r3
 80196a8:	3718      	adds	r7, #24
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}
 80196ae:	bf00      	nop
 80196b0:	24002718 	.word	0x24002718
 80196b4:	24002bf4 	.word	0x24002bf4
 80196b8:	2400271c 	.word	0x2400271c

080196bc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80196bc:	b480      	push	{r7}
 80196be:	b083      	sub	sp, #12
 80196c0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80196c2:	4b09      	ldr	r3, [pc, #36]	; (80196e8 <uxTaskResetEventItemValue+0x2c>)
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	699b      	ldr	r3, [r3, #24]
 80196c8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196ca:	4b07      	ldr	r3, [pc, #28]	; (80196e8 <uxTaskResetEventItemValue+0x2c>)
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196d0:	4b05      	ldr	r3, [pc, #20]	; (80196e8 <uxTaskResetEventItemValue+0x2c>)
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80196d8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80196da:	687b      	ldr	r3, [r7, #4]
}
 80196dc:	4618      	mov	r0, r3
 80196de:	370c      	adds	r7, #12
 80196e0:	46bd      	mov	sp, r7
 80196e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196e6:	4770      	bx	lr
 80196e8:	24002718 	.word	0x24002718

080196ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b084      	sub	sp, #16
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	6078      	str	r0, [r7, #4]
 80196f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80196f6:	4b21      	ldr	r3, [pc, #132]	; (801977c <prvAddCurrentTaskToDelayedList+0x90>)
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80196fc:	4b20      	ldr	r3, [pc, #128]	; (8019780 <prvAddCurrentTaskToDelayedList+0x94>)
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	3304      	adds	r3, #4
 8019702:	4618      	mov	r0, r3
 8019704:	f7fe fa60 	bl	8017bc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801970e:	d10a      	bne.n	8019726 <prvAddCurrentTaskToDelayedList+0x3a>
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d007      	beq.n	8019726 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019716:	4b1a      	ldr	r3, [pc, #104]	; (8019780 <prvAddCurrentTaskToDelayedList+0x94>)
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	3304      	adds	r3, #4
 801971c:	4619      	mov	r1, r3
 801971e:	4819      	ldr	r0, [pc, #100]	; (8019784 <prvAddCurrentTaskToDelayedList+0x98>)
 8019720:	f7fe f9f5 	bl	8017b0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019724:	e026      	b.n	8019774 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019726:	68fa      	ldr	r2, [r7, #12]
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	4413      	add	r3, r2
 801972c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801972e:	4b14      	ldr	r3, [pc, #80]	; (8019780 <prvAddCurrentTaskToDelayedList+0x94>)
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	68ba      	ldr	r2, [r7, #8]
 8019734:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019736:	68ba      	ldr	r2, [r7, #8]
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	429a      	cmp	r2, r3
 801973c:	d209      	bcs.n	8019752 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801973e:	4b12      	ldr	r3, [pc, #72]	; (8019788 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019740:	681a      	ldr	r2, [r3, #0]
 8019742:	4b0f      	ldr	r3, [pc, #60]	; (8019780 <prvAddCurrentTaskToDelayedList+0x94>)
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	3304      	adds	r3, #4
 8019748:	4619      	mov	r1, r3
 801974a:	4610      	mov	r0, r2
 801974c:	f7fe fa03 	bl	8017b56 <vListInsert>
}
 8019750:	e010      	b.n	8019774 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019752:	4b0e      	ldr	r3, [pc, #56]	; (801978c <prvAddCurrentTaskToDelayedList+0xa0>)
 8019754:	681a      	ldr	r2, [r3, #0]
 8019756:	4b0a      	ldr	r3, [pc, #40]	; (8019780 <prvAddCurrentTaskToDelayedList+0x94>)
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	3304      	adds	r3, #4
 801975c:	4619      	mov	r1, r3
 801975e:	4610      	mov	r0, r2
 8019760:	f7fe f9f9 	bl	8017b56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019764:	4b0a      	ldr	r3, [pc, #40]	; (8019790 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	68ba      	ldr	r2, [r7, #8]
 801976a:	429a      	cmp	r2, r3
 801976c:	d202      	bcs.n	8019774 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801976e:	4a08      	ldr	r2, [pc, #32]	; (8019790 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019770:	68bb      	ldr	r3, [r7, #8]
 8019772:	6013      	str	r3, [r2, #0]
}
 8019774:	bf00      	nop
 8019776:	3710      	adds	r7, #16
 8019778:	46bd      	mov	sp, r7
 801977a:	bd80      	pop	{r7, pc}
 801977c:	24002bf0 	.word	0x24002bf0
 8019780:	24002718 	.word	0x24002718
 8019784:	24002bd8 	.word	0x24002bd8
 8019788:	24002ba8 	.word	0x24002ba8
 801978c:	24002ba4 	.word	0x24002ba4
 8019790:	24002c0c 	.word	0x24002c0c

08019794 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019794:	b580      	push	{r7, lr}
 8019796:	b08a      	sub	sp, #40	; 0x28
 8019798:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801979a:	2300      	movs	r3, #0
 801979c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801979e:	f000 fb07 	bl	8019db0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80197a2:	4b1c      	ldr	r3, [pc, #112]	; (8019814 <xTimerCreateTimerTask+0x80>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d021      	beq.n	80197ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80197aa:	2300      	movs	r3, #0
 80197ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80197ae:	2300      	movs	r3, #0
 80197b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80197b2:	1d3a      	adds	r2, r7, #4
 80197b4:	f107 0108 	add.w	r1, r7, #8
 80197b8:	f107 030c 	add.w	r3, r7, #12
 80197bc:	4618      	mov	r0, r3
 80197be:	f7fd fef3 	bl	80175a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80197c2:	6879      	ldr	r1, [r7, #4]
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	68fa      	ldr	r2, [r7, #12]
 80197c8:	9202      	str	r2, [sp, #8]
 80197ca:	9301      	str	r3, [sp, #4]
 80197cc:	2302      	movs	r3, #2
 80197ce:	9300      	str	r3, [sp, #0]
 80197d0:	2300      	movs	r3, #0
 80197d2:	460a      	mov	r2, r1
 80197d4:	4910      	ldr	r1, [pc, #64]	; (8019818 <xTimerCreateTimerTask+0x84>)
 80197d6:	4811      	ldr	r0, [pc, #68]	; (801981c <xTimerCreateTimerTask+0x88>)
 80197d8:	f7fe ff0c 	bl	80185f4 <xTaskCreateStatic>
 80197dc:	4603      	mov	r3, r0
 80197de:	4a10      	ldr	r2, [pc, #64]	; (8019820 <xTimerCreateTimerTask+0x8c>)
 80197e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80197e2:	4b0f      	ldr	r3, [pc, #60]	; (8019820 <xTimerCreateTimerTask+0x8c>)
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d001      	beq.n	80197ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80197ea:	2301      	movs	r3, #1
 80197ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80197ee:	697b      	ldr	r3, [r7, #20]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d10a      	bne.n	801980a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80197f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197f8:	f383 8811 	msr	BASEPRI, r3
 80197fc:	f3bf 8f6f 	isb	sy
 8019800:	f3bf 8f4f 	dsb	sy
 8019804:	613b      	str	r3, [r7, #16]
}
 8019806:	bf00      	nop
 8019808:	e7fe      	b.n	8019808 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801980a:	697b      	ldr	r3, [r7, #20]
}
 801980c:	4618      	mov	r0, r3
 801980e:	3718      	adds	r7, #24
 8019810:	46bd      	mov	sp, r7
 8019812:	bd80      	pop	{r7, pc}
 8019814:	24002c48 	.word	0x24002c48
 8019818:	0801b3c8 	.word	0x0801b3c8
 801981c:	08019959 	.word	0x08019959
 8019820:	24002c4c 	.word	0x24002c4c

08019824 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b08a      	sub	sp, #40	; 0x28
 8019828:	af00      	add	r7, sp, #0
 801982a:	60f8      	str	r0, [r7, #12]
 801982c:	60b9      	str	r1, [r7, #8]
 801982e:	607a      	str	r2, [r7, #4]
 8019830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019832:	2300      	movs	r3, #0
 8019834:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d10a      	bne.n	8019852 <xTimerGenericCommand+0x2e>
	__asm volatile
 801983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019840:	f383 8811 	msr	BASEPRI, r3
 8019844:	f3bf 8f6f 	isb	sy
 8019848:	f3bf 8f4f 	dsb	sy
 801984c:	623b      	str	r3, [r7, #32]
}
 801984e:	bf00      	nop
 8019850:	e7fe      	b.n	8019850 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019852:	4b1a      	ldr	r3, [pc, #104]	; (80198bc <xTimerGenericCommand+0x98>)
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d02a      	beq.n	80198b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801985a:	68bb      	ldr	r3, [r7, #8]
 801985c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019866:	68bb      	ldr	r3, [r7, #8]
 8019868:	2b05      	cmp	r3, #5
 801986a:	dc18      	bgt.n	801989e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801986c:	f7ff fe9a 	bl	80195a4 <xTaskGetSchedulerState>
 8019870:	4603      	mov	r3, r0
 8019872:	2b02      	cmp	r3, #2
 8019874:	d109      	bne.n	801988a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019876:	4b11      	ldr	r3, [pc, #68]	; (80198bc <xTimerGenericCommand+0x98>)
 8019878:	6818      	ldr	r0, [r3, #0]
 801987a:	f107 0110 	add.w	r1, r7, #16
 801987e:	2300      	movs	r3, #0
 8019880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019882:	f7fe facf 	bl	8017e24 <xQueueGenericSend>
 8019886:	6278      	str	r0, [r7, #36]	; 0x24
 8019888:	e012      	b.n	80198b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801988a:	4b0c      	ldr	r3, [pc, #48]	; (80198bc <xTimerGenericCommand+0x98>)
 801988c:	6818      	ldr	r0, [r3, #0]
 801988e:	f107 0110 	add.w	r1, r7, #16
 8019892:	2300      	movs	r3, #0
 8019894:	2200      	movs	r2, #0
 8019896:	f7fe fac5 	bl	8017e24 <xQueueGenericSend>
 801989a:	6278      	str	r0, [r7, #36]	; 0x24
 801989c:	e008      	b.n	80198b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801989e:	4b07      	ldr	r3, [pc, #28]	; (80198bc <xTimerGenericCommand+0x98>)
 80198a0:	6818      	ldr	r0, [r3, #0]
 80198a2:	f107 0110 	add.w	r1, r7, #16
 80198a6:	2300      	movs	r3, #0
 80198a8:	683a      	ldr	r2, [r7, #0]
 80198aa:	f7fe fbb9 	bl	8018020 <xQueueGenericSendFromISR>
 80198ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80198b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80198b2:	4618      	mov	r0, r3
 80198b4:	3728      	adds	r7, #40	; 0x28
 80198b6:	46bd      	mov	sp, r7
 80198b8:	bd80      	pop	{r7, pc}
 80198ba:	bf00      	nop
 80198bc:	24002c48 	.word	0x24002c48

080198c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b088      	sub	sp, #32
 80198c4:	af02      	add	r7, sp, #8
 80198c6:	6078      	str	r0, [r7, #4]
 80198c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198ca:	4b22      	ldr	r3, [pc, #136]	; (8019954 <prvProcessExpiredTimer+0x94>)
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	68db      	ldr	r3, [r3, #12]
 80198d0:	68db      	ldr	r3, [r3, #12]
 80198d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80198d4:	697b      	ldr	r3, [r7, #20]
 80198d6:	3304      	adds	r3, #4
 80198d8:	4618      	mov	r0, r3
 80198da:	f7fe f975 	bl	8017bc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80198de:	697b      	ldr	r3, [r7, #20]
 80198e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198e4:	f003 0304 	and.w	r3, r3, #4
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d022      	beq.n	8019932 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80198ec:	697b      	ldr	r3, [r7, #20]
 80198ee:	699a      	ldr	r2, [r3, #24]
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	18d1      	adds	r1, r2, r3
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	683a      	ldr	r2, [r7, #0]
 80198f8:	6978      	ldr	r0, [r7, #20]
 80198fa:	f000 f8d1 	bl	8019aa0 <prvInsertTimerInActiveList>
 80198fe:	4603      	mov	r3, r0
 8019900:	2b00      	cmp	r3, #0
 8019902:	d01f      	beq.n	8019944 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019904:	2300      	movs	r3, #0
 8019906:	9300      	str	r3, [sp, #0]
 8019908:	2300      	movs	r3, #0
 801990a:	687a      	ldr	r2, [r7, #4]
 801990c:	2100      	movs	r1, #0
 801990e:	6978      	ldr	r0, [r7, #20]
 8019910:	f7ff ff88 	bl	8019824 <xTimerGenericCommand>
 8019914:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019916:	693b      	ldr	r3, [r7, #16]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d113      	bne.n	8019944 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019920:	f383 8811 	msr	BASEPRI, r3
 8019924:	f3bf 8f6f 	isb	sy
 8019928:	f3bf 8f4f 	dsb	sy
 801992c:	60fb      	str	r3, [r7, #12]
}
 801992e:	bf00      	nop
 8019930:	e7fe      	b.n	8019930 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019932:	697b      	ldr	r3, [r7, #20]
 8019934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019938:	f023 0301 	bic.w	r3, r3, #1
 801993c:	b2da      	uxtb	r2, r3
 801993e:	697b      	ldr	r3, [r7, #20]
 8019940:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019944:	697b      	ldr	r3, [r7, #20]
 8019946:	6a1b      	ldr	r3, [r3, #32]
 8019948:	6978      	ldr	r0, [r7, #20]
 801994a:	4798      	blx	r3
}
 801994c:	bf00      	nop
 801994e:	3718      	adds	r7, #24
 8019950:	46bd      	mov	sp, r7
 8019952:	bd80      	pop	{r7, pc}
 8019954:	24002c40 	.word	0x24002c40

08019958 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b084      	sub	sp, #16
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019960:	f107 0308 	add.w	r3, r7, #8
 8019964:	4618      	mov	r0, r3
 8019966:	f000 f857 	bl	8019a18 <prvGetNextExpireTime>
 801996a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801996c:	68bb      	ldr	r3, [r7, #8]
 801996e:	4619      	mov	r1, r3
 8019970:	68f8      	ldr	r0, [r7, #12]
 8019972:	f000 f803 	bl	801997c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019976:	f000 f8d5 	bl	8019b24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801997a:	e7f1      	b.n	8019960 <prvTimerTask+0x8>

0801997c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801997c:	b580      	push	{r7, lr}
 801997e:	b084      	sub	sp, #16
 8019980:	af00      	add	r7, sp, #0
 8019982:	6078      	str	r0, [r7, #4]
 8019984:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019986:	f7ff f977 	bl	8018c78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801998a:	f107 0308 	add.w	r3, r7, #8
 801998e:	4618      	mov	r0, r3
 8019990:	f000 f866 	bl	8019a60 <prvSampleTimeNow>
 8019994:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019996:	68bb      	ldr	r3, [r7, #8]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d130      	bne.n	80199fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801999c:	683b      	ldr	r3, [r7, #0]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d10a      	bne.n	80199b8 <prvProcessTimerOrBlockTask+0x3c>
 80199a2:	687a      	ldr	r2, [r7, #4]
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	429a      	cmp	r2, r3
 80199a8:	d806      	bhi.n	80199b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80199aa:	f7ff f973 	bl	8018c94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80199ae:	68f9      	ldr	r1, [r7, #12]
 80199b0:	6878      	ldr	r0, [r7, #4]
 80199b2:	f7ff ff85 	bl	80198c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80199b6:	e024      	b.n	8019a02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80199b8:	683b      	ldr	r3, [r7, #0]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d008      	beq.n	80199d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80199be:	4b13      	ldr	r3, [pc, #76]	; (8019a0c <prvProcessTimerOrBlockTask+0x90>)
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d101      	bne.n	80199cc <prvProcessTimerOrBlockTask+0x50>
 80199c8:	2301      	movs	r3, #1
 80199ca:	e000      	b.n	80199ce <prvProcessTimerOrBlockTask+0x52>
 80199cc:	2300      	movs	r3, #0
 80199ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80199d0:	4b0f      	ldr	r3, [pc, #60]	; (8019a10 <prvProcessTimerOrBlockTask+0x94>)
 80199d2:	6818      	ldr	r0, [r3, #0]
 80199d4:	687a      	ldr	r2, [r7, #4]
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	1ad3      	subs	r3, r2, r3
 80199da:	683a      	ldr	r2, [r7, #0]
 80199dc:	4619      	mov	r1, r3
 80199de:	f7fe fdd5 	bl	801858c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80199e2:	f7ff f957 	bl	8018c94 <xTaskResumeAll>
 80199e6:	4603      	mov	r3, r0
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d10a      	bne.n	8019a02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80199ec:	4b09      	ldr	r3, [pc, #36]	; (8019a14 <prvProcessTimerOrBlockTask+0x98>)
 80199ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80199f2:	601a      	str	r2, [r3, #0]
 80199f4:	f3bf 8f4f 	dsb	sy
 80199f8:	f3bf 8f6f 	isb	sy
}
 80199fc:	e001      	b.n	8019a02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80199fe:	f7ff f949 	bl	8018c94 <xTaskResumeAll>
}
 8019a02:	bf00      	nop
 8019a04:	3710      	adds	r7, #16
 8019a06:	46bd      	mov	sp, r7
 8019a08:	bd80      	pop	{r7, pc}
 8019a0a:	bf00      	nop
 8019a0c:	24002c44 	.word	0x24002c44
 8019a10:	24002c48 	.word	0x24002c48
 8019a14:	e000ed04 	.word	0xe000ed04

08019a18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019a18:	b480      	push	{r7}
 8019a1a:	b085      	sub	sp, #20
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019a20:	4b0e      	ldr	r3, [pc, #56]	; (8019a5c <prvGetNextExpireTime+0x44>)
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d101      	bne.n	8019a2e <prvGetNextExpireTime+0x16>
 8019a2a:	2201      	movs	r2, #1
 8019a2c:	e000      	b.n	8019a30 <prvGetNextExpireTime+0x18>
 8019a2e:	2200      	movs	r2, #0
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d105      	bne.n	8019a48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019a3c:	4b07      	ldr	r3, [pc, #28]	; (8019a5c <prvGetNextExpireTime+0x44>)
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	68db      	ldr	r3, [r3, #12]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	60fb      	str	r3, [r7, #12]
 8019a46:	e001      	b.n	8019a4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019a48:	2300      	movs	r3, #0
 8019a4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019a4c:	68fb      	ldr	r3, [r7, #12]
}
 8019a4e:	4618      	mov	r0, r3
 8019a50:	3714      	adds	r7, #20
 8019a52:	46bd      	mov	sp, r7
 8019a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a58:	4770      	bx	lr
 8019a5a:	bf00      	nop
 8019a5c:	24002c40 	.word	0x24002c40

08019a60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b084      	sub	sp, #16
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019a68:	f7ff f9b2 	bl	8018dd0 <xTaskGetTickCount>
 8019a6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019a6e:	4b0b      	ldr	r3, [pc, #44]	; (8019a9c <prvSampleTimeNow+0x3c>)
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	68fa      	ldr	r2, [r7, #12]
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d205      	bcs.n	8019a84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019a78:	f000 f936 	bl	8019ce8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	2201      	movs	r2, #1
 8019a80:	601a      	str	r2, [r3, #0]
 8019a82:	e002      	b.n	8019a8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	2200      	movs	r2, #0
 8019a88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019a8a:	4a04      	ldr	r2, [pc, #16]	; (8019a9c <prvSampleTimeNow+0x3c>)
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019a90:	68fb      	ldr	r3, [r7, #12]
}
 8019a92:	4618      	mov	r0, r3
 8019a94:	3710      	adds	r7, #16
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bd80      	pop	{r7, pc}
 8019a9a:	bf00      	nop
 8019a9c:	24002c50 	.word	0x24002c50

08019aa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b086      	sub	sp, #24
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	60f8      	str	r0, [r7, #12]
 8019aa8:	60b9      	str	r1, [r7, #8]
 8019aaa:	607a      	str	r2, [r7, #4]
 8019aac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019aae:	2300      	movs	r3, #0
 8019ab0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	68ba      	ldr	r2, [r7, #8]
 8019ab6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	68fa      	ldr	r2, [r7, #12]
 8019abc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019abe:	68ba      	ldr	r2, [r7, #8]
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	429a      	cmp	r2, r3
 8019ac4:	d812      	bhi.n	8019aec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019ac6:	687a      	ldr	r2, [r7, #4]
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	1ad2      	subs	r2, r2, r3
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	699b      	ldr	r3, [r3, #24]
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	d302      	bcc.n	8019ada <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019ad4:	2301      	movs	r3, #1
 8019ad6:	617b      	str	r3, [r7, #20]
 8019ad8:	e01b      	b.n	8019b12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019ada:	4b10      	ldr	r3, [pc, #64]	; (8019b1c <prvInsertTimerInActiveList+0x7c>)
 8019adc:	681a      	ldr	r2, [r3, #0]
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	3304      	adds	r3, #4
 8019ae2:	4619      	mov	r1, r3
 8019ae4:	4610      	mov	r0, r2
 8019ae6:	f7fe f836 	bl	8017b56 <vListInsert>
 8019aea:	e012      	b.n	8019b12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019aec:	687a      	ldr	r2, [r7, #4]
 8019aee:	683b      	ldr	r3, [r7, #0]
 8019af0:	429a      	cmp	r2, r3
 8019af2:	d206      	bcs.n	8019b02 <prvInsertTimerInActiveList+0x62>
 8019af4:	68ba      	ldr	r2, [r7, #8]
 8019af6:	683b      	ldr	r3, [r7, #0]
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d302      	bcc.n	8019b02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019afc:	2301      	movs	r3, #1
 8019afe:	617b      	str	r3, [r7, #20]
 8019b00:	e007      	b.n	8019b12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019b02:	4b07      	ldr	r3, [pc, #28]	; (8019b20 <prvInsertTimerInActiveList+0x80>)
 8019b04:	681a      	ldr	r2, [r3, #0]
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	3304      	adds	r3, #4
 8019b0a:	4619      	mov	r1, r3
 8019b0c:	4610      	mov	r0, r2
 8019b0e:	f7fe f822 	bl	8017b56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019b12:	697b      	ldr	r3, [r7, #20]
}
 8019b14:	4618      	mov	r0, r3
 8019b16:	3718      	adds	r7, #24
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	bd80      	pop	{r7, pc}
 8019b1c:	24002c44 	.word	0x24002c44
 8019b20:	24002c40 	.word	0x24002c40

08019b24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b08e      	sub	sp, #56	; 0x38
 8019b28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019b2a:	e0ca      	b.n	8019cc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	da18      	bge.n	8019b64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019b32:	1d3b      	adds	r3, r7, #4
 8019b34:	3304      	adds	r3, #4
 8019b36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d10a      	bne.n	8019b54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b42:	f383 8811 	msr	BASEPRI, r3
 8019b46:	f3bf 8f6f 	isb	sy
 8019b4a:	f3bf 8f4f 	dsb	sy
 8019b4e:	61fb      	str	r3, [r7, #28]
}
 8019b50:	bf00      	nop
 8019b52:	e7fe      	b.n	8019b52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b5a:	6850      	ldr	r0, [r2, #4]
 8019b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019b5e:	6892      	ldr	r2, [r2, #8]
 8019b60:	4611      	mov	r1, r2
 8019b62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	f2c0 80aa 	blt.w	8019cc0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b72:	695b      	ldr	r3, [r3, #20]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d004      	beq.n	8019b82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b7a:	3304      	adds	r3, #4
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	f7fe f823 	bl	8017bc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019b82:	463b      	mov	r3, r7
 8019b84:	4618      	mov	r0, r3
 8019b86:	f7ff ff6b 	bl	8019a60 <prvSampleTimeNow>
 8019b8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	2b09      	cmp	r3, #9
 8019b90:	f200 8097 	bhi.w	8019cc2 <prvProcessReceivedCommands+0x19e>
 8019b94:	a201      	add	r2, pc, #4	; (adr r2, 8019b9c <prvProcessReceivedCommands+0x78>)
 8019b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b9a:	bf00      	nop
 8019b9c:	08019bc5 	.word	0x08019bc5
 8019ba0:	08019bc5 	.word	0x08019bc5
 8019ba4:	08019bc5 	.word	0x08019bc5
 8019ba8:	08019c39 	.word	0x08019c39
 8019bac:	08019c4d 	.word	0x08019c4d
 8019bb0:	08019c97 	.word	0x08019c97
 8019bb4:	08019bc5 	.word	0x08019bc5
 8019bb8:	08019bc5 	.word	0x08019bc5
 8019bbc:	08019c39 	.word	0x08019c39
 8019bc0:	08019c4d 	.word	0x08019c4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019bca:	f043 0301 	orr.w	r3, r3, #1
 8019bce:	b2da      	uxtb	r2, r3
 8019bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019bd6:	68ba      	ldr	r2, [r7, #8]
 8019bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bda:	699b      	ldr	r3, [r3, #24]
 8019bdc:	18d1      	adds	r1, r2, r3
 8019bde:	68bb      	ldr	r3, [r7, #8]
 8019be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019be4:	f7ff ff5c 	bl	8019aa0 <prvInsertTimerInActiveList>
 8019be8:	4603      	mov	r3, r0
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d069      	beq.n	8019cc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bf0:	6a1b      	ldr	r3, [r3, #32]
 8019bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019bfc:	f003 0304 	and.w	r3, r3, #4
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d05e      	beq.n	8019cc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019c04:	68ba      	ldr	r2, [r7, #8]
 8019c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c08:	699b      	ldr	r3, [r3, #24]
 8019c0a:	441a      	add	r2, r3
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	9300      	str	r3, [sp, #0]
 8019c10:	2300      	movs	r3, #0
 8019c12:	2100      	movs	r1, #0
 8019c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c16:	f7ff fe05 	bl	8019824 <xTimerGenericCommand>
 8019c1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019c1c:	6a3b      	ldr	r3, [r7, #32]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d14f      	bne.n	8019cc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8019c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c26:	f383 8811 	msr	BASEPRI, r3
 8019c2a:	f3bf 8f6f 	isb	sy
 8019c2e:	f3bf 8f4f 	dsb	sy
 8019c32:	61bb      	str	r3, [r7, #24]
}
 8019c34:	bf00      	nop
 8019c36:	e7fe      	b.n	8019c36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c3e:	f023 0301 	bic.w	r3, r3, #1
 8019c42:	b2da      	uxtb	r2, r3
 8019c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019c4a:	e03a      	b.n	8019cc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c52:	f043 0301 	orr.w	r3, r3, #1
 8019c56:	b2da      	uxtb	r2, r3
 8019c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019c5e:	68ba      	ldr	r2, [r7, #8]
 8019c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c66:	699b      	ldr	r3, [r3, #24]
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d10a      	bne.n	8019c82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c70:	f383 8811 	msr	BASEPRI, r3
 8019c74:	f3bf 8f6f 	isb	sy
 8019c78:	f3bf 8f4f 	dsb	sy
 8019c7c:	617b      	str	r3, [r7, #20]
}
 8019c7e:	bf00      	nop
 8019c80:	e7fe      	b.n	8019c80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c84:	699a      	ldr	r2, [r3, #24]
 8019c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c88:	18d1      	adds	r1, r2, r3
 8019c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019c90:	f7ff ff06 	bl	8019aa0 <prvInsertTimerInActiveList>
					break;
 8019c94:	e015      	b.n	8019cc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019c9c:	f003 0302 	and.w	r3, r3, #2
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d103      	bne.n	8019cac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8019ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ca6:	f000 fbfb 	bl	801a4a0 <vPortFree>
 8019caa:	e00a      	b.n	8019cc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019cb2:	f023 0301 	bic.w	r3, r3, #1
 8019cb6:	b2da      	uxtb	r2, r3
 8019cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019cbe:	e000      	b.n	8019cc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019cc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019cc2:	4b08      	ldr	r3, [pc, #32]	; (8019ce4 <prvProcessReceivedCommands+0x1c0>)
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	1d39      	adds	r1, r7, #4
 8019cc8:	2200      	movs	r2, #0
 8019cca:	4618      	mov	r0, r3
 8019ccc:	f7fe fa44 	bl	8018158 <xQueueReceive>
 8019cd0:	4603      	mov	r3, r0
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	f47f af2a 	bne.w	8019b2c <prvProcessReceivedCommands+0x8>
	}
}
 8019cd8:	bf00      	nop
 8019cda:	bf00      	nop
 8019cdc:	3730      	adds	r7, #48	; 0x30
 8019cde:	46bd      	mov	sp, r7
 8019ce0:	bd80      	pop	{r7, pc}
 8019ce2:	bf00      	nop
 8019ce4:	24002c48 	.word	0x24002c48

08019ce8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019ce8:	b580      	push	{r7, lr}
 8019cea:	b088      	sub	sp, #32
 8019cec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019cee:	e048      	b.n	8019d82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019cf0:	4b2d      	ldr	r3, [pc, #180]	; (8019da8 <prvSwitchTimerLists+0xc0>)
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	68db      	ldr	r3, [r3, #12]
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019cfa:	4b2b      	ldr	r3, [pc, #172]	; (8019da8 <prvSwitchTimerLists+0xc0>)
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	68db      	ldr	r3, [r3, #12]
 8019d00:	68db      	ldr	r3, [r3, #12]
 8019d02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	3304      	adds	r3, #4
 8019d08:	4618      	mov	r0, r3
 8019d0a:	f7fd ff5d 	bl	8017bc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	6a1b      	ldr	r3, [r3, #32]
 8019d12:	68f8      	ldr	r0, [r7, #12]
 8019d14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d1c:	f003 0304 	and.w	r3, r3, #4
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d02e      	beq.n	8019d82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	699b      	ldr	r3, [r3, #24]
 8019d28:	693a      	ldr	r2, [r7, #16]
 8019d2a:	4413      	add	r3, r2
 8019d2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019d2e:	68ba      	ldr	r2, [r7, #8]
 8019d30:	693b      	ldr	r3, [r7, #16]
 8019d32:	429a      	cmp	r2, r3
 8019d34:	d90e      	bls.n	8019d54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	68ba      	ldr	r2, [r7, #8]
 8019d3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	68fa      	ldr	r2, [r7, #12]
 8019d40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019d42:	4b19      	ldr	r3, [pc, #100]	; (8019da8 <prvSwitchTimerLists+0xc0>)
 8019d44:	681a      	ldr	r2, [r3, #0]
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	3304      	adds	r3, #4
 8019d4a:	4619      	mov	r1, r3
 8019d4c:	4610      	mov	r0, r2
 8019d4e:	f7fd ff02 	bl	8017b56 <vListInsert>
 8019d52:	e016      	b.n	8019d82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019d54:	2300      	movs	r3, #0
 8019d56:	9300      	str	r3, [sp, #0]
 8019d58:	2300      	movs	r3, #0
 8019d5a:	693a      	ldr	r2, [r7, #16]
 8019d5c:	2100      	movs	r1, #0
 8019d5e:	68f8      	ldr	r0, [r7, #12]
 8019d60:	f7ff fd60 	bl	8019824 <xTimerGenericCommand>
 8019d64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d10a      	bne.n	8019d82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d70:	f383 8811 	msr	BASEPRI, r3
 8019d74:	f3bf 8f6f 	isb	sy
 8019d78:	f3bf 8f4f 	dsb	sy
 8019d7c:	603b      	str	r3, [r7, #0]
}
 8019d7e:	bf00      	nop
 8019d80:	e7fe      	b.n	8019d80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019d82:	4b09      	ldr	r3, [pc, #36]	; (8019da8 <prvSwitchTimerLists+0xc0>)
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d1b1      	bne.n	8019cf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019d8c:	4b06      	ldr	r3, [pc, #24]	; (8019da8 <prvSwitchTimerLists+0xc0>)
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019d92:	4b06      	ldr	r3, [pc, #24]	; (8019dac <prvSwitchTimerLists+0xc4>)
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	4a04      	ldr	r2, [pc, #16]	; (8019da8 <prvSwitchTimerLists+0xc0>)
 8019d98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019d9a:	4a04      	ldr	r2, [pc, #16]	; (8019dac <prvSwitchTimerLists+0xc4>)
 8019d9c:	697b      	ldr	r3, [r7, #20]
 8019d9e:	6013      	str	r3, [r2, #0]
}
 8019da0:	bf00      	nop
 8019da2:	3718      	adds	r7, #24
 8019da4:	46bd      	mov	sp, r7
 8019da6:	bd80      	pop	{r7, pc}
 8019da8:	24002c40 	.word	0x24002c40
 8019dac:	24002c44 	.word	0x24002c44

08019db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b082      	sub	sp, #8
 8019db4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8019db6:	f000 f985 	bl	801a0c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019dba:	4b15      	ldr	r3, [pc, #84]	; (8019e10 <prvCheckForValidListAndQueue+0x60>)
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d120      	bne.n	8019e04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019dc2:	4814      	ldr	r0, [pc, #80]	; (8019e14 <prvCheckForValidListAndQueue+0x64>)
 8019dc4:	f7fd fe76 	bl	8017ab4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019dc8:	4813      	ldr	r0, [pc, #76]	; (8019e18 <prvCheckForValidListAndQueue+0x68>)
 8019dca:	f7fd fe73 	bl	8017ab4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019dce:	4b13      	ldr	r3, [pc, #76]	; (8019e1c <prvCheckForValidListAndQueue+0x6c>)
 8019dd0:	4a10      	ldr	r2, [pc, #64]	; (8019e14 <prvCheckForValidListAndQueue+0x64>)
 8019dd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019dd4:	4b12      	ldr	r3, [pc, #72]	; (8019e20 <prvCheckForValidListAndQueue+0x70>)
 8019dd6:	4a10      	ldr	r2, [pc, #64]	; (8019e18 <prvCheckForValidListAndQueue+0x68>)
 8019dd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019dda:	2300      	movs	r3, #0
 8019ddc:	9300      	str	r3, [sp, #0]
 8019dde:	4b11      	ldr	r3, [pc, #68]	; (8019e24 <prvCheckForValidListAndQueue+0x74>)
 8019de0:	4a11      	ldr	r2, [pc, #68]	; (8019e28 <prvCheckForValidListAndQueue+0x78>)
 8019de2:	2110      	movs	r1, #16
 8019de4:	200a      	movs	r0, #10
 8019de6:	f7fd ff81 	bl	8017cec <xQueueGenericCreateStatic>
 8019dea:	4603      	mov	r3, r0
 8019dec:	4a08      	ldr	r2, [pc, #32]	; (8019e10 <prvCheckForValidListAndQueue+0x60>)
 8019dee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019df0:	4b07      	ldr	r3, [pc, #28]	; (8019e10 <prvCheckForValidListAndQueue+0x60>)
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d005      	beq.n	8019e04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019df8:	4b05      	ldr	r3, [pc, #20]	; (8019e10 <prvCheckForValidListAndQueue+0x60>)
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	490b      	ldr	r1, [pc, #44]	; (8019e2c <prvCheckForValidListAndQueue+0x7c>)
 8019dfe:	4618      	mov	r0, r3
 8019e00:	f7fe fb9a 	bl	8018538 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019e04:	f000 f98e 	bl	801a124 <vPortExitCritical>
}
 8019e08:	bf00      	nop
 8019e0a:	46bd      	mov	sp, r7
 8019e0c:	bd80      	pop	{r7, pc}
 8019e0e:	bf00      	nop
 8019e10:	24002c48 	.word	0x24002c48
 8019e14:	24002c18 	.word	0x24002c18
 8019e18:	24002c2c 	.word	0x24002c2c
 8019e1c:	24002c40 	.word	0x24002c40
 8019e20:	24002c44 	.word	0x24002c44
 8019e24:	24002cf4 	.word	0x24002cf4
 8019e28:	24002c54 	.word	0x24002c54
 8019e2c:	0801b3d0 	.word	0x0801b3d0

08019e30 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019e30:	b580      	push	{r7, lr}
 8019e32:	b08a      	sub	sp, #40	; 0x28
 8019e34:	af00      	add	r7, sp, #0
 8019e36:	60f8      	str	r0, [r7, #12]
 8019e38:	60b9      	str	r1, [r7, #8]
 8019e3a:	607a      	str	r2, [r7, #4]
 8019e3c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019e3e:	f06f 0301 	mvn.w	r3, #1
 8019e42:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019e48:	68bb      	ldr	r3, [r7, #8]
 8019e4a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019e50:	4b06      	ldr	r3, [pc, #24]	; (8019e6c <xTimerPendFunctionCallFromISR+0x3c>)
 8019e52:	6818      	ldr	r0, [r3, #0]
 8019e54:	f107 0114 	add.w	r1, r7, #20
 8019e58:	2300      	movs	r3, #0
 8019e5a:	683a      	ldr	r2, [r7, #0]
 8019e5c:	f7fe f8e0 	bl	8018020 <xQueueGenericSendFromISR>
 8019e60:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8019e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019e64:	4618      	mov	r0, r3
 8019e66:	3728      	adds	r7, #40	; 0x28
 8019e68:	46bd      	mov	sp, r7
 8019e6a:	bd80      	pop	{r7, pc}
 8019e6c:	24002c48 	.word	0x24002c48

08019e70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019e70:	b480      	push	{r7}
 8019e72:	b085      	sub	sp, #20
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	60f8      	str	r0, [r7, #12]
 8019e78:	60b9      	str	r1, [r7, #8]
 8019e7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	3b04      	subs	r3, #4
 8019e80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	3b04      	subs	r3, #4
 8019e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019e90:	68bb      	ldr	r3, [r7, #8]
 8019e92:	f023 0201 	bic.w	r2, r3, #1
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	3b04      	subs	r3, #4
 8019e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019ea0:	4a0c      	ldr	r2, [pc, #48]	; (8019ed4 <pxPortInitialiseStack+0x64>)
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	3b14      	subs	r3, #20
 8019eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019eac:	687a      	ldr	r2, [r7, #4]
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	3b04      	subs	r3, #4
 8019eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	f06f 0202 	mvn.w	r2, #2
 8019ebe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	3b20      	subs	r3, #32
 8019ec4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019ec6:	68fb      	ldr	r3, [r7, #12]
}
 8019ec8:	4618      	mov	r0, r3
 8019eca:	3714      	adds	r7, #20
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed2:	4770      	bx	lr
 8019ed4:	08019ed9 	.word	0x08019ed9

08019ed8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019ed8:	b480      	push	{r7}
 8019eda:	b085      	sub	sp, #20
 8019edc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019ede:	2300      	movs	r3, #0
 8019ee0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019ee2:	4b12      	ldr	r3, [pc, #72]	; (8019f2c <prvTaskExitError+0x54>)
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019eea:	d00a      	beq.n	8019f02 <prvTaskExitError+0x2a>
	__asm volatile
 8019eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ef0:	f383 8811 	msr	BASEPRI, r3
 8019ef4:	f3bf 8f6f 	isb	sy
 8019ef8:	f3bf 8f4f 	dsb	sy
 8019efc:	60fb      	str	r3, [r7, #12]
}
 8019efe:	bf00      	nop
 8019f00:	e7fe      	b.n	8019f00 <prvTaskExitError+0x28>
	__asm volatile
 8019f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f06:	f383 8811 	msr	BASEPRI, r3
 8019f0a:	f3bf 8f6f 	isb	sy
 8019f0e:	f3bf 8f4f 	dsb	sy
 8019f12:	60bb      	str	r3, [r7, #8]
}
 8019f14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019f16:	bf00      	nop
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d0fc      	beq.n	8019f18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019f1e:	bf00      	nop
 8019f20:	bf00      	nop
 8019f22:	3714      	adds	r7, #20
 8019f24:	46bd      	mov	sp, r7
 8019f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f2a:	4770      	bx	lr
 8019f2c:	240000d0 	.word	0x240000d0

08019f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019f30:	4b07      	ldr	r3, [pc, #28]	; (8019f50 <pxCurrentTCBConst2>)
 8019f32:	6819      	ldr	r1, [r3, #0]
 8019f34:	6808      	ldr	r0, [r1, #0]
 8019f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f3a:	f380 8809 	msr	PSP, r0
 8019f3e:	f3bf 8f6f 	isb	sy
 8019f42:	f04f 0000 	mov.w	r0, #0
 8019f46:	f380 8811 	msr	BASEPRI, r0
 8019f4a:	4770      	bx	lr
 8019f4c:	f3af 8000 	nop.w

08019f50 <pxCurrentTCBConst2>:
 8019f50:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019f54:	bf00      	nop
 8019f56:	bf00      	nop

08019f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019f58:	4808      	ldr	r0, [pc, #32]	; (8019f7c <prvPortStartFirstTask+0x24>)
 8019f5a:	6800      	ldr	r0, [r0, #0]
 8019f5c:	6800      	ldr	r0, [r0, #0]
 8019f5e:	f380 8808 	msr	MSP, r0
 8019f62:	f04f 0000 	mov.w	r0, #0
 8019f66:	f380 8814 	msr	CONTROL, r0
 8019f6a:	b662      	cpsie	i
 8019f6c:	b661      	cpsie	f
 8019f6e:	f3bf 8f4f 	dsb	sy
 8019f72:	f3bf 8f6f 	isb	sy
 8019f76:	df00      	svc	0
 8019f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019f7a:	bf00      	nop
 8019f7c:	e000ed08 	.word	0xe000ed08

08019f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019f80:	b580      	push	{r7, lr}
 8019f82:	b086      	sub	sp, #24
 8019f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019f86:	4b46      	ldr	r3, [pc, #280]	; (801a0a0 <xPortStartScheduler+0x120>)
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	4a46      	ldr	r2, [pc, #280]	; (801a0a4 <xPortStartScheduler+0x124>)
 8019f8c:	4293      	cmp	r3, r2
 8019f8e:	d10a      	bne.n	8019fa6 <xPortStartScheduler+0x26>
	__asm volatile
 8019f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f94:	f383 8811 	msr	BASEPRI, r3
 8019f98:	f3bf 8f6f 	isb	sy
 8019f9c:	f3bf 8f4f 	dsb	sy
 8019fa0:	613b      	str	r3, [r7, #16]
}
 8019fa2:	bf00      	nop
 8019fa4:	e7fe      	b.n	8019fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019fa6:	4b3e      	ldr	r3, [pc, #248]	; (801a0a0 <xPortStartScheduler+0x120>)
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	4a3f      	ldr	r2, [pc, #252]	; (801a0a8 <xPortStartScheduler+0x128>)
 8019fac:	4293      	cmp	r3, r2
 8019fae:	d10a      	bne.n	8019fc6 <xPortStartScheduler+0x46>
	__asm volatile
 8019fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fb4:	f383 8811 	msr	BASEPRI, r3
 8019fb8:	f3bf 8f6f 	isb	sy
 8019fbc:	f3bf 8f4f 	dsb	sy
 8019fc0:	60fb      	str	r3, [r7, #12]
}
 8019fc2:	bf00      	nop
 8019fc4:	e7fe      	b.n	8019fc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019fc6:	4b39      	ldr	r3, [pc, #228]	; (801a0ac <xPortStartScheduler+0x12c>)
 8019fc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019fca:	697b      	ldr	r3, [r7, #20]
 8019fcc:	781b      	ldrb	r3, [r3, #0]
 8019fce:	b2db      	uxtb	r3, r3
 8019fd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019fd2:	697b      	ldr	r3, [r7, #20]
 8019fd4:	22ff      	movs	r2, #255	; 0xff
 8019fd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019fd8:	697b      	ldr	r3, [r7, #20]
 8019fda:	781b      	ldrb	r3, [r3, #0]
 8019fdc:	b2db      	uxtb	r3, r3
 8019fde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019fe0:	78fb      	ldrb	r3, [r7, #3]
 8019fe2:	b2db      	uxtb	r3, r3
 8019fe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019fe8:	b2da      	uxtb	r2, r3
 8019fea:	4b31      	ldr	r3, [pc, #196]	; (801a0b0 <xPortStartScheduler+0x130>)
 8019fec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019fee:	4b31      	ldr	r3, [pc, #196]	; (801a0b4 <xPortStartScheduler+0x134>)
 8019ff0:	2207      	movs	r2, #7
 8019ff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019ff4:	e009      	b.n	801a00a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019ff6:	4b2f      	ldr	r3, [pc, #188]	; (801a0b4 <xPortStartScheduler+0x134>)
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	3b01      	subs	r3, #1
 8019ffc:	4a2d      	ldr	r2, [pc, #180]	; (801a0b4 <xPortStartScheduler+0x134>)
 8019ffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a000:	78fb      	ldrb	r3, [r7, #3]
 801a002:	b2db      	uxtb	r3, r3
 801a004:	005b      	lsls	r3, r3, #1
 801a006:	b2db      	uxtb	r3, r3
 801a008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a00a:	78fb      	ldrb	r3, [r7, #3]
 801a00c:	b2db      	uxtb	r3, r3
 801a00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a012:	2b80      	cmp	r3, #128	; 0x80
 801a014:	d0ef      	beq.n	8019ff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a016:	4b27      	ldr	r3, [pc, #156]	; (801a0b4 <xPortStartScheduler+0x134>)
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	f1c3 0307 	rsb	r3, r3, #7
 801a01e:	2b04      	cmp	r3, #4
 801a020:	d00a      	beq.n	801a038 <xPortStartScheduler+0xb8>
	__asm volatile
 801a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a026:	f383 8811 	msr	BASEPRI, r3
 801a02a:	f3bf 8f6f 	isb	sy
 801a02e:	f3bf 8f4f 	dsb	sy
 801a032:	60bb      	str	r3, [r7, #8]
}
 801a034:	bf00      	nop
 801a036:	e7fe      	b.n	801a036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a038:	4b1e      	ldr	r3, [pc, #120]	; (801a0b4 <xPortStartScheduler+0x134>)
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	021b      	lsls	r3, r3, #8
 801a03e:	4a1d      	ldr	r2, [pc, #116]	; (801a0b4 <xPortStartScheduler+0x134>)
 801a040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a042:	4b1c      	ldr	r3, [pc, #112]	; (801a0b4 <xPortStartScheduler+0x134>)
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a04a:	4a1a      	ldr	r2, [pc, #104]	; (801a0b4 <xPortStartScheduler+0x134>)
 801a04c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	b2da      	uxtb	r2, r3
 801a052:	697b      	ldr	r3, [r7, #20]
 801a054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a056:	4b18      	ldr	r3, [pc, #96]	; (801a0b8 <xPortStartScheduler+0x138>)
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	4a17      	ldr	r2, [pc, #92]	; (801a0b8 <xPortStartScheduler+0x138>)
 801a05c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a062:	4b15      	ldr	r3, [pc, #84]	; (801a0b8 <xPortStartScheduler+0x138>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	4a14      	ldr	r2, [pc, #80]	; (801a0b8 <xPortStartScheduler+0x138>)
 801a068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a06c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a06e:	f000 f8dd 	bl	801a22c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a072:	4b12      	ldr	r3, [pc, #72]	; (801a0bc <xPortStartScheduler+0x13c>)
 801a074:	2200      	movs	r2, #0
 801a076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a078:	f000 f8fc 	bl	801a274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a07c:	4b10      	ldr	r3, [pc, #64]	; (801a0c0 <xPortStartScheduler+0x140>)
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	4a0f      	ldr	r2, [pc, #60]	; (801a0c0 <xPortStartScheduler+0x140>)
 801a082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a088:	f7ff ff66 	bl	8019f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a08c:	f7fe ff72 	bl	8018f74 <vTaskSwitchContext>
	prvTaskExitError();
 801a090:	f7ff ff22 	bl	8019ed8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a094:	2300      	movs	r3, #0
}
 801a096:	4618      	mov	r0, r3
 801a098:	3718      	adds	r7, #24
 801a09a:	46bd      	mov	sp, r7
 801a09c:	bd80      	pop	{r7, pc}
 801a09e:	bf00      	nop
 801a0a0:	e000ed00 	.word	0xe000ed00
 801a0a4:	410fc271 	.word	0x410fc271
 801a0a8:	410fc270 	.word	0x410fc270
 801a0ac:	e000e400 	.word	0xe000e400
 801a0b0:	24002d44 	.word	0x24002d44
 801a0b4:	24002d48 	.word	0x24002d48
 801a0b8:	e000ed20 	.word	0xe000ed20
 801a0bc:	240000d0 	.word	0x240000d0
 801a0c0:	e000ef34 	.word	0xe000ef34

0801a0c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a0c4:	b480      	push	{r7}
 801a0c6:	b083      	sub	sp, #12
 801a0c8:	af00      	add	r7, sp, #0
	__asm volatile
 801a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0ce:	f383 8811 	msr	BASEPRI, r3
 801a0d2:	f3bf 8f6f 	isb	sy
 801a0d6:	f3bf 8f4f 	dsb	sy
 801a0da:	607b      	str	r3, [r7, #4]
}
 801a0dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a0de:	4b0f      	ldr	r3, [pc, #60]	; (801a11c <vPortEnterCritical+0x58>)
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	3301      	adds	r3, #1
 801a0e4:	4a0d      	ldr	r2, [pc, #52]	; (801a11c <vPortEnterCritical+0x58>)
 801a0e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a0e8:	4b0c      	ldr	r3, [pc, #48]	; (801a11c <vPortEnterCritical+0x58>)
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	2b01      	cmp	r3, #1
 801a0ee:	d10f      	bne.n	801a110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a0f0:	4b0b      	ldr	r3, [pc, #44]	; (801a120 <vPortEnterCritical+0x5c>)
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	b2db      	uxtb	r3, r3
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d00a      	beq.n	801a110 <vPortEnterCritical+0x4c>
	__asm volatile
 801a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0fe:	f383 8811 	msr	BASEPRI, r3
 801a102:	f3bf 8f6f 	isb	sy
 801a106:	f3bf 8f4f 	dsb	sy
 801a10a:	603b      	str	r3, [r7, #0]
}
 801a10c:	bf00      	nop
 801a10e:	e7fe      	b.n	801a10e <vPortEnterCritical+0x4a>
	}
}
 801a110:	bf00      	nop
 801a112:	370c      	adds	r7, #12
 801a114:	46bd      	mov	sp, r7
 801a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a11a:	4770      	bx	lr
 801a11c:	240000d0 	.word	0x240000d0
 801a120:	e000ed04 	.word	0xe000ed04

0801a124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a124:	b480      	push	{r7}
 801a126:	b083      	sub	sp, #12
 801a128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a12a:	4b12      	ldr	r3, [pc, #72]	; (801a174 <vPortExitCritical+0x50>)
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d10a      	bne.n	801a148 <vPortExitCritical+0x24>
	__asm volatile
 801a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a136:	f383 8811 	msr	BASEPRI, r3
 801a13a:	f3bf 8f6f 	isb	sy
 801a13e:	f3bf 8f4f 	dsb	sy
 801a142:	607b      	str	r3, [r7, #4]
}
 801a144:	bf00      	nop
 801a146:	e7fe      	b.n	801a146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a148:	4b0a      	ldr	r3, [pc, #40]	; (801a174 <vPortExitCritical+0x50>)
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	3b01      	subs	r3, #1
 801a14e:	4a09      	ldr	r2, [pc, #36]	; (801a174 <vPortExitCritical+0x50>)
 801a150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a152:	4b08      	ldr	r3, [pc, #32]	; (801a174 <vPortExitCritical+0x50>)
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	2b00      	cmp	r3, #0
 801a158:	d105      	bne.n	801a166 <vPortExitCritical+0x42>
 801a15a:	2300      	movs	r3, #0
 801a15c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a15e:	683b      	ldr	r3, [r7, #0]
 801a160:	f383 8811 	msr	BASEPRI, r3
}
 801a164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a166:	bf00      	nop
 801a168:	370c      	adds	r7, #12
 801a16a:	46bd      	mov	sp, r7
 801a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a170:	4770      	bx	lr
 801a172:	bf00      	nop
 801a174:	240000d0 	.word	0x240000d0
	...

0801a180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a180:	f3ef 8009 	mrs	r0, PSP
 801a184:	f3bf 8f6f 	isb	sy
 801a188:	4b15      	ldr	r3, [pc, #84]	; (801a1e0 <pxCurrentTCBConst>)
 801a18a:	681a      	ldr	r2, [r3, #0]
 801a18c:	f01e 0f10 	tst.w	lr, #16
 801a190:	bf08      	it	eq
 801a192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a19a:	6010      	str	r0, [r2, #0]
 801a19c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a1a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a1a4:	f380 8811 	msr	BASEPRI, r0
 801a1a8:	f3bf 8f4f 	dsb	sy
 801a1ac:	f3bf 8f6f 	isb	sy
 801a1b0:	f7fe fee0 	bl	8018f74 <vTaskSwitchContext>
 801a1b4:	f04f 0000 	mov.w	r0, #0
 801a1b8:	f380 8811 	msr	BASEPRI, r0
 801a1bc:	bc09      	pop	{r0, r3}
 801a1be:	6819      	ldr	r1, [r3, #0]
 801a1c0:	6808      	ldr	r0, [r1, #0]
 801a1c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1c6:	f01e 0f10 	tst.w	lr, #16
 801a1ca:	bf08      	it	eq
 801a1cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a1d0:	f380 8809 	msr	PSP, r0
 801a1d4:	f3bf 8f6f 	isb	sy
 801a1d8:	4770      	bx	lr
 801a1da:	bf00      	nop
 801a1dc:	f3af 8000 	nop.w

0801a1e0 <pxCurrentTCBConst>:
 801a1e0:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a1e4:	bf00      	nop
 801a1e6:	bf00      	nop

0801a1e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b082      	sub	sp, #8
 801a1ec:	af00      	add	r7, sp, #0
	__asm volatile
 801a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1f2:	f383 8811 	msr	BASEPRI, r3
 801a1f6:	f3bf 8f6f 	isb	sy
 801a1fa:	f3bf 8f4f 	dsb	sy
 801a1fe:	607b      	str	r3, [r7, #4]
}
 801a200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a202:	f7fe fdf5 	bl	8018df0 <xTaskIncrementTick>
 801a206:	4603      	mov	r3, r0
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d003      	beq.n	801a214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a20c:	4b06      	ldr	r3, [pc, #24]	; (801a228 <xPortSysTickHandler+0x40>)
 801a20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a212:	601a      	str	r2, [r3, #0]
 801a214:	2300      	movs	r3, #0
 801a216:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a218:	683b      	ldr	r3, [r7, #0]
 801a21a:	f383 8811 	msr	BASEPRI, r3
}
 801a21e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a220:	bf00      	nop
 801a222:	3708      	adds	r7, #8
 801a224:	46bd      	mov	sp, r7
 801a226:	bd80      	pop	{r7, pc}
 801a228:	e000ed04 	.word	0xe000ed04

0801a22c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a22c:	b480      	push	{r7}
 801a22e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a230:	4b0b      	ldr	r3, [pc, #44]	; (801a260 <vPortSetupTimerInterrupt+0x34>)
 801a232:	2200      	movs	r2, #0
 801a234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a236:	4b0b      	ldr	r3, [pc, #44]	; (801a264 <vPortSetupTimerInterrupt+0x38>)
 801a238:	2200      	movs	r2, #0
 801a23a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a23c:	4b0a      	ldr	r3, [pc, #40]	; (801a268 <vPortSetupTimerInterrupt+0x3c>)
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	4a0a      	ldr	r2, [pc, #40]	; (801a26c <vPortSetupTimerInterrupt+0x40>)
 801a242:	fba2 2303 	umull	r2, r3, r2, r3
 801a246:	099b      	lsrs	r3, r3, #6
 801a248:	4a09      	ldr	r2, [pc, #36]	; (801a270 <vPortSetupTimerInterrupt+0x44>)
 801a24a:	3b01      	subs	r3, #1
 801a24c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a24e:	4b04      	ldr	r3, [pc, #16]	; (801a260 <vPortSetupTimerInterrupt+0x34>)
 801a250:	2207      	movs	r2, #7
 801a252:	601a      	str	r2, [r3, #0]
}
 801a254:	bf00      	nop
 801a256:	46bd      	mov	sp, r7
 801a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a25c:	4770      	bx	lr
 801a25e:	bf00      	nop
 801a260:	e000e010 	.word	0xe000e010
 801a264:	e000e018 	.word	0xe000e018
 801a268:	240000c0 	.word	0x240000c0
 801a26c:	10624dd3 	.word	0x10624dd3
 801a270:	e000e014 	.word	0xe000e014

0801a274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a284 <vPortEnableVFP+0x10>
 801a278:	6801      	ldr	r1, [r0, #0]
 801a27a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a27e:	6001      	str	r1, [r0, #0]
 801a280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a282:	bf00      	nop
 801a284:	e000ed88 	.word	0xe000ed88

0801a288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a288:	b480      	push	{r7}
 801a28a:	b085      	sub	sp, #20
 801a28c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a28e:	f3ef 8305 	mrs	r3, IPSR
 801a292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	2b0f      	cmp	r3, #15
 801a298:	d914      	bls.n	801a2c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a29a:	4a17      	ldr	r2, [pc, #92]	; (801a2f8 <vPortValidateInterruptPriority+0x70>)
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	4413      	add	r3, r2
 801a2a0:	781b      	ldrb	r3, [r3, #0]
 801a2a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a2a4:	4b15      	ldr	r3, [pc, #84]	; (801a2fc <vPortValidateInterruptPriority+0x74>)
 801a2a6:	781b      	ldrb	r3, [r3, #0]
 801a2a8:	7afa      	ldrb	r2, [r7, #11]
 801a2aa:	429a      	cmp	r2, r3
 801a2ac:	d20a      	bcs.n	801a2c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2b2:	f383 8811 	msr	BASEPRI, r3
 801a2b6:	f3bf 8f6f 	isb	sy
 801a2ba:	f3bf 8f4f 	dsb	sy
 801a2be:	607b      	str	r3, [r7, #4]
}
 801a2c0:	bf00      	nop
 801a2c2:	e7fe      	b.n	801a2c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a2c4:	4b0e      	ldr	r3, [pc, #56]	; (801a300 <vPortValidateInterruptPriority+0x78>)
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a2cc:	4b0d      	ldr	r3, [pc, #52]	; (801a304 <vPortValidateInterruptPriority+0x7c>)
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	429a      	cmp	r2, r3
 801a2d2:	d90a      	bls.n	801a2ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2d8:	f383 8811 	msr	BASEPRI, r3
 801a2dc:	f3bf 8f6f 	isb	sy
 801a2e0:	f3bf 8f4f 	dsb	sy
 801a2e4:	603b      	str	r3, [r7, #0]
}
 801a2e6:	bf00      	nop
 801a2e8:	e7fe      	b.n	801a2e8 <vPortValidateInterruptPriority+0x60>
	}
 801a2ea:	bf00      	nop
 801a2ec:	3714      	adds	r7, #20
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f4:	4770      	bx	lr
 801a2f6:	bf00      	nop
 801a2f8:	e000e3f0 	.word	0xe000e3f0
 801a2fc:	24002d44 	.word	0x24002d44
 801a300:	e000ed0c 	.word	0xe000ed0c
 801a304:	24002d48 	.word	0x24002d48

0801a308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	b08a      	sub	sp, #40	; 0x28
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a310:	2300      	movs	r3, #0
 801a312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a314:	f7fe fcb0 	bl	8018c78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a318:	4b5b      	ldr	r3, [pc, #364]	; (801a488 <pvPortMalloc+0x180>)
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d101      	bne.n	801a324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a320:	f000 f920 	bl	801a564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a324:	4b59      	ldr	r3, [pc, #356]	; (801a48c <pvPortMalloc+0x184>)
 801a326:	681a      	ldr	r2, [r3, #0]
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	4013      	ands	r3, r2
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	f040 8093 	bne.w	801a458 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d01d      	beq.n	801a374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a338:	2208      	movs	r2, #8
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	4413      	add	r3, r2
 801a33e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	f003 0307 	and.w	r3, r3, #7
 801a346:	2b00      	cmp	r3, #0
 801a348:	d014      	beq.n	801a374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	f023 0307 	bic.w	r3, r3, #7
 801a350:	3308      	adds	r3, #8
 801a352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	f003 0307 	and.w	r3, r3, #7
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d00a      	beq.n	801a374 <pvPortMalloc+0x6c>
	__asm volatile
 801a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a362:	f383 8811 	msr	BASEPRI, r3
 801a366:	f3bf 8f6f 	isb	sy
 801a36a:	f3bf 8f4f 	dsb	sy
 801a36e:	617b      	str	r3, [r7, #20]
}
 801a370:	bf00      	nop
 801a372:	e7fe      	b.n	801a372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d06e      	beq.n	801a458 <pvPortMalloc+0x150>
 801a37a:	4b45      	ldr	r3, [pc, #276]	; (801a490 <pvPortMalloc+0x188>)
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	687a      	ldr	r2, [r7, #4]
 801a380:	429a      	cmp	r2, r3
 801a382:	d869      	bhi.n	801a458 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a384:	4b43      	ldr	r3, [pc, #268]	; (801a494 <pvPortMalloc+0x18c>)
 801a386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a388:	4b42      	ldr	r3, [pc, #264]	; (801a494 <pvPortMalloc+0x18c>)
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a38e:	e004      	b.n	801a39a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a39c:	685b      	ldr	r3, [r3, #4]
 801a39e:	687a      	ldr	r2, [r7, #4]
 801a3a0:	429a      	cmp	r2, r3
 801a3a2:	d903      	bls.n	801a3ac <pvPortMalloc+0xa4>
 801a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d1f1      	bne.n	801a390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a3ac:	4b36      	ldr	r3, [pc, #216]	; (801a488 <pvPortMalloc+0x180>)
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3b2:	429a      	cmp	r2, r3
 801a3b4:	d050      	beq.n	801a458 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a3b6:	6a3b      	ldr	r3, [r7, #32]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	2208      	movs	r2, #8
 801a3bc:	4413      	add	r3, r2
 801a3be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c2:	681a      	ldr	r2, [r3, #0]
 801a3c4:	6a3b      	ldr	r3, [r7, #32]
 801a3c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ca:	685a      	ldr	r2, [r3, #4]
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	1ad2      	subs	r2, r2, r3
 801a3d0:	2308      	movs	r3, #8
 801a3d2:	005b      	lsls	r3, r3, #1
 801a3d4:	429a      	cmp	r2, r3
 801a3d6:	d91f      	bls.n	801a418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	4413      	add	r3, r2
 801a3de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a3e0:	69bb      	ldr	r3, [r7, #24]
 801a3e2:	f003 0307 	and.w	r3, r3, #7
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d00a      	beq.n	801a400 <pvPortMalloc+0xf8>
	__asm volatile
 801a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3ee:	f383 8811 	msr	BASEPRI, r3
 801a3f2:	f3bf 8f6f 	isb	sy
 801a3f6:	f3bf 8f4f 	dsb	sy
 801a3fa:	613b      	str	r3, [r7, #16]
}
 801a3fc:	bf00      	nop
 801a3fe:	e7fe      	b.n	801a3fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a402:	685a      	ldr	r2, [r3, #4]
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	1ad2      	subs	r2, r2, r3
 801a408:	69bb      	ldr	r3, [r7, #24]
 801a40a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a40e:	687a      	ldr	r2, [r7, #4]
 801a410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a412:	69b8      	ldr	r0, [r7, #24]
 801a414:	f000 f908 	bl	801a628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a418:	4b1d      	ldr	r3, [pc, #116]	; (801a490 <pvPortMalloc+0x188>)
 801a41a:	681a      	ldr	r2, [r3, #0]
 801a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a41e:	685b      	ldr	r3, [r3, #4]
 801a420:	1ad3      	subs	r3, r2, r3
 801a422:	4a1b      	ldr	r2, [pc, #108]	; (801a490 <pvPortMalloc+0x188>)
 801a424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a426:	4b1a      	ldr	r3, [pc, #104]	; (801a490 <pvPortMalloc+0x188>)
 801a428:	681a      	ldr	r2, [r3, #0]
 801a42a:	4b1b      	ldr	r3, [pc, #108]	; (801a498 <pvPortMalloc+0x190>)
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	429a      	cmp	r2, r3
 801a430:	d203      	bcs.n	801a43a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a432:	4b17      	ldr	r3, [pc, #92]	; (801a490 <pvPortMalloc+0x188>)
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	4a18      	ldr	r2, [pc, #96]	; (801a498 <pvPortMalloc+0x190>)
 801a438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a43c:	685a      	ldr	r2, [r3, #4]
 801a43e:	4b13      	ldr	r3, [pc, #76]	; (801a48c <pvPortMalloc+0x184>)
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	431a      	orrs	r2, r3
 801a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a44a:	2200      	movs	r2, #0
 801a44c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a44e:	4b13      	ldr	r3, [pc, #76]	; (801a49c <pvPortMalloc+0x194>)
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	3301      	adds	r3, #1
 801a454:	4a11      	ldr	r2, [pc, #68]	; (801a49c <pvPortMalloc+0x194>)
 801a456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a458:	f7fe fc1c 	bl	8018c94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a45c:	69fb      	ldr	r3, [r7, #28]
 801a45e:	f003 0307 	and.w	r3, r3, #7
 801a462:	2b00      	cmp	r3, #0
 801a464:	d00a      	beq.n	801a47c <pvPortMalloc+0x174>
	__asm volatile
 801a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a46a:	f383 8811 	msr	BASEPRI, r3
 801a46e:	f3bf 8f6f 	isb	sy
 801a472:	f3bf 8f4f 	dsb	sy
 801a476:	60fb      	str	r3, [r7, #12]
}
 801a478:	bf00      	nop
 801a47a:	e7fe      	b.n	801a47a <pvPortMalloc+0x172>
	return pvReturn;
 801a47c:	69fb      	ldr	r3, [r7, #28]
}
 801a47e:	4618      	mov	r0, r3
 801a480:	3728      	adds	r7, #40	; 0x28
 801a482:	46bd      	mov	sp, r7
 801a484:	bd80      	pop	{r7, pc}
 801a486:	bf00      	nop
 801a488:	24006954 	.word	0x24006954
 801a48c:	24006968 	.word	0x24006968
 801a490:	24006958 	.word	0x24006958
 801a494:	2400694c 	.word	0x2400694c
 801a498:	2400695c 	.word	0x2400695c
 801a49c:	24006960 	.word	0x24006960

0801a4a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b086      	sub	sp, #24
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d04d      	beq.n	801a54e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a4b2:	2308      	movs	r3, #8
 801a4b4:	425b      	negs	r3, r3
 801a4b6:	697a      	ldr	r2, [r7, #20]
 801a4b8:	4413      	add	r3, r2
 801a4ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a4bc:	697b      	ldr	r3, [r7, #20]
 801a4be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a4c0:	693b      	ldr	r3, [r7, #16]
 801a4c2:	685a      	ldr	r2, [r3, #4]
 801a4c4:	4b24      	ldr	r3, [pc, #144]	; (801a558 <vPortFree+0xb8>)
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	4013      	ands	r3, r2
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d10a      	bne.n	801a4e4 <vPortFree+0x44>
	__asm volatile
 801a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4d2:	f383 8811 	msr	BASEPRI, r3
 801a4d6:	f3bf 8f6f 	isb	sy
 801a4da:	f3bf 8f4f 	dsb	sy
 801a4de:	60fb      	str	r3, [r7, #12]
}
 801a4e0:	bf00      	nop
 801a4e2:	e7fe      	b.n	801a4e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a4e4:	693b      	ldr	r3, [r7, #16]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d00a      	beq.n	801a502 <vPortFree+0x62>
	__asm volatile
 801a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4f0:	f383 8811 	msr	BASEPRI, r3
 801a4f4:	f3bf 8f6f 	isb	sy
 801a4f8:	f3bf 8f4f 	dsb	sy
 801a4fc:	60bb      	str	r3, [r7, #8]
}
 801a4fe:	bf00      	nop
 801a500:	e7fe      	b.n	801a500 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a502:	693b      	ldr	r3, [r7, #16]
 801a504:	685a      	ldr	r2, [r3, #4]
 801a506:	4b14      	ldr	r3, [pc, #80]	; (801a558 <vPortFree+0xb8>)
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	4013      	ands	r3, r2
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d01e      	beq.n	801a54e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a510:	693b      	ldr	r3, [r7, #16]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	2b00      	cmp	r3, #0
 801a516:	d11a      	bne.n	801a54e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a518:	693b      	ldr	r3, [r7, #16]
 801a51a:	685a      	ldr	r2, [r3, #4]
 801a51c:	4b0e      	ldr	r3, [pc, #56]	; (801a558 <vPortFree+0xb8>)
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	43db      	mvns	r3, r3
 801a522:	401a      	ands	r2, r3
 801a524:	693b      	ldr	r3, [r7, #16]
 801a526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a528:	f7fe fba6 	bl	8018c78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a52c:	693b      	ldr	r3, [r7, #16]
 801a52e:	685a      	ldr	r2, [r3, #4]
 801a530:	4b0a      	ldr	r3, [pc, #40]	; (801a55c <vPortFree+0xbc>)
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	4413      	add	r3, r2
 801a536:	4a09      	ldr	r2, [pc, #36]	; (801a55c <vPortFree+0xbc>)
 801a538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a53a:	6938      	ldr	r0, [r7, #16]
 801a53c:	f000 f874 	bl	801a628 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a540:	4b07      	ldr	r3, [pc, #28]	; (801a560 <vPortFree+0xc0>)
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	3301      	adds	r3, #1
 801a546:	4a06      	ldr	r2, [pc, #24]	; (801a560 <vPortFree+0xc0>)
 801a548:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a54a:	f7fe fba3 	bl	8018c94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a54e:	bf00      	nop
 801a550:	3718      	adds	r7, #24
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}
 801a556:	bf00      	nop
 801a558:	24006968 	.word	0x24006968
 801a55c:	24006958 	.word	0x24006958
 801a560:	24006964 	.word	0x24006964

0801a564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a564:	b480      	push	{r7}
 801a566:	b085      	sub	sp, #20
 801a568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a56a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a56e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a570:	4b27      	ldr	r3, [pc, #156]	; (801a610 <prvHeapInit+0xac>)
 801a572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	f003 0307 	and.w	r3, r3, #7
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d00c      	beq.n	801a598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	3307      	adds	r3, #7
 801a582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	f023 0307 	bic.w	r3, r3, #7
 801a58a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a58c:	68ba      	ldr	r2, [r7, #8]
 801a58e:	68fb      	ldr	r3, [r7, #12]
 801a590:	1ad3      	subs	r3, r2, r3
 801a592:	4a1f      	ldr	r2, [pc, #124]	; (801a610 <prvHeapInit+0xac>)
 801a594:	4413      	add	r3, r2
 801a596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a59c:	4a1d      	ldr	r2, [pc, #116]	; (801a614 <prvHeapInit+0xb0>)
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a5a2:	4b1c      	ldr	r3, [pc, #112]	; (801a614 <prvHeapInit+0xb0>)
 801a5a4:	2200      	movs	r2, #0
 801a5a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	68ba      	ldr	r2, [r7, #8]
 801a5ac:	4413      	add	r3, r2
 801a5ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a5b0:	2208      	movs	r2, #8
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	1a9b      	subs	r3, r3, r2
 801a5b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	f023 0307 	bic.w	r3, r3, #7
 801a5be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	4a15      	ldr	r2, [pc, #84]	; (801a618 <prvHeapInit+0xb4>)
 801a5c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a5c6:	4b14      	ldr	r3, [pc, #80]	; (801a618 <prvHeapInit+0xb4>)
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a5ce:	4b12      	ldr	r3, [pc, #72]	; (801a618 <prvHeapInit+0xb4>)
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a5da:	683b      	ldr	r3, [r7, #0]
 801a5dc:	68fa      	ldr	r2, [r7, #12]
 801a5de:	1ad2      	subs	r2, r2, r3
 801a5e0:	683b      	ldr	r3, [r7, #0]
 801a5e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a5e4:	4b0c      	ldr	r3, [pc, #48]	; (801a618 <prvHeapInit+0xb4>)
 801a5e6:	681a      	ldr	r2, [r3, #0]
 801a5e8:	683b      	ldr	r3, [r7, #0]
 801a5ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a5ec:	683b      	ldr	r3, [r7, #0]
 801a5ee:	685b      	ldr	r3, [r3, #4]
 801a5f0:	4a0a      	ldr	r2, [pc, #40]	; (801a61c <prvHeapInit+0xb8>)
 801a5f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a5f4:	683b      	ldr	r3, [r7, #0]
 801a5f6:	685b      	ldr	r3, [r3, #4]
 801a5f8:	4a09      	ldr	r2, [pc, #36]	; (801a620 <prvHeapInit+0xbc>)
 801a5fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a5fc:	4b09      	ldr	r3, [pc, #36]	; (801a624 <prvHeapInit+0xc0>)
 801a5fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a602:	601a      	str	r2, [r3, #0]
}
 801a604:	bf00      	nop
 801a606:	3714      	adds	r7, #20
 801a608:	46bd      	mov	sp, r7
 801a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a60e:	4770      	bx	lr
 801a610:	24002d4c 	.word	0x24002d4c
 801a614:	2400694c 	.word	0x2400694c
 801a618:	24006954 	.word	0x24006954
 801a61c:	2400695c 	.word	0x2400695c
 801a620:	24006958 	.word	0x24006958
 801a624:	24006968 	.word	0x24006968

0801a628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a628:	b480      	push	{r7}
 801a62a:	b085      	sub	sp, #20
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a630:	4b28      	ldr	r3, [pc, #160]	; (801a6d4 <prvInsertBlockIntoFreeList+0xac>)
 801a632:	60fb      	str	r3, [r7, #12]
 801a634:	e002      	b.n	801a63c <prvInsertBlockIntoFreeList+0x14>
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	60fb      	str	r3, [r7, #12]
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	687a      	ldr	r2, [r7, #4]
 801a642:	429a      	cmp	r2, r3
 801a644:	d8f7      	bhi.n	801a636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	685b      	ldr	r3, [r3, #4]
 801a64e:	68ba      	ldr	r2, [r7, #8]
 801a650:	4413      	add	r3, r2
 801a652:	687a      	ldr	r2, [r7, #4]
 801a654:	429a      	cmp	r2, r3
 801a656:	d108      	bne.n	801a66a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	685a      	ldr	r2, [r3, #4]
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	685b      	ldr	r3, [r3, #4]
 801a660:	441a      	add	r2, r3
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	685b      	ldr	r3, [r3, #4]
 801a672:	68ba      	ldr	r2, [r7, #8]
 801a674:	441a      	add	r2, r3
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	429a      	cmp	r2, r3
 801a67c:	d118      	bne.n	801a6b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a67e:	68fb      	ldr	r3, [r7, #12]
 801a680:	681a      	ldr	r2, [r3, #0]
 801a682:	4b15      	ldr	r3, [pc, #84]	; (801a6d8 <prvInsertBlockIntoFreeList+0xb0>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	429a      	cmp	r2, r3
 801a688:	d00d      	beq.n	801a6a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	685a      	ldr	r2, [r3, #4]
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	685b      	ldr	r3, [r3, #4]
 801a694:	441a      	add	r2, r3
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	681a      	ldr	r2, [r3, #0]
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	601a      	str	r2, [r3, #0]
 801a6a4:	e008      	b.n	801a6b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a6a6:	4b0c      	ldr	r3, [pc, #48]	; (801a6d8 <prvInsertBlockIntoFreeList+0xb0>)
 801a6a8:	681a      	ldr	r2, [r3, #0]
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	601a      	str	r2, [r3, #0]
 801a6ae:	e003      	b.n	801a6b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a6b0:	68fb      	ldr	r3, [r7, #12]
 801a6b2:	681a      	ldr	r2, [r3, #0]
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a6b8:	68fa      	ldr	r2, [r7, #12]
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	429a      	cmp	r2, r3
 801a6be:	d002      	beq.n	801a6c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	687a      	ldr	r2, [r7, #4]
 801a6c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a6c6:	bf00      	nop
 801a6c8:	3714      	adds	r7, #20
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d0:	4770      	bx	lr
 801a6d2:	bf00      	nop
 801a6d4:	2400694c 	.word	0x2400694c
 801a6d8:	24006954 	.word	0x24006954

0801a6dc <__errno>:
 801a6dc:	4b01      	ldr	r3, [pc, #4]	; (801a6e4 <__errno+0x8>)
 801a6de:	6818      	ldr	r0, [r3, #0]
 801a6e0:	4770      	bx	lr
 801a6e2:	bf00      	nop
 801a6e4:	240000d4 	.word	0x240000d4

0801a6e8 <__libc_init_array>:
 801a6e8:	b570      	push	{r4, r5, r6, lr}
 801a6ea:	4d0d      	ldr	r5, [pc, #52]	; (801a720 <__libc_init_array+0x38>)
 801a6ec:	4c0d      	ldr	r4, [pc, #52]	; (801a724 <__libc_init_array+0x3c>)
 801a6ee:	1b64      	subs	r4, r4, r5
 801a6f0:	10a4      	asrs	r4, r4, #2
 801a6f2:	2600      	movs	r6, #0
 801a6f4:	42a6      	cmp	r6, r4
 801a6f6:	d109      	bne.n	801a70c <__libc_init_array+0x24>
 801a6f8:	4d0b      	ldr	r5, [pc, #44]	; (801a728 <__libc_init_array+0x40>)
 801a6fa:	4c0c      	ldr	r4, [pc, #48]	; (801a72c <__libc_init_array+0x44>)
 801a6fc:	f000 fd2c 	bl	801b158 <_init>
 801a700:	1b64      	subs	r4, r4, r5
 801a702:	10a4      	asrs	r4, r4, #2
 801a704:	2600      	movs	r6, #0
 801a706:	42a6      	cmp	r6, r4
 801a708:	d105      	bne.n	801a716 <__libc_init_array+0x2e>
 801a70a:	bd70      	pop	{r4, r5, r6, pc}
 801a70c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a710:	4798      	blx	r3
 801a712:	3601      	adds	r6, #1
 801a714:	e7ee      	b.n	801a6f4 <__libc_init_array+0xc>
 801a716:	f855 3b04 	ldr.w	r3, [r5], #4
 801a71a:	4798      	blx	r3
 801a71c:	3601      	adds	r6, #1
 801a71e:	e7f2      	b.n	801a706 <__libc_init_array+0x1e>
 801a720:	0801b610 	.word	0x0801b610
 801a724:	0801b610 	.word	0x0801b610
 801a728:	0801b610 	.word	0x0801b610
 801a72c:	0801b614 	.word	0x0801b614

0801a730 <memcpy>:
 801a730:	440a      	add	r2, r1
 801a732:	4291      	cmp	r1, r2
 801a734:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a738:	d100      	bne.n	801a73c <memcpy+0xc>
 801a73a:	4770      	bx	lr
 801a73c:	b510      	push	{r4, lr}
 801a73e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a742:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a746:	4291      	cmp	r1, r2
 801a748:	d1f9      	bne.n	801a73e <memcpy+0xe>
 801a74a:	bd10      	pop	{r4, pc}

0801a74c <memset>:
 801a74c:	4402      	add	r2, r0
 801a74e:	4603      	mov	r3, r0
 801a750:	4293      	cmp	r3, r2
 801a752:	d100      	bne.n	801a756 <memset+0xa>
 801a754:	4770      	bx	lr
 801a756:	f803 1b01 	strb.w	r1, [r3], #1
 801a75a:	e7f9      	b.n	801a750 <memset+0x4>

0801a75c <_puts_r>:
 801a75c:	b570      	push	{r4, r5, r6, lr}
 801a75e:	460e      	mov	r6, r1
 801a760:	4605      	mov	r5, r0
 801a762:	b118      	cbz	r0, 801a76c <_puts_r+0x10>
 801a764:	6983      	ldr	r3, [r0, #24]
 801a766:	b90b      	cbnz	r3, 801a76c <_puts_r+0x10>
 801a768:	f000 fa48 	bl	801abfc <__sinit>
 801a76c:	69ab      	ldr	r3, [r5, #24]
 801a76e:	68ac      	ldr	r4, [r5, #8]
 801a770:	b913      	cbnz	r3, 801a778 <_puts_r+0x1c>
 801a772:	4628      	mov	r0, r5
 801a774:	f000 fa42 	bl	801abfc <__sinit>
 801a778:	4b2c      	ldr	r3, [pc, #176]	; (801a82c <_puts_r+0xd0>)
 801a77a:	429c      	cmp	r4, r3
 801a77c:	d120      	bne.n	801a7c0 <_puts_r+0x64>
 801a77e:	686c      	ldr	r4, [r5, #4]
 801a780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a782:	07db      	lsls	r3, r3, #31
 801a784:	d405      	bmi.n	801a792 <_puts_r+0x36>
 801a786:	89a3      	ldrh	r3, [r4, #12]
 801a788:	0598      	lsls	r0, r3, #22
 801a78a:	d402      	bmi.n	801a792 <_puts_r+0x36>
 801a78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a78e:	f000 fad3 	bl	801ad38 <__retarget_lock_acquire_recursive>
 801a792:	89a3      	ldrh	r3, [r4, #12]
 801a794:	0719      	lsls	r1, r3, #28
 801a796:	d51d      	bpl.n	801a7d4 <_puts_r+0x78>
 801a798:	6923      	ldr	r3, [r4, #16]
 801a79a:	b1db      	cbz	r3, 801a7d4 <_puts_r+0x78>
 801a79c:	3e01      	subs	r6, #1
 801a79e:	68a3      	ldr	r3, [r4, #8]
 801a7a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a7a4:	3b01      	subs	r3, #1
 801a7a6:	60a3      	str	r3, [r4, #8]
 801a7a8:	bb39      	cbnz	r1, 801a7fa <_puts_r+0x9e>
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	da38      	bge.n	801a820 <_puts_r+0xc4>
 801a7ae:	4622      	mov	r2, r4
 801a7b0:	210a      	movs	r1, #10
 801a7b2:	4628      	mov	r0, r5
 801a7b4:	f000 f848 	bl	801a848 <__swbuf_r>
 801a7b8:	3001      	adds	r0, #1
 801a7ba:	d011      	beq.n	801a7e0 <_puts_r+0x84>
 801a7bc:	250a      	movs	r5, #10
 801a7be:	e011      	b.n	801a7e4 <_puts_r+0x88>
 801a7c0:	4b1b      	ldr	r3, [pc, #108]	; (801a830 <_puts_r+0xd4>)
 801a7c2:	429c      	cmp	r4, r3
 801a7c4:	d101      	bne.n	801a7ca <_puts_r+0x6e>
 801a7c6:	68ac      	ldr	r4, [r5, #8]
 801a7c8:	e7da      	b.n	801a780 <_puts_r+0x24>
 801a7ca:	4b1a      	ldr	r3, [pc, #104]	; (801a834 <_puts_r+0xd8>)
 801a7cc:	429c      	cmp	r4, r3
 801a7ce:	bf08      	it	eq
 801a7d0:	68ec      	ldreq	r4, [r5, #12]
 801a7d2:	e7d5      	b.n	801a780 <_puts_r+0x24>
 801a7d4:	4621      	mov	r1, r4
 801a7d6:	4628      	mov	r0, r5
 801a7d8:	f000 f888 	bl	801a8ec <__swsetup_r>
 801a7dc:	2800      	cmp	r0, #0
 801a7de:	d0dd      	beq.n	801a79c <_puts_r+0x40>
 801a7e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a7e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a7e6:	07da      	lsls	r2, r3, #31
 801a7e8:	d405      	bmi.n	801a7f6 <_puts_r+0x9a>
 801a7ea:	89a3      	ldrh	r3, [r4, #12]
 801a7ec:	059b      	lsls	r3, r3, #22
 801a7ee:	d402      	bmi.n	801a7f6 <_puts_r+0x9a>
 801a7f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a7f2:	f000 faa2 	bl	801ad3a <__retarget_lock_release_recursive>
 801a7f6:	4628      	mov	r0, r5
 801a7f8:	bd70      	pop	{r4, r5, r6, pc}
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	da04      	bge.n	801a808 <_puts_r+0xac>
 801a7fe:	69a2      	ldr	r2, [r4, #24]
 801a800:	429a      	cmp	r2, r3
 801a802:	dc06      	bgt.n	801a812 <_puts_r+0xb6>
 801a804:	290a      	cmp	r1, #10
 801a806:	d004      	beq.n	801a812 <_puts_r+0xb6>
 801a808:	6823      	ldr	r3, [r4, #0]
 801a80a:	1c5a      	adds	r2, r3, #1
 801a80c:	6022      	str	r2, [r4, #0]
 801a80e:	7019      	strb	r1, [r3, #0]
 801a810:	e7c5      	b.n	801a79e <_puts_r+0x42>
 801a812:	4622      	mov	r2, r4
 801a814:	4628      	mov	r0, r5
 801a816:	f000 f817 	bl	801a848 <__swbuf_r>
 801a81a:	3001      	adds	r0, #1
 801a81c:	d1bf      	bne.n	801a79e <_puts_r+0x42>
 801a81e:	e7df      	b.n	801a7e0 <_puts_r+0x84>
 801a820:	6823      	ldr	r3, [r4, #0]
 801a822:	250a      	movs	r5, #10
 801a824:	1c5a      	adds	r2, r3, #1
 801a826:	6022      	str	r2, [r4, #0]
 801a828:	701d      	strb	r5, [r3, #0]
 801a82a:	e7db      	b.n	801a7e4 <_puts_r+0x88>
 801a82c:	0801b5c8 	.word	0x0801b5c8
 801a830:	0801b5e8 	.word	0x0801b5e8
 801a834:	0801b5a8 	.word	0x0801b5a8

0801a838 <puts>:
 801a838:	4b02      	ldr	r3, [pc, #8]	; (801a844 <puts+0xc>)
 801a83a:	4601      	mov	r1, r0
 801a83c:	6818      	ldr	r0, [r3, #0]
 801a83e:	f7ff bf8d 	b.w	801a75c <_puts_r>
 801a842:	bf00      	nop
 801a844:	240000d4 	.word	0x240000d4

0801a848 <__swbuf_r>:
 801a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a84a:	460e      	mov	r6, r1
 801a84c:	4614      	mov	r4, r2
 801a84e:	4605      	mov	r5, r0
 801a850:	b118      	cbz	r0, 801a85a <__swbuf_r+0x12>
 801a852:	6983      	ldr	r3, [r0, #24]
 801a854:	b90b      	cbnz	r3, 801a85a <__swbuf_r+0x12>
 801a856:	f000 f9d1 	bl	801abfc <__sinit>
 801a85a:	4b21      	ldr	r3, [pc, #132]	; (801a8e0 <__swbuf_r+0x98>)
 801a85c:	429c      	cmp	r4, r3
 801a85e:	d12b      	bne.n	801a8b8 <__swbuf_r+0x70>
 801a860:	686c      	ldr	r4, [r5, #4]
 801a862:	69a3      	ldr	r3, [r4, #24]
 801a864:	60a3      	str	r3, [r4, #8]
 801a866:	89a3      	ldrh	r3, [r4, #12]
 801a868:	071a      	lsls	r2, r3, #28
 801a86a:	d52f      	bpl.n	801a8cc <__swbuf_r+0x84>
 801a86c:	6923      	ldr	r3, [r4, #16]
 801a86e:	b36b      	cbz	r3, 801a8cc <__swbuf_r+0x84>
 801a870:	6923      	ldr	r3, [r4, #16]
 801a872:	6820      	ldr	r0, [r4, #0]
 801a874:	1ac0      	subs	r0, r0, r3
 801a876:	6963      	ldr	r3, [r4, #20]
 801a878:	b2f6      	uxtb	r6, r6
 801a87a:	4283      	cmp	r3, r0
 801a87c:	4637      	mov	r7, r6
 801a87e:	dc04      	bgt.n	801a88a <__swbuf_r+0x42>
 801a880:	4621      	mov	r1, r4
 801a882:	4628      	mov	r0, r5
 801a884:	f000 f926 	bl	801aad4 <_fflush_r>
 801a888:	bb30      	cbnz	r0, 801a8d8 <__swbuf_r+0x90>
 801a88a:	68a3      	ldr	r3, [r4, #8]
 801a88c:	3b01      	subs	r3, #1
 801a88e:	60a3      	str	r3, [r4, #8]
 801a890:	6823      	ldr	r3, [r4, #0]
 801a892:	1c5a      	adds	r2, r3, #1
 801a894:	6022      	str	r2, [r4, #0]
 801a896:	701e      	strb	r6, [r3, #0]
 801a898:	6963      	ldr	r3, [r4, #20]
 801a89a:	3001      	adds	r0, #1
 801a89c:	4283      	cmp	r3, r0
 801a89e:	d004      	beq.n	801a8aa <__swbuf_r+0x62>
 801a8a0:	89a3      	ldrh	r3, [r4, #12]
 801a8a2:	07db      	lsls	r3, r3, #31
 801a8a4:	d506      	bpl.n	801a8b4 <__swbuf_r+0x6c>
 801a8a6:	2e0a      	cmp	r6, #10
 801a8a8:	d104      	bne.n	801a8b4 <__swbuf_r+0x6c>
 801a8aa:	4621      	mov	r1, r4
 801a8ac:	4628      	mov	r0, r5
 801a8ae:	f000 f911 	bl	801aad4 <_fflush_r>
 801a8b2:	b988      	cbnz	r0, 801a8d8 <__swbuf_r+0x90>
 801a8b4:	4638      	mov	r0, r7
 801a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8b8:	4b0a      	ldr	r3, [pc, #40]	; (801a8e4 <__swbuf_r+0x9c>)
 801a8ba:	429c      	cmp	r4, r3
 801a8bc:	d101      	bne.n	801a8c2 <__swbuf_r+0x7a>
 801a8be:	68ac      	ldr	r4, [r5, #8]
 801a8c0:	e7cf      	b.n	801a862 <__swbuf_r+0x1a>
 801a8c2:	4b09      	ldr	r3, [pc, #36]	; (801a8e8 <__swbuf_r+0xa0>)
 801a8c4:	429c      	cmp	r4, r3
 801a8c6:	bf08      	it	eq
 801a8c8:	68ec      	ldreq	r4, [r5, #12]
 801a8ca:	e7ca      	b.n	801a862 <__swbuf_r+0x1a>
 801a8cc:	4621      	mov	r1, r4
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	f000 f80c 	bl	801a8ec <__swsetup_r>
 801a8d4:	2800      	cmp	r0, #0
 801a8d6:	d0cb      	beq.n	801a870 <__swbuf_r+0x28>
 801a8d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a8dc:	e7ea      	b.n	801a8b4 <__swbuf_r+0x6c>
 801a8de:	bf00      	nop
 801a8e0:	0801b5c8 	.word	0x0801b5c8
 801a8e4:	0801b5e8 	.word	0x0801b5e8
 801a8e8:	0801b5a8 	.word	0x0801b5a8

0801a8ec <__swsetup_r>:
 801a8ec:	4b32      	ldr	r3, [pc, #200]	; (801a9b8 <__swsetup_r+0xcc>)
 801a8ee:	b570      	push	{r4, r5, r6, lr}
 801a8f0:	681d      	ldr	r5, [r3, #0]
 801a8f2:	4606      	mov	r6, r0
 801a8f4:	460c      	mov	r4, r1
 801a8f6:	b125      	cbz	r5, 801a902 <__swsetup_r+0x16>
 801a8f8:	69ab      	ldr	r3, [r5, #24]
 801a8fa:	b913      	cbnz	r3, 801a902 <__swsetup_r+0x16>
 801a8fc:	4628      	mov	r0, r5
 801a8fe:	f000 f97d 	bl	801abfc <__sinit>
 801a902:	4b2e      	ldr	r3, [pc, #184]	; (801a9bc <__swsetup_r+0xd0>)
 801a904:	429c      	cmp	r4, r3
 801a906:	d10f      	bne.n	801a928 <__swsetup_r+0x3c>
 801a908:	686c      	ldr	r4, [r5, #4]
 801a90a:	89a3      	ldrh	r3, [r4, #12]
 801a90c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a910:	0719      	lsls	r1, r3, #28
 801a912:	d42c      	bmi.n	801a96e <__swsetup_r+0x82>
 801a914:	06dd      	lsls	r5, r3, #27
 801a916:	d411      	bmi.n	801a93c <__swsetup_r+0x50>
 801a918:	2309      	movs	r3, #9
 801a91a:	6033      	str	r3, [r6, #0]
 801a91c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a920:	81a3      	strh	r3, [r4, #12]
 801a922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a926:	e03e      	b.n	801a9a6 <__swsetup_r+0xba>
 801a928:	4b25      	ldr	r3, [pc, #148]	; (801a9c0 <__swsetup_r+0xd4>)
 801a92a:	429c      	cmp	r4, r3
 801a92c:	d101      	bne.n	801a932 <__swsetup_r+0x46>
 801a92e:	68ac      	ldr	r4, [r5, #8]
 801a930:	e7eb      	b.n	801a90a <__swsetup_r+0x1e>
 801a932:	4b24      	ldr	r3, [pc, #144]	; (801a9c4 <__swsetup_r+0xd8>)
 801a934:	429c      	cmp	r4, r3
 801a936:	bf08      	it	eq
 801a938:	68ec      	ldreq	r4, [r5, #12]
 801a93a:	e7e6      	b.n	801a90a <__swsetup_r+0x1e>
 801a93c:	0758      	lsls	r0, r3, #29
 801a93e:	d512      	bpl.n	801a966 <__swsetup_r+0x7a>
 801a940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a942:	b141      	cbz	r1, 801a956 <__swsetup_r+0x6a>
 801a944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a948:	4299      	cmp	r1, r3
 801a94a:	d002      	beq.n	801a952 <__swsetup_r+0x66>
 801a94c:	4630      	mov	r0, r6
 801a94e:	f000 fa5b 	bl	801ae08 <_free_r>
 801a952:	2300      	movs	r3, #0
 801a954:	6363      	str	r3, [r4, #52]	; 0x34
 801a956:	89a3      	ldrh	r3, [r4, #12]
 801a958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a95c:	81a3      	strh	r3, [r4, #12]
 801a95e:	2300      	movs	r3, #0
 801a960:	6063      	str	r3, [r4, #4]
 801a962:	6923      	ldr	r3, [r4, #16]
 801a964:	6023      	str	r3, [r4, #0]
 801a966:	89a3      	ldrh	r3, [r4, #12]
 801a968:	f043 0308 	orr.w	r3, r3, #8
 801a96c:	81a3      	strh	r3, [r4, #12]
 801a96e:	6923      	ldr	r3, [r4, #16]
 801a970:	b94b      	cbnz	r3, 801a986 <__swsetup_r+0x9a>
 801a972:	89a3      	ldrh	r3, [r4, #12]
 801a974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a97c:	d003      	beq.n	801a986 <__swsetup_r+0x9a>
 801a97e:	4621      	mov	r1, r4
 801a980:	4630      	mov	r0, r6
 801a982:	f000 fa01 	bl	801ad88 <__smakebuf_r>
 801a986:	89a0      	ldrh	r0, [r4, #12]
 801a988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a98c:	f010 0301 	ands.w	r3, r0, #1
 801a990:	d00a      	beq.n	801a9a8 <__swsetup_r+0xbc>
 801a992:	2300      	movs	r3, #0
 801a994:	60a3      	str	r3, [r4, #8]
 801a996:	6963      	ldr	r3, [r4, #20]
 801a998:	425b      	negs	r3, r3
 801a99a:	61a3      	str	r3, [r4, #24]
 801a99c:	6923      	ldr	r3, [r4, #16]
 801a99e:	b943      	cbnz	r3, 801a9b2 <__swsetup_r+0xc6>
 801a9a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a9a4:	d1ba      	bne.n	801a91c <__swsetup_r+0x30>
 801a9a6:	bd70      	pop	{r4, r5, r6, pc}
 801a9a8:	0781      	lsls	r1, r0, #30
 801a9aa:	bf58      	it	pl
 801a9ac:	6963      	ldrpl	r3, [r4, #20]
 801a9ae:	60a3      	str	r3, [r4, #8]
 801a9b0:	e7f4      	b.n	801a99c <__swsetup_r+0xb0>
 801a9b2:	2000      	movs	r0, #0
 801a9b4:	e7f7      	b.n	801a9a6 <__swsetup_r+0xba>
 801a9b6:	bf00      	nop
 801a9b8:	240000d4 	.word	0x240000d4
 801a9bc:	0801b5c8 	.word	0x0801b5c8
 801a9c0:	0801b5e8 	.word	0x0801b5e8
 801a9c4:	0801b5a8 	.word	0x0801b5a8

0801a9c8 <__sflush_r>:
 801a9c8:	898a      	ldrh	r2, [r1, #12]
 801a9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9ce:	4605      	mov	r5, r0
 801a9d0:	0710      	lsls	r0, r2, #28
 801a9d2:	460c      	mov	r4, r1
 801a9d4:	d458      	bmi.n	801aa88 <__sflush_r+0xc0>
 801a9d6:	684b      	ldr	r3, [r1, #4]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	dc05      	bgt.n	801a9e8 <__sflush_r+0x20>
 801a9dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	dc02      	bgt.n	801a9e8 <__sflush_r+0x20>
 801a9e2:	2000      	movs	r0, #0
 801a9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a9ea:	2e00      	cmp	r6, #0
 801a9ec:	d0f9      	beq.n	801a9e2 <__sflush_r+0x1a>
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a9f4:	682f      	ldr	r7, [r5, #0]
 801a9f6:	602b      	str	r3, [r5, #0]
 801a9f8:	d032      	beq.n	801aa60 <__sflush_r+0x98>
 801a9fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a9fc:	89a3      	ldrh	r3, [r4, #12]
 801a9fe:	075a      	lsls	r2, r3, #29
 801aa00:	d505      	bpl.n	801aa0e <__sflush_r+0x46>
 801aa02:	6863      	ldr	r3, [r4, #4]
 801aa04:	1ac0      	subs	r0, r0, r3
 801aa06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aa08:	b10b      	cbz	r3, 801aa0e <__sflush_r+0x46>
 801aa0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aa0c:	1ac0      	subs	r0, r0, r3
 801aa0e:	2300      	movs	r3, #0
 801aa10:	4602      	mov	r2, r0
 801aa12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aa14:	6a21      	ldr	r1, [r4, #32]
 801aa16:	4628      	mov	r0, r5
 801aa18:	47b0      	blx	r6
 801aa1a:	1c43      	adds	r3, r0, #1
 801aa1c:	89a3      	ldrh	r3, [r4, #12]
 801aa1e:	d106      	bne.n	801aa2e <__sflush_r+0x66>
 801aa20:	6829      	ldr	r1, [r5, #0]
 801aa22:	291d      	cmp	r1, #29
 801aa24:	d82c      	bhi.n	801aa80 <__sflush_r+0xb8>
 801aa26:	4a2a      	ldr	r2, [pc, #168]	; (801aad0 <__sflush_r+0x108>)
 801aa28:	40ca      	lsrs	r2, r1
 801aa2a:	07d6      	lsls	r6, r2, #31
 801aa2c:	d528      	bpl.n	801aa80 <__sflush_r+0xb8>
 801aa2e:	2200      	movs	r2, #0
 801aa30:	6062      	str	r2, [r4, #4]
 801aa32:	04d9      	lsls	r1, r3, #19
 801aa34:	6922      	ldr	r2, [r4, #16]
 801aa36:	6022      	str	r2, [r4, #0]
 801aa38:	d504      	bpl.n	801aa44 <__sflush_r+0x7c>
 801aa3a:	1c42      	adds	r2, r0, #1
 801aa3c:	d101      	bne.n	801aa42 <__sflush_r+0x7a>
 801aa3e:	682b      	ldr	r3, [r5, #0]
 801aa40:	b903      	cbnz	r3, 801aa44 <__sflush_r+0x7c>
 801aa42:	6560      	str	r0, [r4, #84]	; 0x54
 801aa44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa46:	602f      	str	r7, [r5, #0]
 801aa48:	2900      	cmp	r1, #0
 801aa4a:	d0ca      	beq.n	801a9e2 <__sflush_r+0x1a>
 801aa4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa50:	4299      	cmp	r1, r3
 801aa52:	d002      	beq.n	801aa5a <__sflush_r+0x92>
 801aa54:	4628      	mov	r0, r5
 801aa56:	f000 f9d7 	bl	801ae08 <_free_r>
 801aa5a:	2000      	movs	r0, #0
 801aa5c:	6360      	str	r0, [r4, #52]	; 0x34
 801aa5e:	e7c1      	b.n	801a9e4 <__sflush_r+0x1c>
 801aa60:	6a21      	ldr	r1, [r4, #32]
 801aa62:	2301      	movs	r3, #1
 801aa64:	4628      	mov	r0, r5
 801aa66:	47b0      	blx	r6
 801aa68:	1c41      	adds	r1, r0, #1
 801aa6a:	d1c7      	bne.n	801a9fc <__sflush_r+0x34>
 801aa6c:	682b      	ldr	r3, [r5, #0]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d0c4      	beq.n	801a9fc <__sflush_r+0x34>
 801aa72:	2b1d      	cmp	r3, #29
 801aa74:	d001      	beq.n	801aa7a <__sflush_r+0xb2>
 801aa76:	2b16      	cmp	r3, #22
 801aa78:	d101      	bne.n	801aa7e <__sflush_r+0xb6>
 801aa7a:	602f      	str	r7, [r5, #0]
 801aa7c:	e7b1      	b.n	801a9e2 <__sflush_r+0x1a>
 801aa7e:	89a3      	ldrh	r3, [r4, #12]
 801aa80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa84:	81a3      	strh	r3, [r4, #12]
 801aa86:	e7ad      	b.n	801a9e4 <__sflush_r+0x1c>
 801aa88:	690f      	ldr	r7, [r1, #16]
 801aa8a:	2f00      	cmp	r7, #0
 801aa8c:	d0a9      	beq.n	801a9e2 <__sflush_r+0x1a>
 801aa8e:	0793      	lsls	r3, r2, #30
 801aa90:	680e      	ldr	r6, [r1, #0]
 801aa92:	bf08      	it	eq
 801aa94:	694b      	ldreq	r3, [r1, #20]
 801aa96:	600f      	str	r7, [r1, #0]
 801aa98:	bf18      	it	ne
 801aa9a:	2300      	movne	r3, #0
 801aa9c:	eba6 0807 	sub.w	r8, r6, r7
 801aaa0:	608b      	str	r3, [r1, #8]
 801aaa2:	f1b8 0f00 	cmp.w	r8, #0
 801aaa6:	dd9c      	ble.n	801a9e2 <__sflush_r+0x1a>
 801aaa8:	6a21      	ldr	r1, [r4, #32]
 801aaaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aaac:	4643      	mov	r3, r8
 801aaae:	463a      	mov	r2, r7
 801aab0:	4628      	mov	r0, r5
 801aab2:	47b0      	blx	r6
 801aab4:	2800      	cmp	r0, #0
 801aab6:	dc06      	bgt.n	801aac6 <__sflush_r+0xfe>
 801aab8:	89a3      	ldrh	r3, [r4, #12]
 801aaba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aabe:	81a3      	strh	r3, [r4, #12]
 801aac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aac4:	e78e      	b.n	801a9e4 <__sflush_r+0x1c>
 801aac6:	4407      	add	r7, r0
 801aac8:	eba8 0800 	sub.w	r8, r8, r0
 801aacc:	e7e9      	b.n	801aaa2 <__sflush_r+0xda>
 801aace:	bf00      	nop
 801aad0:	20400001 	.word	0x20400001

0801aad4 <_fflush_r>:
 801aad4:	b538      	push	{r3, r4, r5, lr}
 801aad6:	690b      	ldr	r3, [r1, #16]
 801aad8:	4605      	mov	r5, r0
 801aada:	460c      	mov	r4, r1
 801aadc:	b913      	cbnz	r3, 801aae4 <_fflush_r+0x10>
 801aade:	2500      	movs	r5, #0
 801aae0:	4628      	mov	r0, r5
 801aae2:	bd38      	pop	{r3, r4, r5, pc}
 801aae4:	b118      	cbz	r0, 801aaee <_fflush_r+0x1a>
 801aae6:	6983      	ldr	r3, [r0, #24]
 801aae8:	b90b      	cbnz	r3, 801aaee <_fflush_r+0x1a>
 801aaea:	f000 f887 	bl	801abfc <__sinit>
 801aaee:	4b14      	ldr	r3, [pc, #80]	; (801ab40 <_fflush_r+0x6c>)
 801aaf0:	429c      	cmp	r4, r3
 801aaf2:	d11b      	bne.n	801ab2c <_fflush_r+0x58>
 801aaf4:	686c      	ldr	r4, [r5, #4]
 801aaf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d0ef      	beq.n	801aade <_fflush_r+0xa>
 801aafe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ab00:	07d0      	lsls	r0, r2, #31
 801ab02:	d404      	bmi.n	801ab0e <_fflush_r+0x3a>
 801ab04:	0599      	lsls	r1, r3, #22
 801ab06:	d402      	bmi.n	801ab0e <_fflush_r+0x3a>
 801ab08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab0a:	f000 f915 	bl	801ad38 <__retarget_lock_acquire_recursive>
 801ab0e:	4628      	mov	r0, r5
 801ab10:	4621      	mov	r1, r4
 801ab12:	f7ff ff59 	bl	801a9c8 <__sflush_r>
 801ab16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab18:	07da      	lsls	r2, r3, #31
 801ab1a:	4605      	mov	r5, r0
 801ab1c:	d4e0      	bmi.n	801aae0 <_fflush_r+0xc>
 801ab1e:	89a3      	ldrh	r3, [r4, #12]
 801ab20:	059b      	lsls	r3, r3, #22
 801ab22:	d4dd      	bmi.n	801aae0 <_fflush_r+0xc>
 801ab24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab26:	f000 f908 	bl	801ad3a <__retarget_lock_release_recursive>
 801ab2a:	e7d9      	b.n	801aae0 <_fflush_r+0xc>
 801ab2c:	4b05      	ldr	r3, [pc, #20]	; (801ab44 <_fflush_r+0x70>)
 801ab2e:	429c      	cmp	r4, r3
 801ab30:	d101      	bne.n	801ab36 <_fflush_r+0x62>
 801ab32:	68ac      	ldr	r4, [r5, #8]
 801ab34:	e7df      	b.n	801aaf6 <_fflush_r+0x22>
 801ab36:	4b04      	ldr	r3, [pc, #16]	; (801ab48 <_fflush_r+0x74>)
 801ab38:	429c      	cmp	r4, r3
 801ab3a:	bf08      	it	eq
 801ab3c:	68ec      	ldreq	r4, [r5, #12]
 801ab3e:	e7da      	b.n	801aaf6 <_fflush_r+0x22>
 801ab40:	0801b5c8 	.word	0x0801b5c8
 801ab44:	0801b5e8 	.word	0x0801b5e8
 801ab48:	0801b5a8 	.word	0x0801b5a8

0801ab4c <std>:
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	b510      	push	{r4, lr}
 801ab50:	4604      	mov	r4, r0
 801ab52:	e9c0 3300 	strd	r3, r3, [r0]
 801ab56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ab5a:	6083      	str	r3, [r0, #8]
 801ab5c:	8181      	strh	r1, [r0, #12]
 801ab5e:	6643      	str	r3, [r0, #100]	; 0x64
 801ab60:	81c2      	strh	r2, [r0, #14]
 801ab62:	6183      	str	r3, [r0, #24]
 801ab64:	4619      	mov	r1, r3
 801ab66:	2208      	movs	r2, #8
 801ab68:	305c      	adds	r0, #92	; 0x5c
 801ab6a:	f7ff fdef 	bl	801a74c <memset>
 801ab6e:	4b05      	ldr	r3, [pc, #20]	; (801ab84 <std+0x38>)
 801ab70:	6263      	str	r3, [r4, #36]	; 0x24
 801ab72:	4b05      	ldr	r3, [pc, #20]	; (801ab88 <std+0x3c>)
 801ab74:	62a3      	str	r3, [r4, #40]	; 0x28
 801ab76:	4b05      	ldr	r3, [pc, #20]	; (801ab8c <std+0x40>)
 801ab78:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ab7a:	4b05      	ldr	r3, [pc, #20]	; (801ab90 <std+0x44>)
 801ab7c:	6224      	str	r4, [r4, #32]
 801ab7e:	6323      	str	r3, [r4, #48]	; 0x30
 801ab80:	bd10      	pop	{r4, pc}
 801ab82:	bf00      	nop
 801ab84:	0801afe9 	.word	0x0801afe9
 801ab88:	0801b00b 	.word	0x0801b00b
 801ab8c:	0801b043 	.word	0x0801b043
 801ab90:	0801b067 	.word	0x0801b067

0801ab94 <_cleanup_r>:
 801ab94:	4901      	ldr	r1, [pc, #4]	; (801ab9c <_cleanup_r+0x8>)
 801ab96:	f000 b8af 	b.w	801acf8 <_fwalk_reent>
 801ab9a:	bf00      	nop
 801ab9c:	0801aad5 	.word	0x0801aad5

0801aba0 <__sfmoreglue>:
 801aba0:	b570      	push	{r4, r5, r6, lr}
 801aba2:	2268      	movs	r2, #104	; 0x68
 801aba4:	1e4d      	subs	r5, r1, #1
 801aba6:	4355      	muls	r5, r2
 801aba8:	460e      	mov	r6, r1
 801abaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801abae:	f000 f997 	bl	801aee0 <_malloc_r>
 801abb2:	4604      	mov	r4, r0
 801abb4:	b140      	cbz	r0, 801abc8 <__sfmoreglue+0x28>
 801abb6:	2100      	movs	r1, #0
 801abb8:	e9c0 1600 	strd	r1, r6, [r0]
 801abbc:	300c      	adds	r0, #12
 801abbe:	60a0      	str	r0, [r4, #8]
 801abc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801abc4:	f7ff fdc2 	bl	801a74c <memset>
 801abc8:	4620      	mov	r0, r4
 801abca:	bd70      	pop	{r4, r5, r6, pc}

0801abcc <__sfp_lock_acquire>:
 801abcc:	4801      	ldr	r0, [pc, #4]	; (801abd4 <__sfp_lock_acquire+0x8>)
 801abce:	f000 b8b3 	b.w	801ad38 <__retarget_lock_acquire_recursive>
 801abd2:	bf00      	nop
 801abd4:	2400696d 	.word	0x2400696d

0801abd8 <__sfp_lock_release>:
 801abd8:	4801      	ldr	r0, [pc, #4]	; (801abe0 <__sfp_lock_release+0x8>)
 801abda:	f000 b8ae 	b.w	801ad3a <__retarget_lock_release_recursive>
 801abde:	bf00      	nop
 801abe0:	2400696d 	.word	0x2400696d

0801abe4 <__sinit_lock_acquire>:
 801abe4:	4801      	ldr	r0, [pc, #4]	; (801abec <__sinit_lock_acquire+0x8>)
 801abe6:	f000 b8a7 	b.w	801ad38 <__retarget_lock_acquire_recursive>
 801abea:	bf00      	nop
 801abec:	2400696e 	.word	0x2400696e

0801abf0 <__sinit_lock_release>:
 801abf0:	4801      	ldr	r0, [pc, #4]	; (801abf8 <__sinit_lock_release+0x8>)
 801abf2:	f000 b8a2 	b.w	801ad3a <__retarget_lock_release_recursive>
 801abf6:	bf00      	nop
 801abf8:	2400696e 	.word	0x2400696e

0801abfc <__sinit>:
 801abfc:	b510      	push	{r4, lr}
 801abfe:	4604      	mov	r4, r0
 801ac00:	f7ff fff0 	bl	801abe4 <__sinit_lock_acquire>
 801ac04:	69a3      	ldr	r3, [r4, #24]
 801ac06:	b11b      	cbz	r3, 801ac10 <__sinit+0x14>
 801ac08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ac0c:	f7ff bff0 	b.w	801abf0 <__sinit_lock_release>
 801ac10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ac14:	6523      	str	r3, [r4, #80]	; 0x50
 801ac16:	4b13      	ldr	r3, [pc, #76]	; (801ac64 <__sinit+0x68>)
 801ac18:	4a13      	ldr	r2, [pc, #76]	; (801ac68 <__sinit+0x6c>)
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	62a2      	str	r2, [r4, #40]	; 0x28
 801ac1e:	42a3      	cmp	r3, r4
 801ac20:	bf04      	itt	eq
 801ac22:	2301      	moveq	r3, #1
 801ac24:	61a3      	streq	r3, [r4, #24]
 801ac26:	4620      	mov	r0, r4
 801ac28:	f000 f820 	bl	801ac6c <__sfp>
 801ac2c:	6060      	str	r0, [r4, #4]
 801ac2e:	4620      	mov	r0, r4
 801ac30:	f000 f81c 	bl	801ac6c <__sfp>
 801ac34:	60a0      	str	r0, [r4, #8]
 801ac36:	4620      	mov	r0, r4
 801ac38:	f000 f818 	bl	801ac6c <__sfp>
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	60e0      	str	r0, [r4, #12]
 801ac40:	2104      	movs	r1, #4
 801ac42:	6860      	ldr	r0, [r4, #4]
 801ac44:	f7ff ff82 	bl	801ab4c <std>
 801ac48:	68a0      	ldr	r0, [r4, #8]
 801ac4a:	2201      	movs	r2, #1
 801ac4c:	2109      	movs	r1, #9
 801ac4e:	f7ff ff7d 	bl	801ab4c <std>
 801ac52:	68e0      	ldr	r0, [r4, #12]
 801ac54:	2202      	movs	r2, #2
 801ac56:	2112      	movs	r1, #18
 801ac58:	f7ff ff78 	bl	801ab4c <std>
 801ac5c:	2301      	movs	r3, #1
 801ac5e:	61a3      	str	r3, [r4, #24]
 801ac60:	e7d2      	b.n	801ac08 <__sinit+0xc>
 801ac62:	bf00      	nop
 801ac64:	0801b5a4 	.word	0x0801b5a4
 801ac68:	0801ab95 	.word	0x0801ab95

0801ac6c <__sfp>:
 801ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac6e:	4607      	mov	r7, r0
 801ac70:	f7ff ffac 	bl	801abcc <__sfp_lock_acquire>
 801ac74:	4b1e      	ldr	r3, [pc, #120]	; (801acf0 <__sfp+0x84>)
 801ac76:	681e      	ldr	r6, [r3, #0]
 801ac78:	69b3      	ldr	r3, [r6, #24]
 801ac7a:	b913      	cbnz	r3, 801ac82 <__sfp+0x16>
 801ac7c:	4630      	mov	r0, r6
 801ac7e:	f7ff ffbd 	bl	801abfc <__sinit>
 801ac82:	3648      	adds	r6, #72	; 0x48
 801ac84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ac88:	3b01      	subs	r3, #1
 801ac8a:	d503      	bpl.n	801ac94 <__sfp+0x28>
 801ac8c:	6833      	ldr	r3, [r6, #0]
 801ac8e:	b30b      	cbz	r3, 801acd4 <__sfp+0x68>
 801ac90:	6836      	ldr	r6, [r6, #0]
 801ac92:	e7f7      	b.n	801ac84 <__sfp+0x18>
 801ac94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ac98:	b9d5      	cbnz	r5, 801acd0 <__sfp+0x64>
 801ac9a:	4b16      	ldr	r3, [pc, #88]	; (801acf4 <__sfp+0x88>)
 801ac9c:	60e3      	str	r3, [r4, #12]
 801ac9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aca2:	6665      	str	r5, [r4, #100]	; 0x64
 801aca4:	f000 f847 	bl	801ad36 <__retarget_lock_init_recursive>
 801aca8:	f7ff ff96 	bl	801abd8 <__sfp_lock_release>
 801acac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801acb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801acb4:	6025      	str	r5, [r4, #0]
 801acb6:	61a5      	str	r5, [r4, #24]
 801acb8:	2208      	movs	r2, #8
 801acba:	4629      	mov	r1, r5
 801acbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801acc0:	f7ff fd44 	bl	801a74c <memset>
 801acc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801acc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801accc:	4620      	mov	r0, r4
 801acce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acd0:	3468      	adds	r4, #104	; 0x68
 801acd2:	e7d9      	b.n	801ac88 <__sfp+0x1c>
 801acd4:	2104      	movs	r1, #4
 801acd6:	4638      	mov	r0, r7
 801acd8:	f7ff ff62 	bl	801aba0 <__sfmoreglue>
 801acdc:	4604      	mov	r4, r0
 801acde:	6030      	str	r0, [r6, #0]
 801ace0:	2800      	cmp	r0, #0
 801ace2:	d1d5      	bne.n	801ac90 <__sfp+0x24>
 801ace4:	f7ff ff78 	bl	801abd8 <__sfp_lock_release>
 801ace8:	230c      	movs	r3, #12
 801acea:	603b      	str	r3, [r7, #0]
 801acec:	e7ee      	b.n	801accc <__sfp+0x60>
 801acee:	bf00      	nop
 801acf0:	0801b5a4 	.word	0x0801b5a4
 801acf4:	ffff0001 	.word	0xffff0001

0801acf8 <_fwalk_reent>:
 801acf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801acfc:	4606      	mov	r6, r0
 801acfe:	4688      	mov	r8, r1
 801ad00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ad04:	2700      	movs	r7, #0
 801ad06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ad0a:	f1b9 0901 	subs.w	r9, r9, #1
 801ad0e:	d505      	bpl.n	801ad1c <_fwalk_reent+0x24>
 801ad10:	6824      	ldr	r4, [r4, #0]
 801ad12:	2c00      	cmp	r4, #0
 801ad14:	d1f7      	bne.n	801ad06 <_fwalk_reent+0xe>
 801ad16:	4638      	mov	r0, r7
 801ad18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad1c:	89ab      	ldrh	r3, [r5, #12]
 801ad1e:	2b01      	cmp	r3, #1
 801ad20:	d907      	bls.n	801ad32 <_fwalk_reent+0x3a>
 801ad22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ad26:	3301      	adds	r3, #1
 801ad28:	d003      	beq.n	801ad32 <_fwalk_reent+0x3a>
 801ad2a:	4629      	mov	r1, r5
 801ad2c:	4630      	mov	r0, r6
 801ad2e:	47c0      	blx	r8
 801ad30:	4307      	orrs	r7, r0
 801ad32:	3568      	adds	r5, #104	; 0x68
 801ad34:	e7e9      	b.n	801ad0a <_fwalk_reent+0x12>

0801ad36 <__retarget_lock_init_recursive>:
 801ad36:	4770      	bx	lr

0801ad38 <__retarget_lock_acquire_recursive>:
 801ad38:	4770      	bx	lr

0801ad3a <__retarget_lock_release_recursive>:
 801ad3a:	4770      	bx	lr

0801ad3c <__swhatbuf_r>:
 801ad3c:	b570      	push	{r4, r5, r6, lr}
 801ad3e:	460e      	mov	r6, r1
 801ad40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad44:	2900      	cmp	r1, #0
 801ad46:	b096      	sub	sp, #88	; 0x58
 801ad48:	4614      	mov	r4, r2
 801ad4a:	461d      	mov	r5, r3
 801ad4c:	da08      	bge.n	801ad60 <__swhatbuf_r+0x24>
 801ad4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ad52:	2200      	movs	r2, #0
 801ad54:	602a      	str	r2, [r5, #0]
 801ad56:	061a      	lsls	r2, r3, #24
 801ad58:	d410      	bmi.n	801ad7c <__swhatbuf_r+0x40>
 801ad5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad5e:	e00e      	b.n	801ad7e <__swhatbuf_r+0x42>
 801ad60:	466a      	mov	r2, sp
 801ad62:	f000 f9a7 	bl	801b0b4 <_fstat_r>
 801ad66:	2800      	cmp	r0, #0
 801ad68:	dbf1      	blt.n	801ad4e <__swhatbuf_r+0x12>
 801ad6a:	9a01      	ldr	r2, [sp, #4]
 801ad6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ad70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ad74:	425a      	negs	r2, r3
 801ad76:	415a      	adcs	r2, r3
 801ad78:	602a      	str	r2, [r5, #0]
 801ad7a:	e7ee      	b.n	801ad5a <__swhatbuf_r+0x1e>
 801ad7c:	2340      	movs	r3, #64	; 0x40
 801ad7e:	2000      	movs	r0, #0
 801ad80:	6023      	str	r3, [r4, #0]
 801ad82:	b016      	add	sp, #88	; 0x58
 801ad84:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ad88 <__smakebuf_r>:
 801ad88:	898b      	ldrh	r3, [r1, #12]
 801ad8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ad8c:	079d      	lsls	r5, r3, #30
 801ad8e:	4606      	mov	r6, r0
 801ad90:	460c      	mov	r4, r1
 801ad92:	d507      	bpl.n	801ada4 <__smakebuf_r+0x1c>
 801ad94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ad98:	6023      	str	r3, [r4, #0]
 801ad9a:	6123      	str	r3, [r4, #16]
 801ad9c:	2301      	movs	r3, #1
 801ad9e:	6163      	str	r3, [r4, #20]
 801ada0:	b002      	add	sp, #8
 801ada2:	bd70      	pop	{r4, r5, r6, pc}
 801ada4:	ab01      	add	r3, sp, #4
 801ada6:	466a      	mov	r2, sp
 801ada8:	f7ff ffc8 	bl	801ad3c <__swhatbuf_r>
 801adac:	9900      	ldr	r1, [sp, #0]
 801adae:	4605      	mov	r5, r0
 801adb0:	4630      	mov	r0, r6
 801adb2:	f000 f895 	bl	801aee0 <_malloc_r>
 801adb6:	b948      	cbnz	r0, 801adcc <__smakebuf_r+0x44>
 801adb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adbc:	059a      	lsls	r2, r3, #22
 801adbe:	d4ef      	bmi.n	801ada0 <__smakebuf_r+0x18>
 801adc0:	f023 0303 	bic.w	r3, r3, #3
 801adc4:	f043 0302 	orr.w	r3, r3, #2
 801adc8:	81a3      	strh	r3, [r4, #12]
 801adca:	e7e3      	b.n	801ad94 <__smakebuf_r+0xc>
 801adcc:	4b0d      	ldr	r3, [pc, #52]	; (801ae04 <__smakebuf_r+0x7c>)
 801adce:	62b3      	str	r3, [r6, #40]	; 0x28
 801add0:	89a3      	ldrh	r3, [r4, #12]
 801add2:	6020      	str	r0, [r4, #0]
 801add4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801add8:	81a3      	strh	r3, [r4, #12]
 801adda:	9b00      	ldr	r3, [sp, #0]
 801addc:	6163      	str	r3, [r4, #20]
 801adde:	9b01      	ldr	r3, [sp, #4]
 801ade0:	6120      	str	r0, [r4, #16]
 801ade2:	b15b      	cbz	r3, 801adfc <__smakebuf_r+0x74>
 801ade4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ade8:	4630      	mov	r0, r6
 801adea:	f000 f975 	bl	801b0d8 <_isatty_r>
 801adee:	b128      	cbz	r0, 801adfc <__smakebuf_r+0x74>
 801adf0:	89a3      	ldrh	r3, [r4, #12]
 801adf2:	f023 0303 	bic.w	r3, r3, #3
 801adf6:	f043 0301 	orr.w	r3, r3, #1
 801adfa:	81a3      	strh	r3, [r4, #12]
 801adfc:	89a0      	ldrh	r0, [r4, #12]
 801adfe:	4305      	orrs	r5, r0
 801ae00:	81a5      	strh	r5, [r4, #12]
 801ae02:	e7cd      	b.n	801ada0 <__smakebuf_r+0x18>
 801ae04:	0801ab95 	.word	0x0801ab95

0801ae08 <_free_r>:
 801ae08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae0a:	2900      	cmp	r1, #0
 801ae0c:	d044      	beq.n	801ae98 <_free_r+0x90>
 801ae0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae12:	9001      	str	r0, [sp, #4]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	f1a1 0404 	sub.w	r4, r1, #4
 801ae1a:	bfb8      	it	lt
 801ae1c:	18e4      	addlt	r4, r4, r3
 801ae1e:	f000 f97d 	bl	801b11c <__malloc_lock>
 801ae22:	4a1e      	ldr	r2, [pc, #120]	; (801ae9c <_free_r+0x94>)
 801ae24:	9801      	ldr	r0, [sp, #4]
 801ae26:	6813      	ldr	r3, [r2, #0]
 801ae28:	b933      	cbnz	r3, 801ae38 <_free_r+0x30>
 801ae2a:	6063      	str	r3, [r4, #4]
 801ae2c:	6014      	str	r4, [r2, #0]
 801ae2e:	b003      	add	sp, #12
 801ae30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae34:	f000 b978 	b.w	801b128 <__malloc_unlock>
 801ae38:	42a3      	cmp	r3, r4
 801ae3a:	d908      	bls.n	801ae4e <_free_r+0x46>
 801ae3c:	6825      	ldr	r5, [r4, #0]
 801ae3e:	1961      	adds	r1, r4, r5
 801ae40:	428b      	cmp	r3, r1
 801ae42:	bf01      	itttt	eq
 801ae44:	6819      	ldreq	r1, [r3, #0]
 801ae46:	685b      	ldreq	r3, [r3, #4]
 801ae48:	1949      	addeq	r1, r1, r5
 801ae4a:	6021      	streq	r1, [r4, #0]
 801ae4c:	e7ed      	b.n	801ae2a <_free_r+0x22>
 801ae4e:	461a      	mov	r2, r3
 801ae50:	685b      	ldr	r3, [r3, #4]
 801ae52:	b10b      	cbz	r3, 801ae58 <_free_r+0x50>
 801ae54:	42a3      	cmp	r3, r4
 801ae56:	d9fa      	bls.n	801ae4e <_free_r+0x46>
 801ae58:	6811      	ldr	r1, [r2, #0]
 801ae5a:	1855      	adds	r5, r2, r1
 801ae5c:	42a5      	cmp	r5, r4
 801ae5e:	d10b      	bne.n	801ae78 <_free_r+0x70>
 801ae60:	6824      	ldr	r4, [r4, #0]
 801ae62:	4421      	add	r1, r4
 801ae64:	1854      	adds	r4, r2, r1
 801ae66:	42a3      	cmp	r3, r4
 801ae68:	6011      	str	r1, [r2, #0]
 801ae6a:	d1e0      	bne.n	801ae2e <_free_r+0x26>
 801ae6c:	681c      	ldr	r4, [r3, #0]
 801ae6e:	685b      	ldr	r3, [r3, #4]
 801ae70:	6053      	str	r3, [r2, #4]
 801ae72:	4421      	add	r1, r4
 801ae74:	6011      	str	r1, [r2, #0]
 801ae76:	e7da      	b.n	801ae2e <_free_r+0x26>
 801ae78:	d902      	bls.n	801ae80 <_free_r+0x78>
 801ae7a:	230c      	movs	r3, #12
 801ae7c:	6003      	str	r3, [r0, #0]
 801ae7e:	e7d6      	b.n	801ae2e <_free_r+0x26>
 801ae80:	6825      	ldr	r5, [r4, #0]
 801ae82:	1961      	adds	r1, r4, r5
 801ae84:	428b      	cmp	r3, r1
 801ae86:	bf04      	itt	eq
 801ae88:	6819      	ldreq	r1, [r3, #0]
 801ae8a:	685b      	ldreq	r3, [r3, #4]
 801ae8c:	6063      	str	r3, [r4, #4]
 801ae8e:	bf04      	itt	eq
 801ae90:	1949      	addeq	r1, r1, r5
 801ae92:	6021      	streq	r1, [r4, #0]
 801ae94:	6054      	str	r4, [r2, #4]
 801ae96:	e7ca      	b.n	801ae2e <_free_r+0x26>
 801ae98:	b003      	add	sp, #12
 801ae9a:	bd30      	pop	{r4, r5, pc}
 801ae9c:	24006970 	.word	0x24006970

0801aea0 <sbrk_aligned>:
 801aea0:	b570      	push	{r4, r5, r6, lr}
 801aea2:	4e0e      	ldr	r6, [pc, #56]	; (801aedc <sbrk_aligned+0x3c>)
 801aea4:	460c      	mov	r4, r1
 801aea6:	6831      	ldr	r1, [r6, #0]
 801aea8:	4605      	mov	r5, r0
 801aeaa:	b911      	cbnz	r1, 801aeb2 <sbrk_aligned+0x12>
 801aeac:	f000 f88c 	bl	801afc8 <_sbrk_r>
 801aeb0:	6030      	str	r0, [r6, #0]
 801aeb2:	4621      	mov	r1, r4
 801aeb4:	4628      	mov	r0, r5
 801aeb6:	f000 f887 	bl	801afc8 <_sbrk_r>
 801aeba:	1c43      	adds	r3, r0, #1
 801aebc:	d00a      	beq.n	801aed4 <sbrk_aligned+0x34>
 801aebe:	1cc4      	adds	r4, r0, #3
 801aec0:	f024 0403 	bic.w	r4, r4, #3
 801aec4:	42a0      	cmp	r0, r4
 801aec6:	d007      	beq.n	801aed8 <sbrk_aligned+0x38>
 801aec8:	1a21      	subs	r1, r4, r0
 801aeca:	4628      	mov	r0, r5
 801aecc:	f000 f87c 	bl	801afc8 <_sbrk_r>
 801aed0:	3001      	adds	r0, #1
 801aed2:	d101      	bne.n	801aed8 <sbrk_aligned+0x38>
 801aed4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801aed8:	4620      	mov	r0, r4
 801aeda:	bd70      	pop	{r4, r5, r6, pc}
 801aedc:	24006974 	.word	0x24006974

0801aee0 <_malloc_r>:
 801aee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aee4:	1ccd      	adds	r5, r1, #3
 801aee6:	f025 0503 	bic.w	r5, r5, #3
 801aeea:	3508      	adds	r5, #8
 801aeec:	2d0c      	cmp	r5, #12
 801aeee:	bf38      	it	cc
 801aef0:	250c      	movcc	r5, #12
 801aef2:	2d00      	cmp	r5, #0
 801aef4:	4607      	mov	r7, r0
 801aef6:	db01      	blt.n	801aefc <_malloc_r+0x1c>
 801aef8:	42a9      	cmp	r1, r5
 801aefa:	d905      	bls.n	801af08 <_malloc_r+0x28>
 801aefc:	230c      	movs	r3, #12
 801aefe:	603b      	str	r3, [r7, #0]
 801af00:	2600      	movs	r6, #0
 801af02:	4630      	mov	r0, r6
 801af04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af08:	4e2e      	ldr	r6, [pc, #184]	; (801afc4 <_malloc_r+0xe4>)
 801af0a:	f000 f907 	bl	801b11c <__malloc_lock>
 801af0e:	6833      	ldr	r3, [r6, #0]
 801af10:	461c      	mov	r4, r3
 801af12:	bb34      	cbnz	r4, 801af62 <_malloc_r+0x82>
 801af14:	4629      	mov	r1, r5
 801af16:	4638      	mov	r0, r7
 801af18:	f7ff ffc2 	bl	801aea0 <sbrk_aligned>
 801af1c:	1c43      	adds	r3, r0, #1
 801af1e:	4604      	mov	r4, r0
 801af20:	d14d      	bne.n	801afbe <_malloc_r+0xde>
 801af22:	6834      	ldr	r4, [r6, #0]
 801af24:	4626      	mov	r6, r4
 801af26:	2e00      	cmp	r6, #0
 801af28:	d140      	bne.n	801afac <_malloc_r+0xcc>
 801af2a:	6823      	ldr	r3, [r4, #0]
 801af2c:	4631      	mov	r1, r6
 801af2e:	4638      	mov	r0, r7
 801af30:	eb04 0803 	add.w	r8, r4, r3
 801af34:	f000 f848 	bl	801afc8 <_sbrk_r>
 801af38:	4580      	cmp	r8, r0
 801af3a:	d13a      	bne.n	801afb2 <_malloc_r+0xd2>
 801af3c:	6821      	ldr	r1, [r4, #0]
 801af3e:	3503      	adds	r5, #3
 801af40:	1a6d      	subs	r5, r5, r1
 801af42:	f025 0503 	bic.w	r5, r5, #3
 801af46:	3508      	adds	r5, #8
 801af48:	2d0c      	cmp	r5, #12
 801af4a:	bf38      	it	cc
 801af4c:	250c      	movcc	r5, #12
 801af4e:	4629      	mov	r1, r5
 801af50:	4638      	mov	r0, r7
 801af52:	f7ff ffa5 	bl	801aea0 <sbrk_aligned>
 801af56:	3001      	adds	r0, #1
 801af58:	d02b      	beq.n	801afb2 <_malloc_r+0xd2>
 801af5a:	6823      	ldr	r3, [r4, #0]
 801af5c:	442b      	add	r3, r5
 801af5e:	6023      	str	r3, [r4, #0]
 801af60:	e00e      	b.n	801af80 <_malloc_r+0xa0>
 801af62:	6822      	ldr	r2, [r4, #0]
 801af64:	1b52      	subs	r2, r2, r5
 801af66:	d41e      	bmi.n	801afa6 <_malloc_r+0xc6>
 801af68:	2a0b      	cmp	r2, #11
 801af6a:	d916      	bls.n	801af9a <_malloc_r+0xba>
 801af6c:	1961      	adds	r1, r4, r5
 801af6e:	42a3      	cmp	r3, r4
 801af70:	6025      	str	r5, [r4, #0]
 801af72:	bf18      	it	ne
 801af74:	6059      	strne	r1, [r3, #4]
 801af76:	6863      	ldr	r3, [r4, #4]
 801af78:	bf08      	it	eq
 801af7a:	6031      	streq	r1, [r6, #0]
 801af7c:	5162      	str	r2, [r4, r5]
 801af7e:	604b      	str	r3, [r1, #4]
 801af80:	4638      	mov	r0, r7
 801af82:	f104 060b 	add.w	r6, r4, #11
 801af86:	f000 f8cf 	bl	801b128 <__malloc_unlock>
 801af8a:	f026 0607 	bic.w	r6, r6, #7
 801af8e:	1d23      	adds	r3, r4, #4
 801af90:	1af2      	subs	r2, r6, r3
 801af92:	d0b6      	beq.n	801af02 <_malloc_r+0x22>
 801af94:	1b9b      	subs	r3, r3, r6
 801af96:	50a3      	str	r3, [r4, r2]
 801af98:	e7b3      	b.n	801af02 <_malloc_r+0x22>
 801af9a:	6862      	ldr	r2, [r4, #4]
 801af9c:	42a3      	cmp	r3, r4
 801af9e:	bf0c      	ite	eq
 801afa0:	6032      	streq	r2, [r6, #0]
 801afa2:	605a      	strne	r2, [r3, #4]
 801afa4:	e7ec      	b.n	801af80 <_malloc_r+0xa0>
 801afa6:	4623      	mov	r3, r4
 801afa8:	6864      	ldr	r4, [r4, #4]
 801afaa:	e7b2      	b.n	801af12 <_malloc_r+0x32>
 801afac:	4634      	mov	r4, r6
 801afae:	6876      	ldr	r6, [r6, #4]
 801afb0:	e7b9      	b.n	801af26 <_malloc_r+0x46>
 801afb2:	230c      	movs	r3, #12
 801afb4:	603b      	str	r3, [r7, #0]
 801afb6:	4638      	mov	r0, r7
 801afb8:	f000 f8b6 	bl	801b128 <__malloc_unlock>
 801afbc:	e7a1      	b.n	801af02 <_malloc_r+0x22>
 801afbe:	6025      	str	r5, [r4, #0]
 801afc0:	e7de      	b.n	801af80 <_malloc_r+0xa0>
 801afc2:	bf00      	nop
 801afc4:	24006970 	.word	0x24006970

0801afc8 <_sbrk_r>:
 801afc8:	b538      	push	{r3, r4, r5, lr}
 801afca:	4d06      	ldr	r5, [pc, #24]	; (801afe4 <_sbrk_r+0x1c>)
 801afcc:	2300      	movs	r3, #0
 801afce:	4604      	mov	r4, r0
 801afd0:	4608      	mov	r0, r1
 801afd2:	602b      	str	r3, [r5, #0]
 801afd4:	f7e9 fd86 	bl	8004ae4 <_sbrk>
 801afd8:	1c43      	adds	r3, r0, #1
 801afda:	d102      	bne.n	801afe2 <_sbrk_r+0x1a>
 801afdc:	682b      	ldr	r3, [r5, #0]
 801afde:	b103      	cbz	r3, 801afe2 <_sbrk_r+0x1a>
 801afe0:	6023      	str	r3, [r4, #0]
 801afe2:	bd38      	pop	{r3, r4, r5, pc}
 801afe4:	24006978 	.word	0x24006978

0801afe8 <__sread>:
 801afe8:	b510      	push	{r4, lr}
 801afea:	460c      	mov	r4, r1
 801afec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aff0:	f000 f8a0 	bl	801b134 <_read_r>
 801aff4:	2800      	cmp	r0, #0
 801aff6:	bfab      	itete	ge
 801aff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801affa:	89a3      	ldrhlt	r3, [r4, #12]
 801affc:	181b      	addge	r3, r3, r0
 801affe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b002:	bfac      	ite	ge
 801b004:	6563      	strge	r3, [r4, #84]	; 0x54
 801b006:	81a3      	strhlt	r3, [r4, #12]
 801b008:	bd10      	pop	{r4, pc}

0801b00a <__swrite>:
 801b00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b00e:	461f      	mov	r7, r3
 801b010:	898b      	ldrh	r3, [r1, #12]
 801b012:	05db      	lsls	r3, r3, #23
 801b014:	4605      	mov	r5, r0
 801b016:	460c      	mov	r4, r1
 801b018:	4616      	mov	r6, r2
 801b01a:	d505      	bpl.n	801b028 <__swrite+0x1e>
 801b01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b020:	2302      	movs	r3, #2
 801b022:	2200      	movs	r2, #0
 801b024:	f000 f868 	bl	801b0f8 <_lseek_r>
 801b028:	89a3      	ldrh	r3, [r4, #12]
 801b02a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b02e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b032:	81a3      	strh	r3, [r4, #12]
 801b034:	4632      	mov	r2, r6
 801b036:	463b      	mov	r3, r7
 801b038:	4628      	mov	r0, r5
 801b03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b03e:	f000 b817 	b.w	801b070 <_write_r>

0801b042 <__sseek>:
 801b042:	b510      	push	{r4, lr}
 801b044:	460c      	mov	r4, r1
 801b046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b04a:	f000 f855 	bl	801b0f8 <_lseek_r>
 801b04e:	1c43      	adds	r3, r0, #1
 801b050:	89a3      	ldrh	r3, [r4, #12]
 801b052:	bf15      	itete	ne
 801b054:	6560      	strne	r0, [r4, #84]	; 0x54
 801b056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b05a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b05e:	81a3      	strheq	r3, [r4, #12]
 801b060:	bf18      	it	ne
 801b062:	81a3      	strhne	r3, [r4, #12]
 801b064:	bd10      	pop	{r4, pc}

0801b066 <__sclose>:
 801b066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b06a:	f000 b813 	b.w	801b094 <_close_r>
	...

0801b070 <_write_r>:
 801b070:	b538      	push	{r3, r4, r5, lr}
 801b072:	4d07      	ldr	r5, [pc, #28]	; (801b090 <_write_r+0x20>)
 801b074:	4604      	mov	r4, r0
 801b076:	4608      	mov	r0, r1
 801b078:	4611      	mov	r1, r2
 801b07a:	2200      	movs	r2, #0
 801b07c:	602a      	str	r2, [r5, #0]
 801b07e:	461a      	mov	r2, r3
 801b080:	f7e9 fcdf 	bl	8004a42 <_write>
 801b084:	1c43      	adds	r3, r0, #1
 801b086:	d102      	bne.n	801b08e <_write_r+0x1e>
 801b088:	682b      	ldr	r3, [r5, #0]
 801b08a:	b103      	cbz	r3, 801b08e <_write_r+0x1e>
 801b08c:	6023      	str	r3, [r4, #0]
 801b08e:	bd38      	pop	{r3, r4, r5, pc}
 801b090:	24006978 	.word	0x24006978

0801b094 <_close_r>:
 801b094:	b538      	push	{r3, r4, r5, lr}
 801b096:	4d06      	ldr	r5, [pc, #24]	; (801b0b0 <_close_r+0x1c>)
 801b098:	2300      	movs	r3, #0
 801b09a:	4604      	mov	r4, r0
 801b09c:	4608      	mov	r0, r1
 801b09e:	602b      	str	r3, [r5, #0]
 801b0a0:	f7e9 fceb 	bl	8004a7a <_close>
 801b0a4:	1c43      	adds	r3, r0, #1
 801b0a6:	d102      	bne.n	801b0ae <_close_r+0x1a>
 801b0a8:	682b      	ldr	r3, [r5, #0]
 801b0aa:	b103      	cbz	r3, 801b0ae <_close_r+0x1a>
 801b0ac:	6023      	str	r3, [r4, #0]
 801b0ae:	bd38      	pop	{r3, r4, r5, pc}
 801b0b0:	24006978 	.word	0x24006978

0801b0b4 <_fstat_r>:
 801b0b4:	b538      	push	{r3, r4, r5, lr}
 801b0b6:	4d07      	ldr	r5, [pc, #28]	; (801b0d4 <_fstat_r+0x20>)
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	4604      	mov	r4, r0
 801b0bc:	4608      	mov	r0, r1
 801b0be:	4611      	mov	r1, r2
 801b0c0:	602b      	str	r3, [r5, #0]
 801b0c2:	f7e9 fce6 	bl	8004a92 <_fstat>
 801b0c6:	1c43      	adds	r3, r0, #1
 801b0c8:	d102      	bne.n	801b0d0 <_fstat_r+0x1c>
 801b0ca:	682b      	ldr	r3, [r5, #0]
 801b0cc:	b103      	cbz	r3, 801b0d0 <_fstat_r+0x1c>
 801b0ce:	6023      	str	r3, [r4, #0]
 801b0d0:	bd38      	pop	{r3, r4, r5, pc}
 801b0d2:	bf00      	nop
 801b0d4:	24006978 	.word	0x24006978

0801b0d8 <_isatty_r>:
 801b0d8:	b538      	push	{r3, r4, r5, lr}
 801b0da:	4d06      	ldr	r5, [pc, #24]	; (801b0f4 <_isatty_r+0x1c>)
 801b0dc:	2300      	movs	r3, #0
 801b0de:	4604      	mov	r4, r0
 801b0e0:	4608      	mov	r0, r1
 801b0e2:	602b      	str	r3, [r5, #0]
 801b0e4:	f7e9 fce5 	bl	8004ab2 <_isatty>
 801b0e8:	1c43      	adds	r3, r0, #1
 801b0ea:	d102      	bne.n	801b0f2 <_isatty_r+0x1a>
 801b0ec:	682b      	ldr	r3, [r5, #0]
 801b0ee:	b103      	cbz	r3, 801b0f2 <_isatty_r+0x1a>
 801b0f0:	6023      	str	r3, [r4, #0]
 801b0f2:	bd38      	pop	{r3, r4, r5, pc}
 801b0f4:	24006978 	.word	0x24006978

0801b0f8 <_lseek_r>:
 801b0f8:	b538      	push	{r3, r4, r5, lr}
 801b0fa:	4d07      	ldr	r5, [pc, #28]	; (801b118 <_lseek_r+0x20>)
 801b0fc:	4604      	mov	r4, r0
 801b0fe:	4608      	mov	r0, r1
 801b100:	4611      	mov	r1, r2
 801b102:	2200      	movs	r2, #0
 801b104:	602a      	str	r2, [r5, #0]
 801b106:	461a      	mov	r2, r3
 801b108:	f7e9 fcde 	bl	8004ac8 <_lseek>
 801b10c:	1c43      	adds	r3, r0, #1
 801b10e:	d102      	bne.n	801b116 <_lseek_r+0x1e>
 801b110:	682b      	ldr	r3, [r5, #0]
 801b112:	b103      	cbz	r3, 801b116 <_lseek_r+0x1e>
 801b114:	6023      	str	r3, [r4, #0]
 801b116:	bd38      	pop	{r3, r4, r5, pc}
 801b118:	24006978 	.word	0x24006978

0801b11c <__malloc_lock>:
 801b11c:	4801      	ldr	r0, [pc, #4]	; (801b124 <__malloc_lock+0x8>)
 801b11e:	f7ff be0b 	b.w	801ad38 <__retarget_lock_acquire_recursive>
 801b122:	bf00      	nop
 801b124:	2400696c 	.word	0x2400696c

0801b128 <__malloc_unlock>:
 801b128:	4801      	ldr	r0, [pc, #4]	; (801b130 <__malloc_unlock+0x8>)
 801b12a:	f7ff be06 	b.w	801ad3a <__retarget_lock_release_recursive>
 801b12e:	bf00      	nop
 801b130:	2400696c 	.word	0x2400696c

0801b134 <_read_r>:
 801b134:	b538      	push	{r3, r4, r5, lr}
 801b136:	4d07      	ldr	r5, [pc, #28]	; (801b154 <_read_r+0x20>)
 801b138:	4604      	mov	r4, r0
 801b13a:	4608      	mov	r0, r1
 801b13c:	4611      	mov	r1, r2
 801b13e:	2200      	movs	r2, #0
 801b140:	602a      	str	r2, [r5, #0]
 801b142:	461a      	mov	r2, r3
 801b144:	f7e9 fc60 	bl	8004a08 <_read>
 801b148:	1c43      	adds	r3, r0, #1
 801b14a:	d102      	bne.n	801b152 <_read_r+0x1e>
 801b14c:	682b      	ldr	r3, [r5, #0]
 801b14e:	b103      	cbz	r3, 801b152 <_read_r+0x1e>
 801b150:	6023      	str	r3, [r4, #0]
 801b152:	bd38      	pop	{r3, r4, r5, pc}
 801b154:	24006978 	.word	0x24006978

0801b158 <_init>:
 801b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b15a:	bf00      	nop
 801b15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b15e:	bc08      	pop	{r3}
 801b160:	469e      	mov	lr, r3
 801b162:	4770      	bx	lr

0801b164 <_fini>:
 801b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b166:	bf00      	nop
 801b168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b16a:	bc08      	pop	{r3}
 801b16c:	469e      	mov	lr, r3
 801b16e:	4770      	bx	lr
